#!/usr/bin/python
# -*- coding: utf-8 -*-

import sys
import os
import shelve
from optparse import OptionParser
from datetime import datetime
import glob
from distutils import sysconfig

OKGREEN = '\033[92m'
WARNING = '\033[93m'
RED = '\033[91m'
ENDC = '\033[0m'

##########################################################################################################################
def initParser(current):
	global list_options,list_rules,list_wrappers

	us="%prog [options] ["+"|".join(list_rules)+"] ["+"|".join(list_options)+"] ["+"|".join(list_wrappers)+"]"
	parser=OptionParser(usage=us,description="default invocation : %prog"+invocation,version="%prog v"+numversion)
	parser.add_option("-v", "--verbose",
										help="more message on what is happening",
										action="store_true",
										dest="verbose",
										default=current['verbose'])
	parser.add_option("-q", "--quiet",
										help="please be quiet",
										action="store_false",
										dest="verbose",
										default=current['verbose'])
	parser.add_option("-p", "--platform",
										help="{linux|windows|mac}",
										type="choice",
										choices=["linux", "windows",  "mac"],
										action="store",
										dest="platform",
										default=current['platform'])
	parser.add_option("-d", "--dest",
										help="destination folder when installing",
										metavar="FOLDER",
										dest="destination",
										default=current['destination'])
	parser.add_option("-j", "--jobs",
										help="number of jobs",
										type='int',
										dest="jobs",
										default=current['jobs'])
	parser.add_option("-t","--testlist",
										help="testlist management : {show|all|test1+test2+test3}",
										metavar="TESTS-COMMAND",
										dest="testlists",
										default="")
	return parser

##########################################################################################################################
def testManagement(cde):
	global current
	if cde=="all":
		writeTestList(allTests())
		current['rule']='test'
	elif cde=='list':
		afficheTests()
		sys.exit(0)
	else:
		writeTestList([x+'TestSuite.h' for x in cde.split('+')])
		current['rule']='test'

##########################################################################################################################
def checkList(l):
	for s in l:
		if not os.path.exists('src/testunits/'+s):
			print RED+'Test '+WARNING+s[:-11]+RED+' (src/testunits/'+s+') does not exists'+ENDC
			print
			afficheTests()
			sys.exit(0)

##########################################################################################################################
def writeTestList(l):
	checkList(l)
	today = datetime.now()
	f = open('src/testunits/testList.cmake', 'w')
	f.write("# file automatically generated by act\n")
	f.write("# "+today.strftime("%A, %d. %B %Y %H:%M")+"\n")
	f.write("# do not change it\n")
	f.write("set(AGRUM_TESTS \n  ")
	f.write("\n  ".join(l))
	f.write("\n)\n")
	f.close()

##########################################################################################################################
def allTests():
	return sorted([os.path.basename(x) for x in glob.glob('src/testunits/*TestSuite.h')])

##########################################################################################################################
def afficheTests():
	l=allTests()
	l=[s[:-11] for s in l]
	w=max([len(x) for x in l])
	nbr=80/w
	i=0
	for s in l:
		print " "+s.ljust(w),
		i+=1
		if i>nbr:
			i=0
			print
	if i!=0:
		print
	print


##########################################################################################################################
def execute(s):
	global sh
	if(sh!=""):
		sh+=";"
	sh+=s

##########################################################################################################################
def cleanAll():
	print "..."+WARNING+" cleaning"+ENDC+" ...",
	os.system("rm -rf build")
	print OKGREEN+"done"+ENDC
	print
	sys.exit(0)

##########################################################################################################################
def showAll():
	global persistent
	print "Actual options/args"
	print "-------------------"
	for key in persistent:
		if key in ['cleanAll']: # keys we do not need to show
			continue
		print "  "+key+" : "+persistent[key].__str__()
	print "-------------------"
	print
	sys.exit(0)


##########################################################################################################################
def safe_cd(folder):
	cde="[ ! -d "+folder+" ] && mkdir "+folder+" ; cd "+folder
	execute(cde)

##########################################################################################################################
def checkConstraints(parser,options,args):
	global current,persistent
	global list_rules,list_options,list_wrappers

	current['verbose']=options.verbose
	current['platform']=options.platform
	current['destination']=options.destination
	current['jobs']=options.jobs

	for key in 'rule option wrapper'.split():
		current[key]=''

	if len(args) >0: # no args for cdline, just options
		for arg in args:
			if arg in list_rules:
				current['rule']=arg
				continue
			if arg in list_options:
				current['option']=arg
				continue
			if arg in list_wrappers:
				current['wrapper']=arg
				continue
			parser.error(arg+" is an invalid argument")
	else:
		for key in 'rule option wrapper'.split():
			current[key]=persistent[key]

	if current['option']=='':
		current['option']='release'
	if current['rule']=='' and current['wrapper']!='':
		current['rule']='wrapper'
	if current['option']=='debug':
		if current['rule']=='agrum':
			current['rule']='agrum-dbg'

	if current['wrapper']!="":
		if (not current['rule'] in ["wrapper", "install","test","uninstall"]):
			parser.print_help()
			parser.error("incompatibilty between options <rule>='"+current['rule'] +"' and <wrapper>='"+current['wrapper']+"'")
		if current['option']!='release':
			parser.print_help()
			parser.error('no debug mode for wrappers compilation')

	if current['platform']=='windows':
		if not current['rule'] in ["agrum","test","run","clean",'package']:
			parser.print_help()
			parser.error("incompatibilty between options <platform>='"+current['platform']+"' and <rule>='"+current['rule']+"'")
		if not current['option']=='release':
			parser.print_help()
			parser.error("incompatibilty between options <platform>='"+current['platform']+"' and <option>='"+current['option']+"'")


##########################################################################################################################
def proceed(options):
	folders=cmake_option=make_options=run_cde =""

	if options['wrapper']!="": # we know rule in ["install","wrapper", "test"]
		folders=['build','wrappers',options['wrapper']]
		cmake_option="-DCMAKE_BUILD_TYPE=RELEASE ../../../wrappers/"+options['wrapper']+"/"
		if options['rule'] in ["install"]:
			make_options=options['rule']
		else:
			make_options=""
		if options['rule']=='test':
			if options['wrapper']=='pyAgrum':
				run_cde="PYTHON_PATH=. python ../../../wrappers/pyAgrum/testunits/TestSuite.py"
			else:
				print RED+"No tests for "+options['wrapper']+ENDC
				sys.exit(0)
		else:
			run_cde=""
	else:
		if options['rule']=='package':
			folders=["build",'package_'+options['platform'],options['option']]
		else:
			folders=["build",options['platform'],options['option']]
		cmake_option=" -DCMAKE_BUILD_TYPE="+options['option'].upper()+" ../../../src"
		if (options['platform']=="windows"):
			cmake_option=cmake_option+" -DCMAKE_TOOLCHAIN_FILE=../../../src/cmake/Toolchain-mingw32.cmake -DCMAKE_INSTALL_PREFIX=_CPack_Packages/win32/TGZ/agrum-0.6.0-win32"

		if (options['rule']=="test" or options['rule']=="run"):
			make_options=options['rule']
			run_cde="./"+options['rule']
		else:
			make_options=options['rule']
			run_cde=""

	if (options['platform'] != "windows"):
		cmake_option=cmake_option+" -DCMAKE_INSTALL_PREFIX="+options['destination']

	cmake_option=cmake_option+" -DCMAKE_VERBOSE_MAKEFILE="
	if (options['verbose']):
		cmake_option=cmake_option+"ON"
	else:
		cmake_option=cmake_option+"OFF"

	make_options=make_options+" -j "+options['jobs'].__str__()

	[safe_cd(s) for s in folders]
	execute("cmake "+cmake_option)
	execute("make "+make_options)
	if (run_cde!=""):
		if (options['platform'] == "windows"):
			run_cde="wine "+run_cde
		execute(run_cde)
	[execute("cd ..") for s in folders]

##########################################################################################################################
def uninstall(options):
	install_folder=options['destination']
	if options['wrapper']!='':
		install_folder=sysconfig.get_python_lib(1,0,prefix=install_folder)
		print "suppression de "+RED+install_folder+"/pyAgrum.py"+ENDC
		os.system('rm -f '+install_folder+"/pyAgrum.py")
		print "suppression de "+RED+install_folder+"/_pyAgrum.so"+ENDC
		os.system('rm -f '+install_folder+"/_pyAgrum.so")
	else:
		print "suppresion de "+RED+install_folder+"/lib/libagrum*"+ENDC
		os.system('rm -f '+install_folder+"/lib/libagrum*")
		print "suppresion récursive de "+RED+install_folder+"/lib/aGrUM"+ENDC
		os.system('cd '+install_folder+'/lib && rm -rf aGrUM')
		print "suppresion récursive de "+RED+install_folder+"/include/agrum"+ENDC
		os.system('cd '+install_folder+'/include && rm -rf agrum')
	sys.exit(0)
	
##########################################################################################################################
default={}
current={}
persistent={}

list_rules="test run agrum wrapper install doc clean default show uninstall package".split()
list_options="debug release".split()
list_wrappers="pyAgrum jAgrum".split()

default['platform']="linux"
default['option']="release"
default['rule']="agrum"
default['destination']="/usr"
default['wrapper']=""
default['jobs']="5"
default['verbose']=False

shlv=shelve.open(".options.mak.py",writeback=True)
if shlv.has_key('persistent'):
	persistent=shlv['persistent']

shlv=shelve.open(".options.mak.py",writeback=True)
if shlv.has_key('persistent'):
	persistent=shlv['persistent']

for key in default.iterkeys():
	if persistent.has_key(key):
		current[key]=persistent[key]
	else:
		current[key]=default[key]

invocation=" agrum release -d /usr -j 5 -q -p linux"
numversion="1.0"

print ENDC+RED+"aGrUM"+ENDC+" compilation tool "+RED+"v"+numversion+ENDC
print "(c) 2010 "+OKGREEN+"aGrUM Team"+ENDC
print

parser=initParser(current)
(options, args)=parser.parse_args()

checkConstraints(parser,options,args)

## SPECIAL RULES
if current['rule']=='show':
	showAll()
if current['rule']=='clean':
	cleanAll()
if current['rule']=='uninstall':
	uninstall(current)
if current['rule']=='default':
	current=default
	print "invocation : act,n "+current['rule']+" "+current['option']+' '+current['wrapper']
if options.testlists!="":
	testManagement(options.testlists)

if len(args)==0:
	print WARNING+"invocation"+ENDC+" : "+OKGREEN+"act "+current['rule']+" "+current['option']+' '+current['wrapper']+ENDC
	print

for key in current:
	persistent[key]=current[key]
shlv['persistent']=persistent
shlv.close()

#needed for cmake
if not os.path.exists('src/testunits/testList.cmake'):
	writeTestList(allTests())

global sh
sh="";
proceed(persistent)
if (options.verbose):
	print sh
os.system(sh)
