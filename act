#!/usr/bin/python
# -*- coding: utf-8 -*-

#***************************************************************************
#*   Copyright (C) 2010 by Pierre-Henri WUILLEMIN                          *
#*   {prenom.nom}_at_lip6.fr                                               *
#*                                                                         *
#*   This program is free software; you can redistribute it and/or modify  *
#*   it under the terms of the GNU General Public License as published by  *
#*   the Free Software Foundation; either version 2 of the License, or     *
#*   (at your option) any later version.                                   *
#*                                                                         *
#*   This program is distributed in the hope that it will be useful,       *
#*   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
#*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
#*   GNU General Public License for more details.                          *
#*                                                                         *
#*   You should have received a copy of the GNU General Public License     *
#*   along with this program; if not, write to the                         *
#*   Free Software Foundation, Inc.,                                       *
#*   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
#***************************************************************************
from __future__ import print_function

from acttools import *

def main():
  ##
  # options management
  initParams()

  # persistent values of current are used as default for options
  current=getCurrent()
  configureOptions(current)

  (options, args)=parseCommandLine(current)
  # colors, fun & verbosity partly controlled by options (--no-fun, ...)
  configureOutputs(options)

  if not options.no_fun:
    about()

  configureTools()

  # check current consistency and update it if necessary
  checkCurrent(current,options,args)

  ##
  # from now, current contains the specification

  # looking at special commands (clean/show/etc.)
  if not specialActions(current):
    # creating "classical" compilation from cmake/make/postprocess
    safe_cd(current,"build")

    for target in current["targets"]:
        buildCmake(current,target)
        buildMake(current,target)
        buildPost(current,target)

    safe_cd(current,"..")

import traceback
import sys
if __name__ == "__main__":
    try:
      main()
    except KeyboardInterrupt:
      print("\n Shutdown requested...exiting \n")
      sys.exit(1)
    except Exception:
      traceback.print_exc(file=sys.stdout)
      sys.exit(1)
