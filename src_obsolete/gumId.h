/***************************************************************************
 *   Copyright (C) 2005 by Christophe GONZALES and Pierre-Henri WUILLEMIN  *
 *   {prenom.nom}_at_lip6.fr                                                  *
 *   test $Id: $                                                           *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program; if not, write to the                         *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 ***************************************************************************/

/** @file
 * @brief Class for generating the IDs of aGrUM's objects
 *
 * @author Christophe GONZALES and Pierre-Henri WUILLEMIN
 *
 * This file provides class gumIdFactory, that is used for computing automatically
 * the ids of aGrUM's objects: in a graph, each node is endowed with an ID that
 * uniquely identifies it. The gumIdFactory provides a simple way to produce
 * suitable identifiers through the use of its getNewId() member.
 */


#ifndef GUM_ID_H
#define GUM_ID_H

#include <string>
#include <iostream>
#include <agrum/gumExceptions.h>


/// types for storing the ids ...
typedef unsigned int gumId;

/// transforms a gumId into a string
std::string gumId2string (const gumId&);



/* ============================================================================== */
/* ===                               ID FACTORY                               === */
/* ============================================================================== */
/** @class gumIdFactory
 * @brief The class for computing automatically the ids of aGrUM's objects.
 *
 * In a graph, each node is endowed with an ID that uniquely identifies it. The
 * gumIdFactory provides a simple way to produce suitable identifiers through
 * the use of its getNewId() member. */
/* ============================================================================== */
class gumIdFactory {
public:
  // ##############################################################################
  /// @name Constructors / Destructors
  // ##############################################################################
  /// @{

  // ==============================================================================
  /// returns a new factory
  /** @param id By default, Ids start from 1. But in some cases, it may be
   * convenient to start from another number. Parameter \em id can then be used
   * to specify this alternate number. */
  // ==============================================================================
  explicit gumIdFactory (const gumId& id = 0) ;

  // ==============================================================================
  /// copy constructor
  // ==============================================================================
  gumIdFactory (const gumIdFactory&) ;

  // ==============================================================================
  /// destructor
  // ==============================================================================
  ~gumIdFactory () ;

  /// @}


  // ##############################################################################
  /// @name Accessors / Modifiers
  // ##############################################################################
  /// @{

  // ==============================================================================
  /// returns a new "unique" ID
  /** In a gumIdFactory, the generated Ids always increase, that is, the last Id
   * generated is greater than all the previously generated ones. */
  // ==============================================================================
  const gumId& getNewId () ;

  // ==============================================================================
  /// returns the max of the IDs generated by the factory
  // ==============================================================================
  const gumId& getMaxId () const ;

  /// @}



  // ##############################################################################
  /// @name Operators
  // ##############################################################################
  /// @{

  // ==============================================================================
  /// copy operator
  /** @throws gumIdError exception is thrown if the max_ID of from is lower
   * than the current max_ID (else this may lead to different objects having the
   * same ID). */
  // ==============================================================================
  gumIdFactory& operator= (const gumIdFactory& from);

  /// @}



private:
  /// the max of all the IDs so far generated by the class
  gumId max_ID;
};



/* ============================================================================== */
/* ============================================================================== */
/* ===                      ID FACTORY'S IMPLEMENTATIONS                      === */
/* ============================================================================== */
/* ============================================================================== */

#ifndef GUM_NO_INLINE
#include "gumId.inl"
#endif /* GUM_NO_INLINE */



#endif /* gumID */
