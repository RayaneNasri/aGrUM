/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.4.0
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


#define SWIG_VERSION 0x040400
#define SWIGPYTHON
#define SWIG_DIRECTORS
#define SWIG_PYTHON_DIRECTOR_NO_VTABLE

#define SWIG_name    "_bn"
/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

#if defined(__cplusplus) && __cplusplus >=201103L
# define SWIG_NULLPTR nullptr
#else
# define SWIG_NULLPTR NULL
#endif 

/* -----------------------------------------------------------------------------
 * swigcompat.swg
 *
 * Macros to provide support compatibility with older C and C++ standards.
 *
 * Note that SWIG expects __cplusplus to be defined to the appropriate C++ standard.
 * MSVC users are urged to check and examine the /Zc:__cplusplus compiler option.
 * See https://learn.microsoft.com/en-us/cpp/build/reference/zc-cplusplus.
 * ----------------------------------------------------------------------------- */

/* C99 and C++11 should provide snprintf, but define SWIG_NO_SNPRINTF
 * if you're missing it.
 */
#if ((defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L) || \
     (defined __cplusplus && __cplusplus >= 201103L) || \
     defined SWIG_HAVE_SNPRINTF) && \
    !defined SWIG_NO_SNPRINTF
# define SWIG_snprintf(O,S,F,A) snprintf(O,S,F,A)
# define SWIG_snprintf2(O,S,F,A,B) snprintf(O,S,F,A,B)
#else
/* Fallback versions ignore the buffer size, but most of our uses either have a
 * fixed maximum possible size or dynamically allocate a buffer that's large
 * enough.
 */
# define SWIG_snprintf(O,S,F,A) sprintf(O,F,A)
# define SWIG_snprintf2(O,S,F,A,B) sprintf(O,F,A,B)
#endif


#if defined(__GNUC__) && defined(_WIN32) && !defined(SWIG_PYTHON_NO_HYPOT_WORKAROUND)
/* Workaround for '::hypot' has not been declared', see https://bugs.python.org/issue11566 */
# include <math.h>
#endif

#if !defined(PY_SSIZE_T_CLEAN) && !defined(SWIG_NO_PY_SSIZE_T_CLEAN)
#define PY_SSIZE_T_CLEAN
#endif

#if __GNUC__ >= 7
#pragma GCC diagnostic push
#if defined(__cplusplus) && __cplusplus >=201703L
#pragma GCC diagnostic ignored "-Wregister" /* For python-2.7 headers that use register */
#endif
#endif

#if defined(_DEBUG) && defined(SWIG_PYTHON_INTERPRETER_NO_DEBUG)
/* Use debug wrappers with the Python release dll */

#if defined(_MSC_VER) && _MSC_VER >= 1929
/* Workaround compilation errors when redefining _DEBUG in MSVC 2019 version 16.10 and later
 * See https://github.com/swig/swig/issues/2090 */
# include <corecrt.h>
#endif

# undef _DEBUG
# include <Python.h>
# define _DEBUG 1
#else
# include <Python.h>
#endif

#if !defined(SWIGPYTHON_BUILTIN) && PY_VERSION_HEX >= 0x03030000
# define SWIG_HEAPTYPES

/* Note: Currently this won't activate - it is in place ready for when the
 * SWIGPYTHON_BUILTIN condition above gets removed. */
# if PY_VERSION_HEX < 0x030c0000 && defined(SWIGPYTHON_BUILTIN)
#  include <structmember.h>
#  define Py_READONLY READONLY
#  define Py_T_PYSSIZET T_PYSSIZET
# endif
#endif

#if __GNUC__ >= 7
#pragma GCC diagnostic pop
#endif

#include <stdio.h>
#include <stdlib.h>

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2
#define SWIG_POINTER_NO_NULL       0x4
#define SWIG_POINTER_CLEAR         0x8
#define SWIG_POINTER_RELEASE       (SWIG_POINTER_CLEAR | SWIG_POINTER_DISOWN)

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows returning the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
/* Runtime errors are < 0 */
#define SWIG_ERROR                 (-1)
/* Errors in range -1 to -99 are in swigerrors.swg (errors for all languages including those not using the runtime) */
/* Errors in range -100 to -199 are language specific errors defined in *errors.swg */
/* Errors < -200 are generic runtime specific errors */
#define SWIG_ERROR_RELEASE_NOT_OWNED (-200)

#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporary objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del object mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(const swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  Choose the last
     name. It should be the most specific; a fully resolved name
     but not necessarily with default template parameters expanded. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* SWIG Errors applicable to all language modules, values are reserved from -1 to -99 */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13


/* Compatibility macros for Python 3 */
#if PY_VERSION_HEX >= 0x03000000

#define PyClass_Check(obj) PyObject_IsInstance(obj, (PyObject *)&PyType_Type)
#define PyInt_Check(x) PyLong_Check(x)
#define PyInt_AsLong(x) PyLong_AsLong(x)
#define PyInt_FromLong(x) PyLong_FromLong(x)
#define PyInt_FromSize_t(x) PyLong_FromSize_t(x)
#define PyString_Check(name) PyBytes_Check(name)
#define PyString_FromString(x) PyUnicode_FromString(x)
#define PyString_Format(fmt, args)  PyUnicode_Format(fmt, args)
#define PyString_AsString(str) PyBytes_AsString(str)
#define PyString_Size(str) PyBytes_Size(str)	
#define PyString_InternFromString(key) PyUnicode_InternFromString(key)
#define Py_TPFLAGS_HAVE_CLASS Py_TPFLAGS_BASETYPE
#define _PyLong_FromSsize_t(x) PyLong_FromSsize_t(x)

#endif

/* SWIG APIs for compatibility of both Python 2 & 3 */

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_FromFormat PyUnicode_FromFormat
#else
#  define SWIG_Python_str_FromFormat PyString_FromFormat
#endif


/* Wrapper around PyUnicode_AsUTF8AndSize - call Py_XDECREF on the returned pbytes when finished with the returned string */
SWIGINTERN const char *
SWIG_PyUnicode_AsUTF8AndSize(PyObject *str, Py_ssize_t *psize, PyObject **pbytes)
{
#if PY_VERSION_HEX >= 0x03030000
# if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x030A0000
  *pbytes = NULL;
  return PyUnicode_AsUTF8AndSize(str, psize);
# else
  const char *chars;
  *pbytes = PyUnicode_AsUTF8String(str);
  chars = *pbytes ? PyBytes_AsString(*pbytes) : NULL;
  if (chars && psize)
    *psize = PyBytes_Size(*pbytes);
  return chars;
# endif
#else
  char *chars = NULL;
  *pbytes = NULL;
  PyString_AsStringAndSize(str, &chars, psize);
  return chars;
#endif
}

SWIGINTERN PyObject*
SWIG_Python_str_FromChar(const char *c)
{
#if PY_VERSION_HEX >= 0x03000000
  return PyUnicode_FromString(c); 
#else
  return PyString_FromString(c);
#endif
}

/* SWIGPY_USE_CAPSULE is no longer used within SWIG itself, but some user interface files check for it. */
# define SWIGPY_USE_CAPSULE
#ifdef SWIGPYTHON_BUILTIN
# define SWIGPY_CAPSULE_ATTR_NAME "type_pointer_capsule_builtin" SWIG_TYPE_TABLE_NAME
#else
# define SWIGPY_CAPSULE_ATTR_NAME "type_pointer_capsule" SWIG_TYPE_TABLE_NAME
#endif
# define SWIGPY_CAPSULE_NAME ("swig_runtime_data" SWIG_RUNTIME_VERSION "." SWIGPY_CAPSULE_ATTR_NAME)

#if PY_VERSION_HEX < 0x03020000
#define PyDescr_TYPE(x) (((PyDescrObject *)(x))->d_type)
#define PyDescr_NAME(x) (((PyDescrObject *)(x))->d_name)
#define Py_hash_t long
#endif

#ifdef Py_LIMITED_API
# define PyTuple_GET_ITEM PyTuple_GetItem
/* Note that PyTuple_SetItem() has different semantics from PyTuple_SET_ITEM as it decref's the original tuple item, so in general they cannot be used
  interchangeably. However in SWIG-generated code PyTuple_SET_ITEM is only used with newly initialized tuples without any items and for them this does work. */
# define PyTuple_SET_ITEM PyTuple_SetItem
# define PyTuple_GET_SIZE PyTuple_Size
# define PyCFunction_GET_FLAGS PyCFunction_GetFlags
# define PyCFunction_GET_FUNCTION PyCFunction_GetFunction
# define PyCFunction_GET_SELF PyCFunction_GetSelf
# define PyList_GET_ITEM PyList_GetItem
# define PyList_SET_ITEM PyList_SetItem
# define PySliceObject PyObject
#endif

/* Increment and Decrement wrappers - for portability when using the stable abi and for performance otherwise */
#ifdef Py_LIMITED_API
# define SWIG_Py_INCREF Py_IncRef
# define SWIG_Py_XINCREF Py_IncRef
# define SWIG_Py_DECREF Py_DecRef
# define SWIG_Py_XDECREF Py_DecRef
#else
# define SWIG_Py_INCREF Py_INCREF
# define SWIG_Py_XINCREF Py_XINCREF
# define SWIG_Py_DECREF Py_DECREF
# define SWIG_Py_XDECREF Py_XDECREF
#endif

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIME PyObject*
SWIG_Python_ErrorType(int code) {
  PyObject* type = 0;
  switch(code) {
  case SWIG_MemoryError:
    type = PyExc_MemoryError;
    break;
  case SWIG_IOError:
    type = PyExc_IOError;
    break;
  case SWIG_RuntimeError:
    type = PyExc_RuntimeError;
    break;
  case SWIG_IndexError:
    type = PyExc_IndexError;
    break;
  case SWIG_TypeError:
    type = PyExc_TypeError;
    break;
  case SWIG_DivisionByZero:
    type = PyExc_ZeroDivisionError;
    break;
  case SWIG_OverflowError:
    type = PyExc_OverflowError;
    break;
  case SWIG_SyntaxError:
    type = PyExc_SyntaxError;
    break;
  case SWIG_ValueError:
    type = PyExc_ValueError;
    break;
  case SWIG_SystemError:
    type = PyExc_SystemError;
    break;
  case SWIG_AttributeError:
    type = PyExc_AttributeError;
    break;
  case SWIG_NullReferenceError:
    type = PyExc_TypeError;
    break;
  default:
    type = PyExc_RuntimeError;
  }
  return type;
}


SWIGRUNTIME void
SWIG_Python_AddErrorMsg(const char* mesg)
{
  PyObject *type = 0;
  PyObject *value = 0;
  PyObject *traceback = 0;

  if (PyErr_Occurred())
    PyErr_Fetch(&type, &value, &traceback);
  if (value) {
    PyObject *old_str = PyObject_Str(value);
    PyObject *bytes = NULL;
    const char *tmp = SWIG_PyUnicode_AsUTF8AndSize(old_str, NULL, &bytes);
    PyErr_Clear();
    SWIG_Py_XINCREF(type);
    if (tmp)
      PyErr_Format(type, "%s %s", tmp, mesg);
    else
      PyErr_Format(type, "%s", mesg);
    SWIG_Py_XDECREF(bytes);
    SWIG_Py_DECREF(old_str);
    SWIG_Py_DECREF(value);
  } else {
    PyErr_SetString(PyExc_RuntimeError, mesg);
  }
}

SWIGRUNTIME int
SWIG_Python_TypeErrorOccurred(PyObject *obj)
{
  PyObject *error;
  if (obj)
    return 0;
  error = PyErr_Occurred();
  return error && PyErr_GivenExceptionMatches(error, PyExc_TypeError);
}

SWIGRUNTIME void
SWIG_Python_RaiseOrModifyTypeError(const char *message)
{
  if (SWIG_Python_TypeErrorOccurred(NULL)) {
    /* Use existing TypeError to preserve stacktrace and enhance with given message */
    PyObject *newvalue;
    PyObject *type = NULL, *value = NULL, *traceback = NULL;
    PyErr_Fetch(&type, &value, &traceback);
#if PY_VERSION_HEX >= 0x03000000
    newvalue = PyUnicode_FromFormat("%S\nAdditional information:\n%s", value, message);
#else
    newvalue = PyString_FromFormat("%s\nAdditional information:\n%s", PyString_AsString(value), message);
#endif
    if (newvalue) {
      SWIG_Py_XDECREF(value);
      PyErr_Restore(type, newvalue, traceback);
    } else {
      PyErr_Restore(type, value, traceback);
    }
  } else {
    /* Raise TypeError using given message */
    PyErr_SetString(PyExc_TypeError, message);
  }
}

#if defined(SWIG_PYTHON_NO_THREADS)
#  if defined(SWIG_PYTHON_THREADS)
#    undef SWIG_PYTHON_THREADS
#  endif
#endif
#if defined(SWIG_PYTHON_THREADS) /* Threading support is enabled */
#  if !defined(SWIG_PYTHON_USE_GIL) && !defined(SWIG_PYTHON_NO_USE_GIL)
#    define SWIG_PYTHON_USE_GIL
#  endif
#  if defined(SWIG_PYTHON_USE_GIL) /* Use PyGILState threads calls */
#    if !defined(SWIG_PYTHON_INITIALIZE_THREADS)
#      if PY_VERSION_HEX < 0x03070000
#        define SWIG_PYTHON_INITIALIZE_THREADS PyEval_InitThreads()
#      else
#        define SWIG_PYTHON_INITIALIZE_THREADS
#      endif
#    endif
#    ifdef __cplusplus /* C++ code */
       class SWIG_Python_Thread_Block {
         bool status;
         PyGILState_STATE state;
       public:
         void end() { if (status) { PyGILState_Release(state); status = false;} }
         SWIG_Python_Thread_Block() : status(true), state(PyGILState_Ensure()) {}
         ~SWIG_Python_Thread_Block() { end(); }
       };
       class SWIG_Python_Thread_Allow {
         bool status;
         PyThreadState *save;
       public:
         void end() { if (status) { status = false; PyEval_RestoreThread(save); }}
         SWIG_Python_Thread_Allow() : status(true), save(PyEval_SaveThread()) {}
         ~SWIG_Python_Thread_Allow() { end(); }
       };
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   SWIG_Python_Thread_Block _swig_thread_block
#      define SWIG_PYTHON_THREAD_END_BLOCK     _swig_thread_block.end()
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   SWIG_Python_Thread_Allow _swig_thread_allow
#      define SWIG_PYTHON_THREAD_END_ALLOW     _swig_thread_allow.end()
#    else /* C code */
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   PyGILState_STATE _swig_thread_block = PyGILState_Ensure()
#      define SWIG_PYTHON_THREAD_END_BLOCK     PyGILState_Release(_swig_thread_block)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   PyThreadState *_swig_thread_allow = PyEval_SaveThread()
#      define SWIG_PYTHON_THREAD_END_ALLOW     PyEval_RestoreThread(_swig_thread_allow)
#    endif
#  else /* Old thread way, not implemented, user must provide it */
#    if !defined(SWIG_PYTHON_INITIALIZE_THREADS)
#      define SWIG_PYTHON_INITIALIZE_THREADS
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_BLOCK)
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_BLOCK)
#      define SWIG_PYTHON_THREAD_END_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_ALLOW)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_ALLOW)
#      define SWIG_PYTHON_THREAD_END_ALLOW
#    endif
#  endif
#else /* No thread support */
#  define SWIG_PYTHON_INITIALIZE_THREADS
#  define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#  define SWIG_PYTHON_THREAD_END_BLOCK
#  define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#  define SWIG_PYTHON_THREAD_END_ALLOW
#endif

/* -----------------------------------------------------------------------------
 * Python API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
  int type;
  const char *name;
  long lvalue;
  double dvalue;
  void   *pvalue;
  swig_type_info **ptype;
} swig_const_info;

#ifdef __cplusplus
}
#endif


/* -----------------------------------------------------------------------------
 * pyrun.swg
 *
 * This file contains the runtime support for Python modules
 * and includes code for managing global variables and pointer
 * type checking.
 *
 * ----------------------------------------------------------------------------- */

#if PY_VERSION_HEX < 0x02070000 /* 2.7.0 */
# error "This version of SWIG only supports Python >= 2.7"
#endif

#if PY_VERSION_HEX >= 0x03000000 && PY_VERSION_HEX < 0x03030000
# error "This version of SWIG only supports Python 3 >= 3.3"
#endif

/* Common SWIG API */

/* for raw pointers */
#define SWIG_Python_ConvertPtr(obj, pptr, type, flags)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Python_ConvertPtr(obj, pptr, type, flags)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, own)

#ifdef SWIGPYTHON_BUILTIN
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(self, ptr, type, flags)
#else
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(NULL, ptr, type, flags)
#endif

#define SWIG_InternalNewPointerObj(ptr, type, flags)	SWIG_Python_NewPointerObj(NULL, ptr, type, flags)

#define SWIG_CheckImplicit(ty)                          SWIG_Python_CheckImplicit(ty) 
#define SWIG_AcquirePtr(ptr, src)                       SWIG_Python_AcquirePtr(ptr, src)
#define swig_owntype                                    int

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_Python_ConvertFunctionPtr(obj, pptr, type)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Python_NewPointerObj(NULL, ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Python_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer)             SWIG_Python_SetModule(pointer)
#define SWIG_NewClientData(obj)                         SwigPyClientData_New(obj)

#define SWIG_SetErrorObj                                SWIG_Python_SetErrorObj                            
#define SWIG_SetErrorMsg                        	SWIG_Python_SetErrorMsg				   
#define SWIG_ErrorType(code)                    	SWIG_Python_ErrorType(code)                        
#define SWIG_Error(code, msg)            		SWIG_Python_SetErrorMsg(SWIG_ErrorType(code), msg) 
#define SWIG_fail                        		goto fail					   


/* Runtime API implementation */

/* Error manipulation */

SWIGINTERN void 
SWIG_Python_SetErrorObj(PyObject *errtype, PyObject *obj) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK; 
  PyErr_SetObject(errtype, obj);
  SWIG_Py_DECREF(obj);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

SWIGINTERN void 
SWIG_Python_SetErrorMsg(PyObject *errtype, const char *msg) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  PyErr_SetString(errtype, msg);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

#define SWIG_Python_Raise(obj, type, desc)  SWIG_Python_SetErrorObj(SWIG_Python_ExceptionType(desc), obj)

/* Set a constant value */

#if defined(SWIGPYTHON_BUILTIN)

SWIGINTERN void
SwigPyBuiltin_AddPublicSymbol(PyObject *seq, const char *key) {
  PyObject *s = PyString_InternFromString(key);
  PyList_Append(seq, s);
  SWIG_Py_DECREF(s);
}

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, PyObject *public_interface, const char *name, PyObject *obj) {   
  PyDict_SetItemString(d, name, obj);
  SWIG_Py_DECREF(obj);
  if (public_interface)
    SwigPyBuiltin_AddPublicSymbol(public_interface, name);
}

#else

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, const char *name, PyObject *obj) {   
  PyDict_SetItemString(d, name, obj);
  SWIG_Py_DECREF(obj);
}

#endif

/* Append a value to the result obj */

SWIGINTERN PyObject*
SWIG_Python_AppendOutput(PyObject* result, PyObject* obj, int is_void) {
  if (!result) {
    result = obj;
  } else if (result == Py_None && is_void) {
    SWIG_Py_DECREF(result);
    result = obj;
  } else {
    if (!PyList_Check(result)) {
      PyObject *o2 = result;
      result = PyList_New(1);
      if (result) {
        PyList_SET_ITEM(result, 0, o2);
      } else {
        SWIG_Py_DECREF(obj);
        return o2;
      }
    }
    PyList_Append(result,obj);
    SWIG_Py_DECREF(obj);
  }
  return result;
}

/* Unpack the argument tuple */

SWIGINTERN Py_ssize_t
SWIG_Python_UnpackTuple(PyObject *args, const char *name, Py_ssize_t min, Py_ssize_t max, PyObject **objs)
{
  if (!args) {
    if (!min && !max) {
      return 1;
    } else {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got none", 
		   name, (min == max ? "" : "at least "), (int)min);
      return 0;
    }
  }  
  if (!PyTuple_Check(args)) {
    if (min <= 1 && max >= 1) {
      Py_ssize_t i;
      objs[0] = args;
      for (i = 1; i < max; ++i) {
	objs[i] = 0;
      }
      return 2;
    }
    PyErr_SetString(PyExc_SystemError, "UnpackTuple() argument list is not a tuple");
    return 0;
  } else {
    Py_ssize_t l = PyTuple_GET_SIZE(args);
    if (l < min) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at least "), (int)min, (int)l);
      return 0;
    } else if (l > max) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at most "), (int)max, (int)l);
      return 0;
    } else {
      Py_ssize_t i;
      for (i = 0; i < l; ++i) {
	objs[i] = PyTuple_GET_ITEM(args, i);
      }
      for (; l < max; ++l) {
	objs[l] = 0;
      }
      return i + 1;
    }    
  }
}

SWIGINTERN int
SWIG_Python_CheckNoKeywords(PyObject *kwargs, const char *name) {
  int no_kwargs = 1;
  if (kwargs) {
    assert(PyDict_Check(kwargs));
    if (PyDict_Size(kwargs) > 0) {
      PyErr_Format(PyExc_TypeError, "%s() does not take keyword arguments", name);
      no_kwargs = 0;
    }
  }
  return no_kwargs;
}

/* A functor is a function object with one single object argument */
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunctionObjArgs(functor, obj, NULL);

/*
  Helper for static pointer initialization for both C and C++ code, for example
  static PyObject *SWIG_STATIC_POINTER(MyVar) = NewSomething(...);
*/
#ifdef __cplusplus
#define SWIG_STATIC_POINTER(var)  var
#else
#define SWIG_STATIC_POINTER(var)  var = 0; if (!var) var
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Python-specific SWIG API */
#define SWIG_newvarlink()                             SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)
 
/* -----------------------------------------------------------------------------
 * global variable support code.
 * ----------------------------------------------------------------------------- */
 
typedef struct swig_globalvar {   
  char       *name;                  /* Name of global variable */
  PyObject *(*get_attr)(void);       /* Return the current value */
  int       (*set_attr)(PyObject *); /* Set the value */
  struct swig_globalvar *next;
} swig_globalvar;

typedef struct swig_varlinkobject {
  PyObject_HEAD
  swig_globalvar *vars;
} swig_varlinkobject;

SWIGINTERN PyObject *
swig_varlink_repr(PyObject *SWIGUNUSEDPARM(v)) {
#if PY_VERSION_HEX >= 0x03000000
  return PyUnicode_InternFromString("<Swig global variables>");
#else
  return PyString_FromString("<Swig global variables>");
#endif
}

SWIGINTERN PyObject *
swig_varlink_str(PyObject *o) {
  swig_varlinkobject *v = (swig_varlinkobject *) o;
#if PY_VERSION_HEX >= 0x03000000
  PyObject *str = PyUnicode_InternFromString("(");
  PyObject *tail;
  PyObject *joined;
  swig_globalvar *var;
  for (var = v->vars; var; var=var->next) {
    tail = PyUnicode_FromString(var->name);
    joined = PyUnicode_Concat(str, tail);
    SWIG_Py_DECREF(str);
    SWIG_Py_DECREF(tail);
    str = joined;
    if (var->next) {
        tail = PyUnicode_InternFromString(", ");
        joined = PyUnicode_Concat(str, tail);
        SWIG_Py_DECREF(str);
        SWIG_Py_DECREF(tail);
        str = joined;
    }
  }
  tail = PyUnicode_InternFromString(")");
  joined = PyUnicode_Concat(str, tail);
  SWIG_Py_DECREF(str);
  SWIG_Py_DECREF(tail);
  str = joined;
#else
  PyObject *str = PyString_FromString("(");
  swig_globalvar *var;
  for (var = v->vars; var; var=var->next) {
    PyString_ConcatAndDel(&str,PyString_FromString(var->name));
    if (var->next) PyString_ConcatAndDel(&str,PyString_FromString(", "));
  }
  PyString_ConcatAndDel(&str,PyString_FromString(")"));
#endif
  return str;
}

SWIGINTERN void
swig_varlink_dealloc(PyObject *o) {
  swig_varlinkobject *v = (swig_varlinkobject *) o;
  swig_globalvar *var = v->vars;
  while (var) {
    swig_globalvar *n = var->next;
    free(var->name);
    free(var);
    var = n;
  }
}

SWIGINTERN PyObject *
swig_varlink_getattr(PyObject *o, char *n) {
  swig_varlinkobject *v = (swig_varlinkobject *) o;
  PyObject *res = NULL;
  swig_globalvar *var = v->vars;
  while (var) {
    if (strcmp(var->name,n) == 0) {
      res = (*var->get_attr)();
      break;
    }
    var = var->next;
  }
  if (res == NULL && !PyErr_Occurred()) {
    PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
  }
  return res;
}

SWIGINTERN int
swig_varlink_setattr(PyObject *o, char *n, PyObject *p) {
  swig_varlinkobject *v = (swig_varlinkobject *) o;
  int res = 1;
  swig_globalvar *var = v->vars;
  while (var) {
    if (strcmp(var->name,n) == 0) {
      res = (*var->set_attr)(p);
      break;
    }
    var = var->next;
  }
  if (res == 1 && !PyErr_Occurred()) {
    PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
  }
  return res;
}

SWIGINTERN PyTypeObject*
swig_varlink_type(void) {
  static char varlink__doc__[] = "Swig var link object";
#ifndef SWIG_HEAPTYPES
  static PyTypeObject varlink_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX >= 0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                  /* ob_size */
#endif
      "swigvarlink",                      /* tp_name */
      sizeof(swig_varlinkobject),         /* tp_basicsize */
      0,                                  /* tp_itemsize */
      (destructor) swig_varlink_dealloc,  /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
      (printfunc)0,                       /* tp_print */
#else
      (Py_ssize_t)0,                      /* tp_vectorcall_offset */
#endif
      (getattrfunc) swig_varlink_getattr, /* tp_getattr */
      (setattrfunc) swig_varlink_setattr, /* tp_setattr */
      0,                                  /* tp_compare */
      (reprfunc) swig_varlink_repr,       /* tp_repr */
      0,                                  /* tp_as_number */
      0,                                  /* tp_as_sequence */
      0,                                  /* tp_as_mapping */
      0,                                  /* tp_hash */
      0,                                  /* tp_call */
      (reprfunc) swig_varlink_str,        /* tp_str */
      0,                                  /* tp_getattro */
      0,                                  /* tp_setattro */
      0,                                  /* tp_as_buffer */
      0,                                  /* tp_flags */
      varlink__doc__,                     /* tp_doc */
      0,                                  /* tp_traverse */
      0,                                  /* tp_clear */
      0,                                  /* tp_richcompare */
      0,                                  /* tp_weaklistoffset */
      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
      0,                                  /* tp_del */
      0,                                  /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
      0,                                  /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
      0,                                  /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
      0,                                  /* tp_print */
#endif
#if PY_VERSION_HEX >= 0x030c0000
      0,                                  /* tp_watched */
#endif
#if PY_VERSION_HEX >= 0x030d00a4
      0,                                  /* tp_versions_used */
#endif
#ifdef COUNT_ALLOCS
      0,                                  /* tp_allocs */
      0,                                  /* tp_frees */
      0,                                  /* tp_maxalloc */
      0,                                  /* tp_prev */
      0                                   /* tp_next */
#endif
    };
    varlink_type = tmp;
    type_init = 1;
    if (PyType_Ready(&varlink_type) < 0)
      return NULL;
  }
  return &varlink_type;
#else
  PyType_Slot slots[] = {
    { Py_tp_dealloc, (void *)swig_varlink_dealloc },
    { Py_tp_repr, (void *)swig_varlink_repr },
    { Py_tp_getattr, (void *)swig_varlink_getattr },
    { Py_tp_setattr, (void *)swig_varlink_setattr },
    { Py_tp_str, (void *)swig_varlink_str },
    { Py_tp_doc, (void *)varlink__doc__ },
    { 0, NULL }
  };
  PyType_Spec spec = {
    "swigvarlink",
    sizeof(swig_varlinkobject),
    0,
    Py_TPFLAGS_DEFAULT,
    slots
  };
  return (PyTypeObject *)PyType_FromSpec(&spec);
#endif
}

/* Create a variable linking object for use later */
SWIGINTERN PyObject *
SWIG_Python_newvarlink(void) {
  swig_varlinkobject *result = PyObject_New(swig_varlinkobject, swig_varlink_type());
  if (result) {
    result->vars = 0;
  }
  return ((PyObject*) result);
}

SWIGINTERN void 
SWIG_Python_addvarlink(PyObject *p, const char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
  swig_varlinkobject *v = (swig_varlinkobject *) p;
  swig_globalvar *gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
  if (gv) {
    size_t size = strlen(name)+1;
    gv->name = (char *)malloc(size);
    if (gv->name) {
      memcpy(gv->name, name, size);
      gv->get_attr = get_attr;
      gv->set_attr = set_attr;
      gv->next = v->vars;
    }
  }
  v->vars = gv;
}


static PyObject *Swig_Globals_global = NULL;
  
SWIGINTERN PyObject *
SWIG_globals(void) {
  if (Swig_Globals_global == NULL) {
    Swig_Globals_global = SWIG_newvarlink();
  }
  return Swig_Globals_global;
}

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * Pointer declarations
 * ----------------------------------------------------------------------------- */

/* Flags for new pointer objects */
#define SWIG_POINTER_NOSHADOW       (SWIG_POINTER_OWN      << 1)
#define SWIG_POINTER_NEW            (SWIG_POINTER_NOSHADOW | SWIG_POINTER_OWN)

#define SWIG_POINTER_IMPLICIT_CONV  (SWIG_POINTER_DISOWN   << 1)

#define SWIG_BUILTIN_TP_INIT	    (SWIG_POINTER_OWN << 2)
#define SWIG_BUILTIN_INIT	    (SWIG_BUILTIN_TP_INIT | SWIG_POINTER_OWN)

#ifdef __cplusplus
extern "C" {
#endif

/* The python void return value */

SWIGRUNTIMEINLINE PyObject * 
SWIG_Py_Void(void)
{
  PyObject *none = Py_None;
  SWIG_Py_INCREF(none);
  return none;
}

/* SwigPyClientData */

typedef struct {
  PyObject *klass;
  PyObject *newraw;
  PyObject *newargs;
  PyObject *destroy;
  int delargs;
  int implicitconv;
  PyTypeObject *pytype;
} SwigPyClientData;

SWIGRUNTIMEINLINE int 
SWIG_Python_CheckImplicit(swig_type_info *ty)
{
  SwigPyClientData *data = (SwigPyClientData *)ty->clientdata;
  int fail = data ? data->implicitconv : 0;
  if (fail)
    PyErr_SetString(PyExc_TypeError, "Implicit conversion is prohibited for explicit constructors.");
  return fail;
}

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_ExceptionType(swig_type_info *desc) {
  SwigPyClientData *data = desc ? (SwigPyClientData *) desc->clientdata : 0;
  PyObject *klass = data ? data->klass : 0;
  return (klass ? klass : PyExc_RuntimeError);
}


SWIGRUNTIME SwigPyClientData * 
SwigPyClientData_New(PyObject* obj)
{
  if (!obj) {
    return 0;
  } else {
    SwigPyClientData *data = (SwigPyClientData *)malloc(sizeof(SwigPyClientData));
    /* the klass element */
    data->klass = obj;
    SWIG_Py_INCREF(data->klass);
    /* the newraw method and newargs arguments used to create a new raw instance */
    if (PyClass_Check(obj)) {
      data->newraw = 0;
      SWIG_Py_INCREF(obj);
      data->newargs = obj;
    } else {
      data->newraw = PyObject_GetAttrString(data->klass, "__new__");
      if (data->newraw) {
        data->newargs = PyTuple_New(1);
        if (data->newargs) {
          SWIG_Py_INCREF(obj);
          PyTuple_SET_ITEM(data->newargs, 0, obj);
        } else {
          SWIG_Py_DECREF(data->newraw);
          SWIG_Py_DECREF(data->klass);
          free(data);
          return 0;
        }
      } else {
        SWIG_Py_INCREF(obj);
        data->newargs = obj;
      }
    }
    /* the destroy method, aka as the C++ delete method */
    data->destroy = PyObject_GetAttrString(data->klass, "__swig_destroy__");
    if (PyErr_Occurred()) {
      PyErr_Clear();
      data->destroy = 0;
    }
    if (data->destroy) {
      data->delargs = !(PyCFunction_GET_FLAGS(data->destroy) & METH_O);
    } else {
      data->delargs = 0;
    }
    data->implicitconv = 0;
    data->pytype = 0;
    return data;
  }
}

SWIGRUNTIME void 
SwigPyClientData_Del(SwigPyClientData *data)
{
  SWIG_Py_XDECREF(data->klass);
  SWIG_Py_XDECREF(data->newraw);
  SWIG_Py_XDECREF(data->newargs);
  SWIG_Py_XDECREF(data->destroy);
  free(data);
}

/* =============== SwigPyObject =====================*/

typedef struct {
  PyObject_HEAD
  void *ptr;
  swig_type_info *ty;
  int own;
  PyObject *next;
#ifdef SWIGPYTHON_BUILTIN
  PyObject *dict;
#endif
} SwigPyObject;


#ifdef SWIGPYTHON_BUILTIN

SWIGRUNTIME PyObject *
SwigPyObject_get___dict__(PyObject *v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *)v;

  if (!sobj->dict)
    sobj->dict = PyDict_New();

  SWIG_Py_XINCREF(sobj->dict);
  return sobj->dict;
}

#endif

SWIGRUNTIME PyObject *
SwigPyObject_long(SwigPyObject *v)
{
  return PyLong_FromVoidPtr(v->ptr);
}

SWIGRUNTIME PyObject *
SwigPyObject_format(const char* fmt, SwigPyObject *v)
{
  PyObject *res = NULL;
  PyObject *args = PyTuple_New(1);
  if (args) {
    PyObject *val = SwigPyObject_long(v);
    if (val) {
      PyObject *ofmt;
      PyTuple_SET_ITEM(args, 0, val);
      ofmt = SWIG_Python_str_FromChar(fmt);
      if (ofmt) {
#if PY_VERSION_HEX >= 0x03000000
        res = PyUnicode_Format(ofmt,args);
#else
        res = PyString_Format(ofmt,args);
#endif
        SWIG_Py_DECREF(ofmt);
      }
    }
    SWIG_Py_DECREF(args);
  }
  return res;
}

SWIGRUNTIME PyObject *
SwigPyObject_oct(SwigPyObject *v)
{
  return SwigPyObject_format("%o",v);
}

SWIGRUNTIME PyObject *
SwigPyObject_hex(SwigPyObject *v)
{
  return SwigPyObject_format("%x",v);
}

SWIGRUNTIME PyObject *
SwigPyObject_repr(SwigPyObject *v)
{
  const char *name = SWIG_TypePrettyName(v->ty);
  PyObject *repr = SWIG_Python_str_FromFormat("<Swig Object of type '%s' at %p>", (name ? name : "unknown"), (void *)v);
  if (repr && v->next) {
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next);
    if (nrep) {
# if PY_VERSION_HEX >= 0x03000000
      PyObject *joined = PyUnicode_Concat(repr, nrep);
      SWIG_Py_DECREF(repr);
      SWIG_Py_DECREF(nrep);
      repr = joined;
# else
      PyString_ConcatAndDel(&repr,nrep);
# endif
    } else {
      SWIG_Py_DECREF(repr);
      repr = NULL;
    }
  }
  return repr;
}

/* We need a version taking two PyObject* parameters so it's a valid
 * PyCFunction to use in swigobject_methods[]. */
SWIGRUNTIME PyObject *
SwigPyObject_repr2(PyObject *v, PyObject *SWIGUNUSEDPARM(args))
{
  return SwigPyObject_repr((SwigPyObject*)v);
}

SWIGRUNTIME int
SwigPyObject_compare(SwigPyObject *v, SwigPyObject *w)
{
  void *i = v->ptr;
  void *j = w->ptr;
  return (i < j) ? -1 : ((i > j) ? 1 : 0);
}

/* Added for Python 3.x, would it also be useful for Python 2.x? */
SWIGRUNTIME PyObject*
SwigPyObject_richcompare(SwigPyObject *v, SwigPyObject *w, int op)
{
  PyObject* res = NULL;
  if (!PyErr_Occurred()) {
    if (op != Py_EQ && op != Py_NE) {
      SWIG_Py_INCREF(Py_NotImplemented);
      return Py_NotImplemented;
    }
    res = PyBool_FromLong( (SwigPyObject_compare(v, w)==0) == (op == Py_EQ) ? 1 : 0);
  }
  return res;  
}


SWIGRUNTIME PyTypeObject* SwigPyObject_TypeOnce(void);

#ifdef SWIGPYTHON_BUILTIN
static swig_type_info *SwigPyObject_stype = 0;
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
    SwigPyClientData *cd;
    assert(SwigPyObject_stype);
    cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
    assert(cd);
    assert(cd->pytype);
    return cd->pytype;
}
#else
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyObject_TypeOnce();
  return type;
}
#endif

SWIGRUNTIMEINLINE int
SwigPyObject_Check(PyObject *op) {
  PyTypeObject *target_tp = SwigPyObject_type();
  PyTypeObject *op_type = Py_TYPE(op);
#ifdef SWIGPYTHON_BUILTIN
  if (PyType_IsSubtype(op_type, target_tp))
    return 1;
  return (strcmp(op_type->tp_name, "SwigPyObject") == 0);
#else
# ifdef Py_LIMITED_API
  int cmp;
  PyObject *tp_name;
#endif
  if (op_type == target_tp)
    return 1;
# ifdef Py_LIMITED_API
  tp_name = PyObject_GetAttrString((PyObject *)op_type, "__name__");
  if (!tp_name)
    return 0;
  cmp = PyUnicode_CompareWithASCIIString(tp_name, "SwigPyObject");
  SWIG_Py_DECREF(tp_name);
  return cmp == 0;
# else
  return (strcmp(op_type->tp_name, "SwigPyObject") == 0);
# endif
#endif
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own);

static PyObject* Swig_Capsule_global = NULL;

SWIGRUNTIME void
SwigPyObject_dealloc(PyObject *v)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  PyObject *next = sobj->next;
  if (sobj->own == SWIG_POINTER_OWN) {
    swig_type_info *ty = sobj->ty;
    SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
    PyObject *destroy = data ? data->destroy : 0;
    if (destroy) {
      /* destroy is always a VARARGS method */
      PyObject *res;

      /* PyObject_CallFunction() has the potential to silently drop
         the active exception.  In cases of unnamed temporary
         variable or where we just finished iterating over a generator
         StopIteration will be active right now, and this needs to
         remain true upon return from SwigPyObject_dealloc.  So save
         and restore. */
      
      PyObject *type = NULL, *value = NULL, *traceback = NULL;
      PyErr_Fetch(&type, &value, &traceback);

      if (data->delargs) {
        /* we need to create a temporary object to carry the destroy operation */
        PyObject *tmp = SwigPyObject_New(sobj->ptr, ty, 0);
        if (tmp) {
          res = SWIG_Python_CallFunctor(destroy, tmp);
        } else {
          res = 0;
        }
        SWIG_Py_XDECREF(tmp);
      } else {
        PyCFunction meth = PyCFunction_GET_FUNCTION(destroy);
        PyObject *mself = PyCFunction_GET_SELF(destroy);
        res = ((*meth)(mself, v));
      }
      if (!res)
        PyErr_WriteUnraisable(destroy);

      PyErr_Restore(type, value, traceback);

      SWIG_Py_XDECREF(res);
    } 
#if !defined(SWIG_PYTHON_SILENT_MEMLEAK)
    else {
      const char *name = SWIG_TypePrettyName(ty);
      printf("swig/python detected a memory leak of type '%s', no destructor found.\n", (name ? name : "unknown"));
    }
#endif
    SWIG_Py_XDECREF(Swig_Capsule_global);
  }
  SWIG_Py_XDECREF(next);
#ifdef SWIGPYTHON_BUILTIN
  SWIG_Py_XDECREF(sobj->dict);
#endif
  PyObject_Free(v);
}

SWIGRUNTIME PyObject* 
SwigPyObject_append(PyObject* v, PyObject* next)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  if (!SwigPyObject_Check(next)) {
    PyErr_SetString(PyExc_TypeError, "Attempt to append a non SwigPyObject");
    return NULL;
  }
  ((SwigPyObject *)next)->next = sobj->next;
  sobj->next = next;
  SWIG_Py_INCREF(next);
  return SWIG_Py_Void();
}

SWIGRUNTIME PyObject* 
SwigPyObject_next(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  if (sobj->next) {    
    SWIG_Py_INCREF(sobj->next);
    return sobj->next;
  } else {
    return SWIG_Py_Void();
  }
}

SWIGINTERN PyObject*
SwigPyObject_disown(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = 0;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
SwigPyObject_acquire(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = SWIG_POINTER_OWN;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
SwigPyObject_own(PyObject *v, PyObject *args)
{
  PyObject *val = 0;
  if (!PyArg_UnpackTuple(args, "own", 0, 1, &val)) {
    return NULL;
  } else {
    SwigPyObject *sobj = (SwigPyObject *)v;
    PyObject *obj = PyBool_FromLong(sobj->own);
    if (val) {
      if (PyObject_IsTrue(val)) {
        SWIG_Py_DECREF(SwigPyObject_acquire(v,args));
      } else {
        SWIG_Py_DECREF(SwigPyObject_disown(v,args));
      }
    } 
    return obj;
  }
}

static PyMethodDef
swigobject_methods[] = {
  {"disown",  SwigPyObject_disown,  METH_NOARGS,  "releases ownership of the pointer"},
  {"acquire", SwigPyObject_acquire, METH_NOARGS,  "acquires ownership of the pointer"},
  {"own",     SwigPyObject_own,     METH_VARARGS, "returns/sets ownership of the pointer"},
  {"append",  SwigPyObject_append,  METH_O,       "appends another 'this' object"},
  {"next",    SwigPyObject_next,    METH_NOARGS,  "returns the next 'this' object"},
  {"__repr__",SwigPyObject_repr2,   METH_NOARGS,  "returns object representation"},
  {0, 0, 0, 0}  
};

SWIGRUNTIME PyTypeObject*
SwigPyObject_TypeOnce(void) {
  static char swigobject_doc[] = "Swig object carries a C/C++ instance pointer";
#ifndef SWIG_HEAPTYPES
  static PyNumberMethods SwigPyObject_as_number = {
    (binaryfunc)0, /*nb_add*/
    (binaryfunc)0, /*nb_subtract*/
    (binaryfunc)0, /*nb_multiply*/
    /* nb_divide removed in Python 3 */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc)0, /*nb_divide*/
#endif
    (binaryfunc)0, /*nb_remainder*/
    (binaryfunc)0, /*nb_divmod*/
    (ternaryfunc)0,/*nb_power*/
    (unaryfunc)0,  /*nb_negative*/
    (unaryfunc)0,  /*nb_positive*/
    (unaryfunc)0,  /*nb_absolute*/
    (inquiry)0,    /*nb_nonzero*/
    0,		   /*nb_invert*/
    0,		   /*nb_lshift*/
    0,		   /*nb_rshift*/
    0,		   /*nb_and*/
    0,		   /*nb_xor*/
    0,		   /*nb_or*/
#if PY_VERSION_HEX < 0x03000000
    0,   /*nb_coerce*/
#endif
    (unaryfunc)SwigPyObject_long, /*nb_int*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_long, /*nb_long*/
#else
    0, /*nb_reserved*/
#endif
    (unaryfunc)0,                 /*nb_float*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_oct,  /*nb_oct*/
    (unaryfunc)SwigPyObject_hex,  /*nb_hex*/
#endif
#if PY_VERSION_HEX >= 0x03050000 /* 3.5 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_matrix_multiply */
#elif PY_VERSION_HEX >= 0x03000000 /* 3.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index, nb_inplace_divide removed */
#else
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index */
#endif
  };

  static PyTypeObject swigpyobject_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX >= 0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      "SwigPyObject",                       /* tp_name */
      sizeof(SwigPyObject),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyObject_dealloc,     /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
      (printfunc)0,                         /* tp_print */
#else
      (Py_ssize_t)0,                        /* tp_vectorcall_offset */
#endif
      (getattrfunc)0,                       /* tp_getattr */
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
      0, /* tp_reserved in 3.0.1, tp_compare in 3.0.0 but not used */
#else
      (cmpfunc)SwigPyObject_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyObject_repr,          /* tp_repr */
      &SwigPyObject_as_number,              /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      0,                                    /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigobject_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      (richcmpfunc)SwigPyObject_richcompare,/* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      swigobject_methods,                   /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
      0,                                    /* tp_del */
      0,                                    /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
      0,                                    /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
      0,                                    /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
      0,                                    /* tp_print */
#endif
#if PY_VERSION_HEX >= 0x030c0000
      0,                                    /* tp_watched */
#endif
#if PY_VERSION_HEX >= 0x030d00a4
      0,                                    /* tp_versions_used */
#endif
#ifdef COUNT_ALLOCS
      0,                                    /* tp_allocs */
      0,                                    /* tp_frees */
      0,                                    /* tp_maxalloc */
      0,                                    /* tp_prev */
      0                                     /* tp_next */
#endif
    };
    swigpyobject_type = tmp;
    type_init = 1;
    if (PyType_Ready(&swigpyobject_type) != 0)
      return NULL;
  }
  return &swigpyobject_type;
#else
  PyType_Slot slots[] = {
    { Py_tp_dealloc, (void *)SwigPyObject_dealloc },
    { Py_tp_repr, (void *)SwigPyObject_repr },
    { Py_tp_getattro, (void *)PyObject_GenericGetAttr },
    { Py_tp_doc, (void *)swigobject_doc },
    { Py_tp_richcompare, (void *)SwigPyObject_richcompare },
    { Py_tp_methods, (void *)swigobject_methods },
    { Py_nb_int, (void *)SwigPyObject_long },
    { 0, NULL }
  };
  PyType_Spec spec = {
    "SwigPyObject",
    sizeof(SwigPyObject),
    0,
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,
    slots
  };
  return (PyTypeObject *)PyType_FromSpec(&spec);
#endif
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own)
{
  SwigPyObject *sobj = PyObject_New(SwigPyObject, SwigPyObject_type());
  if (sobj) {
    sobj->ptr  = ptr;
    sobj->ty   = ty;
    sobj->own  = own;
    sobj->next = 0;
#ifdef SWIGPYTHON_BUILTIN
    sobj->dict = 0;
#endif
    if (own == SWIG_POINTER_OWN) {
      /* Obtain a reference to the Python capsule wrapping the module information, so that the
       * module information is correctly destroyed after all SWIG python objects have been freed
       * by the GC (and corresponding destructors invoked) */
      SWIG_Py_XINCREF(Swig_Capsule_global);
    }
  }
  return (PyObject *)sobj;
}

/* -----------------------------------------------------------------------------
 * Implements a simple Swig Packed type, and use it instead of string
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *pack;
  swig_type_info *ty;
  size_t size;
} SwigPyPacked;

SWIGRUNTIME PyObject *
SwigPyPacked_repr(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    return SWIG_Python_str_FromFormat("<Swig Packed at %s%s>", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromFormat("<Swig Packed %s>", v->ty->name);
  }  
}

SWIGRUNTIME PyObject *
SwigPyPacked_str(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))){
    return SWIG_Python_str_FromFormat("%s%s", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromChar(v->ty->name);
  }  
}

SWIGRUNTIME int
SwigPyPacked_compare(SwigPyPacked *v, SwigPyPacked *w)
{
  size_t i = v->size;
  size_t j = w->size;
  int s = (i < j) ? -1 : ((i > j) ? 1 : 0);
  return s ? s : strncmp((const char *)v->pack, (const char *)w->pack, 2*v->size);
}

SWIGRUNTIME PyTypeObject* SwigPyPacked_TypeOnce(void);

SWIGRUNTIME PyTypeObject*
SwigPyPacked_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyPacked_TypeOnce();
  return type;
}

SWIGRUNTIMEINLINE int
SwigPyPacked_Check(PyObject *op) {
#ifdef Py_LIMITED_API
  int cmp;
  PyObject *tp_name;
#endif
  PyTypeObject* op_type = Py_TYPE(op);
  if (op_type == SwigPyPacked_TypeOnce())
    return 1;
#ifdef Py_LIMITED_API
  tp_name = PyObject_GetAttrString((PyObject *)op_type, "__name__");
  if (!tp_name)
    return 0;
  cmp = PyUnicode_CompareWithASCIIString(tp_name, "SwigPyPacked");
  SWIG_Py_DECREF(tp_name);
  return cmp == 0;
#else
  return (strcmp(op_type->tp_name, "SwigPyPacked") == 0);
#endif
}

SWIGRUNTIME void
SwigPyPacked_dealloc(PyObject *v)
{
  if (SwigPyPacked_Check(v)) {
    SwigPyPacked *sobj = (SwigPyPacked *) v;
    free(sobj->pack);
  }
  PyObject_Free(v);
}

SWIGRUNTIME PyTypeObject*
SwigPyPacked_TypeOnce(void) {
  static char swigpacked_doc[] = "Swig object carries a C/C++ instance pointer";
#ifndef SWIG_HEAPTYPES
  static PyTypeObject swigpypacked_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX>=0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      "SwigPyPacked",                       /* tp_name */
      sizeof(SwigPyPacked),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyPacked_dealloc,     /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
      (printfunc)0,                         /* tp_print */
#else
      (Py_ssize_t)0,                        /* tp_vectorcall_offset */
#endif
      (getattrfunc)0,                       /* tp_getattr */
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX>=0x03000000
      0, /* tp_reserved in 3.0.1 */
#else
      (cmpfunc)SwigPyPacked_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyPacked_repr,          /* tp_repr */
      0,                                    /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      (reprfunc)SwigPyPacked_str,           /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigpacked_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      0,                                    /* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      0,                                    /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
      0,                                    /* tp_del */
      0,                                    /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
      0,                                    /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
      0,                                    /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
      0,                                    /* tp_print */
#endif
#if PY_VERSION_HEX >= 0x030c0000
      0,                                    /* tp_watched */
#endif
#if PY_VERSION_HEX >= 0x030d00a4
      0,                                    /* tp_versions_used */
#endif
#ifdef COUNT_ALLOCS
      0,                                    /* tp_allocs */
      0,                                    /* tp_frees */
      0,                                    /* tp_maxalloc */
      0,                                    /* tp_prev */
      0                                     /* tp_next */
#endif
    };
    swigpypacked_type = tmp;
    type_init = 1;
    if (PyType_Ready(&swigpypacked_type) != 0)
      return NULL;
  }
  return &swigpypacked_type;
#else
  PyType_Slot slots[] = {
    { Py_tp_dealloc, (void *)SwigPyPacked_dealloc },
    { Py_tp_repr, (void *)SwigPyPacked_repr },
    { Py_tp_str, (void *)SwigPyPacked_str },
    { Py_tp_getattro, (void *)PyObject_GenericGetAttr },
    { Py_tp_doc, (void *)swigpacked_doc },
    { 0, NULL }
  };
  PyType_Spec spec = {
    "SwigPyPacked",
    sizeof(SwigPyPacked),
    0,
    Py_TPFLAGS_DEFAULT,
    slots
  };
  return (PyTypeObject *)PyType_FromSpec(&spec);
#endif
}

SWIGRUNTIME PyObject *
SwigPyPacked_New(void *ptr, size_t size, swig_type_info *ty)
{
  SwigPyPacked *sobj = PyObject_New(SwigPyPacked, SwigPyPacked_type());
  if (sobj) {
    void *pack = malloc(size);
    if (pack) {
      memcpy(pack, ptr, size);
      sobj->pack = pack;
      sobj->ty   = ty;
      sobj->size = size;
    } else {
      PyObject_Free((PyObject *)sobj);
      sobj = 0;
    }
  }
  return (PyObject *) sobj;
}

SWIGRUNTIME swig_type_info *
SwigPyPacked_UnpackData(PyObject *obj, void *ptr, size_t size)
{
  if (SwigPyPacked_Check(obj)) {
    SwigPyPacked *sobj = (SwigPyPacked *)obj;
    if (sobj->size != size) return 0;
    memcpy(ptr, sobj->pack, size);
    return sobj->ty;
  } else {
    return 0;
  }
}

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

static PyObject *Swig_This_global = NULL;

SWIGRUNTIME PyObject *
SWIG_This(void)
{
  if (Swig_This_global == NULL)
    Swig_This_global = SWIG_Python_str_FromChar("this");
  return Swig_This_global;
}

/* #define SWIG_PYTHON_SLOW_GETSET_THIS */

/* TODO: I don't know how to implement the fast getset in Python 3 right now */
#if PY_VERSION_HEX>=0x03000000
#define SWIG_PYTHON_SLOW_GETSET_THIS 
#endif

SWIGRUNTIME SwigPyObject *
SWIG_Python_GetSwigThis(PyObject *pyobj) 
{
  PyObject *obj;

  if (SwigPyObject_Check(pyobj))
    return (SwigPyObject *) pyobj;

#ifdef SWIGPYTHON_BUILTIN
  (void)obj;
# ifdef PyWeakref_CheckProxy
  if (PyWeakref_CheckProxy(pyobj)) {
#if PY_VERSION_HEX >= 0x030d0000
    PyWeakref_GetRef(pyobj, &pyobj);
    Py_DECREF(pyobj);
#else
    pyobj = PyWeakref_GET_OBJECT(pyobj);
#endif
    if (pyobj && SwigPyObject_Check(pyobj))
      return (SwigPyObject*) pyobj;
  }
# endif
  return NULL;
#else

  obj = 0;

#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
  if (PyInstance_Check(pyobj)) {
    obj = _PyInstance_Lookup(pyobj, SWIG_This());      
  } else {
    PyObject **dictptr = _PyObject_GetDictPtr(pyobj);
    if (dictptr != NULL) {
      PyObject *dict = *dictptr;
      obj = dict ? PyDict_GetItem(dict, SWIG_This()) : 0;
    } else {
#ifdef PyWeakref_CheckProxy
      if (PyWeakref_CheckProxy(pyobj)) {
	PyObject *wobj = PyWeakref_GET_OBJECT(pyobj);
	return wobj ? SWIG_Python_GetSwigThis(wobj) : 0;
      }
#endif
      obj = PyObject_GetAttr(pyobj,SWIG_This());
      if (obj) {
	SWIG_Py_DECREF(obj);
      } else {
	if (PyErr_Occurred()) PyErr_Clear();
	return 0;
      }
    }
  }
#else
  obj = PyObject_GetAttr(pyobj,SWIG_This());
  if (obj) {
    SWIG_Py_DECREF(obj);
  } else {
    if (PyErr_Occurred()) PyErr_Clear();
    return 0;
  }
#endif
  if (obj && !SwigPyObject_Check(obj)) {
    /* a PyObject is called 'this', try to get the 'real this'
       SwigPyObject from it */ 
    return SWIG_Python_GetSwigThis(obj);
  }
  return (SwigPyObject *)obj;
#endif
}

/* Acquire a pointer value */

SWIGRUNTIME int
SWIG_Python_AcquirePtr(PyObject *obj, int own) {
  if (own == SWIG_POINTER_OWN) {
    SwigPyObject *sobj = SWIG_Python_GetSwigThis(obj);
    if (sobj) {
      int oldown = sobj->own;
      sobj->own = own;
      return oldown;
    }
  }
  return 0;
}

/* Convert a pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPtrAndOwn(PyObject *obj, void **ptr, swig_type_info *ty, int flags, int *own) {
  int res;
  SwigPyObject *sobj;
  int implicit_conv = (flags & SWIG_POINTER_IMPLICIT_CONV) != 0;

  if (!obj)
    return SWIG_ERROR;
  if (obj == Py_None && !implicit_conv) {
    if (ptr)
      *ptr = 0;
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }

  res = SWIG_ERROR;

  sobj = SWIG_Python_GetSwigThis(obj);
  if (own)
    *own = 0;
  while (sobj) {
    void *vptr = sobj->ptr;
    if (ty) {
      swig_type_info *to = sobj->ty;
      if (to == ty) {
        /* no type cast needed */
        if (ptr) *ptr = vptr;
        break;
      } else {
        swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
        if (!tc) {
          sobj = (SwigPyObject *)sobj->next;
        } else {
          if (ptr) {
            int newmemory = 0;
            *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
            if (newmemory == SWIG_CAST_NEW_MEMORY) {
              assert(own); /* badly formed typemap which will lead to a memory leak - it must set and use own to delete *ptr */
              if (own)
                *own = *own | SWIG_CAST_NEW_MEMORY;
            }
          }
          break;
        }
      }
    } else {
      if (ptr) *ptr = vptr;
      break;
    }
  }
  if (sobj) {
    if (((flags & SWIG_POINTER_RELEASE) == SWIG_POINTER_RELEASE) && !sobj->own) {
      res = SWIG_ERROR_RELEASE_NOT_OWNED;
    } else {
      if (own)
        *own = *own | sobj->own;
      if (flags & SWIG_POINTER_DISOWN) {
        sobj->own = 0;
      }
      if (flags & SWIG_POINTER_CLEAR) {
        sobj->ptr = 0;
      }
      res = SWIG_OK;
    }
  } else {
    if (implicit_conv) {
      SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
      if (data && !data->implicitconv) {
        PyObject *klass = data->klass;
        if (klass) {
          PyObject *impconv;
          data->implicitconv = 1; /* avoid recursion and call 'explicit' constructors*/
          impconv = SWIG_Python_CallFunctor(klass, obj);
          data->implicitconv = 0;
          if (PyErr_Occurred()) {
            PyErr_Clear();
            impconv = 0;
          }
          if (impconv) {
            SwigPyObject *iobj = SWIG_Python_GetSwigThis(impconv);
            if (iobj) {
              void *vptr;
              res = SWIG_Python_ConvertPtrAndOwn((PyObject*)iobj, &vptr, ty, 0, 0);
              if (SWIG_IsOK(res)) {
                if (ptr) {
                  *ptr = vptr;
                  /* transfer the ownership to 'ptr' */
                  iobj->own = 0;
                  res = SWIG_AddCast(res);
                  res = SWIG_AddNewMask(res);
                } else {
                  res = SWIG_AddCast(res);		    
                }
              }
            }
            SWIG_Py_DECREF(impconv);
          }
        }
      }
      if (!SWIG_IsOK(res) && obj == Py_None) {
        if (ptr)
          *ptr = 0;
        if (PyErr_Occurred())
          PyErr_Clear();
        res = SWIG_OK;
      }
    }
  }
  return res;
}

/* Convert a function ptr value */

SWIGRUNTIME int
SWIG_Python_ConvertFunctionPtr(PyObject *obj, void **ptr, swig_type_info *ty) {
  if (!PyCFunction_Check(obj)) {
    return SWIG_ConvertPtr(obj, ptr, ty, 0);
  } else {
    void *vptr = 0;
    swig_cast_info *tc;

    /* here we get the method pointer for callbacks */
#ifndef Py_LIMITED_API
    const char *doc = (((PyCFunctionObject *)obj) -> m_ml -> ml_doc);
#else
    PyObject* pystr_doc = PyObject_GetAttrString(obj, "__doc__");
    PyObject *bytes = NULL;
    const char *doc = pystr_doc ? SWIG_PyUnicode_AsUTF8AndSize(pystr_doc, NULL, &bytes) : 0;
#endif
    const char *desc = doc ? strstr(doc, "swig_ptr: ") : 0;
    if (desc)
      desc = ty ? SWIG_UnpackVoidPtr(desc + 10, &vptr, ty->name) : 0;
#ifdef Py_LIMITED_API
    SWIG_Py_XDECREF(bytes);
    SWIG_Py_XDECREF(pystr_doc);
#endif
    if (!desc)
      return SWIG_ERROR;
    tc = SWIG_TypeCheck(desc,ty);
    if (tc) {
      int newmemory = 0;
      *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
    } else {
      return SWIG_ERROR;
    }
    return SWIG_OK;
  }
}

/* Convert a packed pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty) {
  swig_type_info *to = SwigPyPacked_UnpackData(obj, ptr, sz);
  if (!to) return SWIG_ERROR;
  if (ty) {
    if (to != ty) {
      /* check type cast? */
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      if (!tc) return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}  

/* -----------------------------------------------------------------------------
 * Create a new pointer object
 * ----------------------------------------------------------------------------- */

/*
  Create a new instance object, without calling __init__, and set the
  'this' attribute.
*/

SWIGRUNTIME PyObject* 
SWIG_Python_NewShadowInstance(SwigPyClientData *data, PyObject *swig_this)
{
  PyObject *inst = 0;
  PyObject *newraw = data->newraw;
  if (newraw) {
    inst = PyObject_Call(newraw, data->newargs, NULL);
    if (inst) {
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
      PyObject **dictptr = _PyObject_GetDictPtr(inst);
      if (dictptr != NULL) {
        PyObject *dict = *dictptr;
        if (dict == NULL) {
          dict = PyDict_New();
          *dictptr = dict;
        }
        if (dict) {
          PyDict_SetItem(dict, SWIG_This(), swig_this);
        } else{
          SWIG_Py_DECREF(inst);
          inst = 0;
        }
      }
#else
      if (PyObject_SetAttr(inst, SWIG_This(), swig_this) == -1) {
        SWIG_Py_DECREF(inst);
        inst = 0;
      }
#endif
    }
  } else {
#if PY_VERSION_HEX >= 0x03000000
    PyObject *empty_args = PyTuple_New(0);
    if (empty_args) {
      PyObject *empty_kwargs = PyDict_New();
      if (empty_kwargs) {
#ifndef Py_LIMITED_API
        newfunc newfn = ((PyTypeObject *)data->newargs)->tp_new;
#else
        newfunc newfn = (newfunc)PyType_GetSlot((PyTypeObject *)data->newargs, Py_tp_new);
#endif
        inst = newfn((PyTypeObject *)data->newargs, empty_args, empty_kwargs);
        SWIG_Py_DECREF(empty_kwargs);
        if (inst) {
          if (PyObject_SetAttr(inst, SWIG_This(), swig_this) == -1) {
            SWIG_Py_DECREF(inst);
            inst = 0;
          } else {
            PyType_Modified(Py_TYPE(inst));
          }
        }
      }
      SWIG_Py_DECREF(empty_args);
    }
#else
    PyObject *dict = PyDict_New();
    if (dict) {
      PyDict_SetItem(dict, SWIG_This(), swig_this);
      inst = PyInstance_NewRaw(data->newargs, dict);
      SWIG_Py_DECREF(dict);
    }
#endif
  }
  return inst;
}

SWIGRUNTIME int
SWIG_Python_SetSwigThis(PyObject *inst, PyObject *swig_this)
{
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
  PyObject **dictptr = _PyObject_GetDictPtr(inst);
  if (dictptr != NULL) {
    PyObject *dict = *dictptr;
    if (dict == NULL) {
      dict = PyDict_New();
      *dictptr = dict;
    }
    if (dict) {
      return PyDict_SetItem(dict, SWIG_This(), swig_this);
    } else{
      return -1;
    }
  }
#endif
  return PyObject_SetAttr(inst, SWIG_This(), swig_this);
} 


SWIGINTERN PyObject *
SWIG_Python_InitShadowInstance(PyObject *args) {
  PyObject *obj[2];
  if (!SWIG_Python_UnpackTuple(args, "swiginit", 2, 2, obj)) {
    return NULL;
  } else {
    SwigPyObject *sthis = SWIG_Python_GetSwigThis(obj[0]);
    if (sthis) {
      SWIG_Py_DECREF(SwigPyObject_append((PyObject*) sthis, obj[1]));
    } else {
      if (SWIG_Python_SetSwigThis(obj[0], obj[1]) != 0)
        return NULL;
    }
    return SWIG_Py_Void();
  }
}

/* Create a new pointer object */

SWIGRUNTIME PyObject *
SWIG_Python_NewPointerObj(PyObject *self, void *ptr, swig_type_info *type, int flags) {
  SwigPyClientData *clientdata;
  PyObject * robj;
  int own;

  if (!ptr)
    return SWIG_Py_Void();

  clientdata = type ? (SwigPyClientData *)(type->clientdata) : 0;
  own = (flags & SWIG_POINTER_OWN) ? SWIG_POINTER_OWN : 0;
  if (clientdata && clientdata->pytype) {
    SwigPyObject *newobj;
    if (flags & SWIG_BUILTIN_TP_INIT) {
      newobj = (SwigPyObject*) self;
      if (newobj->ptr) {
#ifndef Py_LIMITED_API
        allocfunc alloc = clientdata->pytype->tp_alloc;
#else
        allocfunc alloc = (allocfunc)PyType_GetSlot(clientdata->pytype, Py_tp_alloc);
#endif
        PyObject *next_self = alloc(clientdata->pytype, 0);
        while (newobj->next)
	  newobj = (SwigPyObject *) newobj->next;
        newobj->next = next_self;
        newobj = (SwigPyObject *)next_self;
#ifdef SWIGPYTHON_BUILTIN
        newobj->dict = 0;
#endif
      }
    } else {
      newobj = PyObject_New(SwigPyObject, clientdata->pytype);
#ifdef SWIGPYTHON_BUILTIN
      if (newobj) {
        newobj->dict = 0;
      }
#endif
    }
    if (newobj) {
      newobj->ptr = ptr;
      newobj->ty = type;
      newobj->own = own;
      newobj->next = 0;
      return (PyObject*) newobj;
    }
    return SWIG_Py_Void();
  }

  assert(!(flags & SWIG_BUILTIN_TP_INIT));

  robj = SwigPyObject_New(ptr, type, own);
  if (robj && clientdata && !(flags & SWIG_POINTER_NOSHADOW)) {
    PyObject *inst = SWIG_Python_NewShadowInstance(clientdata, robj);
    SWIG_Py_DECREF(robj);
    robj = inst;
  }
  return robj;
}

/* Create a new packed object */

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  return ptr ? SwigPyPacked_New((void *) ptr, sz, type) : SWIG_Py_Void();
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
void *SWIG_ReturnGlobalTypeList(void *);
#endif

static PyObject *Swig_TypeCache_global = NULL;

/* The python cached type query */
SWIGRUNTIME PyObject *
SWIG_Python_TypeCache(void) {
  if (Swig_TypeCache_global == NULL) {
    Swig_TypeCache_global = PyDict_New();
  }
  return Swig_TypeCache_global;
}

SWIGRUNTIME swig_module_info *
SWIG_Python_GetModule(void *SWIGUNUSEDPARM(clientdata)) {
#ifdef SWIG_LINK_RUNTIME
  static void *type_pointer = (void *)0;
  /* first check if module already created */
  if (!type_pointer) {
    type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
  }
#else
  void *type_pointer = PyCapsule_Import(SWIGPY_CAPSULE_NAME, 0);
  if (PyErr_Occurred()) {
    PyErr_Clear();
    type_pointer = (void *)0;
  }
#endif
  return (swig_module_info *) type_pointer;
}


static int interpreter_counter = 0; /* how many (sub-)interpreters are using swig_module's types */

SWIGRUNTIME void
SWIG_Python_DestroyModule(PyObject *obj)
{
  swig_module_info *swig_module = (swig_module_info *) PyCapsule_GetPointer(obj, SWIGPY_CAPSULE_NAME);
  swig_type_info **types = swig_module->types;
  size_t i;
  if (--interpreter_counter != 0) /* another sub-interpreter may still be using the swig_module's types */
    return;
  for (i =0; i < swig_module->size; ++i) {
    swig_type_info *ty = types[i];
    if (ty->owndata) {
      SwigPyClientData *data = (SwigPyClientData *) ty->clientdata;
      ty->clientdata = 0;
      if (data) SwigPyClientData_Del(data);
    }
  }
  SWIG_Py_DECREF(SWIG_This());
  Swig_This_global = NULL;
  SWIG_Py_DECREF(SWIG_globals());
  Swig_Globals_global = NULL;
  SWIG_Py_DECREF(SWIG_Python_TypeCache());
  Swig_TypeCache_global = NULL;
  Swig_Capsule_global = NULL;
}

SWIGRUNTIME void
SWIG_Python_SetModule(swig_module_info *swig_module) {
#if PY_VERSION_HEX >= 0x03000000
 /* Add a dummy module object into sys.modules */
  PyObject *module = PyImport_AddModule("swig_runtime_data" SWIG_RUNTIME_VERSION);
#else
  static PyMethodDef swig_empty_runtime_method_table[] = { {NULL, NULL, 0, NULL} }; /* Sentinel */
  PyObject *module = Py_InitModule("swig_runtime_data" SWIG_RUNTIME_VERSION, swig_empty_runtime_method_table);
#endif
  PyObject *pointer = PyCapsule_New((void *) swig_module, SWIGPY_CAPSULE_NAME, SWIG_Python_DestroyModule);
  if (pointer && module) {
    if (PyModule_AddObject(module, SWIGPY_CAPSULE_ATTR_NAME, pointer) == 0) {
      ++interpreter_counter;
      Swig_Capsule_global = pointer;
    } else {
      SWIG_Py_DECREF(pointer);
    }
  } else {
    SWIG_Py_XDECREF(pointer);
  }
}

SWIGRUNTIME swig_type_info *
SWIG_Python_TypeQuery(const char *type)
{
  PyObject *cache = SWIG_Python_TypeCache();
  PyObject *key = SWIG_Python_str_FromChar(type); 
  PyObject *obj = PyDict_GetItem(cache, key);
  swig_type_info *descriptor;
  if (obj) {
    descriptor = (swig_type_info *) PyCapsule_GetPointer(obj, NULL);
  } else {
    swig_module_info *swig_module = SWIG_GetModule(0);
    descriptor = SWIG_TypeQueryModule(swig_module, swig_module, type);
    if (descriptor) {
      obj = PyCapsule_New((void*) descriptor, NULL, NULL);
      if (obj) {
        PyDict_SetItem(cache, key, obj);
        SWIG_Py_DECREF(obj);
      }
    }
  }
  SWIG_Py_DECREF(key);
  return descriptor;
}

/* 
   For backward compatibility only
*/
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_arg_fail(arg)      SWIG_Python_ArgFail(arg)
#define SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)

SWIGRUNTIME int
SWIG_Python_AddErrMesg(const char* mesg, int infront)
{  
  if (PyErr_Occurred()) {
    PyObject *type = 0;
    PyObject *value = 0;
    PyObject *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    if (value) {
      PyObject *old_str = PyObject_Str(value);
      PyObject *bytes = NULL;
      const char *tmp = SWIG_PyUnicode_AsUTF8AndSize(old_str, NULL, &bytes);
      const char *errmesg = tmp ? tmp : "Invalid error message";
      SWIG_Py_XINCREF(type);
      PyErr_Clear();
      if (infront) {
	PyErr_Format(type, "%s %s", mesg, errmesg);
      } else {
	PyErr_Format(type, "%s %s", errmesg, mesg);
      }
      SWIG_Py_XDECREF(bytes);
      SWIG_Py_DECREF(old_str);
    }
    return 1;
  } else {
    return 0;
  }
}
  
SWIGRUNTIME int
SWIG_Python_ArgFail(int argnum)
{
  if (PyErr_Occurred()) {
    /* add information about failing argument */
    char mesg[256];
    PyOS_snprintf(mesg, sizeof(mesg), "argument number %d:", argnum);
    return SWIG_Python_AddErrMesg(mesg, 1);
  } else {
    return 0;
  }
}

SWIGRUNTIMEINLINE const char *
SwigPyObject_GetDesc(PyObject *self)
{
  SwigPyObject *v = (SwigPyObject *)self;
  swig_type_info *ty = v ? v->ty : 0;
  return ty ? ty->str : "";
}

SWIGRUNTIME void
SWIG_Python_TypeError(const char *type, PyObject *obj)
{
  (void) obj;
  if (type) {
#if defined(SWIG_COBJECT_TYPES)
    if (obj && SwigPyObject_Check(obj)) {
      const char *otype = (const char *) SwigPyObject_GetDesc(obj);
      if (otype) {
	PyErr_Format(PyExc_TypeError, "a '%s' is expected, 'SwigPyObject(%s)' is received",
		     type, otype);
	return;
      }
    } else 
#endif      
    {
#ifndef Py_LIMITED_API
      /* tp_name is not accessible */
      const char *otype = (obj ? obj->ob_type->tp_name : 0); 
      if (otype) {
	PyObject *str = PyObject_Str(obj);
	PyObject *bytes = NULL;
	const char *cstr = str ? SWIG_PyUnicode_AsUTF8AndSize(str, NULL, &bytes) : 0;
	if (cstr) {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s(%s)' is received",
		       type, otype, cstr);
	} else {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s' is received",
		       type, otype);
	}
	SWIG_Py_XDECREF(bytes);
	SWIG_Py_XDECREF(str);
	return;
      }
#endif
    }   
    PyErr_Format(PyExc_TypeError, "a '%s' is expected", type);
  } else {
    PyErr_Format(PyExc_TypeError, "unexpected type is received");
  }
}


/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME void *
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int SWIGUNUSEDPARM(argnum), int flags) {
  void *result;
  if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
    PyErr_Clear();
  }
  return result;
}

#ifdef SWIGPYTHON_BUILTIN
SWIGRUNTIME int
SWIG_Python_NonDynamicSetAttr(PyObject *obj, PyObject *name, PyObject *value) {
  PyTypeObject *tp = obj->ob_type;
  PyObject *descr;
  PyObject *encoded_name;
  descrsetfunc f;
  int res = -1;

# ifdef Py_USING_UNICODE
  if (PyString_Check(name)) {
    name = PyUnicode_Decode(PyString_AsString(name), PyString_Size(name), NULL, NULL);
    if (!name)
      return -1;
  } else if (!PyUnicode_Check(name))
# else
  if (!PyString_Check(name))
# endif
  {
    PyErr_Format(PyExc_TypeError, "attribute name must be string, not '%.200s'", name->ob_type->tp_name);
    return -1;
  } else {
    SWIG_Py_INCREF(name);
  }

  if (!tp->tp_dict) {
    if (PyType_Ready(tp) != 0)
      goto done;
  }

  descr = _PyType_Lookup(tp, name);
  f = NULL;
  if (descr != NULL)
    f = descr->ob_type->tp_descr_set;
  if (!f) {
    if (PyString_Check(name)) {
      encoded_name = name;
      SWIG_Py_INCREF(name);
    } else {
      encoded_name = PyUnicode_AsUTF8String(name);
      if (!encoded_name)
        goto done;
    }
    PyErr_Format(PyExc_AttributeError, "'%.100s' object has no attribute '%.200s'", tp->tp_name, PyString_AsString(encoded_name));
    SWIG_Py_DECREF(encoded_name);
  } else {
    res = f(descr, obj, value);
  }
  
  done:
  SWIG_Py_DECREF(name);
  return res;
}
#endif


#ifdef __cplusplus
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) do { if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } } while (0) 



  #define SWIG_exception(code, msg) do { SWIG_Error(code, msg); SWIG_fail;; } while(0) 

/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif
/* -----------------------------------------------------------------------------
 * director_py_mutex.swg
 *
 * contains python mutex for threads
 * ----------------------------------------------------------------------------- */

#if defined(SWIG_PYTHON_THREADS) && !defined(SWIG_THREADS)
#define SWIG_THREADS 1
#endif
#if defined(SWIG_THREADS) && !defined(Py_LIMITED_API)
#include "pythread.h"
#define SWIG_HAVE_MUTEX
namespace Swig {
   class Mutex
   {
       PyThread_type_lock mutex_;
   public:
       Mutex() : mutex_(PyThread_allocate_lock()) {}
       ~Mutex() { PyThread_free_lock(mutex_); }
       void lock() { PyThread_acquire_lock(mutex_, WAIT_LOCK); }
       void unlock() { PyThread_release_lock(mutex_); }
   };
}
#endif
/* -----------------------------------------------------------------------------
 * director_guard.swg
 *
 * Generic Mutex implementation for directors
 *
 * Before including this file, there are two macros to define for choosing
 * an implementation as follows:
 * - SWIG_THREADS:
 *   If defined than mutexes are used.
 *   If not defined then mutexes are not used.
 * - SWIG_HAVE_MUTEX:
 *   If there is a target language defined 'Mutex' class available, the target
 *     language will define this macro to use the class over the options below.
 *     The language 'Mutex' class needs to be Basic Lockable.
 *     It must have public 'void lock()' and 'void unlock()' methods.
 *     See: https://en.cppreference.com/w/cpp/named_req/BasicLockable
 *   If the macro is not defined, one of the following will be used in this order:
 *   - std::mutex if using C++11 or later.
 *   - CRITICAL_SECTION on Windows.
 *   - POSIX pthread mutex.
 * ----------------------------------------------------------------------------- */

#ifdef SWIG_THREADS

#if __cplusplus >= 201103L
/*
 * C++ 11 or above
 * std::mutex        https://en.cppreference.com/w/cpp/thread/mutex
 * std::unique_lock  https://en.cppreference.com/w/cpp/thread/unique_lock
 */
#include <mutex>
#ifdef SWIG_HAVE_MUTEX
/* Use Language defined Mutex class */
#define SWIG_GUARD(_mutex) std::unique_lock<Mutex> _guard(_mutex)
#define SWIG_GUARD_DEFINITION(_cls, _mutex) Mutex _cls::_mutex
#define SWIG_GUARD_DECLARATION(_mutex) static Mutex _mutex
#else
#define SWIG_GUARD(_mutex) std::unique_lock<std::mutex> _guard(_mutex)
#define SWIG_GUARD_DEFINITION(_cls, _mutex) std::mutex _cls::_mutex
#define SWIG_GUARD_DECLARATION(_mutex) static std::mutex _mutex
#endif

#else /* __cplusplus */

#ifdef SWIG_HAVE_MUTEX
/* Use Language defined Mutex class */

#elif defined(_WIN32)
/*
 * Windows Critical Section Objects
 * https://learn.microsoft.com/en-us/windows/win32/Sync/critical-section-objects
 */
#include <windows.h>
#include <synchapi.h>
namespace Swig {
    class Mutex {
        CRITICAL_SECTION mutex_;
    public:
        Mutex() { InitializeCriticalSection(&mutex_); }
        ~Mutex() { DeleteCriticalSection(&mutex_); }
        void lock() { EnterCriticalSection(&mutex_); }
        void unlock() { LeaveCriticalSection(&mutex_); }
    };
}

#else /* _WIN32 */
/*
 * POSIX Thread mutex
 * https://pubs.opengroup.org/onlinepubs/7908799/xsh/pthread.h.html
 */
#include <pthread.h>
namespace Swig {
    class Mutex {
        pthread_mutex_t mutex_;
    public:
        Mutex() { pthread_mutex_init(&mutex_, NULL); }
        ~Mutex() { pthread_mutex_destroy(&mutex_); }
        void lock() { pthread_mutex_lock(&mutex_); }
        void unlock() { pthread_mutex_unlock(&mutex_); }
    };
}

#endif /* _WIN32 */

namespace Swig {
    class Unique_lock {
        Mutex &mutex_;
    public:
        Unique_lock(Mutex &_mutex) : mutex_(_mutex) { mutex_.lock(); }
        ~Unique_lock() { mutex_.unlock(); }
    };
}
#define SWIG_GUARD(_mutex) Unique_lock _guard(_mutex)
#define SWIG_GUARD_DEFINITION(_cls, _mutex) Mutex _cls::_mutex
#define SWIG_GUARD_DECLARATION(_mutex) static Mutex _mutex

#endif /* __cplusplus */

#else /* SWIG_THREADS */

#define SWIG_GUARD(_mutex)
#define SWIG_GUARD_DEFINITION(_cls, _mutex)
#define SWIG_GUARD_DECLARATION(_mutex)

#endif /* SWIG_THREADS */
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that Python proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DIRECTOR_PYTHON_HEADER_
#define SWIG_DIRECTOR_PYTHON_HEADER_

#include <string>
#include <iostream>
#include <exception>
#include <vector>
#include <map>

/*
  Use -DSWIG_PYTHON_DIRECTOR_NO_VTABLE if you don't want to generate a 'virtual
  table', and avoid multiple GetAttr calls to retrieve the python
  methods.
*/

#ifndef SWIG_PYTHON_DIRECTOR_NO_VTABLE
#ifndef SWIG_PYTHON_DIRECTOR_VTABLE
#define SWIG_PYTHON_DIRECTOR_VTABLE
#endif
#endif



/*
  Use -DSWIG_DIRECTOR_NO_UEH if you prefer to avoid the use of the
  Undefined Exception Handler provided by swig.
*/
#ifndef SWIG_DIRECTOR_NO_UEH
#ifndef SWIG_DIRECTOR_UEH
#define SWIG_DIRECTOR_UEH
#endif
#endif


/*
  Use -DSWIG_DIRECTOR_NORTTI if you prefer to avoid the use of the
  native C++ RTTI and dynamic_cast<>. But be aware that directors
  could stop working when using this option.
*/
#ifdef SWIG_DIRECTOR_NORTTI
/*
   When we don't use the native C++ RTTI, we implement a minimal one
   only for Directors.
*/
# ifndef SWIG_DIRECTOR_RTDIR
# define SWIG_DIRECTOR_RTDIR

namespace Swig {
  class Director;
  SWIGINTERN std::map<void *, Director *>& get_rtdir_map() {
    static std::map<void *, Director *> rtdir_map;
    return rtdir_map;
  }

  SWIGINTERNINLINE void set_rtdir(void *vptr, Director *rtdir) {
    get_rtdir_map()[vptr] = rtdir;
  }

  SWIGINTERNINLINE Director *get_rtdir(void *vptr) {
    std::map<void *, Director *>::const_iterator pos = get_rtdir_map().find(vptr);
    Director *rtdir = (pos != get_rtdir_map().end()) ? pos->second : 0;
    return rtdir;
  }
}
# endif /* SWIG_DIRECTOR_RTDIR */

# define SWIG_DIRECTOR_CAST(ARG) Swig::get_rtdir(static_cast<void *>(ARG))
# define SWIG_DIRECTOR_RGTR(ARG1, ARG2) Swig::set_rtdir(static_cast<void *>(ARG1), ARG2)

#else

# define SWIG_DIRECTOR_CAST(ARG) dynamic_cast<Swig::Director *>(ARG)
# define SWIG_DIRECTOR_RGTR(ARG1, ARG2)

#endif /* SWIG_DIRECTOR_NORTTI */

extern "C" {
  struct swig_type_info;
}

namespace Swig {

  /* memory handler */
  struct GCItem {
    virtual ~GCItem() {}

    virtual int get_own() const {
      return 0;
    }
  };

  struct GCItem_var {
    GCItem_var(GCItem *item = 0) : _item(item) {
    }

    GCItem_var& operator=(GCItem *item) {
      GCItem *tmp = _item;
      _item = item;
      delete tmp;
      return *this;
    }

    ~GCItem_var() {
      delete _item;
    }

    GCItem * operator->() const {
      return _item;
    }

  private:
    GCItem *_item;
  };

  struct GCItem_Object : GCItem {
    GCItem_Object(int own) : _own(own) {
    }

    virtual ~GCItem_Object() {
    }

    int get_own() const {
      return _own;
    }

  private:
    int _own;
  };

  template <typename Type>
  struct GCItem_T : GCItem {
    GCItem_T(Type *ptr) : _ptr(ptr) {
    }

    virtual ~GCItem_T() {
      delete _ptr;
    }

  private:
    Type *_ptr;
  };

  template <typename Type>
  struct GCArray_T : GCItem {
    GCArray_T(Type *ptr) : _ptr(ptr) {
    }

    virtual ~GCArray_T() {
      delete[] _ptr;
    }

  private:
    Type *_ptr;
  };

  /* base class for director exceptions */
  class DirectorException : public std::exception {
  protected:
    std::string swig_msg;
  public:
    DirectorException(PyObject *error, const char *hdr ="", const char *msg ="") : swig_msg(hdr) {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      if (msg[0]) {
        swig_msg += " ";
        swig_msg += msg;
      }
      if (!PyErr_Occurred()) {
        PyErr_SetString(error, swig_msg.c_str());
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
    }

    virtual ~DirectorException() throw() {
    }

    /* Deprecated, use what() instead */
    const char *getMessage() const {
      return what();
    }

    const char *what() const throw() {
      return swig_msg.c_str();
    }

    static void raise(PyObject *error, const char *msg) {
      throw DirectorException(error, msg);
    }

    static void raise(const char *msg) {
      raise(PyExc_RuntimeError, msg);
    }
  };

  /* type mismatch in the return value from a python method call */
  class DirectorTypeMismatchException : public DirectorException {
  public:
    DirectorTypeMismatchException(PyObject *error, const char *msg="")
      : DirectorException(error, "SWIG director type mismatch", msg) {
    }

    DirectorTypeMismatchException(const char *msg="")
      : DirectorException(PyExc_TypeError, "SWIG director type mismatch", msg) {
    }

    static void raise(PyObject *error, const char *msg) {
      throw DirectorTypeMismatchException(error, msg);
    }

    static void raise(const char *msg) {
      throw DirectorTypeMismatchException(msg);
    }
  };

  /* any python exception that occurs during a director method call */
  class DirectorMethodException : public DirectorException {
  public:
    DirectorMethodException(const char *msg = "")
      : DirectorException(PyExc_RuntimeError, "SWIG director method error.", msg) {
    }

    static void raise(const char *msg) {
      throw DirectorMethodException(msg);
    }
  };

  /* attempt to call a pure virtual method via a director method */
  class DirectorPureVirtualException : public DirectorException {
  public:
    DirectorPureVirtualException(const char *msg = "")
      : DirectorException(PyExc_RuntimeError, "SWIG director pure virtual method called", msg) {
    }

    static void raise(const char *msg) {
      throw DirectorPureVirtualException(msg);
    }
  };



  /* director base class */
  class Director {
  private:
    /* pointer to the wrapped python object */
    PyObject *swig_self;
    /* flag indicating whether the object is owned by python or c++ */
    mutable bool swig_disown_flag;

    /* decrement the reference count of the wrapped python object */
    void swig_decref() const {
      if (swig_disown_flag) {
        SWIG_PYTHON_THREAD_BEGIN_BLOCK;
        SWIG_Py_DECREF(swig_self);
        SWIG_PYTHON_THREAD_END_BLOCK;
      }
    }

  public:
    /* wrap a python object. */
    Director(PyObject *self) : swig_self(self), swig_disown_flag(false) {
    }

    /* discard our reference at destruction */
    virtual ~Director() {
      swig_decref();
    }

    /* return a pointer to the wrapped python object */
    PyObject *swig_get_self() const {
      return swig_self;
    }

    /* acquire ownership of the wrapped python object (the sense of "disown" is from python) */
    void swig_disown() const {
      if (!swig_disown_flag) {
        swig_disown_flag=true;
        swig_incref();
      }
    }

    /* increase the reference count of the wrapped python object */
    void swig_incref() const {
      if (swig_disown_flag) {
        SWIG_Py_INCREF(swig_self);
      }
    }

    /* methods to implement pseudo protected director members */
    virtual bool swig_get_inner(const char * /* swig_protected_method_name */) const {
      return true;
    }

    virtual void swig_set_inner(const char * /* swig_protected_method_name */, bool /* swig_val */) const {
    }

  /* ownership management */
  private:
    typedef std::map<void *, GCItem_var> swig_ownership_map;
    mutable swig_ownership_map swig_owner;
    SWIG_GUARD_DECLARATION(swig_mutex_own);

  public:
    template <typename Type>
    void swig_acquire_ownership_array(Type *vptr) const {
      if (vptr) {
        SWIG_GUARD(swig_mutex_own);
        swig_owner[vptr] = new GCArray_T<Type>(vptr);
      }
    }

    template <typename Type>
    void swig_acquire_ownership(Type *vptr) const {
      if (vptr) {
        SWIG_GUARD(swig_mutex_own);
        swig_owner[vptr] = new GCItem_T<Type>(vptr);
      }
    }

    void swig_acquire_ownership_obj(void *vptr, int own) const {
      if (vptr && own) {
        SWIG_GUARD(swig_mutex_own);
        swig_owner[vptr] = new GCItem_Object(own);
      }
    }

    int swig_release_ownership(void *vptr) const {
      int own = 0;
      if (vptr) {
        SWIG_GUARD(swig_mutex_own);
        swig_ownership_map::iterator iter = swig_owner.find(vptr);
        if (iter != swig_owner.end()) {
          own = iter->second->get_own();
          swig_owner.erase(iter);
        }
      }
      return own;
    }

    template <typename Type>
    static PyObject *swig_pyobj_disown(PyObject *pyobj, PyObject *SWIGUNUSEDPARM(args)) {
      SwigPyObject *sobj = (SwigPyObject *)pyobj;
      sobj->own = 0;
      Director *d = SWIG_DIRECTOR_CAST(reinterpret_cast<Type *>(sobj->ptr));
      if (d)
        d->swig_disown();
      return PyWeakref_NewProxy(pyobj, NULL);
    }
  };

  SWIG_GUARD_DEFINITION(Director, swig_mutex_own);
}

#endif

/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_ArcIterator swig_types[0]
#define SWIGTYPE_p_BNGenerator swig_types[1]
#define SWIGTYPE_p_EdgeIterator swig_types[2]
#define SWIGTYPE_p_Handler swig_types[3]
#define SWIGTYPE_p_HandlerSafe swig_types[4]
#define SWIGTYPE_p_InformationTheory swig_types[5]
#define SWIGTYPE_p_IsMissing swig_types[6]
#define SWIGTYPE_p_MissingValType swig_types[7]
#define SWIGTYPE_p_NodeConstIterator swig_types[8]
#define SWIGTYPE_p_NodeConstIteratorSafe swig_types[9]
#define SWIGTYPE_p_NodeIterator swig_types[10]
#define SWIGTYPE_p_NodeIteratorSafe swig_types[11]
#define SWIGTYPE_p_PRMexplorer swig_types[12]
#define SWIGTYPE_p_PythonApproximationListener swig_types[13]
#define SWIGTYPE_p_PythonBNListener swig_types[14]
#define SWIGTYPE_p_PythonDatabaseGeneratorListener swig_types[15]
#define SWIGTYPE_p_PythonLoadListener swig_types[16]
#define SWIGTYPE_p_allocator_type swig_types[17]
#define SWIGTYPE_p_char swig_types[18]
#define SWIGTYPE_p_difference_type swig_types[19]
#define SWIGTYPE_p_first_type swig_types[20]
#define SWIGTYPE_p_gum__ApproximationScheme swig_types[21]
#define SWIGTYPE_p_gum__Arc swig_types[22]
#define SWIGTYPE_p_gum__BNdistanceT_double_t swig_types[23]
#define SWIGTYPE_p_gum__BayesNetFragmentT_double_t swig_types[24]
#define SWIGTYPE_p_gum__BayesNetT_double_t swig_types[25]
#define SWIGTYPE_p_gum__CliqueGraph swig_types[26]
#define SWIGTYPE_p_gum__DAG swig_types[27]
#define SWIGTYPE_p_gum__DAGmodel swig_types[28]
#define SWIGTYPE_p_gum__DiGraph swig_types[29]
#define SWIGTYPE_p_gum__DiGraphListener swig_types[30]
#define SWIGTYPE_p_gum__DiscreteVariable swig_types[31]
#define SWIGTYPE_p_gum__DiscretizedVariableT_double_t swig_types[32]
#define SWIGTYPE_p_gum__Edge swig_types[33]
#define SWIGTYPE_p_gum__EssentialGraph swig_types[34]
#define SWIGTYPE_p_gum__ExactBNdistanceT_double_t swig_types[35]
#define SWIGTYPE_p_gum__GibbsBNdistanceT_double_t swig_types[36]
#define SWIGTYPE_p_gum__GibbsSamplingT_double_t swig_types[37]
#define SWIGTYPE_p_gum__GraphicalModel swig_types[38]
#define SWIGTYPE_p_gum__IApproximationSchemeConfiguration swig_types[39]
#define SWIGTYPE_p_gum__IBayesNetT_double_t swig_types[40]
#define SWIGTYPE_p_gum__IDiscretizedVariable swig_types[41]
#define SWIGTYPE_p_gum__ImportanceSamplingT_double_t swig_types[42]
#define SWIGTYPE_p_gum__Instantiation swig_types[43]
#define SWIGTYPE_p_gum__IntegerVariable swig_types[44]
#define SWIGTYPE_p_gum__LabelizedVariable swig_types[45]
#define SWIGTYPE_p_gum__LazyPropagationT_double_t swig_types[46]
#define SWIGTYPE_p_gum__Listener swig_types[47]
#define SWIGTYPE_p_gum__LoopyBeliefPropagationT_double_t swig_types[48]
#define SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__GibbsSampling_t swig_types[49]
#define SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__ImportanceSampling_t swig_types[50]
#define SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__MonteCarloSampling_t swig_types[51]
#define SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__WeightedSampling_t swig_types[52]
#define SWIGTYPE_p_gum__MarkovBlanket swig_types[53]
#define SWIGTYPE_p_gum__MixedGraph swig_types[54]
#define SWIGTYPE_p_gum__MonteCarloSamplingT_double_t swig_types[55]
#define SWIGTYPE_p_gum__MultiDimArrayT_double_t swig_types[56]
#define SWIGTYPE_p_gum__MultiDimImplementationT_double_t swig_types[57]
#define SWIGTYPE_p_gum__MultiDimWithOffsetT_double_t swig_types[58]
#define SWIGTYPE_p_gum__NodePropertyT_std__size_t_t swig_types[59]
#define SWIGTYPE_p_gum__NumericalDiscreteVariable swig_types[60]
#define SWIGTYPE_p_gum__PDAG swig_types[61]
#define SWIGTYPE_p_gum__RangeVariable swig_types[62]
#define SWIGTYPE_p_gum__ScheduledInference swig_types[63]
#define SWIGTYPE_p_gum__SequenceT_std__size_t_t swig_types[64]
#define SWIGTYPE_p_gum__SetT_gum__Arc_t swig_types[65]
#define SWIGTYPE_p_gum__SetT_gum__Arc_t__const_iterator swig_types[66]
#define SWIGTYPE_p_gum__SetT_gum__DiscreteVariable_const_p_t swig_types[67]
#define SWIGTYPE_p_gum__SetT_gum__Edge_t swig_types[68]
#define SWIGTYPE_p_gum__SetT_gum__Edge_t__const_iterator swig_types[69]
#define SWIGTYPE_p_gum__SetT_std__size_t_t swig_types[70]
#define SWIGTYPE_p_gum__SetT_std__size_t_t__const_iterator swig_types[71]
#define SWIGTYPE_p_gum__ShaferShenoyInferenceT_double_t swig_types[72]
#define SWIGTYPE_p_gum__ShaferShenoyMRFInferenceT_double_t swig_types[73]
#define SWIGTYPE_p_gum__StructuralComparator swig_types[74]
#define SWIGTYPE_p_gum__TensorT_double_t swig_types[75]
#define SWIGTYPE_p_gum__ThreadNumberManager swig_types[76]
#define SWIGTYPE_p_gum__Triangulation swig_types[77]
#define SWIGTYPE_p_gum__UGmodel swig_types[78]
#define SWIGTYPE_p_gum__UndiGraph swig_types[79]
#define SWIGTYPE_p_gum__VariableEliminationT_double_t swig_types[80]
#define SWIGTYPE_p_gum__VariableNodeMap swig_types[81]
#define SWIGTYPE_p_gum__WeightedSamplingT_double_t swig_types[82]
#define SWIGTYPE_p_gum__learning__BNDatabaseGeneratorT_double_t swig_types[83]
#define SWIGTYPE_p_gum__learning__BNLearnerT_double_t swig_types[84]
#define SWIGTYPE_p_gum__learning__DatabaseTable swig_types[85]
#define SWIGTYPE_p_gum__learning__IBNLearner swig_types[86]
#define SWIGTYPE_p_iterator swig_types[87]
#define SWIGTYPE_p_iterator_category swig_types[88]
#define SWIGTYPE_p_iterator_safe swig_types[89]
#define SWIGTYPE_p_node_const_iterator swig_types[90]
#define SWIGTYPE_p_node_const_iterator_safe swig_types[91]
#define SWIGTYPE_p_node_iterator swig_types[92]
#define SWIGTYPE_p_node_iterator_safe swig_types[93]
#define SWIGTYPE_p_second_type swig_types[94]
#define SWIGTYPE_p_size_type swig_types[95]
#define SWIGTYPE_p_std__invalid_argument swig_types[96]
#define SWIGTYPE_p_std__size_t swig_types[97]
#define SWIGTYPE_p_std__string swig_types[98]
#define SWIGTYPE_p_std__vectorT_PythonLoadListener_std__allocatorT_PythonLoadListener_t_t swig_types[99]
#define SWIGTYPE_p_std__vectorT_std__size_t_std__allocatorT_std__size_t_t_t swig_types[100]
#define SWIGTYPE_p_std__vectorT_std__vectorT_std__string_t_std__allocatorT_std__vectorT_std__string_t_t_t swig_types[101]
#define SWIGTYPE_p_swig__SwigPyIterator swig_types[102]
#define SWIGTYPE_p_value_type swig_types[103]
#define SWIGTYPE_p_void swig_types[104]
static swig_type_info *swig_types[106];
static swig_module_info swig_module = {swig_types, 105, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#ifdef SWIG_TypeQuery
# undef SWIG_TypeQuery
#endif
#define SWIG_TypeQuery SWIG_Python_TypeQuery

/*-----------------------------------------------
              @(target):= _bn.so
  ------------------------------------------------*/
#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_init    PyInit__bn

#else
#  define SWIG_init    init_bn

#endif

#ifdef __cplusplus
#include <utility>
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigSmartPointer {
    T *ptr;
    SwigSmartPointer(T *p) : ptr(p) { }
    ~SwigSmartPointer() { delete ptr; }
    SwigSmartPointer& operator=(SwigSmartPointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
    void reset(T *p) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = p; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigSmartPointer tmp(new T(t)); pointer = tmp; return *this; }
#if __cplusplus >=201103L
  SwigValueWrapper& operator=(T&& t) { SwigSmartPointer tmp(new T(std::move(t))); pointer = tmp; return *this; }
  operator T&&() const { return std::move(*pointer.ptr); }
#else
  operator T&() const { return *pointer.ptr; }
#endif
  T *operator&() const { return pointer.ptr; }
  static void reset(SwigValueWrapper& t, T *p) { t.pointer.reset(p); }
};

/*
 * SwigValueInit() is a generic initialisation solution as the following approach:
 * 
 *       T c_result = T();
 * 
 * doesn't compile for all types for example:
 * 
 *       unsigned int c_result = unsigned int();
 */
template <typename T> T SwigValueInit() {
  return T();
}

#if __cplusplus >=201103L
# define SWIG_STD_MOVE(OBJ) std::move(OBJ)
#else
# define SWIG_STD_MOVE(OBJ) OBJ
#endif

#endif


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


namespace swig {
  class SwigPtr_PyObject {
  protected:
    PyObject *_obj;

  public:
    SwigPtr_PyObject() :_obj(0)
    {
    }

    SwigPtr_PyObject(const SwigPtr_PyObject& item) : _obj(item._obj)
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      SWIG_Py_XINCREF(_obj);
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    SwigPtr_PyObject(PyObject *obj, bool initial_ref = true) :_obj(obj)
    {
      if (initial_ref) {
        SWIG_PYTHON_THREAD_BEGIN_BLOCK;
        SWIG_Py_XINCREF(_obj);
        SWIG_PYTHON_THREAD_END_BLOCK;
      }
    }
    
    SwigPtr_PyObject & operator=(const SwigPtr_PyObject& item) 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      SWIG_Py_XINCREF(item._obj);
      SWIG_Py_XDECREF(_obj);
      _obj = item._obj;
      SWIG_PYTHON_THREAD_END_BLOCK;
      return *this;      
    }
    
    ~SwigPtr_PyObject() 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      SWIG_Py_XDECREF(_obj);
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    operator PyObject *() const
    {
      return _obj;
    }

    PyObject *operator->() const
    {
      return _obj;
    }
  };
}


namespace swig {
  struct SwigVar_PyObject : SwigPtr_PyObject {
    SwigVar_PyObject(PyObject* obj = 0) : SwigPtr_PyObject(obj, false) { }
    
    SwigVar_PyObject & operator = (PyObject* obj)
    {
      SWIG_Py_XDECREF(_obj);
      _obj = obj;
      return *this;      
    }
  };
}


#include <iostream>

#if PY_VERSION_HEX >= 0x03020000
# define SWIGPY_SLICEOBJECT PyObject
#else
# define SWIGPY_SLICEOBJECT PySliceObject
#endif


#include <typeinfo>
#include <stdexcept>


#if defined(__GNUC__)
#  if __GNUC__ == 2 && __GNUC_MINOR <= 96
#     define SWIG_STD_NOMODERN_STL
#  endif
#endif


#include <string>


#include <stddef.h>


namespace swig {
  struct stop_iteration {
  };

  struct SwigPyIterator {
  private:
    SwigPtr_PyObject _seq;

  protected:
    SwigPyIterator(PyObject *seq) : _seq(seq)
    {
    }
      
  public:
    virtual ~SwigPyIterator() {}

    // Access iterator method, required by Python
    virtual PyObject *value() const = 0;

    // Forward iterator method, required by Python
    virtual SwigPyIterator *incr(size_t n = 1) = 0;
    
    // Backward iterator method, very common in C++, but not required in Python
    virtual SwigPyIterator *decr(size_t /*n*/ = 1)
    {
      throw stop_iteration();
    }

    // Random access iterator methods, but not required in Python
    virtual ptrdiff_t distance(const SwigPyIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }

    virtual bool equal (const SwigPyIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }
    
    // C++ common/needed methods
    virtual SwigPyIterator *copy() const = 0;

    PyObject *next()     
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      PyObject *obj = value();
      incr();       
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads
      return obj;     
    }

    /* Make an alias for Python 3.x */
    PyObject *__next__()
    {
      return next();
    }

    PyObject *previous()
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      decr();
      PyObject *obj = value();
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads       
      return obj;
    }

    SwigPyIterator *advance(ptrdiff_t n)
    {
      return  (n > 0) ?  incr(n) : decr(-n);
    }
      
    bool operator == (const SwigPyIterator& x)  const
    {
      return equal(x);
    }
      
    bool operator != (const SwigPyIterator& x) const
    {
      return ! operator==(x);
    }
      
    SwigPyIterator& operator += (ptrdiff_t n)
    {
      return *advance(n);
    }

    SwigPyIterator& operator -= (ptrdiff_t n)
    {
      return *advance(-n);
    }
      
    SwigPyIterator* operator + (ptrdiff_t n) const
    {
      return copy()->advance(n);
    }

    SwigPyIterator* operator - (ptrdiff_t n) const
    {
      return copy()->advance(-n);
    }
      
    ptrdiff_t operator - (const SwigPyIterator& x) const
    {
      return x.distance(*this);
    }
      
    static swig_type_info* descriptor() {
      static swig_type_info* desc = SWIG_TypeQuery("swig::SwigPyIterator *");
      return desc;
    }    
  };

#if defined(SWIGPYTHON_BUILTIN)
  inline PyObject* make_output_iterator_builtin (PyObject *pyself)
  {
    SWIG_Py_INCREF(pyself);
    return pyself;
  }
#endif
}


SWIGINTERN int
SWIG_AsVal_double (PyObject *obj, double *val)
{
  int res = SWIG_TypeError;
  if (PyFloat_Check(obj)) {
    if (val) *val = PyFloat_AsDouble(obj);
    return SWIG_OK;
#if PY_VERSION_HEX < 0x03000000
  } else if (PyInt_Check(obj)) {
    if (val) *val = (double) PyInt_AsLong(obj);
    return SWIG_OK;
#endif
  } else if (PyLong_Check(obj)) {
    double v = PyLong_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    double d = PyFloat_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = d;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      long v = PyLong_AsLong(obj);
      if (!PyErr_Occurred()) {
	if (val) *val = v;
	return SWIG_AddCast(SWIG_AddCast(SWIG_OK));
      } else {
	PyErr_Clear();
      }
    }
  }
#endif
  return res;
}


#include <errno.h>


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx, cx, rd;
   errno = 0;
   fx = floor(x);
   cx = ceil(x);
   rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_long (PyObject *obj, unsigned long *val) 
{
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(obj)) {
    long v = PyInt_AsLong(obj);
    if (v >= 0) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      return SWIG_OverflowError;
    }
  } else
#endif
  if (PyLong_Check(obj)) {
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      return SWIG_OverflowError;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      // Largest double not larger than ULONG_MAX (not portably calculated easily)
      // Note that double(ULONG_MAX) is stored in a double rounded up by one (for 64-bit unsigned long)
      // 0xfffffffffffff800ULL == (uint64_t)std::nextafter(double(__uint128_t(ULONG_MAX)+1), double(0))
      const double ulong_max = sizeof(unsigned long) == 8 ? 0xfffffffffffff800ULL : ULONG_MAX;
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, ulong_max)) {
	if (val) *val = (unsigned long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


#if defined(LLONG_MAX) && !defined(SWIG_LONG_LONG_AVAILABLE)
#  define SWIG_LONG_LONG_AVAILABLE
#endif


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERN int
SWIG_AsVal_unsigned_SS_long_SS_long (PyObject *obj, unsigned long long *val)
{
  int res = SWIG_TypeError;
  if (PyLong_Check(obj)) {
    unsigned long long v = PyLong_AsUnsignedLongLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      res = SWIG_OverflowError;
    }
  } else {
    unsigned long v;
    res = SWIG_AsVal_unsigned_SS_long (obj,&v);
    if (SWIG_IsOK(res)) {
      if (val) *val = v;
      return res;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    const double mant_max = 1LL << DBL_MANT_DIG;
    double d;
    res = SWIG_AsVal_double (obj,&d);
    if (SWIG_IsOK(res) && !SWIG_CanCastAsInteger(&d, 0, mant_max))
      return SWIG_OverflowError;
    if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, mant_max)) {
      if (val) *val = (unsigned long long)(d);
      return SWIG_AddCast(res);
    }
    res = SWIG_TypeError;
  }
#endif
  return res;
}
#endif


SWIGINTERNINLINE int
SWIG_AsVal_size_t (PyObject * obj, size_t *val)
{
  int res = SWIG_TypeError;
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(size_t) <= sizeof(unsigned long)) {
#endif
    unsigned long v;
    res = SWIG_AsVal_unsigned_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else if (sizeof(size_t) <= sizeof(unsigned long long)) {
    unsigned long long v;
    res = SWIG_AsVal_unsigned_SS_long_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
  }
#endif
  return res;
}


  #define SWIG_From_long   PyInt_FromLong 


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERNINLINE PyObject* 
SWIG_From_long_SS_long  (long long value)
{
  return ((value < LONG_MIN) || (value > LONG_MAX)) ?
    PyLong_FromLongLong(value) : PyInt_FromLong(static_cast< long >(value));
}
#endif


SWIGINTERNINLINE PyObject *
SWIG_From_ptrdiff_t  (ptrdiff_t value)
{    
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(ptrdiff_t) <= sizeof(long)) {
#endif
    return SWIG_From_long  (static_cast< long >(value));
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else {
    /* assume sizeof(ptrdiff_t) <= sizeof(long long) */
    return SWIG_From_long_SS_long  (static_cast< long long >(value));
  }
#endif
}


SWIGINTERNINLINE PyObject*
  SWIG_From_bool  (bool value)
{
  return PyBool_FromLong(value ? 1 : 0);
}


SWIGINTERN int
SWIG_AsVal_long (PyObject *obj, long* val)
{
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else
#endif
  if (PyLong_Check(obj)) {
    long v = PyLong_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      return SWIG_OverflowError;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    long v = PyInt_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      // Largest double not larger than LONG_MAX (not portably calculated easily)
      // Note that double(LONG_MAX) is stored in a double rounded up by one (for 64-bit long)
      // 0x7ffffffffffffc00LL == (int64_t)std::nextafter(double(__uint128_t(LONG_MAX)+1), double(0))
      const double long_max = sizeof(long) == 8 ? 0x7ffffffffffffc00LL : LONG_MAX;
      // No equivalent needed for 64-bit double(LONG_MIN) is exactly LONG_MIN
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, LONG_MIN, long_max)) {
	if (val) *val = (long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERN int
SWIG_AsVal_long_SS_long (PyObject *obj, long long *val)
{
  int res = SWIG_TypeError;
  if (PyLong_Check(obj)) {
    long long v = PyLong_AsLongLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      res = SWIG_OverflowError;
    }
  } else {
    long v;
    res = SWIG_AsVal_long (obj,&v);
    if (SWIG_IsOK(res)) {
      if (val) *val = v;
      return res;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    const double mant_max = 1LL << DBL_MANT_DIG;
    const double mant_min = -mant_max;
    double d;
    res = SWIG_AsVal_double (obj,&d);
    if (SWIG_IsOK(res) && !SWIG_CanCastAsInteger(&d, mant_min, mant_max))
      return SWIG_OverflowError;
    if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, mant_min, mant_max)) {
      if (val) *val = (long long)(d);
      return SWIG_AddCast(res);
    }
    res = SWIG_TypeError;
  }
#endif
  return res;
}
#endif


SWIGINTERNINLINE int
SWIG_AsVal_ptrdiff_t (PyObject * obj, ptrdiff_t *val)
{
  int res = SWIG_TypeError;
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(ptrdiff_t) <= sizeof(long)) {
#endif
    long v;
    res = SWIG_AsVal_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< ptrdiff_t >(v);
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else if (sizeof(ptrdiff_t) <= sizeof(long long)) {
    long long v;
    res = SWIG_AsVal_long_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< ptrdiff_t >(v);
  }
#endif
  return res;
}


#include <algorithm>


#include <vector>


#include <utility>


#include "extensions/helpers.h"


#define PYGUM_CATCH(GUMEXCEPTION)                                               \
  catch (gum::GUMEXCEPTION & e) {                                               \
     PyErr_SetString (SWIG_Python_ExceptionType(SWIG_TypeQuery("gum::" #GUMEXCEPTION " *")), e.what()); \
  }

static void SetPythonizeAgrumException() {
  try {
    throw;
  }
  catch ( std::bad_cast& ) {
    PyErr_SetString ( PyExc_RuntimeError, "C++ Bad Cast" );
  }
  catch (gum::SyntaxError & e) {
    PyErr_SetString ( PyExc_SyntaxError, e.errorContent().c_str());
    PyErr_SyntaxLocationEx(e.filename().c_str(), e.line(), e.col());
  }
  PYGUM_CATCH(DefaultInLabel)
  PYGUM_CATCH(DuplicateElement)
  PYGUM_CATCH(DuplicateLabel)
  PYGUM_CATCH(FatalError)
  PYGUM_CATCH(FormatNotFound)
  PYGUM_CATCH(InvalidArc)
  PYGUM_CATCH(InvalidArgument)
  PYGUM_CATCH(InvalidArgumentsNumber)
  PYGUM_CATCH(InvalidDirectedCycle)
  PYGUM_CATCH(InvalidEdge)
  PYGUM_CATCH(InvalidNode)
  PYGUM_CATCH(DatabaseError)
  PYGUM_CATCH(MissingValueInDatabase)
  PYGUM_CATCH(MissingVariableInDatabase)
  PYGUM_CATCH(NoChild)
  PYGUM_CATCH(NoNeighbour)
  PYGUM_CATCH(NoParent)
  PYGUM_CATCH(GraphError)
  PYGUM_CATCH(NotFound)
  PYGUM_CATCH(NullElement)
  PYGUM_CATCH(OperationNotAllowed)
  PYGUM_CATCH(OutOfBounds)
  PYGUM_CATCH(ArgumentError)
  PYGUM_CATCH(SizeError)
  PYGUM_CATCH(IOError)
  PYGUM_CATCH(UndefinedElement)
  PYGUM_CATCH(UndefinedIteratorKey)
  PYGUM_CATCH(UndefinedIteratorValue)
  PYGUM_CATCH(UnknownLabelInDatabase)
  PYGUM_CATCH(CPTError)
  catch ( std::exception& e ) {
    PyErr_SetString ( PyExc_Exception, e.what() );
  }
}


#include "extensions/PythonBNListener.h"
#include "extensions/PythonLoadListener.h"
#include "extensions/PythonApproximationListener.h"
#include "extensions/PythonDatabaseGeneratorListener.h"


SWIGINTERN int
SWIG_AsVal_int (PyObject * obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE PyObject*
  SWIG_From_int  (int value)
{
  return PyInt_FromLong((long) value);
}


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static swig_type_info* info = 0;
  if (!info) {
    info = SWIG_TypeQuery("_p_char");
  }
  return info;
}


/* Return string from Python obj. NOTE: obj must remain in scope in order
   to use the returned cptr (but only when alloc is set to SWIG_OLDOBJ) */
SWIGINTERN int
SWIG_AsCharPtrAndSize(PyObject *obj, char **cptr, size_t *psize, int *alloc)
{
#if PY_VERSION_HEX>=0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
  if (PyBytes_Check(obj))
#else
  if (PyUnicode_Check(obj))
#endif
#else  
  if (PyString_Check(obj))
#endif
  {
    char *cstr; Py_ssize_t len;
    PyObject *bytes = NULL;
    int ret = SWIG_OK;
    if (alloc)
      *alloc = SWIG_OLDOBJ;
#if PY_VERSION_HEX>=0x03000000 && defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
    if (PyBytes_AsStringAndSize(obj, &cstr, &len) == -1)
      return SWIG_TypeError;
#else
    cstr = (char *)SWIG_PyUnicode_AsUTF8AndSize(obj, &len, &bytes);
    if (!cstr)
      return SWIG_TypeError;
    /* The returned string is only duplicated if the char * returned is not owned and memory managed by obj */
    if (bytes && cptr) {
      if (alloc) {
        cstr = reinterpret_cast< char* >(memcpy(new char[len + 1], cstr, sizeof(char)*(len + 1)));
        *alloc = SWIG_NEWOBJ;
      } else {
        /* alloc must be set in order to clean up allocated memory */
        return SWIG_RuntimeError;
      }
    }
#endif
    if (cptr) *cptr = cstr;
    if (psize) *psize = len + 1;
    SWIG_Py_XDECREF(bytes);
    return ret;
  } else {
#if defined(SWIG_PYTHON_2_UNICODE)
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
#error "Cannot use both SWIG_PYTHON_2_UNICODE and SWIG_PYTHON_STRICT_BYTE_CHAR at once"
#endif
#if PY_VERSION_HEX<0x03000000
    if (PyUnicode_Check(obj)) {
      char *cstr; Py_ssize_t len;
      if (!alloc && cptr) {
        return SWIG_RuntimeError;
      }
      obj = PyUnicode_AsUTF8String(obj);
      if (!obj)
        return SWIG_TypeError;
      if (PyString_AsStringAndSize(obj, &cstr, &len) != -1) {
        if (cptr) {
          if (alloc) *alloc = SWIG_NEWOBJ;
          *cptr = reinterpret_cast< char* >(memcpy(new char[len + 1], cstr, sizeof(char)*(len + 1)));
        }
        if (psize) *psize = len + 1;

        SWIG_Py_XDECREF(obj);
        return SWIG_OK;
      } else {
        SWIG_Py_XDECREF(obj);
      }
    }
#endif
#endif

    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      void* vptr = 0;
      if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = (char *) vptr;
	if (psize) *psize = vptr ? (strlen((char *)vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsPtr_std_string (PyObject * obj, std::string **val) 
{
  char* buf = 0 ; size_t size = 0; int alloc = SWIG_OLDOBJ;
  if (SWIG_IsOK((SWIG_AsCharPtrAndSize(obj, &buf, &size, &alloc)))) {
    if (buf) {
      if (val) *val = new std::string(buf, size - 1);
      if (alloc == SWIG_NEWOBJ) delete[] buf;
      return SWIG_NEWOBJ;
    } else {
      if (val) *val = 0;
      return SWIG_OLDOBJ;
    }
  } else {
    PyErr_Clear();
    static swig_type_info *descriptor = SWIG_TypeQuery("std::string" " *");
    if (descriptor) {
      std::string *vptr;
      int res = SWIG_ConvertPtr(obj, (void**)&vptr, descriptor, 0);
      if (SWIG_IsOK(res) && val) *val = vptr;
      return res;
    }
  }
  return SWIG_ERROR;
}


#include "extensions/BNGenerator.h"


  #define SWIG_From_double   PyFloat_FromDouble 


#include "extensions/InformationTheory.h"


SWIGINTERN int
SWIG_AsVal_bool (PyObject *obj, bool *val)
{
  int r;
  if (!PyBool_Check(obj))
    return SWIG_ERROR;
  r = PyObject_IsTrue(obj);
  if (r == -1)
    return SWIG_ERROR;
  if (val) *val = r ? true : false;
  return SWIG_OK;
}


#include "extensions/PRMexplorer.h"


#include <agrum/bn.h>


SWIGINTERNINLINE PyObject *
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > INT_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      return pchar_descriptor ? 
	SWIG_InternalNewPointerObj(const_cast< char * >(carray), pchar_descriptor, 0) : SWIG_Py_Void();
    } else {
#if PY_VERSION_HEX >= 0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
      return PyBytes_FromStringAndSize(carray, static_cast< Py_ssize_t >(size));
#else
      return PyUnicode_DecodeUTF8(carray, static_cast< Py_ssize_t >(size), "surrogateescape");
#endif
#else
      return PyString_FromStringAndSize(carray, static_cast< Py_ssize_t >(size));
#endif
    }
  } else {
    return SWIG_Py_Void();
  }
}


SWIGINTERNINLINE PyObject *
SWIG_From_std_string  (const std::string& s)
{
  return SWIG_FromCharPtrAndSize(s.data(), s.size());
}


SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long  (unsigned long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLong(value) : PyInt_FromLong(static_cast< long >(value));
}


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long_SS_long  (unsigned long long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLongLong(value) : PyInt_FromLong(static_cast< long >(value));
}
#endif


SWIGINTERNINLINE PyObject *
SWIG_From_size_t  (size_t value)
{    
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(size_t) <= sizeof(unsigned long)) {
#endif
    return SWIG_From_unsigned_SS_long  (static_cast< unsigned long >(value));
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else {
    /* assume sizeof(size_t) <= sizeof(unsigned long long) */
    return SWIG_From_unsigned_SS_long_SS_long  (static_cast< unsigned long long >(value));
  }
#endif
}

SWIGINTERN PyObject *gum_EssentialGraph_nodes(gum::EssentialGraph const *self){
    return PyAgrumHelper::PySetFromNodeSet(self->nodes());
  }
SWIGINTERN PyObject *gum_EssentialGraph_arcs(gum::EssentialGraph const *self){ // add for the sub-classes (including MixedGraph and PDAG)
    return PyAgrumHelper::PySetFromArcSet(self->arcs());
  }
SWIGINTERN PyObject *gum_EssentialGraph_parents(gum::EssentialGraph const *self,gum::NodeId id){
    return PyAgrumHelper::PySetFromNodeSet(self->parents(id));
  }
SWIGINTERN PyObject *gum_EssentialGraph_children(gum::EssentialGraph const *self,gum::NodeId id){
    return PyAgrumHelper::PySetFromNodeSet(self->children(id));
  }
SWIGINTERN PyObject *gum_EssentialGraph_edges(gum::EssentialGraph const *self){ // add for the sub-classes (including MixedGraph)
    return PyAgrumHelper::PySetFromEdgeSet(self->edges());
  }
SWIGINTERN PyObject *gum_EssentialGraph_neighbours(gum::EssentialGraph const *self,gum::NodeId id){
    return PyAgrumHelper::PySetFromNodeSet(self->neighbours(id));
  }
SWIGINTERN PyObject *gum_MarkovBlanket_nodes(gum::MarkovBlanket const *self){
    return PyAgrumHelper::PySetFromNodeSet(self->nodes());
  }
SWIGINTERN PyObject *gum_MarkovBlanket_arcs(gum::MarkovBlanket const *self){ // add for the sub-classes (including MixedGraph and PDAG)
    return PyAgrumHelper::PySetFromArcSet(self->arcs());
  }
SWIGINTERN PyObject *gum_MarkovBlanket_parents(gum::MarkovBlanket const *self,gum::NodeId id){
    return PyAgrumHelper::PySetFromNodeSet(self->parents(id));
  }
SWIGINTERN PyObject *gum_MarkovBlanket_children(gum::MarkovBlanket const *self,gum::NodeId id){
    return PyAgrumHelper::PySetFromNodeSet(self->children(id));
  }

SWIGINTERN int
SWIG_AsVal_std_string (PyObject * obj, std::string *val)
{
  std::string* v = (std::string *) 0;
  int res = SWIG_AsPtr_std_string (obj, &v);
  if (!SWIG_IsOK(res)) return res;
  if (v) {
    if (val) *val = *v;
    if (SWIG_IsNewObj(res)) {
      delete v;
      res = SWIG_DelNewMask(res);
    }
    return res;
  }
  return SWIG_ERROR;
}


namespace swig {
  template <class Type>
  struct noconst_traits {
    typedef Type noconst_type;
  };

  template <class Type>
  struct noconst_traits<const Type> {
    typedef Type noconst_type;
  };

  /*
    type categories
  */
  struct pointer_category { };
  struct value_category { };

  /*
    General traits that provides type_name and type_info
  */
  template <class Type> struct traits { };

  template <class Type>
  inline const char* type_name() {
    return traits<typename noconst_traits<Type >::noconst_type >::type_name();
  }

  template <class Type> struct traits_info {
    static swig_type_info *type_query(std::string name) {
      name += " *";
      return SWIG_TypeQuery(name.c_str());
    }
    static swig_type_info *type_info() {
      static swig_type_info *info = type_query(type_name<Type>());
      return info;
    }
  };

  /*
    Partial specialization for pointers (traits_info)
  */
  template <class Type> struct traits_info<Type *> {
    static swig_type_info *type_query(std::string name) {
      name += " *";
      return SWIG_TypeQuery(name.c_str());
    }
    static swig_type_info *type_info() {
      static swig_type_info *info = type_query(type_name<Type>());
      return info;
    }
  };

  template <class Type>
  inline swig_type_info *type_info() {
    return traits_info<Type>::type_info();
  }

  /*
    Partial specialization for pointers (traits)
  */
  template <class Type> struct traits <Type *> {
    typedef pointer_category category;
    static std::string make_ptr_name(const char* name) {
      std::string ptrname = name;
      ptrname += " *";
      return ptrname;
    }
    static const char* type_name() {
      static std::string name = make_ptr_name(swig::type_name<Type>());
      return name.c_str();
    }
  };

  template <class Type, class Category>
  struct traits_as { };

  template <class Type, class Category>
  struct traits_check { };

}


namespace swig {  
  /*
    Traits that provides the from method
  */
  template <class Type> struct traits_from_ptr {
    static PyObject *from(Type *val, int owner = 0) {
      return SWIG_InternalNewPointerObj(val, type_info<Type>(), owner);
    }
  };

  template <class Type> struct traits_from {
    static PyObject *from(const Type& val) {
      return traits_from_ptr<Type>::from(new Type(val), 1);
    }
  };

  template <class Type> struct traits_from<Type *> {
    static PyObject *from(Type* val) {
      return traits_from_ptr<Type>::from(val, 0);
    }
  };

  template <class Type> struct traits_from<const Type *> {
    static PyObject *from(const Type* val) {
      return traits_from_ptr<Type>::from(const_cast<Type*>(val), 0);
    }
  };


  template <class Type>
  inline PyObject *from(const Type& val) {
    return traits_from<Type>::from(val);
  }

  template <class Type>
  inline PyObject *from_ptr(Type* val, int owner) {
    return traits_from_ptr<Type>::from(val, owner);
  }

  /*
    Traits that provides the asval/as/check method
  */
  template <class Type>
  struct traits_asptr {   
    static int asptr(PyObject *obj, Type **val) {
      int res = SWIG_ERROR;
      swig_type_info *descriptor = type_info<Type>();
      if (val) {
        Type *p = 0;
        int newmem = 0;
        res = descriptor ? SWIG_ConvertPtrAndOwn(obj, (void **)&p, descriptor, 0, &newmem) : SWIG_ERROR;
        if (SWIG_IsOK(res)) {
          if (newmem & SWIG_CAST_NEW_MEMORY) {
            res |= SWIG_NEWOBJMASK;
          }
          *val = p;
        }
      } else {
        res = descriptor ? SWIG_ConvertPtr(obj, 0, descriptor, 0) : SWIG_ERROR;
      }
      return res;
    }
  }; 

  template <class Type>
  inline int asptr(PyObject *obj, Type **vptr) {
    return traits_asptr<Type>::asptr(obj, vptr);
  }

  template <class Type> 
  struct traits_asval {
    static int asval(PyObject *obj, Type *val) {
      if (val) {
	Type *p = 0;
	int res = traits_asptr<Type>::asptr(obj, &p);
	if (!SWIG_IsOK(res)) return res;	
	if (p) {
	  typedef typename noconst_traits<Type>::noconst_type noconst_type;
	  *(const_cast<noconst_type*>(val)) = *p;
	  if (SWIG_IsNewObj(res)){
	    delete p;
	    res = SWIG_DelNewMask(res);
	  }
	  return res;
	} else {
	  return SWIG_ERROR;
	}
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };

  template <class Type> struct traits_asval<Type*> {
    static int asval(PyObject *obj, Type **val) {
      if (val) {
        typedef typename noconst_traits<Type>::noconst_type noconst_type;
        noconst_type *p = 0;
        int res = traits_asptr<noconst_type>::asptr(obj,  &p);
        if (SWIG_IsOK(res)) {
          *(const_cast<noconst_type**>(val)) = p;
	}
	return res;
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };
  
  template <class Type>
  inline int asval(PyObject *obj, Type *val) {
    return traits_asval<Type>::asval(obj, val);
  }

  template <class Type> 
  struct traits_as<Type, value_category> {
    static Type as(PyObject *obj) {
      Type v;
      int res = asval(obj, &v);
      if (!obj || !SWIG_IsOK(res)) {
	if (!PyErr_Occurred()) {
	  ::SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	throw std::invalid_argument("bad type");
      }
      return v;
    }
  };

  template <class Type> 
  struct traits_as<Type, pointer_category> {
    static Type as(PyObject *obj) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res) && v) {
	if (SWIG_IsNewObj(res)) {
	  Type r(*v);
	  delete v;
	  return r;
	} else {
	  return *v;
	}
      } else {
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	throw std::invalid_argument("bad type");
      }
    }
  };

  template <class Type> 
  struct traits_as<Type*, pointer_category> {
    static Type* as(PyObject *obj) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res)) {
	return v;
      } else {
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	throw std::invalid_argument("bad type");
      }
    }
  };
    
  template <class Type>
  inline Type as(PyObject *obj) {
    return traits_as<Type, typename traits<Type>::category>::as(obj);
  }

  template <class Type> 
  struct traits_check<Type, value_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asval(obj, (Type *)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type> 
  struct traits_check<Type, pointer_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asptr(obj, (Type **)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type>
  inline bool check(PyObject *obj) {
    return traits_check<Type, typename traits<Type>::category>::check(obj);
  }
}


namespace swig {
  template <> struct traits< std::string > {
    typedef value_category category;
    static const char* type_name() { return"std::string"; }
  };
  template <>  struct traits_asval< std::string > {
    typedef std::string value_type;
    static int asval(PyObject *obj, value_type *val) {
      return SWIG_AsVal_std_string (obj, val);
    }
  };
  template <>  struct traits_from< std::string > {
    typedef std::string value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_std_string  (val);
    }
  };
}


#include <functional>

namespace std {
  template <>
  struct less <PyObject *>
  {
    bool
    operator()(PyObject * v, PyObject *w) const
    { 
      bool res;
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      res = PyObject_RichCompareBool(v, w, Py_LT) ? true : false;
      /* This may fall into a case of inconsistent
               eg. ObjA > ObjX > ObjB
               but ObjA < ObjB
      */
      if( PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError) )
      {
        /* Objects can't be compared, this mostly occurred in Python 3.0 */
        /* Compare their ptr directly for a workaround */
        res = (v < w);
        PyErr_Clear();
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
      return res;
    }
  };

  template <>
  struct less <swig::SwigPtr_PyObject>
  {
    bool
    operator()(const swig::SwigPtr_PyObject& v, const swig::SwigPtr_PyObject& w) const
    {
      return std::less<PyObject *>()(v, w);
    }
  };

  template <>
  struct less <swig::SwigVar_PyObject>
  {
    bool
    operator()(const swig::SwigVar_PyObject& v, const swig::SwigVar_PyObject& w) const
    {
      return std::less<PyObject *>()(v, w);
    }
  };

}

namespace swig {
  template <> struct traits<PyObject *> {
    typedef value_category category;
    static const char* type_name() { return "PyObject *"; }
  };  

  template <>  struct traits_asval<PyObject * > {   
    typedef PyObject * value_type;
    static int asval(PyObject *obj, value_type *val) {
      if (val) *val = obj;
      return SWIG_OK;
    }
  };

  template <> 
  struct traits_check<PyObject *, value_category> {
    static bool check(PyObject *) {
      return true;
    }
  };

  template <>  struct traits_from<PyObject *> {
    typedef PyObject * value_type;
    static PyObject *from(const value_type& val) {
      SWIG_Py_XINCREF(val);
      return val;
    }
  };
  
}

namespace swig {
  template <class Difference>
  inline size_t
  check_index(Difference i, size_t size, bool insert = false) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size)
	return (size_t) (i + size);
    } else if ( (size_t) i < size ) {
      return (size_t) i;
    } else if (insert && ((size_t) i == size)) {
      return size;
    }
    throw std::out_of_range("index out of range");
  }

  template <class Difference>
  void
  slice_adjust(Difference i, Difference j, Py_ssize_t step, size_t size, Difference &ii, Difference &jj, bool insert = false) {
    if (step == 0) {
      throw std::invalid_argument("slice step cannot be zero");
    } else if (step > 0) {
      // Required range: 0 <= i < size, 0 <= j < size, i <= j
      if (i < 0) {
        ii = 0;
      } else if (i < (Difference)size) {
        ii = i;
      } else if (insert && (i >= (Difference)size)) {
        ii = (Difference)size;
      }
      if (j < 0) {
        jj = 0;
      } else {
        jj = (j < (Difference)size) ? j : (Difference)size;
      }
      if (jj < ii)
        jj = ii;
    } else {
      // Required range: -1 <= i < size-1, -1 <= j < size-1, i >= j
      if (i < -1) {
        ii = -1;
      } else if (i < (Difference) size) {
        ii = i;
      } else if (i >= (Difference)(size-1)) {
        ii = (Difference)(size-1);
      }
      if (j < -1) {
        jj = -1;
      } else {
        jj = (j < (Difference)size ) ? j : (Difference)(size-1);
      }
      if (ii < jj)
        ii = jj;
    }
  }

  template <class Sequence, class Difference>
  inline typename Sequence::iterator
  getpos(Sequence* self, Difference i)  {
    typename Sequence::iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline typename Sequence::const_iterator
  cgetpos(const Sequence* self, Difference i)  {
    typename Sequence::const_iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence>
  inline void
  erase(Sequence* seq, const typename Sequence::iterator& position) {
    seq->erase(position);
  }

  template <class Sequence>
  struct traits_reserve {
    static void reserve(Sequence & /*seq*/, typename Sequence::size_type /*n*/) {
      // This should be specialized for types that support reserve
    }
  };

  template <class Sequence, class Difference>
  inline Sequence*
  getslice(const Sequence* self, Difference i, Difference j, Py_ssize_t step) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj);

    if (step > 0) {
      typename Sequence::const_iterator sb = self->begin();
      typename Sequence::const_iterator se = self->begin();
      std::advance(sb,ii);
      std::advance(se,jj);
      if (step == 1) {
        return new Sequence(sb, se);
      } else {
        Sequence *sequence = new Sequence();
        swig::traits_reserve<Sequence>::reserve(*sequence, (jj - ii + step - 1) / step);
        typename Sequence::const_iterator it = sb;
        while (it!=se) {
          sequence->push_back(*it);
          for (Py_ssize_t c=0; c<step && it!=se; ++c)
            it++;
        }
        return sequence;
      } 
    } else {
      Sequence *sequence = new Sequence();
      swig::traits_reserve<Sequence>::reserve(*sequence, (ii - jj - step - 1) / -step);
      typename Sequence::const_reverse_iterator sb = self->rbegin();
      typename Sequence::const_reverse_iterator se = self->rbegin();
      std::advance(sb,size-ii-1);
      std::advance(se,size-jj-1);
      typename Sequence::const_reverse_iterator it = sb;
      while (it!=se) {
        sequence->push_back(*it);
        for (Py_ssize_t c=0; c<-step && it!=se; ++c)
          it++;
      }
      return sequence;
    }
  }

  template <class Sequence, class Difference, class InputSeq>
  inline void
  setslice(Sequence* self, Difference i, Difference j, Py_ssize_t step, const InputSeq& is = InputSeq()) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj, true);
    if (step > 0) {
      if (step == 1) {
        size_t ssize = jj - ii;
        if (ssize <= is.size()) {
          // expanding/staying the same size
          swig::traits_reserve<Sequence>::reserve(*self, self->size() - ssize + is.size());
          typename Sequence::iterator sb = self->begin();
          typename InputSeq::const_iterator isit = is.begin();
          std::advance(sb,ii);
          std::advance(isit, jj - ii);
          self->insert(std::copy(is.begin(), isit, sb), isit, is.end());
        } else {
          // shrinking
          typename Sequence::iterator sb = self->begin();
          typename Sequence::iterator se = self->begin();
          std::advance(sb,ii);
          std::advance(se,jj);
          self->erase(sb,se);
          sb = self->begin();
          std::advance(sb,ii);
          self->insert(sb, is.begin(), is.end());
        }
      } else {
        size_t replacecount = (jj - ii + step - 1) / step;
        if (is.size() != replacecount) {
          char msg[1024];
          PyOS_snprintf(msg, sizeof(msg), "attempt to assign sequence of size %lu to extended slice of size %lu", (unsigned long)is.size(), (unsigned long)replacecount);
          throw std::invalid_argument(msg);
        }
        typename Sequence::const_iterator isit = is.begin();
        typename Sequence::iterator it = self->begin();
        std::advance(it,ii);
        for (size_t rc=0; rc<replacecount && it != self->end(); ++rc) {
          *it++ = *isit++;
          for (Py_ssize_t c=0; c<(step-1) && it != self->end(); ++c)
            it++;
        }
      }
    } else {
      size_t replacecount = (ii - jj - step - 1) / -step;
      if (is.size() != replacecount) {
        char msg[1024];
        PyOS_snprintf(msg, sizeof(msg), "attempt to assign sequence of size %lu to extended slice of size %lu", (unsigned long)is.size(), (unsigned long)replacecount);
        throw std::invalid_argument(msg);
      }
      typename Sequence::const_iterator isit = is.begin();
      typename Sequence::reverse_iterator it = self->rbegin();
      std::advance(it,size-ii-1);
      for (size_t rc=0; rc<replacecount && it != self->rend(); ++rc) {
        *it++ = *isit++;
        for (Py_ssize_t c=0; c<(-step-1) && it != self->rend(); ++c)
          it++;
      }
    }
  }

  template <class Sequence, class Difference>
  inline void
  delslice(Sequence* self, Difference i, Difference j, Py_ssize_t step) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj, true);
    if (step > 0) {
      typename Sequence::iterator sb = self->begin();
      std::advance(sb,ii);
      if (step == 1) {
        typename Sequence::iterator se = self->begin();
        std::advance(se,jj);
        self->erase(sb,se);
      } else {
        typename Sequence::iterator it = sb;
        size_t delcount = (jj - ii + step - 1) / step;
        while (delcount) {
          it = self->erase(it);
          for (Py_ssize_t c=0; c<(step-1) && it != self->end(); ++c)
            it++;
          delcount--;
        }
      }
    } else {
      typename Sequence::reverse_iterator sb = self->rbegin();
      std::advance(sb,size-ii-1);
      typename Sequence::reverse_iterator it = sb;
      size_t delcount = (ii - jj - step - 1) / -step;
      while (delcount) {
        it = typename Sequence::reverse_iterator(self->erase((++it).base()));
        for (Py_ssize_t c=0; c<(-step-1) && it != self->rend(); ++c)
          it++;
        delcount--;
      }
    }
  }
}


namespace swig {
  template <class Seq, class T = typename Seq::value_type >
  struct IteratorProtocol {
    static void assign(PyObject *obj, Seq *seq) {
      SwigVar_PyObject iter = PyObject_GetIter(obj);
      if (iter) {
        SwigVar_PyObject item = PyIter_Next(iter);
        while (item) {
          seq->insert(seq->end(), swig::as<T>(item));
          item = PyIter_Next(iter);
        }
      }
    }

    static bool check(PyObject *obj) {
      bool ret = false;
      SwigVar_PyObject iter = PyObject_GetIter(obj);
      if (iter) {
        SwigVar_PyObject item = PyIter_Next(iter);
        ret = true;
        while (item) {
          ret = swig::check<T>(item);
          item = ret ? PyIter_Next(iter) : 0;
        }
      }
      return ret;
    }
  };

  template <class Seq, class T = typename Seq::value_type >
  struct traits_asptr_stdseq {
    typedef Seq sequence;
    typedef T value_type;

    static bool is_iterable(PyObject *obj) {
      SwigVar_PyObject iter = PyObject_GetIter(obj);
      PyErr_Clear();
      return iter != 0;
    }

    static int asptr(PyObject *obj, sequence **seq) {
      int ret = SWIG_ERROR;
      if (obj == Py_None || SWIG_Python_GetSwigThis(obj)) {
	sequence *p;
	swig_type_info *descriptor = swig::type_info<sequence>();
	if (descriptor && SWIG_IsOK(::SWIG_ConvertPtr(obj, (void **)&p, descriptor, 0))) {
	  if (seq) *seq = p;
	  return SWIG_OLDOBJ;
	}
      } else if (is_iterable(obj)) {
	try {
	  if (seq) {
	    *seq = new sequence();
            IteratorProtocol<Seq, T>::assign(obj, *seq);
            if (!PyErr_Occurred())
              return SWIG_NEWOBJ;
	  } else {
	    return IteratorProtocol<Seq, T>::check(obj) ? SWIG_OK : SWIG_ERROR;
	  }
	} catch (std::exception& e) {
          if (seq && !PyErr_Occurred())
            PyErr_SetString(PyExc_TypeError, e.what());
	}
        if (seq)
          delete *seq;
	return SWIG_ERROR;
      }
      return ret;
    }
  };

  template <class Seq, class T = typename Seq::value_type >
  struct traits_from_stdseq {
    typedef Seq sequence;
    typedef T value_type;
    typedef typename Seq::size_type size_type;
    typedef typename sequence::const_iterator const_iterator;

    static PyObject *from(const sequence& seq) {
#ifdef SWIG_PYTHON_EXTRA_NATIVE_CONTAINERS
      swig_type_info *desc = swig::type_info<sequence>();
      if (desc && desc->clientdata) {
	return SWIG_InternalNewPointerObj(new sequence(seq), desc, SWIG_POINTER_OWN);
      }
#endif
      size_type size = seq.size();
      if (size <= (size_type)INT_MAX) {
	PyObject *obj = PyTuple_New((Py_ssize_t)size);
	Py_ssize_t i = 0;
	for (const_iterator it = seq.begin(); it != seq.end(); ++it, ++i) {
	  PyTuple_SetItem(obj,i,swig::from<value_type>(*it));
	}
	return obj;
      } else {
	PyErr_SetString(PyExc_OverflowError,"sequence size not valid in python");
	return NULL;
      }
    }
  };
}


  namespace swig {
    template <class T>
    struct traits_reserve<std::vector<T> > {
      static void reserve(std::vector<T> &seq, typename std::vector<T>::size_type n) {
        seq.reserve(n);
      }
    };

    template <class T>
    struct traits_asptr<std::vector<T> >  {
      static int asptr(PyObject *obj, std::vector<T> **vec) {
	return traits_asptr_stdseq<std::vector<T> >::asptr(obj, vec);
      }
    };
    
    template <class T>
    struct traits_from<std::vector<T> > {
      static PyObject *from(const std::vector<T>& vec) {
	return traits_from_stdseq<std::vector<T> >::from(vec);
      }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector< std::string, std::allocator< std::string > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "std::string" "," "std::allocator< std::string >" " >";
	  }
	};
      }
    
SWIGINTERN PyObject *gum_IBayesNet_Sl_double_Sg__ids(gum::IBayesNet< double > *self,std::vector< std::string,std::allocator< std::string > > const &names){
    return PyAgrumHelper::PyListFromNodeVect(self->ids(names));
  }
SWIGINTERN PyObject *gum_IBayesNet_Sl_double_Sg__nodeset(gum::IBayesNet< double > *self,std::vector< std::string,std::allocator< std::string > > const &names){
    return PyAgrumHelper::PySetFromNodeVect(self->ids(names));
  }
SWIGINTERN PyObject *gum_IBayesNet_Sl_double_Sg__minimalCondSet__SWIG_2(gum::IBayesNet< double > const *self,gum::NodeId target,PyObject *list){
    gum::NodeSet soids;
    PyAgrumHelper::populateNodeSetFromPySequenceOfIntOrString(soids,list,self->variableNodeMap());
    return PyAgrumHelper::PySetFromNodeSet(self->minimalCondSet(target, soids));
  }
SWIGINTERN PyObject *gum_IBayesNet_Sl_double_Sg__minimalCondSet__SWIG_3(gum::IBayesNet< double > const *self,PyObject *targets,PyObject *list){
    gum::NodeSet sotargets;
    PyAgrumHelper::populateNodeSetFromPySequenceOfIntOrString(sotargets,targets,self->variableNodeMap());

    gum::NodeSet soids;
    PyAgrumHelper::populateNodeSetFromPySequenceOfIntOrString(soids,list,self->variableNodeMap());
    return PyAgrumHelper::PySetFromNodeSet(self->minimalCondSet(sotargets, soids));
  }
SWIGINTERN bool gum_IBayesNet_Sl_double_Sg__isIndependent__SWIG_0(gum::IBayesNet< double > *self,PyObject *X,PyObject *Y,PyObject *Z){
    gum::NodeSet nx,ny,nz;
    PyAgrumHelper::populateNodeSetFromPySequenceOfIntOrString(nx,X,self->variableNodeMap());
    PyAgrumHelper::populateNodeSetFromPySequenceOfIntOrString(ny,Y,self->variableNodeMap());
    PyAgrumHelper::populateNodeSetFromPySequenceOfIntOrString(nz,Z,self->variableNodeMap());
    return self->isIndependent(nx,ny,nz);
  }
SWIGINTERN bool gum_IBayesNet_Sl_double_Sg__isIndependent__SWIG_1(gum::IBayesNet< double > *self,PyObject *X,PyObject *Y){
    gum::NodeSet nx,ny,nz;
    PyAgrumHelper::populateNodeSetFromPySequenceOfIntOrString(nx,X,self->variableNodeMap());
    PyAgrumHelper::populateNodeSetFromPySequenceOfIntOrString(ny,Y,self->variableNodeMap());
    return self->isIndependent(nx,ny,nz);
  }
SWIGINTERN PyObject *gum_IBayesNet_Sl_double_Sg__names(gum::IBayesNet< double > const *self){
     PyObject* q=PySet_New(0);

     PyObject* pyval;
     for ( auto node : self->nodes()) {
       pyval=PyString_FromString(self->variable(node).name().c_str());
       PySet_Add(q,pyval);
       Py_DecRef(pyval);
     }
     return q;
  }
SWIGINTERN PyObject *gum_IBayesNet_Sl_double_Sg__nodes(gum::IBayesNet< double > const *self){
    return PyAgrumHelper::PySetFromNodeSet(self->nodes());
  }
SWIGINTERN PyObject *gum_IBayesNet_Sl_double_Sg__arcs(gum::IBayesNet< double > const *self){
     return PyAgrumHelper::PySetFromArcSet(self->arcs());
   }
SWIGINTERN PyObject *gum_IBayesNet_Sl_double_Sg__parents(gum::IBayesNet< double > const *self,PyObject *norid){
     return PyAgrumHelper::PySetFromNodeSet(self->parents(PyAgrumHelper::nodeIdFromNameOrIndex(norid,self->variableNodeMap())));
   }
SWIGINTERN PyObject *gum_IBayesNet_Sl_double_Sg__children(gum::IBayesNet< double > const *self,PyObject *norid){
     return PyAgrumHelper::PySetFromNodeSet(self->children(PyAgrumHelper::nodeIdFromNameOrIndex(norid,self->variableNodeMap())));
   }
SWIGINTERN PyObject *gum_IBayesNet_Sl_double_Sg__family(gum::IBayesNet< double > const *self,PyObject *norid){
     return PyAgrumHelper::PySetFromNodeSet(self->family(PyAgrumHelper::nodeIdFromNameOrIndex(norid,self->variableNodeMap())));
   }
SWIGINTERN PyObject *gum_IBayesNet_Sl_double_Sg__descendants(gum::IBayesNet< double > const *self,PyObject *norid){
     return PyAgrumHelper::PySetFromNodeSet(self->descendants(PyAgrumHelper::nodeIdFromNameOrIndex(norid,self->variableNodeMap())));
   }
SWIGINTERN PyObject *gum_IBayesNet_Sl_double_Sg__ancestors(gum::IBayesNet< double > const *self,PyObject *norid){
     return PyAgrumHelper::PySetFromNodeSet(self->ancestors(PyAgrumHelper::nodeIdFromNameOrIndex(norid,self->variableNodeMap())));
   }
SWIGINTERN gum::UndiGraph gum_IBayesNet_Sl_double_Sg__moralizedAncestralGraph(gum::IBayesNet< double > *self,PyObject *nodes){
     gum::NodeSet sonodes;
     PyAgrumHelper::populateNodeSetFromPySequenceOfIntOrString(sonodes,nodes,self->variableNodeMap());
     return self->moralizedAncestralGraph(sonodes);
   }
SWIGINTERN std::string gum_IBayesNet_Sl_double_Sg____repr__(gum::IBayesNet< double > const *self){
   std::stringstream s;
   s<<"(pyagrum.IBayesNet@"<<std::hex<<self<<") "<<self->toString();
   return s.str();
  }
SWIGINTERN std::string gum_IBayesNet_Sl_double_Sg____str__(gum::IBayesNet< double > const *self){ return self->toString();}

SWIGINTERN int
SWIG_AsVal_unsigned_SS_int (PyObject * obj, unsigned int *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UINT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned int >(v);
    }
  }  
  return res;
}

SWIGINTERN PyObject *gum_BayesNet_Sl_double_Sg__ids(gum::BayesNet< double > *self,std::vector< std::string,std::allocator< std::string > > const &names){
    return PyAgrumHelper::PyListFromNodeVect(self->ids(names));
  }
SWIGINTERN PyObject *gum_BayesNet_Sl_double_Sg__nodeset(gum::BayesNet< double > *self,std::vector< std::string,std::allocator< std::string > > const &names){
    return PyAgrumHelper::PySetFromNodeVect(self->ids(names));
  }
SWIGINTERN PyObject *gum_BayesNet_Sl_double_Sg__minimalCondSet__SWIG_0(gum::BayesNet< double > const *self,gum::NodeId target,PyObject *list){
    gum::NodeSet soids;
    PyAgrumHelper::populateNodeSetFromPySequenceOfIntOrString(soids,list,self->variableNodeMap());
    return PyAgrumHelper::PySetFromNodeSet(self->minimalCondSet(target, soids));
  }
SWIGINTERN PyObject *gum_BayesNet_Sl_double_Sg__minimalCondSet__SWIG_1(gum::BayesNet< double > const *self,PyObject *targets,PyObject *list){
    gum::NodeSet sotargets;
    PyAgrumHelper::populateNodeSetFromPySequenceOfIntOrString(sotargets,targets,self->variableNodeMap());

    gum::NodeSet soids;
    PyAgrumHelper::populateNodeSetFromPySequenceOfIntOrString(soids,list,self->variableNodeMap());
    return PyAgrumHelper::PySetFromNodeSet(self->minimalCondSet(sotargets, soids));
  }
SWIGINTERN bool gum_BayesNet_Sl_double_Sg__isIndependent__SWIG_0(gum::BayesNet< double > *self,PyObject *X,PyObject *Y,PyObject *Z){
    gum::NodeSet nx,ny,nz;
    PyAgrumHelper::populateNodeSetFromPySequenceOfIntOrString(nx,X,self->variableNodeMap());
    PyAgrumHelper::populateNodeSetFromPySequenceOfIntOrString(ny,Y,self->variableNodeMap());
    PyAgrumHelper::populateNodeSetFromPySequenceOfIntOrString(nz,Z,self->variableNodeMap());
    return self->isIndependent(nx,ny,nz);
  }
SWIGINTERN bool gum_BayesNet_Sl_double_Sg__isIndependent__SWIG_1(gum::BayesNet< double > *self,PyObject *X,PyObject *Y){
    gum::NodeSet nx,ny,nz;
    PyAgrumHelper::populateNodeSetFromPySequenceOfIntOrString(nx,X,self->variableNodeMap());
    PyAgrumHelper::populateNodeSetFromPySequenceOfIntOrString(ny,Y,self->variableNodeMap());
    return self->isIndependent(nx,ny,nz);
  }
SWIGINTERN PyObject *gum_BayesNet_Sl_double_Sg__names(gum::BayesNet< double > const *self){
     PyObject* q=PySet_New(0);

     PyObject* pyval;
     for ( auto node : self->nodes()) {
       pyval=PyString_FromString(self->variable(node).name().c_str());
       PySet_Add(q,pyval);
       Py_DecRef(pyval);
     }
     return q;
  }
SWIGINTERN PyObject *gum_BayesNet_Sl_double_Sg__nodes(gum::BayesNet< double > const *self){
    return PyAgrumHelper::PySetFromNodeSet(self->nodes());
  }
SWIGINTERN PyObject *gum_BayesNet_Sl_double_Sg__arcs(gum::BayesNet< double > const *self){
     return PyAgrumHelper::PySetFromArcSet(self->arcs());
   }
SWIGINTERN PyObject *gum_BayesNet_Sl_double_Sg__parents(gum::BayesNet< double > const *self,PyObject *norid){
     return PyAgrumHelper::PySetFromNodeSet(self->parents(PyAgrumHelper::nodeIdFromNameOrIndex(norid,self->variableNodeMap())));
   }
SWIGINTERN PyObject *gum_BayesNet_Sl_double_Sg__children(gum::BayesNet< double > const *self,PyObject *norid){
     return PyAgrumHelper::PySetFromNodeSet(self->children(PyAgrumHelper::nodeIdFromNameOrIndex(norid,self->variableNodeMap())));
   }
SWIGINTERN PyObject *gum_BayesNet_Sl_double_Sg__family(gum::BayesNet< double > const *self,PyObject *norid){
     return PyAgrumHelper::PySetFromNodeSet(self->family(PyAgrumHelper::nodeIdFromNameOrIndex(norid,self->variableNodeMap())));
   }
SWIGINTERN PyObject *gum_BayesNet_Sl_double_Sg__descendants(gum::BayesNet< double > const *self,PyObject *norid){
     return PyAgrumHelper::PySetFromNodeSet(self->descendants(PyAgrumHelper::nodeIdFromNameOrIndex(norid,self->variableNodeMap())));
   }
SWIGINTERN PyObject *gum_BayesNet_Sl_double_Sg__ancestors(gum::BayesNet< double > const *self,PyObject *norid){
     return PyAgrumHelper::PySetFromNodeSet(self->ancestors(PyAgrumHelper::nodeIdFromNameOrIndex(norid,self->variableNodeMap())));
   }
SWIGINTERN gum::UndiGraph gum_BayesNet_Sl_double_Sg__moralizedAncestralGraph(gum::BayesNet< double > *self,PyObject *nodes){
     gum::NodeSet sonodes;
     PyAgrumHelper::populateNodeSetFromPySequenceOfIntOrString(sonodes,nodes,self->variableNodeMap());
     return self->moralizedAncestralGraph(sonodes);
   }
SWIGINTERN std::string gum_BayesNet_Sl_double_Sg__loadBIF__SWIG_0(gum::BayesNet< double > *self,std::string name,PyObject *l=nullptr){
      std::stringstream stream;
      std::vector<PythonLoadListener> py_listener;

      try {
          gum::BIFReader<double> reader(self,name);
          int l_size=_fillLoadListeners_(py_listener,l);
          for(int i=0 ; i<l_size ; i++) {
              (reader.scanner()).onLoad.attach(&(py_listener[i]), &PythonLoadListener::whenLoading);
          }

          auto nbErr=reader.proceed();
          reader.showElegantErrorsAndWarnings(stream);
          if (nbErr>0) {
              reader.showErrorCounts(stream);
                   {                                                                                             std::ostringstream error_stream;                                                            error_stream << stream.str();                                                                        throw(gum::FatalError(gum::_createMsg_("/Users/phw/Documents/gits/agrum/aGrUM-dev/wrappers/pyagrum/swigsrc//bayesnet.i", __FUNCTION__, 204, error_stream.str())));      }
          } else {
              return stream.str();
          }
      } catch (gum::IOError& e) {
        throw(e);
      }
      return "";
  }
SWIGINTERN void gum_BayesNet_Sl_double_Sg__saveBIF__SWIG_0(gum::BayesNet< double > *self,std::string name,bool allowModificationWhenSaving=false){
      gum::BIFWriter<double> writer;
      writer.setAllowModification(allowModificationWhenSaving);
      writer.write( name, *self );
  }
SWIGINTERN std::string gum_BayesNet_Sl_double_Sg__loadDSL__SWIG_0(gum::BayesNet< double > *self,std::string name,PyObject *l=nullptr){
      std::stringstream stream;
      std::vector<PythonLoadListener> py_listener;

      try {
          gum::DSLReader<double> reader(self,name);
          int l_size=_fillLoadListeners_(py_listener,l);
          for(int i=0 ; i<l_size ; i++) {
              (reader.scanner()).onLoad.attach(&(py_listener[i]), &PythonLoadListener::whenLoading);
          }

          auto nbErr=reader.proceed();
          reader.showElegantErrorsAndWarnings(stream);
          if (nbErr>0) {
              reader.showErrorCounts(stream);
                   {                                                                                             std::ostringstream error_stream;                                                            error_stream << stream.str();                                                                        throw(gum::FatalError(gum::_createMsg_("/Users/phw/Documents/gits/agrum/aGrUM-dev/wrappers/pyagrum/swigsrc//bayesnet.i", __FUNCTION__, 236, error_stream.str())));      }
          } else {
              return stream.str();
          }
      } catch (gum::IOError& e) {
        throw(e);
      }
      return "plop";
  }
SWIGINTERN std::string gum_BayesNet_Sl_double_Sg__loadXDSL__SWIG_0(gum::BayesNet< double > *self,std::string name,PyObject *l=nullptr){
      try {
          gum::XDSLBNReader<double> reader(self,name);

          int isOK=reader.proceed();// for BIFXML, proceed() returns 0 or 1
          if (isOK==1) {
                   {                                                                                             std::ostringstream error_stream;                                                            error_stream << "Errors found in XML file";                                                                        throw(gum::FatalError(gum::_createMsg_("/Users/phw/Documents/gits/agrum/aGrUM-dev/wrappers/pyagrum/swigsrc//bayesnet.i", __FUNCTION__, 253, error_stream.str())));      }
          } else {
              return "";
          }
      } catch (gum::IOError& e) {
        throw(e);
      }
      return "";
  }
SWIGINTERN void gum_BayesNet_Sl_double_Sg__saveDSL__SWIG_0(gum::BayesNet< double > *self,std::string name,bool allowModificationWhenSaving=false){
    gum::DSLWriter<double> writer;
    writer.setAllowModification(allowModificationWhenSaving);
    writer.write( name, *self );
  }
SWIGINTERN void gum_BayesNet_Sl_double_Sg__saveXDSL__SWIG_0(gum::BayesNet< double > *self,std::string name,bool allowModificationWhenSaving=false){
    gum::XDSLBNWriter<double> writer;
    writer.setAllowModification(allowModificationWhenSaving);
    writer.write( name, *self );
  }
SWIGINTERN std::string gum_BayesNet_Sl_double_Sg__loadNET__SWIG_0(gum::BayesNet< double > *self,std::string name,PyObject *l=nullptr){
      std::stringstream stream;
      std::vector<PythonLoadListener> py_listener;

      try {
          gum::NetReader<double> reader(self,name);
          int l_size=_fillLoadListeners_(py_listener,l);
          for(int i=0 ; i<l_size ; i++) {
              (reader.scanner()).onLoad.attach(&(py_listener[i]), &PythonLoadListener::whenLoading);
          }

          auto nbErr=reader.proceed();
          reader.showElegantErrorsAndWarnings(stream);
          if (nbErr>0) {
              reader.showErrorCounts(stream);
                   {                                                                                             std::ostringstream error_stream;                                                            error_stream << stream.str();                                                                        throw(gum::FatalError(gum::_createMsg_("/Users/phw/Documents/gits/agrum/aGrUM-dev/wrappers/pyagrum/swigsrc//bayesnet.i", __FUNCTION__, 291, error_stream.str())));      }
          } else {
              return stream.str();
          }
      } catch (gum::IOError& e) {
        throw(e);
      }
      return "";
  }
SWIGINTERN void gum_BayesNet_Sl_double_Sg__saveNET__SWIG_0(gum::BayesNet< double > *self,std::string name,bool allowModificationWhenSaving=false){
    gum::NetWriter<double> writer;
    writer.setAllowModification(allowModificationWhenSaving);
    writer.write( name, *self );
  }
SWIGINTERN std::string gum_BayesNet_Sl_double_Sg__loadO3PRM__SWIG_0(gum::BayesNet< double > *self,std::string name,std::string system="",std::string classpath="",PyObject *l=nullptr){
      std::stringstream stream;
      std::vector<PythonLoadListener> py_listener;

      try {
          gum::O3prmBNReader<double> reader(self,name,system,classpath);

          auto nbErr=reader.proceed();
          reader.showElegantErrorsAndWarnings(stream);
          if (nbErr>0) {
              reader.showErrorCounts(stream);
                   {                                                                                             std::ostringstream error_stream;                                                            error_stream << stream.str();                                                                        throw(gum::FatalError(gum::_createMsg_("/Users/phw/Documents/gits/agrum/aGrUM-dev/wrappers/pyagrum/swigsrc//bayesnet.i", __FUNCTION__, 319, error_stream.str())));      }
          } else {
              return stream.str();
          }
      } catch (gum::IOError& e) {
        throw(e);
      }
      return "";
  }
SWIGINTERN void gum_BayesNet_Sl_double_Sg__saveO3PRM__SWIG_0(gum::BayesNet< double > *self,std::string name,bool allowModificationWhenSaving=false){
    gum::O3prmBNWriter<double> writer;
    writer.setAllowModification(allowModificationWhenSaving);
    writer.write( name, *self );
  }
SWIGINTERN std::string gum_BayesNet_Sl_double_Sg__loadBIFXML__SWIG_0(gum::BayesNet< double > *self,std::string name,PyObject *l=nullptr){
      std::stringstream stream;
      std::vector<PythonLoadListener> py_listener;

      try {
          gum::BIFXMLBNReader<double> reader(self,name);

          int isOK=reader.proceed();// for BIFXML, proceed() returns 0 or 1
          if (isOK==1) {
                   {                                                                                             std::ostringstream error_stream;                                                            error_stream << "Errors found in XML file";                                                                        throw(gum::FatalError(gum::_createMsg_("/Users/phw/Documents/gits/agrum/aGrUM-dev/wrappers/pyagrum/swigsrc//bayesnet.i", __FUNCTION__, 345, error_stream.str())));      }
          } else {
              return "";
          }
      } catch (gum::IOError& e) {
        throw(e);
      }
      return "";
  }
SWIGINTERN void gum_BayesNet_Sl_double_Sg__saveBIFXML__SWIG_0(gum::BayesNet< double > *self,std::string name,bool allowModificationWhenSaving=false){
    gum::BIFXMLBNWriter<double> writer;
    writer.setAllowModification(allowModificationWhenSaving);
    writer.write( name, *self );
  }
SWIGINTERN std::string gum_BayesNet_Sl_double_Sg__loadUAI__SWIG_0(gum::BayesNet< double > *self,std::string name,PyObject *l=nullptr){
      std::stringstream stream;
      std::vector<PythonLoadListener> py_listener;

      try {
          gum::UAIBNReader<double> reader(self,name);
          int l_size=_fillLoadListeners_(py_listener,l);
          for(int i=0 ; i<l_size ; i++) {
              (reader.scanner()).onLoad.attach(&(py_listener[i]), &PythonLoadListener::whenLoading);
          }

          auto nbErr=reader.proceed();
          reader.showElegantErrorsAndWarnings(stream);
          if (nbErr>0) {
              reader.showErrorCounts(stream);
                   {                                                                                             std::ostringstream error_stream;                                                            error_stream << stream.str();                                                                        throw(gum::FatalError(gum::_createMsg_("/Users/phw/Documents/gits/agrum/aGrUM-dev/wrappers/pyagrum/swigsrc//bayesnet.i", __FUNCTION__, 377, error_stream.str())));      }
          } else {
              return stream.str();
          }
      } catch (gum::IOError& e) {
        throw(e);
      }
      return "";
  }
SWIGINTERN void gum_BayesNet_Sl_double_Sg__saveUAI__SWIG_0(gum::BayesNet< double > *self,std::string name,bool allowModificationWhenSaving=false){
    gum::UAIBNWriter<double> writer;
    writer.setAllowModification(allowModificationWhenSaving);
    writer.write( name, *self );
  }
SWIGINTERN std::string gum_BayesNet_Sl_double_Sg____repr__(gum::BayesNet< double > const *self){
   std::stringstream s;
   s<<"(pyagrum.BayesNet@"<<std::hex<<self<<") "<<self->toString();
   return s.str();
  }
SWIGINTERN std::string gum_BayesNet_Sl_double_Sg____str__(gum::BayesNet< double > const *self){ return self->toString();}
SWIGINTERN PyObject *gum_BayesNetFragment_Sl_double_Sg__ids(gum::BayesNetFragment< double > *self,std::vector< std::string,std::allocator< std::string > > const &names){
    return PyAgrumHelper::PyListFromNodeVect(self->ids(names));
  }
SWIGINTERN PyObject *gum_BayesNetFragment_Sl_double_Sg__nodeset(gum::BayesNetFragment< double > *self,std::vector< std::string,std::allocator< std::string > > const &names){
    return PyAgrumHelper::PySetFromNodeVect(self->ids(names));
  }
SWIGINTERN PyObject *gum_BayesNetFragment_Sl_double_Sg__minimalCondSet__SWIG_0(gum::BayesNetFragment< double > const *self,gum::NodeId target,PyObject *list){
    gum::NodeSet soids;
    PyAgrumHelper::populateNodeSetFromPySequenceOfIntOrString(soids,list,self->variableNodeMap());
    return PyAgrumHelper::PySetFromNodeSet(self->minimalCondSet(target, soids));
  }
SWIGINTERN PyObject *gum_BayesNetFragment_Sl_double_Sg__minimalCondSet__SWIG_1(gum::BayesNetFragment< double > const *self,PyObject *targets,PyObject *list){
    gum::NodeSet sotargets;
    PyAgrumHelper::populateNodeSetFromPySequenceOfIntOrString(sotargets,targets,self->variableNodeMap());

    gum::NodeSet soids;
    PyAgrumHelper::populateNodeSetFromPySequenceOfIntOrString(soids,list,self->variableNodeMap());
    return PyAgrumHelper::PySetFromNodeSet(self->minimalCondSet(sotargets, soids));
  }
SWIGINTERN bool gum_BayesNetFragment_Sl_double_Sg__isIndependent__SWIG_0(gum::BayesNetFragment< double > *self,PyObject *X,PyObject *Y,PyObject *Z){
    gum::NodeSet nx,ny,nz;
    PyAgrumHelper::populateNodeSetFromPySequenceOfIntOrString(nx,X,self->variableNodeMap());
    PyAgrumHelper::populateNodeSetFromPySequenceOfIntOrString(ny,Y,self->variableNodeMap());
    PyAgrumHelper::populateNodeSetFromPySequenceOfIntOrString(nz,Z,self->variableNodeMap());
    return self->isIndependent(nx,ny,nz);
  }
SWIGINTERN bool gum_BayesNetFragment_Sl_double_Sg__isIndependent__SWIG_1(gum::BayesNetFragment< double > *self,PyObject *X,PyObject *Y){
    gum::NodeSet nx,ny,nz;
    PyAgrumHelper::populateNodeSetFromPySequenceOfIntOrString(nx,X,self->variableNodeMap());
    PyAgrumHelper::populateNodeSetFromPySequenceOfIntOrString(ny,Y,self->variableNodeMap());
    return self->isIndependent(nx,ny,nz);
  }
SWIGINTERN PyObject *gum_BayesNetFragment_Sl_double_Sg__names(gum::BayesNetFragment< double > const *self){
     PyObject* q=PySet_New(0);

     PyObject* pyval;
     for ( auto node : self->nodes()) {
       pyval=PyString_FromString(self->variable(node).name().c_str());
       PySet_Add(q,pyval);
       Py_DecRef(pyval);
     }
     return q;
  }
SWIGINTERN PyObject *gum_BayesNetFragment_Sl_double_Sg__nodes(gum::BayesNetFragment< double > const *self){
    return PyAgrumHelper::PySetFromNodeSet(self->nodes());
  }
SWIGINTERN PyObject *gum_BayesNetFragment_Sl_double_Sg__arcs(gum::BayesNetFragment< double > const *self){
     return PyAgrumHelper::PySetFromArcSet(self->arcs());
   }
SWIGINTERN PyObject *gum_BayesNetFragment_Sl_double_Sg__parents(gum::BayesNetFragment< double > const *self,PyObject *norid){
     return PyAgrumHelper::PySetFromNodeSet(self->parents(PyAgrumHelper::nodeIdFromNameOrIndex(norid,self->variableNodeMap())));
   }
SWIGINTERN PyObject *gum_BayesNetFragment_Sl_double_Sg__children(gum::BayesNetFragment< double > const *self,PyObject *norid){
     return PyAgrumHelper::PySetFromNodeSet(self->children(PyAgrumHelper::nodeIdFromNameOrIndex(norid,self->variableNodeMap())));
   }
SWIGINTERN PyObject *gum_BayesNetFragment_Sl_double_Sg__family(gum::BayesNetFragment< double > const *self,PyObject *norid){
     return PyAgrumHelper::PySetFromNodeSet(self->family(PyAgrumHelper::nodeIdFromNameOrIndex(norid,self->variableNodeMap())));
   }
SWIGINTERN PyObject *gum_BayesNetFragment_Sl_double_Sg__descendants(gum::BayesNetFragment< double > const *self,PyObject *norid){
     return PyAgrumHelper::PySetFromNodeSet(self->descendants(PyAgrumHelper::nodeIdFromNameOrIndex(norid,self->variableNodeMap())));
   }
SWIGINTERN PyObject *gum_BayesNetFragment_Sl_double_Sg__ancestors(gum::BayesNetFragment< double > const *self,PyObject *norid){
     return PyAgrumHelper::PySetFromNodeSet(self->ancestors(PyAgrumHelper::nodeIdFromNameOrIndex(norid,self->variableNodeMap())));
   }
SWIGINTERN gum::UndiGraph gum_BayesNetFragment_Sl_double_Sg__moralizedAncestralGraph(gum::BayesNetFragment< double > *self,PyObject *nodes){
     gum::NodeSet sonodes;
     PyAgrumHelper::populateNodeSetFromPySequenceOfIntOrString(sonodes,nodes,self->variableNodeMap());
     return self->moralizedAncestralGraph(sonodes);
   }

  namespace swig {
    template <>  struct traits< gum::Instantiation > {
      typedef pointer_category category;
      static const char* type_name() { return"gum::Instantiation"; }
    };
  }


namespace swig {
  template <> struct traits< double > {
    typedef value_category category;
    static const char* type_name() { return"double"; }
  };
  template <>  struct traits_asval< double > {
    typedef double value_type;
    static int asval(PyObject *obj, value_type *val) {
      return SWIG_AsVal_double (obj, val);
    }
  };
  template <>  struct traits_from< double > {
    typedef double value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_double  (val);
    }
  };
}


  namespace swig {


















































    template <class T, class U >
    struct traits_asptr<std::pair<T,U> >  {
      typedef std::pair<T,U> value_type;

      static int get_pair(PyObject* first, PyObject* second,
			  std::pair<T,U> **val) 
      {
	if (val) {
	  value_type *vp = (new std::pair<T,U>());
	  T *pfirst = &(vp->first);
	  int res1 = swig::asval((PyObject*)first, pfirst);
	  if (!SWIG_IsOK(res1)) {
	    delete vp;
	    return res1;
	  }
	  U *psecond = &(vp->second);
	  int res2 = swig::asval((PyObject*)second, psecond);
	  if (!SWIG_IsOK(res2)) {
	    delete vp;
	    return res2;
	  }
	  *val = vp;
	  return SWIG_AddNewMask(res1 > res2 ? res1 : res2);
	} else {
	  T *pfirst = 0;
	  int res1 = swig::asval((PyObject*)first, pfirst);
	  if (!SWIG_IsOK(res1)) return res1;
	  U *psecond = 0;
	  int res2 = swig::asval((PyObject*)second, psecond);
	  if (!SWIG_IsOK(res2)) return res2;
	  return res1 > res2 ? res1 : res2;
	}
      }

      static int asptr(PyObject *obj, std::pair<T,U> **val) {
	int res = SWIG_ERROR;
	if (PyTuple_Check(obj)) {
	  if (PyTuple_GET_SIZE(obj) == 2) {
	    res = get_pair(PyTuple_GET_ITEM(obj,0),PyTuple_GET_ITEM(obj,1), val);
	  }
	} else if (PySequence_Check(obj)) {
	  if (PySequence_Size(obj) == 2) {
	    swig::SwigVar_PyObject first = PySequence_GetItem(obj,0);
	    swig::SwigVar_PyObject second = PySequence_GetItem(obj,1);
	    res = get_pair(first, second, val);
	  }
	} else {
	  value_type *p = 0;
	  swig_type_info *descriptor = swig::type_info<value_type>();
	  res = descriptor ? SWIG_ConvertPtr(obj, (void **)&p, descriptor, 0) : SWIG_ERROR;
	  if (SWIG_IsOK(res) && val)  *val = p;
	}
	return res;
      }
    };


    template <class T, class U >
    struct traits_from<std::pair<T,U> >   {
      static PyObject *from(const std::pair<T,U>& val) {
	PyObject* obj = PyTuple_New(2);
	PyTuple_SetItem(obj,0,swig::from(val.first));
	PyTuple_SetItem(obj,1,swig::from(val.second));
	return obj;
      }
    };
  }





































      namespace swig {
	template <>  struct traits<std::pair< gum::Instantiation, double > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::pair<" "gum::Instantiation" "," "double" " >";
	  }
	};
      }
    
SWIGINTERN void gum_LazyPropagation_Sl_double_Sg__makeInference(gum::LazyPropagation< double > *self){
    self->gum::MarginalTargetedInference<double>::makeInference();
  }
SWIGINTERN gum::Tensor< double > const gum_LazyPropagation_Sl_double_Sg__posterior__SWIG_0(gum::LazyPropagation< double > *self,gum::NodeId const var){
    return self->gum::MarginalTargetedInference<double>::posterior(var);
  }
SWIGINTERN gum::Tensor< double > const gum_LazyPropagation_Sl_double_Sg__posterior__SWIG_1(gum::LazyPropagation< double > *self,std::string const &nodeName){
    return self->gum::MarginalTargetedInference<double>::posterior(nodeName);
  }
SWIGINTERN void gum_LazyPropagation_Sl_double_Sg__addEvidence__SWIG_0(gum::LazyPropagation< double > *self,gum::NodeId const id,gum::Idx const val){
    self->gum::MarginalTargetedInference<double>::addEvidence(id,val);
  }
SWIGINTERN void gum_LazyPropagation_Sl_double_Sg__addEvidence__SWIG_1(gum::LazyPropagation< double > *self,std::string const &nodeName,gum::Idx const val){
    self->gum::MarginalTargetedInference<double>::addEvidence(nodeName,val);
  }
SWIGINTERN void gum_LazyPropagation_Sl_double_Sg__addEvidence__SWIG_2(gum::LazyPropagation< double > *self,gum::NodeId const id,std::string const &val){
    self->gum::MarginalTargetedInference<double>::addEvidence(id,val);
  }
SWIGINTERN void gum_LazyPropagation_Sl_double_Sg__addEvidence__SWIG_3(gum::LazyPropagation< double > *self,std::string const &nodeName,std::string const &val){
    self->gum::MarginalTargetedInference<double>::addEvidence(nodeName,val);
  }

      namespace swig {
	template <>  struct traits<std::vector< double, std::allocator< double > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "double" "," "std::allocator< double >" " >";
	  }
	};
      }
    
SWIGINTERN void gum_LazyPropagation_Sl_double_Sg__addEvidence__SWIG_4(gum::LazyPropagation< double > *self,gum::NodeId const id,std::vector< double,std::allocator< double > > const &vals){
   self->gum::MarginalTargetedInference<double>::addEvidence(id,vals);
  }
SWIGINTERN void gum_LazyPropagation_Sl_double_Sg__addEvidence__SWIG_5(gum::LazyPropagation< double > *self,std::string const &nodeName,std::vector< double,std::allocator< double > > const &vals){
    self->gum::MarginalTargetedInference<double>::addEvidence(nodeName,vals);
  }
SWIGINTERN void gum_LazyPropagation_Sl_double_Sg__addEvidence__SWIG_6(gum::LazyPropagation< double > *self,gum::Tensor< double > const &p){
    self->gum::MarginalTargetedInference<double>::addEvidence(p);
  }
SWIGINTERN void gum_LazyPropagation_Sl_double_Sg__chgEvidence__SWIG_0(gum::LazyPropagation< double > *self,gum::NodeId const id,gum::Idx const val){
    self->gum::MarginalTargetedInference<double>::chgEvidence(id,val);
  }
SWIGINTERN void gum_LazyPropagation_Sl_double_Sg__chgEvidence__SWIG_1(gum::LazyPropagation< double > *self,std::string const &nodeName,gum::Idx const val){
    self->gum::MarginalTargetedInference<double>::chgEvidence(nodeName,val);
  }
SWIGINTERN void gum_LazyPropagation_Sl_double_Sg__chgEvidence__SWIG_2(gum::LazyPropagation< double > *self,gum::NodeId const id,std::string const &val){
    self->gum::MarginalTargetedInference<double>::chgEvidence(id,val);
  }
SWIGINTERN void gum_LazyPropagation_Sl_double_Sg__chgEvidence__SWIG_3(gum::LazyPropagation< double > *self,std::string const &nodeName,std::string const &val){
    self->gum::MarginalTargetedInference<double>::chgEvidence(nodeName,val);
  }
SWIGINTERN void gum_LazyPropagation_Sl_double_Sg__chgEvidence__SWIG_4(gum::LazyPropagation< double > *self,gum::Tensor< double > const &p){
    self->gum::MarginalTargetedInference<double>::chgEvidence(p);
  }
SWIGINTERN void gum_LazyPropagation_Sl_double_Sg__chgEvidence__SWIG_5(gum::LazyPropagation< double > *self,gum::NodeId const id,std::vector< double,std::allocator< double > > const &vals){
   self->gum::MarginalTargetedInference<double>::chgEvidence(id,vals);
  }
SWIGINTERN void gum_LazyPropagation_Sl_double_Sg__chgEvidence__SWIG_6(gum::LazyPropagation< double > *self,std::string const &nodeName,std::vector< double,std::allocator< double > > const &vals){
    self->gum::MarginalTargetedInference<double>::chgEvidence(nodeName,vals);
  }
SWIGINTERN bool gum_LazyPropagation_Sl_double_Sg__hasEvidence__SWIG_0(gum::LazyPropagation< double > const *self,gum::NodeId const id){
    return self->gum::MarginalTargetedInference<double>::hasEvidence(id);
  }
SWIGINTERN bool gum_LazyPropagation_Sl_double_Sg__hasEvidence__SWIG_1(gum::LazyPropagation< double > const *self,std::string const &nodeName){
    return self->gum::MarginalTargetedInference<double>::hasEvidence(nodeName);
  }
SWIGINTERN void gum_LazyPropagation_Sl_double_Sg__eraseAllEvidence(gum::LazyPropagation< double > *self){
    self->gum::MarginalTargetedInference<double>::eraseAllEvidence();
  }
SWIGINTERN void gum_LazyPropagation_Sl_double_Sg__eraseEvidence__SWIG_0(gum::LazyPropagation< double > *self,gum::NodeId const id){
    self->gum::MarginalTargetedInference<double>::eraseEvidence(id);
  }
SWIGINTERN void gum_LazyPropagation_Sl_double_Sg__eraseEvidence__SWIG_1(gum::LazyPropagation< double > *self,std::string const &nodeName){
    self->gum::MarginalTargetedInference<double>::eraseEvidence(nodeName);
  }
SWIGINTERN bool gum_LazyPropagation_Sl_double_Sg__hasSoftEvidence__SWIG_0(gum::LazyPropagation< double > const *self,gum::NodeId const id){
    return self->gum::MarginalTargetedInference<double>::hasSoftEvidence(id);
  }
SWIGINTERN bool gum_LazyPropagation_Sl_double_Sg__hasHardEvidence(gum::LazyPropagation< double > const *self,std::string const &nodeName){
    return self->gum::MarginalTargetedInference<double>::hasHardEvidence(nodeName);
  }
SWIGINTERN bool gum_LazyPropagation_Sl_double_Sg__hasSoftEvidence__SWIG_1(gum::LazyPropagation< double > const *self,std::string const &nodeName){
    return self->gum::MarginalTargetedInference<double>::hasSoftEvidence(nodeName);
  }
SWIGINTERN gum::Size gum_LazyPropagation_Sl_double_Sg__nbrEvidence(gum::LazyPropagation< double > const *self){
    return self->gum::MarginalTargetedInference<double>::nbrEvidence();
  }
SWIGINTERN gum::Size gum_LazyPropagation_Sl_double_Sg__nbrHardEvidence(gum::LazyPropagation< double > const *self){
    return self->gum::MarginalTargetedInference<double>::nbrHardEvidence();
  }
SWIGINTERN gum::Size gum_LazyPropagation_Sl_double_Sg__nbrSoftEvidence(gum::LazyPropagation< double > const *self){
    return self->gum::MarginalTargetedInference<double>::nbrSoftEvidence();
  }
SWIGINTERN void gum_LazyPropagation_Sl_double_Sg__eraseAllTargets(gum::LazyPropagation< double > *self){
      self->gum::MarginalTargetedInference<double>::eraseAllTargets();
    }
SWIGINTERN void gum_LazyPropagation_Sl_double_Sg__addAllTargets(gum::LazyPropagation< double > *self){
      self->gum::MarginalTargetedInference<double>::addAllTargets();
    }
SWIGINTERN void gum_LazyPropagation_Sl_double_Sg__addTarget__SWIG_0(gum::LazyPropagation< double > *self,gum::NodeId const target){
      self->gum::MarginalTargetedInference<double>::addTarget(target);
    }
SWIGINTERN void gum_LazyPropagation_Sl_double_Sg__addTarget__SWIG_1(gum::LazyPropagation< double > *self,std::string const &nodeName){
      self->gum::MarginalTargetedInference<double>::addTarget(nodeName);
    }
SWIGINTERN void gum_LazyPropagation_Sl_double_Sg__eraseTarget__SWIG_0(gum::LazyPropagation< double > *self,gum::NodeId const target){
      self->gum::MarginalTargetedInference<double>::eraseTarget(target);
    }
SWIGINTERN void gum_LazyPropagation_Sl_double_Sg__eraseTarget__SWIG_1(gum::LazyPropagation< double > *self,std::string const &nodeName){
      self->gum::MarginalTargetedInference<double>::eraseTarget(nodeName);
    }
SWIGINTERN bool gum_LazyPropagation_Sl_double_Sg__isTarget__SWIG_0(gum::LazyPropagation< double > const *self,gum::NodeId const variable){
      return self->gum::MarginalTargetedInference<double>::isTarget(variable);
    }
SWIGINTERN bool gum_LazyPropagation_Sl_double_Sg__isTarget__SWIG_1(gum::LazyPropagation< double > const *self,std::string const &nodeName){
      return self->gum::MarginalTargetedInference<double>::isTarget(nodeName);
    }
SWIGINTERN gum::Size gum_LazyPropagation_Sl_double_Sg__nbrTargets(gum::LazyPropagation< double > const *self){
      return self->gum::MarginalTargetedInference<double>::nbrTargets();
    }
SWIGINTERN double gum_LazyPropagation_Sl_double_Sg__H__SWIG_0(gum::LazyPropagation< double > *self,gum::NodeId const X){
     return self->gum::MarginalTargetedInference<double>::H(X);
   }
SWIGINTERN double gum_LazyPropagation_Sl_double_Sg__H__SWIG_1(gum::LazyPropagation< double > *self,std::string const &nodeName){
     return self->gum::MarginalTargetedInference<double>::H(nodeName);
   }
SWIGINTERN gum::Tensor< double > gum_LazyPropagation_Sl_double_Sg__evidenceImpact__SWIG_0(gum::LazyPropagation< double > *self,gum::NodeId target,gum::NodeSet const &evs){
    return self->gum::MarginalTargetedInference<double>::evidenceImpact(target,evs);
  }
SWIGINTERN gum::Tensor< double > gum_LazyPropagation_Sl_double_Sg__evidenceImpact__SWIG_1(gum::LazyPropagation< double > *self,std::string const &target,std::vector< std::string,std::allocator< std::string > > const &evs){
   return self->gum::MarginalTargetedInference<double>::evidenceImpact(target,evs);
  }
SWIGINTERN gum::IBayesNet< double > const &gum_LazyPropagation_Sl_double_Sg__BN(gum::LazyPropagation< double > const *self){ return self->gum::MarginalTargetedInference<double>::BN(); }
SWIGINTERN gum::Tensor< double > const gum_LazyPropagation_Sl_double_Sg__posterior__SWIG_2(gum::LazyPropagation< double > *self,std::string const nodeName){
    return self->JointTargetedInference<double>::posterior(nodeName);
  }
SWIGINTERN void gum_LazyPropagation_Sl_double_Sg__eraseAllJointTargets(gum::LazyPropagation< double > *self){
    self->gum::JointTargetedInference<double>::eraseAllJointTargets();
  }
SWIGINTERN void gum_LazyPropagation_Sl_double_Sg__eraseAllMarginalTargets(gum::LazyPropagation< double > *self){
    self->gum::JointTargetedInference<double>::eraseAllMarginalTargets();
  }
SWIGINTERN gum::Size gum_LazyPropagation_Sl_double_Sg__nbrJointTargets(gum::LazyPropagation< double > *self){
    return self->gum::JointTargetedInference<double>::nbrJointTargets();
  }
SWIGINTERN gum::Tensor< double > gum_LazyPropagation_Sl_double_Sg__evidenceJointImpact__SWIG_0(gum::LazyPropagation< double > *self,gum::NodeSet const &targets,gum::NodeSet const &evs){
    return self->gum::JointTargetedInference<double>::evidenceJointImpact(targets,evs);
  }
SWIGINTERN gum::Tensor< double > gum_LazyPropagation_Sl_double_Sg__evidenceJointImpact__SWIG_1(gum::LazyPropagation< double > *self,std::vector< std::string,std::allocator< std::string > > const &targets,std::vector< std::string,std::allocator< std::string > > const &evs){
   return self->gum::JointTargetedInference<double>::evidenceJointImpact(targets,evs);
  }
SWIGINTERN void gum_LazyPropagation_Sl_double_Sg__setNumberOfThreads(gum::LazyPropagation< double > *self,int nb){
    self->setNumberOfThreads(nb);
  }
SWIGINTERN int gum_LazyPropagation_Sl_double_Sg__getNumberOfThreads(gum::LazyPropagation< double > *self){
    return self->getNumberOfThreads();
  }
SWIGINTERN bool gum_LazyPropagation_Sl_double_Sg__isGumNumberOfThreadsOverriden(gum::LazyPropagation< double > *self){
    return self->isGumNumberOfThreadsOverriden();
  }
SWIGINTERN void gum_LazyPropagation_Sl_double_Sg__setMaxMemory(gum::LazyPropagation< double > *self,int gigabytes){
    self->setMaxMemory(gigabytes);
  }
SWIGINTERN void gum_LazyPropagation_Sl_double_Sg__setEvidence(gum::LazyPropagation< double > *self,PyObject *evidces){}
SWIGINTERN void gum_LazyPropagation_Sl_double_Sg__updateEvidence(gum::LazyPropagation< double > *self,PyObject *evidces){}
SWIGINTERN void gum_LazyPropagation_Sl_double_Sg__setTargets(gum::LazyPropagation< double > *self,PyObject *targets){}
SWIGINTERN PyObject *gum_LazyPropagation_Sl_double_Sg__hardEvidenceNodes(gum::LazyPropagation< double > *self){
      return PyAgrumHelper::PySetFromNodeSet(self->hardEvidenceNodes() ) ;
    }
SWIGINTERN PyObject *gum_LazyPropagation_Sl_double_Sg__softEvidenceNodes(gum::LazyPropagation< double > *self){
      return PyAgrumHelper::PySetFromNodeSet(self->softEvidenceNodes() ) ;
    }
SWIGINTERN PyObject *gum_LazyPropagation_Sl_double_Sg__targets(gum::LazyPropagation< double > *self){
      return PyAgrumHelper::PySetFromNodeSet(self->targets() );
    }
SWIGINTERN gum::Tensor< double > gum_LazyPropagation_Sl_double_Sg__evidenceImpact__SWIG_2(gum::LazyPropagation< double > *self,PyObject *target,PyObject *evs){
      gum::NodeId itarget=PyAgrumHelper::nodeIdFromNameOrIndex(target,self->BN().variableNodeMap());
      gum::NodeSet soe;
      PyAgrumHelper::populateNodeSetFromPySequenceOfIntOrString(soe,evs,self->BN().variableNodeMap());
      return self->evidenceImpact(itarget,soe);
    }
SWIGINTERN double gum_LazyPropagation_Sl_double_Sg__jointMutualInformation(gum::LazyPropagation< double > *self,PyObject *targets){
      gum::NodeSet sot;
      PyAgrumHelper::populateNodeSetFromPySequenceOfIntOrString(sot,targets,self->BN().variableNodeMap());
      return self->jointMutualInformation(sot);
    }
SWIGINTERN gum::Tensor< double > gum_LazyPropagation_Sl_double_Sg__evidenceJointImpact__SWIG_2(gum::LazyPropagation< double > *self,PyObject *targets,PyObject *evs){
      gum::NodeSet sot;
      gum::NodeSet soe;
      PyAgrumHelper::populateNodeSetFromPySequenceOfIntOrString(sot,targets,self->BN().variableNodeMap());
      PyAgrumHelper::populateNodeSetFromPySequenceOfIntOrString(soe,evs,self->BN().variableNodeMap());
      return self->evidenceJointImpact(sot,soe);
    }
SWIGINTERN gum::Tensor< double > gum_LazyPropagation_Sl_double_Sg__jointPosterior(gum::LazyPropagation< double > *self,PyObject *targets){
      if (! PyAnySet_Check(targets)) {
             {                                                                                             std::ostringstream error_stream;                                                            error_stream << "The argument must be a set";                                                                        throw(gum::InvalidArgument(gum::_createMsg_("/Users/phw/Documents/gits/agrum/aGrUM-dev/wrappers/pyagrum/swigsrc//inference.i", __FUNCTION__, 249, error_stream.str())));      }
      }
      gum::NodeSet nodeset;
      PyAgrumHelper::populateNodeSetFromPySequenceOfIntOrString(nodeset,targets,self->BN().variableNodeMap());
      return self->jointPosterior(nodeset);
    }
SWIGINTERN void gum_LazyPropagation_Sl_double_Sg__addJointTarget(gum::LazyPropagation< double > *self,PyObject *targets){
      if (! PyAnySet_Check(targets)) {
             {                                                                                             std::ostringstream error_stream;                                                            error_stream << "The argument must be a set";                                                                        throw(gum::InvalidArgument(gum::_createMsg_("/Users/phw/Documents/gits/agrum/aGrUM-dev/wrappers/pyagrum/swigsrc//inference.i", __FUNCTION__, 249, error_stream.str())));      }
      }
      gum::NodeSet nodeset;
      PyAgrumHelper::populateNodeSetFromPySequenceOfIntOrString(nodeset,targets,self->BN().variableNodeMap());

      self->gum::JointTargetedInference<double>::addJointTarget(nodeset);
    }
SWIGINTERN void gum_LazyPropagation_Sl_double_Sg__eraseJointTarget(gum::LazyPropagation< double > *self,PyObject *targets){
      if (! PyAnySet_Check(targets)) {
             {                                                                                             std::ostringstream error_stream;                                                            error_stream << "The argument must be a set";                                                                        throw(gum::InvalidArgument(gum::_createMsg_("/Users/phw/Documents/gits/agrum/aGrUM-dev/wrappers/pyagrum/swigsrc//inference.i", __FUNCTION__, 249, error_stream.str())));      }
      }
      gum::NodeSet nodeset;
      PyAgrumHelper::populateNodeSetFromPySequenceOfIntOrString(nodeset,targets,self->BN().variableNodeMap());
      self->gum::JointTargetedInference<double>::eraseJointTarget(nodeset);
    }
SWIGINTERN bool gum_LazyPropagation_Sl_double_Sg__isJointTarget(gum::LazyPropagation< double > *self,PyObject *targets){
      if (! PyAnySet_Check(targets)) {
             {                                                                                             std::ostringstream error_stream;                                                            error_stream << "The argument must be a set";                                                                        throw(gum::InvalidArgument(gum::_createMsg_("/Users/phw/Documents/gits/agrum/aGrUM-dev/wrappers/pyagrum/swigsrc//inference.i", __FUNCTION__, 249, error_stream.str())));      }
      }
      gum::NodeSet nodeset;
      PyAgrumHelper::populateNodeSetFromPySequenceOfIntOrString(nodeset,targets,self->BN().variableNodeMap());
      return self->gum::JointTargetedInference<double>::isJointTarget(nodeset);
    }
SWIGINTERN PyObject *gum_LazyPropagation_Sl_double_Sg__jointTargets(gum::LazyPropagation< double > const *self){
      PyObject* q = PyList_New( 0 );

      PyObject* pyval;
      for ( auto ns : self->JointTargetedInference<double>::jointTargets()) {
        pyval=PyAgrumHelper::PySetFromNodeSet(ns);
        PyList_Append( q,pyval);
        Py_DecRef(pyval);
      }
      return q;
    }
SWIGINTERN void gum_ShaferShenoyInference_Sl_double_Sg__makeInference(gum::ShaferShenoyInference< double > *self){
    self->gum::MarginalTargetedInference<double>::makeInference();
  }
SWIGINTERN gum::Tensor< double > const gum_ShaferShenoyInference_Sl_double_Sg__posterior__SWIG_0(gum::ShaferShenoyInference< double > *self,gum::NodeId const var){
    return self->gum::MarginalTargetedInference<double>::posterior(var);
  }
SWIGINTERN gum::Tensor< double > const gum_ShaferShenoyInference_Sl_double_Sg__posterior__SWIG_1(gum::ShaferShenoyInference< double > *self,std::string const &nodeName){
    return self->gum::MarginalTargetedInference<double>::posterior(nodeName);
  }
SWIGINTERN void gum_ShaferShenoyInference_Sl_double_Sg__addEvidence__SWIG_0(gum::ShaferShenoyInference< double > *self,gum::NodeId const id,gum::Idx const val){
    self->gum::MarginalTargetedInference<double>::addEvidence(id,val);
  }
SWIGINTERN void gum_ShaferShenoyInference_Sl_double_Sg__addEvidence__SWIG_1(gum::ShaferShenoyInference< double > *self,std::string const &nodeName,gum::Idx const val){
    self->gum::MarginalTargetedInference<double>::addEvidence(nodeName,val);
  }
SWIGINTERN void gum_ShaferShenoyInference_Sl_double_Sg__addEvidence__SWIG_2(gum::ShaferShenoyInference< double > *self,gum::NodeId const id,std::string const &val){
    self->gum::MarginalTargetedInference<double>::addEvidence(id,val);
  }
SWIGINTERN void gum_ShaferShenoyInference_Sl_double_Sg__addEvidence__SWIG_3(gum::ShaferShenoyInference< double > *self,std::string const &nodeName,std::string const &val){
    self->gum::MarginalTargetedInference<double>::addEvidence(nodeName,val);
  }
SWIGINTERN void gum_ShaferShenoyInference_Sl_double_Sg__addEvidence__SWIG_4(gum::ShaferShenoyInference< double > *self,gum::NodeId const id,std::vector< double,std::allocator< double > > const &vals){
   self->gum::MarginalTargetedInference<double>::addEvidence(id,vals);
  }
SWIGINTERN void gum_ShaferShenoyInference_Sl_double_Sg__addEvidence__SWIG_5(gum::ShaferShenoyInference< double > *self,std::string const &nodeName,std::vector< double,std::allocator< double > > const &vals){
    self->gum::MarginalTargetedInference<double>::addEvidence(nodeName,vals);
  }
SWIGINTERN void gum_ShaferShenoyInference_Sl_double_Sg__addEvidence__SWIG_6(gum::ShaferShenoyInference< double > *self,gum::Tensor< double > const &p){
    self->gum::MarginalTargetedInference<double>::addEvidence(p);
  }
SWIGINTERN void gum_ShaferShenoyInference_Sl_double_Sg__chgEvidence__SWIG_0(gum::ShaferShenoyInference< double > *self,gum::NodeId const id,gum::Idx const val){
    self->gum::MarginalTargetedInference<double>::chgEvidence(id,val);
  }
SWIGINTERN void gum_ShaferShenoyInference_Sl_double_Sg__chgEvidence__SWIG_1(gum::ShaferShenoyInference< double > *self,std::string const &nodeName,gum::Idx const val){
    self->gum::MarginalTargetedInference<double>::chgEvidence(nodeName,val);
  }
SWIGINTERN void gum_ShaferShenoyInference_Sl_double_Sg__chgEvidence__SWIG_2(gum::ShaferShenoyInference< double > *self,gum::NodeId const id,std::string const &val){
    self->gum::MarginalTargetedInference<double>::chgEvidence(id,val);
  }
SWIGINTERN void gum_ShaferShenoyInference_Sl_double_Sg__chgEvidence__SWIG_3(gum::ShaferShenoyInference< double > *self,std::string const &nodeName,std::string const &val){
    self->gum::MarginalTargetedInference<double>::chgEvidence(nodeName,val);
  }
SWIGINTERN void gum_ShaferShenoyInference_Sl_double_Sg__chgEvidence__SWIG_4(gum::ShaferShenoyInference< double > *self,gum::Tensor< double > const &p){
    self->gum::MarginalTargetedInference<double>::chgEvidence(p);
  }
SWIGINTERN void gum_ShaferShenoyInference_Sl_double_Sg__chgEvidence__SWIG_5(gum::ShaferShenoyInference< double > *self,gum::NodeId const id,std::vector< double,std::allocator< double > > const &vals){
   self->gum::MarginalTargetedInference<double>::chgEvidence(id,vals);
  }
SWIGINTERN void gum_ShaferShenoyInference_Sl_double_Sg__chgEvidence__SWIG_6(gum::ShaferShenoyInference< double > *self,std::string const &nodeName,std::vector< double,std::allocator< double > > const &vals){
    self->gum::MarginalTargetedInference<double>::chgEvidence(nodeName,vals);
  }
SWIGINTERN bool gum_ShaferShenoyInference_Sl_double_Sg__hasEvidence__SWIG_0(gum::ShaferShenoyInference< double > const *self,gum::NodeId const id){
    return self->gum::MarginalTargetedInference<double>::hasEvidence(id);
  }
SWIGINTERN bool gum_ShaferShenoyInference_Sl_double_Sg__hasEvidence__SWIG_1(gum::ShaferShenoyInference< double > const *self,std::string const &nodeName){
    return self->gum::MarginalTargetedInference<double>::hasEvidence(nodeName);
  }
SWIGINTERN void gum_ShaferShenoyInference_Sl_double_Sg__eraseAllEvidence(gum::ShaferShenoyInference< double > *self){
    self->gum::MarginalTargetedInference<double>::eraseAllEvidence();
  }
SWIGINTERN void gum_ShaferShenoyInference_Sl_double_Sg__eraseEvidence__SWIG_0(gum::ShaferShenoyInference< double > *self,gum::NodeId const id){
    self->gum::MarginalTargetedInference<double>::eraseEvidence(id);
  }
SWIGINTERN void gum_ShaferShenoyInference_Sl_double_Sg__eraseEvidence__SWIG_1(gum::ShaferShenoyInference< double > *self,std::string const &nodeName){
    self->gum::MarginalTargetedInference<double>::eraseEvidence(nodeName);
  }
SWIGINTERN bool gum_ShaferShenoyInference_Sl_double_Sg__hasSoftEvidence__SWIG_0(gum::ShaferShenoyInference< double > const *self,gum::NodeId const id){
    return self->gum::MarginalTargetedInference<double>::hasSoftEvidence(id);
  }
SWIGINTERN bool gum_ShaferShenoyInference_Sl_double_Sg__hasHardEvidence(gum::ShaferShenoyInference< double > const *self,std::string const &nodeName){
    return self->gum::MarginalTargetedInference<double>::hasHardEvidence(nodeName);
  }
SWIGINTERN bool gum_ShaferShenoyInference_Sl_double_Sg__hasSoftEvidence__SWIG_1(gum::ShaferShenoyInference< double > const *self,std::string const &nodeName){
    return self->gum::MarginalTargetedInference<double>::hasSoftEvidence(nodeName);
  }
SWIGINTERN gum::Size gum_ShaferShenoyInference_Sl_double_Sg__nbrEvidence(gum::ShaferShenoyInference< double > const *self){
    return self->gum::MarginalTargetedInference<double>::nbrEvidence();
  }
SWIGINTERN gum::Size gum_ShaferShenoyInference_Sl_double_Sg__nbrHardEvidence(gum::ShaferShenoyInference< double > const *self){
    return self->gum::MarginalTargetedInference<double>::nbrHardEvidence();
  }
SWIGINTERN gum::Size gum_ShaferShenoyInference_Sl_double_Sg__nbrSoftEvidence(gum::ShaferShenoyInference< double > const *self){
    return self->gum::MarginalTargetedInference<double>::nbrSoftEvidence();
  }
SWIGINTERN void gum_ShaferShenoyInference_Sl_double_Sg__eraseAllTargets(gum::ShaferShenoyInference< double > *self){
      self->gum::MarginalTargetedInference<double>::eraseAllTargets();
    }
SWIGINTERN void gum_ShaferShenoyInference_Sl_double_Sg__addAllTargets(gum::ShaferShenoyInference< double > *self){
      self->gum::MarginalTargetedInference<double>::addAllTargets();
    }
SWIGINTERN void gum_ShaferShenoyInference_Sl_double_Sg__addTarget__SWIG_0(gum::ShaferShenoyInference< double > *self,gum::NodeId const target){
      self->gum::MarginalTargetedInference<double>::addTarget(target);
    }
SWIGINTERN void gum_ShaferShenoyInference_Sl_double_Sg__addTarget__SWIG_1(gum::ShaferShenoyInference< double > *self,std::string const &nodeName){
      self->gum::MarginalTargetedInference<double>::addTarget(nodeName);
    }
SWIGINTERN void gum_ShaferShenoyInference_Sl_double_Sg__eraseTarget__SWIG_0(gum::ShaferShenoyInference< double > *self,gum::NodeId const target){
      self->gum::MarginalTargetedInference<double>::eraseTarget(target);
    }
SWIGINTERN void gum_ShaferShenoyInference_Sl_double_Sg__eraseTarget__SWIG_1(gum::ShaferShenoyInference< double > *self,std::string const &nodeName){
      self->gum::MarginalTargetedInference<double>::eraseTarget(nodeName);
    }
SWIGINTERN bool gum_ShaferShenoyInference_Sl_double_Sg__isTarget__SWIG_0(gum::ShaferShenoyInference< double > const *self,gum::NodeId const variable){
      return self->gum::MarginalTargetedInference<double>::isTarget(variable);
    }
SWIGINTERN bool gum_ShaferShenoyInference_Sl_double_Sg__isTarget__SWIG_1(gum::ShaferShenoyInference< double > const *self,std::string const &nodeName){
      return self->gum::MarginalTargetedInference<double>::isTarget(nodeName);
    }
SWIGINTERN gum::Size gum_ShaferShenoyInference_Sl_double_Sg__nbrTargets(gum::ShaferShenoyInference< double > const *self){
      return self->gum::MarginalTargetedInference<double>::nbrTargets();
    }
SWIGINTERN double gum_ShaferShenoyInference_Sl_double_Sg__H__SWIG_0(gum::ShaferShenoyInference< double > *self,gum::NodeId const X){
     return self->gum::MarginalTargetedInference<double>::H(X);
   }
SWIGINTERN double gum_ShaferShenoyInference_Sl_double_Sg__H__SWIG_1(gum::ShaferShenoyInference< double > *self,std::string const &nodeName){
     return self->gum::MarginalTargetedInference<double>::H(nodeName);
   }
SWIGINTERN gum::Tensor< double > gum_ShaferShenoyInference_Sl_double_Sg__evidenceImpact__SWIG_0(gum::ShaferShenoyInference< double > *self,gum::NodeId target,gum::NodeSet const &evs){
    return self->gum::MarginalTargetedInference<double>::evidenceImpact(target,evs);
  }
SWIGINTERN gum::Tensor< double > gum_ShaferShenoyInference_Sl_double_Sg__evidenceImpact__SWIG_1(gum::ShaferShenoyInference< double > *self,std::string const &target,std::vector< std::string,std::allocator< std::string > > const &evs){
   return self->gum::MarginalTargetedInference<double>::evidenceImpact(target,evs);
  }
SWIGINTERN gum::IBayesNet< double > const &gum_ShaferShenoyInference_Sl_double_Sg__BN(gum::ShaferShenoyInference< double > const *self){ return self->gum::MarginalTargetedInference<double>::BN(); }
SWIGINTERN gum::Tensor< double > const gum_ShaferShenoyInference_Sl_double_Sg__posterior__SWIG_2(gum::ShaferShenoyInference< double > *self,std::string const nodeName){
    return self->JointTargetedInference<double>::posterior(nodeName);
  }
SWIGINTERN void gum_ShaferShenoyInference_Sl_double_Sg__eraseAllJointTargets(gum::ShaferShenoyInference< double > *self){
    self->gum::JointTargetedInference<double>::eraseAllJointTargets();
  }
SWIGINTERN void gum_ShaferShenoyInference_Sl_double_Sg__eraseAllMarginalTargets(gum::ShaferShenoyInference< double > *self){
    self->gum::JointTargetedInference<double>::eraseAllMarginalTargets();
  }
SWIGINTERN gum::Size gum_ShaferShenoyInference_Sl_double_Sg__nbrJointTargets(gum::ShaferShenoyInference< double > *self){
    return self->gum::JointTargetedInference<double>::nbrJointTargets();
  }
SWIGINTERN gum::Tensor< double > gum_ShaferShenoyInference_Sl_double_Sg__evidenceJointImpact__SWIG_0(gum::ShaferShenoyInference< double > *self,gum::NodeSet const &targets,gum::NodeSet const &evs){
    return self->gum::JointTargetedInference<double>::evidenceJointImpact(targets,evs);
  }
SWIGINTERN gum::Tensor< double > gum_ShaferShenoyInference_Sl_double_Sg__evidenceJointImpact__SWIG_1(gum::ShaferShenoyInference< double > *self,std::vector< std::string,std::allocator< std::string > > const &targets,std::vector< std::string,std::allocator< std::string > > const &evs){
   return self->gum::JointTargetedInference<double>::evidenceJointImpact(targets,evs);
  }
SWIGINTERN void gum_ShaferShenoyInference_Sl_double_Sg__setNumberOfThreads(gum::ShaferShenoyInference< double > *self,int nb){
    self->setNumberOfThreads(nb);
  }
SWIGINTERN int gum_ShaferShenoyInference_Sl_double_Sg__getNumberOfThreads(gum::ShaferShenoyInference< double > *self){
    return self->getNumberOfThreads();
  }
SWIGINTERN bool gum_ShaferShenoyInference_Sl_double_Sg__isGumNumberOfThreadsOverriden(gum::ShaferShenoyInference< double > *self){
    return self->isGumNumberOfThreadsOverriden();
  }
SWIGINTERN void gum_ShaferShenoyInference_Sl_double_Sg__setMaxMemory(gum::ShaferShenoyInference< double > *self,int gigabytes){
    self->setMaxMemory(gigabytes);
  }
SWIGINTERN void gum_ShaferShenoyInference_Sl_double_Sg__setEvidence(gum::ShaferShenoyInference< double > *self,PyObject *evidces){}
SWIGINTERN void gum_ShaferShenoyInference_Sl_double_Sg__updateEvidence(gum::ShaferShenoyInference< double > *self,PyObject *evidces){}
SWIGINTERN void gum_ShaferShenoyInference_Sl_double_Sg__setTargets(gum::ShaferShenoyInference< double > *self,PyObject *targets){}
SWIGINTERN PyObject *gum_ShaferShenoyInference_Sl_double_Sg__hardEvidenceNodes(gum::ShaferShenoyInference< double > *self){
      return PyAgrumHelper::PySetFromNodeSet(self->hardEvidenceNodes() ) ;
    }
SWIGINTERN PyObject *gum_ShaferShenoyInference_Sl_double_Sg__softEvidenceNodes(gum::ShaferShenoyInference< double > *self){
      return PyAgrumHelper::PySetFromNodeSet(self->softEvidenceNodes() ) ;
    }
SWIGINTERN PyObject *gum_ShaferShenoyInference_Sl_double_Sg__targets(gum::ShaferShenoyInference< double > *self){
      return PyAgrumHelper::PySetFromNodeSet(self->targets() );
    }
SWIGINTERN gum::Tensor< double > gum_ShaferShenoyInference_Sl_double_Sg__evidenceImpact__SWIG_2(gum::ShaferShenoyInference< double > *self,PyObject *target,PyObject *evs){
      gum::NodeId itarget=PyAgrumHelper::nodeIdFromNameOrIndex(target,self->BN().variableNodeMap());
      gum::NodeSet soe;
      PyAgrumHelper::populateNodeSetFromPySequenceOfIntOrString(soe,evs,self->BN().variableNodeMap());
      return self->evidenceImpact(itarget,soe);
    }
SWIGINTERN double gum_ShaferShenoyInference_Sl_double_Sg__jointMutualInformation(gum::ShaferShenoyInference< double > *self,PyObject *targets){
      gum::NodeSet sot;
      PyAgrumHelper::populateNodeSetFromPySequenceOfIntOrString(sot,targets,self->BN().variableNodeMap());
      return self->jointMutualInformation(sot);
    }
SWIGINTERN gum::Tensor< double > gum_ShaferShenoyInference_Sl_double_Sg__evidenceJointImpact__SWIG_2(gum::ShaferShenoyInference< double > *self,PyObject *targets,PyObject *evs){
      gum::NodeSet sot;
      gum::NodeSet soe;
      PyAgrumHelper::populateNodeSetFromPySequenceOfIntOrString(sot,targets,self->BN().variableNodeMap());
      PyAgrumHelper::populateNodeSetFromPySequenceOfIntOrString(soe,evs,self->BN().variableNodeMap());
      return self->evidenceJointImpact(sot,soe);
    }
SWIGINTERN gum::Tensor< double > gum_ShaferShenoyInference_Sl_double_Sg__jointPosterior(gum::ShaferShenoyInference< double > *self,PyObject *targets){
      if (! PyAnySet_Check(targets)) {
             {                                                                                             std::ostringstream error_stream;                                                            error_stream << "The argument must be a set";                                                                        throw(gum::InvalidArgument(gum::_createMsg_("/Users/phw/Documents/gits/agrum/aGrUM-dev/wrappers/pyagrum/swigsrc//inference.i", __FUNCTION__, 250, error_stream.str())));      }
      }
      gum::NodeSet nodeset;
      PyAgrumHelper::populateNodeSetFromPySequenceOfIntOrString(nodeset,targets,self->BN().variableNodeMap());
      return self->jointPosterior(nodeset);
    }
SWIGINTERN void gum_ShaferShenoyInference_Sl_double_Sg__addJointTarget(gum::ShaferShenoyInference< double > *self,PyObject *targets){
      if (! PyAnySet_Check(targets)) {
             {                                                                                             std::ostringstream error_stream;                                                            error_stream << "The argument must be a set";                                                                        throw(gum::InvalidArgument(gum::_createMsg_("/Users/phw/Documents/gits/agrum/aGrUM-dev/wrappers/pyagrum/swigsrc//inference.i", __FUNCTION__, 250, error_stream.str())));      }
      }
      gum::NodeSet nodeset;
      PyAgrumHelper::populateNodeSetFromPySequenceOfIntOrString(nodeset,targets,self->BN().variableNodeMap());

      self->gum::JointTargetedInference<double>::addJointTarget(nodeset);
    }
SWIGINTERN void gum_ShaferShenoyInference_Sl_double_Sg__eraseJointTarget(gum::ShaferShenoyInference< double > *self,PyObject *targets){
      if (! PyAnySet_Check(targets)) {
             {                                                                                             std::ostringstream error_stream;                                                            error_stream << "The argument must be a set";                                                                        throw(gum::InvalidArgument(gum::_createMsg_("/Users/phw/Documents/gits/agrum/aGrUM-dev/wrappers/pyagrum/swigsrc//inference.i", __FUNCTION__, 250, error_stream.str())));      }
      }
      gum::NodeSet nodeset;
      PyAgrumHelper::populateNodeSetFromPySequenceOfIntOrString(nodeset,targets,self->BN().variableNodeMap());
      self->gum::JointTargetedInference<double>::eraseJointTarget(nodeset);
    }
SWIGINTERN bool gum_ShaferShenoyInference_Sl_double_Sg__isJointTarget(gum::ShaferShenoyInference< double > *self,PyObject *targets){
      if (! PyAnySet_Check(targets)) {
             {                                                                                             std::ostringstream error_stream;                                                            error_stream << "The argument must be a set";                                                                        throw(gum::InvalidArgument(gum::_createMsg_("/Users/phw/Documents/gits/agrum/aGrUM-dev/wrappers/pyagrum/swigsrc//inference.i", __FUNCTION__, 250, error_stream.str())));      }
      }
      gum::NodeSet nodeset;
      PyAgrumHelper::populateNodeSetFromPySequenceOfIntOrString(nodeset,targets,self->BN().variableNodeMap());
      return self->gum::JointTargetedInference<double>::isJointTarget(nodeset);
    }
SWIGINTERN PyObject *gum_ShaferShenoyInference_Sl_double_Sg__jointTargets(gum::ShaferShenoyInference< double > const *self){
      PyObject* q = PyList_New( 0 );

      PyObject* pyval;
      for ( auto ns : self->JointTargetedInference<double>::jointTargets()) {
        pyval=PyAgrumHelper::PySetFromNodeSet(ns);
        PyList_Append( q,pyval);
        Py_DecRef(pyval);
      }
      return q;
    }
SWIGINTERN void gum_VariableElimination_Sl_double_Sg__makeInference(gum::VariableElimination< double > *self){
    self->gum::MarginalTargetedInference<double>::makeInference();
  }
SWIGINTERN gum::Tensor< double > const gum_VariableElimination_Sl_double_Sg__posterior__SWIG_0(gum::VariableElimination< double > *self,gum::NodeId const var){
    return self->gum::MarginalTargetedInference<double>::posterior(var);
  }
SWIGINTERN gum::Tensor< double > const gum_VariableElimination_Sl_double_Sg__posterior__SWIG_1(gum::VariableElimination< double > *self,std::string const &nodeName){
    return self->gum::MarginalTargetedInference<double>::posterior(nodeName);
  }
SWIGINTERN void gum_VariableElimination_Sl_double_Sg__addEvidence__SWIG_0(gum::VariableElimination< double > *self,gum::NodeId const id,gum::Idx const val){
    self->gum::MarginalTargetedInference<double>::addEvidence(id,val);
  }
SWIGINTERN void gum_VariableElimination_Sl_double_Sg__addEvidence__SWIG_1(gum::VariableElimination< double > *self,std::string const &nodeName,gum::Idx const val){
    self->gum::MarginalTargetedInference<double>::addEvidence(nodeName,val);
  }
SWIGINTERN void gum_VariableElimination_Sl_double_Sg__addEvidence__SWIG_2(gum::VariableElimination< double > *self,gum::NodeId const id,std::string const &val){
    self->gum::MarginalTargetedInference<double>::addEvidence(id,val);
  }
SWIGINTERN void gum_VariableElimination_Sl_double_Sg__addEvidence__SWIG_3(gum::VariableElimination< double > *self,std::string const &nodeName,std::string const &val){
    self->gum::MarginalTargetedInference<double>::addEvidence(nodeName,val);
  }
SWIGINTERN void gum_VariableElimination_Sl_double_Sg__addEvidence__SWIG_4(gum::VariableElimination< double > *self,gum::NodeId const id,std::vector< double,std::allocator< double > > const &vals){
   self->gum::MarginalTargetedInference<double>::addEvidence(id,vals);
  }
SWIGINTERN void gum_VariableElimination_Sl_double_Sg__addEvidence__SWIG_5(gum::VariableElimination< double > *self,std::string const &nodeName,std::vector< double,std::allocator< double > > const &vals){
    self->gum::MarginalTargetedInference<double>::addEvidence(nodeName,vals);
  }
SWIGINTERN void gum_VariableElimination_Sl_double_Sg__addEvidence__SWIG_6(gum::VariableElimination< double > *self,gum::Tensor< double > const &p){
    self->gum::MarginalTargetedInference<double>::addEvidence(p);
  }
SWIGINTERN void gum_VariableElimination_Sl_double_Sg__chgEvidence__SWIG_0(gum::VariableElimination< double > *self,gum::NodeId const id,gum::Idx const val){
    self->gum::MarginalTargetedInference<double>::chgEvidence(id,val);
  }
SWIGINTERN void gum_VariableElimination_Sl_double_Sg__chgEvidence__SWIG_1(gum::VariableElimination< double > *self,std::string const &nodeName,gum::Idx const val){
    self->gum::MarginalTargetedInference<double>::chgEvidence(nodeName,val);
  }
SWIGINTERN void gum_VariableElimination_Sl_double_Sg__chgEvidence__SWIG_2(gum::VariableElimination< double > *self,gum::NodeId const id,std::string const &val){
    self->gum::MarginalTargetedInference<double>::chgEvidence(id,val);
  }
SWIGINTERN void gum_VariableElimination_Sl_double_Sg__chgEvidence__SWIG_3(gum::VariableElimination< double > *self,std::string const &nodeName,std::string const &val){
    self->gum::MarginalTargetedInference<double>::chgEvidence(nodeName,val);
  }
SWIGINTERN void gum_VariableElimination_Sl_double_Sg__chgEvidence__SWIG_4(gum::VariableElimination< double > *self,gum::Tensor< double > const &p){
    self->gum::MarginalTargetedInference<double>::chgEvidence(p);
  }
SWIGINTERN void gum_VariableElimination_Sl_double_Sg__chgEvidence__SWIG_5(gum::VariableElimination< double > *self,gum::NodeId const id,std::vector< double,std::allocator< double > > const &vals){
   self->gum::MarginalTargetedInference<double>::chgEvidence(id,vals);
  }
SWIGINTERN void gum_VariableElimination_Sl_double_Sg__chgEvidence__SWIG_6(gum::VariableElimination< double > *self,std::string const &nodeName,std::vector< double,std::allocator< double > > const &vals){
    self->gum::MarginalTargetedInference<double>::chgEvidence(nodeName,vals);
  }
SWIGINTERN bool gum_VariableElimination_Sl_double_Sg__hasEvidence__SWIG_0(gum::VariableElimination< double > const *self,gum::NodeId const id){
    return self->gum::MarginalTargetedInference<double>::hasEvidence(id);
  }
SWIGINTERN bool gum_VariableElimination_Sl_double_Sg__hasEvidence__SWIG_1(gum::VariableElimination< double > const *self,std::string const &nodeName){
    return self->gum::MarginalTargetedInference<double>::hasEvidence(nodeName);
  }
SWIGINTERN void gum_VariableElimination_Sl_double_Sg__eraseAllEvidence(gum::VariableElimination< double > *self){
    self->gum::MarginalTargetedInference<double>::eraseAllEvidence();
  }
SWIGINTERN void gum_VariableElimination_Sl_double_Sg__eraseEvidence__SWIG_0(gum::VariableElimination< double > *self,gum::NodeId const id){
    self->gum::MarginalTargetedInference<double>::eraseEvidence(id);
  }
SWIGINTERN void gum_VariableElimination_Sl_double_Sg__eraseEvidence__SWIG_1(gum::VariableElimination< double > *self,std::string const &nodeName){
    self->gum::MarginalTargetedInference<double>::eraseEvidence(nodeName);
  }
SWIGINTERN bool gum_VariableElimination_Sl_double_Sg__hasSoftEvidence__SWIG_0(gum::VariableElimination< double > const *self,gum::NodeId const id){
    return self->gum::MarginalTargetedInference<double>::hasSoftEvidence(id);
  }
SWIGINTERN bool gum_VariableElimination_Sl_double_Sg__hasHardEvidence(gum::VariableElimination< double > const *self,std::string const &nodeName){
    return self->gum::MarginalTargetedInference<double>::hasHardEvidence(nodeName);
  }
SWIGINTERN bool gum_VariableElimination_Sl_double_Sg__hasSoftEvidence__SWIG_1(gum::VariableElimination< double > const *self,std::string const &nodeName){
    return self->gum::MarginalTargetedInference<double>::hasSoftEvidence(nodeName);
  }
SWIGINTERN gum::Size gum_VariableElimination_Sl_double_Sg__nbrEvidence(gum::VariableElimination< double > const *self){
    return self->gum::MarginalTargetedInference<double>::nbrEvidence();
  }
SWIGINTERN gum::Size gum_VariableElimination_Sl_double_Sg__nbrHardEvidence(gum::VariableElimination< double > const *self){
    return self->gum::MarginalTargetedInference<double>::nbrHardEvidence();
  }
SWIGINTERN gum::Size gum_VariableElimination_Sl_double_Sg__nbrSoftEvidence(gum::VariableElimination< double > const *self){
    return self->gum::MarginalTargetedInference<double>::nbrSoftEvidence();
  }
SWIGINTERN void gum_VariableElimination_Sl_double_Sg__eraseAllTargets(gum::VariableElimination< double > *self){
      self->gum::MarginalTargetedInference<double>::eraseAllTargets();
    }
SWIGINTERN void gum_VariableElimination_Sl_double_Sg__addAllTargets(gum::VariableElimination< double > *self){
      self->gum::MarginalTargetedInference<double>::addAllTargets();
    }
SWIGINTERN void gum_VariableElimination_Sl_double_Sg__addTarget__SWIG_0(gum::VariableElimination< double > *self,gum::NodeId const target){
      self->gum::MarginalTargetedInference<double>::addTarget(target);
    }
SWIGINTERN void gum_VariableElimination_Sl_double_Sg__addTarget__SWIG_1(gum::VariableElimination< double > *self,std::string const &nodeName){
      self->gum::MarginalTargetedInference<double>::addTarget(nodeName);
    }
SWIGINTERN void gum_VariableElimination_Sl_double_Sg__eraseTarget__SWIG_0(gum::VariableElimination< double > *self,gum::NodeId const target){
      self->gum::MarginalTargetedInference<double>::eraseTarget(target);
    }
SWIGINTERN void gum_VariableElimination_Sl_double_Sg__eraseTarget__SWIG_1(gum::VariableElimination< double > *self,std::string const &nodeName){
      self->gum::MarginalTargetedInference<double>::eraseTarget(nodeName);
    }
SWIGINTERN bool gum_VariableElimination_Sl_double_Sg__isTarget__SWIG_0(gum::VariableElimination< double > const *self,gum::NodeId const variable){
      return self->gum::MarginalTargetedInference<double>::isTarget(variable);
    }
SWIGINTERN bool gum_VariableElimination_Sl_double_Sg__isTarget__SWIG_1(gum::VariableElimination< double > const *self,std::string const &nodeName){
      return self->gum::MarginalTargetedInference<double>::isTarget(nodeName);
    }
SWIGINTERN gum::Size gum_VariableElimination_Sl_double_Sg__nbrTargets(gum::VariableElimination< double > const *self){
      return self->gum::MarginalTargetedInference<double>::nbrTargets();
    }
SWIGINTERN double gum_VariableElimination_Sl_double_Sg__H__SWIG_0(gum::VariableElimination< double > *self,gum::NodeId const X){
     return self->gum::MarginalTargetedInference<double>::H(X);
   }
SWIGINTERN double gum_VariableElimination_Sl_double_Sg__H__SWIG_1(gum::VariableElimination< double > *self,std::string const &nodeName){
     return self->gum::MarginalTargetedInference<double>::H(nodeName);
   }
SWIGINTERN gum::Tensor< double > gum_VariableElimination_Sl_double_Sg__evidenceImpact__SWIG_0(gum::VariableElimination< double > *self,gum::NodeId target,gum::NodeSet const &evs){
    return self->gum::MarginalTargetedInference<double>::evidenceImpact(target,evs);
  }
SWIGINTERN gum::Tensor< double > gum_VariableElimination_Sl_double_Sg__evidenceImpact__SWIG_1(gum::VariableElimination< double > *self,std::string const &target,std::vector< std::string,std::allocator< std::string > > const &evs){
   return self->gum::MarginalTargetedInference<double>::evidenceImpact(target,evs);
  }
SWIGINTERN gum::IBayesNet< double > const &gum_VariableElimination_Sl_double_Sg__BN(gum::VariableElimination< double > const *self){ return self->gum::MarginalTargetedInference<double>::BN(); }
SWIGINTERN void gum_VariableElimination_Sl_double_Sg__setNumberOfThreads(gum::VariableElimination< double > *self,int nb){
    self->setNumberOfThreads(nb);
  }
SWIGINTERN int gum_VariableElimination_Sl_double_Sg__getNumberOfThreads(gum::VariableElimination< double > *self){
    return self->getNumberOfThreads();
  }
SWIGINTERN bool gum_VariableElimination_Sl_double_Sg__isGumNumberOfThreadsOverriden(gum::VariableElimination< double > *self){
    return self->isGumNumberOfThreadsOverriden();
  }
SWIGINTERN void gum_VariableElimination_Sl_double_Sg__setMaxMemory(gum::VariableElimination< double > *self,int gigabytes){
    self->setMaxMemory(gigabytes);
  }
SWIGINTERN void gum_VariableElimination_Sl_double_Sg__setEvidence(gum::VariableElimination< double > *self,PyObject *evidces){}
SWIGINTERN void gum_VariableElimination_Sl_double_Sg__updateEvidence(gum::VariableElimination< double > *self,PyObject *evidces){}
SWIGINTERN void gum_VariableElimination_Sl_double_Sg__setTargets(gum::VariableElimination< double > *self,PyObject *targets){}
SWIGINTERN PyObject *gum_VariableElimination_Sl_double_Sg__hardEvidenceNodes(gum::VariableElimination< double > *self){
      return PyAgrumHelper::PySetFromNodeSet(self->hardEvidenceNodes() ) ;
    }
SWIGINTERN PyObject *gum_VariableElimination_Sl_double_Sg__softEvidenceNodes(gum::VariableElimination< double > *self){
      return PyAgrumHelper::PySetFromNodeSet(self->softEvidenceNodes() ) ;
    }
SWIGINTERN PyObject *gum_VariableElimination_Sl_double_Sg__targets(gum::VariableElimination< double > *self){
      return PyAgrumHelper::PySetFromNodeSet(self->targets() );
    }
SWIGINTERN gum::Tensor< double > gum_VariableElimination_Sl_double_Sg__evidenceImpact__SWIG_2(gum::VariableElimination< double > *self,PyObject *target,PyObject *evs){
      gum::NodeId itarget=PyAgrumHelper::nodeIdFromNameOrIndex(target,self->BN().variableNodeMap());
      gum::NodeSet soe;
      PyAgrumHelper::populateNodeSetFromPySequenceOfIntOrString(soe,evs,self->BN().variableNodeMap());
      return self->evidenceImpact(itarget,soe);
    }
SWIGINTERN double gum_VariableElimination_Sl_double_Sg__jointMutualInformation(gum::VariableElimination< double > *self,PyObject *targets){
      gum::NodeSet sot;
      PyAgrumHelper::populateNodeSetFromPySequenceOfIntOrString(sot,targets,self->BN().variableNodeMap());
      return self->jointMutualInformation(sot);
    }
SWIGINTERN gum::Tensor< double > gum_VariableElimination_Sl_double_Sg__evidenceJointImpact(gum::VariableElimination< double > *self,PyObject *targets,PyObject *evs){
      gum::NodeSet sot;
      gum::NodeSet soe;
      PyAgrumHelper::populateNodeSetFromPySequenceOfIntOrString(sot,targets,self->BN().variableNodeMap());
      PyAgrumHelper::populateNodeSetFromPySequenceOfIntOrString(soe,evs,self->BN().variableNodeMap());
      return self->evidenceJointImpact(sot,soe);
    }
SWIGINTERN gum::Tensor< double > gum_VariableElimination_Sl_double_Sg__jointPosterior(gum::VariableElimination< double > *self,PyObject *targets){
      if (! PyAnySet_Check(targets)) {
             {                                                                                             std::ostringstream error_stream;                                                            error_stream << "The argument must be a set";                                                                        throw(gum::InvalidArgument(gum::_createMsg_("/Users/phw/Documents/gits/agrum/aGrUM-dev/wrappers/pyagrum/swigsrc//inference.i", __FUNCTION__, 251, error_stream.str())));      }
      }
      gum::NodeSet nodeset;
      PyAgrumHelper::populateNodeSetFromPySequenceOfIntOrString(nodeset,targets,self->BN().variableNodeMap());
      return self->jointPosterior(nodeset);
    }
SWIGINTERN void gum_VariableElimination_Sl_double_Sg__addJointTarget(gum::VariableElimination< double > *self,PyObject *targets){
      if (! PyAnySet_Check(targets)) {
             {                                                                                             std::ostringstream error_stream;                                                            error_stream << "The argument must be a set";                                                                        throw(gum::InvalidArgument(gum::_createMsg_("/Users/phw/Documents/gits/agrum/aGrUM-dev/wrappers/pyagrum/swigsrc//inference.i", __FUNCTION__, 251, error_stream.str())));      }
      }
      gum::NodeSet nodeset;
      PyAgrumHelper::populateNodeSetFromPySequenceOfIntOrString(nodeset,targets,self->BN().variableNodeMap());

      self->gum::JointTargetedInference<double>::addJointTarget(nodeset);
    }
SWIGINTERN void gum_VariableElimination_Sl_double_Sg__eraseJointTarget(gum::VariableElimination< double > *self,PyObject *targets){
      if (! PyAnySet_Check(targets)) {
             {                                                                                             std::ostringstream error_stream;                                                            error_stream << "The argument must be a set";                                                                        throw(gum::InvalidArgument(gum::_createMsg_("/Users/phw/Documents/gits/agrum/aGrUM-dev/wrappers/pyagrum/swigsrc//inference.i", __FUNCTION__, 251, error_stream.str())));      }
      }
      gum::NodeSet nodeset;
      PyAgrumHelper::populateNodeSetFromPySequenceOfIntOrString(nodeset,targets,self->BN().variableNodeMap());
      self->gum::JointTargetedInference<double>::eraseJointTarget(nodeset);
    }
SWIGINTERN bool gum_VariableElimination_Sl_double_Sg__isJointTarget(gum::VariableElimination< double > *self,PyObject *targets){
      if (! PyAnySet_Check(targets)) {
             {                                                                                             std::ostringstream error_stream;                                                            error_stream << "The argument must be a set";                                                                        throw(gum::InvalidArgument(gum::_createMsg_("/Users/phw/Documents/gits/agrum/aGrUM-dev/wrappers/pyagrum/swigsrc//inference.i", __FUNCTION__, 251, error_stream.str())));      }
      }
      gum::NodeSet nodeset;
      PyAgrumHelper::populateNodeSetFromPySequenceOfIntOrString(nodeset,targets,self->BN().variableNodeMap());
      return self->gum::JointTargetedInference<double>::isJointTarget(nodeset);
    }
SWIGINTERN PyObject *gum_VariableElimination_Sl_double_Sg__jointTargets(gum::VariableElimination< double > const *self){
      PyObject* q = PyList_New( 0 );

      PyObject* pyval;
      for ( auto ns : self->JointTargetedInference<double>::jointTargets()) {
        pyval=PyAgrumHelper::PySetFromNodeSet(ns);
        PyList_Append( q,pyval);
        Py_DecRef(pyval);
      }
      return q;
    }
SWIGINTERN void gum_GibbsSampling_Sl_double_Sg__setVerbosity(gum::GibbsSampling< double > *self,bool v){ self->gum::ApproximationScheme::setVerbosity(v); }
SWIGINTERN void gum_GibbsSampling_Sl_double_Sg__setEpsilon(gum::GibbsSampling< double > *self,double eps){ self->gum::ApproximationScheme::setEpsilon(eps); }
SWIGINTERN void gum_GibbsSampling_Sl_double_Sg__setMinEpsilonRate(gum::GibbsSampling< double > *self,double rate){ self->gum::ApproximationScheme::setMinEpsilonRate(rate); }
SWIGINTERN void gum_GibbsSampling_Sl_double_Sg__setMaxIter(gum::GibbsSampling< double > *self,gum::Size max){ self->gum::ApproximationScheme::setMaxIter(max); }
SWIGINTERN void gum_GibbsSampling_Sl_double_Sg__setMaxTime(gum::GibbsSampling< double > *self,double timeout){ self->gum::ApproximationScheme::setMaxTime(timeout); }
SWIGINTERN void gum_GibbsSampling_Sl_double_Sg__setPeriodSize(gum::GibbsSampling< double > *self,gum::Size p){ self->gum::ApproximationScheme::setPeriodSize(p); }
SWIGINTERN bool gum_GibbsSampling_Sl_double_Sg__verbosity(gum::GibbsSampling< double > const *self){ return self->gum::ApproximationScheme::verbosity(); }
SWIGINTERN double gum_GibbsSampling_Sl_double_Sg__epsilon(gum::GibbsSampling< double > const *self){ return self->gum::ApproximationScheme::epsilon(); }
SWIGINTERN double gum_GibbsSampling_Sl_double_Sg__minEpsilonRate(gum::GibbsSampling< double > const *self){ return self->gum::ApproximationScheme::minEpsilonRate(); }
SWIGINTERN gum::Size gum_GibbsSampling_Sl_double_Sg__maxIter(gum::GibbsSampling< double > const *self){ return self->gum::ApproximationScheme::maxIter(); }
SWIGINTERN double gum_GibbsSampling_Sl_double_Sg__maxTime(gum::GibbsSampling< double > const *self){ return self->gum::ApproximationScheme::maxTime(); }
SWIGINTERN gum::Size gum_GibbsSampling_Sl_double_Sg__periodSize(gum::GibbsSampling< double > const *self){ return self->gum::ApproximationScheme::periodSize(); }
SWIGINTERN gum::Size gum_GibbsSampling_Sl_double_Sg__nbrIterations(gum::GibbsSampling< double > const *self){ return self->gum::ApproximationScheme::nbrIterations(); }
SWIGINTERN double gum_GibbsSampling_Sl_double_Sg__currentTime(gum::GibbsSampling< double > const *self){ return self->gum::ApproximationScheme::currentTime(); }
SWIGINTERN std::string gum_GibbsSampling_Sl_double_Sg__messageApproximationScheme(gum::GibbsSampling< double > const *self){ return self->gum::ApproximationScheme::messageApproximationScheme(); }
SWIGINTERN std::vector< double,std::allocator< double > > const &gum_GibbsSampling_Sl_double_Sg__history(gum::GibbsSampling< double > const *self){ return self->gum::ApproximationScheme::history(); }
SWIGINTERN gum::IApproximationSchemeConfiguration const &gum_GibbsSampling_Sl_double_Sg___asIApproximationSchemeConfiguration(gum::GibbsSampling< double > const *self){
    return *(dynamic_cast<const gum::IApproximationSchemeConfiguration *>(self));
  }
SWIGINTERN void gum_GibbsSampling_Sl_double_Sg__makeInference(gum::GibbsSampling< double > *self){
    self->gum::MarginalTargetedInference<double>::makeInference();
  }
SWIGINTERN gum::Tensor< double > const gum_GibbsSampling_Sl_double_Sg__posterior__SWIG_0(gum::GibbsSampling< double > *self,gum::NodeId const var){
    return self->gum::MarginalTargetedInference<double>::posterior(var);
  }
SWIGINTERN gum::Tensor< double > const gum_GibbsSampling_Sl_double_Sg__posterior__SWIG_1(gum::GibbsSampling< double > *self,std::string const &nodeName){
    return self->gum::MarginalTargetedInference<double>::posterior(nodeName);
  }
SWIGINTERN void gum_GibbsSampling_Sl_double_Sg__addEvidence__SWIG_0(gum::GibbsSampling< double > *self,gum::NodeId const id,gum::Idx const val){
    self->gum::MarginalTargetedInference<double>::addEvidence(id,val);
  }
SWIGINTERN void gum_GibbsSampling_Sl_double_Sg__addEvidence__SWIG_1(gum::GibbsSampling< double > *self,std::string const &nodeName,gum::Idx const val){
    self->gum::MarginalTargetedInference<double>::addEvidence(nodeName,val);
  }
SWIGINTERN void gum_GibbsSampling_Sl_double_Sg__addEvidence__SWIG_2(gum::GibbsSampling< double > *self,gum::NodeId const id,std::string const &val){
    self->gum::MarginalTargetedInference<double>::addEvidence(id,val);
  }
SWIGINTERN void gum_GibbsSampling_Sl_double_Sg__addEvidence__SWIG_3(gum::GibbsSampling< double > *self,std::string const &nodeName,std::string const &val){
    self->gum::MarginalTargetedInference<double>::addEvidence(nodeName,val);
  }
SWIGINTERN void gum_GibbsSampling_Sl_double_Sg__addEvidence__SWIG_4(gum::GibbsSampling< double > *self,gum::NodeId const id,std::vector< double,std::allocator< double > > const &vals){
   self->gum::MarginalTargetedInference<double>::addEvidence(id,vals);
  }
SWIGINTERN void gum_GibbsSampling_Sl_double_Sg__addEvidence__SWIG_5(gum::GibbsSampling< double > *self,std::string const &nodeName,std::vector< double,std::allocator< double > > const &vals){
    self->gum::MarginalTargetedInference<double>::addEvidence(nodeName,vals);
  }
SWIGINTERN void gum_GibbsSampling_Sl_double_Sg__addEvidence__SWIG_6(gum::GibbsSampling< double > *self,gum::Tensor< double > const &p){
    self->gum::MarginalTargetedInference<double>::addEvidence(p);
  }
SWIGINTERN void gum_GibbsSampling_Sl_double_Sg__chgEvidence__SWIG_0(gum::GibbsSampling< double > *self,gum::NodeId const id,gum::Idx const val){
    self->gum::MarginalTargetedInference<double>::chgEvidence(id,val);
  }
SWIGINTERN void gum_GibbsSampling_Sl_double_Sg__chgEvidence__SWIG_1(gum::GibbsSampling< double > *self,std::string const &nodeName,gum::Idx const val){
    self->gum::MarginalTargetedInference<double>::chgEvidence(nodeName,val);
  }
SWIGINTERN void gum_GibbsSampling_Sl_double_Sg__chgEvidence__SWIG_2(gum::GibbsSampling< double > *self,gum::NodeId const id,std::string const &val){
    self->gum::MarginalTargetedInference<double>::chgEvidence(id,val);
  }
SWIGINTERN void gum_GibbsSampling_Sl_double_Sg__chgEvidence__SWIG_3(gum::GibbsSampling< double > *self,std::string const &nodeName,std::string const &val){
    self->gum::MarginalTargetedInference<double>::chgEvidence(nodeName,val);
  }
SWIGINTERN void gum_GibbsSampling_Sl_double_Sg__chgEvidence__SWIG_4(gum::GibbsSampling< double > *self,gum::Tensor< double > const &p){
    self->gum::MarginalTargetedInference<double>::chgEvidence(p);
  }
SWIGINTERN void gum_GibbsSampling_Sl_double_Sg__chgEvidence__SWIG_5(gum::GibbsSampling< double > *self,gum::NodeId const id,std::vector< double,std::allocator< double > > const &vals){
   self->gum::MarginalTargetedInference<double>::chgEvidence(id,vals);
  }
SWIGINTERN void gum_GibbsSampling_Sl_double_Sg__chgEvidence__SWIG_6(gum::GibbsSampling< double > *self,std::string const &nodeName,std::vector< double,std::allocator< double > > const &vals){
    self->gum::MarginalTargetedInference<double>::chgEvidence(nodeName,vals);
  }
SWIGINTERN bool gum_GibbsSampling_Sl_double_Sg__hasEvidence__SWIG_0(gum::GibbsSampling< double > const *self,gum::NodeId const id){
    return self->gum::MarginalTargetedInference<double>::hasEvidence(id);
  }
SWIGINTERN bool gum_GibbsSampling_Sl_double_Sg__hasEvidence__SWIG_1(gum::GibbsSampling< double > const *self,std::string const &nodeName){
    return self->gum::MarginalTargetedInference<double>::hasEvidence(nodeName);
  }
SWIGINTERN void gum_GibbsSampling_Sl_double_Sg__eraseAllEvidence(gum::GibbsSampling< double > *self){
    self->gum::MarginalTargetedInference<double>::eraseAllEvidence();
  }
SWIGINTERN void gum_GibbsSampling_Sl_double_Sg__eraseEvidence__SWIG_0(gum::GibbsSampling< double > *self,gum::NodeId const id){
    self->gum::MarginalTargetedInference<double>::eraseEvidence(id);
  }
SWIGINTERN void gum_GibbsSampling_Sl_double_Sg__eraseEvidence__SWIG_1(gum::GibbsSampling< double > *self,std::string const &nodeName){
    self->gum::MarginalTargetedInference<double>::eraseEvidence(nodeName);
  }
SWIGINTERN bool gum_GibbsSampling_Sl_double_Sg__hasSoftEvidence__SWIG_0(gum::GibbsSampling< double > const *self,gum::NodeId const id){
    return self->gum::MarginalTargetedInference<double>::hasSoftEvidence(id);
  }
SWIGINTERN bool gum_GibbsSampling_Sl_double_Sg__hasHardEvidence(gum::GibbsSampling< double > const *self,std::string const &nodeName){
    return self->gum::MarginalTargetedInference<double>::hasHardEvidence(nodeName);
  }
SWIGINTERN bool gum_GibbsSampling_Sl_double_Sg__hasSoftEvidence__SWIG_1(gum::GibbsSampling< double > const *self,std::string const &nodeName){
    return self->gum::MarginalTargetedInference<double>::hasSoftEvidence(nodeName);
  }
SWIGINTERN gum::Size gum_GibbsSampling_Sl_double_Sg__nbrEvidence(gum::GibbsSampling< double > const *self){
    return self->gum::MarginalTargetedInference<double>::nbrEvidence();
  }
SWIGINTERN gum::Size gum_GibbsSampling_Sl_double_Sg__nbrHardEvidence(gum::GibbsSampling< double > const *self){
    return self->gum::MarginalTargetedInference<double>::nbrHardEvidence();
  }
SWIGINTERN gum::Size gum_GibbsSampling_Sl_double_Sg__nbrSoftEvidence(gum::GibbsSampling< double > const *self){
    return self->gum::MarginalTargetedInference<double>::nbrSoftEvidence();
  }
SWIGINTERN void gum_GibbsSampling_Sl_double_Sg__eraseAllTargets(gum::GibbsSampling< double > *self){
      self->gum::MarginalTargetedInference<double>::eraseAllTargets();
    }
SWIGINTERN void gum_GibbsSampling_Sl_double_Sg__addAllTargets(gum::GibbsSampling< double > *self){
      self->gum::MarginalTargetedInference<double>::addAllTargets();
    }
SWIGINTERN void gum_GibbsSampling_Sl_double_Sg__addTarget__SWIG_0(gum::GibbsSampling< double > *self,gum::NodeId const target){
      self->gum::MarginalTargetedInference<double>::addTarget(target);
    }
SWIGINTERN void gum_GibbsSampling_Sl_double_Sg__addTarget__SWIG_1(gum::GibbsSampling< double > *self,std::string const &nodeName){
      self->gum::MarginalTargetedInference<double>::addTarget(nodeName);
    }
SWIGINTERN void gum_GibbsSampling_Sl_double_Sg__eraseTarget__SWIG_0(gum::GibbsSampling< double > *self,gum::NodeId const target){
      self->gum::MarginalTargetedInference<double>::eraseTarget(target);
    }
SWIGINTERN void gum_GibbsSampling_Sl_double_Sg__eraseTarget__SWIG_1(gum::GibbsSampling< double > *self,std::string const &nodeName){
      self->gum::MarginalTargetedInference<double>::eraseTarget(nodeName);
    }
SWIGINTERN bool gum_GibbsSampling_Sl_double_Sg__isTarget__SWIG_0(gum::GibbsSampling< double > const *self,gum::NodeId const variable){
      return self->gum::MarginalTargetedInference<double>::isTarget(variable);
    }
SWIGINTERN bool gum_GibbsSampling_Sl_double_Sg__isTarget__SWIG_1(gum::GibbsSampling< double > const *self,std::string const &nodeName){
      return self->gum::MarginalTargetedInference<double>::isTarget(nodeName);
    }
SWIGINTERN gum::Size gum_GibbsSampling_Sl_double_Sg__nbrTargets(gum::GibbsSampling< double > const *self){
      return self->gum::MarginalTargetedInference<double>::nbrTargets();
    }
SWIGINTERN double gum_GibbsSampling_Sl_double_Sg__H__SWIG_0(gum::GibbsSampling< double > *self,gum::NodeId const X){
     return self->gum::MarginalTargetedInference<double>::H(X);
   }
SWIGINTERN double gum_GibbsSampling_Sl_double_Sg__H__SWIG_1(gum::GibbsSampling< double > *self,std::string const &nodeName){
     return self->gum::MarginalTargetedInference<double>::H(nodeName);
   }
SWIGINTERN gum::Tensor< double > gum_GibbsSampling_Sl_double_Sg__evidenceImpact__SWIG_0(gum::GibbsSampling< double > *self,gum::NodeId target,gum::NodeSet const &evs){
    return self->gum::MarginalTargetedInference<double>::evidenceImpact(target,evs);
  }
SWIGINTERN gum::Tensor< double > gum_GibbsSampling_Sl_double_Sg__evidenceImpact__SWIG_1(gum::GibbsSampling< double > *self,std::string const &target,std::vector< std::string,std::allocator< std::string > > const &evs){
   return self->gum::MarginalTargetedInference<double>::evidenceImpact(target,evs);
  }
SWIGINTERN gum::IBayesNet< double > const &gum_GibbsSampling_Sl_double_Sg__BN(gum::GibbsSampling< double > const *self){ return self->gum::MarginalTargetedInference<double>::BN(); }
SWIGINTERN gum::Tensor< double > const &gum_GibbsSampling_Sl_double_Sg__currentPosterior__SWIG_0(gum::GibbsSampling< double > *self,gum::NodeId const id){return self->gum::SamplingInference<double>::currentPosterior(id);}
SWIGINTERN gum::Tensor< double > const &gum_GibbsSampling_Sl_double_Sg__currentPosterior__SWIG_1(gum::GibbsSampling< double > *self,std::string const &name){return self->gum::SamplingInference<double>::currentPosterior(name);}
SWIGINTERN gum::Size gum_GibbsSampling_Sl_double_Sg__nbrDrawnVar(gum::GibbsSampling< double > const *self){ return self->GibbsOperator<double>::nbrDrawnVar(); }
SWIGINTERN void gum_GibbsSampling_Sl_double_Sg__setNbrDrawnVar(gum::GibbsSampling< double > *self,gum::Size _nbr){ self->GibbsOperator<double>::setNbrDrawnVar(_nbr); }
SWIGINTERN bool gum_GibbsSampling_Sl_double_Sg__isDrawnAtRandom(gum::GibbsSampling< double > const *self){ return self->GibbsOperator<double>::isDrawnAtRandom(); }
SWIGINTERN void gum_GibbsSampling_Sl_double_Sg__setDrawnAtRandom(gum::GibbsSampling< double > *self,bool _atRandom){ self->GibbsOperator<double>::setDrawnAtRandom(_atRandom); }
SWIGINTERN void gum_GibbsSampling_Sl_double_Sg__setEvidence(gum::GibbsSampling< double > *self,PyObject *evidces){}
SWIGINTERN void gum_GibbsSampling_Sl_double_Sg__updateEvidence(gum::GibbsSampling< double > *self,PyObject *evidces){}
SWIGINTERN void gum_GibbsSampling_Sl_double_Sg__setTargets(gum::GibbsSampling< double > *self,PyObject *targets){}
SWIGINTERN PyObject *gum_GibbsSampling_Sl_double_Sg__hardEvidenceNodes(gum::GibbsSampling< double > *self){
      return PyAgrumHelper::PySetFromNodeSet(self->hardEvidenceNodes() ) ;
    }
SWIGINTERN PyObject *gum_GibbsSampling_Sl_double_Sg__softEvidenceNodes(gum::GibbsSampling< double > *self){
      return PyAgrumHelper::PySetFromNodeSet(self->softEvidenceNodes() ) ;
    }
SWIGINTERN PyObject *gum_GibbsSampling_Sl_double_Sg__targets(gum::GibbsSampling< double > *self){
      return PyAgrumHelper::PySetFromNodeSet(self->targets() );
    }
SWIGINTERN gum::Tensor< double > gum_GibbsSampling_Sl_double_Sg__evidenceImpact__SWIG_2(gum::GibbsSampling< double > *self,PyObject *target,PyObject *evs){
      gum::NodeId itarget=PyAgrumHelper::nodeIdFromNameOrIndex(target,self->BN().variableNodeMap());
      gum::NodeSet soe;
      PyAgrumHelper::populateNodeSetFromPySequenceOfIntOrString(soe,evs,self->BN().variableNodeMap());
      return self->evidenceImpact(itarget,soe);
    }
SWIGINTERN void gum_ImportanceSampling_Sl_double_Sg__setVerbosity(gum::ImportanceSampling< double > *self,bool v){ self->gum::ApproximationScheme::setVerbosity(v); }
SWIGINTERN void gum_ImportanceSampling_Sl_double_Sg__setEpsilon(gum::ImportanceSampling< double > *self,double eps){ self->gum::ApproximationScheme::setEpsilon(eps); }
SWIGINTERN void gum_ImportanceSampling_Sl_double_Sg__setMinEpsilonRate(gum::ImportanceSampling< double > *self,double rate){ self->gum::ApproximationScheme::setMinEpsilonRate(rate); }
SWIGINTERN void gum_ImportanceSampling_Sl_double_Sg__setMaxIter(gum::ImportanceSampling< double > *self,gum::Size max){ self->gum::ApproximationScheme::setMaxIter(max); }
SWIGINTERN void gum_ImportanceSampling_Sl_double_Sg__setMaxTime(gum::ImportanceSampling< double > *self,double timeout){ self->gum::ApproximationScheme::setMaxTime(timeout); }
SWIGINTERN void gum_ImportanceSampling_Sl_double_Sg__setPeriodSize(gum::ImportanceSampling< double > *self,gum::Size p){ self->gum::ApproximationScheme::setPeriodSize(p); }
SWIGINTERN bool gum_ImportanceSampling_Sl_double_Sg__verbosity(gum::ImportanceSampling< double > const *self){ return self->gum::ApproximationScheme::verbosity(); }
SWIGINTERN double gum_ImportanceSampling_Sl_double_Sg__epsilon(gum::ImportanceSampling< double > const *self){ return self->gum::ApproximationScheme::epsilon(); }
SWIGINTERN double gum_ImportanceSampling_Sl_double_Sg__minEpsilonRate(gum::ImportanceSampling< double > const *self){ return self->gum::ApproximationScheme::minEpsilonRate(); }
SWIGINTERN gum::Size gum_ImportanceSampling_Sl_double_Sg__maxIter(gum::ImportanceSampling< double > const *self){ return self->gum::ApproximationScheme::maxIter(); }
SWIGINTERN double gum_ImportanceSampling_Sl_double_Sg__maxTime(gum::ImportanceSampling< double > const *self){ return self->gum::ApproximationScheme::maxTime(); }
SWIGINTERN gum::Size gum_ImportanceSampling_Sl_double_Sg__periodSize(gum::ImportanceSampling< double > const *self){ return self->gum::ApproximationScheme::periodSize(); }
SWIGINTERN gum::Size gum_ImportanceSampling_Sl_double_Sg__nbrIterations(gum::ImportanceSampling< double > const *self){ return self->gum::ApproximationScheme::nbrIterations(); }
SWIGINTERN double gum_ImportanceSampling_Sl_double_Sg__currentTime(gum::ImportanceSampling< double > const *self){ return self->gum::ApproximationScheme::currentTime(); }
SWIGINTERN std::string gum_ImportanceSampling_Sl_double_Sg__messageApproximationScheme(gum::ImportanceSampling< double > const *self){ return self->gum::ApproximationScheme::messageApproximationScheme(); }
SWIGINTERN std::vector< double,std::allocator< double > > const &gum_ImportanceSampling_Sl_double_Sg__history(gum::ImportanceSampling< double > const *self){ return self->gum::ApproximationScheme::history(); }
SWIGINTERN gum::IApproximationSchemeConfiguration const &gum_ImportanceSampling_Sl_double_Sg___asIApproximationSchemeConfiguration(gum::ImportanceSampling< double > const *self){
    return *(dynamic_cast<const gum::IApproximationSchemeConfiguration *>(self));
  }
SWIGINTERN void gum_ImportanceSampling_Sl_double_Sg__makeInference(gum::ImportanceSampling< double > *self){
    self->gum::MarginalTargetedInference<double>::makeInference();
  }
SWIGINTERN gum::Tensor< double > const gum_ImportanceSampling_Sl_double_Sg__posterior__SWIG_0(gum::ImportanceSampling< double > *self,gum::NodeId const var){
    return self->gum::MarginalTargetedInference<double>::posterior(var);
  }
SWIGINTERN gum::Tensor< double > const gum_ImportanceSampling_Sl_double_Sg__posterior__SWIG_1(gum::ImportanceSampling< double > *self,std::string const &nodeName){
    return self->gum::MarginalTargetedInference<double>::posterior(nodeName);
  }
SWIGINTERN void gum_ImportanceSampling_Sl_double_Sg__addEvidence__SWIG_0(gum::ImportanceSampling< double > *self,gum::NodeId const id,gum::Idx const val){
    self->gum::MarginalTargetedInference<double>::addEvidence(id,val);
  }
SWIGINTERN void gum_ImportanceSampling_Sl_double_Sg__addEvidence__SWIG_1(gum::ImportanceSampling< double > *self,std::string const &nodeName,gum::Idx const val){
    self->gum::MarginalTargetedInference<double>::addEvidence(nodeName,val);
  }
SWIGINTERN void gum_ImportanceSampling_Sl_double_Sg__addEvidence__SWIG_2(gum::ImportanceSampling< double > *self,gum::NodeId const id,std::string const &val){
    self->gum::MarginalTargetedInference<double>::addEvidence(id,val);
  }
SWIGINTERN void gum_ImportanceSampling_Sl_double_Sg__addEvidence__SWIG_3(gum::ImportanceSampling< double > *self,std::string const &nodeName,std::string const &val){
    self->gum::MarginalTargetedInference<double>::addEvidence(nodeName,val);
  }
SWIGINTERN void gum_ImportanceSampling_Sl_double_Sg__addEvidence__SWIG_4(gum::ImportanceSampling< double > *self,gum::NodeId const id,std::vector< double,std::allocator< double > > const &vals){
   self->gum::MarginalTargetedInference<double>::addEvidence(id,vals);
  }
SWIGINTERN void gum_ImportanceSampling_Sl_double_Sg__addEvidence__SWIG_5(gum::ImportanceSampling< double > *self,std::string const &nodeName,std::vector< double,std::allocator< double > > const &vals){
    self->gum::MarginalTargetedInference<double>::addEvidence(nodeName,vals);
  }
SWIGINTERN void gum_ImportanceSampling_Sl_double_Sg__addEvidence__SWIG_6(gum::ImportanceSampling< double > *self,gum::Tensor< double > const &p){
    self->gum::MarginalTargetedInference<double>::addEvidence(p);
  }
SWIGINTERN void gum_ImportanceSampling_Sl_double_Sg__chgEvidence__SWIG_0(gum::ImportanceSampling< double > *self,gum::NodeId const id,gum::Idx const val){
    self->gum::MarginalTargetedInference<double>::chgEvidence(id,val);
  }
SWIGINTERN void gum_ImportanceSampling_Sl_double_Sg__chgEvidence__SWIG_1(gum::ImportanceSampling< double > *self,std::string const &nodeName,gum::Idx const val){
    self->gum::MarginalTargetedInference<double>::chgEvidence(nodeName,val);
  }
SWIGINTERN void gum_ImportanceSampling_Sl_double_Sg__chgEvidence__SWIG_2(gum::ImportanceSampling< double > *self,gum::NodeId const id,std::string const &val){
    self->gum::MarginalTargetedInference<double>::chgEvidence(id,val);
  }
SWIGINTERN void gum_ImportanceSampling_Sl_double_Sg__chgEvidence__SWIG_3(gum::ImportanceSampling< double > *self,std::string const &nodeName,std::string const &val){
    self->gum::MarginalTargetedInference<double>::chgEvidence(nodeName,val);
  }
SWIGINTERN void gum_ImportanceSampling_Sl_double_Sg__chgEvidence__SWIG_4(gum::ImportanceSampling< double > *self,gum::Tensor< double > const &p){
    self->gum::MarginalTargetedInference<double>::chgEvidence(p);
  }
SWIGINTERN void gum_ImportanceSampling_Sl_double_Sg__chgEvidence__SWIG_5(gum::ImportanceSampling< double > *self,gum::NodeId const id,std::vector< double,std::allocator< double > > const &vals){
   self->gum::MarginalTargetedInference<double>::chgEvidence(id,vals);
  }
SWIGINTERN void gum_ImportanceSampling_Sl_double_Sg__chgEvidence__SWIG_6(gum::ImportanceSampling< double > *self,std::string const &nodeName,std::vector< double,std::allocator< double > > const &vals){
    self->gum::MarginalTargetedInference<double>::chgEvidence(nodeName,vals);
  }
SWIGINTERN bool gum_ImportanceSampling_Sl_double_Sg__hasEvidence__SWIG_0(gum::ImportanceSampling< double > const *self,gum::NodeId const id){
    return self->gum::MarginalTargetedInference<double>::hasEvidence(id);
  }
SWIGINTERN bool gum_ImportanceSampling_Sl_double_Sg__hasEvidence__SWIG_1(gum::ImportanceSampling< double > const *self,std::string const &nodeName){
    return self->gum::MarginalTargetedInference<double>::hasEvidence(nodeName);
  }
SWIGINTERN void gum_ImportanceSampling_Sl_double_Sg__eraseAllEvidence(gum::ImportanceSampling< double > *self){
    self->gum::MarginalTargetedInference<double>::eraseAllEvidence();
  }
SWIGINTERN void gum_ImportanceSampling_Sl_double_Sg__eraseEvidence__SWIG_0(gum::ImportanceSampling< double > *self,gum::NodeId const id){
    self->gum::MarginalTargetedInference<double>::eraseEvidence(id);
  }
SWIGINTERN void gum_ImportanceSampling_Sl_double_Sg__eraseEvidence__SWIG_1(gum::ImportanceSampling< double > *self,std::string const &nodeName){
    self->gum::MarginalTargetedInference<double>::eraseEvidence(nodeName);
  }
SWIGINTERN bool gum_ImportanceSampling_Sl_double_Sg__hasSoftEvidence__SWIG_0(gum::ImportanceSampling< double > const *self,gum::NodeId const id){
    return self->gum::MarginalTargetedInference<double>::hasSoftEvidence(id);
  }
SWIGINTERN bool gum_ImportanceSampling_Sl_double_Sg__hasHardEvidence(gum::ImportanceSampling< double > const *self,std::string const &nodeName){
    return self->gum::MarginalTargetedInference<double>::hasHardEvidence(nodeName);
  }
SWIGINTERN bool gum_ImportanceSampling_Sl_double_Sg__hasSoftEvidence__SWIG_1(gum::ImportanceSampling< double > const *self,std::string const &nodeName){
    return self->gum::MarginalTargetedInference<double>::hasSoftEvidence(nodeName);
  }
SWIGINTERN gum::Size gum_ImportanceSampling_Sl_double_Sg__nbrEvidence(gum::ImportanceSampling< double > const *self){
    return self->gum::MarginalTargetedInference<double>::nbrEvidence();
  }
SWIGINTERN gum::Size gum_ImportanceSampling_Sl_double_Sg__nbrHardEvidence(gum::ImportanceSampling< double > const *self){
    return self->gum::MarginalTargetedInference<double>::nbrHardEvidence();
  }
SWIGINTERN gum::Size gum_ImportanceSampling_Sl_double_Sg__nbrSoftEvidence(gum::ImportanceSampling< double > const *self){
    return self->gum::MarginalTargetedInference<double>::nbrSoftEvidence();
  }
SWIGINTERN void gum_ImportanceSampling_Sl_double_Sg__eraseAllTargets(gum::ImportanceSampling< double > *self){
      self->gum::MarginalTargetedInference<double>::eraseAllTargets();
    }
SWIGINTERN void gum_ImportanceSampling_Sl_double_Sg__addAllTargets(gum::ImportanceSampling< double > *self){
      self->gum::MarginalTargetedInference<double>::addAllTargets();
    }
SWIGINTERN void gum_ImportanceSampling_Sl_double_Sg__addTarget__SWIG_0(gum::ImportanceSampling< double > *self,gum::NodeId const target){
      self->gum::MarginalTargetedInference<double>::addTarget(target);
    }
SWIGINTERN void gum_ImportanceSampling_Sl_double_Sg__addTarget__SWIG_1(gum::ImportanceSampling< double > *self,std::string const &nodeName){
      self->gum::MarginalTargetedInference<double>::addTarget(nodeName);
    }
SWIGINTERN void gum_ImportanceSampling_Sl_double_Sg__eraseTarget__SWIG_0(gum::ImportanceSampling< double > *self,gum::NodeId const target){
      self->gum::MarginalTargetedInference<double>::eraseTarget(target);
    }
SWIGINTERN void gum_ImportanceSampling_Sl_double_Sg__eraseTarget__SWIG_1(gum::ImportanceSampling< double > *self,std::string const &nodeName){
      self->gum::MarginalTargetedInference<double>::eraseTarget(nodeName);
    }
SWIGINTERN bool gum_ImportanceSampling_Sl_double_Sg__isTarget__SWIG_0(gum::ImportanceSampling< double > const *self,gum::NodeId const variable){
      return self->gum::MarginalTargetedInference<double>::isTarget(variable);
    }
SWIGINTERN bool gum_ImportanceSampling_Sl_double_Sg__isTarget__SWIG_1(gum::ImportanceSampling< double > const *self,std::string const &nodeName){
      return self->gum::MarginalTargetedInference<double>::isTarget(nodeName);
    }
SWIGINTERN gum::Size gum_ImportanceSampling_Sl_double_Sg__nbrTargets(gum::ImportanceSampling< double > const *self){
      return self->gum::MarginalTargetedInference<double>::nbrTargets();
    }
SWIGINTERN double gum_ImportanceSampling_Sl_double_Sg__H__SWIG_0(gum::ImportanceSampling< double > *self,gum::NodeId const X){
     return self->gum::MarginalTargetedInference<double>::H(X);
   }
SWIGINTERN double gum_ImportanceSampling_Sl_double_Sg__H__SWIG_1(gum::ImportanceSampling< double > *self,std::string const &nodeName){
     return self->gum::MarginalTargetedInference<double>::H(nodeName);
   }
SWIGINTERN gum::Tensor< double > gum_ImportanceSampling_Sl_double_Sg__evidenceImpact__SWIG_0(gum::ImportanceSampling< double > *self,gum::NodeId target,gum::NodeSet const &evs){
    return self->gum::MarginalTargetedInference<double>::evidenceImpact(target,evs);
  }
SWIGINTERN gum::Tensor< double > gum_ImportanceSampling_Sl_double_Sg__evidenceImpact__SWIG_1(gum::ImportanceSampling< double > *self,std::string const &target,std::vector< std::string,std::allocator< std::string > > const &evs){
   return self->gum::MarginalTargetedInference<double>::evidenceImpact(target,evs);
  }
SWIGINTERN gum::IBayesNet< double > const &gum_ImportanceSampling_Sl_double_Sg__BN(gum::ImportanceSampling< double > const *self){ return self->gum::MarginalTargetedInference<double>::BN(); }
SWIGINTERN gum::Tensor< double > const &gum_ImportanceSampling_Sl_double_Sg__currentPosterior__SWIG_0(gum::ImportanceSampling< double > *self,gum::NodeId const id){return self->gum::SamplingInference<double>::currentPosterior(id);}
SWIGINTERN gum::Tensor< double > const &gum_ImportanceSampling_Sl_double_Sg__currentPosterior__SWIG_1(gum::ImportanceSampling< double > *self,std::string const &name){return self->gum::SamplingInference<double>::currentPosterior(name);}
SWIGINTERN void gum_ImportanceSampling_Sl_double_Sg__setEvidence(gum::ImportanceSampling< double > *self,PyObject *evidces){}
SWIGINTERN void gum_ImportanceSampling_Sl_double_Sg__updateEvidence(gum::ImportanceSampling< double > *self,PyObject *evidces){}
SWIGINTERN void gum_ImportanceSampling_Sl_double_Sg__setTargets(gum::ImportanceSampling< double > *self,PyObject *targets){}
SWIGINTERN PyObject *gum_ImportanceSampling_Sl_double_Sg__hardEvidenceNodes(gum::ImportanceSampling< double > *self){
      return PyAgrumHelper::PySetFromNodeSet(self->hardEvidenceNodes() ) ;
    }
SWIGINTERN PyObject *gum_ImportanceSampling_Sl_double_Sg__softEvidenceNodes(gum::ImportanceSampling< double > *self){
      return PyAgrumHelper::PySetFromNodeSet(self->softEvidenceNodes() ) ;
    }
SWIGINTERN PyObject *gum_ImportanceSampling_Sl_double_Sg__targets(gum::ImportanceSampling< double > *self){
      return PyAgrumHelper::PySetFromNodeSet(self->targets() );
    }
SWIGINTERN gum::Tensor< double > gum_ImportanceSampling_Sl_double_Sg__evidenceImpact__SWIG_2(gum::ImportanceSampling< double > *self,PyObject *target,PyObject *evs){
      gum::NodeId itarget=PyAgrumHelper::nodeIdFromNameOrIndex(target,self->BN().variableNodeMap());
      gum::NodeSet soe;
      PyAgrumHelper::populateNodeSetFromPySequenceOfIntOrString(soe,evs,self->BN().variableNodeMap());
      return self->evidenceImpact(itarget,soe);
    }
SWIGINTERN void gum_WeightedSampling_Sl_double_Sg__setVerbosity(gum::WeightedSampling< double > *self,bool v){ self->gum::ApproximationScheme::setVerbosity(v); }
SWIGINTERN void gum_WeightedSampling_Sl_double_Sg__setEpsilon(gum::WeightedSampling< double > *self,double eps){ self->gum::ApproximationScheme::setEpsilon(eps); }
SWIGINTERN void gum_WeightedSampling_Sl_double_Sg__setMinEpsilonRate(gum::WeightedSampling< double > *self,double rate){ self->gum::ApproximationScheme::setMinEpsilonRate(rate); }
SWIGINTERN void gum_WeightedSampling_Sl_double_Sg__setMaxIter(gum::WeightedSampling< double > *self,gum::Size max){ self->gum::ApproximationScheme::setMaxIter(max); }
SWIGINTERN void gum_WeightedSampling_Sl_double_Sg__setMaxTime(gum::WeightedSampling< double > *self,double timeout){ self->gum::ApproximationScheme::setMaxTime(timeout); }
SWIGINTERN void gum_WeightedSampling_Sl_double_Sg__setPeriodSize(gum::WeightedSampling< double > *self,gum::Size p){ self->gum::ApproximationScheme::setPeriodSize(p); }
SWIGINTERN bool gum_WeightedSampling_Sl_double_Sg__verbosity(gum::WeightedSampling< double > const *self){ return self->gum::ApproximationScheme::verbosity(); }
SWIGINTERN double gum_WeightedSampling_Sl_double_Sg__epsilon(gum::WeightedSampling< double > const *self){ return self->gum::ApproximationScheme::epsilon(); }
SWIGINTERN double gum_WeightedSampling_Sl_double_Sg__minEpsilonRate(gum::WeightedSampling< double > const *self){ return self->gum::ApproximationScheme::minEpsilonRate(); }
SWIGINTERN gum::Size gum_WeightedSampling_Sl_double_Sg__maxIter(gum::WeightedSampling< double > const *self){ return self->gum::ApproximationScheme::maxIter(); }
SWIGINTERN double gum_WeightedSampling_Sl_double_Sg__maxTime(gum::WeightedSampling< double > const *self){ return self->gum::ApproximationScheme::maxTime(); }
SWIGINTERN gum::Size gum_WeightedSampling_Sl_double_Sg__periodSize(gum::WeightedSampling< double > const *self){ return self->gum::ApproximationScheme::periodSize(); }
SWIGINTERN gum::Size gum_WeightedSampling_Sl_double_Sg__nbrIterations(gum::WeightedSampling< double > const *self){ return self->gum::ApproximationScheme::nbrIterations(); }
SWIGINTERN double gum_WeightedSampling_Sl_double_Sg__currentTime(gum::WeightedSampling< double > const *self){ return self->gum::ApproximationScheme::currentTime(); }
SWIGINTERN std::string gum_WeightedSampling_Sl_double_Sg__messageApproximationScheme(gum::WeightedSampling< double > const *self){ return self->gum::ApproximationScheme::messageApproximationScheme(); }
SWIGINTERN std::vector< double,std::allocator< double > > const &gum_WeightedSampling_Sl_double_Sg__history(gum::WeightedSampling< double > const *self){ return self->gum::ApproximationScheme::history(); }
SWIGINTERN gum::IApproximationSchemeConfiguration const &gum_WeightedSampling_Sl_double_Sg___asIApproximationSchemeConfiguration(gum::WeightedSampling< double > const *self){
    return *(dynamic_cast<const gum::IApproximationSchemeConfiguration *>(self));
  }
SWIGINTERN void gum_WeightedSampling_Sl_double_Sg__makeInference(gum::WeightedSampling< double > *self){
    self->gum::MarginalTargetedInference<double>::makeInference();
  }
SWIGINTERN gum::Tensor< double > const gum_WeightedSampling_Sl_double_Sg__posterior__SWIG_0(gum::WeightedSampling< double > *self,gum::NodeId const var){
    return self->gum::MarginalTargetedInference<double>::posterior(var);
  }
SWIGINTERN gum::Tensor< double > const gum_WeightedSampling_Sl_double_Sg__posterior__SWIG_1(gum::WeightedSampling< double > *self,std::string const &nodeName){
    return self->gum::MarginalTargetedInference<double>::posterior(nodeName);
  }
SWIGINTERN void gum_WeightedSampling_Sl_double_Sg__addEvidence__SWIG_0(gum::WeightedSampling< double > *self,gum::NodeId const id,gum::Idx const val){
    self->gum::MarginalTargetedInference<double>::addEvidence(id,val);
  }
SWIGINTERN void gum_WeightedSampling_Sl_double_Sg__addEvidence__SWIG_1(gum::WeightedSampling< double > *self,std::string const &nodeName,gum::Idx const val){
    self->gum::MarginalTargetedInference<double>::addEvidence(nodeName,val);
  }
SWIGINTERN void gum_WeightedSampling_Sl_double_Sg__addEvidence__SWIG_2(gum::WeightedSampling< double > *self,gum::NodeId const id,std::string const &val){
    self->gum::MarginalTargetedInference<double>::addEvidence(id,val);
  }
SWIGINTERN void gum_WeightedSampling_Sl_double_Sg__addEvidence__SWIG_3(gum::WeightedSampling< double > *self,std::string const &nodeName,std::string const &val){
    self->gum::MarginalTargetedInference<double>::addEvidence(nodeName,val);
  }
SWIGINTERN void gum_WeightedSampling_Sl_double_Sg__addEvidence__SWIG_4(gum::WeightedSampling< double > *self,gum::NodeId const id,std::vector< double,std::allocator< double > > const &vals){
   self->gum::MarginalTargetedInference<double>::addEvidence(id,vals);
  }
SWIGINTERN void gum_WeightedSampling_Sl_double_Sg__addEvidence__SWIG_5(gum::WeightedSampling< double > *self,std::string const &nodeName,std::vector< double,std::allocator< double > > const &vals){
    self->gum::MarginalTargetedInference<double>::addEvidence(nodeName,vals);
  }
SWIGINTERN void gum_WeightedSampling_Sl_double_Sg__addEvidence__SWIG_6(gum::WeightedSampling< double > *self,gum::Tensor< double > const &p){
    self->gum::MarginalTargetedInference<double>::addEvidence(p);
  }
SWIGINTERN void gum_WeightedSampling_Sl_double_Sg__chgEvidence__SWIG_0(gum::WeightedSampling< double > *self,gum::NodeId const id,gum::Idx const val){
    self->gum::MarginalTargetedInference<double>::chgEvidence(id,val);
  }
SWIGINTERN void gum_WeightedSampling_Sl_double_Sg__chgEvidence__SWIG_1(gum::WeightedSampling< double > *self,std::string const &nodeName,gum::Idx const val){
    self->gum::MarginalTargetedInference<double>::chgEvidence(nodeName,val);
  }
SWIGINTERN void gum_WeightedSampling_Sl_double_Sg__chgEvidence__SWIG_2(gum::WeightedSampling< double > *self,gum::NodeId const id,std::string const &val){
    self->gum::MarginalTargetedInference<double>::chgEvidence(id,val);
  }
SWIGINTERN void gum_WeightedSampling_Sl_double_Sg__chgEvidence__SWIG_3(gum::WeightedSampling< double > *self,std::string const &nodeName,std::string const &val){
    self->gum::MarginalTargetedInference<double>::chgEvidence(nodeName,val);
  }
SWIGINTERN void gum_WeightedSampling_Sl_double_Sg__chgEvidence__SWIG_4(gum::WeightedSampling< double > *self,gum::Tensor< double > const &p){
    self->gum::MarginalTargetedInference<double>::chgEvidence(p);
  }
SWIGINTERN void gum_WeightedSampling_Sl_double_Sg__chgEvidence__SWIG_5(gum::WeightedSampling< double > *self,gum::NodeId const id,std::vector< double,std::allocator< double > > const &vals){
   self->gum::MarginalTargetedInference<double>::chgEvidence(id,vals);
  }
SWIGINTERN void gum_WeightedSampling_Sl_double_Sg__chgEvidence__SWIG_6(gum::WeightedSampling< double > *self,std::string const &nodeName,std::vector< double,std::allocator< double > > const &vals){
    self->gum::MarginalTargetedInference<double>::chgEvidence(nodeName,vals);
  }
SWIGINTERN bool gum_WeightedSampling_Sl_double_Sg__hasEvidence__SWIG_0(gum::WeightedSampling< double > const *self,gum::NodeId const id){
    return self->gum::MarginalTargetedInference<double>::hasEvidence(id);
  }
SWIGINTERN bool gum_WeightedSampling_Sl_double_Sg__hasEvidence__SWIG_1(gum::WeightedSampling< double > const *self,std::string const &nodeName){
    return self->gum::MarginalTargetedInference<double>::hasEvidence(nodeName);
  }
SWIGINTERN void gum_WeightedSampling_Sl_double_Sg__eraseAllEvidence(gum::WeightedSampling< double > *self){
    self->gum::MarginalTargetedInference<double>::eraseAllEvidence();
  }
SWIGINTERN void gum_WeightedSampling_Sl_double_Sg__eraseEvidence__SWIG_0(gum::WeightedSampling< double > *self,gum::NodeId const id){
    self->gum::MarginalTargetedInference<double>::eraseEvidence(id);
  }
SWIGINTERN void gum_WeightedSampling_Sl_double_Sg__eraseEvidence__SWIG_1(gum::WeightedSampling< double > *self,std::string const &nodeName){
    self->gum::MarginalTargetedInference<double>::eraseEvidence(nodeName);
  }
SWIGINTERN bool gum_WeightedSampling_Sl_double_Sg__hasSoftEvidence__SWIG_0(gum::WeightedSampling< double > const *self,gum::NodeId const id){
    return self->gum::MarginalTargetedInference<double>::hasSoftEvidence(id);
  }
SWIGINTERN bool gum_WeightedSampling_Sl_double_Sg__hasHardEvidence(gum::WeightedSampling< double > const *self,std::string const &nodeName){
    return self->gum::MarginalTargetedInference<double>::hasHardEvidence(nodeName);
  }
SWIGINTERN bool gum_WeightedSampling_Sl_double_Sg__hasSoftEvidence__SWIG_1(gum::WeightedSampling< double > const *self,std::string const &nodeName){
    return self->gum::MarginalTargetedInference<double>::hasSoftEvidence(nodeName);
  }
SWIGINTERN gum::Size gum_WeightedSampling_Sl_double_Sg__nbrEvidence(gum::WeightedSampling< double > const *self){
    return self->gum::MarginalTargetedInference<double>::nbrEvidence();
  }
SWIGINTERN gum::Size gum_WeightedSampling_Sl_double_Sg__nbrHardEvidence(gum::WeightedSampling< double > const *self){
    return self->gum::MarginalTargetedInference<double>::nbrHardEvidence();
  }
SWIGINTERN gum::Size gum_WeightedSampling_Sl_double_Sg__nbrSoftEvidence(gum::WeightedSampling< double > const *self){
    return self->gum::MarginalTargetedInference<double>::nbrSoftEvidence();
  }
SWIGINTERN void gum_WeightedSampling_Sl_double_Sg__eraseAllTargets(gum::WeightedSampling< double > *self){
      self->gum::MarginalTargetedInference<double>::eraseAllTargets();
    }
SWIGINTERN void gum_WeightedSampling_Sl_double_Sg__addAllTargets(gum::WeightedSampling< double > *self){
      self->gum::MarginalTargetedInference<double>::addAllTargets();
    }
SWIGINTERN void gum_WeightedSampling_Sl_double_Sg__addTarget__SWIG_0(gum::WeightedSampling< double > *self,gum::NodeId const target){
      self->gum::MarginalTargetedInference<double>::addTarget(target);
    }
SWIGINTERN void gum_WeightedSampling_Sl_double_Sg__addTarget__SWIG_1(gum::WeightedSampling< double > *self,std::string const &nodeName){
      self->gum::MarginalTargetedInference<double>::addTarget(nodeName);
    }
SWIGINTERN void gum_WeightedSampling_Sl_double_Sg__eraseTarget__SWIG_0(gum::WeightedSampling< double > *self,gum::NodeId const target){
      self->gum::MarginalTargetedInference<double>::eraseTarget(target);
    }
SWIGINTERN void gum_WeightedSampling_Sl_double_Sg__eraseTarget__SWIG_1(gum::WeightedSampling< double > *self,std::string const &nodeName){
      self->gum::MarginalTargetedInference<double>::eraseTarget(nodeName);
    }
SWIGINTERN bool gum_WeightedSampling_Sl_double_Sg__isTarget__SWIG_0(gum::WeightedSampling< double > const *self,gum::NodeId const variable){
      return self->gum::MarginalTargetedInference<double>::isTarget(variable);
    }
SWIGINTERN bool gum_WeightedSampling_Sl_double_Sg__isTarget__SWIG_1(gum::WeightedSampling< double > const *self,std::string const &nodeName){
      return self->gum::MarginalTargetedInference<double>::isTarget(nodeName);
    }
SWIGINTERN gum::Size gum_WeightedSampling_Sl_double_Sg__nbrTargets(gum::WeightedSampling< double > const *self){
      return self->gum::MarginalTargetedInference<double>::nbrTargets();
    }
SWIGINTERN double gum_WeightedSampling_Sl_double_Sg__H__SWIG_0(gum::WeightedSampling< double > *self,gum::NodeId const X){
     return self->gum::MarginalTargetedInference<double>::H(X);
   }
SWIGINTERN double gum_WeightedSampling_Sl_double_Sg__H__SWIG_1(gum::WeightedSampling< double > *self,std::string const &nodeName){
     return self->gum::MarginalTargetedInference<double>::H(nodeName);
   }
SWIGINTERN gum::Tensor< double > gum_WeightedSampling_Sl_double_Sg__evidenceImpact__SWIG_0(gum::WeightedSampling< double > *self,gum::NodeId target,gum::NodeSet const &evs){
    return self->gum::MarginalTargetedInference<double>::evidenceImpact(target,evs);
  }
SWIGINTERN gum::Tensor< double > gum_WeightedSampling_Sl_double_Sg__evidenceImpact__SWIG_1(gum::WeightedSampling< double > *self,std::string const &target,std::vector< std::string,std::allocator< std::string > > const &evs){
   return self->gum::MarginalTargetedInference<double>::evidenceImpact(target,evs);
  }
SWIGINTERN gum::IBayesNet< double > const &gum_WeightedSampling_Sl_double_Sg__BN(gum::WeightedSampling< double > const *self){ return self->gum::MarginalTargetedInference<double>::BN(); }
SWIGINTERN gum::Tensor< double > const &gum_WeightedSampling_Sl_double_Sg__currentPosterior__SWIG_0(gum::WeightedSampling< double > *self,gum::NodeId const id){return self->gum::SamplingInference<double>::currentPosterior(id);}
SWIGINTERN gum::Tensor< double > const &gum_WeightedSampling_Sl_double_Sg__currentPosterior__SWIG_1(gum::WeightedSampling< double > *self,std::string const &name){return self->gum::SamplingInference<double>::currentPosterior(name);}
SWIGINTERN void gum_WeightedSampling_Sl_double_Sg__setEvidence(gum::WeightedSampling< double > *self,PyObject *evidces){}
SWIGINTERN void gum_WeightedSampling_Sl_double_Sg__updateEvidence(gum::WeightedSampling< double > *self,PyObject *evidces){}
SWIGINTERN void gum_WeightedSampling_Sl_double_Sg__setTargets(gum::WeightedSampling< double > *self,PyObject *targets){}
SWIGINTERN PyObject *gum_WeightedSampling_Sl_double_Sg__hardEvidenceNodes(gum::WeightedSampling< double > *self){
      return PyAgrumHelper::PySetFromNodeSet(self->hardEvidenceNodes() ) ;
    }
SWIGINTERN PyObject *gum_WeightedSampling_Sl_double_Sg__softEvidenceNodes(gum::WeightedSampling< double > *self){
      return PyAgrumHelper::PySetFromNodeSet(self->softEvidenceNodes() ) ;
    }
SWIGINTERN PyObject *gum_WeightedSampling_Sl_double_Sg__targets(gum::WeightedSampling< double > *self){
      return PyAgrumHelper::PySetFromNodeSet(self->targets() );
    }
SWIGINTERN gum::Tensor< double > gum_WeightedSampling_Sl_double_Sg__evidenceImpact__SWIG_2(gum::WeightedSampling< double > *self,PyObject *target,PyObject *evs){
      gum::NodeId itarget=PyAgrumHelper::nodeIdFromNameOrIndex(target,self->BN().variableNodeMap());
      gum::NodeSet soe;
      PyAgrumHelper::populateNodeSetFromPySequenceOfIntOrString(soe,evs,self->BN().variableNodeMap());
      return self->evidenceImpact(itarget,soe);
    }
SWIGINTERN void gum_MonteCarloSampling_Sl_double_Sg__setVerbosity(gum::MonteCarloSampling< double > *self,bool v){ self->gum::ApproximationScheme::setVerbosity(v); }
SWIGINTERN void gum_MonteCarloSampling_Sl_double_Sg__setEpsilon(gum::MonteCarloSampling< double > *self,double eps){ self->gum::ApproximationScheme::setEpsilon(eps); }
SWIGINTERN void gum_MonteCarloSampling_Sl_double_Sg__setMinEpsilonRate(gum::MonteCarloSampling< double > *self,double rate){ self->gum::ApproximationScheme::setMinEpsilonRate(rate); }
SWIGINTERN void gum_MonteCarloSampling_Sl_double_Sg__setMaxIter(gum::MonteCarloSampling< double > *self,gum::Size max){ self->gum::ApproximationScheme::setMaxIter(max); }
SWIGINTERN void gum_MonteCarloSampling_Sl_double_Sg__setMaxTime(gum::MonteCarloSampling< double > *self,double timeout){ self->gum::ApproximationScheme::setMaxTime(timeout); }
SWIGINTERN void gum_MonteCarloSampling_Sl_double_Sg__setPeriodSize(gum::MonteCarloSampling< double > *self,gum::Size p){ self->gum::ApproximationScheme::setPeriodSize(p); }
SWIGINTERN bool gum_MonteCarloSampling_Sl_double_Sg__verbosity(gum::MonteCarloSampling< double > const *self){ return self->gum::ApproximationScheme::verbosity(); }
SWIGINTERN double gum_MonteCarloSampling_Sl_double_Sg__epsilon(gum::MonteCarloSampling< double > const *self){ return self->gum::ApproximationScheme::epsilon(); }
SWIGINTERN double gum_MonteCarloSampling_Sl_double_Sg__minEpsilonRate(gum::MonteCarloSampling< double > const *self){ return self->gum::ApproximationScheme::minEpsilonRate(); }
SWIGINTERN gum::Size gum_MonteCarloSampling_Sl_double_Sg__maxIter(gum::MonteCarloSampling< double > const *self){ return self->gum::ApproximationScheme::maxIter(); }
SWIGINTERN double gum_MonteCarloSampling_Sl_double_Sg__maxTime(gum::MonteCarloSampling< double > const *self){ return self->gum::ApproximationScheme::maxTime(); }
SWIGINTERN gum::Size gum_MonteCarloSampling_Sl_double_Sg__periodSize(gum::MonteCarloSampling< double > const *self){ return self->gum::ApproximationScheme::periodSize(); }
SWIGINTERN gum::Size gum_MonteCarloSampling_Sl_double_Sg__nbrIterations(gum::MonteCarloSampling< double > const *self){ return self->gum::ApproximationScheme::nbrIterations(); }
SWIGINTERN double gum_MonteCarloSampling_Sl_double_Sg__currentTime(gum::MonteCarloSampling< double > const *self){ return self->gum::ApproximationScheme::currentTime(); }
SWIGINTERN std::string gum_MonteCarloSampling_Sl_double_Sg__messageApproximationScheme(gum::MonteCarloSampling< double > const *self){ return self->gum::ApproximationScheme::messageApproximationScheme(); }
SWIGINTERN std::vector< double,std::allocator< double > > const &gum_MonteCarloSampling_Sl_double_Sg__history(gum::MonteCarloSampling< double > const *self){ return self->gum::ApproximationScheme::history(); }
SWIGINTERN gum::IApproximationSchemeConfiguration const &gum_MonteCarloSampling_Sl_double_Sg___asIApproximationSchemeConfiguration(gum::MonteCarloSampling< double > const *self){
    return *(dynamic_cast<const gum::IApproximationSchemeConfiguration *>(self));
  }
SWIGINTERN void gum_MonteCarloSampling_Sl_double_Sg__makeInference(gum::MonteCarloSampling< double > *self){
    self->gum::MarginalTargetedInference<double>::makeInference();
  }
SWIGINTERN gum::Tensor< double > const gum_MonteCarloSampling_Sl_double_Sg__posterior__SWIG_0(gum::MonteCarloSampling< double > *self,gum::NodeId const var){
    return self->gum::MarginalTargetedInference<double>::posterior(var);
  }
SWIGINTERN gum::Tensor< double > const gum_MonteCarloSampling_Sl_double_Sg__posterior__SWIG_1(gum::MonteCarloSampling< double > *self,std::string const &nodeName){
    return self->gum::MarginalTargetedInference<double>::posterior(nodeName);
  }
SWIGINTERN void gum_MonteCarloSampling_Sl_double_Sg__addEvidence__SWIG_0(gum::MonteCarloSampling< double > *self,gum::NodeId const id,gum::Idx const val){
    self->gum::MarginalTargetedInference<double>::addEvidence(id,val);
  }
SWIGINTERN void gum_MonteCarloSampling_Sl_double_Sg__addEvidence__SWIG_1(gum::MonteCarloSampling< double > *self,std::string const &nodeName,gum::Idx const val){
    self->gum::MarginalTargetedInference<double>::addEvidence(nodeName,val);
  }
SWIGINTERN void gum_MonteCarloSampling_Sl_double_Sg__addEvidence__SWIG_2(gum::MonteCarloSampling< double > *self,gum::NodeId const id,std::string const &val){
    self->gum::MarginalTargetedInference<double>::addEvidence(id,val);
  }
SWIGINTERN void gum_MonteCarloSampling_Sl_double_Sg__addEvidence__SWIG_3(gum::MonteCarloSampling< double > *self,std::string const &nodeName,std::string const &val){
    self->gum::MarginalTargetedInference<double>::addEvidence(nodeName,val);
  }
SWIGINTERN void gum_MonteCarloSampling_Sl_double_Sg__addEvidence__SWIG_4(gum::MonteCarloSampling< double > *self,gum::NodeId const id,std::vector< double,std::allocator< double > > const &vals){
   self->gum::MarginalTargetedInference<double>::addEvidence(id,vals);
  }
SWIGINTERN void gum_MonteCarloSampling_Sl_double_Sg__addEvidence__SWIG_5(gum::MonteCarloSampling< double > *self,std::string const &nodeName,std::vector< double,std::allocator< double > > const &vals){
    self->gum::MarginalTargetedInference<double>::addEvidence(nodeName,vals);
  }
SWIGINTERN void gum_MonteCarloSampling_Sl_double_Sg__addEvidence__SWIG_6(gum::MonteCarloSampling< double > *self,gum::Tensor< double > const &p){
    self->gum::MarginalTargetedInference<double>::addEvidence(p);
  }
SWIGINTERN void gum_MonteCarloSampling_Sl_double_Sg__chgEvidence__SWIG_0(gum::MonteCarloSampling< double > *self,gum::NodeId const id,gum::Idx const val){
    self->gum::MarginalTargetedInference<double>::chgEvidence(id,val);
  }
SWIGINTERN void gum_MonteCarloSampling_Sl_double_Sg__chgEvidence__SWIG_1(gum::MonteCarloSampling< double > *self,std::string const &nodeName,gum::Idx const val){
    self->gum::MarginalTargetedInference<double>::chgEvidence(nodeName,val);
  }
SWIGINTERN void gum_MonteCarloSampling_Sl_double_Sg__chgEvidence__SWIG_2(gum::MonteCarloSampling< double > *self,gum::NodeId const id,std::string const &val){
    self->gum::MarginalTargetedInference<double>::chgEvidence(id,val);
  }
SWIGINTERN void gum_MonteCarloSampling_Sl_double_Sg__chgEvidence__SWIG_3(gum::MonteCarloSampling< double > *self,std::string const &nodeName,std::string const &val){
    self->gum::MarginalTargetedInference<double>::chgEvidence(nodeName,val);
  }
SWIGINTERN void gum_MonteCarloSampling_Sl_double_Sg__chgEvidence__SWIG_4(gum::MonteCarloSampling< double > *self,gum::Tensor< double > const &p){
    self->gum::MarginalTargetedInference<double>::chgEvidence(p);
  }
SWIGINTERN void gum_MonteCarloSampling_Sl_double_Sg__chgEvidence__SWIG_5(gum::MonteCarloSampling< double > *self,gum::NodeId const id,std::vector< double,std::allocator< double > > const &vals){
   self->gum::MarginalTargetedInference<double>::chgEvidence(id,vals);
  }
SWIGINTERN void gum_MonteCarloSampling_Sl_double_Sg__chgEvidence__SWIG_6(gum::MonteCarloSampling< double > *self,std::string const &nodeName,std::vector< double,std::allocator< double > > const &vals){
    self->gum::MarginalTargetedInference<double>::chgEvidence(nodeName,vals);
  }
SWIGINTERN bool gum_MonteCarloSampling_Sl_double_Sg__hasEvidence__SWIG_0(gum::MonteCarloSampling< double > const *self,gum::NodeId const id){
    return self->gum::MarginalTargetedInference<double>::hasEvidence(id);
  }
SWIGINTERN bool gum_MonteCarloSampling_Sl_double_Sg__hasEvidence__SWIG_1(gum::MonteCarloSampling< double > const *self,std::string const &nodeName){
    return self->gum::MarginalTargetedInference<double>::hasEvidence(nodeName);
  }
SWIGINTERN void gum_MonteCarloSampling_Sl_double_Sg__eraseAllEvidence(gum::MonteCarloSampling< double > *self){
    self->gum::MarginalTargetedInference<double>::eraseAllEvidence();
  }
SWIGINTERN void gum_MonteCarloSampling_Sl_double_Sg__eraseEvidence__SWIG_0(gum::MonteCarloSampling< double > *self,gum::NodeId const id){
    self->gum::MarginalTargetedInference<double>::eraseEvidence(id);
  }
SWIGINTERN void gum_MonteCarloSampling_Sl_double_Sg__eraseEvidence__SWIG_1(gum::MonteCarloSampling< double > *self,std::string const &nodeName){
    self->gum::MarginalTargetedInference<double>::eraseEvidence(nodeName);
  }
SWIGINTERN bool gum_MonteCarloSampling_Sl_double_Sg__hasSoftEvidence__SWIG_0(gum::MonteCarloSampling< double > const *self,gum::NodeId const id){
    return self->gum::MarginalTargetedInference<double>::hasSoftEvidence(id);
  }
SWIGINTERN bool gum_MonteCarloSampling_Sl_double_Sg__hasHardEvidence(gum::MonteCarloSampling< double > const *self,std::string const &nodeName){
    return self->gum::MarginalTargetedInference<double>::hasHardEvidence(nodeName);
  }
SWIGINTERN bool gum_MonteCarloSampling_Sl_double_Sg__hasSoftEvidence__SWIG_1(gum::MonteCarloSampling< double > const *self,std::string const &nodeName){
    return self->gum::MarginalTargetedInference<double>::hasSoftEvidence(nodeName);
  }
SWIGINTERN gum::Size gum_MonteCarloSampling_Sl_double_Sg__nbrEvidence(gum::MonteCarloSampling< double > const *self){
    return self->gum::MarginalTargetedInference<double>::nbrEvidence();
  }
SWIGINTERN gum::Size gum_MonteCarloSampling_Sl_double_Sg__nbrHardEvidence(gum::MonteCarloSampling< double > const *self){
    return self->gum::MarginalTargetedInference<double>::nbrHardEvidence();
  }
SWIGINTERN gum::Size gum_MonteCarloSampling_Sl_double_Sg__nbrSoftEvidence(gum::MonteCarloSampling< double > const *self){
    return self->gum::MarginalTargetedInference<double>::nbrSoftEvidence();
  }
SWIGINTERN void gum_MonteCarloSampling_Sl_double_Sg__eraseAllTargets(gum::MonteCarloSampling< double > *self){
      self->gum::MarginalTargetedInference<double>::eraseAllTargets();
    }
SWIGINTERN void gum_MonteCarloSampling_Sl_double_Sg__addAllTargets(gum::MonteCarloSampling< double > *self){
      self->gum::MarginalTargetedInference<double>::addAllTargets();
    }
SWIGINTERN void gum_MonteCarloSampling_Sl_double_Sg__addTarget__SWIG_0(gum::MonteCarloSampling< double > *self,gum::NodeId const target){
      self->gum::MarginalTargetedInference<double>::addTarget(target);
    }
SWIGINTERN void gum_MonteCarloSampling_Sl_double_Sg__addTarget__SWIG_1(gum::MonteCarloSampling< double > *self,std::string const &nodeName){
      self->gum::MarginalTargetedInference<double>::addTarget(nodeName);
    }
SWIGINTERN void gum_MonteCarloSampling_Sl_double_Sg__eraseTarget__SWIG_0(gum::MonteCarloSampling< double > *self,gum::NodeId const target){
      self->gum::MarginalTargetedInference<double>::eraseTarget(target);
    }
SWIGINTERN void gum_MonteCarloSampling_Sl_double_Sg__eraseTarget__SWIG_1(gum::MonteCarloSampling< double > *self,std::string const &nodeName){
      self->gum::MarginalTargetedInference<double>::eraseTarget(nodeName);
    }
SWIGINTERN bool gum_MonteCarloSampling_Sl_double_Sg__isTarget__SWIG_0(gum::MonteCarloSampling< double > const *self,gum::NodeId const variable){
      return self->gum::MarginalTargetedInference<double>::isTarget(variable);
    }
SWIGINTERN bool gum_MonteCarloSampling_Sl_double_Sg__isTarget__SWIG_1(gum::MonteCarloSampling< double > const *self,std::string const &nodeName){
      return self->gum::MarginalTargetedInference<double>::isTarget(nodeName);
    }
SWIGINTERN gum::Size gum_MonteCarloSampling_Sl_double_Sg__nbrTargets(gum::MonteCarloSampling< double > const *self){
      return self->gum::MarginalTargetedInference<double>::nbrTargets();
    }
SWIGINTERN double gum_MonteCarloSampling_Sl_double_Sg__H__SWIG_0(gum::MonteCarloSampling< double > *self,gum::NodeId const X){
     return self->gum::MarginalTargetedInference<double>::H(X);
   }
SWIGINTERN double gum_MonteCarloSampling_Sl_double_Sg__H__SWIG_1(gum::MonteCarloSampling< double > *self,std::string const &nodeName){
     return self->gum::MarginalTargetedInference<double>::H(nodeName);
   }
SWIGINTERN gum::Tensor< double > gum_MonteCarloSampling_Sl_double_Sg__evidenceImpact__SWIG_0(gum::MonteCarloSampling< double > *self,gum::NodeId target,gum::NodeSet const &evs){
    return self->gum::MarginalTargetedInference<double>::evidenceImpact(target,evs);
  }
SWIGINTERN gum::Tensor< double > gum_MonteCarloSampling_Sl_double_Sg__evidenceImpact__SWIG_1(gum::MonteCarloSampling< double > *self,std::string const &target,std::vector< std::string,std::allocator< std::string > > const &evs){
   return self->gum::MarginalTargetedInference<double>::evidenceImpact(target,evs);
  }
SWIGINTERN gum::IBayesNet< double > const &gum_MonteCarloSampling_Sl_double_Sg__BN(gum::MonteCarloSampling< double > const *self){ return self->gum::MarginalTargetedInference<double>::BN(); }
SWIGINTERN gum::Tensor< double > const &gum_MonteCarloSampling_Sl_double_Sg__currentPosterior__SWIG_0(gum::MonteCarloSampling< double > *self,gum::NodeId const id){return self->gum::SamplingInference<double>::currentPosterior(id);}
SWIGINTERN gum::Tensor< double > const &gum_MonteCarloSampling_Sl_double_Sg__currentPosterior__SWIG_1(gum::MonteCarloSampling< double > *self,std::string const &name){return self->gum::SamplingInference<double>::currentPosterior(name);}
SWIGINTERN void gum_MonteCarloSampling_Sl_double_Sg__setEvidence(gum::MonteCarloSampling< double > *self,PyObject *evidces){}
SWIGINTERN void gum_MonteCarloSampling_Sl_double_Sg__updateEvidence(gum::MonteCarloSampling< double > *self,PyObject *evidces){}
SWIGINTERN void gum_MonteCarloSampling_Sl_double_Sg__setTargets(gum::MonteCarloSampling< double > *self,PyObject *targets){}
SWIGINTERN PyObject *gum_MonteCarloSampling_Sl_double_Sg__hardEvidenceNodes(gum::MonteCarloSampling< double > *self){
      return PyAgrumHelper::PySetFromNodeSet(self->hardEvidenceNodes() ) ;
    }
SWIGINTERN PyObject *gum_MonteCarloSampling_Sl_double_Sg__softEvidenceNodes(gum::MonteCarloSampling< double > *self){
      return PyAgrumHelper::PySetFromNodeSet(self->softEvidenceNodes() ) ;
    }
SWIGINTERN PyObject *gum_MonteCarloSampling_Sl_double_Sg__targets(gum::MonteCarloSampling< double > *self){
      return PyAgrumHelper::PySetFromNodeSet(self->targets() );
    }
SWIGINTERN gum::Tensor< double > gum_MonteCarloSampling_Sl_double_Sg__evidenceImpact__SWIG_2(gum::MonteCarloSampling< double > *self,PyObject *target,PyObject *evs){
      gum::NodeId itarget=PyAgrumHelper::nodeIdFromNameOrIndex(target,self->BN().variableNodeMap());
      gum::NodeSet soe;
      PyAgrumHelper::populateNodeSetFromPySequenceOfIntOrString(soe,evs,self->BN().variableNodeMap());
      return self->evidenceImpact(itarget,soe);
    }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__setVerbosity(gum::LoopySamplingInference< double,gum::ImportanceSampling > *self,bool v){ self->gum::ApproximationScheme::setVerbosity(v); }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__setEpsilon(gum::LoopySamplingInference< double,gum::ImportanceSampling > *self,double eps){ self->gum::ApproximationScheme::setEpsilon(eps); }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__setMinEpsilonRate(gum::LoopySamplingInference< double,gum::ImportanceSampling > *self,double rate){ self->gum::ApproximationScheme::setMinEpsilonRate(rate); }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__setMaxIter(gum::LoopySamplingInference< double,gum::ImportanceSampling > *self,gum::Size max){ self->gum::ApproximationScheme::setMaxIter(max); }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__setMaxTime(gum::LoopySamplingInference< double,gum::ImportanceSampling > *self,double timeout){ self->gum::ApproximationScheme::setMaxTime(timeout); }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__setPeriodSize(gum::LoopySamplingInference< double,gum::ImportanceSampling > *self,gum::Size p){ self->gum::ApproximationScheme::setPeriodSize(p); }
SWIGINTERN bool gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__verbosity(gum::LoopySamplingInference< double,gum::ImportanceSampling > const *self){ return self->gum::ApproximationScheme::verbosity(); }
SWIGINTERN double gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__epsilon(gum::LoopySamplingInference< double,gum::ImportanceSampling > const *self){ return self->gum::ApproximationScheme::epsilon(); }
SWIGINTERN double gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__minEpsilonRate(gum::LoopySamplingInference< double,gum::ImportanceSampling > const *self){ return self->gum::ApproximationScheme::minEpsilonRate(); }
SWIGINTERN gum::Size gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__maxIter(gum::LoopySamplingInference< double,gum::ImportanceSampling > const *self){ return self->gum::ApproximationScheme::maxIter(); }
SWIGINTERN double gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__maxTime(gum::LoopySamplingInference< double,gum::ImportanceSampling > const *self){ return self->gum::ApproximationScheme::maxTime(); }
SWIGINTERN gum::Size gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__periodSize(gum::LoopySamplingInference< double,gum::ImportanceSampling > const *self){ return self->gum::ApproximationScheme::periodSize(); }
SWIGINTERN gum::Size gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__nbrIterations(gum::LoopySamplingInference< double,gum::ImportanceSampling > const *self){ return self->gum::ApproximationScheme::nbrIterations(); }
SWIGINTERN double gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__currentTime(gum::LoopySamplingInference< double,gum::ImportanceSampling > const *self){ return self->gum::ApproximationScheme::currentTime(); }
SWIGINTERN std::string gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__messageApproximationScheme(gum::LoopySamplingInference< double,gum::ImportanceSampling > const *self){ return self->gum::ApproximationScheme::messageApproximationScheme(); }
SWIGINTERN std::vector< double,std::allocator< double > > const &gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__history(gum::LoopySamplingInference< double,gum::ImportanceSampling > const *self){ return self->gum::ApproximationScheme::history(); }
SWIGINTERN gum::IApproximationSchemeConfiguration const &gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg___asIApproximationSchemeConfiguration(gum::LoopySamplingInference< double,gum::ImportanceSampling > const *self){
    return *(dynamic_cast<const gum::IApproximationSchemeConfiguration *>(self));
  }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__makeInference(gum::LoopySamplingInference< double,gum::ImportanceSampling > *self){
    self->gum::MarginalTargetedInference<double>::makeInference();
  }
SWIGINTERN gum::Tensor< double > const gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__posterior__SWIG_0(gum::LoopySamplingInference< double,gum::ImportanceSampling > *self,gum::NodeId const var){
    return self->gum::MarginalTargetedInference<double>::posterior(var);
  }
SWIGINTERN gum::Tensor< double > const gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__posterior__SWIG_1(gum::LoopySamplingInference< double,gum::ImportanceSampling > *self,std::string const &nodeName){
    return self->gum::MarginalTargetedInference<double>::posterior(nodeName);
  }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__addEvidence__SWIG_0(gum::LoopySamplingInference< double,gum::ImportanceSampling > *self,gum::NodeId const id,gum::Idx const val){
    self->gum::MarginalTargetedInference<double>::addEvidence(id,val);
  }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__addEvidence__SWIG_1(gum::LoopySamplingInference< double,gum::ImportanceSampling > *self,std::string const &nodeName,gum::Idx const val){
    self->gum::MarginalTargetedInference<double>::addEvidence(nodeName,val);
  }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__addEvidence__SWIG_2(gum::LoopySamplingInference< double,gum::ImportanceSampling > *self,gum::NodeId const id,std::string const &val){
    self->gum::MarginalTargetedInference<double>::addEvidence(id,val);
  }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__addEvidence__SWIG_3(gum::LoopySamplingInference< double,gum::ImportanceSampling > *self,std::string const &nodeName,std::string const &val){
    self->gum::MarginalTargetedInference<double>::addEvidence(nodeName,val);
  }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__addEvidence__SWIG_4(gum::LoopySamplingInference< double,gum::ImportanceSampling > *self,gum::NodeId const id,std::vector< double,std::allocator< double > > const &vals){
   self->gum::MarginalTargetedInference<double>::addEvidence(id,vals);
  }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__addEvidence__SWIG_5(gum::LoopySamplingInference< double,gum::ImportanceSampling > *self,std::string const &nodeName,std::vector< double,std::allocator< double > > const &vals){
    self->gum::MarginalTargetedInference<double>::addEvidence(nodeName,vals);
  }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__addEvidence__SWIG_6(gum::LoopySamplingInference< double,gum::ImportanceSampling > *self,gum::Tensor< double > const &p){
    self->gum::MarginalTargetedInference<double>::addEvidence(p);
  }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__chgEvidence__SWIG_0(gum::LoopySamplingInference< double,gum::ImportanceSampling > *self,gum::NodeId const id,gum::Idx const val){
    self->gum::MarginalTargetedInference<double>::chgEvidence(id,val);
  }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__chgEvidence__SWIG_1(gum::LoopySamplingInference< double,gum::ImportanceSampling > *self,std::string const &nodeName,gum::Idx const val){
    self->gum::MarginalTargetedInference<double>::chgEvidence(nodeName,val);
  }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__chgEvidence__SWIG_2(gum::LoopySamplingInference< double,gum::ImportanceSampling > *self,gum::NodeId const id,std::string const &val){
    self->gum::MarginalTargetedInference<double>::chgEvidence(id,val);
  }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__chgEvidence__SWIG_3(gum::LoopySamplingInference< double,gum::ImportanceSampling > *self,std::string const &nodeName,std::string const &val){
    self->gum::MarginalTargetedInference<double>::chgEvidence(nodeName,val);
  }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__chgEvidence__SWIG_4(gum::LoopySamplingInference< double,gum::ImportanceSampling > *self,gum::Tensor< double > const &p){
    self->gum::MarginalTargetedInference<double>::chgEvidence(p);
  }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__chgEvidence__SWIG_5(gum::LoopySamplingInference< double,gum::ImportanceSampling > *self,gum::NodeId const id,std::vector< double,std::allocator< double > > const &vals){
   self->gum::MarginalTargetedInference<double>::chgEvidence(id,vals);
  }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__chgEvidence__SWIG_6(gum::LoopySamplingInference< double,gum::ImportanceSampling > *self,std::string const &nodeName,std::vector< double,std::allocator< double > > const &vals){
    self->gum::MarginalTargetedInference<double>::chgEvidence(nodeName,vals);
  }
SWIGINTERN bool gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__hasEvidence__SWIG_0(gum::LoopySamplingInference< double,gum::ImportanceSampling > const *self,gum::NodeId const id){
    return self->gum::MarginalTargetedInference<double>::hasEvidence(id);
  }
SWIGINTERN bool gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__hasEvidence__SWIG_1(gum::LoopySamplingInference< double,gum::ImportanceSampling > const *self,std::string const &nodeName){
    return self->gum::MarginalTargetedInference<double>::hasEvidence(nodeName);
  }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__eraseAllEvidence(gum::LoopySamplingInference< double,gum::ImportanceSampling > *self){
    self->gum::MarginalTargetedInference<double>::eraseAllEvidence();
  }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__eraseEvidence__SWIG_0(gum::LoopySamplingInference< double,gum::ImportanceSampling > *self,gum::NodeId const id){
    self->gum::MarginalTargetedInference<double>::eraseEvidence(id);
  }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__eraseEvidence__SWIG_1(gum::LoopySamplingInference< double,gum::ImportanceSampling > *self,std::string const &nodeName){
    self->gum::MarginalTargetedInference<double>::eraseEvidence(nodeName);
  }
SWIGINTERN bool gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__hasSoftEvidence__SWIG_0(gum::LoopySamplingInference< double,gum::ImportanceSampling > const *self,gum::NodeId const id){
    return self->gum::MarginalTargetedInference<double>::hasSoftEvidence(id);
  }
SWIGINTERN bool gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__hasHardEvidence(gum::LoopySamplingInference< double,gum::ImportanceSampling > const *self,std::string const &nodeName){
    return self->gum::MarginalTargetedInference<double>::hasHardEvidence(nodeName);
  }
SWIGINTERN bool gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__hasSoftEvidence__SWIG_1(gum::LoopySamplingInference< double,gum::ImportanceSampling > const *self,std::string const &nodeName){
    return self->gum::MarginalTargetedInference<double>::hasSoftEvidence(nodeName);
  }
SWIGINTERN gum::Size gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__nbrEvidence(gum::LoopySamplingInference< double,gum::ImportanceSampling > const *self){
    return self->gum::MarginalTargetedInference<double>::nbrEvidence();
  }
SWIGINTERN gum::Size gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__nbrHardEvidence(gum::LoopySamplingInference< double,gum::ImportanceSampling > const *self){
    return self->gum::MarginalTargetedInference<double>::nbrHardEvidence();
  }
SWIGINTERN gum::Size gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__nbrSoftEvidence(gum::LoopySamplingInference< double,gum::ImportanceSampling > const *self){
    return self->gum::MarginalTargetedInference<double>::nbrSoftEvidence();
  }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__eraseAllTargets(gum::LoopySamplingInference< double,gum::ImportanceSampling > *self){
      self->gum::MarginalTargetedInference<double>::eraseAllTargets();
    }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__addAllTargets(gum::LoopySamplingInference< double,gum::ImportanceSampling > *self){
      self->gum::MarginalTargetedInference<double>::addAllTargets();
    }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__addTarget__SWIG_0(gum::LoopySamplingInference< double,gum::ImportanceSampling > *self,gum::NodeId const target){
      self->gum::MarginalTargetedInference<double>::addTarget(target);
    }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__addTarget__SWIG_1(gum::LoopySamplingInference< double,gum::ImportanceSampling > *self,std::string const &nodeName){
      self->gum::MarginalTargetedInference<double>::addTarget(nodeName);
    }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__eraseTarget__SWIG_0(gum::LoopySamplingInference< double,gum::ImportanceSampling > *self,gum::NodeId const target){
      self->gum::MarginalTargetedInference<double>::eraseTarget(target);
    }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__eraseTarget__SWIG_1(gum::LoopySamplingInference< double,gum::ImportanceSampling > *self,std::string const &nodeName){
      self->gum::MarginalTargetedInference<double>::eraseTarget(nodeName);
    }
SWIGINTERN bool gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__isTarget__SWIG_0(gum::LoopySamplingInference< double,gum::ImportanceSampling > const *self,gum::NodeId const variable){
      return self->gum::MarginalTargetedInference<double>::isTarget(variable);
    }
SWIGINTERN bool gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__isTarget__SWIG_1(gum::LoopySamplingInference< double,gum::ImportanceSampling > const *self,std::string const &nodeName){
      return self->gum::MarginalTargetedInference<double>::isTarget(nodeName);
    }
SWIGINTERN gum::Size gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__nbrTargets(gum::LoopySamplingInference< double,gum::ImportanceSampling > const *self){
      return self->gum::MarginalTargetedInference<double>::nbrTargets();
    }
SWIGINTERN double gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__H__SWIG_0(gum::LoopySamplingInference< double,gum::ImportanceSampling > *self,gum::NodeId const X){
     return self->gum::MarginalTargetedInference<double>::H(X);
   }
SWIGINTERN double gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__H__SWIG_1(gum::LoopySamplingInference< double,gum::ImportanceSampling > *self,std::string const &nodeName){
     return self->gum::MarginalTargetedInference<double>::H(nodeName);
   }
SWIGINTERN gum::Tensor< double > gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__evidenceImpact__SWIG_0(gum::LoopySamplingInference< double,gum::ImportanceSampling > *self,gum::NodeId target,gum::NodeSet const &evs){
    return self->gum::MarginalTargetedInference<double>::evidenceImpact(target,evs);
  }
SWIGINTERN gum::Tensor< double > gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__evidenceImpact__SWIG_1(gum::LoopySamplingInference< double,gum::ImportanceSampling > *self,std::string const &target,std::vector< std::string,std::allocator< std::string > > const &evs){
   return self->gum::MarginalTargetedInference<double>::evidenceImpact(target,evs);
  }
SWIGINTERN gum::IBayesNet< double > const &gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__BN(gum::LoopySamplingInference< double,gum::ImportanceSampling > const *self){ return self->gum::MarginalTargetedInference<double>::BN(); }
SWIGINTERN gum::Tensor< double > const &gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__currentPosterior__SWIG_0(gum::LoopySamplingInference< double,gum::ImportanceSampling > *self,gum::NodeId const id){return self->gum::SamplingInference<double>::currentPosterior(id);}
SWIGINTERN gum::Tensor< double > const &gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__currentPosterior__SWIG_1(gum::LoopySamplingInference< double,gum::ImportanceSampling > *self,std::string const &name){return self->gum::SamplingInference<double>::currentPosterior(name);}
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__setEvidence(gum::LoopySamplingInference< double,gum::ImportanceSampling > *self,PyObject *evidces){}
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__updateEvidence(gum::LoopySamplingInference< double,gum::ImportanceSampling > *self,PyObject *evidces){}
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__setTargets(gum::LoopySamplingInference< double,gum::ImportanceSampling > *self,PyObject *targets){}
SWIGINTERN PyObject *gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__hardEvidenceNodes(gum::LoopySamplingInference< double,gum::ImportanceSampling > *self){
      return PyAgrumHelper::PySetFromNodeSet(self->hardEvidenceNodes() ) ;
    }
SWIGINTERN PyObject *gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__softEvidenceNodes(gum::LoopySamplingInference< double,gum::ImportanceSampling > *self){
      return PyAgrumHelper::PySetFromNodeSet(self->softEvidenceNodes() ) ;
    }
SWIGINTERN PyObject *gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__targets(gum::LoopySamplingInference< double,gum::ImportanceSampling > *self){
      return PyAgrumHelper::PySetFromNodeSet(self->targets() );
    }
SWIGINTERN gum::Tensor< double > gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__evidenceImpact__SWIG_2(gum::LoopySamplingInference< double,gum::ImportanceSampling > *self,PyObject *target,PyObject *evs){
      gum::NodeId itarget=PyAgrumHelper::nodeIdFromNameOrIndex(target,self->BN().variableNodeMap());
      gum::NodeSet soe;
      PyAgrumHelper::populateNodeSetFromPySequenceOfIntOrString(soe,evs,self->BN().variableNodeMap());
      return self->evidenceImpact(itarget,soe);
    }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__setVerbosity(gum::LoopySamplingInference< double,gum::WeightedSampling > *self,bool v){ self->gum::ApproximationScheme::setVerbosity(v); }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__setEpsilon(gum::LoopySamplingInference< double,gum::WeightedSampling > *self,double eps){ self->gum::ApproximationScheme::setEpsilon(eps); }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__setMinEpsilonRate(gum::LoopySamplingInference< double,gum::WeightedSampling > *self,double rate){ self->gum::ApproximationScheme::setMinEpsilonRate(rate); }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__setMaxIter(gum::LoopySamplingInference< double,gum::WeightedSampling > *self,gum::Size max){ self->gum::ApproximationScheme::setMaxIter(max); }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__setMaxTime(gum::LoopySamplingInference< double,gum::WeightedSampling > *self,double timeout){ self->gum::ApproximationScheme::setMaxTime(timeout); }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__setPeriodSize(gum::LoopySamplingInference< double,gum::WeightedSampling > *self,gum::Size p){ self->gum::ApproximationScheme::setPeriodSize(p); }
SWIGINTERN bool gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__verbosity(gum::LoopySamplingInference< double,gum::WeightedSampling > const *self){ return self->gum::ApproximationScheme::verbosity(); }
SWIGINTERN double gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__epsilon(gum::LoopySamplingInference< double,gum::WeightedSampling > const *self){ return self->gum::ApproximationScheme::epsilon(); }
SWIGINTERN double gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__minEpsilonRate(gum::LoopySamplingInference< double,gum::WeightedSampling > const *self){ return self->gum::ApproximationScheme::minEpsilonRate(); }
SWIGINTERN gum::Size gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__maxIter(gum::LoopySamplingInference< double,gum::WeightedSampling > const *self){ return self->gum::ApproximationScheme::maxIter(); }
SWIGINTERN double gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__maxTime(gum::LoopySamplingInference< double,gum::WeightedSampling > const *self){ return self->gum::ApproximationScheme::maxTime(); }
SWIGINTERN gum::Size gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__periodSize(gum::LoopySamplingInference< double,gum::WeightedSampling > const *self){ return self->gum::ApproximationScheme::periodSize(); }
SWIGINTERN gum::Size gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__nbrIterations(gum::LoopySamplingInference< double,gum::WeightedSampling > const *self){ return self->gum::ApproximationScheme::nbrIterations(); }
SWIGINTERN double gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__currentTime(gum::LoopySamplingInference< double,gum::WeightedSampling > const *self){ return self->gum::ApproximationScheme::currentTime(); }
SWIGINTERN std::string gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__messageApproximationScheme(gum::LoopySamplingInference< double,gum::WeightedSampling > const *self){ return self->gum::ApproximationScheme::messageApproximationScheme(); }
SWIGINTERN std::vector< double,std::allocator< double > > const &gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__history(gum::LoopySamplingInference< double,gum::WeightedSampling > const *self){ return self->gum::ApproximationScheme::history(); }
SWIGINTERN gum::IApproximationSchemeConfiguration const &gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg___asIApproximationSchemeConfiguration(gum::LoopySamplingInference< double,gum::WeightedSampling > const *self){
    return *(dynamic_cast<const gum::IApproximationSchemeConfiguration *>(self));
  }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__makeInference(gum::LoopySamplingInference< double,gum::WeightedSampling > *self){
    self->gum::MarginalTargetedInference<double>::makeInference();
  }
SWIGINTERN gum::Tensor< double > const gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__posterior__SWIG_0(gum::LoopySamplingInference< double,gum::WeightedSampling > *self,gum::NodeId const var){
    return self->gum::MarginalTargetedInference<double>::posterior(var);
  }
SWIGINTERN gum::Tensor< double > const gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__posterior__SWIG_1(gum::LoopySamplingInference< double,gum::WeightedSampling > *self,std::string const &nodeName){
    return self->gum::MarginalTargetedInference<double>::posterior(nodeName);
  }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__addEvidence__SWIG_0(gum::LoopySamplingInference< double,gum::WeightedSampling > *self,gum::NodeId const id,gum::Idx const val){
    self->gum::MarginalTargetedInference<double>::addEvidence(id,val);
  }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__addEvidence__SWIG_1(gum::LoopySamplingInference< double,gum::WeightedSampling > *self,std::string const &nodeName,gum::Idx const val){
    self->gum::MarginalTargetedInference<double>::addEvidence(nodeName,val);
  }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__addEvidence__SWIG_2(gum::LoopySamplingInference< double,gum::WeightedSampling > *self,gum::NodeId const id,std::string const &val){
    self->gum::MarginalTargetedInference<double>::addEvidence(id,val);
  }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__addEvidence__SWIG_3(gum::LoopySamplingInference< double,gum::WeightedSampling > *self,std::string const &nodeName,std::string const &val){
    self->gum::MarginalTargetedInference<double>::addEvidence(nodeName,val);
  }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__addEvidence__SWIG_4(gum::LoopySamplingInference< double,gum::WeightedSampling > *self,gum::NodeId const id,std::vector< double,std::allocator< double > > const &vals){
   self->gum::MarginalTargetedInference<double>::addEvidence(id,vals);
  }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__addEvidence__SWIG_5(gum::LoopySamplingInference< double,gum::WeightedSampling > *self,std::string const &nodeName,std::vector< double,std::allocator< double > > const &vals){
    self->gum::MarginalTargetedInference<double>::addEvidence(nodeName,vals);
  }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__addEvidence__SWIG_6(gum::LoopySamplingInference< double,gum::WeightedSampling > *self,gum::Tensor< double > const &p){
    self->gum::MarginalTargetedInference<double>::addEvidence(p);
  }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__chgEvidence__SWIG_0(gum::LoopySamplingInference< double,gum::WeightedSampling > *self,gum::NodeId const id,gum::Idx const val){
    self->gum::MarginalTargetedInference<double>::chgEvidence(id,val);
  }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__chgEvidence__SWIG_1(gum::LoopySamplingInference< double,gum::WeightedSampling > *self,std::string const &nodeName,gum::Idx const val){
    self->gum::MarginalTargetedInference<double>::chgEvidence(nodeName,val);
  }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__chgEvidence__SWIG_2(gum::LoopySamplingInference< double,gum::WeightedSampling > *self,gum::NodeId const id,std::string const &val){
    self->gum::MarginalTargetedInference<double>::chgEvidence(id,val);
  }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__chgEvidence__SWIG_3(gum::LoopySamplingInference< double,gum::WeightedSampling > *self,std::string const &nodeName,std::string const &val){
    self->gum::MarginalTargetedInference<double>::chgEvidence(nodeName,val);
  }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__chgEvidence__SWIG_4(gum::LoopySamplingInference< double,gum::WeightedSampling > *self,gum::Tensor< double > const &p){
    self->gum::MarginalTargetedInference<double>::chgEvidence(p);
  }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__chgEvidence__SWIG_5(gum::LoopySamplingInference< double,gum::WeightedSampling > *self,gum::NodeId const id,std::vector< double,std::allocator< double > > const &vals){
   self->gum::MarginalTargetedInference<double>::chgEvidence(id,vals);
  }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__chgEvidence__SWIG_6(gum::LoopySamplingInference< double,gum::WeightedSampling > *self,std::string const &nodeName,std::vector< double,std::allocator< double > > const &vals){
    self->gum::MarginalTargetedInference<double>::chgEvidence(nodeName,vals);
  }
SWIGINTERN bool gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__hasEvidence__SWIG_0(gum::LoopySamplingInference< double,gum::WeightedSampling > const *self,gum::NodeId const id){
    return self->gum::MarginalTargetedInference<double>::hasEvidence(id);
  }
SWIGINTERN bool gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__hasEvidence__SWIG_1(gum::LoopySamplingInference< double,gum::WeightedSampling > const *self,std::string const &nodeName){
    return self->gum::MarginalTargetedInference<double>::hasEvidence(nodeName);
  }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__eraseAllEvidence(gum::LoopySamplingInference< double,gum::WeightedSampling > *self){
    self->gum::MarginalTargetedInference<double>::eraseAllEvidence();
  }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__eraseEvidence__SWIG_0(gum::LoopySamplingInference< double,gum::WeightedSampling > *self,gum::NodeId const id){
    self->gum::MarginalTargetedInference<double>::eraseEvidence(id);
  }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__eraseEvidence__SWIG_1(gum::LoopySamplingInference< double,gum::WeightedSampling > *self,std::string const &nodeName){
    self->gum::MarginalTargetedInference<double>::eraseEvidence(nodeName);
  }
SWIGINTERN bool gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__hasSoftEvidence__SWIG_0(gum::LoopySamplingInference< double,gum::WeightedSampling > const *self,gum::NodeId const id){
    return self->gum::MarginalTargetedInference<double>::hasSoftEvidence(id);
  }
SWIGINTERN bool gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__hasHardEvidence(gum::LoopySamplingInference< double,gum::WeightedSampling > const *self,std::string const &nodeName){
    return self->gum::MarginalTargetedInference<double>::hasHardEvidence(nodeName);
  }
SWIGINTERN bool gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__hasSoftEvidence__SWIG_1(gum::LoopySamplingInference< double,gum::WeightedSampling > const *self,std::string const &nodeName){
    return self->gum::MarginalTargetedInference<double>::hasSoftEvidence(nodeName);
  }
SWIGINTERN gum::Size gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__nbrEvidence(gum::LoopySamplingInference< double,gum::WeightedSampling > const *self){
    return self->gum::MarginalTargetedInference<double>::nbrEvidence();
  }
SWIGINTERN gum::Size gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__nbrHardEvidence(gum::LoopySamplingInference< double,gum::WeightedSampling > const *self){
    return self->gum::MarginalTargetedInference<double>::nbrHardEvidence();
  }
SWIGINTERN gum::Size gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__nbrSoftEvidence(gum::LoopySamplingInference< double,gum::WeightedSampling > const *self){
    return self->gum::MarginalTargetedInference<double>::nbrSoftEvidence();
  }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__eraseAllTargets(gum::LoopySamplingInference< double,gum::WeightedSampling > *self){
      self->gum::MarginalTargetedInference<double>::eraseAllTargets();
    }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__addAllTargets(gum::LoopySamplingInference< double,gum::WeightedSampling > *self){
      self->gum::MarginalTargetedInference<double>::addAllTargets();
    }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__addTarget__SWIG_0(gum::LoopySamplingInference< double,gum::WeightedSampling > *self,gum::NodeId const target){
      self->gum::MarginalTargetedInference<double>::addTarget(target);
    }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__addTarget__SWIG_1(gum::LoopySamplingInference< double,gum::WeightedSampling > *self,std::string const &nodeName){
      self->gum::MarginalTargetedInference<double>::addTarget(nodeName);
    }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__eraseTarget__SWIG_0(gum::LoopySamplingInference< double,gum::WeightedSampling > *self,gum::NodeId const target){
      self->gum::MarginalTargetedInference<double>::eraseTarget(target);
    }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__eraseTarget__SWIG_1(gum::LoopySamplingInference< double,gum::WeightedSampling > *self,std::string const &nodeName){
      self->gum::MarginalTargetedInference<double>::eraseTarget(nodeName);
    }
SWIGINTERN bool gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__isTarget__SWIG_0(gum::LoopySamplingInference< double,gum::WeightedSampling > const *self,gum::NodeId const variable){
      return self->gum::MarginalTargetedInference<double>::isTarget(variable);
    }
SWIGINTERN bool gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__isTarget__SWIG_1(gum::LoopySamplingInference< double,gum::WeightedSampling > const *self,std::string const &nodeName){
      return self->gum::MarginalTargetedInference<double>::isTarget(nodeName);
    }
SWIGINTERN gum::Size gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__nbrTargets(gum::LoopySamplingInference< double,gum::WeightedSampling > const *self){
      return self->gum::MarginalTargetedInference<double>::nbrTargets();
    }
SWIGINTERN double gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__H__SWIG_0(gum::LoopySamplingInference< double,gum::WeightedSampling > *self,gum::NodeId const X){
     return self->gum::MarginalTargetedInference<double>::H(X);
   }
SWIGINTERN double gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__H__SWIG_1(gum::LoopySamplingInference< double,gum::WeightedSampling > *self,std::string const &nodeName){
     return self->gum::MarginalTargetedInference<double>::H(nodeName);
   }
SWIGINTERN gum::Tensor< double > gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__evidenceImpact__SWIG_0(gum::LoopySamplingInference< double,gum::WeightedSampling > *self,gum::NodeId target,gum::NodeSet const &evs){
    return self->gum::MarginalTargetedInference<double>::evidenceImpact(target,evs);
  }
SWIGINTERN gum::Tensor< double > gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__evidenceImpact__SWIG_1(gum::LoopySamplingInference< double,gum::WeightedSampling > *self,std::string const &target,std::vector< std::string,std::allocator< std::string > > const &evs){
   return self->gum::MarginalTargetedInference<double>::evidenceImpact(target,evs);
  }
SWIGINTERN gum::IBayesNet< double > const &gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__BN(gum::LoopySamplingInference< double,gum::WeightedSampling > const *self){ return self->gum::MarginalTargetedInference<double>::BN(); }
SWIGINTERN gum::Tensor< double > const &gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__currentPosterior__SWIG_0(gum::LoopySamplingInference< double,gum::WeightedSampling > *self,gum::NodeId const id){return self->gum::SamplingInference<double>::currentPosterior(id);}
SWIGINTERN gum::Tensor< double > const &gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__currentPosterior__SWIG_1(gum::LoopySamplingInference< double,gum::WeightedSampling > *self,std::string const &name){return self->gum::SamplingInference<double>::currentPosterior(name);}
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__setEvidence(gum::LoopySamplingInference< double,gum::WeightedSampling > *self,PyObject *evidces){}
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__updateEvidence(gum::LoopySamplingInference< double,gum::WeightedSampling > *self,PyObject *evidces){}
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__setTargets(gum::LoopySamplingInference< double,gum::WeightedSampling > *self,PyObject *targets){}
SWIGINTERN PyObject *gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__hardEvidenceNodes(gum::LoopySamplingInference< double,gum::WeightedSampling > *self){
      return PyAgrumHelper::PySetFromNodeSet(self->hardEvidenceNodes() ) ;
    }
SWIGINTERN PyObject *gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__softEvidenceNodes(gum::LoopySamplingInference< double,gum::WeightedSampling > *self){
      return PyAgrumHelper::PySetFromNodeSet(self->softEvidenceNodes() ) ;
    }
SWIGINTERN PyObject *gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__targets(gum::LoopySamplingInference< double,gum::WeightedSampling > *self){
      return PyAgrumHelper::PySetFromNodeSet(self->targets() );
    }
SWIGINTERN gum::Tensor< double > gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__evidenceImpact__SWIG_2(gum::LoopySamplingInference< double,gum::WeightedSampling > *self,PyObject *target,PyObject *evs){
      gum::NodeId itarget=PyAgrumHelper::nodeIdFromNameOrIndex(target,self->BN().variableNodeMap());
      gum::NodeSet soe;
      PyAgrumHelper::populateNodeSetFromPySequenceOfIntOrString(soe,evs,self->BN().variableNodeMap());
      return self->evidenceImpact(itarget,soe);
    }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__setVerbosity(gum::LoopySamplingInference< double,gum::GibbsSampling > *self,bool v){ self->gum::ApproximationScheme::setVerbosity(v); }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__setEpsilon(gum::LoopySamplingInference< double,gum::GibbsSampling > *self,double eps){ self->gum::ApproximationScheme::setEpsilon(eps); }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__setMinEpsilonRate(gum::LoopySamplingInference< double,gum::GibbsSampling > *self,double rate){ self->gum::ApproximationScheme::setMinEpsilonRate(rate); }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__setMaxIter(gum::LoopySamplingInference< double,gum::GibbsSampling > *self,gum::Size max){ self->gum::ApproximationScheme::setMaxIter(max); }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__setMaxTime(gum::LoopySamplingInference< double,gum::GibbsSampling > *self,double timeout){ self->gum::ApproximationScheme::setMaxTime(timeout); }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__setPeriodSize(gum::LoopySamplingInference< double,gum::GibbsSampling > *self,gum::Size p){ self->gum::ApproximationScheme::setPeriodSize(p); }
SWIGINTERN bool gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__verbosity(gum::LoopySamplingInference< double,gum::GibbsSampling > const *self){ return self->gum::ApproximationScheme::verbosity(); }
SWIGINTERN double gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__epsilon(gum::LoopySamplingInference< double,gum::GibbsSampling > const *self){ return self->gum::ApproximationScheme::epsilon(); }
SWIGINTERN double gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__minEpsilonRate(gum::LoopySamplingInference< double,gum::GibbsSampling > const *self){ return self->gum::ApproximationScheme::minEpsilonRate(); }
SWIGINTERN gum::Size gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__maxIter(gum::LoopySamplingInference< double,gum::GibbsSampling > const *self){ return self->gum::ApproximationScheme::maxIter(); }
SWIGINTERN double gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__maxTime(gum::LoopySamplingInference< double,gum::GibbsSampling > const *self){ return self->gum::ApproximationScheme::maxTime(); }
SWIGINTERN gum::Size gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__periodSize(gum::LoopySamplingInference< double,gum::GibbsSampling > const *self){ return self->gum::ApproximationScheme::periodSize(); }
SWIGINTERN gum::Size gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__nbrIterations(gum::LoopySamplingInference< double,gum::GibbsSampling > const *self){ return self->gum::ApproximationScheme::nbrIterations(); }
SWIGINTERN double gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__currentTime(gum::LoopySamplingInference< double,gum::GibbsSampling > const *self){ return self->gum::ApproximationScheme::currentTime(); }
SWIGINTERN std::string gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__messageApproximationScheme(gum::LoopySamplingInference< double,gum::GibbsSampling > const *self){ return self->gum::ApproximationScheme::messageApproximationScheme(); }
SWIGINTERN std::vector< double,std::allocator< double > > const &gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__history(gum::LoopySamplingInference< double,gum::GibbsSampling > const *self){ return self->gum::ApproximationScheme::history(); }
SWIGINTERN gum::IApproximationSchemeConfiguration const &gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg___asIApproximationSchemeConfiguration(gum::LoopySamplingInference< double,gum::GibbsSampling > const *self){
    return *(dynamic_cast<const gum::IApproximationSchemeConfiguration *>(self));
  }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__makeInference(gum::LoopySamplingInference< double,gum::GibbsSampling > *self){
    self->gum::MarginalTargetedInference<double>::makeInference();
  }
SWIGINTERN gum::Tensor< double > const gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__posterior__SWIG_0(gum::LoopySamplingInference< double,gum::GibbsSampling > *self,gum::NodeId const var){
    return self->gum::MarginalTargetedInference<double>::posterior(var);
  }
SWIGINTERN gum::Tensor< double > const gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__posterior__SWIG_1(gum::LoopySamplingInference< double,gum::GibbsSampling > *self,std::string const &nodeName){
    return self->gum::MarginalTargetedInference<double>::posterior(nodeName);
  }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__addEvidence__SWIG_0(gum::LoopySamplingInference< double,gum::GibbsSampling > *self,gum::NodeId const id,gum::Idx const val){
    self->gum::MarginalTargetedInference<double>::addEvidence(id,val);
  }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__addEvidence__SWIG_1(gum::LoopySamplingInference< double,gum::GibbsSampling > *self,std::string const &nodeName,gum::Idx const val){
    self->gum::MarginalTargetedInference<double>::addEvidence(nodeName,val);
  }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__addEvidence__SWIG_2(gum::LoopySamplingInference< double,gum::GibbsSampling > *self,gum::NodeId const id,std::string const &val){
    self->gum::MarginalTargetedInference<double>::addEvidence(id,val);
  }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__addEvidence__SWIG_3(gum::LoopySamplingInference< double,gum::GibbsSampling > *self,std::string const &nodeName,std::string const &val){
    self->gum::MarginalTargetedInference<double>::addEvidence(nodeName,val);
  }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__addEvidence__SWIG_4(gum::LoopySamplingInference< double,gum::GibbsSampling > *self,gum::NodeId const id,std::vector< double,std::allocator< double > > const &vals){
   self->gum::MarginalTargetedInference<double>::addEvidence(id,vals);
  }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__addEvidence__SWIG_5(gum::LoopySamplingInference< double,gum::GibbsSampling > *self,std::string const &nodeName,std::vector< double,std::allocator< double > > const &vals){
    self->gum::MarginalTargetedInference<double>::addEvidence(nodeName,vals);
  }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__addEvidence__SWIG_6(gum::LoopySamplingInference< double,gum::GibbsSampling > *self,gum::Tensor< double > const &p){
    self->gum::MarginalTargetedInference<double>::addEvidence(p);
  }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__chgEvidence__SWIG_0(gum::LoopySamplingInference< double,gum::GibbsSampling > *self,gum::NodeId const id,gum::Idx const val){
    self->gum::MarginalTargetedInference<double>::chgEvidence(id,val);
  }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__chgEvidence__SWIG_1(gum::LoopySamplingInference< double,gum::GibbsSampling > *self,std::string const &nodeName,gum::Idx const val){
    self->gum::MarginalTargetedInference<double>::chgEvidence(nodeName,val);
  }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__chgEvidence__SWIG_2(gum::LoopySamplingInference< double,gum::GibbsSampling > *self,gum::NodeId const id,std::string const &val){
    self->gum::MarginalTargetedInference<double>::chgEvidence(id,val);
  }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__chgEvidence__SWIG_3(gum::LoopySamplingInference< double,gum::GibbsSampling > *self,std::string const &nodeName,std::string const &val){
    self->gum::MarginalTargetedInference<double>::chgEvidence(nodeName,val);
  }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__chgEvidence__SWIG_4(gum::LoopySamplingInference< double,gum::GibbsSampling > *self,gum::Tensor< double > const &p){
    self->gum::MarginalTargetedInference<double>::chgEvidence(p);
  }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__chgEvidence__SWIG_5(gum::LoopySamplingInference< double,gum::GibbsSampling > *self,gum::NodeId const id,std::vector< double,std::allocator< double > > const &vals){
   self->gum::MarginalTargetedInference<double>::chgEvidence(id,vals);
  }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__chgEvidence__SWIG_6(gum::LoopySamplingInference< double,gum::GibbsSampling > *self,std::string const &nodeName,std::vector< double,std::allocator< double > > const &vals){
    self->gum::MarginalTargetedInference<double>::chgEvidence(nodeName,vals);
  }
SWIGINTERN bool gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__hasEvidence__SWIG_0(gum::LoopySamplingInference< double,gum::GibbsSampling > const *self,gum::NodeId const id){
    return self->gum::MarginalTargetedInference<double>::hasEvidence(id);
  }
SWIGINTERN bool gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__hasEvidence__SWIG_1(gum::LoopySamplingInference< double,gum::GibbsSampling > const *self,std::string const &nodeName){
    return self->gum::MarginalTargetedInference<double>::hasEvidence(nodeName);
  }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__eraseAllEvidence(gum::LoopySamplingInference< double,gum::GibbsSampling > *self){
    self->gum::MarginalTargetedInference<double>::eraseAllEvidence();
  }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__eraseEvidence__SWIG_0(gum::LoopySamplingInference< double,gum::GibbsSampling > *self,gum::NodeId const id){
    self->gum::MarginalTargetedInference<double>::eraseEvidence(id);
  }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__eraseEvidence__SWIG_1(gum::LoopySamplingInference< double,gum::GibbsSampling > *self,std::string const &nodeName){
    self->gum::MarginalTargetedInference<double>::eraseEvidence(nodeName);
  }
SWIGINTERN bool gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__hasSoftEvidence__SWIG_0(gum::LoopySamplingInference< double,gum::GibbsSampling > const *self,gum::NodeId const id){
    return self->gum::MarginalTargetedInference<double>::hasSoftEvidence(id);
  }
SWIGINTERN bool gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__hasHardEvidence(gum::LoopySamplingInference< double,gum::GibbsSampling > const *self,std::string const &nodeName){
    return self->gum::MarginalTargetedInference<double>::hasHardEvidence(nodeName);
  }
SWIGINTERN bool gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__hasSoftEvidence__SWIG_1(gum::LoopySamplingInference< double,gum::GibbsSampling > const *self,std::string const &nodeName){
    return self->gum::MarginalTargetedInference<double>::hasSoftEvidence(nodeName);
  }
SWIGINTERN gum::Size gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__nbrEvidence(gum::LoopySamplingInference< double,gum::GibbsSampling > const *self){
    return self->gum::MarginalTargetedInference<double>::nbrEvidence();
  }
SWIGINTERN gum::Size gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__nbrHardEvidence(gum::LoopySamplingInference< double,gum::GibbsSampling > const *self){
    return self->gum::MarginalTargetedInference<double>::nbrHardEvidence();
  }
SWIGINTERN gum::Size gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__nbrSoftEvidence(gum::LoopySamplingInference< double,gum::GibbsSampling > const *self){
    return self->gum::MarginalTargetedInference<double>::nbrSoftEvidence();
  }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__eraseAllTargets(gum::LoopySamplingInference< double,gum::GibbsSampling > *self){
      self->gum::MarginalTargetedInference<double>::eraseAllTargets();
    }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__addAllTargets(gum::LoopySamplingInference< double,gum::GibbsSampling > *self){
      self->gum::MarginalTargetedInference<double>::addAllTargets();
    }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__addTarget__SWIG_0(gum::LoopySamplingInference< double,gum::GibbsSampling > *self,gum::NodeId const target){
      self->gum::MarginalTargetedInference<double>::addTarget(target);
    }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__addTarget__SWIG_1(gum::LoopySamplingInference< double,gum::GibbsSampling > *self,std::string const &nodeName){
      self->gum::MarginalTargetedInference<double>::addTarget(nodeName);
    }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__eraseTarget__SWIG_0(gum::LoopySamplingInference< double,gum::GibbsSampling > *self,gum::NodeId const target){
      self->gum::MarginalTargetedInference<double>::eraseTarget(target);
    }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__eraseTarget__SWIG_1(gum::LoopySamplingInference< double,gum::GibbsSampling > *self,std::string const &nodeName){
      self->gum::MarginalTargetedInference<double>::eraseTarget(nodeName);
    }
SWIGINTERN bool gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__isTarget__SWIG_0(gum::LoopySamplingInference< double,gum::GibbsSampling > const *self,gum::NodeId const variable){
      return self->gum::MarginalTargetedInference<double>::isTarget(variable);
    }
SWIGINTERN bool gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__isTarget__SWIG_1(gum::LoopySamplingInference< double,gum::GibbsSampling > const *self,std::string const &nodeName){
      return self->gum::MarginalTargetedInference<double>::isTarget(nodeName);
    }
SWIGINTERN gum::Size gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__nbrTargets(gum::LoopySamplingInference< double,gum::GibbsSampling > const *self){
      return self->gum::MarginalTargetedInference<double>::nbrTargets();
    }
SWIGINTERN double gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__H__SWIG_0(gum::LoopySamplingInference< double,gum::GibbsSampling > *self,gum::NodeId const X){
     return self->gum::MarginalTargetedInference<double>::H(X);
   }
SWIGINTERN double gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__H__SWIG_1(gum::LoopySamplingInference< double,gum::GibbsSampling > *self,std::string const &nodeName){
     return self->gum::MarginalTargetedInference<double>::H(nodeName);
   }
SWIGINTERN gum::Tensor< double > gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__evidenceImpact__SWIG_0(gum::LoopySamplingInference< double,gum::GibbsSampling > *self,gum::NodeId target,gum::NodeSet const &evs){
    return self->gum::MarginalTargetedInference<double>::evidenceImpact(target,evs);
  }
SWIGINTERN gum::Tensor< double > gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__evidenceImpact__SWIG_1(gum::LoopySamplingInference< double,gum::GibbsSampling > *self,std::string const &target,std::vector< std::string,std::allocator< std::string > > const &evs){
   return self->gum::MarginalTargetedInference<double>::evidenceImpact(target,evs);
  }
SWIGINTERN gum::IBayesNet< double > const &gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__BN(gum::LoopySamplingInference< double,gum::GibbsSampling > const *self){ return self->gum::MarginalTargetedInference<double>::BN(); }
SWIGINTERN gum::Tensor< double > const &gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__currentPosterior__SWIG_0(gum::LoopySamplingInference< double,gum::GibbsSampling > *self,gum::NodeId const id){return self->gum::SamplingInference<double>::currentPosterior(id);}
SWIGINTERN gum::Tensor< double > const &gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__currentPosterior__SWIG_1(gum::LoopySamplingInference< double,gum::GibbsSampling > *self,std::string const &name){return self->gum::SamplingInference<double>::currentPosterior(name);}
SWIGINTERN gum::Size gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__nbrDrawnVar(gum::LoopySamplingInference< double,gum::GibbsSampling > const *self){ return self->GibbsOperator<double>::nbrDrawnVar(); }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__setNbrDrawnVar(gum::LoopySamplingInference< double,gum::GibbsSampling > *self,gum::Size _nbr){ self->GibbsOperator<double>::setNbrDrawnVar(_nbr); }
SWIGINTERN bool gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__isDrawnAtRandom(gum::LoopySamplingInference< double,gum::GibbsSampling > const *self){ return self->GibbsOperator<double>::isDrawnAtRandom(); }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__setDrawnAtRandom(gum::LoopySamplingInference< double,gum::GibbsSampling > *self,bool _atRandom){ self->GibbsOperator<double>::setDrawnAtRandom(_atRandom); }
SWIGINTERN gum::Size gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__burnIn(gum::LoopySamplingInference< double,gum::GibbsSampling > const *self){ return self->gum::GibbsSampling<double>::burnIn();}
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__setBurnIn(gum::LoopySamplingInference< double,gum::GibbsSampling > *self,gum::Size b){ self->gum::GibbsSampling<double>::setBurnIn(b);}
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__setEvidence(gum::LoopySamplingInference< double,gum::GibbsSampling > *self,PyObject *evidces){}
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__updateEvidence(gum::LoopySamplingInference< double,gum::GibbsSampling > *self,PyObject *evidces){}
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__setTargets(gum::LoopySamplingInference< double,gum::GibbsSampling > *self,PyObject *targets){}
SWIGINTERN PyObject *gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__hardEvidenceNodes(gum::LoopySamplingInference< double,gum::GibbsSampling > *self){
      return PyAgrumHelper::PySetFromNodeSet(self->hardEvidenceNodes() ) ;
    }
SWIGINTERN PyObject *gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__softEvidenceNodes(gum::LoopySamplingInference< double,gum::GibbsSampling > *self){
      return PyAgrumHelper::PySetFromNodeSet(self->softEvidenceNodes() ) ;
    }
SWIGINTERN PyObject *gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__targets(gum::LoopySamplingInference< double,gum::GibbsSampling > *self){
      return PyAgrumHelper::PySetFromNodeSet(self->targets() );
    }
SWIGINTERN gum::Tensor< double > gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__evidenceImpact__SWIG_2(gum::LoopySamplingInference< double,gum::GibbsSampling > *self,PyObject *target,PyObject *evs){
      gum::NodeId itarget=PyAgrumHelper::nodeIdFromNameOrIndex(target,self->BN().variableNodeMap());
      gum::NodeSet soe;
      PyAgrumHelper::populateNodeSetFromPySequenceOfIntOrString(soe,evs,self->BN().variableNodeMap());
      return self->evidenceImpact(itarget,soe);
    }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__setVerbosity(gum::LoopySamplingInference< double,gum::MonteCarloSampling > *self,bool v){ self->gum::ApproximationScheme::setVerbosity(v); }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__setEpsilon(gum::LoopySamplingInference< double,gum::MonteCarloSampling > *self,double eps){ self->gum::ApproximationScheme::setEpsilon(eps); }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__setMinEpsilonRate(gum::LoopySamplingInference< double,gum::MonteCarloSampling > *self,double rate){ self->gum::ApproximationScheme::setMinEpsilonRate(rate); }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__setMaxIter(gum::LoopySamplingInference< double,gum::MonteCarloSampling > *self,gum::Size max){ self->gum::ApproximationScheme::setMaxIter(max); }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__setMaxTime(gum::LoopySamplingInference< double,gum::MonteCarloSampling > *self,double timeout){ self->gum::ApproximationScheme::setMaxTime(timeout); }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__setPeriodSize(gum::LoopySamplingInference< double,gum::MonteCarloSampling > *self,gum::Size p){ self->gum::ApproximationScheme::setPeriodSize(p); }
SWIGINTERN bool gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__verbosity(gum::LoopySamplingInference< double,gum::MonteCarloSampling > const *self){ return self->gum::ApproximationScheme::verbosity(); }
SWIGINTERN double gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__epsilon(gum::LoopySamplingInference< double,gum::MonteCarloSampling > const *self){ return self->gum::ApproximationScheme::epsilon(); }
SWIGINTERN double gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__minEpsilonRate(gum::LoopySamplingInference< double,gum::MonteCarloSampling > const *self){ return self->gum::ApproximationScheme::minEpsilonRate(); }
SWIGINTERN gum::Size gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__maxIter(gum::LoopySamplingInference< double,gum::MonteCarloSampling > const *self){ return self->gum::ApproximationScheme::maxIter(); }
SWIGINTERN double gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__maxTime(gum::LoopySamplingInference< double,gum::MonteCarloSampling > const *self){ return self->gum::ApproximationScheme::maxTime(); }
SWIGINTERN gum::Size gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__periodSize(gum::LoopySamplingInference< double,gum::MonteCarloSampling > const *self){ return self->gum::ApproximationScheme::periodSize(); }
SWIGINTERN gum::Size gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__nbrIterations(gum::LoopySamplingInference< double,gum::MonteCarloSampling > const *self){ return self->gum::ApproximationScheme::nbrIterations(); }
SWIGINTERN double gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__currentTime(gum::LoopySamplingInference< double,gum::MonteCarloSampling > const *self){ return self->gum::ApproximationScheme::currentTime(); }
SWIGINTERN std::string gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__messageApproximationScheme(gum::LoopySamplingInference< double,gum::MonteCarloSampling > const *self){ return self->gum::ApproximationScheme::messageApproximationScheme(); }
SWIGINTERN std::vector< double,std::allocator< double > > const &gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__history(gum::LoopySamplingInference< double,gum::MonteCarloSampling > const *self){ return self->gum::ApproximationScheme::history(); }
SWIGINTERN gum::IApproximationSchemeConfiguration const &gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg___asIApproximationSchemeConfiguration(gum::LoopySamplingInference< double,gum::MonteCarloSampling > const *self){
    return *(dynamic_cast<const gum::IApproximationSchemeConfiguration *>(self));
  }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__makeInference(gum::LoopySamplingInference< double,gum::MonteCarloSampling > *self){
    self->gum::MarginalTargetedInference<double>::makeInference();
  }
SWIGINTERN gum::Tensor< double > const gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__posterior__SWIG_0(gum::LoopySamplingInference< double,gum::MonteCarloSampling > *self,gum::NodeId const var){
    return self->gum::MarginalTargetedInference<double>::posterior(var);
  }
SWIGINTERN gum::Tensor< double > const gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__posterior__SWIG_1(gum::LoopySamplingInference< double,gum::MonteCarloSampling > *self,std::string const &nodeName){
    return self->gum::MarginalTargetedInference<double>::posterior(nodeName);
  }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__addEvidence__SWIG_0(gum::LoopySamplingInference< double,gum::MonteCarloSampling > *self,gum::NodeId const id,gum::Idx const val){
    self->gum::MarginalTargetedInference<double>::addEvidence(id,val);
  }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__addEvidence__SWIG_1(gum::LoopySamplingInference< double,gum::MonteCarloSampling > *self,std::string const &nodeName,gum::Idx const val){
    self->gum::MarginalTargetedInference<double>::addEvidence(nodeName,val);
  }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__addEvidence__SWIG_2(gum::LoopySamplingInference< double,gum::MonteCarloSampling > *self,gum::NodeId const id,std::string const &val){
    self->gum::MarginalTargetedInference<double>::addEvidence(id,val);
  }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__addEvidence__SWIG_3(gum::LoopySamplingInference< double,gum::MonteCarloSampling > *self,std::string const &nodeName,std::string const &val){
    self->gum::MarginalTargetedInference<double>::addEvidence(nodeName,val);
  }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__addEvidence__SWIG_4(gum::LoopySamplingInference< double,gum::MonteCarloSampling > *self,gum::NodeId const id,std::vector< double,std::allocator< double > > const &vals){
   self->gum::MarginalTargetedInference<double>::addEvidence(id,vals);
  }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__addEvidence__SWIG_5(gum::LoopySamplingInference< double,gum::MonteCarloSampling > *self,std::string const &nodeName,std::vector< double,std::allocator< double > > const &vals){
    self->gum::MarginalTargetedInference<double>::addEvidence(nodeName,vals);
  }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__addEvidence__SWIG_6(gum::LoopySamplingInference< double,gum::MonteCarloSampling > *self,gum::Tensor< double > const &p){
    self->gum::MarginalTargetedInference<double>::addEvidence(p);
  }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__chgEvidence__SWIG_0(gum::LoopySamplingInference< double,gum::MonteCarloSampling > *self,gum::NodeId const id,gum::Idx const val){
    self->gum::MarginalTargetedInference<double>::chgEvidence(id,val);
  }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__chgEvidence__SWIG_1(gum::LoopySamplingInference< double,gum::MonteCarloSampling > *self,std::string const &nodeName,gum::Idx const val){
    self->gum::MarginalTargetedInference<double>::chgEvidence(nodeName,val);
  }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__chgEvidence__SWIG_2(gum::LoopySamplingInference< double,gum::MonteCarloSampling > *self,gum::NodeId const id,std::string const &val){
    self->gum::MarginalTargetedInference<double>::chgEvidence(id,val);
  }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__chgEvidence__SWIG_3(gum::LoopySamplingInference< double,gum::MonteCarloSampling > *self,std::string const &nodeName,std::string const &val){
    self->gum::MarginalTargetedInference<double>::chgEvidence(nodeName,val);
  }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__chgEvidence__SWIG_4(gum::LoopySamplingInference< double,gum::MonteCarloSampling > *self,gum::Tensor< double > const &p){
    self->gum::MarginalTargetedInference<double>::chgEvidence(p);
  }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__chgEvidence__SWIG_5(gum::LoopySamplingInference< double,gum::MonteCarloSampling > *self,gum::NodeId const id,std::vector< double,std::allocator< double > > const &vals){
   self->gum::MarginalTargetedInference<double>::chgEvidence(id,vals);
  }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__chgEvidence__SWIG_6(gum::LoopySamplingInference< double,gum::MonteCarloSampling > *self,std::string const &nodeName,std::vector< double,std::allocator< double > > const &vals){
    self->gum::MarginalTargetedInference<double>::chgEvidence(nodeName,vals);
  }
SWIGINTERN bool gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__hasEvidence__SWIG_0(gum::LoopySamplingInference< double,gum::MonteCarloSampling > const *self,gum::NodeId const id){
    return self->gum::MarginalTargetedInference<double>::hasEvidence(id);
  }
SWIGINTERN bool gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__hasEvidence__SWIG_1(gum::LoopySamplingInference< double,gum::MonteCarloSampling > const *self,std::string const &nodeName){
    return self->gum::MarginalTargetedInference<double>::hasEvidence(nodeName);
  }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__eraseAllEvidence(gum::LoopySamplingInference< double,gum::MonteCarloSampling > *self){
    self->gum::MarginalTargetedInference<double>::eraseAllEvidence();
  }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__eraseEvidence__SWIG_0(gum::LoopySamplingInference< double,gum::MonteCarloSampling > *self,gum::NodeId const id){
    self->gum::MarginalTargetedInference<double>::eraseEvidence(id);
  }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__eraseEvidence__SWIG_1(gum::LoopySamplingInference< double,gum::MonteCarloSampling > *self,std::string const &nodeName){
    self->gum::MarginalTargetedInference<double>::eraseEvidence(nodeName);
  }
SWIGINTERN bool gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__hasSoftEvidence__SWIG_0(gum::LoopySamplingInference< double,gum::MonteCarloSampling > const *self,gum::NodeId const id){
    return self->gum::MarginalTargetedInference<double>::hasSoftEvidence(id);
  }
SWIGINTERN bool gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__hasHardEvidence(gum::LoopySamplingInference< double,gum::MonteCarloSampling > const *self,std::string const &nodeName){
    return self->gum::MarginalTargetedInference<double>::hasHardEvidence(nodeName);
  }
SWIGINTERN bool gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__hasSoftEvidence__SWIG_1(gum::LoopySamplingInference< double,gum::MonteCarloSampling > const *self,std::string const &nodeName){
    return self->gum::MarginalTargetedInference<double>::hasSoftEvidence(nodeName);
  }
SWIGINTERN gum::Size gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__nbrEvidence(gum::LoopySamplingInference< double,gum::MonteCarloSampling > const *self){
    return self->gum::MarginalTargetedInference<double>::nbrEvidence();
  }
SWIGINTERN gum::Size gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__nbrHardEvidence(gum::LoopySamplingInference< double,gum::MonteCarloSampling > const *self){
    return self->gum::MarginalTargetedInference<double>::nbrHardEvidence();
  }
SWIGINTERN gum::Size gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__nbrSoftEvidence(gum::LoopySamplingInference< double,gum::MonteCarloSampling > const *self){
    return self->gum::MarginalTargetedInference<double>::nbrSoftEvidence();
  }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__eraseAllTargets(gum::LoopySamplingInference< double,gum::MonteCarloSampling > *self){
      self->gum::MarginalTargetedInference<double>::eraseAllTargets();
    }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__addAllTargets(gum::LoopySamplingInference< double,gum::MonteCarloSampling > *self){
      self->gum::MarginalTargetedInference<double>::addAllTargets();
    }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__addTarget__SWIG_0(gum::LoopySamplingInference< double,gum::MonteCarloSampling > *self,gum::NodeId const target){
      self->gum::MarginalTargetedInference<double>::addTarget(target);
    }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__addTarget__SWIG_1(gum::LoopySamplingInference< double,gum::MonteCarloSampling > *self,std::string const &nodeName){
      self->gum::MarginalTargetedInference<double>::addTarget(nodeName);
    }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__eraseTarget__SWIG_0(gum::LoopySamplingInference< double,gum::MonteCarloSampling > *self,gum::NodeId const target){
      self->gum::MarginalTargetedInference<double>::eraseTarget(target);
    }
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__eraseTarget__SWIG_1(gum::LoopySamplingInference< double,gum::MonteCarloSampling > *self,std::string const &nodeName){
      self->gum::MarginalTargetedInference<double>::eraseTarget(nodeName);
    }
SWIGINTERN bool gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__isTarget__SWIG_0(gum::LoopySamplingInference< double,gum::MonteCarloSampling > const *self,gum::NodeId const variable){
      return self->gum::MarginalTargetedInference<double>::isTarget(variable);
    }
SWIGINTERN bool gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__isTarget__SWIG_1(gum::LoopySamplingInference< double,gum::MonteCarloSampling > const *self,std::string const &nodeName){
      return self->gum::MarginalTargetedInference<double>::isTarget(nodeName);
    }
SWIGINTERN gum::Size gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__nbrTargets(gum::LoopySamplingInference< double,gum::MonteCarloSampling > const *self){
      return self->gum::MarginalTargetedInference<double>::nbrTargets();
    }
SWIGINTERN double gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__H__SWIG_0(gum::LoopySamplingInference< double,gum::MonteCarloSampling > *self,gum::NodeId const X){
     return self->gum::MarginalTargetedInference<double>::H(X);
   }
SWIGINTERN double gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__H__SWIG_1(gum::LoopySamplingInference< double,gum::MonteCarloSampling > *self,std::string const &nodeName){
     return self->gum::MarginalTargetedInference<double>::H(nodeName);
   }
SWIGINTERN gum::Tensor< double > gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__evidenceImpact__SWIG_0(gum::LoopySamplingInference< double,gum::MonteCarloSampling > *self,gum::NodeId target,gum::NodeSet const &evs){
    return self->gum::MarginalTargetedInference<double>::evidenceImpact(target,evs);
  }
SWIGINTERN gum::Tensor< double > gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__evidenceImpact__SWIG_1(gum::LoopySamplingInference< double,gum::MonteCarloSampling > *self,std::string const &target,std::vector< std::string,std::allocator< std::string > > const &evs){
   return self->gum::MarginalTargetedInference<double>::evidenceImpact(target,evs);
  }
SWIGINTERN gum::IBayesNet< double > const &gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__BN(gum::LoopySamplingInference< double,gum::MonteCarloSampling > const *self){ return self->gum::MarginalTargetedInference<double>::BN(); }
SWIGINTERN gum::Tensor< double > const &gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__currentPosterior__SWIG_0(gum::LoopySamplingInference< double,gum::MonteCarloSampling > *self,gum::NodeId const id){return self->gum::SamplingInference<double>::currentPosterior(id);}
SWIGINTERN gum::Tensor< double > const &gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__currentPosterior__SWIG_1(gum::LoopySamplingInference< double,gum::MonteCarloSampling > *self,std::string const &name){return self->gum::SamplingInference<double>::currentPosterior(name);}
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__setEvidence(gum::LoopySamplingInference< double,gum::MonteCarloSampling > *self,PyObject *evidces){}
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__updateEvidence(gum::LoopySamplingInference< double,gum::MonteCarloSampling > *self,PyObject *evidces){}
SWIGINTERN void gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__setTargets(gum::LoopySamplingInference< double,gum::MonteCarloSampling > *self,PyObject *targets){}
SWIGINTERN PyObject *gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__hardEvidenceNodes(gum::LoopySamplingInference< double,gum::MonteCarloSampling > *self){
      return PyAgrumHelper::PySetFromNodeSet(self->hardEvidenceNodes() ) ;
    }
SWIGINTERN PyObject *gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__softEvidenceNodes(gum::LoopySamplingInference< double,gum::MonteCarloSampling > *self){
      return PyAgrumHelper::PySetFromNodeSet(self->softEvidenceNodes() ) ;
    }
SWIGINTERN PyObject *gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__targets(gum::LoopySamplingInference< double,gum::MonteCarloSampling > *self){
      return PyAgrumHelper::PySetFromNodeSet(self->targets() );
    }
SWIGINTERN gum::Tensor< double > gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__evidenceImpact__SWIG_2(gum::LoopySamplingInference< double,gum::MonteCarloSampling > *self,PyObject *target,PyObject *evs){
      gum::NodeId itarget=PyAgrumHelper::nodeIdFromNameOrIndex(target,self->BN().variableNodeMap());
      gum::NodeSet soe;
      PyAgrumHelper::populateNodeSetFromPySequenceOfIntOrString(soe,evs,self->BN().variableNodeMap());
      return self->evidenceImpact(itarget,soe);
    }
SWIGINTERN void gum_LoopyBeliefPropagation_Sl_double_Sg__setVerbosity(gum::LoopyBeliefPropagation< double > *self,bool v){ self->gum::ApproximationScheme::setVerbosity(v); }
SWIGINTERN void gum_LoopyBeliefPropagation_Sl_double_Sg__setEpsilon(gum::LoopyBeliefPropagation< double > *self,double eps){ self->gum::ApproximationScheme::setEpsilon(eps); }
SWIGINTERN void gum_LoopyBeliefPropagation_Sl_double_Sg__setMinEpsilonRate(gum::LoopyBeliefPropagation< double > *self,double rate){ self->gum::ApproximationScheme::setMinEpsilonRate(rate); }
SWIGINTERN void gum_LoopyBeliefPropagation_Sl_double_Sg__setMaxIter(gum::LoopyBeliefPropagation< double > *self,gum::Size max){ self->gum::ApproximationScheme::setMaxIter(max); }
SWIGINTERN void gum_LoopyBeliefPropagation_Sl_double_Sg__setMaxTime(gum::LoopyBeliefPropagation< double > *self,double timeout){ self->gum::ApproximationScheme::setMaxTime(timeout); }
SWIGINTERN void gum_LoopyBeliefPropagation_Sl_double_Sg__setPeriodSize(gum::LoopyBeliefPropagation< double > *self,gum::Size p){ self->gum::ApproximationScheme::setPeriodSize(p); }
SWIGINTERN bool gum_LoopyBeliefPropagation_Sl_double_Sg__verbosity(gum::LoopyBeliefPropagation< double > const *self){ return self->gum::ApproximationScheme::verbosity(); }
SWIGINTERN double gum_LoopyBeliefPropagation_Sl_double_Sg__epsilon(gum::LoopyBeliefPropagation< double > const *self){ return self->gum::ApproximationScheme::epsilon(); }
SWIGINTERN double gum_LoopyBeliefPropagation_Sl_double_Sg__minEpsilonRate(gum::LoopyBeliefPropagation< double > const *self){ return self->gum::ApproximationScheme::minEpsilonRate(); }
SWIGINTERN gum::Size gum_LoopyBeliefPropagation_Sl_double_Sg__maxIter(gum::LoopyBeliefPropagation< double > const *self){ return self->gum::ApproximationScheme::maxIter(); }
SWIGINTERN double gum_LoopyBeliefPropagation_Sl_double_Sg__maxTime(gum::LoopyBeliefPropagation< double > const *self){ return self->gum::ApproximationScheme::maxTime(); }
SWIGINTERN gum::Size gum_LoopyBeliefPropagation_Sl_double_Sg__periodSize(gum::LoopyBeliefPropagation< double > const *self){ return self->gum::ApproximationScheme::periodSize(); }
SWIGINTERN gum::Size gum_LoopyBeliefPropagation_Sl_double_Sg__nbrIterations(gum::LoopyBeliefPropagation< double > const *self){ return self->gum::ApproximationScheme::nbrIterations(); }
SWIGINTERN double gum_LoopyBeliefPropagation_Sl_double_Sg__currentTime(gum::LoopyBeliefPropagation< double > const *self){ return self->gum::ApproximationScheme::currentTime(); }
SWIGINTERN std::string gum_LoopyBeliefPropagation_Sl_double_Sg__messageApproximationScheme(gum::LoopyBeliefPropagation< double > const *self){ return self->gum::ApproximationScheme::messageApproximationScheme(); }
SWIGINTERN std::vector< double,std::allocator< double > > const &gum_LoopyBeliefPropagation_Sl_double_Sg__history(gum::LoopyBeliefPropagation< double > const *self){ return self->gum::ApproximationScheme::history(); }
SWIGINTERN gum::IApproximationSchemeConfiguration const &gum_LoopyBeliefPropagation_Sl_double_Sg___asIApproximationSchemeConfiguration(gum::LoopyBeliefPropagation< double > const *self){
    return *(dynamic_cast<const gum::IApproximationSchemeConfiguration *>(self));
  }
SWIGINTERN void gum_LoopyBeliefPropagation_Sl_double_Sg__makeInference(gum::LoopyBeliefPropagation< double > *self){
    self->gum::MarginalTargetedInference<double>::makeInference();
  }
SWIGINTERN gum::Tensor< double > const gum_LoopyBeliefPropagation_Sl_double_Sg__posterior__SWIG_0(gum::LoopyBeliefPropagation< double > *self,gum::NodeId const var){
    return self->gum::MarginalTargetedInference<double>::posterior(var);
  }
SWIGINTERN gum::Tensor< double > const gum_LoopyBeliefPropagation_Sl_double_Sg__posterior__SWIG_1(gum::LoopyBeliefPropagation< double > *self,std::string const &nodeName){
    return self->gum::MarginalTargetedInference<double>::posterior(nodeName);
  }
SWIGINTERN void gum_LoopyBeliefPropagation_Sl_double_Sg__addEvidence__SWIG_0(gum::LoopyBeliefPropagation< double > *self,gum::NodeId const id,gum::Idx const val){
    self->gum::MarginalTargetedInference<double>::addEvidence(id,val);
  }
SWIGINTERN void gum_LoopyBeliefPropagation_Sl_double_Sg__addEvidence__SWIG_1(gum::LoopyBeliefPropagation< double > *self,std::string const &nodeName,gum::Idx const val){
    self->gum::MarginalTargetedInference<double>::addEvidence(nodeName,val);
  }
SWIGINTERN void gum_LoopyBeliefPropagation_Sl_double_Sg__addEvidence__SWIG_2(gum::LoopyBeliefPropagation< double > *self,gum::NodeId const id,std::string const &val){
    self->gum::MarginalTargetedInference<double>::addEvidence(id,val);
  }
SWIGINTERN void gum_LoopyBeliefPropagation_Sl_double_Sg__addEvidence__SWIG_3(gum::LoopyBeliefPropagation< double > *self,std::string const &nodeName,std::string const &val){
    self->gum::MarginalTargetedInference<double>::addEvidence(nodeName,val);
  }
SWIGINTERN void gum_LoopyBeliefPropagation_Sl_double_Sg__addEvidence__SWIG_4(gum::LoopyBeliefPropagation< double > *self,gum::NodeId const id,std::vector< double,std::allocator< double > > const &vals){
   self->gum::MarginalTargetedInference<double>::addEvidence(id,vals);
  }
SWIGINTERN void gum_LoopyBeliefPropagation_Sl_double_Sg__addEvidence__SWIG_5(gum::LoopyBeliefPropagation< double > *self,std::string const &nodeName,std::vector< double,std::allocator< double > > const &vals){
    self->gum::MarginalTargetedInference<double>::addEvidence(nodeName,vals);
  }
SWIGINTERN void gum_LoopyBeliefPropagation_Sl_double_Sg__addEvidence__SWIG_6(gum::LoopyBeliefPropagation< double > *self,gum::Tensor< double > const &p){
    self->gum::MarginalTargetedInference<double>::addEvidence(p);
  }
SWIGINTERN void gum_LoopyBeliefPropagation_Sl_double_Sg__chgEvidence__SWIG_0(gum::LoopyBeliefPropagation< double > *self,gum::NodeId const id,gum::Idx const val){
    self->gum::MarginalTargetedInference<double>::chgEvidence(id,val);
  }
SWIGINTERN void gum_LoopyBeliefPropagation_Sl_double_Sg__chgEvidence__SWIG_1(gum::LoopyBeliefPropagation< double > *self,std::string const &nodeName,gum::Idx const val){
    self->gum::MarginalTargetedInference<double>::chgEvidence(nodeName,val);
  }
SWIGINTERN void gum_LoopyBeliefPropagation_Sl_double_Sg__chgEvidence__SWIG_2(gum::LoopyBeliefPropagation< double > *self,gum::NodeId const id,std::string const &val){
    self->gum::MarginalTargetedInference<double>::chgEvidence(id,val);
  }
SWIGINTERN void gum_LoopyBeliefPropagation_Sl_double_Sg__chgEvidence__SWIG_3(gum::LoopyBeliefPropagation< double > *self,std::string const &nodeName,std::string const &val){
    self->gum::MarginalTargetedInference<double>::chgEvidence(nodeName,val);
  }
SWIGINTERN void gum_LoopyBeliefPropagation_Sl_double_Sg__chgEvidence__SWIG_4(gum::LoopyBeliefPropagation< double > *self,gum::Tensor< double > const &p){
    self->gum::MarginalTargetedInference<double>::chgEvidence(p);
  }
SWIGINTERN void gum_LoopyBeliefPropagation_Sl_double_Sg__chgEvidence__SWIG_5(gum::LoopyBeliefPropagation< double > *self,gum::NodeId const id,std::vector< double,std::allocator< double > > const &vals){
   self->gum::MarginalTargetedInference<double>::chgEvidence(id,vals);
  }
SWIGINTERN void gum_LoopyBeliefPropagation_Sl_double_Sg__chgEvidence__SWIG_6(gum::LoopyBeliefPropagation< double > *self,std::string const &nodeName,std::vector< double,std::allocator< double > > const &vals){
    self->gum::MarginalTargetedInference<double>::chgEvidence(nodeName,vals);
  }
SWIGINTERN bool gum_LoopyBeliefPropagation_Sl_double_Sg__hasEvidence__SWIG_0(gum::LoopyBeliefPropagation< double > const *self,gum::NodeId const id){
    return self->gum::MarginalTargetedInference<double>::hasEvidence(id);
  }
SWIGINTERN bool gum_LoopyBeliefPropagation_Sl_double_Sg__hasEvidence__SWIG_1(gum::LoopyBeliefPropagation< double > const *self,std::string const &nodeName){
    return self->gum::MarginalTargetedInference<double>::hasEvidence(nodeName);
  }
SWIGINTERN void gum_LoopyBeliefPropagation_Sl_double_Sg__eraseAllEvidence(gum::LoopyBeliefPropagation< double > *self){
    self->gum::MarginalTargetedInference<double>::eraseAllEvidence();
  }
SWIGINTERN void gum_LoopyBeliefPropagation_Sl_double_Sg__eraseEvidence__SWIG_0(gum::LoopyBeliefPropagation< double > *self,gum::NodeId const id){
    self->gum::MarginalTargetedInference<double>::eraseEvidence(id);
  }
SWIGINTERN void gum_LoopyBeliefPropagation_Sl_double_Sg__eraseEvidence__SWIG_1(gum::LoopyBeliefPropagation< double > *self,std::string const &nodeName){
    self->gum::MarginalTargetedInference<double>::eraseEvidence(nodeName);
  }
SWIGINTERN bool gum_LoopyBeliefPropagation_Sl_double_Sg__hasSoftEvidence__SWIG_0(gum::LoopyBeliefPropagation< double > const *self,gum::NodeId const id){
    return self->gum::MarginalTargetedInference<double>::hasSoftEvidence(id);
  }
SWIGINTERN bool gum_LoopyBeliefPropagation_Sl_double_Sg__hasHardEvidence(gum::LoopyBeliefPropagation< double > const *self,std::string const &nodeName){
    return self->gum::MarginalTargetedInference<double>::hasHardEvidence(nodeName);
  }
SWIGINTERN bool gum_LoopyBeliefPropagation_Sl_double_Sg__hasSoftEvidence__SWIG_1(gum::LoopyBeliefPropagation< double > const *self,std::string const &nodeName){
    return self->gum::MarginalTargetedInference<double>::hasSoftEvidence(nodeName);
  }
SWIGINTERN gum::Size gum_LoopyBeliefPropagation_Sl_double_Sg__nbrEvidence(gum::LoopyBeliefPropagation< double > const *self){
    return self->gum::MarginalTargetedInference<double>::nbrEvidence();
  }
SWIGINTERN gum::Size gum_LoopyBeliefPropagation_Sl_double_Sg__nbrHardEvidence(gum::LoopyBeliefPropagation< double > const *self){
    return self->gum::MarginalTargetedInference<double>::nbrHardEvidence();
  }
SWIGINTERN gum::Size gum_LoopyBeliefPropagation_Sl_double_Sg__nbrSoftEvidence(gum::LoopyBeliefPropagation< double > const *self){
    return self->gum::MarginalTargetedInference<double>::nbrSoftEvidence();
  }
SWIGINTERN void gum_LoopyBeliefPropagation_Sl_double_Sg__eraseAllTargets(gum::LoopyBeliefPropagation< double > *self){
      self->gum::MarginalTargetedInference<double>::eraseAllTargets();
    }
SWIGINTERN void gum_LoopyBeliefPropagation_Sl_double_Sg__addAllTargets(gum::LoopyBeliefPropagation< double > *self){
      self->gum::MarginalTargetedInference<double>::addAllTargets();
    }
SWIGINTERN void gum_LoopyBeliefPropagation_Sl_double_Sg__addTarget__SWIG_0(gum::LoopyBeliefPropagation< double > *self,gum::NodeId const target){
      self->gum::MarginalTargetedInference<double>::addTarget(target);
    }
SWIGINTERN void gum_LoopyBeliefPropagation_Sl_double_Sg__addTarget__SWIG_1(gum::LoopyBeliefPropagation< double > *self,std::string const &nodeName){
      self->gum::MarginalTargetedInference<double>::addTarget(nodeName);
    }
SWIGINTERN void gum_LoopyBeliefPropagation_Sl_double_Sg__eraseTarget__SWIG_0(gum::LoopyBeliefPropagation< double > *self,gum::NodeId const target){
      self->gum::MarginalTargetedInference<double>::eraseTarget(target);
    }
SWIGINTERN void gum_LoopyBeliefPropagation_Sl_double_Sg__eraseTarget__SWIG_1(gum::LoopyBeliefPropagation< double > *self,std::string const &nodeName){
      self->gum::MarginalTargetedInference<double>::eraseTarget(nodeName);
    }
SWIGINTERN bool gum_LoopyBeliefPropagation_Sl_double_Sg__isTarget__SWIG_0(gum::LoopyBeliefPropagation< double > const *self,gum::NodeId const variable){
      return self->gum::MarginalTargetedInference<double>::isTarget(variable);
    }
SWIGINTERN bool gum_LoopyBeliefPropagation_Sl_double_Sg__isTarget__SWIG_1(gum::LoopyBeliefPropagation< double > const *self,std::string const &nodeName){
      return self->gum::MarginalTargetedInference<double>::isTarget(nodeName);
    }
SWIGINTERN gum::Size gum_LoopyBeliefPropagation_Sl_double_Sg__nbrTargets(gum::LoopyBeliefPropagation< double > const *self){
      return self->gum::MarginalTargetedInference<double>::nbrTargets();
    }
SWIGINTERN double gum_LoopyBeliefPropagation_Sl_double_Sg__H__SWIG_0(gum::LoopyBeliefPropagation< double > *self,gum::NodeId const X){
     return self->gum::MarginalTargetedInference<double>::H(X);
   }
SWIGINTERN double gum_LoopyBeliefPropagation_Sl_double_Sg__H__SWIG_1(gum::LoopyBeliefPropagation< double > *self,std::string const &nodeName){
     return self->gum::MarginalTargetedInference<double>::H(nodeName);
   }
SWIGINTERN gum::Tensor< double > gum_LoopyBeliefPropagation_Sl_double_Sg__evidenceImpact__SWIG_0(gum::LoopyBeliefPropagation< double > *self,gum::NodeId target,gum::NodeSet const &evs){
    return self->gum::MarginalTargetedInference<double>::evidenceImpact(target,evs);
  }
SWIGINTERN gum::Tensor< double > gum_LoopyBeliefPropagation_Sl_double_Sg__evidenceImpact__SWIG_1(gum::LoopyBeliefPropagation< double > *self,std::string const &target,std::vector< std::string,std::allocator< std::string > > const &evs){
   return self->gum::MarginalTargetedInference<double>::evidenceImpact(target,evs);
  }
SWIGINTERN gum::IBayesNet< double > const &gum_LoopyBeliefPropagation_Sl_double_Sg__BN(gum::LoopyBeliefPropagation< double > const *self){ return self->gum::MarginalTargetedInference<double>::BN(); }
SWIGINTERN void gum_LoopyBeliefPropagation_Sl_double_Sg__setEvidence(gum::LoopyBeliefPropagation< double > *self,PyObject *evidces){}
SWIGINTERN void gum_LoopyBeliefPropagation_Sl_double_Sg__updateEvidence(gum::LoopyBeliefPropagation< double > *self,PyObject *evidces){}
SWIGINTERN void gum_LoopyBeliefPropagation_Sl_double_Sg__setTargets(gum::LoopyBeliefPropagation< double > *self,PyObject *targets){}
SWIGINTERN PyObject *gum_LoopyBeliefPropagation_Sl_double_Sg__hardEvidenceNodes(gum::LoopyBeliefPropagation< double > *self){
      return PyAgrumHelper::PySetFromNodeSet(self->hardEvidenceNodes() ) ;
    }
SWIGINTERN PyObject *gum_LoopyBeliefPropagation_Sl_double_Sg__softEvidenceNodes(gum::LoopyBeliefPropagation< double > *self){
      return PyAgrumHelper::PySetFromNodeSet(self->softEvidenceNodes() ) ;
    }
SWIGINTERN PyObject *gum_LoopyBeliefPropagation_Sl_double_Sg__targets(gum::LoopyBeliefPropagation< double > *self){
      return PyAgrumHelper::PySetFromNodeSet(self->targets() );
    }
SWIGINTERN gum::Tensor< double > gum_LoopyBeliefPropagation_Sl_double_Sg__evidenceImpact__SWIG_2(gum::LoopyBeliefPropagation< double > *self,PyObject *target,PyObject *evs){
      gum::NodeId itarget=PyAgrumHelper::nodeIdFromNameOrIndex(target,self->BN().variableNodeMap());
      gum::NodeSet soe;
      PyAgrumHelper::populateNodeSetFromPySequenceOfIntOrString(soe,evs,self->BN().variableNodeMap());
      return self->evidenceImpact(itarget,soe);
    }
SWIGINTERN PyObject *gum_ExactBNdistance_Sl_double_Sg__compute(gum::ExactBNdistance< double > *self){
  PyObject* q=PyDict_New();

  PyObject* pyval;

  pyval=PyFloat_FromDouble(self->klPQ());
  PyDict_SetItemString(q,"klPQ",pyval);
  Py_DecRef(pyval);

  pyval=PyInt_FromLong(self->errorPQ());
  PyDict_SetItemString(q,"errorPQ",PyInt_FromLong(self->errorPQ()));
  Py_DecRef(pyval);

  pyval=PyFloat_FromDouble(self->klQP());
  PyDict_SetItemString(q,"klQP",PyFloat_FromDouble(self->klQP()));
  Py_DecRef(pyval);

  pyval=PyInt_FromLong(self->errorQP());
  PyDict_SetItemString(q,"errorQP",PyInt_FromLong(self->errorQP()));
  Py_DecRef(pyval);

  pyval=PyFloat_FromDouble(self->hellinger());
  PyDict_SetItemString(q,"hellinger",PyFloat_FromDouble(self->hellinger()));
  Py_DecRef(pyval);

  pyval=PyFloat_FromDouble(self->bhattacharya());
  PyDict_SetItemString(q,"bhattacharya",PyFloat_FromDouble(self->bhattacharya()));
  Py_DecRef(pyval);

  pyval=PyFloat_FromDouble(self->jsd());
  PyDict_SetItemString(q,"jensen-shannon",PyFloat_FromDouble(self->jsd()));
  Py_DecRef(pyval);

  return q;
}
SWIGINTERN PyObject *gum_GibbsBNdistance_Sl_double_Sg__compute(gum::GibbsBNdistance< double > *self){
  PyObject* q=PyDict_New();

  PyObject* pyval;

  pyval=PyFloat_FromDouble(self->klPQ());
  PyDict_SetItemString(q,"klPQ",pyval);
  Py_DecRef(pyval);

  pyval=PyInt_FromLong(self->errorPQ());
  PyDict_SetItemString(q,"errorPQ",PyInt_FromLong(self->errorPQ()));
  Py_DecRef(pyval);

  pyval=PyFloat_FromDouble(self->klQP());
  PyDict_SetItemString(q,"klQP",PyFloat_FromDouble(self->klQP()));
  Py_DecRef(pyval);

  pyval=PyInt_FromLong(self->errorQP());
  PyDict_SetItemString(q,"errorQP",PyInt_FromLong(self->errorQP()));
  Py_DecRef(pyval);

  pyval=PyFloat_FromDouble(self->hellinger());
  PyDict_SetItemString(q,"hellinger",PyFloat_FromDouble(self->hellinger()));
  Py_DecRef(pyval);

  pyval=PyFloat_FromDouble(self->bhattacharya());
  PyDict_SetItemString(q,"bhattacharya",PyFloat_FromDouble(self->bhattacharya()));
  Py_DecRef(pyval);

  pyval=PyFloat_FromDouble(self->jsd());
  PyDict_SetItemString(q,"jensen-shannon",PyFloat_FromDouble(self->jsd()));
  Py_DecRef(pyval);

  return q;
}
SWIGINTERN void gum_GibbsBNdistance_Sl_double_Sg__setVerbosity(gum::GibbsBNdistance< double > *self,bool v){ self->gum::ApproximationScheme::setVerbosity(v); }
SWIGINTERN void gum_GibbsBNdistance_Sl_double_Sg__setEpsilon(gum::GibbsBNdistance< double > *self,double eps){ self->gum::ApproximationScheme::setEpsilon(eps); }
SWIGINTERN void gum_GibbsBNdistance_Sl_double_Sg__setMinEpsilonRate(gum::GibbsBNdistance< double > *self,double rate){ self->gum::ApproximationScheme::setMinEpsilonRate(rate); }
SWIGINTERN void gum_GibbsBNdistance_Sl_double_Sg__setMaxIter(gum::GibbsBNdistance< double > *self,gum::Size max){ self->gum::ApproximationScheme::setMaxIter(max); }
SWIGINTERN void gum_GibbsBNdistance_Sl_double_Sg__setMaxTime(gum::GibbsBNdistance< double > *self,double timeout){ self->gum::ApproximationScheme::setMaxTime(timeout); }
SWIGINTERN void gum_GibbsBNdistance_Sl_double_Sg__setPeriodSize(gum::GibbsBNdistance< double > *self,gum::Size p){ self->gum::ApproximationScheme::setPeriodSize(p); }
SWIGINTERN bool gum_GibbsBNdistance_Sl_double_Sg__verbosity(gum::GibbsBNdistance< double > const *self){ return self->gum::ApproximationScheme::verbosity(); }
SWIGINTERN double gum_GibbsBNdistance_Sl_double_Sg__epsilon(gum::GibbsBNdistance< double > const *self){ return self->gum::ApproximationScheme::epsilon(); }
SWIGINTERN double gum_GibbsBNdistance_Sl_double_Sg__minEpsilonRate(gum::GibbsBNdistance< double > const *self){ return self->gum::ApproximationScheme::minEpsilonRate(); }
SWIGINTERN gum::Size gum_GibbsBNdistance_Sl_double_Sg__maxIter(gum::GibbsBNdistance< double > const *self){ return self->gum::ApproximationScheme::maxIter(); }
SWIGINTERN double gum_GibbsBNdistance_Sl_double_Sg__maxTime(gum::GibbsBNdistance< double > const *self){ return self->gum::ApproximationScheme::maxTime(); }
SWIGINTERN gum::Size gum_GibbsBNdistance_Sl_double_Sg__periodSize(gum::GibbsBNdistance< double > const *self){ return self->gum::ApproximationScheme::periodSize(); }
SWIGINTERN gum::Size gum_GibbsBNdistance_Sl_double_Sg__nbrIterations(gum::GibbsBNdistance< double > const *self){ return self->gum::ApproximationScheme::nbrIterations(); }
SWIGINTERN double gum_GibbsBNdistance_Sl_double_Sg__currentTime(gum::GibbsBNdistance< double > const *self){ return self->gum::ApproximationScheme::currentTime(); }
SWIGINTERN std::string gum_GibbsBNdistance_Sl_double_Sg__messageApproximationScheme(gum::GibbsBNdistance< double > const *self){ return self->gum::ApproximationScheme::messageApproximationScheme(); }
SWIGINTERN std::vector< double,std::allocator< double > > const &gum_GibbsBNdistance_Sl_double_Sg__history(gum::GibbsBNdistance< double > const *self){ return self->gum::ApproximationScheme::history(); }
SWIGINTERN gum::IApproximationSchemeConfiguration const &gum_GibbsBNdistance_Sl_double_Sg___asIApproximationSchemeConfiguration(gum::GibbsBNdistance< double > const *self){
    return *(dynamic_cast<const gum::IApproximationSchemeConfiguration *>(self));
  }
SWIGINTERN gum::Size gum_GibbsBNdistance_Sl_double_Sg__nbrDrawnVar(gum::GibbsBNdistance< double > const *self){ return self->GibbsOperator<double>::nbrDrawnVar(); }
SWIGINTERN void gum_GibbsBNdistance_Sl_double_Sg__setNbrDrawnVar(gum::GibbsBNdistance< double > *self,gum::Size _nbr){ self->GibbsOperator<double>::setNbrDrawnVar(_nbr); }
SWIGINTERN bool gum_GibbsBNdistance_Sl_double_Sg__isDrawnAtRandom(gum::GibbsBNdistance< double > const *self){ return self->GibbsOperator<double>::isDrawnAtRandom(); }
SWIGINTERN void gum_GibbsBNdistance_Sl_double_Sg__setDrawnAtRandom(gum::GibbsBNdistance< double > *self,bool _atRandom){ self->GibbsOperator<double>::setDrawnAtRandom(_atRandom); }
SWIGINTERN PyObject *gum_learning_BNDatabaseGenerator_Sl_double_Sg__varOrder(gum::learning::BNDatabaseGenerator< double > const *self){ return PyAgrumHelper::PyTupleFromNodeVect(self->varOrder()); }
SWIGINTERN double gum_learning_BNDatabaseGenerator_Sl_double_Sg__drawSamples__SWIG_3(gum::learning::BNDatabaseGenerator< double > *self,gum::Size nbSamples,PyObject *arg){
    if (PyDict_Check(arg)) {
      gum::Instantiation inst;
      PyAgrumHelper::fillInstantiationFromPyObject(self->bn(), inst, arg);
      return self->drawSamples(nbSamples,inst);
    } else {
           {                                                                                             std::ostringstream error_stream;                                                            error_stream << "arg is neither a dict or an pyagrum.Instantiation.";                                                                        throw(gum::InvalidArgument(gum::_createMsg_("/Users/phw/Documents/gits/agrum/aGrUM-dev/wrappers/pyagrum/swigsrc//BNDatabaseGenerator.i", __FUNCTION__, 56, error_stream.str())));      };
    }
  }

#include <memory>

SWIGINTERN std::string gum_learning_BNLearner_Sl_double_Sg____repr__(gum::learning::BNLearner< double > const *self){
   std::stringstream s;
   s<<"(pyagrum.BNLearner@"<<std::hex<<self<<") "<<self->toString();
   return s.str();
  }
SWIGINTERN std::string gum_learning_BNLearner_Sl_double_Sg____str__(gum::learning::BNLearner< double > const *self){ return self->toString();}
SWIGINTERN void gum_learning_BNLearner_Sl_double_Sg__setVerbosity(gum::learning::BNLearner< double > *self,bool v){ self->gum::learning::IBNLearner::setVerbosity(v); }
SWIGINTERN void gum_learning_BNLearner_Sl_double_Sg__setEpsilon(gum::learning::BNLearner< double > *self,double eps){ self->gum::learning::IBNLearner::setEpsilon(eps); }
SWIGINTERN void gum_learning_BNLearner_Sl_double_Sg__setMinEpsilonRate(gum::learning::BNLearner< double > *self,double rate){ self->gum::learning::IBNLearner::setMinEpsilonRate(rate); }
SWIGINTERN void gum_learning_BNLearner_Sl_double_Sg__setMaxIter(gum::learning::BNLearner< double > *self,gum::Size max){ self->gum::learning::IBNLearner::setMaxIter(max); }
SWIGINTERN void gum_learning_BNLearner_Sl_double_Sg__setMaxTime(gum::learning::BNLearner< double > *self,double timeout){ self->gum::learning::IBNLearner::setMaxTime(timeout); }
SWIGINTERN void gum_learning_BNLearner_Sl_double_Sg__setPeriodSize(gum::learning::BNLearner< double > *self,gum::Size p){ self->gum::learning::IBNLearner::setPeriodSize(p); }
SWIGINTERN bool gum_learning_BNLearner_Sl_double_Sg__verbosity(gum::learning::BNLearner< double > const *self){ return self->gum::learning::IBNLearner::verbosity(); }
SWIGINTERN double gum_learning_BNLearner_Sl_double_Sg__epsilon(gum::learning::BNLearner< double > const *self){ return self->gum::learning::IBNLearner::epsilon(); }
SWIGINTERN double gum_learning_BNLearner_Sl_double_Sg__minEpsilonRate(gum::learning::BNLearner< double > const *self){ return self->gum::learning::IBNLearner::minEpsilonRate(); }
SWIGINTERN gum::Size gum_learning_BNLearner_Sl_double_Sg__maxIter(gum::learning::BNLearner< double > const *self){ return self->gum::learning::IBNLearner::maxIter(); }
SWIGINTERN double gum_learning_BNLearner_Sl_double_Sg__maxTime(gum::learning::BNLearner< double > const *self){ return self->gum::learning::IBNLearner::maxTime(); }
SWIGINTERN gum::Size gum_learning_BNLearner_Sl_double_Sg__periodSize(gum::learning::BNLearner< double > const *self){ return self->gum::learning::IBNLearner::periodSize(); }
SWIGINTERN gum::Size gum_learning_BNLearner_Sl_double_Sg__nbrIterations(gum::learning::BNLearner< double > const *self){ return self->gum::learning::IBNLearner::nbrIterations(); }
SWIGINTERN double gum_learning_BNLearner_Sl_double_Sg__currentTime(gum::learning::BNLearner< double > const *self){ return self->gum::learning::IBNLearner::currentTime(); }
SWIGINTERN std::string gum_learning_BNLearner_Sl_double_Sg__messageApproximationScheme(gum::learning::BNLearner< double > const *self){ return self->gum::learning::IBNLearner::messageApproximationScheme(); }
SWIGINTERN std::vector< double,std::allocator< double > > const &gum_learning_BNLearner_Sl_double_Sg__history(gum::learning::BNLearner< double > const *self){ return self->gum::learning::IBNLearner::history(); }
SWIGINTERN gum::IApproximationSchemeConfiguration const &gum_learning_BNLearner_Sl_double_Sg___asIApproximationSchemeConfiguration(gum::learning::BNLearner< double > const *self){
    return *(dynamic_cast<const gum::IApproximationSchemeConfiguration *>(self));
  }
SWIGINTERN gum::DAG gum_learning_BNLearner_Sl_double_Sg__learnDAG(gum::learning::BNLearner< double > *self){ return self->gum::learning::IBNLearner::learnDAG(); }
SWIGINTERN gum::PDAG gum_learning_BNLearner_Sl_double_Sg__learnPDAG(gum::learning::BNLearner< double > *self){ return self->gum::learning::IBNLearner::learnPDAG(); }
SWIGINTERN std::vector< std::string,std::allocator< std::string > > const &gum_learning_BNLearner_Sl_double_Sg__names(gum::learning::BNLearner< double > const *self){ return self->gum::learning::IBNLearner::names(); }
SWIGINTERN gum::NodeId gum_learning_BNLearner_Sl_double_Sg__idFromName(gum::learning::BNLearner< double > const *self,std::string const &var_name){ return self->gum::learning::IBNLearner::idFromName(var_name); }
SWIGINTERN std::string const &gum_learning_BNLearner_Sl_double_Sg__nameFromId(gum::learning::BNLearner< double > const *self,gum::NodeId id){ return self->gum::learning::IBNLearner::nameFromId(id); }
SWIGINTERN void gum_learning_BNLearner_Sl_double_Sg__setDatabaseWeight(gum::learning::BNLearner< double > *self,double const new_weight){ self->gum::learning::IBNLearner::setDatabaseWeight(new_weight); }
SWIGINTERN void gum_learning_BNLearner_Sl_double_Sg__setRecordWeight(gum::learning::BNLearner< double > *self,std::size_t const i,double const weight){ self->gum::learning::IBNLearner::setRecordWeight(i,weight); }
SWIGINTERN double gum_learning_BNLearner_Sl_double_Sg__databaseWeight(gum::learning::BNLearner< double > const *self){ return self->gum::learning::IBNLearner::databaseWeight(); }
SWIGINTERN double gum_learning_BNLearner_Sl_double_Sg__recordWeight(gum::learning::BNLearner< double > const *self,std::size_t const i){ return self->gum::learning::IBNLearner::recordWeight(i); }
SWIGINTERN bool gum_learning_BNLearner_Sl_double_Sg__hasMissingValues(gum::learning::BNLearner< double > const *self){ return self->gum::learning::IBNLearner::hasMissingValues(); }
SWIGINTERN double gum_learning_BNLearner_Sl_double_Sg__logLikelihood__SWIG_0(gum::learning::BNLearner< double > *self,std::vector< gum::NodeId,std::allocator< gum::NodeId > > const &vars,std::vector< gum::NodeId,std::allocator< gum::NodeId > > const &knowing={}){ return self->gum::learning::IBNLearner::logLikelihood(vars,knowing); }
SWIGINTERN double gum_learning_BNLearner_Sl_double_Sg__logLikelihood__SWIG_1(gum::learning::BNLearner< double > *self,std::vector< gum::NodeId,std::allocator< gum::NodeId > > const &vars){ return self->gum::learning::IBNLearner::logLikelihood(vars); }
SWIGINTERN double gum_learning_BNLearner_Sl_double_Sg__logLikelihood__SWIG_2(gum::learning::BNLearner< double > *self,std::vector< std::string,std::allocator< std::string > > const &vars,std::vector< std::string,std::allocator< std::string > > const &knowing={}){ return self->gum::learning::IBNLearner::logLikelihood(vars,knowing); }
SWIGINTERN double gum_learning_BNLearner_Sl_double_Sg__logLikelihood__SWIG_3(gum::learning::BNLearner< double > *self,std::vector< std::string,std::allocator< std::string > > const &vars){ return self->gum::learning::IBNLearner::logLikelihood(vars); }
SWIGINTERN double gum_learning_BNLearner_Sl_double_Sg__score__SWIG_0(gum::learning::BNLearner< double > *self,gum::NodeId vars,std::vector< gum::NodeId,std::allocator< gum::NodeId > > const &knowing={}){ return self->gum::learning::IBNLearner::score(vars,knowing); }
SWIGINTERN double gum_learning_BNLearner_Sl_double_Sg__score__SWIG_1(gum::learning::BNLearner< double > *self,gum::NodeId vars){ return self->gum::learning::IBNLearner::score(vars); }
SWIGINTERN double gum_learning_BNLearner_Sl_double_Sg__score__SWIG_2(gum::learning::BNLearner< double > *self,std::string const &vars,std::vector< std::string,std::allocator< std::string > > const &knowing={}){ return self->gum::learning::IBNLearner::score(vars,knowing); }
SWIGINTERN double gum_learning_BNLearner_Sl_double_Sg__score__SWIG_3(gum::learning::BNLearner< double > *self,std::string const &vars){ return self->gum::learning::IBNLearner::score(vars); }
SWIGINTERN double gum_learning_BNLearner_Sl_double_Sg__mutualInformation__SWIG_0(gum::learning::BNLearner< double > *self,gum::NodeId id1,gum::NodeId id2,std::vector< gum::NodeId,std::allocator< gum::NodeId > > const &knowing={}){ return self->gum::learning::IBNLearner::mutualInformation(id1,id2,knowing); }
SWIGINTERN double gum_learning_BNLearner_Sl_double_Sg__mutualInformation__SWIG_1(gum::learning::BNLearner< double > *self,gum::NodeId id1,gum::NodeId id2){ return self->gum::learning::IBNLearner::mutualInformation(id1,id2); }
SWIGINTERN double gum_learning_BNLearner_Sl_double_Sg__mutualInformation__SWIG_2(gum::learning::BNLearner< double > *self,std::string const &var1,std::string const &var2,std::vector< std::string,std::allocator< std::string > > const &knowing={}){ return self->gum::learning::IBNLearner::mutualInformation(var1,var2,knowing); }
SWIGINTERN double gum_learning_BNLearner_Sl_double_Sg__mutualInformation__SWIG_3(gum::learning::BNLearner< double > *self,std::string const &var1,std::string const &var2){ return self->gum::learning::IBNLearner::mutualInformation(var1,var2); }
SWIGINTERN double gum_learning_BNLearner_Sl_double_Sg__correctedMutualInformation__SWIG_0(gum::learning::BNLearner< double > *self,gum::NodeId id1,gum::NodeId id2,std::vector< gum::NodeId,std::allocator< gum::NodeId > > const &knowing={}){ return self->gum::learning::IBNLearner::correctedMutualInformation(id1,id2,knowing); }
SWIGINTERN double gum_learning_BNLearner_Sl_double_Sg__correctedMutualInformation__SWIG_1(gum::learning::BNLearner< double > *self,gum::NodeId id1,gum::NodeId id2){ return self->gum::learning::IBNLearner::correctedMutualInformation(id1,id2); }
SWIGINTERN double gum_learning_BNLearner_Sl_double_Sg__correctedMutualInformation__SWIG_2(gum::learning::BNLearner< double > *self,std::string const &var1,std::string const &var2,std::vector< std::string,std::allocator< std::string > > const &knowing={}){ return self->gum::learning::IBNLearner::correctedMutualInformation(var1,var2,knowing); }
SWIGINTERN double gum_learning_BNLearner_Sl_double_Sg__correctedMutualInformation__SWIG_3(gum::learning::BNLearner< double > *self,std::string const &var1,std::string const &var2){ return self->gum::learning::IBNLearner::correctedMutualInformation(var1,var2); }
SWIGINTERN std::vector< double,std::allocator< double > > gum_learning_BNLearner_Sl_double_Sg__rawPseudoCount__SWIG_0(gum::learning::BNLearner< double > *self,std::vector< gum::NodeId,std::allocator< gum::NodeId > > const &vars){ return self->gum::learning::IBNLearner::rawPseudoCount(vars); }
SWIGINTERN std::vector< double,std::allocator< double > > gum_learning_BNLearner_Sl_double_Sg__rawPseudoCount__SWIG_1(gum::learning::BNLearner< double > *self,std::vector< std::string,std::allocator< std::string > > const &vars){ return self->gum::learning::IBNLearner::rawPseudoCount(vars); }
SWIGINTERN gum::Size gum_learning_BNLearner_Sl_double_Sg__nbRows(gum::learning::BNLearner< double > const *self){ return self->gum::learning::IBNLearner::nbRows(); }
SWIGINTERN gum::Size gum_learning_BNLearner_Sl_double_Sg__nbCols(gum::learning::BNLearner< double > const *self){ return self->gum::learning::IBNLearner::nbCols(); }
SWIGINTERN gum::Size gum_learning_BNLearner_Sl_double_Sg__domainSize__SWIG_0(gum::learning::BNLearner< double > const *self,gum::NodeId var){ return self->gum::learning::IBNLearner::domainSize(var); }
SWIGINTERN gum::Size gum_learning_BNLearner_Sl_double_Sg__domainSize__SWIG_1(gum::learning::BNLearner< double > const *self,std::string const &var){ return self->gum::learning::IBNLearner::domainSize(var); }
SWIGINTERN void gum_learning_BNLearner_Sl_double_Sg__setNumberOfThreads(gum::learning::BNLearner< double > *self,gum::Size nb){ self->gum::learning::IBNLearner::setNumberOfThreads(nb); }
SWIGINTERN gum::Size gum_learning_BNLearner_Sl_double_Sg__getNumberOfThreads(gum::learning::BNLearner< double > const *self){
     return self->getNumberOfThreads();
  }
SWIGINTERN bool gum_learning_BNLearner_Sl_double_Sg__isGumNumberOfThreadsOverriden(gum::learning::BNLearner< double > const *self){
     return self->isGumNumberOfThreadsOverriden();
  }
SWIGINTERN PyObject *gum_learning_BNLearner_Sl_double_Sg__chi2__SWIG_0(gum::learning::BNLearner< double > *self,std::string const &var1,std::string const &var2,std::vector< std::string,std::allocator< std::string > > const &knw={}){
    std::pair<double,double> res=self->chi2(var1,var2,knw);
    return Py_BuildValue("(dd)",res.first,res.second);
  }
SWIGINTERN PyObject *gum_learning_BNLearner_Sl_double_Sg__G2__SWIG_0(gum::learning::BNLearner< double > *self,std::string const &var1,std::string const &var2,std::vector< std::string,std::allocator< std::string > > const &knw={}){
    std::pair<double,double> res=self->G2(var1,var2,knw);
    return Py_BuildValue("(dd)",res.first,res.second);
  }
SWIGINTERN gum::learning::BNLearner< double > &gum_learning_BNLearner_Sl_double_Sg__setSliceOrder__SWIG_2(gum::learning::BNLearner< double > *self,PyObject *l){
    gum::NodeProperty< gum::Size > ranks;

    if (PyList_Check(l) == 0) {
      PyErr_SetString(PyExc_TypeError,
                      "arg must be a sequence (of sequences of int or string)");
      return  *self;
    }

    for (Py_ssize_t i = 0; i < PySequence_Size(l); i++) {
      PyObject* rows = PyList_GetItem(l, i);
      if (PyList_Check(rows) == 0) {
        PyErr_SetString(PyExc_TypeError,
                        "arg must be a sequence of sequences (of int or string)");
        return  *self;
      }

      for (Py_ssize_t j = 0; j < PySequence_Size(rows); j++) {
        PyObject* row = PyList_GetItem(rows, j);
        if (PyInt_Check(row) != 0) {
          ranks.insert(PyInt_AsLong(row), i);
          continue;
        }
        std::string n=PyAgrumHelper::stringFromPyObject(row);
        if (n!="") {
          ranks.insert(self->idFromName(n),i);
          continue;
        }

        PyErr_SetString(PyExc_TypeError,
                        "arg must be a sequence of sequence of int or string");
        return  *self;
      }
    }
    self->setSliceOrder(ranks);
    return  *self;
  }
SWIGINTERN gum::learning::BNLearner< double > &gum_learning_BNLearner_Sl_double_Sg__useK2__SWIG_2(gum::learning::BNLearner< double > *self,PyObject *l){
    std::vector< gum::NodeId > v;

    if (PyList_Check(l) == 0) {
      PyErr_SetString(PyExc_TypeError, "arg must be a sequence");
      return  *self;
    }

    for (Py_ssize_t i = 0; i < PySequence_Size(l); i++) {
      PyObject* row = PyList_GetItem(l, i);
      if (PyInt_Check(row) == 0) {
        PyErr_SetString(PyExc_TypeError, "arg must be a sequence of int");
        return  *self;
      }
      v.push_back((gum::NodeId)PyInt_AsLong(row));
    }

    self->useK2(v);
    return *self;
  }
SWIGINTERN PyObject *gum_learning_BNLearner_Sl_double_Sg__latentVariables(gum::learning::BNLearner< double > *self){
    return PyAgrumHelper::PyListFromArcVect(self->latentVariables());
  }
SWIGINTERN PyObject *gum_learning_BNLearner_Sl_double_Sg__state(gum::learning::BNLearner< double > *self){
    PyObject* res=PyDict_New();

    PyObject* pyval;
    for(const auto& tuple: self->state()) {
      pyval=Py_BuildValue("(ss)",std::get<1>(tuple).c_str(),std::get<2>(tuple).c_str());
      PyDict_SetItemString(res,std::get<0>(tuple).c_str(),pyval);
      Py_DecRef(pyval);
    }

    return res;
  }
SWIGINTERN void gum_learning_BNLearner_Sl_double_Sg__setPossibleEdges__SWIG_1(gum::learning::BNLearner< double > *self,PyObject *soe){
    gum::EdgeSet set;
    PyAgrumHelper::fillEdgeSetFromPyObject(set,soe);
    self->setPossibleEdges(set);
  }


/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "bnPYTHON_wrap.h"

#ifdef __cplusplus
extern "C" {
#endif
SWIGINTERN PyObject *_wrap_delete_SwigPyIterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SwigPyIterator" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_value(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_value" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)((swig::SwigPyIterator const *)arg1)->value();
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_incr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_incr" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  try {
    result = (swig::SwigPyIterator *)(arg1)->incr(SWIG_STD_MOVE(arg2));
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_incr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (swig::SwigPyIterator *)(arg1)->incr();
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "SwigPyIterator_incr", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    PyObject *retobj = _wrap_SwigPyIterator_incr__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 2) {
    PyObject *retobj = _wrap_SwigPyIterator_incr__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'SwigPyIterator_incr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    swig::SwigPyIterator::incr(size_t)\n"
    "    swig::SwigPyIterator::incr()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_decr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_decr" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  try {
    result = (swig::SwigPyIterator *)(arg1)->decr(SWIG_STD_MOVE(arg2));
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_decr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (swig::SwigPyIterator *)(arg1)->decr();
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "SwigPyIterator_decr", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    PyObject *retobj = _wrap_SwigPyIterator_decr__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 2) {
    PyObject *retobj = _wrap_SwigPyIterator_decr__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'SwigPyIterator_decr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    swig::SwigPyIterator::decr(size_t)\n"
    "    swig::SwigPyIterator::decr()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_distance(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  ptrdiff_t result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator_distance", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_distance" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator_distance" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "SwigPyIterator_distance" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  try {
    result = ((swig::SwigPyIterator const *)arg1)->distance((swig::SwigPyIterator const &)*arg2);
  } catch(std::invalid_argument &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument& >(_e))),SWIGTYPE_p_std__invalid_argument,SWIG_POINTER_OWN), "std::invalid_argument", SWIGTYPE_p_std__invalid_argument); SWIG_fail;
  }
  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_equal(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator_equal", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_equal" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator_equal" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "SwigPyIterator_equal" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  try {
    result = (bool)((swig::SwigPyIterator const *)arg1)->equal((swig::SwigPyIterator const &)*arg2);
  } catch(std::invalid_argument &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument& >(_e))),SWIGTYPE_p_std__invalid_argument,SWIG_POINTER_OWN), "std::invalid_argument", SWIGTYPE_p_std__invalid_argument); SWIG_fail;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_copy(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_copy" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->copy();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_next(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_next" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->next();
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___next__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___next__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->__next__();
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_previous(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_previous" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->previous();
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_advance(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  swig::SwigPyIterator *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator_advance", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_advance" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_advance" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)(arg1)->advance(SWIG_STD_MOVE(arg2));
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___eq__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator___eq__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___eq__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___eq__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "SwigPyIterator___eq__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = (bool)((swig::SwigPyIterator const *)arg1)->operator ==((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  if (PyErr_Occurred() && !PyErr_ExceptionMatches(PyExc_TypeError)) {
    return NULL;
  }
  PyErr_Clear();
  SWIG_Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___ne__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator___ne__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___ne__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___ne__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "SwigPyIterator___ne__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = (bool)((swig::SwigPyIterator const *)arg1)->operator !=((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  if (PyErr_Occurred() && !PyErr_ExceptionMatches(PyExc_TypeError)) {
    return NULL;
  }
  PyErr_Clear();
  SWIG_Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___iadd__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  swig::SwigPyIterator *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator___iadd__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___iadd__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___iadd__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *) &(arg1)->operator +=(SWIG_STD_MOVE(arg2));
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___isub__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  swig::SwigPyIterator *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator___isub__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___isub__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___isub__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *) &(arg1)->operator -=(SWIG_STD_MOVE(arg2));
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___add__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  swig::SwigPyIterator *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator___add__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___add__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___add__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->operator +(SWIG_STD_MOVE(arg2));
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  if (PyErr_Occurred() && !PyErr_ExceptionMatches(PyExc_TypeError)) {
    return NULL;
  }
  PyErr_Clear();
  SWIG_Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___sub__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->operator -(SWIG_STD_MOVE(arg2));
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  if (PyErr_Occurred() && !PyErr_ExceptionMatches(PyExc_TypeError)) {
    return NULL;
  }
  PyErr_Clear();
  SWIG_Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  ptrdiff_t result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___sub__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = ((swig::SwigPyIterator const *)arg1)->operator -((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return resultobj;
fail:
  if (PyErr_Occurred() && !PyErr_ExceptionMatches(PyExc_TypeError)) {
    return NULL;
  }
  PyErr_Clear();
  SWIG_Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "SwigPyIterator___sub__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_1;
    return _wrap_SwigPyIterator___sub____SWIG_1(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_SwigPyIterator___sub____SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *SwigPyIterator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj = NULL;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_swig__SwigPyIterator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_PythonBNListener(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  gum::VariableNodeMap *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  PythonBNListener *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "new_PythonBNListener", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PythonBNListener" "', argument " "1"" of type '" "gum::BayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_gum__VariableNodeMap, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_PythonBNListener" "', argument " "2"" of type '" "gum::VariableNodeMap const *""'"); 
  }
  arg2 = reinterpret_cast< gum::VariableNodeMap * >(argp2);
  {
    try {
      result = (PythonBNListener *)new PythonBNListener((gum::BayesNet< double > const *)arg1,(gum::VariableNodeMap const *)arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PythonBNListener, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_PythonBNListener(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PythonBNListener *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PythonBNListener, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PythonBNListener" "', argument " "1"" of type '" "PythonBNListener *""'"); 
  }
  arg1 = reinterpret_cast< PythonBNListener * >(argp1);
  {
    try {
      delete arg1;
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PythonBNListener_whenNodeAdded(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PythonBNListener *arg1 = 0 ;
  void *arg2 = 0 ;
  gum::NodeId arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "PythonBNListener_whenNodeAdded", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PythonBNListener, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PythonBNListener_whenNodeAdded" "', argument " "1"" of type '" "PythonBNListener *""'"); 
  }
  arg1 = reinterpret_cast< PythonBNListener * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1],SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PythonBNListener_whenNodeAdded" "', argument " "2"" of type '" "void const *""'"); 
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PythonBNListener_whenNodeAdded" "', argument " "3"" of type '" "gum::NodeId""'");
  } 
  arg3 = static_cast< gum::NodeId >(val3);
  {
    try {
      (arg1)->whenNodeAdded((void const *)arg2,SWIG_STD_MOVE(arg3));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PythonBNListener_whenNodeDeleted(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PythonBNListener *arg1 = 0 ;
  void *arg2 = 0 ;
  gum::NodeId arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "PythonBNListener_whenNodeDeleted", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PythonBNListener, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PythonBNListener_whenNodeDeleted" "', argument " "1"" of type '" "PythonBNListener *""'"); 
  }
  arg1 = reinterpret_cast< PythonBNListener * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1],SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PythonBNListener_whenNodeDeleted" "', argument " "2"" of type '" "void const *""'"); 
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PythonBNListener_whenNodeDeleted" "', argument " "3"" of type '" "gum::NodeId""'");
  } 
  arg3 = static_cast< gum::NodeId >(val3);
  {
    try {
      (arg1)->whenNodeDeleted((void const *)arg2,SWIG_STD_MOVE(arg3));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PythonBNListener_whenArcAdded(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PythonBNListener *arg1 = 0 ;
  void *arg2 = 0 ;
  gum::NodeId arg3 ;
  gum::NodeId arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "PythonBNListener_whenArcAdded", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PythonBNListener, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PythonBNListener_whenArcAdded" "', argument " "1"" of type '" "PythonBNListener *""'"); 
  }
  arg1 = reinterpret_cast< PythonBNListener * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1],SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PythonBNListener_whenArcAdded" "', argument " "2"" of type '" "void const *""'"); 
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PythonBNListener_whenArcAdded" "', argument " "3"" of type '" "gum::NodeId""'");
  } 
  arg3 = static_cast< gum::NodeId >(val3);
  ecode4 = SWIG_AsVal_size_t(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "PythonBNListener_whenArcAdded" "', argument " "4"" of type '" "gum::NodeId""'");
  } 
  arg4 = static_cast< gum::NodeId >(val4);
  {
    try {
      (arg1)->whenArcAdded((void const *)arg2,SWIG_STD_MOVE(arg3),SWIG_STD_MOVE(arg4));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PythonBNListener_whenArcDeleted(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PythonBNListener *arg1 = 0 ;
  void *arg2 = 0 ;
  gum::NodeId arg3 ;
  gum::NodeId arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "PythonBNListener_whenArcDeleted", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PythonBNListener, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PythonBNListener_whenArcDeleted" "', argument " "1"" of type '" "PythonBNListener *""'"); 
  }
  arg1 = reinterpret_cast< PythonBNListener * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1],SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PythonBNListener_whenArcDeleted" "', argument " "2"" of type '" "void const *""'"); 
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PythonBNListener_whenArcDeleted" "', argument " "3"" of type '" "gum::NodeId""'");
  } 
  arg3 = static_cast< gum::NodeId >(val3);
  ecode4 = SWIG_AsVal_size_t(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "PythonBNListener_whenArcDeleted" "', argument " "4"" of type '" "gum::NodeId""'");
  } 
  arg4 = static_cast< gum::NodeId >(val4);
  {
    try {
      (arg1)->whenArcDeleted((void const *)arg2,SWIG_STD_MOVE(arg3),SWIG_STD_MOVE(arg4));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PythonBNListener_setWhenArcAdded(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PythonBNListener *arg1 = 0 ;
  PyObject *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "PythonBNListener_setWhenArcAdded", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PythonBNListener, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PythonBNListener_setWhenArcAdded" "', argument " "1"" of type '" "PythonBNListener *""'"); 
  }
  arg1 = reinterpret_cast< PythonBNListener * >(argp1);
  arg2 = swig_obj[1];
  {
    try {
      (arg1)->setWhenArcAdded(arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PythonBNListener_setWhenArcDeleted(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PythonBNListener *arg1 = 0 ;
  PyObject *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "PythonBNListener_setWhenArcDeleted", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PythonBNListener, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PythonBNListener_setWhenArcDeleted" "', argument " "1"" of type '" "PythonBNListener *""'"); 
  }
  arg1 = reinterpret_cast< PythonBNListener * >(argp1);
  arg2 = swig_obj[1];
  {
    try {
      (arg1)->setWhenArcDeleted(arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PythonBNListener_setWhenNodeAdded(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PythonBNListener *arg1 = 0 ;
  PyObject *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "PythonBNListener_setWhenNodeAdded", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PythonBNListener, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PythonBNListener_setWhenNodeAdded" "', argument " "1"" of type '" "PythonBNListener *""'"); 
  }
  arg1 = reinterpret_cast< PythonBNListener * >(argp1);
  arg2 = swig_obj[1];
  {
    try {
      (arg1)->setWhenNodeAdded(arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PythonBNListener_setWhenNodeDeleted(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PythonBNListener *arg1 = 0 ;
  PyObject *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "PythonBNListener_setWhenNodeDeleted", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PythonBNListener, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PythonBNListener_setWhenNodeDeleted" "', argument " "1"" of type '" "PythonBNListener *""'"); 
  }
  arg1 = reinterpret_cast< PythonBNListener * >(argp1);
  arg2 = swig_obj[1];
  {
    try {
      (arg1)->setWhenNodeDeleted(arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *PythonBNListener_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj = NULL;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_PythonBNListener, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *PythonBNListener_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_PythonLoadListener_whenLoading(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PythonLoadListener *arg1 = 0 ;
  void *arg2 = 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "PythonLoadListener_whenLoading", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PythonLoadListener, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PythonLoadListener_whenLoading" "', argument " "1"" of type '" "PythonLoadListener *""'"); 
  }
  arg1 = reinterpret_cast< PythonLoadListener * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1],SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PythonLoadListener_whenLoading" "', argument " "2"" of type '" "void const *""'"); 
  }
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PythonLoadListener_whenLoading" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (arg1)->whenLoading((void const *)arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PythonLoadListener_setPythonListener(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PythonLoadListener *arg1 = 0 ;
  PyObject *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "PythonLoadListener_setPythonListener", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PythonLoadListener, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PythonLoadListener_setPythonListener" "', argument " "1"" of type '" "PythonLoadListener *""'"); 
  }
  arg1 = reinterpret_cast< PythonLoadListener * >(argp1);
  arg2 = swig_obj[1];
  {
    try {
      result = (bool)(arg1)->setPythonListener(arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PythonLoadListener(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PythonLoadListener *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "new_PythonLoadListener", 0, 0, 0)) SWIG_fail;
  {
    try {
      result = (PythonLoadListener *)new PythonLoadListener();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PythonLoadListener, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_PythonLoadListener(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PythonLoadListener *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PythonLoadListener, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PythonLoadListener" "', argument " "1"" of type '" "PythonLoadListener *""'"); 
  }
  arg1 = reinterpret_cast< PythonLoadListener * >(argp1);
  {
    try {
      delete arg1;
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *PythonLoadListener_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj = NULL;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_PythonLoadListener, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *PythonLoadListener_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap__fillLoadListeners_(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< PythonLoadListener,std::allocator< PythonLoadListener > > *arg1 = 0 ;
  PyObject *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "_fillLoadListeners_", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_PythonLoadListener_std__allocatorT_PythonLoadListener_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_fillLoadListeners_" "', argument " "1"" of type '" "std::vector< PythonLoadListener,std::allocator< PythonLoadListener > > &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "_fillLoadListeners_" "', argument " "1"" of type '" "std::vector< PythonLoadListener,std::allocator< PythonLoadListener > > &""'"); 
  }
  arg1 = reinterpret_cast< std::vector< PythonLoadListener,std::allocator< PythonLoadListener > > * >(argp1);
  arg2 = swig_obj[1];
  {
    try {
      result = (int)_fillLoadListeners_(*arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PythonApproximationListener(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::IApproximationSchemeConfiguration *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PythonApproximationListener *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_gum__IApproximationSchemeConfiguration,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PythonApproximationListener" "', argument " "1"" of type '" "gum::IApproximationSchemeConfiguration &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "new_PythonApproximationListener" "', argument " "1"" of type '" "gum::IApproximationSchemeConfiguration &""'"); 
  }
  arg1 = reinterpret_cast< gum::IApproximationSchemeConfiguration * >(argp1);
  {
    try {
      result = (PythonApproximationListener *)new PythonApproximationListener(*arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PythonApproximationListener, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_PythonApproximationListener(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PythonApproximationListener *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PythonApproximationListener, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PythonApproximationListener" "', argument " "1"" of type '" "PythonApproximationListener *""'"); 
  }
  arg1 = reinterpret_cast< PythonApproximationListener * >(argp1);
  {
    try {
      delete arg1;
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PythonApproximationListener_whenProgress(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PythonApproximationListener *arg1 = 0 ;
  void *arg2 = 0 ;
  gum::Size arg3 ;
  double arg4 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject *swig_obj[5] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "PythonApproximationListener_whenProgress", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PythonApproximationListener, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PythonApproximationListener_whenProgress" "', argument " "1"" of type '" "PythonApproximationListener *""'"); 
  }
  arg1 = reinterpret_cast< PythonApproximationListener * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1],SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PythonApproximationListener_whenProgress" "', argument " "2"" of type '" "void const *""'"); 
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PythonApproximationListener_whenProgress" "', argument " "3"" of type '" "gum::Size""'");
  } 
  arg3 = static_cast< gum::Size >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "PythonApproximationListener_whenProgress" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "PythonApproximationListener_whenProgress" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    try {
      (arg1)->whenProgress((void const *)arg2,SWIG_STD_MOVE(arg3),arg4,arg5);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PythonApproximationListener_whenStop(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PythonApproximationListener *arg1 = 0 ;
  void *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "PythonApproximationListener_whenStop", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PythonApproximationListener, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PythonApproximationListener_whenStop" "', argument " "1"" of type '" "PythonApproximationListener *""'"); 
  }
  arg1 = reinterpret_cast< PythonApproximationListener * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1],SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PythonApproximationListener_whenStop" "', argument " "2"" of type '" "void const *""'"); 
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PythonApproximationListener_whenStop" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "PythonApproximationListener_whenStop" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->whenStop((void const *)arg2,(std::string const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PythonApproximationListener_setWhenProgress(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PythonApproximationListener *arg1 = 0 ;
  PyObject *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "PythonApproximationListener_setWhenProgress", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PythonApproximationListener, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PythonApproximationListener_setWhenProgress" "', argument " "1"" of type '" "PythonApproximationListener *""'"); 
  }
  arg1 = reinterpret_cast< PythonApproximationListener * >(argp1);
  arg2 = swig_obj[1];
  {
    try {
      (arg1)->setWhenProgress(arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PythonApproximationListener_setWhenStop(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PythonApproximationListener *arg1 = 0 ;
  PyObject *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "PythonApproximationListener_setWhenStop", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PythonApproximationListener, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PythonApproximationListener_setWhenStop" "', argument " "1"" of type '" "PythonApproximationListener *""'"); 
  }
  arg1 = reinterpret_cast< PythonApproximationListener * >(argp1);
  arg2 = swig_obj[1];
  {
    try {
      (arg1)->setWhenStop(arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *PythonApproximationListener_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj = NULL;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_PythonApproximationListener, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *PythonApproximationListener_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_PythonDatabaseGeneratorListener(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNDatabaseGenerator< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PythonDatabaseGeneratorListener *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_gum__learning__BNDatabaseGeneratorT_double_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PythonDatabaseGeneratorListener" "', argument " "1"" of type '" "gum::learning::BNDatabaseGenerator< double > &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "new_PythonDatabaseGeneratorListener" "', argument " "1"" of type '" "gum::learning::BNDatabaseGenerator< double > &""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNDatabaseGenerator< double > * >(argp1);
  {
    try {
      result = (PythonDatabaseGeneratorListener *)new PythonDatabaseGeneratorListener(*arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PythonDatabaseGeneratorListener, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_PythonDatabaseGeneratorListener(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PythonDatabaseGeneratorListener *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PythonDatabaseGeneratorListener, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PythonDatabaseGeneratorListener" "', argument " "1"" of type '" "PythonDatabaseGeneratorListener *""'"); 
  }
  arg1 = reinterpret_cast< PythonDatabaseGeneratorListener * >(argp1);
  {
    try {
      delete arg1;
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PythonDatabaseGeneratorListener_whenProgress(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PythonDatabaseGeneratorListener *arg1 = 0 ;
  void *arg2 = 0 ;
  gum::Size arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "PythonDatabaseGeneratorListener_whenProgress", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PythonDatabaseGeneratorListener, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PythonDatabaseGeneratorListener_whenProgress" "', argument " "1"" of type '" "PythonDatabaseGeneratorListener *""'"); 
  }
  arg1 = reinterpret_cast< PythonDatabaseGeneratorListener * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1],SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PythonDatabaseGeneratorListener_whenProgress" "', argument " "2"" of type '" "void const *""'"); 
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PythonDatabaseGeneratorListener_whenProgress" "', argument " "3"" of type '" "gum::Size""'");
  } 
  arg3 = static_cast< gum::Size >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "PythonDatabaseGeneratorListener_whenProgress" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      (arg1)->whenProgress((void const *)arg2,SWIG_STD_MOVE(arg3),arg4);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PythonDatabaseGeneratorListener_whenStop(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PythonDatabaseGeneratorListener *arg1 = 0 ;
  void *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "PythonDatabaseGeneratorListener_whenStop", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PythonDatabaseGeneratorListener, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PythonDatabaseGeneratorListener_whenStop" "', argument " "1"" of type '" "PythonDatabaseGeneratorListener *""'"); 
  }
  arg1 = reinterpret_cast< PythonDatabaseGeneratorListener * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1],SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PythonDatabaseGeneratorListener_whenStop" "', argument " "2"" of type '" "void const *""'"); 
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PythonDatabaseGeneratorListener_whenStop" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "PythonDatabaseGeneratorListener_whenStop" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->whenStop((void const *)arg2,(std::string const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PythonDatabaseGeneratorListener_setWhenProgress(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PythonDatabaseGeneratorListener *arg1 = 0 ;
  PyObject *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "PythonDatabaseGeneratorListener_setWhenProgress", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PythonDatabaseGeneratorListener, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PythonDatabaseGeneratorListener_setWhenProgress" "', argument " "1"" of type '" "PythonDatabaseGeneratorListener *""'"); 
  }
  arg1 = reinterpret_cast< PythonDatabaseGeneratorListener * >(argp1);
  arg2 = swig_obj[1];
  {
    try {
      (arg1)->setWhenProgress(arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PythonDatabaseGeneratorListener_setWhenStop(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PythonDatabaseGeneratorListener *arg1 = 0 ;
  PyObject *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "PythonDatabaseGeneratorListener_setWhenStop", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PythonDatabaseGeneratorListener, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PythonDatabaseGeneratorListener_setWhenStop" "', argument " "1"" of type '" "PythonDatabaseGeneratorListener *""'"); 
  }
  arg1 = reinterpret_cast< PythonDatabaseGeneratorListener * >(argp1);
  arg2 = swig_obj[1];
  {
    try {
      (arg1)->setWhenStop(arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *PythonDatabaseGeneratorListener_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj = NULL;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_PythonDatabaseGeneratorListener, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *PythonDatabaseGeneratorListener_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_BNGenerator_generate__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  BNGenerator *arg1 = 0 ;
  gum::Size arg2 ;
  gum::Size arg3 ;
  gum::Size arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  gum::BayesNet< double > result;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_BNGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNGenerator_generate" "', argument " "1"" of type '" "BNGenerator *""'"); 
  }
  arg1 = reinterpret_cast< BNGenerator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BNGenerator_generate" "', argument " "2"" of type '" "gum::Size""'");
  } 
  arg2 = static_cast< gum::Size >(val2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BNGenerator_generate" "', argument " "3"" of type '" "gum::Size""'");
  } 
  arg3 = static_cast< gum::Size >(val3);
  ecode4 = SWIG_AsVal_size_t(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "BNGenerator_generate" "', argument " "4"" of type '" "gum::Size""'");
  } 
  arg4 = static_cast< gum::Size >(val4);
  {
    try {
      result = (arg1)->generate(SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),SWIG_STD_MOVE(arg4));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::BayesNet< double >(result)), SWIGTYPE_p_gum__BayesNetT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNGenerator_generate__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  BNGenerator *arg1 = 0 ;
  gum::Size arg2 ;
  gum::Size arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  gum::BayesNet< double > result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_BNGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNGenerator_generate" "', argument " "1"" of type '" "BNGenerator *""'"); 
  }
  arg1 = reinterpret_cast< BNGenerator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BNGenerator_generate" "', argument " "2"" of type '" "gum::Size""'");
  } 
  arg2 = static_cast< gum::Size >(val2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BNGenerator_generate" "', argument " "3"" of type '" "gum::Size""'");
  } 
  arg3 = static_cast< gum::Size >(val3);
  {
    try {
      result = (arg1)->generate(SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::BayesNet< double >(result)), SWIGTYPE_p_gum__BayesNetT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNGenerator_generate__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  BNGenerator *arg1 = 0 ;
  gum::Size arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  gum::BayesNet< double > result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_BNGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNGenerator_generate" "', argument " "1"" of type '" "BNGenerator *""'"); 
  }
  arg1 = reinterpret_cast< BNGenerator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BNGenerator_generate" "', argument " "2"" of type '" "gum::Size""'");
  } 
  arg2 = static_cast< gum::Size >(val2);
  {
    try {
      result = (arg1)->generate(SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::BayesNet< double >(result)), SWIGTYPE_p_gum__BayesNetT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNGenerator_generate__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  BNGenerator *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gum::BayesNet< double > result;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_BNGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNGenerator_generate" "', argument " "1"" of type '" "BNGenerator *""'"); 
  }
  arg1 = reinterpret_cast< BNGenerator * >(argp1);
  {
    try {
      result = (arg1)->generate();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::BayesNet< double >(result)), SWIGTYPE_p_gum__BayesNetT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNGenerator_generate(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "BNGenerator_generate", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    PyObject *retobj = _wrap_BNGenerator_generate__SWIG_3(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 2) {
    PyObject *retobj = _wrap_BNGenerator_generate__SWIG_2(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    PyObject *retobj = _wrap_BNGenerator_generate__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 4) {
    PyObject *retobj = _wrap_BNGenerator_generate__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'BNGenerator_generate'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BNGenerator::generate(gum::Size,gum::Size,gum::Size)\n"
    "    BNGenerator::generate(gum::Size,gum::Size)\n"
    "    BNGenerator::generate(gum::Size)\n"
    "    BNGenerator::generate()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_BNGenerator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  BNGenerator *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "new_BNGenerator", 0, 0, 0)) SWIG_fail;
  {
    try {
      result = (BNGenerator *)new BNGenerator();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BNGenerator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_BNGenerator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  BNGenerator *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_BNGenerator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_BNGenerator" "', argument " "1"" of type '" "BNGenerator *""'"); 
  }
  arg1 = reinterpret_cast< BNGenerator * >(argp1);
  {
    try {
      delete arg1;
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *BNGenerator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj = NULL;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BNGenerator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *BNGenerator_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_InformationTheory__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = 0 ;
  PyObject *arg2 = 0 ;
  PyObject *arg3 = 0 ;
  PyObject *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  InformationTheory *result = 0 ;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_gum__LazyPropagationT_double_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_InformationTheory" "', argument " "1"" of type '" "gum::LazyPropagation< double > &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "new_InformationTheory" "', argument " "1"" of type '" "gum::LazyPropagation< double > &""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  arg2 = swig_obj[1];
  arg3 = swig_obj[2];
  arg4 = swig_obj[3];
  {
    try {
      result = (InformationTheory *)new InformationTheory(*arg1,arg2,arg3,arg4);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_InformationTheory, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_InformationTheory__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = 0 ;
  PyObject *arg2 = 0 ;
  PyObject *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  InformationTheory *result = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_gum__LazyPropagationT_double_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_InformationTheory" "', argument " "1"" of type '" "gum::LazyPropagation< double > &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "new_InformationTheory" "', argument " "1"" of type '" "gum::LazyPropagation< double > &""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  arg2 = swig_obj[1];
  arg3 = swig_obj[2];
  {
    try {
      result = (InformationTheory *)new InformationTheory(*arg1,arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_InformationTheory, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_InformationTheory__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::ShaferShenoyMRFInference< double > *arg1 = 0 ;
  PyObject *arg2 = 0 ;
  PyObject *arg3 = 0 ;
  PyObject *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  InformationTheory *result = 0 ;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_gum__ShaferShenoyMRFInferenceT_double_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_InformationTheory" "', argument " "1"" of type '" "gum::ShaferShenoyMRFInference< double > &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "new_InformationTheory" "', argument " "1"" of type '" "gum::ShaferShenoyMRFInference< double > &""'"); 
  }
  arg1 = reinterpret_cast< gum::ShaferShenoyMRFInference< double > * >(argp1);
  arg2 = swig_obj[1];
  arg3 = swig_obj[2];
  arg4 = swig_obj[3];
  {
    try {
      result = (InformationTheory *)new InformationTheory(*arg1,arg2,arg3,arg4);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_InformationTheory, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_InformationTheory__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::ShaferShenoyMRFInference< double > *arg1 = 0 ;
  PyObject *arg2 = 0 ;
  PyObject *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  InformationTheory *result = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_gum__ShaferShenoyMRFInferenceT_double_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_InformationTheory" "', argument " "1"" of type '" "gum::ShaferShenoyMRFInference< double > &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "new_InformationTheory" "', argument " "1"" of type '" "gum::ShaferShenoyMRFInference< double > &""'"); 
  }
  arg1 = reinterpret_cast< gum::ShaferShenoyMRFInference< double > * >(argp1);
  arg2 = swig_obj[1];
  arg3 = swig_obj[2];
  {
    try {
      result = (InformationTheory *)new InformationTheory(*arg1,arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_InformationTheory, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_InformationTheory(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_InformationTheory", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__LazyPropagationT_double_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_1;
    PyObject *retobj = _wrap_new_InformationTheory__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
check_1:
  
  if (argc == 3) {
    PyObject *retobj = _wrap_new_InformationTheory__SWIG_3(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__ShaferShenoyMRFInferenceT_double_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_3;
    PyObject *retobj = _wrap_new_InformationTheory__SWIG_2(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
check_3:
  
  if (argc == 4) {
    PyObject *retobj = _wrap_new_InformationTheory__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_InformationTheory'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    InformationTheory::InformationTheory(gum::LazyPropagation< double > &,PyObject *,PyObject *,PyObject *)\n"
    "    InformationTheory::InformationTheory(gum::LazyPropagation< double > &,PyObject *,PyObject *)\n"
    "    InformationTheory::InformationTheory(gum::ShaferShenoyMRFInference< double > &,PyObject *,PyObject *,PyObject *)\n"
    "    InformationTheory::InformationTheory(gum::ShaferShenoyMRFInference< double > &,PyObject *,PyObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_InformationTheory_entropyXY(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  InformationTheory *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_InformationTheory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InformationTheory_entropyXY" "', argument " "1"" of type '" "InformationTheory *""'"); 
  }
  arg1 = reinterpret_cast< InformationTheory * >(argp1);
  {
    try {
      result = (double)(arg1)->entropyXY();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InformationTheory_entropyX(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  InformationTheory *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_InformationTheory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InformationTheory_entropyX" "', argument " "1"" of type '" "InformationTheory *""'"); 
  }
  arg1 = reinterpret_cast< InformationTheory * >(argp1);
  {
    try {
      result = (double)(arg1)->entropyX();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InformationTheory_entropyY(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  InformationTheory *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_InformationTheory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InformationTheory_entropyY" "', argument " "1"" of type '" "InformationTheory *""'"); 
  }
  arg1 = reinterpret_cast< InformationTheory * >(argp1);
  {
    try {
      result = (double)(arg1)->entropyY();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InformationTheory_entropyXgivenY(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  InformationTheory *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_InformationTheory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InformationTheory_entropyXgivenY" "', argument " "1"" of type '" "InformationTheory *""'"); 
  }
  arg1 = reinterpret_cast< InformationTheory * >(argp1);
  {
    try {
      result = (double)(arg1)->entropyXgivenY();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InformationTheory_entropyYgivenX(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  InformationTheory *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_InformationTheory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InformationTheory_entropyYgivenX" "', argument " "1"" of type '" "InformationTheory *""'"); 
  }
  arg1 = reinterpret_cast< InformationTheory * >(argp1);
  {
    try {
      result = (double)(arg1)->entropyYgivenX();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InformationTheory_mutualInformationXY(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  InformationTheory *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_InformationTheory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InformationTheory_mutualInformationXY" "', argument " "1"" of type '" "InformationTheory *""'"); 
  }
  arg1 = reinterpret_cast< InformationTheory * >(argp1);
  {
    try {
      result = (double)(arg1)->mutualInformationXY();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InformationTheory_variationOfInformationXY(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  InformationTheory *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_InformationTheory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InformationTheory_variationOfInformationXY" "', argument " "1"" of type '" "InformationTheory *""'"); 
  }
  arg1 = reinterpret_cast< InformationTheory * >(argp1);
  {
    try {
      result = (double)(arg1)->variationOfInformationXY();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InformationTheory_entropyXYgivenZ(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  InformationTheory *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_InformationTheory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InformationTheory_entropyXYgivenZ" "', argument " "1"" of type '" "InformationTheory *""'"); 
  }
  arg1 = reinterpret_cast< InformationTheory * >(argp1);
  {
    try {
      result = (double)(arg1)->entropyXYgivenZ();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InformationTheory_mutualInformationXYgivenZ(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  InformationTheory *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_InformationTheory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InformationTheory_mutualInformationXYgivenZ" "', argument " "1"" of type '" "InformationTheory *""'"); 
  }
  arg1 = reinterpret_cast< InformationTheory * >(argp1);
  {
    try {
      result = (double)(arg1)->mutualInformationXYgivenZ();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_InformationTheory(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  InformationTheory *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_InformationTheory, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_InformationTheory" "', argument " "1"" of type '" "InformationTheory *""'"); 
  }
  arg1 = reinterpret_cast< InformationTheory * >(argp1);
  {
    try {
      delete arg1;
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *InformationTheory_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj = NULL;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_InformationTheory, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *InformationTheory_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_PRMexplorer(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PRMexplorer *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "new_PRMexplorer", 0, 0, 0)) SWIG_fail;
  {
    try {
      result = (PRMexplorer *)new PRMexplorer();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PRMexplorer, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_PRMexplorer(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PRMexplorer *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PRMexplorer, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PRMexplorer" "', argument " "1"" of type '" "PRMexplorer *""'"); 
  }
  arg1 = reinterpret_cast< PRMexplorer * >(argp1);
  {
    try {
      delete arg1;
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRMexplorer_load__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  PRMexplorer *arg1 = 0 ;
  std::string arg2 ;
  std::string arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PRMexplorer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PRMexplorer_load" "', argument " "1"" of type '" "PRMexplorer *""'"); 
  }
  arg1 = reinterpret_cast< PRMexplorer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PRMexplorer_load" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PRMexplorer_load" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode4 = SWIG_AsVal_bool(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "PRMexplorer_load" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  {
    try {
      (arg1)->load(SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),arg4);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRMexplorer_load__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  PRMexplorer *arg1 = 0 ;
  std::string arg2 ;
  std::string arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PRMexplorer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PRMexplorer_load" "', argument " "1"" of type '" "PRMexplorer *""'"); 
  }
  arg1 = reinterpret_cast< PRMexplorer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PRMexplorer_load" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PRMexplorer_load" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (arg1)->load(SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRMexplorer_load__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  PRMexplorer *arg1 = 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PRMexplorer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PRMexplorer_load" "', argument " "1"" of type '" "PRMexplorer *""'"); 
  }
  arg1 = reinterpret_cast< PRMexplorer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PRMexplorer_load" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (arg1)->load(SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRMexplorer_load(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "PRMexplorer_load", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    PyObject *retobj = _wrap_PRMexplorer_load__SWIG_2(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    PyObject *retobj = _wrap_PRMexplorer_load__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 4) {
    PyObject *retobj = _wrap_PRMexplorer_load__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'PRMexplorer_load'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    PRMexplorer::load(std::string,std::string,bool)\n"
    "    PRMexplorer::load(std::string,std::string)\n"
    "    PRMexplorer::load(std::string)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PRMexplorer_isType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PRMexplorer *arg1 = 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "PRMexplorer_isType", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PRMexplorer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PRMexplorer_isType" "', argument " "1"" of type '" "PRMexplorer *""'"); 
  }
  arg1 = reinterpret_cast< PRMexplorer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PRMexplorer_isType" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (PyObject *)(arg1)->isType(SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRMexplorer_isClass(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PRMexplorer *arg1 = 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "PRMexplorer_isClass", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PRMexplorer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PRMexplorer_isClass" "', argument " "1"" of type '" "PRMexplorer *""'"); 
  }
  arg1 = reinterpret_cast< PRMexplorer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PRMexplorer_isClass" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (PyObject *)(arg1)->isClass(SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRMexplorer_isInterface(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PRMexplorer *arg1 = 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "PRMexplorer_isInterface", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PRMexplorer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PRMexplorer_isInterface" "', argument " "1"" of type '" "PRMexplorer *""'"); 
  }
  arg1 = reinterpret_cast< PRMexplorer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PRMexplorer_isInterface" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (PyObject *)(arg1)->isInterface(SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRMexplorer_classes(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PRMexplorer *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PRMexplorer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PRMexplorer_classes" "', argument " "1"" of type '" "PRMexplorer *""'"); 
  }
  arg1 = reinterpret_cast< PRMexplorer * >(argp1);
  {
    try {
      result = (PyObject *)(arg1)->classes();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRMexplorer_classAttributes(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PRMexplorer *arg1 = 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "PRMexplorer_classAttributes", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PRMexplorer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PRMexplorer_classAttributes" "', argument " "1"" of type '" "PRMexplorer *""'"); 
  }
  arg1 = reinterpret_cast< PRMexplorer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PRMexplorer_classAttributes" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (PyObject *)(arg1)->classAttributes(SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRMexplorer_isAttribute(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PRMexplorer *arg1 = 0 ;
  std::string arg2 ;
  std::string arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[3] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "PRMexplorer_isAttribute", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PRMexplorer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PRMexplorer_isAttribute" "', argument " "1"" of type '" "PRMexplorer *""'"); 
  }
  arg1 = reinterpret_cast< PRMexplorer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PRMexplorer_isAttribute" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PRMexplorer_isAttribute" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (PyObject *)(arg1)->isAttribute(SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRMexplorer_classReferences(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PRMexplorer *arg1 = 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "PRMexplorer_classReferences", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PRMexplorer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PRMexplorer_classReferences" "', argument " "1"" of type '" "PRMexplorer *""'"); 
  }
  arg1 = reinterpret_cast< PRMexplorer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PRMexplorer_classReferences" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (PyObject *)(arg1)->classReferences(SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRMexplorer_classParameters(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PRMexplorer *arg1 = 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "PRMexplorer_classParameters", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PRMexplorer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PRMexplorer_classParameters" "', argument " "1"" of type '" "PRMexplorer *""'"); 
  }
  arg1 = reinterpret_cast< PRMexplorer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PRMexplorer_classParameters" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (PyObject *)(arg1)->classParameters(SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRMexplorer_classImplements(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PRMexplorer *arg1 = 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "PRMexplorer_classImplements", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PRMexplorer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PRMexplorer_classImplements" "', argument " "1"" of type '" "PRMexplorer *""'"); 
  }
  arg1 = reinterpret_cast< PRMexplorer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PRMexplorer_classImplements" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (PyObject *)(arg1)->classImplements(SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRMexplorer_aggType_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PRMexplorer *arg1 = 0 ;
  std::string *arg2 = (std::string *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "PRMexplorer_aggType_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PRMexplorer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PRMexplorer_aggType_set" "', argument " "1"" of type '" "PRMexplorer *""'"); 
  }
  arg1 = reinterpret_cast< PRMexplorer * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_std__string, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PRMexplorer_aggType_set" "', argument " "2"" of type '" "std::string [9]""'"); 
  } 
  arg2 = reinterpret_cast< std::string * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)9; ++ii) *(std::string *)&arg1->aggType[ii] = *((std::string *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in variable '""aggType""' of type '""std::string [9]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRMexplorer_aggType_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PRMexplorer *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PRMexplorer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PRMexplorer_aggType_get" "', argument " "1"" of type '" "PRMexplorer *""'"); 
  }
  arg1 = reinterpret_cast< PRMexplorer * >(argp1);
  result = (std::string *)(std::string *) ((arg1)->aggType);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRMexplorer_classAggregates(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PRMexplorer *arg1 = 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "PRMexplorer_classAggregates", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PRMexplorer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PRMexplorer_classAggregates" "', argument " "1"" of type '" "PRMexplorer *""'"); 
  }
  arg1 = reinterpret_cast< PRMexplorer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PRMexplorer_classAggregates" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (PyObject *)(arg1)->classAggregates(SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRMexplorer_classSlotChains(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PRMexplorer *arg1 = 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "PRMexplorer_classSlotChains", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PRMexplorer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PRMexplorer_classSlotChains" "', argument " "1"" of type '" "PRMexplorer *""'"); 
  }
  arg1 = reinterpret_cast< PRMexplorer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PRMexplorer_classSlotChains" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (PyObject *)(arg1)->classSlotChains(SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRMexplorer_classDag(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PRMexplorer *arg1 = 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "PRMexplorer_classDag", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PRMexplorer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PRMexplorer_classDag" "', argument " "1"" of type '" "PRMexplorer *""'"); 
  }
  arg1 = reinterpret_cast< PRMexplorer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PRMexplorer_classDag" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (PyObject *)(arg1)->classDag(SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRMexplorer_getalltheSystems(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PRMexplorer *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PRMexplorer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PRMexplorer_getalltheSystems" "', argument " "1"" of type '" "PRMexplorer *""'"); 
  }
  arg1 = reinterpret_cast< PRMexplorer * >(argp1);
  {
    try {
      result = (PyObject *)(arg1)->getalltheSystems();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRMexplorer_getSuperClass(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PRMexplorer *arg1 = 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "PRMexplorer_getSuperClass", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PRMexplorer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PRMexplorer_getSuperClass" "', argument " "1"" of type '" "PRMexplorer *""'"); 
  }
  arg1 = reinterpret_cast< PRMexplorer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PRMexplorer_getSuperClass" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (PyObject *)(arg1)->getSuperClass(SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRMexplorer_getDirectSubClass(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PRMexplorer *arg1 = 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "PRMexplorer_getDirectSubClass", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PRMexplorer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PRMexplorer_getDirectSubClass" "', argument " "1"" of type '" "PRMexplorer *""'"); 
  }
  arg1 = reinterpret_cast< PRMexplorer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PRMexplorer_getDirectSubClass" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (PyObject *)(arg1)->getDirectSubClass(SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRMexplorer_cpf(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PRMexplorer *arg1 = 0 ;
  std::string arg2 ;
  std::string arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[3] ;
  gum::Tensor< double > *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "PRMexplorer_cpf", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PRMexplorer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PRMexplorer_cpf" "', argument " "1"" of type '" "PRMexplorer *""'"); 
  }
  arg1 = reinterpret_cast< PRMexplorer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PRMexplorer_cpf" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PRMexplorer_cpf" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (gum::Tensor< double > *) &(arg1)->cpf(SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__TensorT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRMexplorer_types(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PRMexplorer *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PRMexplorer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PRMexplorer_types" "', argument " "1"" of type '" "PRMexplorer *""'"); 
  }
  arg1 = reinterpret_cast< PRMexplorer * >(argp1);
  {
    try {
      result = (PyObject *)(arg1)->types();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRMexplorer_getSuperType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PRMexplorer *arg1 = 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "PRMexplorer_getSuperType", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PRMexplorer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PRMexplorer_getSuperType" "', argument " "1"" of type '" "PRMexplorer *""'"); 
  }
  arg1 = reinterpret_cast< PRMexplorer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PRMexplorer_getSuperType" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (PyObject *)(arg1)->getSuperType(SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRMexplorer_getDirectSubTypes(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PRMexplorer *arg1 = 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "PRMexplorer_getDirectSubTypes", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PRMexplorer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PRMexplorer_getDirectSubTypes" "', argument " "1"" of type '" "PRMexplorer *""'"); 
  }
  arg1 = reinterpret_cast< PRMexplorer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PRMexplorer_getDirectSubTypes" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (PyObject *)(arg1)->getDirectSubTypes(SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRMexplorer_getLabels(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PRMexplorer *arg1 = 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "PRMexplorer_getLabels", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PRMexplorer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PRMexplorer_getLabels" "', argument " "1"" of type '" "PRMexplorer *""'"); 
  }
  arg1 = reinterpret_cast< PRMexplorer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PRMexplorer_getLabels" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (PyObject *)(arg1)->getLabels(SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRMexplorer_getLabelMap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PRMexplorer *arg1 = 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "PRMexplorer_getLabelMap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PRMexplorer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PRMexplorer_getLabelMap" "', argument " "1"" of type '" "PRMexplorer *""'"); 
  }
  arg1 = reinterpret_cast< PRMexplorer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PRMexplorer_getLabelMap" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (PyObject *)(arg1)->getLabelMap(SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRMexplorer_interfaces(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PRMexplorer *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PRMexplorer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PRMexplorer_interfaces" "', argument " "1"" of type '" "PRMexplorer *""'"); 
  }
  arg1 = reinterpret_cast< PRMexplorer * >(argp1);
  {
    try {
      result = (PyObject *)(arg1)->interfaces();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRMexplorer_interAttributes__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  PRMexplorer *arg1 = 0 ;
  std::string arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject *result = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PRMexplorer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PRMexplorer_interAttributes" "', argument " "1"" of type '" "PRMexplorer *""'"); 
  }
  arg1 = reinterpret_cast< PRMexplorer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PRMexplorer_interAttributes" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PRMexplorer_interAttributes" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      result = (PyObject *)(arg1)->interAttributes(SWIG_STD_MOVE(arg2),arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRMexplorer_interAttributes__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  PRMexplorer *arg1 = 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PRMexplorer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PRMexplorer_interAttributes" "', argument " "1"" of type '" "PRMexplorer *""'"); 
  }
  arg1 = reinterpret_cast< PRMexplorer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PRMexplorer_interAttributes" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (PyObject *)(arg1)->interAttributes(SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRMexplorer_interAttributes(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "PRMexplorer_interAttributes", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    PyObject *retobj = _wrap_PRMexplorer_interAttributes__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    PyObject *retobj = _wrap_PRMexplorer_interAttributes__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'PRMexplorer_interAttributes'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    PRMexplorer::interAttributes(std::string,bool)\n"
    "    PRMexplorer::interAttributes(std::string)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PRMexplorer_interReferences(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PRMexplorer *arg1 = 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "PRMexplorer_interReferences", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PRMexplorer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PRMexplorer_interReferences" "', argument " "1"" of type '" "PRMexplorer *""'"); 
  }
  arg1 = reinterpret_cast< PRMexplorer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PRMexplorer_interReferences" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (PyObject *)(arg1)->interReferences(SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRMexplorer_getSuperInterface(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PRMexplorer *arg1 = 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "PRMexplorer_getSuperInterface", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PRMexplorer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PRMexplorer_getSuperInterface" "', argument " "1"" of type '" "PRMexplorer *""'"); 
  }
  arg1 = reinterpret_cast< PRMexplorer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PRMexplorer_getSuperInterface" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (PyObject *)(arg1)->getSuperInterface(SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRMexplorer_getDirectSubInterfaces(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PRMexplorer *arg1 = 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "PRMexplorer_getDirectSubInterfaces", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PRMexplorer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PRMexplorer_getDirectSubInterfaces" "', argument " "1"" of type '" "PRMexplorer *""'"); 
  }
  arg1 = reinterpret_cast< PRMexplorer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PRMexplorer_getDirectSubInterfaces" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (PyObject *)(arg1)->getDirectSubInterfaces(SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRMexplorer_getImplementations(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PRMexplorer *arg1 = 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "PRMexplorer_getImplementations", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PRMexplorer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PRMexplorer_getImplementations" "', argument " "1"" of type '" "PRMexplorer *""'"); 
  }
  arg1 = reinterpret_cast< PRMexplorer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PRMexplorer_getImplementations" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (PyObject *)(arg1)->getImplementations(SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *PRMexplorer_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj = NULL;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_PRMexplorer, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *PRMexplorer_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_EssentialGraph__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  gum::EssentialGraph *result = 0 ;
  
  (void)self;
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (gum::EssentialGraph *)new gum::EssentialGraph();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__EssentialGraph, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_EssentialGraph__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::DAGmodel *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gum::EssentialGraph *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_gum__DAGmodel,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_EssentialGraph" "', argument " "1"" of type '" "gum::DAGmodel const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "new_EssentialGraph" "', argument " "1"" of type '" "gum::DAGmodel const &""'"); 
  }
  arg1 = reinterpret_cast< gum::DAGmodel * >(argp1);
  {
    try {
      result = (gum::EssentialGraph *)new gum::EssentialGraph((gum::DAGmodel const &)*arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__EssentialGraph, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_EssentialGraph__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::DAGmodel *arg1 = 0 ;
  gum::PDAG *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  gum::EssentialGraph *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_gum__DAGmodel,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_EssentialGraph" "', argument " "1"" of type '" "gum::DAGmodel const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "new_EssentialGraph" "', argument " "1"" of type '" "gum::DAGmodel const &""'"); 
  }
  arg1 = reinterpret_cast< gum::DAGmodel * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_gum__PDAG,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_EssentialGraph" "', argument " "2"" of type '" "gum::PDAG const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "new_EssentialGraph" "', argument " "2"" of type '" "gum::PDAG const &""'"); 
  }
  arg2 = reinterpret_cast< gum::PDAG * >(argp2);
  {
    try {
      result = (gum::EssentialGraph *)new gum::EssentialGraph((gum::DAGmodel const &)*arg1,(gum::PDAG const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__EssentialGraph, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_EssentialGraph__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::EssentialGraph *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gum::EssentialGraph *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_gum__EssentialGraph,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_EssentialGraph" "', argument " "1"" of type '" "gum::EssentialGraph const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "new_EssentialGraph" "', argument " "1"" of type '" "gum::EssentialGraph const &""'"); 
  }
  arg1 = reinterpret_cast< gum::EssentialGraph * >(argp1);
  {
    try {
      result = (gum::EssentialGraph *)new gum::EssentialGraph((gum::EssentialGraph const &)*arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__EssentialGraph, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_EssentialGraph(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_EssentialGraph", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    PyObject *retobj = _wrap_new_EssentialGraph__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_gum__DAGmodel, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_2;
    return _wrap_new_EssentialGraph__SWIG_1(self, argc, argv);
  }
check_2:
  
  if (argc == 1) {
    PyObject *retobj = _wrap_new_EssentialGraph__SWIG_3(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 2) {
    PyObject *retobj = _wrap_new_EssentialGraph__SWIG_2(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_EssentialGraph'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::EssentialGraph::EssentialGraph()\n"
    "    gum::EssentialGraph::EssentialGraph(gum::DAGmodel const &)\n"
    "    gum::EssentialGraph::EssentialGraph(gum::DAGmodel const &,gum::PDAG const &)\n"
    "    gum::EssentialGraph::EssentialGraph(gum::EssentialGraph const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_EssentialGraph(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::EssentialGraph *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__EssentialGraph, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_EssentialGraph" "', argument " "1"" of type '" "gum::EssentialGraph *""'"); 
  }
  arg1 = reinterpret_cast< gum::EssentialGraph * >(argp1);
  {
    try {
      delete arg1;
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EssentialGraph_pdag(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::EssentialGraph *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::PDAG result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__EssentialGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EssentialGraph_pdag" "', argument " "1"" of type '" "gum::EssentialGraph const *""'"); 
  }
  arg1 = reinterpret_cast< gum::EssentialGraph * >(argp1);
  {
    try {
      result = ((gum::EssentialGraph const *)arg1)->pdag();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::PDAG(result)), SWIGTYPE_p_gum__PDAG, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EssentialGraph_toDot(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::EssentialGraph *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__EssentialGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EssentialGraph_toDot" "', argument " "1"" of type '" "gum::EssentialGraph const *""'"); 
  }
  arg1 = reinterpret_cast< gum::EssentialGraph * >(argp1);
  {
    try {
      result = ((gum::EssentialGraph const *)arg1)->toDot();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EssentialGraph_sizeArcs(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::EssentialGraph *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::Size result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__EssentialGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EssentialGraph_sizeArcs" "', argument " "1"" of type '" "gum::EssentialGraph const *""'"); 
  }
  arg1 = reinterpret_cast< gum::EssentialGraph * >(argp1);
  {
    try {
      result = ((gum::EssentialGraph const *)arg1)->sizeArcs();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EssentialGraph_sizeEdges(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::EssentialGraph *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::Size result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__EssentialGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EssentialGraph_sizeEdges" "', argument " "1"" of type '" "gum::EssentialGraph const *""'"); 
  }
  arg1 = reinterpret_cast< gum::EssentialGraph * >(argp1);
  {
    try {
      result = ((gum::EssentialGraph const *)arg1)->sizeEdges();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EssentialGraph_sizeNodes(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::EssentialGraph *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::Size result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__EssentialGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EssentialGraph_sizeNodes" "', argument " "1"" of type '" "gum::EssentialGraph const *""'"); 
  }
  arg1 = reinterpret_cast< gum::EssentialGraph * >(argp1);
  {
    try {
      result = ((gum::EssentialGraph const *)arg1)->sizeNodes();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EssentialGraph_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::EssentialGraph *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::Size result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__EssentialGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EssentialGraph_size" "', argument " "1"" of type '" "gum::EssentialGraph const *""'"); 
  }
  arg1 = reinterpret_cast< gum::EssentialGraph * >(argp1);
  {
    try {
      result = ((gum::EssentialGraph const *)arg1)->size();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EssentialGraph_skeleton(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::EssentialGraph *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::UndiGraph result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__EssentialGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EssentialGraph_skeleton" "', argument " "1"" of type '" "gum::EssentialGraph const *""'"); 
  }
  arg1 = reinterpret_cast< gum::EssentialGraph * >(argp1);
  {
    try {
      result = ((gum::EssentialGraph const *)arg1)->skeleton();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::UndiGraph(result)), SWIGTYPE_p_gum__UndiGraph, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EssentialGraph_idFromName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::EssentialGraph *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  gum::NodeId result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "EssentialGraph_idFromName", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__EssentialGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EssentialGraph_idFromName" "', argument " "1"" of type '" "gum::EssentialGraph const *""'"); 
  }
  arg1 = reinterpret_cast< gum::EssentialGraph * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EssentialGraph_idFromName" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "EssentialGraph_idFromName" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = ((gum::EssentialGraph const *)arg1)->idFromName((std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_EssentialGraph_nameFromId(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::EssentialGraph *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  std::string *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "EssentialGraph_nameFromId", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__EssentialGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EssentialGraph_nameFromId" "', argument " "1"" of type '" "gum::EssentialGraph const *""'"); 
  }
  arg1 = reinterpret_cast< gum::EssentialGraph * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EssentialGraph_nameFromId" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (std::string *) &((gum::EssentialGraph const *)arg1)->nameFromId(SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EssentialGraph_nodes(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::EssentialGraph *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__EssentialGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EssentialGraph_nodes" "', argument " "1"" of type '" "gum::EssentialGraph const *""'"); 
  }
  arg1 = reinterpret_cast< gum::EssentialGraph * >(argp1);
  {
    try {
      result = (PyObject *)gum_EssentialGraph_nodes((gum::EssentialGraph const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EssentialGraph_arcs(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::EssentialGraph *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__EssentialGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EssentialGraph_arcs" "', argument " "1"" of type '" "gum::EssentialGraph const *""'"); 
  }
  arg1 = reinterpret_cast< gum::EssentialGraph * >(argp1);
  {
    try {
      result = (PyObject *)gum_EssentialGraph_arcs((gum::EssentialGraph const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EssentialGraph_parents(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::EssentialGraph *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "EssentialGraph_parents", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__EssentialGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EssentialGraph_parents" "', argument " "1"" of type '" "gum::EssentialGraph const *""'"); 
  }
  arg1 = reinterpret_cast< gum::EssentialGraph * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EssentialGraph_parents" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (PyObject *)gum_EssentialGraph_parents((gum::EssentialGraph const *)arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EssentialGraph_children(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::EssentialGraph *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "EssentialGraph_children", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__EssentialGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EssentialGraph_children" "', argument " "1"" of type '" "gum::EssentialGraph const *""'"); 
  }
  arg1 = reinterpret_cast< gum::EssentialGraph * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EssentialGraph_children" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (PyObject *)gum_EssentialGraph_children((gum::EssentialGraph const *)arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EssentialGraph_edges(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::EssentialGraph *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__EssentialGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EssentialGraph_edges" "', argument " "1"" of type '" "gum::EssentialGraph const *""'"); 
  }
  arg1 = reinterpret_cast< gum::EssentialGraph * >(argp1);
  {
    try {
      result = (PyObject *)gum_EssentialGraph_edges((gum::EssentialGraph const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EssentialGraph_neighbours(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::EssentialGraph *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "EssentialGraph_neighbours", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__EssentialGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EssentialGraph_neighbours" "', argument " "1"" of type '" "gum::EssentialGraph const *""'"); 
  }
  arg1 = reinterpret_cast< gum::EssentialGraph * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EssentialGraph_neighbours" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (PyObject *)gum_EssentialGraph_neighbours((gum::EssentialGraph const *)arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *EssentialGraph_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj = NULL;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gum__EssentialGraph, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *EssentialGraph_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_MarkovBlanket__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::DAGmodel *arg1 = 0 ;
  gum::NodeId arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  gum::MarkovBlanket *result = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_gum__DAGmodel,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MarkovBlanket" "', argument " "1"" of type '" "gum::DAGmodel const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "new_MarkovBlanket" "', argument " "1"" of type '" "gum::DAGmodel const &""'"); 
  }
  arg1 = reinterpret_cast< gum::DAGmodel * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_MarkovBlanket" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_MarkovBlanket" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (gum::MarkovBlanket *)new gum::MarkovBlanket((gum::DAGmodel const &)*arg1,SWIG_STD_MOVE(arg2),arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__MarkovBlanket, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MarkovBlanket__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::DAGmodel *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  gum::MarkovBlanket *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_gum__DAGmodel,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MarkovBlanket" "', argument " "1"" of type '" "gum::DAGmodel const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "new_MarkovBlanket" "', argument " "1"" of type '" "gum::DAGmodel const &""'"); 
  }
  arg1 = reinterpret_cast< gum::DAGmodel * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_MarkovBlanket" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (gum::MarkovBlanket *)new gum::MarkovBlanket((gum::DAGmodel const &)*arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__MarkovBlanket, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MarkovBlanket__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::DAGmodel *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int val3 ;
  int ecode3 = 0 ;
  gum::MarkovBlanket *result = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_gum__DAGmodel,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MarkovBlanket" "', argument " "1"" of type '" "gum::DAGmodel const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "new_MarkovBlanket" "', argument " "1"" of type '" "gum::DAGmodel const &""'"); 
  }
  arg1 = reinterpret_cast< gum::DAGmodel * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_MarkovBlanket" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "new_MarkovBlanket" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_MarkovBlanket" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (gum::MarkovBlanket *)new gum::MarkovBlanket((gum::DAGmodel const &)*arg1,(std::string const &)*arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__MarkovBlanket, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MarkovBlanket__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::DAGmodel *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  gum::MarkovBlanket *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_gum__DAGmodel,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MarkovBlanket" "', argument " "1"" of type '" "gum::DAGmodel const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "new_MarkovBlanket" "', argument " "1"" of type '" "gum::DAGmodel const &""'"); 
  }
  arg1 = reinterpret_cast< gum::DAGmodel * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_MarkovBlanket" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "new_MarkovBlanket" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (gum::MarkovBlanket *)new gum::MarkovBlanket((gum::DAGmodel const &)*arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__MarkovBlanket, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MarkovBlanket(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_MarkovBlanket", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_new_MarkovBlanket__SWIG_1(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_new_MarkovBlanket__SWIG_3(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_3;
    PyObject *retobj = _wrap_new_MarkovBlanket__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
check_3:
  
  if (argc == 3) {
    PyObject *retobj = _wrap_new_MarkovBlanket__SWIG_2(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_MarkovBlanket'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::MarkovBlanket::MarkovBlanket(gum::DAGmodel const &,gum::NodeId,int)\n"
    "    gum::MarkovBlanket::MarkovBlanket(gum::DAGmodel const &,gum::NodeId)\n"
    "    gum::MarkovBlanket::MarkovBlanket(gum::DAGmodel const &,std::string const &,int)\n"
    "    gum::MarkovBlanket::MarkovBlanket(gum::DAGmodel const &,std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_MarkovBlanket(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::MarkovBlanket *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__MarkovBlanket, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MarkovBlanket" "', argument " "1"" of type '" "gum::MarkovBlanket *""'"); 
  }
  arg1 = reinterpret_cast< gum::MarkovBlanket * >(argp1);
  {
    try {
      delete arg1;
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MarkovBlanket_dag(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::MarkovBlanket *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::DAG result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__MarkovBlanket, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MarkovBlanket_dag" "', argument " "1"" of type '" "gum::MarkovBlanket const *""'"); 
  }
  arg1 = reinterpret_cast< gum::MarkovBlanket * >(argp1);
  {
    try {
      result = ((gum::MarkovBlanket const *)arg1)->dag();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::DAG(result)), SWIGTYPE_p_gum__DAG, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MarkovBlanket_toDot(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::MarkovBlanket *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__MarkovBlanket, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MarkovBlanket_toDot" "', argument " "1"" of type '" "gum::MarkovBlanket const *""'"); 
  }
  arg1 = reinterpret_cast< gum::MarkovBlanket * >(argp1);
  {
    try {
      result = ((gum::MarkovBlanket const *)arg1)->toDot();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MarkovBlanket_sizeArcs(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::MarkovBlanket *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::Size result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__MarkovBlanket, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MarkovBlanket_sizeArcs" "', argument " "1"" of type '" "gum::MarkovBlanket const *""'"); 
  }
  arg1 = reinterpret_cast< gum::MarkovBlanket * >(argp1);
  {
    try {
      result = ((gum::MarkovBlanket const *)arg1)->sizeArcs();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MarkovBlanket_sizeNodes(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::MarkovBlanket *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::Size result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__MarkovBlanket, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MarkovBlanket_sizeNodes" "', argument " "1"" of type '" "gum::MarkovBlanket const *""'"); 
  }
  arg1 = reinterpret_cast< gum::MarkovBlanket * >(argp1);
  {
    try {
      result = ((gum::MarkovBlanket const *)arg1)->sizeNodes();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MarkovBlanket_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::MarkovBlanket *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::Size result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__MarkovBlanket, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MarkovBlanket_size" "', argument " "1"" of type '" "gum::MarkovBlanket const *""'"); 
  }
  arg1 = reinterpret_cast< gum::MarkovBlanket * >(argp1);
  {
    try {
      result = ((gum::MarkovBlanket const *)arg1)->size();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MarkovBlanket_hasSameStructure(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::MarkovBlanket *arg1 = 0 ;
  gum::DAGmodel *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "MarkovBlanket_hasSameStructure", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__MarkovBlanket, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MarkovBlanket_hasSameStructure" "', argument " "1"" of type '" "gum::MarkovBlanket const *""'"); 
  }
  arg1 = reinterpret_cast< gum::MarkovBlanket * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_gum__DAGmodel,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MarkovBlanket_hasSameStructure" "', argument " "2"" of type '" "gum::DAGmodel const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "MarkovBlanket_hasSameStructure" "', argument " "2"" of type '" "gum::DAGmodel const &""'"); 
  }
  arg2 = reinterpret_cast< gum::DAGmodel * >(argp2);
  {
    try {
      result = (bool)((gum::MarkovBlanket const *)arg1)->hasSameStructure((gum::DAGmodel const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MarkovBlanket_nodes(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::MarkovBlanket *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__MarkovBlanket, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MarkovBlanket_nodes" "', argument " "1"" of type '" "gum::MarkovBlanket const *""'"); 
  }
  arg1 = reinterpret_cast< gum::MarkovBlanket * >(argp1);
  {
    try {
      result = (PyObject *)gum_MarkovBlanket_nodes((gum::MarkovBlanket const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MarkovBlanket_arcs(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::MarkovBlanket *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__MarkovBlanket, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MarkovBlanket_arcs" "', argument " "1"" of type '" "gum::MarkovBlanket const *""'"); 
  }
  arg1 = reinterpret_cast< gum::MarkovBlanket * >(argp1);
  {
    try {
      result = (PyObject *)gum_MarkovBlanket_arcs((gum::MarkovBlanket const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MarkovBlanket_parents(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::MarkovBlanket *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "MarkovBlanket_parents", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__MarkovBlanket, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MarkovBlanket_parents" "', argument " "1"" of type '" "gum::MarkovBlanket const *""'"); 
  }
  arg1 = reinterpret_cast< gum::MarkovBlanket * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MarkovBlanket_parents" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (PyObject *)gum_MarkovBlanket_parents((gum::MarkovBlanket const *)arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MarkovBlanket_children(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::MarkovBlanket *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "MarkovBlanket_children", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__MarkovBlanket, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MarkovBlanket_children" "', argument " "1"" of type '" "gum::MarkovBlanket const *""'"); 
  }
  arg1 = reinterpret_cast< gum::MarkovBlanket * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MarkovBlanket_children" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (PyObject *)gum_MarkovBlanket_children((gum::MarkovBlanket const *)arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MarkovBlanket_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj = NULL;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gum__MarkovBlanket, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *MarkovBlanket_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_StructuralComparator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::StructuralComparator *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "new_StructuralComparator", 0, 0, 0)) SWIG_fail;
  {
    try {
      result = (gum::StructuralComparator *)new gum::StructuralComparator();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__StructuralComparator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_StructuralComparator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::StructuralComparator *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__StructuralComparator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_StructuralComparator" "', argument " "1"" of type '" "gum::StructuralComparator *""'"); 
  }
  arg1 = reinterpret_cast< gum::StructuralComparator * >(argp1);
  {
    try {
      delete arg1;
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StructuralComparator_compare__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::StructuralComparator *arg1 = 0 ;
  gum::DiGraph *arg2 = 0 ;
  gum::DiGraph *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__StructuralComparator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StructuralComparator_compare" "', argument " "1"" of type '" "gum::StructuralComparator *""'"); 
  }
  arg1 = reinterpret_cast< gum::StructuralComparator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_gum__DiGraph,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StructuralComparator_compare" "', argument " "2"" of type '" "gum::DiGraph const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "StructuralComparator_compare" "', argument " "2"" of type '" "gum::DiGraph const &""'"); 
  }
  arg2 = reinterpret_cast< gum::DiGraph * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_gum__DiGraph,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "StructuralComparator_compare" "', argument " "3"" of type '" "gum::DiGraph const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "StructuralComparator_compare" "', argument " "3"" of type '" "gum::DiGraph const &""'"); 
  }
  arg3 = reinterpret_cast< gum::DiGraph * >(argp3);
  {
    try {
      (arg1)->compare((gum::DiGraph const &)*arg2,(gum::DiGraph const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StructuralComparator_compare__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::StructuralComparator *arg1 = 0 ;
  gum::UndiGraph *arg2 = 0 ;
  gum::UndiGraph *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__StructuralComparator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StructuralComparator_compare" "', argument " "1"" of type '" "gum::StructuralComparator *""'"); 
  }
  arg1 = reinterpret_cast< gum::StructuralComparator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_gum__UndiGraph,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StructuralComparator_compare" "', argument " "2"" of type '" "gum::UndiGraph const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "StructuralComparator_compare" "', argument " "2"" of type '" "gum::UndiGraph const &""'"); 
  }
  arg2 = reinterpret_cast< gum::UndiGraph * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_gum__UndiGraph,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "StructuralComparator_compare" "', argument " "3"" of type '" "gum::UndiGraph const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "StructuralComparator_compare" "', argument " "3"" of type '" "gum::UndiGraph const &""'"); 
  }
  arg3 = reinterpret_cast< gum::UndiGraph * >(argp3);
  {
    try {
      (arg1)->compare((gum::UndiGraph const &)*arg2,(gum::UndiGraph const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StructuralComparator_compare__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::StructuralComparator *arg1 = 0 ;
  gum::PDAG *arg2 = 0 ;
  gum::PDAG *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__StructuralComparator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StructuralComparator_compare" "', argument " "1"" of type '" "gum::StructuralComparator *""'"); 
  }
  arg1 = reinterpret_cast< gum::StructuralComparator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_gum__PDAG,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StructuralComparator_compare" "', argument " "2"" of type '" "gum::PDAG const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "StructuralComparator_compare" "', argument " "2"" of type '" "gum::PDAG const &""'"); 
  }
  arg2 = reinterpret_cast< gum::PDAG * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_gum__PDAG,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "StructuralComparator_compare" "', argument " "3"" of type '" "gum::PDAG const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "StructuralComparator_compare" "', argument " "3"" of type '" "gum::PDAG const &""'"); 
  }
  arg3 = reinterpret_cast< gum::PDAG * >(argp3);
  {
    try {
      (arg1)->compare((gum::PDAG const &)*arg2,(gum::PDAG const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StructuralComparator_compare(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "StructuralComparator_compare", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_gum__PDAG, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_1;
    {
      int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_gum__PDAG, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_1;
    return _wrap_StructuralComparator_compare__SWIG_2(self, argc, argv);
  }
check_1:
  
  if (argc == 3) {
    int _v = 0;
    {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_gum__UndiGraph, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_2;
    {
      int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_gum__UndiGraph, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_2;
    return _wrap_StructuralComparator_compare__SWIG_1(self, argc, argv);
  }
check_2:
  
  if (argc == 3) {
    PyObject *retobj = _wrap_StructuralComparator_compare__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'StructuralComparator_compare'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::StructuralComparator::compare(gum::DiGraph const &,gum::DiGraph const &)\n"
    "    gum::StructuralComparator::compare(gum::UndiGraph const &,gum::UndiGraph const &)\n"
    "    gum::StructuralComparator::compare(gum::PDAG const &,gum::PDAG const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_StructuralComparator_precision_skeleton(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::StructuralComparator *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__StructuralComparator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StructuralComparator_precision_skeleton" "', argument " "1"" of type '" "gum::StructuralComparator const *""'"); 
  }
  arg1 = reinterpret_cast< gum::StructuralComparator * >(argp1);
  {
    try {
      result = (double)((gum::StructuralComparator const *)arg1)->precision_skeleton();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StructuralComparator_recall_skeleton(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::StructuralComparator *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__StructuralComparator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StructuralComparator_recall_skeleton" "', argument " "1"" of type '" "gum::StructuralComparator const *""'"); 
  }
  arg1 = reinterpret_cast< gum::StructuralComparator * >(argp1);
  {
    try {
      result = (double)((gum::StructuralComparator const *)arg1)->recall_skeleton();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StructuralComparator_f_score_skeleton(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::StructuralComparator *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__StructuralComparator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StructuralComparator_f_score_skeleton" "', argument " "1"" of type '" "gum::StructuralComparator const *""'"); 
  }
  arg1 = reinterpret_cast< gum::StructuralComparator * >(argp1);
  {
    try {
      result = (double)((gum::StructuralComparator const *)arg1)->f_score_skeleton();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StructuralComparator_precision(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::StructuralComparator *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__StructuralComparator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StructuralComparator_precision" "', argument " "1"" of type '" "gum::StructuralComparator const *""'"); 
  }
  arg1 = reinterpret_cast< gum::StructuralComparator * >(argp1);
  {
    try {
      result = (double)((gum::StructuralComparator const *)arg1)->precision();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StructuralComparator_recall(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::StructuralComparator *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__StructuralComparator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StructuralComparator_recall" "', argument " "1"" of type '" "gum::StructuralComparator const *""'"); 
  }
  arg1 = reinterpret_cast< gum::StructuralComparator * >(argp1);
  {
    try {
      result = (double)((gum::StructuralComparator const *)arg1)->recall();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StructuralComparator_f_score(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::StructuralComparator *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__StructuralComparator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StructuralComparator_f_score" "', argument " "1"" of type '" "gum::StructuralComparator const *""'"); 
  }
  arg1 = reinterpret_cast< gum::StructuralComparator * >(argp1);
  {
    try {
      result = (double)((gum::StructuralComparator const *)arg1)->f_score();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *StructuralComparator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj = NULL;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gum__StructuralComparator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *StructuralComparator_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_delete_IBayesNet(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::IBayesNet< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__IBayesNetT_double_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IBayesNet" "', argument " "1"" of type '" "gum::IBayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::IBayesNet< double > * >(argp1);
  {
    try {
      delete arg1;
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IBayesNet_cpt(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::IBayesNet< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  gum::Tensor< double > *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IBayesNet_cpt", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__IBayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IBayesNet_cpt" "', argument " "1"" of type '" "gum::IBayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::IBayesNet< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IBayesNet_cpt" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (gum::Tensor< double > *) &((gum::IBayesNet< double > const *)arg1)->cpt(SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__TensorT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IBayesNet_variableNodeMap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::IBayesNet< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::VariableNodeMap *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__IBayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IBayesNet_variableNodeMap" "', argument " "1"" of type '" "gum::IBayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::IBayesNet< double > * >(argp1);
  {
    try {
      result = (gum::VariableNodeMap *) &((gum::IBayesNet< double > const *)arg1)->variableNodeMap();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__VariableNodeMap, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IBayesNet_variable(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::IBayesNet< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  gum::DiscreteVariable *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IBayesNet_variable", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__IBayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IBayesNet_variable" "', argument " "1"" of type '" "gum::IBayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::IBayesNet< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IBayesNet_variable" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (gum::DiscreteVariable *) &((gum::IBayesNet< double > const *)arg1)->variable(SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__DiscreteVariable, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IBayesNet_nodeId(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::IBayesNet< double > *arg1 = 0 ;
  gum::DiscreteVariable *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  gum::NodeId result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IBayesNet_nodeId", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__IBayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IBayesNet_nodeId" "', argument " "1"" of type '" "gum::IBayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::IBayesNet< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_gum__DiscreteVariable,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IBayesNet_nodeId" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "IBayesNet_nodeId" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  arg2 = reinterpret_cast< gum::DiscreteVariable * >(argp2);
  {
    try {
      result = ((gum::IBayesNet< double > const *)arg1)->nodeId((gum::DiscreteVariable const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IBayesNet_idFromName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::IBayesNet< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  gum::NodeId result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IBayesNet_idFromName", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__IBayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IBayesNet_idFromName" "', argument " "1"" of type '" "gum::IBayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::IBayesNet< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IBayesNet_idFromName" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "IBayesNet_idFromName" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = ((gum::IBayesNet< double > const *)arg1)->idFromName((std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IBayesNet_variableFromName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::IBayesNet< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  gum::DiscreteVariable *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IBayesNet_variableFromName", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__IBayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IBayesNet_variableFromName" "', argument " "1"" of type '" "gum::IBayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::IBayesNet< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IBayesNet_variableFromName" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "IBayesNet_variableFromName" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (gum::DiscreteVariable *) &((gum::IBayesNet< double > const *)arg1)->variableFromName((std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__DiscreteVariable, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IBayesNet_jointProbability(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::IBayesNet< double > *arg1 = 0 ;
  gum::Instantiation *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IBayesNet_jointProbability", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__IBayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IBayesNet_jointProbability" "', argument " "1"" of type '" "gum::IBayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::IBayesNet< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_gum__Instantiation,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IBayesNet_jointProbability" "', argument " "2"" of type '" "gum::Instantiation const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "IBayesNet_jointProbability" "', argument " "2"" of type '" "gum::Instantiation const &""'"); 
  }
  arg2 = reinterpret_cast< gum::Instantiation * >(argp2);
  {
    try {
      result = (double)((gum::IBayesNet< double > const *)arg1)->jointProbability((gum::Instantiation const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IBayesNet_log2JointProbability(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::IBayesNet< double > *arg1 = 0 ;
  gum::Instantiation *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IBayesNet_log2JointProbability", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__IBayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IBayesNet_log2JointProbability" "', argument " "1"" of type '" "gum::IBayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::IBayesNet< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_gum__Instantiation,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IBayesNet_log2JointProbability" "', argument " "2"" of type '" "gum::Instantiation const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "IBayesNet_log2JointProbability" "', argument " "2"" of type '" "gum::Instantiation const &""'"); 
  }
  arg2 = reinterpret_cast< gum::Instantiation * >(argp2);
  {
    try {
      result = (double)((gum::IBayesNet< double > const *)arg1)->log2JointProbability((gum::Instantiation const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IBayesNet_check(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::IBayesNet< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::string,std::allocator< std::string > > result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__IBayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IBayesNet_check" "', argument " "1"" of type '" "gum::IBayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::IBayesNet< double > * >(argp1);
  {
    try {
      result = ((gum::IBayesNet< double > const *)arg1)->check();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< std::string,std::allocator< std::string > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IBayesNet___eq__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::IBayesNet< double > *arg1 = 0 ;
  gum::IBayesNet< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IBayesNet___eq__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__IBayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IBayesNet___eq__" "', argument " "1"" of type '" "gum::IBayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::IBayesNet< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_gum__IBayesNetT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IBayesNet___eq__" "', argument " "2"" of type '" "gum::IBayesNet< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "IBayesNet___eq__" "', argument " "2"" of type '" "gum::IBayesNet< double > const &""'"); 
  }
  arg2 = reinterpret_cast< gum::IBayesNet< double > * >(argp2);
  {
    try {
      result = (bool)((gum::IBayesNet< double > const *)arg1)->operator ==((gum::IBayesNet< double > const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  if (PyErr_Occurred() && !PyErr_ExceptionMatches(PyExc_TypeError)) {
    return NULL;
  }
  PyErr_Clear();
  SWIG_Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_IBayesNet___ne__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::IBayesNet< double > *arg1 = 0 ;
  gum::IBayesNet< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IBayesNet___ne__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__IBayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IBayesNet___ne__" "', argument " "1"" of type '" "gum::IBayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::IBayesNet< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_gum__IBayesNetT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IBayesNet___ne__" "', argument " "2"" of type '" "gum::IBayesNet< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "IBayesNet___ne__" "', argument " "2"" of type '" "gum::IBayesNet< double > const &""'"); 
  }
  arg2 = reinterpret_cast< gum::IBayesNet< double > * >(argp2);
  {
    try {
      result = (bool)((gum::IBayesNet< double > const *)arg1)->operator !=((gum::IBayesNet< double > const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  if (PyErr_Occurred() && !PyErr_ExceptionMatches(PyExc_TypeError)) {
    return NULL;
  }
  PyErr_Clear();
  SWIG_Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_IBayesNet_dim(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::IBayesNet< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::Size result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__IBayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IBayesNet_dim" "', argument " "1"" of type '" "gum::IBayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::IBayesNet< double > * >(argp1);
  {
    try {
      result = ((gum::IBayesNet< double > const *)arg1)->dim();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IBayesNet_maxVarDomainSize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::IBayesNet< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::Size result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__IBayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IBayesNet_maxVarDomainSize" "', argument " "1"" of type '" "gum::IBayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::IBayesNet< double > * >(argp1);
  {
    try {
      result = ((gum::IBayesNet< double > const *)arg1)->maxVarDomainSize();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IBayesNet_minParam(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::IBayesNet< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__IBayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IBayesNet_minParam" "', argument " "1"" of type '" "gum::IBayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::IBayesNet< double > * >(argp1);
  {
    try {
      result = (double)((gum::IBayesNet< double > const *)arg1)->minParam();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IBayesNet_maxParam(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::IBayesNet< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__IBayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IBayesNet_maxParam" "', argument " "1"" of type '" "gum::IBayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::IBayesNet< double > * >(argp1);
  {
    try {
      result = (double)((gum::IBayesNet< double > const *)arg1)->maxParam();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IBayesNet_minNonZeroParam(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::IBayesNet< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__IBayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IBayesNet_minNonZeroParam" "', argument " "1"" of type '" "gum::IBayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::IBayesNet< double > * >(argp1);
  {
    try {
      result = (double)((gum::IBayesNet< double > const *)arg1)->minNonZeroParam();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IBayesNet_maxNonOneParam(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::IBayesNet< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__IBayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IBayesNet_maxNonOneParam" "', argument " "1"" of type '" "gum::IBayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::IBayesNet< double > * >(argp1);
  {
    try {
      result = (double)((gum::IBayesNet< double > const *)arg1)->maxNonOneParam();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IBayesNet_toDot(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::IBayesNet< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__IBayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IBayesNet_toDot" "', argument " "1"" of type '" "gum::IBayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::IBayesNet< double > * >(argp1);
  {
    try {
      result = ((gum::IBayesNet< double > const *)arg1)->toDot();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IBayesNet_minimalCondSet__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::IBayesNet< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  gum::NodeSet *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  SwigValueWrapper< gum::Set< std::size_t > > result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__IBayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IBayesNet_minimalCondSet" "', argument " "1"" of type '" "gum::IBayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::IBayesNet< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IBayesNet_minimalCondSet" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_gum__SetT_std__size_t_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IBayesNet_minimalCondSet" "', argument " "3"" of type '" "gum::NodeSet const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "IBayesNet_minimalCondSet" "', argument " "3"" of type '" "gum::NodeSet const &""'"); 
  }
  arg3 = reinterpret_cast< gum::NodeSet * >(argp3);
  {
    try {
      result = ((gum::IBayesNet< double > const *)arg1)->minimalCondSet(SWIG_STD_MOVE(arg2),(gum::NodeSet const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::NodeSet(result)), SWIGTYPE_p_gum__SetT_std__size_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IBayesNet_minimalCondSet__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::IBayesNet< double > *arg1 = 0 ;
  gum::NodeSet *arg2 = 0 ;
  gum::NodeSet *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  SwigValueWrapper< gum::Set< std::size_t > > result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__IBayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IBayesNet_minimalCondSet" "', argument " "1"" of type '" "gum::IBayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::IBayesNet< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_gum__SetT_std__size_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IBayesNet_minimalCondSet" "', argument " "2"" of type '" "gum::NodeSet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "IBayesNet_minimalCondSet" "', argument " "2"" of type '" "gum::NodeSet const &""'"); 
  }
  arg2 = reinterpret_cast< gum::NodeSet * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_gum__SetT_std__size_t_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IBayesNet_minimalCondSet" "', argument " "3"" of type '" "gum::NodeSet const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "IBayesNet_minimalCondSet" "', argument " "3"" of type '" "gum::NodeSet const &""'"); 
  }
  arg3 = reinterpret_cast< gum::NodeSet * >(argp3);
  {
    try {
      result = ((gum::IBayesNet< double > const *)arg1)->minimalCondSet((gum::NodeSet const &)*arg2,(gum::NodeSet const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::NodeSet(result)), SWIGTYPE_p_gum__SetT_std__size_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IBayesNet_evEq(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::IBayesNet< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  gum::Tensor< double > result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IBayesNet_evEq", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__IBayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IBayesNet_evEq" "', argument " "1"" of type '" "gum::IBayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::IBayesNet< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IBayesNet_evEq" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "IBayesNet_evEq" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IBayesNet_evEq" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = ((gum::IBayesNet< double > const *)arg1)->evEq((std::string const &)*arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::Tensor< double >(result)), SWIGTYPE_p_gum__TensorT_double_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IBayesNet_evIn(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::IBayesNet< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  gum::Tensor< double > result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IBayesNet_evIn", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__IBayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IBayesNet_evIn" "', argument " "1"" of type '" "gum::IBayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::IBayesNet< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IBayesNet_evIn" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "IBayesNet_evIn" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IBayesNet_evIn" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IBayesNet_evIn" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      result = ((gum::IBayesNet< double > const *)arg1)->evIn((std::string const &)*arg2,arg3,arg4);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::Tensor< double >(result)), SWIGTYPE_p_gum__TensorT_double_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IBayesNet_evLt(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::IBayesNet< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  gum::Tensor< double > result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IBayesNet_evLt", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__IBayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IBayesNet_evLt" "', argument " "1"" of type '" "gum::IBayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::IBayesNet< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IBayesNet_evLt" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "IBayesNet_evLt" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IBayesNet_evLt" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = ((gum::IBayesNet< double > const *)arg1)->evLt((std::string const &)*arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::Tensor< double >(result)), SWIGTYPE_p_gum__TensorT_double_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IBayesNet_evGt(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::IBayesNet< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  gum::Tensor< double > result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IBayesNet_evGt", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__IBayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IBayesNet_evGt" "', argument " "1"" of type '" "gum::IBayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::IBayesNet< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IBayesNet_evGt" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "IBayesNet_evGt" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IBayesNet_evGt" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = ((gum::IBayesNet< double > const *)arg1)->evGt((std::string const &)*arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::Tensor< double >(result)), SWIGTYPE_p_gum__TensorT_double_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IBayesNet_memoryFootprint(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::IBayesNet< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::Size result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__IBayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IBayesNet_memoryFootprint" "', argument " "1"" of type '" "gum::IBayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::IBayesNet< double > * >(argp1);
  {
    try {
      result = ((gum::IBayesNet< double > const *)arg1)->memoryFootprint();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IBayesNet_ids(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::IBayesNet< double > *arg1 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IBayesNet_ids", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__IBayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IBayesNet_ids" "', argument " "1"" of type '" "gum::IBayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::IBayesNet< double > * >(argp1);
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IBayesNet_ids" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "IBayesNet_ids" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (PyObject *)gum_IBayesNet_Sl_double_Sg__ids(arg1,(std::vector< std::string,std::allocator< std::string > > const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IBayesNet_nodeset(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::IBayesNet< double > *arg1 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IBayesNet_nodeset", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__IBayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IBayesNet_nodeset" "', argument " "1"" of type '" "gum::IBayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::IBayesNet< double > * >(argp1);
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IBayesNet_nodeset" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "IBayesNet_nodeset" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (PyObject *)gum_IBayesNet_Sl_double_Sg__nodeset(arg1,(std::vector< std::string,std::allocator< std::string > > const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IBayesNet_minimalCondSet__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::IBayesNet< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  PyObject *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *result = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__IBayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IBayesNet_minimalCondSet" "', argument " "1"" of type '" "gum::IBayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::IBayesNet< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IBayesNet_minimalCondSet" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  arg3 = swig_obj[2];
  {
    try {
      result = (PyObject *)gum_IBayesNet_Sl_double_Sg__minimalCondSet__SWIG_2((gum::IBayesNet< double > const *)arg1,SWIG_STD_MOVE(arg2),arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IBayesNet_minimalCondSet__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::IBayesNet< double > *arg1 = 0 ;
  PyObject *arg2 = 0 ;
  PyObject *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *result = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__IBayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IBayesNet_minimalCondSet" "', argument " "1"" of type '" "gum::IBayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::IBayesNet< double > * >(argp1);
  arg2 = swig_obj[1];
  arg3 = swig_obj[2];
  {
    try {
      result = (PyObject *)gum_IBayesNet_Sl_double_Sg__minimalCondSet__SWIG_3((gum::IBayesNet< double > const *)arg1,arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IBayesNet_minimalCondSet(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "IBayesNet_minimalCondSet", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_gum__SetT_std__size_t_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_1;
    {
      int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_gum__SetT_std__size_t_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_1;
    return _wrap_IBayesNet_minimalCondSet__SWIG_1(self, argc, argv);
  }
check_1:
  
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_2;
    {
      int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_gum__SetT_std__size_t_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_2;
    return _wrap_IBayesNet_minimalCondSet__SWIG_0(self, argc, argv);
  }
check_2:
  
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_3;
    PyObject *retobj = _wrap_IBayesNet_minimalCondSet__SWIG_2(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
check_3:
  
  if (argc == 3) {
    PyObject *retobj = _wrap_IBayesNet_minimalCondSet__SWIG_3(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'IBayesNet_minimalCondSet'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::IBayesNet< double >::minimalCondSet(gum::NodeId,gum::NodeSet const &) const\n"
    "    gum::IBayesNet< double >::minimalCondSet(gum::NodeSet const &,gum::NodeSet const &) const\n"
    "    gum::IBayesNet< double >::minimalCondSet(gum::NodeId,PyObject *) const\n"
    "    gum::IBayesNet< double >::minimalCondSet(PyObject *,PyObject *) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IBayesNet_isIndependent__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::IBayesNet< double > *arg1 = 0 ;
  PyObject *arg2 = 0 ;
  PyObject *arg3 = 0 ;
  PyObject *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__IBayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IBayesNet_isIndependent" "', argument " "1"" of type '" "gum::IBayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::IBayesNet< double > * >(argp1);
  arg2 = swig_obj[1];
  arg3 = swig_obj[2];
  arg4 = swig_obj[3];
  {
    try {
      result = (bool)gum_IBayesNet_Sl_double_Sg__isIndependent__SWIG_0(arg1,arg2,arg3,arg4);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IBayesNet_isIndependent__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::IBayesNet< double > *arg1 = 0 ;
  PyObject *arg2 = 0 ;
  PyObject *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__IBayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IBayesNet_isIndependent" "', argument " "1"" of type '" "gum::IBayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::IBayesNet< double > * >(argp1);
  arg2 = swig_obj[1];
  arg3 = swig_obj[2];
  {
    try {
      result = (bool)gum_IBayesNet_Sl_double_Sg__isIndependent__SWIG_1(arg1,arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IBayesNet_isIndependent(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "IBayesNet_isIndependent", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    PyObject *retobj = _wrap_IBayesNet_isIndependent__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 4) {
    PyObject *retobj = _wrap_IBayesNet_isIndependent__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'IBayesNet_isIndependent'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::IBayesNet< double >::isIndependent(PyObject *,PyObject *,PyObject *)\n"
    "    gum::IBayesNet< double >::isIndependent(PyObject *,PyObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IBayesNet_names(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::IBayesNet< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__IBayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IBayesNet_names" "', argument " "1"" of type '" "gum::IBayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::IBayesNet< double > * >(argp1);
  {
    try {
      result = (PyObject *)gum_IBayesNet_Sl_double_Sg__names((gum::IBayesNet< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IBayesNet_nodes(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::IBayesNet< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__IBayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IBayesNet_nodes" "', argument " "1"" of type '" "gum::IBayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::IBayesNet< double > * >(argp1);
  {
    try {
      result = (PyObject *)gum_IBayesNet_Sl_double_Sg__nodes((gum::IBayesNet< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IBayesNet_arcs(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::IBayesNet< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__IBayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IBayesNet_arcs" "', argument " "1"" of type '" "gum::IBayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::IBayesNet< double > * >(argp1);
  {
    try {
      result = (PyObject *)gum_IBayesNet_Sl_double_Sg__arcs((gum::IBayesNet< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IBayesNet_parents(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::IBayesNet< double > *arg1 = 0 ;
  PyObject *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IBayesNet_parents", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__IBayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IBayesNet_parents" "', argument " "1"" of type '" "gum::IBayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::IBayesNet< double > * >(argp1);
  arg2 = swig_obj[1];
  {
    try {
      result = (PyObject *)gum_IBayesNet_Sl_double_Sg__parents((gum::IBayesNet< double > const *)arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IBayesNet_children(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::IBayesNet< double > *arg1 = 0 ;
  PyObject *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IBayesNet_children", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__IBayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IBayesNet_children" "', argument " "1"" of type '" "gum::IBayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::IBayesNet< double > * >(argp1);
  arg2 = swig_obj[1];
  {
    try {
      result = (PyObject *)gum_IBayesNet_Sl_double_Sg__children((gum::IBayesNet< double > const *)arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IBayesNet_family(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::IBayesNet< double > *arg1 = 0 ;
  PyObject *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IBayesNet_family", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__IBayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IBayesNet_family" "', argument " "1"" of type '" "gum::IBayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::IBayesNet< double > * >(argp1);
  arg2 = swig_obj[1];
  {
    try {
      result = (PyObject *)gum_IBayesNet_Sl_double_Sg__family((gum::IBayesNet< double > const *)arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IBayesNet_descendants(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::IBayesNet< double > *arg1 = 0 ;
  PyObject *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IBayesNet_descendants", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__IBayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IBayesNet_descendants" "', argument " "1"" of type '" "gum::IBayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::IBayesNet< double > * >(argp1);
  arg2 = swig_obj[1];
  {
    try {
      result = (PyObject *)gum_IBayesNet_Sl_double_Sg__descendants((gum::IBayesNet< double > const *)arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IBayesNet_ancestors(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::IBayesNet< double > *arg1 = 0 ;
  PyObject *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IBayesNet_ancestors", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__IBayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IBayesNet_ancestors" "', argument " "1"" of type '" "gum::IBayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::IBayesNet< double > * >(argp1);
  arg2 = swig_obj[1];
  {
    try {
      result = (PyObject *)gum_IBayesNet_Sl_double_Sg__ancestors((gum::IBayesNet< double > const *)arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IBayesNet_moralizedAncestralGraph(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::IBayesNet< double > *arg1 = 0 ;
  PyObject *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  gum::UndiGraph result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IBayesNet_moralizedAncestralGraph", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__IBayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IBayesNet_moralizedAncestralGraph" "', argument " "1"" of type '" "gum::IBayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::IBayesNet< double > * >(argp1);
  arg2 = swig_obj[1];
  {
    try {
      result = gum_IBayesNet_Sl_double_Sg__moralizedAncestralGraph(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::UndiGraph(result)), SWIGTYPE_p_gum__UndiGraph, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IBayesNet___repr__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::IBayesNet< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__IBayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IBayesNet___repr__" "', argument " "1"" of type '" "gum::IBayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::IBayesNet< double > * >(argp1);
  {
    try {
      result = gum_IBayesNet_Sl_double_Sg____repr__((gum::IBayesNet< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IBayesNet___str__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::IBayesNet< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__IBayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IBayesNet___str__" "', argument " "1"" of type '" "gum::IBayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::IBayesNet< double > * >(argp1);
  {
    try {
      result = gum_IBayesNet_Sl_double_Sg____str__((gum::IBayesNet< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *IBayesNet_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj = NULL;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gum__IBayesNetT_double_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_BayesNet_fastPrototype__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  gum::Size arg2 ;
  int res1 = SWIG_OLDOBJ ;
  size_t val2 ;
  int ecode2 = 0 ;
  gum::BayesNet< double > result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_fastPrototype" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BayesNet_fastPrototype" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BayesNet_fastPrototype" "', argument " "2"" of type '" "gum::Size""'");
  } 
  arg2 = static_cast< gum::Size >(val2);
  {
    try {
      result = gum::BayesNet< double >::SWIGTEMPLATEDISAMBIGUATOR fastPrototype((std::string const &)*arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::BayesNet< double >(result)), SWIGTYPE_p_gum__BayesNetT_double_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_fastPrototype__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  gum::BayesNet< double > result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_fastPrototype" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BayesNet_fastPrototype" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNet_fastPrototype" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BayesNet_fastPrototype" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = gum::BayesNet< double >::SWIGTEMPLATEDISAMBIGUATOR fastPrototype((std::string const &)*arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::BayesNet< double >(result)), SWIGTYPE_p_gum__BayesNetT_double_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_fastPrototype__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  gum::BayesNet< double > result;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_fastPrototype" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BayesNet_fastPrototype" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = gum::BayesNet< double >::SWIGTEMPLATEDISAMBIGUATOR fastPrototype((std::string const &)*arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::BayesNet< double >(result)), SWIGTYPE_p_gum__BayesNetT_double_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_fastPrototype(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "BayesNet_fastPrototype", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    PyObject *retobj = _wrap_BayesNet_fastPrototype__SWIG_2(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_2;
    return _wrap_BayesNet_fastPrototype__SWIG_0(self, argc, argv);
  }
check_2:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_BayesNet_fastPrototype__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'BayesNet_fastPrototype'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::BayesNet< double >::fastPrototype(std::string const &,gum::Size)\n"
    "    gum::BayesNet< double >::fastPrototype(std::string const &,std::string const &)\n"
    "    gum::BayesNet< double >::fastPrototype(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_BayesNet__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *result = 0 ;
  
  (void)self;
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (gum::BayesNet< double > *)new gum::BayesNet< double >();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__BayesNetT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BayesNet__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  gum::BayesNet< double > *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_BayesNet" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (gum::BayesNet< double > *)new gum::BayesNet< double >(SWIG_STD_MOVE(arg1));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__BayesNetT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_BayesNet(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_BayesNet" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  {
    try {
      delete arg1;
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BayesNet__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gum::BayesNet< double > *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_gum__BayesNetT_double_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_BayesNet" "', argument " "1"" of type '" "gum::BayesNet< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "new_BayesNet" "', argument " "1"" of type '" "gum::BayesNet< double > const &""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  {
    try {
      result = (gum::BayesNet< double > *)new gum::BayesNet< double >((gum::BayesNet< double > const &)*arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__BayesNetT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BayesNet(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_BayesNet", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    PyObject *retobj = _wrap_new_BayesNet__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_gum__BayesNetT_double_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_2;
    return _wrap_new_BayesNet__SWIG_2(self, argc, argv);
  }
check_2:
  
  if (argc == 1) {
    PyObject *retobj = _wrap_new_BayesNet__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_BayesNet'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::BayesNet< double >::BayesNet()\n"
    "    gum::BayesNet< double >::BayesNet(std::string)\n"
    "    gum::BayesNet< double >::BayesNet(gum::BayesNet< double > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BayesNet_cpt__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  gum::Tensor< double > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_cpt" "', argument " "1"" of type '" "gum::BayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BayesNet_cpt" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (gum::Tensor< double > *) &((gum::BayesNet< double > const *)arg1)->cpt(SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__TensorT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_cpt__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  gum::Tensor< double > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_cpt" "', argument " "1"" of type '" "gum::BayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNet_cpt" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BayesNet_cpt" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (gum::Tensor< double > *) &((gum::BayesNet< double > const *)arg1)->cpt((std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__TensorT_double_t, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_cpt(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "BayesNet_cpt", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_BayesNet_cpt__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_BayesNet_cpt__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'BayesNet_cpt'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::BayesNet< double >::cpt(gum::NodeId) const\n"
    "    gum::BayesNet< double >::cpt(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BayesNet_variableNodeMap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::VariableNodeMap *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_variableNodeMap" "', argument " "1"" of type '" "gum::BayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  {
    try {
      result = (gum::VariableNodeMap *) &((gum::BayesNet< double > const *)arg1)->variableNodeMap();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__VariableNodeMap, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_add__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  gum::DiscreteVariable *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  gum::NodeId result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_add" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_gum__DiscreteVariable,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNet_add" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BayesNet_add" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  arg2 = reinterpret_cast< gum::DiscreteVariable * >(argp2);
  {
    try {
      result = (arg1)->add((gum::DiscreteVariable const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_add__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  gum::NodeId result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_add" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNet_add" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BayesNet_add" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BayesNet_add" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  {
    try {
      result = (arg1)->add((std::string const &)*arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_add__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  gum::NodeId result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_add" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNet_add" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BayesNet_add" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (arg1)->add((std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_add__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  gum::DiscreteVariable *arg2 = 0 ;
  gum::MultiDimImplementation< double > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  gum::NodeId result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_add" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_gum__DiscreteVariable,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNet_add" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BayesNet_add" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  arg2 = reinterpret_cast< gum::DiscreteVariable * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_gum__MultiDimImplementationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BayesNet_add" "', argument " "3"" of type '" "gum::MultiDimImplementation< double > *""'"); 
  }
  arg3 = reinterpret_cast< gum::MultiDimImplementation< double > * >(argp3);
  {
    try {
      result = (arg1)->add((gum::DiscreteVariable const &)*arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_add__SWIG_4(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  gum::DiscreteVariable *arg2 = 0 ;
  gum::NodeId arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  gum::NodeId result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_add" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_gum__DiscreteVariable,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNet_add" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BayesNet_add" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  arg2 = reinterpret_cast< gum::DiscreteVariable * >(argp2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BayesNet_add" "', argument " "3"" of type '" "gum::NodeId""'");
  } 
  arg3 = static_cast< gum::NodeId >(val3);
  {
    try {
      result = (arg1)->add((gum::DiscreteVariable const &)*arg2,SWIG_STD_MOVE(arg3));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_add__SWIG_5(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  gum::DiscreteVariable *arg2 = 0 ;
  gum::MultiDimImplementation< double > *arg3 = 0 ;
  gum::NodeId arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  gum::NodeId result;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_add" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_gum__DiscreteVariable,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNet_add" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BayesNet_add" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  arg2 = reinterpret_cast< gum::DiscreteVariable * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_gum__MultiDimImplementationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BayesNet_add" "', argument " "3"" of type '" "gum::MultiDimImplementation< double > *""'"); 
  }
  arg3 = reinterpret_cast< gum::MultiDimImplementation< double > * >(argp3);
  ecode4 = SWIG_AsVal_size_t(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "BayesNet_add" "', argument " "4"" of type '" "gum::NodeId""'");
  } 
  arg4 = static_cast< gum::NodeId >(val4);
  {
    try {
      result = (arg1)->add((gum::DiscreteVariable const &)*arg2,arg3,SWIG_STD_MOVE(arg4));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_add(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "BayesNet_add", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_gum__DiscreteVariable, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_1;
    return _wrap_BayesNet_add__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_BayesNet_add__SWIG_2(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    int _v = 0;
    {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_gum__DiscreteVariable, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_3;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_gum__MultiDimImplementationT_double_t, 0);
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_3;
    return _wrap_BayesNet_add__SWIG_3(self, argc, argv);
  }
check_3:
  
  if (argc == 3) {
    int _v = 0;
    {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_gum__DiscreteVariable, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_4;
    {
      {
        int res = SWIG_AsVal_size_t(argv[2], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_4;
    return _wrap_BayesNet_add__SWIG_4(self, argc, argv);
  }
check_4:
  
  if (argc == 3) {
    PyObject *retobj = _wrap_BayesNet_add__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 4) {
    PyObject *retobj = _wrap_BayesNet_add__SWIG_5(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'BayesNet_add'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::BayesNet< double >::add(gum::DiscreteVariable const &)\n"
    "    gum::BayesNet< double >::add(std::string const &,unsigned int)\n"
    "    gum::BayesNet< double >::add(std::string const &)\n"
    "    gum::BayesNet< double >::add(gum::DiscreteVariable const &,gum::MultiDimImplementation< double > *)\n"
    "    gum::BayesNet< double >::add(gum::DiscreteVariable const &,gum::NodeId)\n"
    "    gum::BayesNet< double >::add(gum::DiscreteVariable const &,gum::MultiDimImplementation< double > *,gum::NodeId)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BayesNet_clear(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_clear" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  {
    try {
      (arg1)->clear();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_erase__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_erase" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BayesNet_erase" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      (arg1)->erase(SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_erase__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_erase" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNet_erase" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BayesNet_erase" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->erase((std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_erase__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  gum::DiscreteVariable *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_erase" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_gum__DiscreteVariable,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNet_erase" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BayesNet_erase" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  arg2 = reinterpret_cast< gum::DiscreteVariable * >(argp2);
  {
    try {
      (arg1)->erase((gum::DiscreteVariable const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "BayesNet_erase", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_gum__DiscreteVariable, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_1;
    return _wrap_BayesNet_erase__SWIG_2(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_2;
    return _wrap_BayesNet_erase__SWIG_0(self, argc, argv);
  }
check_2:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_BayesNet_erase__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'BayesNet_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::BayesNet< double >::erase(gum::NodeId)\n"
    "    gum::BayesNet< double >::erase(std::string const &)\n"
    "    gum::BayesNet< double >::erase(gum::DiscreteVariable const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BayesNet_variable__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  gum::DiscreteVariable *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_variable" "', argument " "1"" of type '" "gum::BayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BayesNet_variable" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (gum::DiscreteVariable *) &((gum::BayesNet< double > const *)arg1)->variable(SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__DiscreteVariable, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_variable__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  gum::DiscreteVariable *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_variable" "', argument " "1"" of type '" "gum::BayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNet_variable" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BayesNet_variable" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (gum::DiscreteVariable *) &((gum::BayesNet< double > const *)arg1)->variable((std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__DiscreteVariable, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_variable(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "BayesNet_variable", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_BayesNet_variable__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_BayesNet_variable__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'BayesNet_variable'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::BayesNet< double >::variable(gum::NodeId) const\n"
    "    gum::BayesNet< double >::variable(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BayesNet_changeVariableName__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_changeVariableName" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BayesNet_changeVariableName" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BayesNet_changeVariableName" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BayesNet_changeVariableName" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->changeVariableName(SWIG_STD_MOVE(arg2),(std::string const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_changeVariableName__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_changeVariableName" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNet_changeVariableName" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BayesNet_changeVariableName" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BayesNet_changeVariableName" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BayesNet_changeVariableName" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->changeVariableName((std::string const &)*arg2,(std::string const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_changeVariableName(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "BayesNet_changeVariableName", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    PyObject *retobj = _wrap_BayesNet_changeVariableName__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
check_1:
  
  if (argc == 3) {
    PyObject *retobj = _wrap_BayesNet_changeVariableName__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'BayesNet_changeVariableName'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::BayesNet< double >::changeVariableName(gum::NodeId,std::string const &)\n"
    "    gum::BayesNet< double >::changeVariableName(std::string const &,std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BayesNet_changeVariableLabel__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  int res4 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_changeVariableLabel" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BayesNet_changeVariableLabel" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BayesNet_changeVariableLabel" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BayesNet_changeVariableLabel" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "BayesNet_changeVariableLabel" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BayesNet_changeVariableLabel" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      (arg1)->changeVariableLabel(SWIG_STD_MOVE(arg2),(std::string const &)*arg3,(std::string const &)*arg4);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_changeVariableLabel__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  int res4 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_changeVariableLabel" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNet_changeVariableLabel" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BayesNet_changeVariableLabel" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BayesNet_changeVariableLabel" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BayesNet_changeVariableLabel" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "BayesNet_changeVariableLabel" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BayesNet_changeVariableLabel" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      (arg1)->changeVariableLabel((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_changeVariableLabel(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "BayesNet_changeVariableLabel", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 4) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    PyObject *retobj = _wrap_BayesNet_changeVariableLabel__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
check_1:
  
  if (argc == 4) {
    PyObject *retobj = _wrap_BayesNet_changeVariableLabel__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'BayesNet_changeVariableLabel'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::BayesNet< double >::changeVariableLabel(gum::NodeId,std::string const &,std::string const &)\n"
    "    gum::BayesNet< double >::changeVariableLabel(std::string const &,std::string const &,std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BayesNet_nodeId(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  gum::DiscreteVariable *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  gum::NodeId result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "BayesNet_nodeId", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_nodeId" "', argument " "1"" of type '" "gum::BayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_gum__DiscreteVariable,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNet_nodeId" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BayesNet_nodeId" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  arg2 = reinterpret_cast< gum::DiscreteVariable * >(argp2);
  {
    try {
      result = ((gum::BayesNet< double > const *)arg1)->nodeId((gum::DiscreteVariable const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_idFromName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  gum::NodeId result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "BayesNet_idFromName", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_idFromName" "', argument " "1"" of type '" "gum::BayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNet_idFromName" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BayesNet_idFromName" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = ((gum::BayesNet< double > const *)arg1)->idFromName((std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_variableFromName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  gum::DiscreteVariable *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "BayesNet_variableFromName", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_variableFromName" "', argument " "1"" of type '" "gum::BayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNet_variableFromName" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BayesNet_variableFromName" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (gum::DiscreteVariable *) &((gum::BayesNet< double > const *)arg1)->variableFromName((std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__DiscreteVariable, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_addArc__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  gum::NodeId arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_addArc" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BayesNet_addArc" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BayesNet_addArc" "', argument " "3"" of type '" "gum::NodeId""'");
  } 
  arg3 = static_cast< gum::NodeId >(val3);
  {
    try {
      (arg1)->addArc(SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_addArc__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_addArc" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNet_addArc" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BayesNet_addArc" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BayesNet_addArc" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BayesNet_addArc" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->addArc((std::string const &)*arg2,(std::string const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_addArc(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "BayesNet_addArc", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    {
      {
        int res = SWIG_AsVal_size_t(argv[2], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_BayesNet_addArc__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 3) {
    PyObject *retobj = _wrap_BayesNet_addArc__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'BayesNet_addArc'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::BayesNet< double >::addArc(gum::NodeId,gum::NodeId)\n"
    "    gum::BayesNet< double >::addArc(std::string const &,std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BayesNet_eraseArc__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  gum::Arc *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_eraseArc" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_gum__Arc,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNet_eraseArc" "', argument " "2"" of type '" "gum::Arc const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BayesNet_eraseArc" "', argument " "2"" of type '" "gum::Arc const &""'"); 
  }
  arg2 = reinterpret_cast< gum::Arc * >(argp2);
  {
    try {
      (arg1)->eraseArc((gum::Arc const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_eraseArc__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  gum::NodeId arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_eraseArc" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BayesNet_eraseArc" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BayesNet_eraseArc" "', argument " "3"" of type '" "gum::NodeId""'");
  } 
  arg3 = static_cast< gum::NodeId >(val3);
  {
    try {
      (arg1)->eraseArc(SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_eraseArc__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_eraseArc" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNet_eraseArc" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BayesNet_eraseArc" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BayesNet_eraseArc" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BayesNet_eraseArc" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->eraseArc((std::string const &)*arg2,(std::string const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_eraseArc(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "BayesNet_eraseArc", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    PyObject *retobj = _wrap_BayesNet_eraseArc__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_2;
    {
      {
        int res = SWIG_AsVal_size_t(argv[2], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_2;
    return _wrap_BayesNet_eraseArc__SWIG_1(self, argc, argv);
  }
check_2:
  
  if (argc == 3) {
    PyObject *retobj = _wrap_BayesNet_eraseArc__SWIG_2(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'BayesNet_eraseArc'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::BayesNet< double >::eraseArc(gum::Arc const &)\n"
    "    gum::BayesNet< double >::eraseArc(gum::NodeId,gum::NodeId)\n"
    "    gum::BayesNet< double >::eraseArc(std::string const &,std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BayesNet_beginTopologyTransformation(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_beginTopologyTransformation" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  {
    try {
      (arg1)->beginTopologyTransformation();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_endTopologyTransformation(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_endTopologyTransformation" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  {
    try {
      (arg1)->endTopologyTransformation();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_reverseArc__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  gum::NodeId arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_reverseArc" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BayesNet_reverseArc" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BayesNet_reverseArc" "', argument " "3"" of type '" "gum::NodeId""'");
  } 
  arg3 = static_cast< gum::NodeId >(val3);
  {
    try {
      (arg1)->reverseArc(SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_reverseArc__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_reverseArc" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNet_reverseArc" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BayesNet_reverseArc" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BayesNet_reverseArc" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BayesNet_reverseArc" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->reverseArc((std::string const &)*arg2,(std::string const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_reverseArc__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  gum::Arc *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_reverseArc" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_gum__Arc,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNet_reverseArc" "', argument " "2"" of type '" "gum::Arc const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BayesNet_reverseArc" "', argument " "2"" of type '" "gum::Arc const &""'"); 
  }
  arg2 = reinterpret_cast< gum::Arc * >(argp2);
  {
    try {
      (arg1)->reverseArc((gum::Arc const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_reverseArc(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "BayesNet_reverseArc", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    PyObject *retobj = _wrap_BayesNet_reverseArc__SWIG_2(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_2;
    {
      {
        int res = SWIG_AsVal_size_t(argv[2], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_2;
    return _wrap_BayesNet_reverseArc__SWIG_0(self, argc, argv);
  }
check_2:
  
  if (argc == 3) {
    PyObject *retobj = _wrap_BayesNet_reverseArc__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'BayesNet_reverseArc'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::BayesNet< double >::reverseArc(gum::NodeId,gum::NodeId)\n"
    "    gum::BayesNet< double >::reverseArc(std::string const &,std::string const &)\n"
    "    gum::BayesNet< double >::reverseArc(gum::Arc const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BayesNet_addNoisyOR__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  gum::DiscreteVariable *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  gum::NodeId result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_addNoisyOR" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_gum__DiscreteVariable,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNet_addNoisyOR" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BayesNet_addNoisyOR" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  arg2 = reinterpret_cast< gum::DiscreteVariable * >(argp2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BayesNet_addNoisyOR" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (arg1)->addNoisyOR((gum::DiscreteVariable const &)*arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_addNoisyORNet__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  gum::DiscreteVariable *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  gum::NodeId result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_addNoisyORNet" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_gum__DiscreteVariable,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNet_addNoisyORNet" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BayesNet_addNoisyORNet" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  arg2 = reinterpret_cast< gum::DiscreteVariable * >(argp2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BayesNet_addNoisyORNet" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (arg1)->addNoisyORNet((gum::DiscreteVariable const &)*arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_addNoisyORCompound__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  gum::DiscreteVariable *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  gum::NodeId result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_addNoisyORCompound" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_gum__DiscreteVariable,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNet_addNoisyORCompound" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BayesNet_addNoisyORCompound" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  arg2 = reinterpret_cast< gum::DiscreteVariable * >(argp2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BayesNet_addNoisyORCompound" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (arg1)->addNoisyORCompound((gum::DiscreteVariable const &)*arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_addNoisyOR__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  gum::DiscreteVariable *arg2 = 0 ;
  double arg3 ;
  gum::NodeId arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  gum::NodeId result;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_addNoisyOR" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_gum__DiscreteVariable,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNet_addNoisyOR" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BayesNet_addNoisyOR" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  arg2 = reinterpret_cast< gum::DiscreteVariable * >(argp2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BayesNet_addNoisyOR" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_size_t(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "BayesNet_addNoisyOR" "', argument " "4"" of type '" "gum::NodeId""'");
  } 
  arg4 = static_cast< gum::NodeId >(val4);
  {
    try {
      result = (arg1)->addNoisyOR((gum::DiscreteVariable const &)*arg2,arg3,SWIG_STD_MOVE(arg4));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_addNoisyOR(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "BayesNet_addNoisyOR", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    PyObject *retobj = _wrap_BayesNet_addNoisyOR__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 4) {
    PyObject *retobj = _wrap_BayesNet_addNoisyOR__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'BayesNet_addNoisyOR'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::BayesNet< double >::addNoisyOR(gum::DiscreteVariable const &,double)\n"
    "    gum::BayesNet< double >::addNoisyOR(gum::DiscreteVariable const &,double,gum::NodeId)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BayesNet_addNoisyORNet__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  gum::DiscreteVariable *arg2 = 0 ;
  double arg3 ;
  gum::NodeId arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  gum::NodeId result;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_addNoisyORNet" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_gum__DiscreteVariable,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNet_addNoisyORNet" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BayesNet_addNoisyORNet" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  arg2 = reinterpret_cast< gum::DiscreteVariable * >(argp2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BayesNet_addNoisyORNet" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_size_t(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "BayesNet_addNoisyORNet" "', argument " "4"" of type '" "gum::NodeId""'");
  } 
  arg4 = static_cast< gum::NodeId >(val4);
  {
    try {
      result = (arg1)->addNoisyORNet((gum::DiscreteVariable const &)*arg2,arg3,SWIG_STD_MOVE(arg4));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_addNoisyORNet(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "BayesNet_addNoisyORNet", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    PyObject *retobj = _wrap_BayesNet_addNoisyORNet__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 4) {
    PyObject *retobj = _wrap_BayesNet_addNoisyORNet__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'BayesNet_addNoisyORNet'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::BayesNet< double >::addNoisyORNet(gum::DiscreteVariable const &,double)\n"
    "    gum::BayesNet< double >::addNoisyORNet(gum::DiscreteVariable const &,double,gum::NodeId)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BayesNet_addNoisyORCompound__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  gum::DiscreteVariable *arg2 = 0 ;
  double arg3 ;
  gum::NodeId arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  gum::NodeId result;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_addNoisyORCompound" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_gum__DiscreteVariable,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNet_addNoisyORCompound" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BayesNet_addNoisyORCompound" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  arg2 = reinterpret_cast< gum::DiscreteVariable * >(argp2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BayesNet_addNoisyORCompound" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_size_t(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "BayesNet_addNoisyORCompound" "', argument " "4"" of type '" "gum::NodeId""'");
  } 
  arg4 = static_cast< gum::NodeId >(val4);
  {
    try {
      result = (arg1)->addNoisyORCompound((gum::DiscreteVariable const &)*arg2,arg3,SWIG_STD_MOVE(arg4));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_addNoisyORCompound(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "BayesNet_addNoisyORCompound", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    PyObject *retobj = _wrap_BayesNet_addNoisyORCompound__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 4) {
    PyObject *retobj = _wrap_BayesNet_addNoisyORCompound__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'BayesNet_addNoisyORCompound'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::BayesNet< double >::addNoisyORCompound(gum::DiscreteVariable const &,double)\n"
    "    gum::BayesNet< double >::addNoisyORCompound(gum::DiscreteVariable const &,double,gum::NodeId)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BayesNet_addNoisyAND__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  gum::DiscreteVariable *arg2 = 0 ;
  double arg3 ;
  gum::NodeId arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  gum::NodeId result;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_addNoisyAND" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_gum__DiscreteVariable,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNet_addNoisyAND" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BayesNet_addNoisyAND" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  arg2 = reinterpret_cast< gum::DiscreteVariable * >(argp2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BayesNet_addNoisyAND" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_size_t(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "BayesNet_addNoisyAND" "', argument " "4"" of type '" "gum::NodeId""'");
  } 
  arg4 = static_cast< gum::NodeId >(val4);
  {
    try {
      result = (arg1)->addNoisyAND((gum::DiscreteVariable const &)*arg2,arg3,SWIG_STD_MOVE(arg4));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_addNoisyAND__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  gum::DiscreteVariable *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  gum::NodeId result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_addNoisyAND" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_gum__DiscreteVariable,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNet_addNoisyAND" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BayesNet_addNoisyAND" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  arg2 = reinterpret_cast< gum::DiscreteVariable * >(argp2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BayesNet_addNoisyAND" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (arg1)->addNoisyAND((gum::DiscreteVariable const &)*arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_addNoisyAND(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "BayesNet_addNoisyAND", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    PyObject *retobj = _wrap_BayesNet_addNoisyAND__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 4) {
    PyObject *retobj = _wrap_BayesNet_addNoisyAND__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'BayesNet_addNoisyAND'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::BayesNet< double >::addNoisyAND(gum::DiscreteVariable const &,double,gum::NodeId)\n"
    "    gum::BayesNet< double >::addNoisyAND(gum::DiscreteVariable const &,double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BayesNet_addLogit__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  gum::DiscreteVariable *arg2 = 0 ;
  double arg3 ;
  gum::NodeId arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  gum::NodeId result;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_addLogit" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_gum__DiscreteVariable,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNet_addLogit" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BayesNet_addLogit" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  arg2 = reinterpret_cast< gum::DiscreteVariable * >(argp2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BayesNet_addLogit" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_size_t(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "BayesNet_addLogit" "', argument " "4"" of type '" "gum::NodeId""'");
  } 
  arg4 = static_cast< gum::NodeId >(val4);
  {
    try {
      result = (arg1)->addLogit((gum::DiscreteVariable const &)*arg2,arg3,SWIG_STD_MOVE(arg4));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_addLogit__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  gum::DiscreteVariable *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  gum::NodeId result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_addLogit" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_gum__DiscreteVariable,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNet_addLogit" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BayesNet_addLogit" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  arg2 = reinterpret_cast< gum::DiscreteVariable * >(argp2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BayesNet_addLogit" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (arg1)->addLogit((gum::DiscreteVariable const &)*arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_addLogit(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "BayesNet_addLogit", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    PyObject *retobj = _wrap_BayesNet_addLogit__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 4) {
    PyObject *retobj = _wrap_BayesNet_addLogit__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'BayesNet_addLogit'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::BayesNet< double >::addLogit(gum::DiscreteVariable const &,double,gum::NodeId)\n"
    "    gum::BayesNet< double >::addLogit(gum::DiscreteVariable const &,double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BayesNet_addOR(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  gum::DiscreteVariable *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  gum::NodeId result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "BayesNet_addOR", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_addOR" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_gum__DiscreteVariable,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNet_addOR" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BayesNet_addOR" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  arg2 = reinterpret_cast< gum::DiscreteVariable * >(argp2);
  {
    try {
      result = (arg1)->addOR((gum::DiscreteVariable const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_addAND(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  gum::DiscreteVariable *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  gum::NodeId result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "BayesNet_addAND", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_addAND" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_gum__DiscreteVariable,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNet_addAND" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BayesNet_addAND" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  arg2 = reinterpret_cast< gum::DiscreteVariable * >(argp2);
  {
    try {
      result = (arg1)->addAND((gum::DiscreteVariable const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_addAMPLITUDE(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  gum::DiscreteVariable *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  gum::NodeId result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "BayesNet_addAMPLITUDE", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_addAMPLITUDE" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_gum__DiscreteVariable,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNet_addAMPLITUDE" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BayesNet_addAMPLITUDE" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  arg2 = reinterpret_cast< gum::DiscreteVariable * >(argp2);
  {
    try {
      result = (arg1)->addAMPLITUDE((gum::DiscreteVariable const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_addCOUNT__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  gum::DiscreteVariable *arg2 = 0 ;
  gum::Idx arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  gum::NodeId result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_addCOUNT" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_gum__DiscreteVariable,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNet_addCOUNT" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BayesNet_addCOUNT" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  arg2 = reinterpret_cast< gum::DiscreteVariable * >(argp2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BayesNet_addCOUNT" "', argument " "3"" of type '" "gum::Idx""'");
  } 
  arg3 = static_cast< gum::Idx >(val3);
  {
    try {
      result = (arg1)->addCOUNT((gum::DiscreteVariable const &)*arg2,SWIG_STD_MOVE(arg3));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_addCOUNT__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  gum::DiscreteVariable *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  gum::NodeId result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_addCOUNT" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_gum__DiscreteVariable,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNet_addCOUNT" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BayesNet_addCOUNT" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  arg2 = reinterpret_cast< gum::DiscreteVariable * >(argp2);
  {
    try {
      result = (arg1)->addCOUNT((gum::DiscreteVariable const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_addCOUNT(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "BayesNet_addCOUNT", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    PyObject *retobj = _wrap_BayesNet_addCOUNT__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    PyObject *retobj = _wrap_BayesNet_addCOUNT__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'BayesNet_addCOUNT'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::BayesNet< double >::addCOUNT(gum::DiscreteVariable const &,gum::Idx)\n"
    "    gum::BayesNet< double >::addCOUNT(gum::DiscreteVariable const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BayesNet_addEXISTS__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  gum::DiscreteVariable *arg2 = 0 ;
  gum::Idx arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  gum::NodeId result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_addEXISTS" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_gum__DiscreteVariable,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNet_addEXISTS" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BayesNet_addEXISTS" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  arg2 = reinterpret_cast< gum::DiscreteVariable * >(argp2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BayesNet_addEXISTS" "', argument " "3"" of type '" "gum::Idx""'");
  } 
  arg3 = static_cast< gum::Idx >(val3);
  {
    try {
      result = (arg1)->addEXISTS((gum::DiscreteVariable const &)*arg2,SWIG_STD_MOVE(arg3));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_addEXISTS__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  gum::DiscreteVariable *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  gum::NodeId result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_addEXISTS" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_gum__DiscreteVariable,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNet_addEXISTS" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BayesNet_addEXISTS" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  arg2 = reinterpret_cast< gum::DiscreteVariable * >(argp2);
  {
    try {
      result = (arg1)->addEXISTS((gum::DiscreteVariable const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_addEXISTS(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "BayesNet_addEXISTS", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    PyObject *retobj = _wrap_BayesNet_addEXISTS__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    PyObject *retobj = _wrap_BayesNet_addEXISTS__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'BayesNet_addEXISTS'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::BayesNet< double >::addEXISTS(gum::DiscreteVariable const &,gum::Idx)\n"
    "    gum::BayesNet< double >::addEXISTS(gum::DiscreteVariable const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BayesNet_addFORALL__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  gum::DiscreteVariable *arg2 = 0 ;
  gum::Idx arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  gum::NodeId result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_addFORALL" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_gum__DiscreteVariable,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNet_addFORALL" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BayesNet_addFORALL" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  arg2 = reinterpret_cast< gum::DiscreteVariable * >(argp2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BayesNet_addFORALL" "', argument " "3"" of type '" "gum::Idx""'");
  } 
  arg3 = static_cast< gum::Idx >(val3);
  {
    try {
      result = (arg1)->addFORALL((gum::DiscreteVariable const &)*arg2,SWIG_STD_MOVE(arg3));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_addFORALL__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  gum::DiscreteVariable *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  gum::NodeId result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_addFORALL" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_gum__DiscreteVariable,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNet_addFORALL" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BayesNet_addFORALL" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  arg2 = reinterpret_cast< gum::DiscreteVariable * >(argp2);
  {
    try {
      result = (arg1)->addFORALL((gum::DiscreteVariable const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_addFORALL(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "BayesNet_addFORALL", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    PyObject *retobj = _wrap_BayesNet_addFORALL__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    PyObject *retobj = _wrap_BayesNet_addFORALL__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'BayesNet_addFORALL'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::BayesNet< double >::addFORALL(gum::DiscreteVariable const &,gum::Idx)\n"
    "    gum::BayesNet< double >::addFORALL(gum::DiscreteVariable const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BayesNet_addMAX(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  gum::DiscreteVariable *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  gum::NodeId result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "BayesNet_addMAX", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_addMAX" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_gum__DiscreteVariable,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNet_addMAX" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BayesNet_addMAX" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  arg2 = reinterpret_cast< gum::DiscreteVariable * >(argp2);
  {
    try {
      result = (arg1)->addMAX((gum::DiscreteVariable const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_addMEDIAN(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  gum::DiscreteVariable *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  gum::NodeId result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "BayesNet_addMEDIAN", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_addMEDIAN" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_gum__DiscreteVariable,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNet_addMEDIAN" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BayesNet_addMEDIAN" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  arg2 = reinterpret_cast< gum::DiscreteVariable * >(argp2);
  {
    try {
      result = (arg1)->addMEDIAN((gum::DiscreteVariable const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_addMIN(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  gum::DiscreteVariable *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  gum::NodeId result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "BayesNet_addMIN", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_addMIN" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_gum__DiscreteVariable,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNet_addMIN" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BayesNet_addMIN" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  arg2 = reinterpret_cast< gum::DiscreteVariable * >(argp2);
  {
    try {
      result = (arg1)->addMIN((gum::DiscreteVariable const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_addSUM(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  gum::DiscreteVariable *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  gum::NodeId result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "BayesNet_addSUM", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_addSUM" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_gum__DiscreteVariable,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNet_addSUM" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BayesNet_addSUM" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  arg2 = reinterpret_cast< gum::DiscreteVariable * >(argp2);
  {
    try {
      result = (arg1)->addSUM((gum::DiscreteVariable const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_addWeightedArc__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  gum::NodeId arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_addWeightedArc" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BayesNet_addWeightedArc" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BayesNet_addWeightedArc" "', argument " "3"" of type '" "gum::NodeId""'");
  } 
  arg3 = static_cast< gum::NodeId >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "BayesNet_addWeightedArc" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      (arg1)->addWeightedArc(SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),arg4);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_addWeightedArc__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  double val4 ;
  int ecode4 = 0 ;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_addWeightedArc" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNet_addWeightedArc" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BayesNet_addWeightedArc" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BayesNet_addWeightedArc" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BayesNet_addWeightedArc" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "BayesNet_addWeightedArc" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      (arg1)->addWeightedArc((std::string const &)*arg2,(std::string const &)*arg3,arg4);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_addWeightedArc(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "BayesNet_addWeightedArc", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 4) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    {
      {
        int res = SWIG_AsVal_size_t(argv[2], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    PyObject *retobj = _wrap_BayesNet_addWeightedArc__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
check_1:
  
  if (argc == 4) {
    PyObject *retobj = _wrap_BayesNet_addWeightedArc__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'BayesNet_addWeightedArc'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::BayesNet< double >::addWeightedArc(gum::NodeId,gum::NodeId,double)\n"
    "    gum::BayesNet< double >::addWeightedArc(std::string const &,std::string const &,double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BayesNet_generateCPTs(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_generateCPTs" "', argument " "1"" of type '" "gum::BayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  {
    try {
      ((gum::BayesNet< double > const *)arg1)->generateCPTs();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_generateCPT__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_generateCPT" "', argument " "1"" of type '" "gum::BayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BayesNet_generateCPT" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      ((gum::BayesNet< double > const *)arg1)->generateCPT(SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_generateCPT__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_generateCPT" "', argument " "1"" of type '" "gum::BayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNet_generateCPT" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BayesNet_generateCPT" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      ((gum::BayesNet< double > const *)arg1)->generateCPT((std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_generateCPT(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "BayesNet_generateCPT", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_BayesNet_generateCPT__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_BayesNet_generateCPT__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'BayesNet_generateCPT'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::BayesNet< double >::generateCPT(gum::NodeId) const\n"
    "    gum::BayesNet< double >::generateCPT(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BayesNet_changeTensor__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  gum::Tensor< double > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_changeTensor" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BayesNet_changeTensor" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_gum__TensorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BayesNet_changeTensor" "', argument " "3"" of type '" "gum::Tensor< double > *""'"); 
  }
  arg3 = reinterpret_cast< gum::Tensor< double > * >(argp3);
  {
    try {
      (arg1)->changeTensor(SWIG_STD_MOVE(arg2),arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_changeTensor__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  gum::Tensor< double > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_changeTensor" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNet_changeTensor" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BayesNet_changeTensor" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_gum__TensorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BayesNet_changeTensor" "', argument " "3"" of type '" "gum::Tensor< double > *""'"); 
  }
  arg3 = reinterpret_cast< gum::Tensor< double > * >(argp3);
  {
    try {
      (arg1)->changeTensor((std::string const &)*arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_changeTensor(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "BayesNet_changeTensor", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    PyObject *retobj = _wrap_BayesNet_changeTensor__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
check_1:
  
  if (argc == 3) {
    PyObject *retobj = _wrap_BayesNet_changeTensor__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'BayesNet_changeTensor'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::BayesNet< double >::changeTensor(gum::NodeId,gum::Tensor< double > *)\n"
    "    gum::BayesNet< double >::changeTensor(std::string const &,gum::Tensor< double > *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BayesNet_dag(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::DAG *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_dag" "', argument " "1"" of type '" "gum::BayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  {
    try {
      result = (gum::DAG *) &((gum::BayesNet< double > const *)arg1)->dag();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__DAG, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::Size result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_size" "', argument " "1"" of type '" "gum::BayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  {
    try {
      result = ((gum::BayesNet< double > const *)arg1)->size();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_log10DomainSize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_log10DomainSize" "', argument " "1"" of type '" "gum::BayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  {
    try {
      result = (double)((gum::BayesNet< double > const *)arg1)->log10DomainSize();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_ids(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "BayesNet_ids", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_ids" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNet_ids" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BayesNet_ids" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (PyObject *)gum_BayesNet_Sl_double_Sg__ids(arg1,(std::vector< std::string,std::allocator< std::string > > const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_nodeset(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "BayesNet_nodeset", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_nodeset" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNet_nodeset" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BayesNet_nodeset" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (PyObject *)gum_BayesNet_Sl_double_Sg__nodeset(arg1,(std::vector< std::string,std::allocator< std::string > > const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_minimalCondSet__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  PyObject *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *result = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_minimalCondSet" "', argument " "1"" of type '" "gum::BayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BayesNet_minimalCondSet" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  arg3 = swig_obj[2];
  {
    try {
      result = (PyObject *)gum_BayesNet_Sl_double_Sg__minimalCondSet__SWIG_0((gum::BayesNet< double > const *)arg1,SWIG_STD_MOVE(arg2),arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_minimalCondSet__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  PyObject *arg2 = 0 ;
  PyObject *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *result = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_minimalCondSet" "', argument " "1"" of type '" "gum::BayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  arg2 = swig_obj[1];
  arg3 = swig_obj[2];
  {
    try {
      result = (PyObject *)gum_BayesNet_Sl_double_Sg__minimalCondSet__SWIG_1((gum::BayesNet< double > const *)arg1,arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_minimalCondSet(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "BayesNet_minimalCondSet", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    PyObject *retobj = _wrap_BayesNet_minimalCondSet__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
check_1:
  
  if (argc == 3) {
    PyObject *retobj = _wrap_BayesNet_minimalCondSet__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'BayesNet_minimalCondSet'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::BayesNet< double >::minimalCondSet(gum::NodeId,PyObject *) const\n"
    "    gum::BayesNet< double >::minimalCondSet(PyObject *,PyObject *) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BayesNet_isIndependent__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  PyObject *arg2 = 0 ;
  PyObject *arg3 = 0 ;
  PyObject *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_isIndependent" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  arg2 = swig_obj[1];
  arg3 = swig_obj[2];
  arg4 = swig_obj[3];
  {
    try {
      result = (bool)gum_BayesNet_Sl_double_Sg__isIndependent__SWIG_0(arg1,arg2,arg3,arg4);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_isIndependent__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  PyObject *arg2 = 0 ;
  PyObject *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_isIndependent" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  arg2 = swig_obj[1];
  arg3 = swig_obj[2];
  {
    try {
      result = (bool)gum_BayesNet_Sl_double_Sg__isIndependent__SWIG_1(arg1,arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_isIndependent(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "BayesNet_isIndependent", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    PyObject *retobj = _wrap_BayesNet_isIndependent__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 4) {
    PyObject *retobj = _wrap_BayesNet_isIndependent__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'BayesNet_isIndependent'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::BayesNet< double >::isIndependent(PyObject *,PyObject *,PyObject *)\n"
    "    gum::BayesNet< double >::isIndependent(PyObject *,PyObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BayesNet_names(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_names" "', argument " "1"" of type '" "gum::BayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  {
    try {
      result = (PyObject *)gum_BayesNet_Sl_double_Sg__names((gum::BayesNet< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_nodes(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_nodes" "', argument " "1"" of type '" "gum::BayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  {
    try {
      result = (PyObject *)gum_BayesNet_Sl_double_Sg__nodes((gum::BayesNet< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_arcs(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_arcs" "', argument " "1"" of type '" "gum::BayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  {
    try {
      result = (PyObject *)gum_BayesNet_Sl_double_Sg__arcs((gum::BayesNet< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_parents(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  PyObject *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "BayesNet_parents", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_parents" "', argument " "1"" of type '" "gum::BayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  arg2 = swig_obj[1];
  {
    try {
      result = (PyObject *)gum_BayesNet_Sl_double_Sg__parents((gum::BayesNet< double > const *)arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_children(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  PyObject *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "BayesNet_children", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_children" "', argument " "1"" of type '" "gum::BayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  arg2 = swig_obj[1];
  {
    try {
      result = (PyObject *)gum_BayesNet_Sl_double_Sg__children((gum::BayesNet< double > const *)arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_family(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  PyObject *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "BayesNet_family", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_family" "', argument " "1"" of type '" "gum::BayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  arg2 = swig_obj[1];
  {
    try {
      result = (PyObject *)gum_BayesNet_Sl_double_Sg__family((gum::BayesNet< double > const *)arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_descendants(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  PyObject *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "BayesNet_descendants", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_descendants" "', argument " "1"" of type '" "gum::BayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  arg2 = swig_obj[1];
  {
    try {
      result = (PyObject *)gum_BayesNet_Sl_double_Sg__descendants((gum::BayesNet< double > const *)arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_ancestors(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  PyObject *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "BayesNet_ancestors", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_ancestors" "', argument " "1"" of type '" "gum::BayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  arg2 = swig_obj[1];
  {
    try {
      result = (PyObject *)gum_BayesNet_Sl_double_Sg__ancestors((gum::BayesNet< double > const *)arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_moralizedAncestralGraph(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  PyObject *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  gum::UndiGraph result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "BayesNet_moralizedAncestralGraph", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_moralizedAncestralGraph" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  arg2 = swig_obj[1];
  {
    try {
      result = gum_BayesNet_Sl_double_Sg__moralizedAncestralGraph(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::UndiGraph(result)), SWIGTYPE_p_gum__UndiGraph, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_loadBIF__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  std::string arg2 ;
  PyObject *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_loadBIF" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "BayesNet_loadBIF" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  arg3 = swig_obj[2];
  {
    try {
      result = gum_BayesNet_Sl_double_Sg__loadBIF__SWIG_0(arg1,SWIG_STD_MOVE(arg2),arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_loadBIF__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_loadBIF" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "BayesNet_loadBIF" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = gum_BayesNet_Sl_double_Sg__loadBIF__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_loadBIF(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "BayesNet_loadBIF", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    PyObject *retobj = _wrap_BayesNet_loadBIF__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    PyObject *retobj = _wrap_BayesNet_loadBIF__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'BayesNet_loadBIF'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::BayesNet< double >::loadBIF(std::string,PyObject *)\n"
    "    gum::BayesNet< double >::loadBIF(std::string)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BayesNet_saveBIF__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  std::string arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_saveBIF" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "BayesNet_saveBIF" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BayesNet_saveBIF" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      gum_BayesNet_Sl_double_Sg__saveBIF__SWIG_0(arg1,SWIG_STD_MOVE(arg2),arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_saveBIF__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_saveBIF" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "BayesNet_saveBIF" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      gum_BayesNet_Sl_double_Sg__saveBIF__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_saveBIF(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "BayesNet_saveBIF", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    PyObject *retobj = _wrap_BayesNet_saveBIF__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    PyObject *retobj = _wrap_BayesNet_saveBIF__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'BayesNet_saveBIF'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::BayesNet< double >::saveBIF(std::string,bool)\n"
    "    gum::BayesNet< double >::saveBIF(std::string)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BayesNet_loadDSL__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  std::string arg2 ;
  PyObject *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_loadDSL" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "BayesNet_loadDSL" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  arg3 = swig_obj[2];
  {
    try {
      result = gum_BayesNet_Sl_double_Sg__loadDSL__SWIG_0(arg1,SWIG_STD_MOVE(arg2),arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_loadDSL__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_loadDSL" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "BayesNet_loadDSL" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = gum_BayesNet_Sl_double_Sg__loadDSL__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_loadDSL(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "BayesNet_loadDSL", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    PyObject *retobj = _wrap_BayesNet_loadDSL__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    PyObject *retobj = _wrap_BayesNet_loadDSL__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'BayesNet_loadDSL'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::BayesNet< double >::loadDSL(std::string,PyObject *)\n"
    "    gum::BayesNet< double >::loadDSL(std::string)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BayesNet_loadXDSL__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  std::string arg2 ;
  PyObject *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_loadXDSL" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "BayesNet_loadXDSL" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  arg3 = swig_obj[2];
  {
    try {
      result = gum_BayesNet_Sl_double_Sg__loadXDSL__SWIG_0(arg1,SWIG_STD_MOVE(arg2),arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_loadXDSL__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_loadXDSL" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "BayesNet_loadXDSL" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = gum_BayesNet_Sl_double_Sg__loadXDSL__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_loadXDSL(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "BayesNet_loadXDSL", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    PyObject *retobj = _wrap_BayesNet_loadXDSL__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    PyObject *retobj = _wrap_BayesNet_loadXDSL__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'BayesNet_loadXDSL'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::BayesNet< double >::loadXDSL(std::string,PyObject *)\n"
    "    gum::BayesNet< double >::loadXDSL(std::string)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BayesNet_saveDSL__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  std::string arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_saveDSL" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "BayesNet_saveDSL" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BayesNet_saveDSL" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      gum_BayesNet_Sl_double_Sg__saveDSL__SWIG_0(arg1,SWIG_STD_MOVE(arg2),arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_saveDSL__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_saveDSL" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "BayesNet_saveDSL" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      gum_BayesNet_Sl_double_Sg__saveDSL__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_saveDSL(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "BayesNet_saveDSL", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    PyObject *retobj = _wrap_BayesNet_saveDSL__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    PyObject *retobj = _wrap_BayesNet_saveDSL__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'BayesNet_saveDSL'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::BayesNet< double >::saveDSL(std::string,bool)\n"
    "    gum::BayesNet< double >::saveDSL(std::string)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BayesNet_saveXDSL__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  std::string arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_saveXDSL" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "BayesNet_saveXDSL" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BayesNet_saveXDSL" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      gum_BayesNet_Sl_double_Sg__saveXDSL__SWIG_0(arg1,SWIG_STD_MOVE(arg2),arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_saveXDSL__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_saveXDSL" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "BayesNet_saveXDSL" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      gum_BayesNet_Sl_double_Sg__saveXDSL__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_saveXDSL(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "BayesNet_saveXDSL", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    PyObject *retobj = _wrap_BayesNet_saveXDSL__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    PyObject *retobj = _wrap_BayesNet_saveXDSL__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'BayesNet_saveXDSL'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::BayesNet< double >::saveXDSL(std::string,bool)\n"
    "    gum::BayesNet< double >::saveXDSL(std::string)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BayesNet_loadNET__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  std::string arg2 ;
  PyObject *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_loadNET" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "BayesNet_loadNET" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  arg3 = swig_obj[2];
  {
    try {
      result = gum_BayesNet_Sl_double_Sg__loadNET__SWIG_0(arg1,SWIG_STD_MOVE(arg2),arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_loadNET__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_loadNET" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "BayesNet_loadNET" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = gum_BayesNet_Sl_double_Sg__loadNET__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_loadNET(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "BayesNet_loadNET", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    PyObject *retobj = _wrap_BayesNet_loadNET__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    PyObject *retobj = _wrap_BayesNet_loadNET__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'BayesNet_loadNET'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::BayesNet< double >::loadNET(std::string,PyObject *)\n"
    "    gum::BayesNet< double >::loadNET(std::string)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BayesNet_saveNET__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  std::string arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_saveNET" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "BayesNet_saveNET" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BayesNet_saveNET" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      gum_BayesNet_Sl_double_Sg__saveNET__SWIG_0(arg1,SWIG_STD_MOVE(arg2),arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_saveNET__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_saveNET" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "BayesNet_saveNET" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      gum_BayesNet_Sl_double_Sg__saveNET__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_saveNET(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "BayesNet_saveNET", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    PyObject *retobj = _wrap_BayesNet_saveNET__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    PyObject *retobj = _wrap_BayesNet_saveNET__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'BayesNet_saveNET'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::BayesNet< double >::saveNET(std::string,bool)\n"
    "    gum::BayesNet< double >::saveNET(std::string)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BayesNet_loadO3PRM__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  PyObject *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  (void)self;
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_loadO3PRM" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "BayesNet_loadO3PRM" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "BayesNet_loadO3PRM" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "BayesNet_loadO3PRM" "', argument " "4"" of type '" "std::string""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  arg5 = swig_obj[4];
  {
    try {
      result = gum_BayesNet_Sl_double_Sg__loadO3PRM__SWIG_0(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),SWIG_STD_MOVE(arg4),arg5);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_loadO3PRM__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_loadO3PRM" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "BayesNet_loadO3PRM" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "BayesNet_loadO3PRM" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "BayesNet_loadO3PRM" "', argument " "4"" of type '" "std::string""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = gum_BayesNet_Sl_double_Sg__loadO3PRM__SWIG_0(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),SWIG_STD_MOVE(arg4));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_loadO3PRM__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  std::string arg2 ;
  std::string arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_loadO3PRM" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "BayesNet_loadO3PRM" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "BayesNet_loadO3PRM" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = gum_BayesNet_Sl_double_Sg__loadO3PRM__SWIG_0(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_loadO3PRM__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_loadO3PRM" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "BayesNet_loadO3PRM" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = gum_BayesNet_Sl_double_Sg__loadO3PRM__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_loadO3PRM(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "BayesNet_loadO3PRM", 0, 5, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    PyObject *retobj = _wrap_BayesNet_loadO3PRM__SWIG_3(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    PyObject *retobj = _wrap_BayesNet_loadO3PRM__SWIG_2(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 4) {
    PyObject *retobj = _wrap_BayesNet_loadO3PRM__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 5) {
    PyObject *retobj = _wrap_BayesNet_loadO3PRM__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'BayesNet_loadO3PRM'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::BayesNet< double >::loadO3PRM(std::string,std::string,std::string,PyObject *)\n"
    "    gum::BayesNet< double >::loadO3PRM(std::string,std::string,std::string)\n"
    "    gum::BayesNet< double >::loadO3PRM(std::string,std::string)\n"
    "    gum::BayesNet< double >::loadO3PRM(std::string)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BayesNet_saveO3PRM__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  std::string arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_saveO3PRM" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "BayesNet_saveO3PRM" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BayesNet_saveO3PRM" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      gum_BayesNet_Sl_double_Sg__saveO3PRM__SWIG_0(arg1,SWIG_STD_MOVE(arg2),arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_saveO3PRM__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_saveO3PRM" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "BayesNet_saveO3PRM" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      gum_BayesNet_Sl_double_Sg__saveO3PRM__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_saveO3PRM(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "BayesNet_saveO3PRM", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    PyObject *retobj = _wrap_BayesNet_saveO3PRM__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    PyObject *retobj = _wrap_BayesNet_saveO3PRM__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'BayesNet_saveO3PRM'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::BayesNet< double >::saveO3PRM(std::string,bool)\n"
    "    gum::BayesNet< double >::saveO3PRM(std::string)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BayesNet_loadBIFXML__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  std::string arg2 ;
  PyObject *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_loadBIFXML" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "BayesNet_loadBIFXML" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  arg3 = swig_obj[2];
  {
    try {
      result = gum_BayesNet_Sl_double_Sg__loadBIFXML__SWIG_0(arg1,SWIG_STD_MOVE(arg2),arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_loadBIFXML__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_loadBIFXML" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "BayesNet_loadBIFXML" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = gum_BayesNet_Sl_double_Sg__loadBIFXML__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_loadBIFXML(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "BayesNet_loadBIFXML", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    PyObject *retobj = _wrap_BayesNet_loadBIFXML__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    PyObject *retobj = _wrap_BayesNet_loadBIFXML__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'BayesNet_loadBIFXML'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::BayesNet< double >::loadBIFXML(std::string,PyObject *)\n"
    "    gum::BayesNet< double >::loadBIFXML(std::string)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BayesNet_saveBIFXML__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  std::string arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_saveBIFXML" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "BayesNet_saveBIFXML" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BayesNet_saveBIFXML" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      gum_BayesNet_Sl_double_Sg__saveBIFXML__SWIG_0(arg1,SWIG_STD_MOVE(arg2),arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_saveBIFXML__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_saveBIFXML" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "BayesNet_saveBIFXML" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      gum_BayesNet_Sl_double_Sg__saveBIFXML__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_saveBIFXML(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "BayesNet_saveBIFXML", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    PyObject *retobj = _wrap_BayesNet_saveBIFXML__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    PyObject *retobj = _wrap_BayesNet_saveBIFXML__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'BayesNet_saveBIFXML'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::BayesNet< double >::saveBIFXML(std::string,bool)\n"
    "    gum::BayesNet< double >::saveBIFXML(std::string)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BayesNet_loadUAI__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  std::string arg2 ;
  PyObject *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_loadUAI" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "BayesNet_loadUAI" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  arg3 = swig_obj[2];
  {
    try {
      result = gum_BayesNet_Sl_double_Sg__loadUAI__SWIG_0(arg1,SWIG_STD_MOVE(arg2),arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_loadUAI__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_loadUAI" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "BayesNet_loadUAI" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = gum_BayesNet_Sl_double_Sg__loadUAI__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_loadUAI(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "BayesNet_loadUAI", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    PyObject *retobj = _wrap_BayesNet_loadUAI__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    PyObject *retobj = _wrap_BayesNet_loadUAI__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'BayesNet_loadUAI'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::BayesNet< double >::loadUAI(std::string,PyObject *)\n"
    "    gum::BayesNet< double >::loadUAI(std::string)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BayesNet_saveUAI__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  std::string arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_saveUAI" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "BayesNet_saveUAI" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BayesNet_saveUAI" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      gum_BayesNet_Sl_double_Sg__saveUAI__SWIG_0(arg1,SWIG_STD_MOVE(arg2),arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_saveUAI__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_saveUAI" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "BayesNet_saveUAI" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      gum_BayesNet_Sl_double_Sg__saveUAI__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_saveUAI(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "BayesNet_saveUAI", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    PyObject *retobj = _wrap_BayesNet_saveUAI__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    PyObject *retobj = _wrap_BayesNet_saveUAI__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'BayesNet_saveUAI'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::BayesNet< double >::saveUAI(std::string,bool)\n"
    "    gum::BayesNet< double >::saveUAI(std::string)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BayesNet___repr__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet___repr__" "', argument " "1"" of type '" "gum::BayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  {
    try {
      result = gum_BayesNet_Sl_double_Sg____repr__((gum::BayesNet< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet___str__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet___str__" "', argument " "1"" of type '" "gum::BayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  {
    try {
      result = gum_BayesNet_Sl_double_Sg____str__((gum::BayesNet< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *BayesNet_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj = NULL;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gum__BayesNetT_double_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *BayesNet_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_BayesNetFragment(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::IBayesNet< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::BayesNetFragment< double > *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_gum__IBayesNetT_double_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_BayesNetFragment" "', argument " "1"" of type '" "gum::IBayesNet< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "new_BayesNetFragment" "', argument " "1"" of type '" "gum::IBayesNet< double > const &""'"); 
  }
  arg1 = reinterpret_cast< gum::IBayesNet< double > * >(argp1);
  {
    try {
      result = (gum::BayesNetFragment< double > *)new gum::BayesNetFragment< double >((gum::IBayesNet< double > const &)*arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__BayesNetFragmentT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_BayesNetFragment(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNetFragment< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetFragmentT_double_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_BayesNetFragment" "', argument " "1"" of type '" "gum::BayesNetFragment< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNetFragment< double > * >(argp1);
  {
    try {
      delete arg1;
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNetFragment_whenNodeAdded(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNetFragment< double > *arg1 = 0 ;
  void *arg2 = 0 ;
  gum::NodeId arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "BayesNetFragment_whenNodeAdded", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetFragmentT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNetFragment_whenNodeAdded" "', argument " "1"" of type '" "gum::BayesNetFragment< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNetFragment< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1],SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNetFragment_whenNodeAdded" "', argument " "2"" of type '" "void const *""'"); 
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BayesNetFragment_whenNodeAdded" "', argument " "3"" of type '" "gum::NodeId""'");
  } 
  arg3 = static_cast< gum::NodeId >(val3);
  {
    try {
      (arg1)->whenNodeAdded((void const *)arg2,SWIG_STD_MOVE(arg3));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNetFragment_whenNodeDeleted(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNetFragment< double > *arg1 = 0 ;
  void *arg2 = 0 ;
  gum::NodeId arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "BayesNetFragment_whenNodeDeleted", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetFragmentT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNetFragment_whenNodeDeleted" "', argument " "1"" of type '" "gum::BayesNetFragment< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNetFragment< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1],SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNetFragment_whenNodeDeleted" "', argument " "2"" of type '" "void const *""'"); 
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BayesNetFragment_whenNodeDeleted" "', argument " "3"" of type '" "gum::NodeId""'");
  } 
  arg3 = static_cast< gum::NodeId >(val3);
  {
    try {
      (arg1)->whenNodeDeleted((void const *)arg2,SWIG_STD_MOVE(arg3));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNetFragment_whenArcAdded(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNetFragment< double > *arg1 = 0 ;
  void *arg2 = 0 ;
  gum::NodeId arg3 ;
  gum::NodeId arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "BayesNetFragment_whenArcAdded", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetFragmentT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNetFragment_whenArcAdded" "', argument " "1"" of type '" "gum::BayesNetFragment< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNetFragment< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1],SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNetFragment_whenArcAdded" "', argument " "2"" of type '" "void const *""'"); 
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BayesNetFragment_whenArcAdded" "', argument " "3"" of type '" "gum::NodeId""'");
  } 
  arg3 = static_cast< gum::NodeId >(val3);
  ecode4 = SWIG_AsVal_size_t(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "BayesNetFragment_whenArcAdded" "', argument " "4"" of type '" "gum::NodeId""'");
  } 
  arg4 = static_cast< gum::NodeId >(val4);
  {
    try {
      (arg1)->whenArcAdded((void const *)arg2,SWIG_STD_MOVE(arg3),SWIG_STD_MOVE(arg4));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNetFragment_whenArcDeleted(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNetFragment< double > *arg1 = 0 ;
  void *arg2 = 0 ;
  gum::NodeId arg3 ;
  gum::NodeId arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "BayesNetFragment_whenArcDeleted", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetFragmentT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNetFragment_whenArcDeleted" "', argument " "1"" of type '" "gum::BayesNetFragment< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNetFragment< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1],SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNetFragment_whenArcDeleted" "', argument " "2"" of type '" "void const *""'"); 
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BayesNetFragment_whenArcDeleted" "', argument " "3"" of type '" "gum::NodeId""'");
  } 
  arg3 = static_cast< gum::NodeId >(val3);
  ecode4 = SWIG_AsVal_size_t(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "BayesNetFragment_whenArcDeleted" "', argument " "4"" of type '" "gum::NodeId""'");
  } 
  arg4 = static_cast< gum::NodeId >(val4);
  {
    try {
      (arg1)->whenArcDeleted((void const *)arg2,SWIG_STD_MOVE(arg3),SWIG_STD_MOVE(arg4));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNetFragment_cpt__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::BayesNetFragment< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  gum::Tensor< double > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetFragmentT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNetFragment_cpt" "', argument " "1"" of type '" "gum::BayesNetFragment< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNetFragment< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BayesNetFragment_cpt" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (gum::Tensor< double > *) &((gum::BayesNetFragment< double > const *)arg1)->cpt(SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__TensorT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNetFragment_cpt__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::BayesNetFragment< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  gum::Tensor< double > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetFragmentT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNetFragment_cpt" "', argument " "1"" of type '" "gum::BayesNetFragment< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNetFragment< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNetFragment_cpt" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BayesNetFragment_cpt" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (gum::Tensor< double > *) &((gum::BayesNetFragment< double > const *)arg1)->cpt((std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__TensorT_double_t, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNetFragment_cpt(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "BayesNetFragment_cpt", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_BayesNetFragment_cpt__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_BayesNetFragment_cpt__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'BayesNetFragment_cpt'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::BayesNetFragment< double >::cpt(gum::NodeId) const\n"
    "    gum::BayesNetFragment< double >::cpt(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BayesNetFragment_variableNodeMap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNetFragment< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::VariableNodeMap *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetFragmentT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNetFragment_variableNodeMap" "', argument " "1"" of type '" "gum::BayesNetFragment< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNetFragment< double > * >(argp1);
  {
    try {
      result = (gum::VariableNodeMap *) &((gum::BayesNetFragment< double > const *)arg1)->variableNodeMap();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__VariableNodeMap, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNetFragment_variable__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::BayesNetFragment< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  gum::DiscreteVariable *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetFragmentT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNetFragment_variable" "', argument " "1"" of type '" "gum::BayesNetFragment< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNetFragment< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BayesNetFragment_variable" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (gum::DiscreteVariable *) &((gum::BayesNetFragment< double > const *)arg1)->variable(SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__DiscreteVariable, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNetFragment_variable__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::BayesNetFragment< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  gum::DiscreteVariable *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetFragmentT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNetFragment_variable" "', argument " "1"" of type '" "gum::BayesNetFragment< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNetFragment< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNetFragment_variable" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BayesNetFragment_variable" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (gum::DiscreteVariable *) &((gum::BayesNetFragment< double > const *)arg1)->variable((std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__DiscreteVariable, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNetFragment_variable(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "BayesNetFragment_variable", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_BayesNetFragment_variable__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_BayesNetFragment_variable__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'BayesNetFragment_variable'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::BayesNetFragment< double >::variable(gum::NodeId) const\n"
    "    gum::BayesNetFragment< double >::variable(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BayesNetFragment_nodeId(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNetFragment< double > *arg1 = 0 ;
  gum::DiscreteVariable *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  gum::NodeId result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "BayesNetFragment_nodeId", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetFragmentT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNetFragment_nodeId" "', argument " "1"" of type '" "gum::BayesNetFragment< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNetFragment< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_gum__DiscreteVariable,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNetFragment_nodeId" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BayesNetFragment_nodeId" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  arg2 = reinterpret_cast< gum::DiscreteVariable * >(argp2);
  {
    try {
      result = ((gum::BayesNetFragment< double > const *)arg1)->nodeId((gum::DiscreteVariable const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNetFragment_idFromName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNetFragment< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  gum::NodeId result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "BayesNetFragment_idFromName", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetFragmentT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNetFragment_idFromName" "', argument " "1"" of type '" "gum::BayesNetFragment< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNetFragment< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNetFragment_idFromName" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BayesNetFragment_idFromName" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = ((gum::BayesNetFragment< double > const *)arg1)->idFromName((std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNetFragment_variableFromName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNetFragment< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  gum::DiscreteVariable *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "BayesNetFragment_variableFromName", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetFragmentT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNetFragment_variableFromName" "', argument " "1"" of type '" "gum::BayesNetFragment< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNetFragment< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNetFragment_variableFromName" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BayesNetFragment_variableFromName" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (gum::DiscreteVariable *) &((gum::BayesNetFragment< double > const *)arg1)->variableFromName((std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__DiscreteVariable, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNetFragment_toDot(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNetFragment< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetFragmentT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNetFragment_toDot" "', argument " "1"" of type '" "gum::BayesNetFragment< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNetFragment< double > * >(argp1);
  {
    try {
      result = ((gum::BayesNetFragment< double > const *)arg1)->toDot();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNetFragment_isInstalledNode__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::BayesNetFragment< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  bool result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetFragmentT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNetFragment_isInstalledNode" "', argument " "1"" of type '" "gum::BayesNetFragment< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNetFragment< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BayesNetFragment_isInstalledNode" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (bool)((gum::BayesNetFragment< double > const *)arg1)->isInstalledNode(SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNetFragment_isInstalledNode__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::BayesNetFragment< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  bool result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetFragmentT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNetFragment_isInstalledNode" "', argument " "1"" of type '" "gum::BayesNetFragment< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNetFragment< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNetFragment_isInstalledNode" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BayesNetFragment_isInstalledNode" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)((gum::BayesNetFragment< double > const *)arg1)->isInstalledNode((std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNetFragment_isInstalledNode(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "BayesNetFragment_isInstalledNode", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_BayesNetFragment_isInstalledNode__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_BayesNetFragment_isInstalledNode__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'BayesNetFragment_isInstalledNode'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::BayesNetFragment< double >::isInstalledNode(gum::NodeId) const\n"
    "    gum::BayesNetFragment< double >::isInstalledNode(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BayesNetFragment_installNode__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::BayesNetFragment< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetFragmentT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNetFragment_installNode" "', argument " "1"" of type '" "gum::BayesNetFragment< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNetFragment< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BayesNetFragment_installNode" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      (arg1)->installNode(SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNetFragment_installNode__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::BayesNetFragment< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetFragmentT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNetFragment_installNode" "', argument " "1"" of type '" "gum::BayesNetFragment< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNetFragment< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNetFragment_installNode" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BayesNetFragment_installNode" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->installNode((std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNetFragment_installNode(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "BayesNetFragment_installNode", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_BayesNetFragment_installNode__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_BayesNetFragment_installNode__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'BayesNetFragment_installNode'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::BayesNetFragment< double >::installNode(gum::NodeId)\n"
    "    gum::BayesNetFragment< double >::installNode(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BayesNetFragment_installAscendants__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::BayesNetFragment< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetFragmentT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNetFragment_installAscendants" "', argument " "1"" of type '" "gum::BayesNetFragment< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNetFragment< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BayesNetFragment_installAscendants" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      (arg1)->installAscendants(SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNetFragment_installAscendants__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::BayesNetFragment< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetFragmentT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNetFragment_installAscendants" "', argument " "1"" of type '" "gum::BayesNetFragment< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNetFragment< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNetFragment_installAscendants" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BayesNetFragment_installAscendants" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->installAscendants((std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNetFragment_installAscendants(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "BayesNetFragment_installAscendants", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_BayesNetFragment_installAscendants__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_BayesNetFragment_installAscendants__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'BayesNetFragment_installAscendants'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::BayesNetFragment< double >::installAscendants(gum::NodeId)\n"
    "    gum::BayesNetFragment< double >::installAscendants(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BayesNetFragment_uninstallNode__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::BayesNetFragment< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetFragmentT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNetFragment_uninstallNode" "', argument " "1"" of type '" "gum::BayesNetFragment< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNetFragment< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BayesNetFragment_uninstallNode" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      (arg1)->uninstallNode(SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNetFragment_uninstallNode__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::BayesNetFragment< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetFragmentT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNetFragment_uninstallNode" "', argument " "1"" of type '" "gum::BayesNetFragment< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNetFragment< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNetFragment_uninstallNode" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BayesNetFragment_uninstallNode" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->uninstallNode((std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNetFragment_uninstallNode(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "BayesNetFragment_uninstallNode", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_BayesNetFragment_uninstallNode__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_BayesNetFragment_uninstallNode__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'BayesNetFragment_uninstallNode'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::BayesNetFragment< double >::uninstallNode(gum::NodeId)\n"
    "    gum::BayesNetFragment< double >::uninstallNode(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BayesNetFragment_installMarginal__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::BayesNetFragment< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  gum::Tensor< double > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetFragmentT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNetFragment_installMarginal" "', argument " "1"" of type '" "gum::BayesNetFragment< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNetFragment< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BayesNetFragment_installMarginal" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_gum__TensorT_double_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BayesNetFragment_installMarginal" "', argument " "3"" of type '" "gum::Tensor< double > const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BayesNetFragment_installMarginal" "', argument " "3"" of type '" "gum::Tensor< double > const &""'"); 
  }
  arg3 = reinterpret_cast< gum::Tensor< double > * >(argp3);
  {
    try {
      (arg1)->installMarginal(SWIG_STD_MOVE(arg2),(gum::Tensor< double > const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNetFragment_installMarginal__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::BayesNetFragment< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  gum::Tensor< double > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetFragmentT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNetFragment_installMarginal" "', argument " "1"" of type '" "gum::BayesNetFragment< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNetFragment< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNetFragment_installMarginal" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BayesNetFragment_installMarginal" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_gum__TensorT_double_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BayesNetFragment_installMarginal" "', argument " "3"" of type '" "gum::Tensor< double > const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BayesNetFragment_installMarginal" "', argument " "3"" of type '" "gum::Tensor< double > const &""'"); 
  }
  arg3 = reinterpret_cast< gum::Tensor< double > * >(argp3);
  {
    try {
      (arg1)->installMarginal((std::string const &)*arg2,(gum::Tensor< double > const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNetFragment_installMarginal(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "BayesNetFragment_installMarginal", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    PyObject *retobj = _wrap_BayesNetFragment_installMarginal__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
check_1:
  
  if (argc == 3) {
    PyObject *retobj = _wrap_BayesNetFragment_installMarginal__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'BayesNetFragment_installMarginal'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::BayesNetFragment< double >::installMarginal(gum::NodeId,gum::Tensor< double > const &)\n"
    "    gum::BayesNetFragment< double >::installMarginal(std::string const &,gum::Tensor< double > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BayesNetFragment_installCPT__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::BayesNetFragment< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  gum::Tensor< double > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetFragmentT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNetFragment_installCPT" "', argument " "1"" of type '" "gum::BayesNetFragment< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNetFragment< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BayesNetFragment_installCPT" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_gum__TensorT_double_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BayesNetFragment_installCPT" "', argument " "3"" of type '" "gum::Tensor< double > const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BayesNetFragment_installCPT" "', argument " "3"" of type '" "gum::Tensor< double > const &""'"); 
  }
  arg3 = reinterpret_cast< gum::Tensor< double > * >(argp3);
  {
    try {
      (arg1)->installCPT(SWIG_STD_MOVE(arg2),(gum::Tensor< double > const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNetFragment_installCPT__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::BayesNetFragment< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  gum::Tensor< double > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetFragmentT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNetFragment_installCPT" "', argument " "1"" of type '" "gum::BayesNetFragment< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNetFragment< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNetFragment_installCPT" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BayesNetFragment_installCPT" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_gum__TensorT_double_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BayesNetFragment_installCPT" "', argument " "3"" of type '" "gum::Tensor< double > const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BayesNetFragment_installCPT" "', argument " "3"" of type '" "gum::Tensor< double > const &""'"); 
  }
  arg3 = reinterpret_cast< gum::Tensor< double > * >(argp3);
  {
    try {
      (arg1)->installCPT((std::string const &)*arg2,(gum::Tensor< double > const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNetFragment_installCPT(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "BayesNetFragment_installCPT", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    PyObject *retobj = _wrap_BayesNetFragment_installCPT__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
check_1:
  
  if (argc == 3) {
    PyObject *retobj = _wrap_BayesNetFragment_installCPT__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'BayesNetFragment_installCPT'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::BayesNetFragment< double >::installCPT(gum::NodeId,gum::Tensor< double > const &)\n"
    "    gum::BayesNetFragment< double >::installCPT(std::string const &,gum::Tensor< double > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BayesNetFragment_uninstallCPT__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::BayesNetFragment< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetFragmentT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNetFragment_uninstallCPT" "', argument " "1"" of type '" "gum::BayesNetFragment< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNetFragment< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BayesNetFragment_uninstallCPT" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      (arg1)->uninstallCPT(SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNetFragment_uninstallCPT__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::BayesNetFragment< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetFragmentT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNetFragment_uninstallCPT" "', argument " "1"" of type '" "gum::BayesNetFragment< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNetFragment< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNetFragment_uninstallCPT" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BayesNetFragment_uninstallCPT" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->uninstallCPT((std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNetFragment_uninstallCPT(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "BayesNetFragment_uninstallCPT", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_BayesNetFragment_uninstallCPT__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_BayesNetFragment_uninstallCPT__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'BayesNetFragment_uninstallCPT'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::BayesNetFragment< double >::uninstallCPT(gum::NodeId)\n"
    "    gum::BayesNetFragment< double >::uninstallCPT(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BayesNetFragment_checkConsistency__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::BayesNetFragment< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  bool result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetFragmentT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNetFragment_checkConsistency" "', argument " "1"" of type '" "gum::BayesNetFragment< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNetFragment< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BayesNetFragment_checkConsistency" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (bool)((gum::BayesNetFragment< double > const *)arg1)->checkConsistency(SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNetFragment_checkConsistency__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::BayesNetFragment< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  bool result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetFragmentT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNetFragment_checkConsistency" "', argument " "1"" of type '" "gum::BayesNetFragment< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNetFragment< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNetFragment_checkConsistency" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BayesNetFragment_checkConsistency" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)((gum::BayesNetFragment< double > const *)arg1)->checkConsistency((std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNetFragment_checkConsistency__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::BayesNetFragment< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetFragmentT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNetFragment_checkConsistency" "', argument " "1"" of type '" "gum::BayesNetFragment< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNetFragment< double > * >(argp1);
  {
    try {
      result = (bool)((gum::BayesNetFragment< double > const *)arg1)->checkConsistency();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNetFragment_checkConsistency(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "BayesNetFragment_checkConsistency", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    PyObject *retobj = _wrap_BayesNetFragment_checkConsistency__SWIG_2(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_2;
    return _wrap_BayesNetFragment_checkConsistency__SWIG_0(self, argc, argv);
  }
check_2:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_BayesNetFragment_checkConsistency__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'BayesNetFragment_checkConsistency'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::BayesNetFragment< double >::checkConsistency(gum::NodeId) const\n"
    "    gum::BayesNetFragment< double >::checkConsistency(std::string const &) const\n"
    "    gum::BayesNetFragment< double >::checkConsistency() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BayesNetFragment_toBN(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNetFragment< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::BayesNet< double > result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetFragmentT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNetFragment_toBN" "', argument " "1"" of type '" "gum::BayesNetFragment< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNetFragment< double > * >(argp1);
  {
    try {
      result = ((gum::BayesNetFragment< double > const *)arg1)->toBN();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::BayesNet< double >(result)), SWIGTYPE_p_gum__BayesNetT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNetFragment_dag(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNetFragment< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::DAG *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetFragmentT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNetFragment_dag" "', argument " "1"" of type '" "gum::BayesNetFragment< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNetFragment< double > * >(argp1);
  {
    try {
      result = (gum::DAG *) &((gum::BayesNetFragment< double > const *)arg1)->dag();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__DAG, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNetFragment_ids(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNetFragment< double > *arg1 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "BayesNetFragment_ids", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetFragmentT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNetFragment_ids" "', argument " "1"" of type '" "gum::BayesNetFragment< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNetFragment< double > * >(argp1);
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNetFragment_ids" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BayesNetFragment_ids" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (PyObject *)gum_BayesNetFragment_Sl_double_Sg__ids(arg1,(std::vector< std::string,std::allocator< std::string > > const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNetFragment_nodeset(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNetFragment< double > *arg1 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "BayesNetFragment_nodeset", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetFragmentT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNetFragment_nodeset" "', argument " "1"" of type '" "gum::BayesNetFragment< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNetFragment< double > * >(argp1);
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNetFragment_nodeset" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BayesNetFragment_nodeset" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (PyObject *)gum_BayesNetFragment_Sl_double_Sg__nodeset(arg1,(std::vector< std::string,std::allocator< std::string > > const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNetFragment_minimalCondSet__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::BayesNetFragment< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  PyObject *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *result = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetFragmentT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNetFragment_minimalCondSet" "', argument " "1"" of type '" "gum::BayesNetFragment< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNetFragment< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BayesNetFragment_minimalCondSet" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  arg3 = swig_obj[2];
  {
    try {
      result = (PyObject *)gum_BayesNetFragment_Sl_double_Sg__minimalCondSet__SWIG_0((gum::BayesNetFragment< double > const *)arg1,SWIG_STD_MOVE(arg2),arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNetFragment_minimalCondSet__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::BayesNetFragment< double > *arg1 = 0 ;
  PyObject *arg2 = 0 ;
  PyObject *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *result = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetFragmentT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNetFragment_minimalCondSet" "', argument " "1"" of type '" "gum::BayesNetFragment< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNetFragment< double > * >(argp1);
  arg2 = swig_obj[1];
  arg3 = swig_obj[2];
  {
    try {
      result = (PyObject *)gum_BayesNetFragment_Sl_double_Sg__minimalCondSet__SWIG_1((gum::BayesNetFragment< double > const *)arg1,arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNetFragment_minimalCondSet(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "BayesNetFragment_minimalCondSet", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    PyObject *retobj = _wrap_BayesNetFragment_minimalCondSet__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
check_1:
  
  if (argc == 3) {
    PyObject *retobj = _wrap_BayesNetFragment_minimalCondSet__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'BayesNetFragment_minimalCondSet'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::BayesNetFragment< double >::minimalCondSet(gum::NodeId,PyObject *) const\n"
    "    gum::BayesNetFragment< double >::minimalCondSet(PyObject *,PyObject *) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BayesNetFragment_isIndependent__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::BayesNetFragment< double > *arg1 = 0 ;
  PyObject *arg2 = 0 ;
  PyObject *arg3 = 0 ;
  PyObject *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetFragmentT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNetFragment_isIndependent" "', argument " "1"" of type '" "gum::BayesNetFragment< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNetFragment< double > * >(argp1);
  arg2 = swig_obj[1];
  arg3 = swig_obj[2];
  arg4 = swig_obj[3];
  {
    try {
      result = (bool)gum_BayesNetFragment_Sl_double_Sg__isIndependent__SWIG_0(arg1,arg2,arg3,arg4);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNetFragment_isIndependent__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::BayesNetFragment< double > *arg1 = 0 ;
  PyObject *arg2 = 0 ;
  PyObject *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetFragmentT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNetFragment_isIndependent" "', argument " "1"" of type '" "gum::BayesNetFragment< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNetFragment< double > * >(argp1);
  arg2 = swig_obj[1];
  arg3 = swig_obj[2];
  {
    try {
      result = (bool)gum_BayesNetFragment_Sl_double_Sg__isIndependent__SWIG_1(arg1,arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNetFragment_isIndependent(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "BayesNetFragment_isIndependent", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    PyObject *retobj = _wrap_BayesNetFragment_isIndependent__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 4) {
    PyObject *retobj = _wrap_BayesNetFragment_isIndependent__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'BayesNetFragment_isIndependent'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::BayesNetFragment< double >::isIndependent(PyObject *,PyObject *,PyObject *)\n"
    "    gum::BayesNetFragment< double >::isIndependent(PyObject *,PyObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BayesNetFragment_names(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNetFragment< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetFragmentT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNetFragment_names" "', argument " "1"" of type '" "gum::BayesNetFragment< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNetFragment< double > * >(argp1);
  {
    try {
      result = (PyObject *)gum_BayesNetFragment_Sl_double_Sg__names((gum::BayesNetFragment< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNetFragment_nodes(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNetFragment< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetFragmentT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNetFragment_nodes" "', argument " "1"" of type '" "gum::BayesNetFragment< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNetFragment< double > * >(argp1);
  {
    try {
      result = (PyObject *)gum_BayesNetFragment_Sl_double_Sg__nodes((gum::BayesNetFragment< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNetFragment_arcs(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNetFragment< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetFragmentT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNetFragment_arcs" "', argument " "1"" of type '" "gum::BayesNetFragment< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNetFragment< double > * >(argp1);
  {
    try {
      result = (PyObject *)gum_BayesNetFragment_Sl_double_Sg__arcs((gum::BayesNetFragment< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNetFragment_parents(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNetFragment< double > *arg1 = 0 ;
  PyObject *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "BayesNetFragment_parents", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetFragmentT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNetFragment_parents" "', argument " "1"" of type '" "gum::BayesNetFragment< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNetFragment< double > * >(argp1);
  arg2 = swig_obj[1];
  {
    try {
      result = (PyObject *)gum_BayesNetFragment_Sl_double_Sg__parents((gum::BayesNetFragment< double > const *)arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNetFragment_children(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNetFragment< double > *arg1 = 0 ;
  PyObject *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "BayesNetFragment_children", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetFragmentT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNetFragment_children" "', argument " "1"" of type '" "gum::BayesNetFragment< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNetFragment< double > * >(argp1);
  arg2 = swig_obj[1];
  {
    try {
      result = (PyObject *)gum_BayesNetFragment_Sl_double_Sg__children((gum::BayesNetFragment< double > const *)arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNetFragment_family(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNetFragment< double > *arg1 = 0 ;
  PyObject *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "BayesNetFragment_family", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetFragmentT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNetFragment_family" "', argument " "1"" of type '" "gum::BayesNetFragment< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNetFragment< double > * >(argp1);
  arg2 = swig_obj[1];
  {
    try {
      result = (PyObject *)gum_BayesNetFragment_Sl_double_Sg__family((gum::BayesNetFragment< double > const *)arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNetFragment_descendants(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNetFragment< double > *arg1 = 0 ;
  PyObject *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "BayesNetFragment_descendants", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetFragmentT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNetFragment_descendants" "', argument " "1"" of type '" "gum::BayesNetFragment< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNetFragment< double > * >(argp1);
  arg2 = swig_obj[1];
  {
    try {
      result = (PyObject *)gum_BayesNetFragment_Sl_double_Sg__descendants((gum::BayesNetFragment< double > const *)arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNetFragment_ancestors(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNetFragment< double > *arg1 = 0 ;
  PyObject *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "BayesNetFragment_ancestors", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetFragmentT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNetFragment_ancestors" "', argument " "1"" of type '" "gum::BayesNetFragment< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNetFragment< double > * >(argp1);
  arg2 = swig_obj[1];
  {
    try {
      result = (PyObject *)gum_BayesNetFragment_Sl_double_Sg__ancestors((gum::BayesNetFragment< double > const *)arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNetFragment_moralizedAncestralGraph(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNetFragment< double > *arg1 = 0 ;
  PyObject *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  gum::UndiGraph result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "BayesNetFragment_moralizedAncestralGraph", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__BayesNetFragmentT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNetFragment_moralizedAncestralGraph" "', argument " "1"" of type '" "gum::BayesNetFragment< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNetFragment< double > * >(argp1);
  arg2 = swig_obj[1];
  {
    try {
      result = gum_BayesNetFragment_Sl_double_Sg__moralizedAncestralGraph(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::UndiGraph(result)), SWIGTYPE_p_gum__UndiGraph, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *BayesNetFragment_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj = NULL;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gum__BayesNetFragmentT_double_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *BayesNetFragment_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_LazyPropagation__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::IBayesNet< double > *arg1 = 0 ;
  gum::RelevantTensorsFinderType arg2 ;
  gum::FindBarrenNodesType arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  gum::LazyPropagation< double > *result = 0 ;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__IBayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LazyPropagation" "', argument " "1"" of type '" "gum::IBayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::IBayesNet< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_LazyPropagation" "', argument " "2"" of type '" "gum::RelevantTensorsFinderType""'");
  } 
  arg2 = static_cast< gum::RelevantTensorsFinderType >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_LazyPropagation" "', argument " "3"" of type '" "gum::FindBarrenNodesType""'");
  } 
  arg3 = static_cast< gum::FindBarrenNodesType >(val3);
  ecode4 = SWIG_AsVal_bool(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_LazyPropagation" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  {
    try {
      result = (gum::LazyPropagation< double > *)new gum::LazyPropagation< double >((gum::IBayesNet< double > const *)arg1,arg2,arg3,arg4);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__LazyPropagationT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LazyPropagation__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::IBayesNet< double > *arg1 = 0 ;
  gum::RelevantTensorsFinderType arg2 ;
  gum::FindBarrenNodesType arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  gum::LazyPropagation< double > *result = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__IBayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LazyPropagation" "', argument " "1"" of type '" "gum::IBayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::IBayesNet< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_LazyPropagation" "', argument " "2"" of type '" "gum::RelevantTensorsFinderType""'");
  } 
  arg2 = static_cast< gum::RelevantTensorsFinderType >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_LazyPropagation" "', argument " "3"" of type '" "gum::FindBarrenNodesType""'");
  } 
  arg3 = static_cast< gum::FindBarrenNodesType >(val3);
  {
    try {
      result = (gum::LazyPropagation< double > *)new gum::LazyPropagation< double >((gum::IBayesNet< double > const *)arg1,arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__LazyPropagationT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LazyPropagation__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::IBayesNet< double > *arg1 = 0 ;
  gum::RelevantTensorsFinderType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  gum::LazyPropagation< double > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__IBayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LazyPropagation" "', argument " "1"" of type '" "gum::IBayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::IBayesNet< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_LazyPropagation" "', argument " "2"" of type '" "gum::RelevantTensorsFinderType""'");
  } 
  arg2 = static_cast< gum::RelevantTensorsFinderType >(val2);
  {
    try {
      result = (gum::LazyPropagation< double > *)new gum::LazyPropagation< double >((gum::IBayesNet< double > const *)arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__LazyPropagationT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LazyPropagation__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::IBayesNet< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gum::LazyPropagation< double > *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__IBayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LazyPropagation" "', argument " "1"" of type '" "gum::IBayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::IBayesNet< double > * >(argp1);
  {
    try {
      result = (gum::LazyPropagation< double > *)new gum::LazyPropagation< double >((gum::IBayesNet< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__LazyPropagationT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LazyPropagation(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_LazyPropagation", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    PyObject *retobj = _wrap_new_LazyPropagation__SWIG_3(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 2) {
    PyObject *retobj = _wrap_new_LazyPropagation__SWIG_2(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    PyObject *retobj = _wrap_new_LazyPropagation__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 4) {
    PyObject *retobj = _wrap_new_LazyPropagation__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_LazyPropagation'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::LazyPropagation< double >::LazyPropagation(gum::IBayesNet< double > const *,gum::RelevantTensorsFinderType,gum::FindBarrenNodesType,bool)\n"
    "    gum::LazyPropagation< double >::LazyPropagation(gum::IBayesNet< double > const *,gum::RelevantTensorsFinderType,gum::FindBarrenNodesType)\n"
    "    gum::LazyPropagation< double >::LazyPropagation(gum::IBayesNet< double > const *,gum::RelevantTensorsFinderType)\n"
    "    gum::LazyPropagation< double >::LazyPropagation(gum::IBayesNet< double > const *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_LazyPropagation(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LazyPropagation" "', argument " "1"" of type '" "gum::LazyPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  {
    try {
      delete arg1;
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_setTriangulation(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = 0 ;
  gum::Triangulation *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LazyPropagation_setTriangulation", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_setTriangulation" "', argument " "1"" of type '" "gum::LazyPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_gum__Triangulation,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LazyPropagation_setTriangulation" "', argument " "2"" of type '" "gum::Triangulation const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LazyPropagation_setTriangulation" "', argument " "2"" of type '" "gum::Triangulation const &""'"); 
  }
  arg2 = reinterpret_cast< gum::Triangulation * >(argp2);
  {
    try {
      (arg1)->setTriangulation((gum::Triangulation const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_setRelevantTensorsFinderType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = 0 ;
  gum::RelevantTensorsFinderType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LazyPropagation_setRelevantTensorsFinderType", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_setRelevantTensorsFinderType" "', argument " "1"" of type '" "gum::LazyPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LazyPropagation_setRelevantTensorsFinderType" "', argument " "2"" of type '" "gum::RelevantTensorsFinderType""'");
  } 
  arg2 = static_cast< gum::RelevantTensorsFinderType >(val2);
  {
    try {
      (arg1)->setRelevantTensorsFinderType(arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_setFindBarrenNodesType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = 0 ;
  gum::FindBarrenNodesType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LazyPropagation_setFindBarrenNodesType", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_setFindBarrenNodesType" "', argument " "1"" of type '" "gum::LazyPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LazyPropagation_setFindBarrenNodesType" "', argument " "2"" of type '" "gum::FindBarrenNodesType""'");
  } 
  arg2 = static_cast< gum::FindBarrenNodesType >(val2);
  {
    try {
      (arg1)->setFindBarrenNodesType(arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_joinTree(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::JoinTree *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_joinTree" "', argument " "1"" of type '" "gum::LazyPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  {
    try {
      result = (gum::JoinTree *)(arg1)->joinTree();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__CliqueGraph, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_junctionTree(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::JunctionTree *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_junctionTree" "', argument " "1"" of type '" "gum::LazyPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  {
    try {
      result = (gum::JunctionTree *)(arg1)->junctionTree();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__CliqueGraph, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_evidenceProbability(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_evidenceProbability" "', argument " "1"" of type '" "gum::LazyPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  {
    try {
      result = (double)(arg1)->evidenceProbability();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_mpe(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::Instantiation result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_mpe" "', argument " "1"" of type '" "gum::LazyPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  {
    try {
      result = (arg1)->mpe();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::Instantiation(result)), SWIGTYPE_p_gum__Instantiation, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_mpeLog2Posterior(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::pair< gum::Instantiation,double > result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_mpeLog2Posterior" "', argument " "1"" of type '" "gum::LazyPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  {
    try {
      result = (arg1)->mpeLog2Posterior();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::pair< gum::Instantiation,double > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_makeInference(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_makeInference" "', argument " "1"" of type '" "gum::LazyPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  {
    try {
      gum_LazyPropagation_Sl_double_Sg__makeInference(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_posterior__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  gum::Tensor< double > result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_posterior" "', argument " "1"" of type '" "gum::LazyPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LazyPropagation_posterior" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = gum_LazyPropagation_Sl_double_Sg__posterior__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::Tensor< double >(result)), SWIGTYPE_p_gum__TensorT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_posterior__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  gum::Tensor< double > result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_posterior" "', argument " "1"" of type '" "gum::LazyPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LazyPropagation_posterior" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LazyPropagation_posterior" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = gum_LazyPropagation_Sl_double_Sg__posterior__SWIG_1(arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::Tensor< double >(result)), SWIGTYPE_p_gum__TensorT_double_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_addEvidence__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  gum::Idx arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_addEvidence" "', argument " "1"" of type '" "gum::LazyPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LazyPropagation_addEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "LazyPropagation_addEvidence" "', argument " "3"" of type '" "gum::Idx""'");
  } 
  arg3 = static_cast< gum::Idx >(val3);
  {
    try {
      gum_LazyPropagation_Sl_double_Sg__addEvidence__SWIG_0(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_addEvidence__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  gum::Idx arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  size_t val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_addEvidence" "', argument " "1"" of type '" "gum::LazyPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LazyPropagation_addEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LazyPropagation_addEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "LazyPropagation_addEvidence" "', argument " "3"" of type '" "gum::Idx""'");
  } 
  arg3 = static_cast< gum::Idx >(val3);
  {
    try {
      gum_LazyPropagation_Sl_double_Sg__addEvidence__SWIG_1(arg1,(std::string const &)*arg2,SWIG_STD_MOVE(arg3));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_addEvidence__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_addEvidence" "', argument " "1"" of type '" "gum::LazyPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LazyPropagation_addEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LazyPropagation_addEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LazyPropagation_addEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      gum_LazyPropagation_Sl_double_Sg__addEvidence__SWIG_2(arg1,SWIG_STD_MOVE(arg2),(std::string const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_addEvidence__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_addEvidence" "', argument " "1"" of type '" "gum::LazyPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LazyPropagation_addEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LazyPropagation_addEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LazyPropagation_addEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LazyPropagation_addEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      gum_LazyPropagation_Sl_double_Sg__addEvidence__SWIG_3(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_addEvidence__SWIG_4(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_addEvidence" "', argument " "1"" of type '" "gum::LazyPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LazyPropagation_addEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LazyPropagation_addEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LazyPropagation_addEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      gum_LazyPropagation_Sl_double_Sg__addEvidence__SWIG_4(arg1,SWIG_STD_MOVE(arg2),(std::vector< double,std::allocator< double > > const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_addEvidence__SWIG_5(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_addEvidence" "', argument " "1"" of type '" "gum::LazyPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LazyPropagation_addEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LazyPropagation_addEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LazyPropagation_addEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LazyPropagation_addEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      gum_LazyPropagation_Sl_double_Sg__addEvidence__SWIG_5(arg1,(std::string const &)*arg2,(std::vector< double,std::allocator< double > > const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_addEvidence__SWIG_6(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = 0 ;
  gum::Tensor< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_addEvidence" "', argument " "1"" of type '" "gum::LazyPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_gum__TensorT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LazyPropagation_addEvidence" "', argument " "2"" of type '" "gum::Tensor< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LazyPropagation_addEvidence" "', argument " "2"" of type '" "gum::Tensor< double > const &""'"); 
  }
  arg2 = reinterpret_cast< gum::Tensor< double > * >(argp2);
  {
    try {
      gum_LazyPropagation_Sl_double_Sg__addEvidence__SWIG_6(arg1,(gum::Tensor< double > const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_addEvidence(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "LazyPropagation_addEvidence", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    PyObject *retobj = _wrap_LazyPropagation_addEvidence__SWIG_6(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_2;
    {
      {
        int res = SWIG_AsVal_size_t(argv[2], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_2;
    return _wrap_LazyPropagation_addEvidence__SWIG_0(self, argc, argv);
  }
check_2:
  
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_3;
    {
      int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_3;
    return _wrap_LazyPropagation_addEvidence__SWIG_2(self, argc, argv);
  }
check_3:
  
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_4;
    {
      int res = swig::asptr(argv[2], (std::vector< double,std::allocator< double > >**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_4;
    return _wrap_LazyPropagation_addEvidence__SWIG_4(self, argc, argv);
  }
check_4:
  
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[2], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_5;
    return _wrap_LazyPropagation_addEvidence__SWIG_1(self, argc, argv);
  }
check_5:
  
  if (argc == 3) {
    int _v = 0;
    {
      int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_6;
    return _wrap_LazyPropagation_addEvidence__SWIG_3(self, argc, argv);
  }
check_6:
  
  if (argc == 3) {
    PyObject *retobj = _wrap_LazyPropagation_addEvidence__SWIG_5(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LazyPropagation_addEvidence'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::LazyPropagation< double >::addEvidence(gum::NodeId const,gum::Idx const)\n"
    "    gum::LazyPropagation< double >::addEvidence(std::string const &,gum::Idx const)\n"
    "    gum::LazyPropagation< double >::addEvidence(gum::NodeId const,std::string const &)\n"
    "    gum::LazyPropagation< double >::addEvidence(std::string const &,std::string const &)\n"
    "    gum::LazyPropagation< double >::addEvidence(gum::NodeId const,std::vector< double,std::allocator< double > > const &)\n"
    "    gum::LazyPropagation< double >::addEvidence(std::string const &,std::vector< double,std::allocator< double > > const &)\n"
    "    gum::LazyPropagation< double >::addEvidence(gum::Tensor< double > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_chgEvidence__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  gum::Idx arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_chgEvidence" "', argument " "1"" of type '" "gum::LazyPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LazyPropagation_chgEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "LazyPropagation_chgEvidence" "', argument " "3"" of type '" "gum::Idx""'");
  } 
  arg3 = static_cast< gum::Idx >(val3);
  {
    try {
      gum_LazyPropagation_Sl_double_Sg__chgEvidence__SWIG_0(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_chgEvidence__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  gum::Idx arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  size_t val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_chgEvidence" "', argument " "1"" of type '" "gum::LazyPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LazyPropagation_chgEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LazyPropagation_chgEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "LazyPropagation_chgEvidence" "', argument " "3"" of type '" "gum::Idx""'");
  } 
  arg3 = static_cast< gum::Idx >(val3);
  {
    try {
      gum_LazyPropagation_Sl_double_Sg__chgEvidence__SWIG_1(arg1,(std::string const &)*arg2,SWIG_STD_MOVE(arg3));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_chgEvidence__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_chgEvidence" "', argument " "1"" of type '" "gum::LazyPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LazyPropagation_chgEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LazyPropagation_chgEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LazyPropagation_chgEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      gum_LazyPropagation_Sl_double_Sg__chgEvidence__SWIG_2(arg1,SWIG_STD_MOVE(arg2),(std::string const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_chgEvidence__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_chgEvidence" "', argument " "1"" of type '" "gum::LazyPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LazyPropagation_chgEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LazyPropagation_chgEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LazyPropagation_chgEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LazyPropagation_chgEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      gum_LazyPropagation_Sl_double_Sg__chgEvidence__SWIG_3(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_chgEvidence__SWIG_4(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = 0 ;
  gum::Tensor< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_chgEvidence" "', argument " "1"" of type '" "gum::LazyPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_gum__TensorT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LazyPropagation_chgEvidence" "', argument " "2"" of type '" "gum::Tensor< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LazyPropagation_chgEvidence" "', argument " "2"" of type '" "gum::Tensor< double > const &""'"); 
  }
  arg2 = reinterpret_cast< gum::Tensor< double > * >(argp2);
  {
    try {
      gum_LazyPropagation_Sl_double_Sg__chgEvidence__SWIG_4(arg1,(gum::Tensor< double > const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_chgEvidence__SWIG_5(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_chgEvidence" "', argument " "1"" of type '" "gum::LazyPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LazyPropagation_chgEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LazyPropagation_chgEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LazyPropagation_chgEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      gum_LazyPropagation_Sl_double_Sg__chgEvidence__SWIG_5(arg1,SWIG_STD_MOVE(arg2),(std::vector< double,std::allocator< double > > const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_chgEvidence__SWIG_6(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_chgEvidence" "', argument " "1"" of type '" "gum::LazyPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LazyPropagation_chgEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LazyPropagation_chgEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LazyPropagation_chgEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LazyPropagation_chgEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      gum_LazyPropagation_Sl_double_Sg__chgEvidence__SWIG_6(arg1,(std::string const &)*arg2,(std::vector< double,std::allocator< double > > const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_chgEvidence(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "LazyPropagation_chgEvidence", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    PyObject *retobj = _wrap_LazyPropagation_chgEvidence__SWIG_4(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_2;
    {
      {
        int res = SWIG_AsVal_size_t(argv[2], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_2;
    return _wrap_LazyPropagation_chgEvidence__SWIG_0(self, argc, argv);
  }
check_2:
  
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_3;
    {
      int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_3;
    return _wrap_LazyPropagation_chgEvidence__SWIG_2(self, argc, argv);
  }
check_3:
  
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_4;
    {
      int res = swig::asptr(argv[2], (std::vector< double,std::allocator< double > >**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_4;
    return _wrap_LazyPropagation_chgEvidence__SWIG_5(self, argc, argv);
  }
check_4:
  
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[2], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_5;
    return _wrap_LazyPropagation_chgEvidence__SWIG_1(self, argc, argv);
  }
check_5:
  
  if (argc == 3) {
    int _v = 0;
    {
      int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_6;
    return _wrap_LazyPropagation_chgEvidence__SWIG_3(self, argc, argv);
  }
check_6:
  
  if (argc == 3) {
    PyObject *retobj = _wrap_LazyPropagation_chgEvidence__SWIG_6(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LazyPropagation_chgEvidence'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::LazyPropagation< double >::chgEvidence(gum::NodeId const,gum::Idx const)\n"
    "    gum::LazyPropagation< double >::chgEvidence(std::string const &,gum::Idx const)\n"
    "    gum::LazyPropagation< double >::chgEvidence(gum::NodeId const,std::string const &)\n"
    "    gum::LazyPropagation< double >::chgEvidence(std::string const &,std::string const &)\n"
    "    gum::LazyPropagation< double >::chgEvidence(gum::Tensor< double > const &)\n"
    "    gum::LazyPropagation< double >::chgEvidence(gum::NodeId const,std::vector< double,std::allocator< double > > const &)\n"
    "    gum::LazyPropagation< double >::chgEvidence(std::string const &,std::vector< double,std::allocator< double > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_hasEvidence__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  bool result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_hasEvidence" "', argument " "1"" of type '" "gum::LazyPropagation< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LazyPropagation_hasEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (bool)gum_LazyPropagation_Sl_double_Sg__hasEvidence__SWIG_0((gum::LazyPropagation< double > const *)arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_hasEvidence__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  bool result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_hasEvidence" "', argument " "1"" of type '" "gum::LazyPropagation< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LazyPropagation_hasEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LazyPropagation_hasEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)gum_LazyPropagation_Sl_double_Sg__hasEvidence__SWIG_1((gum::LazyPropagation< double > const *)arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_hasEvidence(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "LazyPropagation_hasEvidence", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_LazyPropagation_hasEvidence__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_LazyPropagation_hasEvidence__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LazyPropagation_hasEvidence'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::LazyPropagation< double >::hasEvidence(gum::NodeId const) const\n"
    "    gum::LazyPropagation< double >::hasEvidence(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_eraseAllEvidence(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_eraseAllEvidence" "', argument " "1"" of type '" "gum::LazyPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  {
    try {
      gum_LazyPropagation_Sl_double_Sg__eraseAllEvidence(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_eraseEvidence__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_eraseEvidence" "', argument " "1"" of type '" "gum::LazyPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LazyPropagation_eraseEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      gum_LazyPropagation_Sl_double_Sg__eraseEvidence__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_eraseEvidence__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_eraseEvidence" "', argument " "1"" of type '" "gum::LazyPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LazyPropagation_eraseEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LazyPropagation_eraseEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      gum_LazyPropagation_Sl_double_Sg__eraseEvidence__SWIG_1(arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_eraseEvidence(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "LazyPropagation_eraseEvidence", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_LazyPropagation_eraseEvidence__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_LazyPropagation_eraseEvidence__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LazyPropagation_eraseEvidence'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::LazyPropagation< double >::eraseEvidence(gum::NodeId const)\n"
    "    gum::LazyPropagation< double >::eraseEvidence(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_hasSoftEvidence__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  bool result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_hasSoftEvidence" "', argument " "1"" of type '" "gum::LazyPropagation< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LazyPropagation_hasSoftEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (bool)gum_LazyPropagation_Sl_double_Sg__hasSoftEvidence__SWIG_0((gum::LazyPropagation< double > const *)arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_hasHardEvidence(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LazyPropagation_hasHardEvidence", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_hasHardEvidence" "', argument " "1"" of type '" "gum::LazyPropagation< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LazyPropagation_hasHardEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LazyPropagation_hasHardEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)gum_LazyPropagation_Sl_double_Sg__hasHardEvidence((gum::LazyPropagation< double > const *)arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_hasSoftEvidence__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  bool result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_hasSoftEvidence" "', argument " "1"" of type '" "gum::LazyPropagation< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LazyPropagation_hasSoftEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LazyPropagation_hasSoftEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)gum_LazyPropagation_Sl_double_Sg__hasSoftEvidence__SWIG_1((gum::LazyPropagation< double > const *)arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_hasSoftEvidence(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "LazyPropagation_hasSoftEvidence", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_LazyPropagation_hasSoftEvidence__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_LazyPropagation_hasSoftEvidence__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LazyPropagation_hasSoftEvidence'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::LazyPropagation< double >::hasSoftEvidence(gum::NodeId const) const\n"
    "    gum::LazyPropagation< double >::hasSoftEvidence(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_nbrEvidence(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::Size result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_nbrEvidence" "', argument " "1"" of type '" "gum::LazyPropagation< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  {
    try {
      result = gum_LazyPropagation_Sl_double_Sg__nbrEvidence((gum::LazyPropagation< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_nbrHardEvidence(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::Size result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_nbrHardEvidence" "', argument " "1"" of type '" "gum::LazyPropagation< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  {
    try {
      result = gum_LazyPropagation_Sl_double_Sg__nbrHardEvidence((gum::LazyPropagation< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_nbrSoftEvidence(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::Size result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_nbrSoftEvidence" "', argument " "1"" of type '" "gum::LazyPropagation< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  {
    try {
      result = gum_LazyPropagation_Sl_double_Sg__nbrSoftEvidence((gum::LazyPropagation< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_eraseAllTargets(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_eraseAllTargets" "', argument " "1"" of type '" "gum::LazyPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  {
    try {
      gum_LazyPropagation_Sl_double_Sg__eraseAllTargets(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_addAllTargets(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_addAllTargets" "', argument " "1"" of type '" "gum::LazyPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  {
    try {
      gum_LazyPropagation_Sl_double_Sg__addAllTargets(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_addTarget__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_addTarget" "', argument " "1"" of type '" "gum::LazyPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LazyPropagation_addTarget" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      gum_LazyPropagation_Sl_double_Sg__addTarget__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_addTarget__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_addTarget" "', argument " "1"" of type '" "gum::LazyPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LazyPropagation_addTarget" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LazyPropagation_addTarget" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      gum_LazyPropagation_Sl_double_Sg__addTarget__SWIG_1(arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_addTarget(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "LazyPropagation_addTarget", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_LazyPropagation_addTarget__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_LazyPropagation_addTarget__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LazyPropagation_addTarget'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::LazyPropagation< double >::addTarget(gum::NodeId const)\n"
    "    gum::LazyPropagation< double >::addTarget(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_eraseTarget__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_eraseTarget" "', argument " "1"" of type '" "gum::LazyPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LazyPropagation_eraseTarget" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      gum_LazyPropagation_Sl_double_Sg__eraseTarget__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_eraseTarget__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_eraseTarget" "', argument " "1"" of type '" "gum::LazyPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LazyPropagation_eraseTarget" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LazyPropagation_eraseTarget" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      gum_LazyPropagation_Sl_double_Sg__eraseTarget__SWIG_1(arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_eraseTarget(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "LazyPropagation_eraseTarget", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_LazyPropagation_eraseTarget__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_LazyPropagation_eraseTarget__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LazyPropagation_eraseTarget'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::LazyPropagation< double >::eraseTarget(gum::NodeId const)\n"
    "    gum::LazyPropagation< double >::eraseTarget(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_isTarget__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  bool result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_isTarget" "', argument " "1"" of type '" "gum::LazyPropagation< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LazyPropagation_isTarget" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (bool)gum_LazyPropagation_Sl_double_Sg__isTarget__SWIG_0((gum::LazyPropagation< double > const *)arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_isTarget__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  bool result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_isTarget" "', argument " "1"" of type '" "gum::LazyPropagation< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LazyPropagation_isTarget" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LazyPropagation_isTarget" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)gum_LazyPropagation_Sl_double_Sg__isTarget__SWIG_1((gum::LazyPropagation< double > const *)arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_isTarget(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "LazyPropagation_isTarget", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_LazyPropagation_isTarget__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_LazyPropagation_isTarget__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LazyPropagation_isTarget'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::LazyPropagation< double >::isTarget(gum::NodeId const) const\n"
    "    gum::LazyPropagation< double >::isTarget(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_nbrTargets(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::Size result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_nbrTargets" "', argument " "1"" of type '" "gum::LazyPropagation< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  {
    try {
      result = gum_LazyPropagation_Sl_double_Sg__nbrTargets((gum::LazyPropagation< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_H__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  double result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_H" "', argument " "1"" of type '" "gum::LazyPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LazyPropagation_H" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (double)gum_LazyPropagation_Sl_double_Sg__H__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_H__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  double result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_H" "', argument " "1"" of type '" "gum::LazyPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LazyPropagation_H" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LazyPropagation_H" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (double)gum_LazyPropagation_Sl_double_Sg__H__SWIG_1(arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_H(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "LazyPropagation_H", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_LazyPropagation_H__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_LazyPropagation_H__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LazyPropagation_H'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::LazyPropagation< double >::H(gum::NodeId const)\n"
    "    gum::LazyPropagation< double >::H(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_evidenceImpact__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  gum::NodeSet *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  gum::Tensor< double > result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_evidenceImpact" "', argument " "1"" of type '" "gum::LazyPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LazyPropagation_evidenceImpact" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_gum__SetT_std__size_t_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LazyPropagation_evidenceImpact" "', argument " "3"" of type '" "gum::NodeSet const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LazyPropagation_evidenceImpact" "', argument " "3"" of type '" "gum::NodeSet const &""'"); 
  }
  arg3 = reinterpret_cast< gum::NodeSet * >(argp3);
  {
    try {
      result = gum_LazyPropagation_Sl_double_Sg__evidenceImpact__SWIG_0(arg1,SWIG_STD_MOVE(arg2),(gum::Set< std::size_t > const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::Tensor< double >(result)), SWIGTYPE_p_gum__TensorT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_evidenceImpact__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  gum::Tensor< double > result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_evidenceImpact" "', argument " "1"" of type '" "gum::LazyPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LazyPropagation_evidenceImpact" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LazyPropagation_evidenceImpact" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LazyPropagation_evidenceImpact" "', argument " "3"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LazyPropagation_evidenceImpact" "', argument " "3"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      result = gum_LazyPropagation_Sl_double_Sg__evidenceImpact__SWIG_1(arg1,(std::string const &)*arg2,(std::vector< std::string,std::allocator< std::string > > const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::Tensor< double >(result)), SWIGTYPE_p_gum__TensorT_double_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_BN(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::IBayesNet< double > *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_BN" "', argument " "1"" of type '" "gum::LazyPropagation< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  {
    try {
      result = (gum::IBayesNet< double > *) &gum_LazyPropagation_Sl_double_Sg__BN((gum::LazyPropagation< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__IBayesNetT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_posterior__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gum::Tensor< double > result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_posterior" "', argument " "1"" of type '" "gum::LazyPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "LazyPropagation_posterior" "', argument " "2"" of type '" "std::string const""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = gum_LazyPropagation_Sl_double_Sg__posterior__SWIG_2(arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::Tensor< double >(result)), SWIGTYPE_p_gum__TensorT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_posterior(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "LazyPropagation_posterior", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_LazyPropagation_posterior__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_LazyPropagation_posterior__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 2) {
    PyObject *retobj = _wrap_LazyPropagation_posterior__SWIG_2(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LazyPropagation_posterior'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::LazyPropagation< double >::posterior(gum::NodeId const)\n"
    "    gum::LazyPropagation< double >::posterior(std::string const &)\n"
    "    gum::LazyPropagation< double >::posterior(std::string const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_eraseAllJointTargets(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_eraseAllJointTargets" "', argument " "1"" of type '" "gum::LazyPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  {
    try {
      gum_LazyPropagation_Sl_double_Sg__eraseAllJointTargets(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_eraseAllMarginalTargets(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_eraseAllMarginalTargets" "', argument " "1"" of type '" "gum::LazyPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  {
    try {
      gum_LazyPropagation_Sl_double_Sg__eraseAllMarginalTargets(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_nbrJointTargets(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::Size result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_nbrJointTargets" "', argument " "1"" of type '" "gum::LazyPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  {
    try {
      result = gum_LazyPropagation_Sl_double_Sg__nbrJointTargets(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_evidenceJointImpact__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = 0 ;
  gum::NodeSet *arg2 = 0 ;
  gum::NodeSet *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  gum::Tensor< double > result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_evidenceJointImpact" "', argument " "1"" of type '" "gum::LazyPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_gum__SetT_std__size_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LazyPropagation_evidenceJointImpact" "', argument " "2"" of type '" "gum::NodeSet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LazyPropagation_evidenceJointImpact" "', argument " "2"" of type '" "gum::NodeSet const &""'"); 
  }
  arg2 = reinterpret_cast< gum::NodeSet * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_gum__SetT_std__size_t_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LazyPropagation_evidenceJointImpact" "', argument " "3"" of type '" "gum::NodeSet const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LazyPropagation_evidenceJointImpact" "', argument " "3"" of type '" "gum::NodeSet const &""'"); 
  }
  arg3 = reinterpret_cast< gum::NodeSet * >(argp3);
  {
    try {
      result = gum_LazyPropagation_Sl_double_Sg__evidenceJointImpact__SWIG_0(arg1,(gum::Set< std::size_t > const &)*arg2,(gum::Set< std::size_t > const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::Tensor< double >(result)), SWIGTYPE_p_gum__TensorT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_evidenceJointImpact__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  gum::Tensor< double > result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_evidenceJointImpact" "', argument " "1"" of type '" "gum::LazyPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LazyPropagation_evidenceJointImpact" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LazyPropagation_evidenceJointImpact" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LazyPropagation_evidenceJointImpact" "', argument " "3"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LazyPropagation_evidenceJointImpact" "', argument " "3"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      result = gum_LazyPropagation_Sl_double_Sg__evidenceJointImpact__SWIG_1(arg1,(std::vector< std::string,std::allocator< std::string > > const &)*arg2,(std::vector< std::string,std::allocator< std::string > > const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::Tensor< double >(result)), SWIGTYPE_p_gum__TensorT_double_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_setNumberOfThreads(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LazyPropagation_setNumberOfThreads", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_setNumberOfThreads" "', argument " "1"" of type '" "gum::LazyPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LazyPropagation_setNumberOfThreads" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      gum_LazyPropagation_Sl_double_Sg__setNumberOfThreads(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_getNumberOfThreads(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_getNumberOfThreads" "', argument " "1"" of type '" "gum::LazyPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  {
    try {
      result = (int)gum_LazyPropagation_Sl_double_Sg__getNumberOfThreads(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_isGumNumberOfThreadsOverriden(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_isGumNumberOfThreadsOverriden" "', argument " "1"" of type '" "gum::LazyPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  {
    try {
      result = (bool)gum_LazyPropagation_Sl_double_Sg__isGumNumberOfThreadsOverriden(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_setMaxMemory(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LazyPropagation_setMaxMemory", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_setMaxMemory" "', argument " "1"" of type '" "gum::LazyPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LazyPropagation_setMaxMemory" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      gum_LazyPropagation_Sl_double_Sg__setMaxMemory(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_setEvidence(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = 0 ;
  PyObject *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LazyPropagation_setEvidence", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_setEvidence" "', argument " "1"" of type '" "gum::LazyPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  arg2 = swig_obj[1];
  {
    try {
      gum_LazyPropagation_Sl_double_Sg__setEvidence(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_updateEvidence(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = 0 ;
  PyObject *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LazyPropagation_updateEvidence", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_updateEvidence" "', argument " "1"" of type '" "gum::LazyPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  arg2 = swig_obj[1];
  {
    try {
      gum_LazyPropagation_Sl_double_Sg__updateEvidence(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_setTargets(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = 0 ;
  PyObject *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LazyPropagation_setTargets", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_setTargets" "', argument " "1"" of type '" "gum::LazyPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  arg2 = swig_obj[1];
  {
    try {
      gum_LazyPropagation_Sl_double_Sg__setTargets(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_hardEvidenceNodes(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_hardEvidenceNodes" "', argument " "1"" of type '" "gum::LazyPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  {
    try {
      result = (PyObject *)gum_LazyPropagation_Sl_double_Sg__hardEvidenceNodes(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_softEvidenceNodes(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_softEvidenceNodes" "', argument " "1"" of type '" "gum::LazyPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  {
    try {
      result = (PyObject *)gum_LazyPropagation_Sl_double_Sg__softEvidenceNodes(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_targets(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_targets" "', argument " "1"" of type '" "gum::LazyPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  {
    try {
      result = (PyObject *)gum_LazyPropagation_Sl_double_Sg__targets(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_evidenceImpact__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = 0 ;
  PyObject *arg2 = 0 ;
  PyObject *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gum::Tensor< double > result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_evidenceImpact" "', argument " "1"" of type '" "gum::LazyPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  arg2 = swig_obj[1];
  arg3 = swig_obj[2];
  {
    try {
      result = gum_LazyPropagation_Sl_double_Sg__evidenceImpact__SWIG_2(arg1,arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::Tensor< double >(result)), SWIGTYPE_p_gum__TensorT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_evidenceImpact(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "LazyPropagation_evidenceImpact", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    {
      int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_gum__SetT_std__size_t_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_1;
    return _wrap_LazyPropagation_evidenceImpact__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 3) {
    int _v = 0;
    {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_2;
    {
      int res = swig::asptr(argv[2], (std::vector< std::string,std::allocator< std::string > >**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_2;
    return _wrap_LazyPropagation_evidenceImpact__SWIG_1(self, argc, argv);
  }
check_2:
  
  if (argc == 3) {
    PyObject *retobj = _wrap_LazyPropagation_evidenceImpact__SWIG_2(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LazyPropagation_evidenceImpact'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::LazyPropagation< double >::evidenceImpact(gum::NodeId,gum::NodeSet const &)\n"
    "    gum::LazyPropagation< double >::evidenceImpact(std::string const &,std::vector< std::string,std::allocator< std::string > > const &)\n"
    "    gum::LazyPropagation< double >::evidenceImpact(PyObject *,PyObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_jointMutualInformation(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = 0 ;
  PyObject *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LazyPropagation_jointMutualInformation", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_jointMutualInformation" "', argument " "1"" of type '" "gum::LazyPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  arg2 = swig_obj[1];
  {
    try {
      result = (double)gum_LazyPropagation_Sl_double_Sg__jointMutualInformation(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_evidenceJointImpact__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = 0 ;
  PyObject *arg2 = 0 ;
  PyObject *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gum::Tensor< double > result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_evidenceJointImpact" "', argument " "1"" of type '" "gum::LazyPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  arg2 = swig_obj[1];
  arg3 = swig_obj[2];
  {
    try {
      result = gum_LazyPropagation_Sl_double_Sg__evidenceJointImpact__SWIG_2(arg1,arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::Tensor< double >(result)), SWIGTYPE_p_gum__TensorT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_evidenceJointImpact(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "LazyPropagation_evidenceJointImpact", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_gum__SetT_std__size_t_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_1;
    {
      int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_gum__SetT_std__size_t_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_1;
    return _wrap_LazyPropagation_evidenceJointImpact__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 3) {
    int _v = 0;
    {
      int res = swig::asptr(argv[1], (std::vector< std::string,std::allocator< std::string > >**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_2;
    {
      int res = swig::asptr(argv[2], (std::vector< std::string,std::allocator< std::string > >**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_2;
    return _wrap_LazyPropagation_evidenceJointImpact__SWIG_1(self, argc, argv);
  }
check_2:
  
  if (argc == 3) {
    PyObject *retobj = _wrap_LazyPropagation_evidenceJointImpact__SWIG_2(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LazyPropagation_evidenceJointImpact'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::LazyPropagation< double >::evidenceJointImpact(gum::NodeSet const &,gum::NodeSet const &)\n"
    "    gum::LazyPropagation< double >::evidenceJointImpact(std::vector< std::string,std::allocator< std::string > > const &,std::vector< std::string,std::allocator< std::string > > const &)\n"
    "    gum::LazyPropagation< double >::evidenceJointImpact(PyObject *,PyObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_jointPosterior(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = 0 ;
  PyObject *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  gum::Tensor< double > result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LazyPropagation_jointPosterior", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_jointPosterior" "', argument " "1"" of type '" "gum::LazyPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  arg2 = swig_obj[1];
  {
    try {
      result = gum_LazyPropagation_Sl_double_Sg__jointPosterior(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::Tensor< double >(result)), SWIGTYPE_p_gum__TensorT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_addJointTarget(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = 0 ;
  PyObject *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LazyPropagation_addJointTarget", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_addJointTarget" "', argument " "1"" of type '" "gum::LazyPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  arg2 = swig_obj[1];
  {
    try {
      gum_LazyPropagation_Sl_double_Sg__addJointTarget(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_eraseJointTarget(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = 0 ;
  PyObject *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LazyPropagation_eraseJointTarget", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_eraseJointTarget" "', argument " "1"" of type '" "gum::LazyPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  arg2 = swig_obj[1];
  {
    try {
      gum_LazyPropagation_Sl_double_Sg__eraseJointTarget(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_isJointTarget(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = 0 ;
  PyObject *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LazyPropagation_isJointTarget", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_isJointTarget" "', argument " "1"" of type '" "gum::LazyPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  arg2 = swig_obj[1];
  {
    try {
      result = (bool)gum_LazyPropagation_Sl_double_Sg__isJointTarget(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_jointTargets(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_jointTargets" "', argument " "1"" of type '" "gum::LazyPropagation< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  {
    try {
      result = (PyObject *)gum_LazyPropagation_Sl_double_Sg__jointTargets((gum::LazyPropagation< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LazyPropagation_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj = NULL;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gum__LazyPropagationT_double_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *LazyPropagation_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_ShaferShenoyInference__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::IBayesNet< double > *arg1 = 0 ;
  gum::RelevantTensorsFinderType arg2 ;
  gum::FindBarrenNodesType arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  gum::ShaferShenoyInference< double > *result = 0 ;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__IBayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ShaferShenoyInference" "', argument " "1"" of type '" "gum::IBayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::IBayesNet< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ShaferShenoyInference" "', argument " "2"" of type '" "gum::RelevantTensorsFinderType""'");
  } 
  arg2 = static_cast< gum::RelevantTensorsFinderType >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ShaferShenoyInference" "', argument " "3"" of type '" "gum::FindBarrenNodesType""'");
  } 
  arg3 = static_cast< gum::FindBarrenNodesType >(val3);
  ecode4 = SWIG_AsVal_bool(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_ShaferShenoyInference" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  {
    try {
      result = (gum::ShaferShenoyInference< double > *)new gum::ShaferShenoyInference< double >((gum::IBayesNet< double > const *)arg1,arg2,arg3,arg4);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__ShaferShenoyInferenceT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ShaferShenoyInference__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::IBayesNet< double > *arg1 = 0 ;
  gum::RelevantTensorsFinderType arg2 ;
  gum::FindBarrenNodesType arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  gum::ShaferShenoyInference< double > *result = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__IBayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ShaferShenoyInference" "', argument " "1"" of type '" "gum::IBayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::IBayesNet< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ShaferShenoyInference" "', argument " "2"" of type '" "gum::RelevantTensorsFinderType""'");
  } 
  arg2 = static_cast< gum::RelevantTensorsFinderType >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ShaferShenoyInference" "', argument " "3"" of type '" "gum::FindBarrenNodesType""'");
  } 
  arg3 = static_cast< gum::FindBarrenNodesType >(val3);
  {
    try {
      result = (gum::ShaferShenoyInference< double > *)new gum::ShaferShenoyInference< double >((gum::IBayesNet< double > const *)arg1,arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__ShaferShenoyInferenceT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ShaferShenoyInference__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::IBayesNet< double > *arg1 = 0 ;
  gum::RelevantTensorsFinderType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  gum::ShaferShenoyInference< double > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__IBayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ShaferShenoyInference" "', argument " "1"" of type '" "gum::IBayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::IBayesNet< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ShaferShenoyInference" "', argument " "2"" of type '" "gum::RelevantTensorsFinderType""'");
  } 
  arg2 = static_cast< gum::RelevantTensorsFinderType >(val2);
  {
    try {
      result = (gum::ShaferShenoyInference< double > *)new gum::ShaferShenoyInference< double >((gum::IBayesNet< double > const *)arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__ShaferShenoyInferenceT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ShaferShenoyInference__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::IBayesNet< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gum::ShaferShenoyInference< double > *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__IBayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ShaferShenoyInference" "', argument " "1"" of type '" "gum::IBayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::IBayesNet< double > * >(argp1);
  {
    try {
      result = (gum::ShaferShenoyInference< double > *)new gum::ShaferShenoyInference< double >((gum::IBayesNet< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__ShaferShenoyInferenceT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ShaferShenoyInference(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_ShaferShenoyInference", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    PyObject *retobj = _wrap_new_ShaferShenoyInference__SWIG_3(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 2) {
    PyObject *retobj = _wrap_new_ShaferShenoyInference__SWIG_2(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    PyObject *retobj = _wrap_new_ShaferShenoyInference__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 4) {
    PyObject *retobj = _wrap_new_ShaferShenoyInference__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_ShaferShenoyInference'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::ShaferShenoyInference< double >::ShaferShenoyInference(gum::IBayesNet< double > const *,gum::RelevantTensorsFinderType,gum::FindBarrenNodesType,bool)\n"
    "    gum::ShaferShenoyInference< double >::ShaferShenoyInference(gum::IBayesNet< double > const *,gum::RelevantTensorsFinderType,gum::FindBarrenNodesType)\n"
    "    gum::ShaferShenoyInference< double >::ShaferShenoyInference(gum::IBayesNet< double > const *,gum::RelevantTensorsFinderType)\n"
    "    gum::ShaferShenoyInference< double >::ShaferShenoyInference(gum::IBayesNet< double > const *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_ShaferShenoyInference(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::ShaferShenoyInference< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ShaferShenoyInferenceT_double_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ShaferShenoyInference" "', argument " "1"" of type '" "gum::ShaferShenoyInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::ShaferShenoyInference< double > * >(argp1);
  {
    try {
      delete arg1;
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShaferShenoyInference_setTriangulation(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::ShaferShenoyInference< double > *arg1 = 0 ;
  gum::Triangulation *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ShaferShenoyInference_setTriangulation", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ShaferShenoyInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShaferShenoyInference_setTriangulation" "', argument " "1"" of type '" "gum::ShaferShenoyInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::ShaferShenoyInference< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_gum__Triangulation,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ShaferShenoyInference_setTriangulation" "', argument " "2"" of type '" "gum::Triangulation const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "ShaferShenoyInference_setTriangulation" "', argument " "2"" of type '" "gum::Triangulation const &""'"); 
  }
  arg2 = reinterpret_cast< gum::Triangulation * >(argp2);
  {
    try {
      (arg1)->setTriangulation((gum::Triangulation const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShaferShenoyInference_setRelevantTensorsFinderType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::ShaferShenoyInference< double > *arg1 = 0 ;
  gum::RelevantTensorsFinderType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ShaferShenoyInference_setRelevantTensorsFinderType", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ShaferShenoyInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShaferShenoyInference_setRelevantTensorsFinderType" "', argument " "1"" of type '" "gum::ShaferShenoyInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::ShaferShenoyInference< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ShaferShenoyInference_setRelevantTensorsFinderType" "', argument " "2"" of type '" "gum::RelevantTensorsFinderType""'");
  } 
  arg2 = static_cast< gum::RelevantTensorsFinderType >(val2);
  {
    try {
      (arg1)->setRelevantTensorsFinderType(arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShaferShenoyInference_setFindBarrenNodesType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::ShaferShenoyInference< double > *arg1 = 0 ;
  gum::FindBarrenNodesType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ShaferShenoyInference_setFindBarrenNodesType", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ShaferShenoyInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShaferShenoyInference_setFindBarrenNodesType" "', argument " "1"" of type '" "gum::ShaferShenoyInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::ShaferShenoyInference< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ShaferShenoyInference_setFindBarrenNodesType" "', argument " "2"" of type '" "gum::FindBarrenNodesType""'");
  } 
  arg2 = static_cast< gum::FindBarrenNodesType >(val2);
  {
    try {
      (arg1)->setFindBarrenNodesType(arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShaferShenoyInference_joinTree(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::ShaferShenoyInference< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::JoinTree *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ShaferShenoyInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShaferShenoyInference_joinTree" "', argument " "1"" of type '" "gum::ShaferShenoyInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::ShaferShenoyInference< double > * >(argp1);
  {
    try {
      result = (gum::JoinTree *)(arg1)->joinTree();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__CliqueGraph, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShaferShenoyInference_junctionTree(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::ShaferShenoyInference< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::JunctionTree *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ShaferShenoyInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShaferShenoyInference_junctionTree" "', argument " "1"" of type '" "gum::ShaferShenoyInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::ShaferShenoyInference< double > * >(argp1);
  {
    try {
      result = (gum::JunctionTree *)(arg1)->junctionTree();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__CliqueGraph, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShaferShenoyInference_evidenceProbability(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::ShaferShenoyInference< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ShaferShenoyInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShaferShenoyInference_evidenceProbability" "', argument " "1"" of type '" "gum::ShaferShenoyInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::ShaferShenoyInference< double > * >(argp1);
  {
    try {
      result = (double)(arg1)->evidenceProbability();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShaferShenoyInference_makeInference(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::ShaferShenoyInference< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ShaferShenoyInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShaferShenoyInference_makeInference" "', argument " "1"" of type '" "gum::ShaferShenoyInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::ShaferShenoyInference< double > * >(argp1);
  {
    try {
      gum_ShaferShenoyInference_Sl_double_Sg__makeInference(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShaferShenoyInference_posterior__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::ShaferShenoyInference< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  gum::Tensor< double > result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ShaferShenoyInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShaferShenoyInference_posterior" "', argument " "1"" of type '" "gum::ShaferShenoyInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::ShaferShenoyInference< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ShaferShenoyInference_posterior" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = gum_ShaferShenoyInference_Sl_double_Sg__posterior__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::Tensor< double >(result)), SWIGTYPE_p_gum__TensorT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShaferShenoyInference_posterior__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::ShaferShenoyInference< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  gum::Tensor< double > result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ShaferShenoyInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShaferShenoyInference_posterior" "', argument " "1"" of type '" "gum::ShaferShenoyInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::ShaferShenoyInference< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ShaferShenoyInference_posterior" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "ShaferShenoyInference_posterior" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = gum_ShaferShenoyInference_Sl_double_Sg__posterior__SWIG_1(arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::Tensor< double >(result)), SWIGTYPE_p_gum__TensorT_double_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShaferShenoyInference_addEvidence__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::ShaferShenoyInference< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  gum::Idx arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ShaferShenoyInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShaferShenoyInference_addEvidence" "', argument " "1"" of type '" "gum::ShaferShenoyInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::ShaferShenoyInference< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ShaferShenoyInference_addEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ShaferShenoyInference_addEvidence" "', argument " "3"" of type '" "gum::Idx""'");
  } 
  arg3 = static_cast< gum::Idx >(val3);
  {
    try {
      gum_ShaferShenoyInference_Sl_double_Sg__addEvidence__SWIG_0(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShaferShenoyInference_addEvidence__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::ShaferShenoyInference< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  gum::Idx arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  size_t val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ShaferShenoyInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShaferShenoyInference_addEvidence" "', argument " "1"" of type '" "gum::ShaferShenoyInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::ShaferShenoyInference< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ShaferShenoyInference_addEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "ShaferShenoyInference_addEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ShaferShenoyInference_addEvidence" "', argument " "3"" of type '" "gum::Idx""'");
  } 
  arg3 = static_cast< gum::Idx >(val3);
  {
    try {
      gum_ShaferShenoyInference_Sl_double_Sg__addEvidence__SWIG_1(arg1,(std::string const &)*arg2,SWIG_STD_MOVE(arg3));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShaferShenoyInference_addEvidence__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::ShaferShenoyInference< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ShaferShenoyInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShaferShenoyInference_addEvidence" "', argument " "1"" of type '" "gum::ShaferShenoyInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::ShaferShenoyInference< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ShaferShenoyInference_addEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ShaferShenoyInference_addEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "ShaferShenoyInference_addEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      gum_ShaferShenoyInference_Sl_double_Sg__addEvidence__SWIG_2(arg1,SWIG_STD_MOVE(arg2),(std::string const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShaferShenoyInference_addEvidence__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::ShaferShenoyInference< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ShaferShenoyInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShaferShenoyInference_addEvidence" "', argument " "1"" of type '" "gum::ShaferShenoyInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::ShaferShenoyInference< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ShaferShenoyInference_addEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "ShaferShenoyInference_addEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ShaferShenoyInference_addEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "ShaferShenoyInference_addEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      gum_ShaferShenoyInference_Sl_double_Sg__addEvidence__SWIG_3(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShaferShenoyInference_addEvidence__SWIG_4(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::ShaferShenoyInference< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ShaferShenoyInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShaferShenoyInference_addEvidence" "', argument " "1"" of type '" "gum::ShaferShenoyInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::ShaferShenoyInference< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ShaferShenoyInference_addEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ShaferShenoyInference_addEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "ShaferShenoyInference_addEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      gum_ShaferShenoyInference_Sl_double_Sg__addEvidence__SWIG_4(arg1,SWIG_STD_MOVE(arg2),(std::vector< double,std::allocator< double > > const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShaferShenoyInference_addEvidence__SWIG_5(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::ShaferShenoyInference< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ShaferShenoyInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShaferShenoyInference_addEvidence" "', argument " "1"" of type '" "gum::ShaferShenoyInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::ShaferShenoyInference< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ShaferShenoyInference_addEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "ShaferShenoyInference_addEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ShaferShenoyInference_addEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "ShaferShenoyInference_addEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      gum_ShaferShenoyInference_Sl_double_Sg__addEvidence__SWIG_5(arg1,(std::string const &)*arg2,(std::vector< double,std::allocator< double > > const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShaferShenoyInference_addEvidence__SWIG_6(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::ShaferShenoyInference< double > *arg1 = 0 ;
  gum::Tensor< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ShaferShenoyInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShaferShenoyInference_addEvidence" "', argument " "1"" of type '" "gum::ShaferShenoyInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::ShaferShenoyInference< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_gum__TensorT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ShaferShenoyInference_addEvidence" "', argument " "2"" of type '" "gum::Tensor< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "ShaferShenoyInference_addEvidence" "', argument " "2"" of type '" "gum::Tensor< double > const &""'"); 
  }
  arg2 = reinterpret_cast< gum::Tensor< double > * >(argp2);
  {
    try {
      gum_ShaferShenoyInference_Sl_double_Sg__addEvidence__SWIG_6(arg1,(gum::Tensor< double > const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShaferShenoyInference_addEvidence(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ShaferShenoyInference_addEvidence", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    PyObject *retobj = _wrap_ShaferShenoyInference_addEvidence__SWIG_6(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_2;
    {
      {
        int res = SWIG_AsVal_size_t(argv[2], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_2;
    return _wrap_ShaferShenoyInference_addEvidence__SWIG_0(self, argc, argv);
  }
check_2:
  
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_3;
    {
      int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_3;
    return _wrap_ShaferShenoyInference_addEvidence__SWIG_2(self, argc, argv);
  }
check_3:
  
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_4;
    {
      int res = swig::asptr(argv[2], (std::vector< double,std::allocator< double > >**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_4;
    return _wrap_ShaferShenoyInference_addEvidence__SWIG_4(self, argc, argv);
  }
check_4:
  
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[2], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_5;
    return _wrap_ShaferShenoyInference_addEvidence__SWIG_1(self, argc, argv);
  }
check_5:
  
  if (argc == 3) {
    int _v = 0;
    {
      int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_6;
    return _wrap_ShaferShenoyInference_addEvidence__SWIG_3(self, argc, argv);
  }
check_6:
  
  if (argc == 3) {
    PyObject *retobj = _wrap_ShaferShenoyInference_addEvidence__SWIG_5(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ShaferShenoyInference_addEvidence'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::ShaferShenoyInference< double >::addEvidence(gum::NodeId const,gum::Idx const)\n"
    "    gum::ShaferShenoyInference< double >::addEvidence(std::string const &,gum::Idx const)\n"
    "    gum::ShaferShenoyInference< double >::addEvidence(gum::NodeId const,std::string const &)\n"
    "    gum::ShaferShenoyInference< double >::addEvidence(std::string const &,std::string const &)\n"
    "    gum::ShaferShenoyInference< double >::addEvidence(gum::NodeId const,std::vector< double,std::allocator< double > > const &)\n"
    "    gum::ShaferShenoyInference< double >::addEvidence(std::string const &,std::vector< double,std::allocator< double > > const &)\n"
    "    gum::ShaferShenoyInference< double >::addEvidence(gum::Tensor< double > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ShaferShenoyInference_chgEvidence__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::ShaferShenoyInference< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  gum::Idx arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ShaferShenoyInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShaferShenoyInference_chgEvidence" "', argument " "1"" of type '" "gum::ShaferShenoyInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::ShaferShenoyInference< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ShaferShenoyInference_chgEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ShaferShenoyInference_chgEvidence" "', argument " "3"" of type '" "gum::Idx""'");
  } 
  arg3 = static_cast< gum::Idx >(val3);
  {
    try {
      gum_ShaferShenoyInference_Sl_double_Sg__chgEvidence__SWIG_0(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShaferShenoyInference_chgEvidence__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::ShaferShenoyInference< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  gum::Idx arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  size_t val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ShaferShenoyInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShaferShenoyInference_chgEvidence" "', argument " "1"" of type '" "gum::ShaferShenoyInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::ShaferShenoyInference< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ShaferShenoyInference_chgEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "ShaferShenoyInference_chgEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ShaferShenoyInference_chgEvidence" "', argument " "3"" of type '" "gum::Idx""'");
  } 
  arg3 = static_cast< gum::Idx >(val3);
  {
    try {
      gum_ShaferShenoyInference_Sl_double_Sg__chgEvidence__SWIG_1(arg1,(std::string const &)*arg2,SWIG_STD_MOVE(arg3));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShaferShenoyInference_chgEvidence__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::ShaferShenoyInference< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ShaferShenoyInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShaferShenoyInference_chgEvidence" "', argument " "1"" of type '" "gum::ShaferShenoyInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::ShaferShenoyInference< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ShaferShenoyInference_chgEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ShaferShenoyInference_chgEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "ShaferShenoyInference_chgEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      gum_ShaferShenoyInference_Sl_double_Sg__chgEvidence__SWIG_2(arg1,SWIG_STD_MOVE(arg2),(std::string const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShaferShenoyInference_chgEvidence__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::ShaferShenoyInference< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ShaferShenoyInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShaferShenoyInference_chgEvidence" "', argument " "1"" of type '" "gum::ShaferShenoyInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::ShaferShenoyInference< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ShaferShenoyInference_chgEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "ShaferShenoyInference_chgEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ShaferShenoyInference_chgEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "ShaferShenoyInference_chgEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      gum_ShaferShenoyInference_Sl_double_Sg__chgEvidence__SWIG_3(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShaferShenoyInference_chgEvidence__SWIG_4(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::ShaferShenoyInference< double > *arg1 = 0 ;
  gum::Tensor< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ShaferShenoyInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShaferShenoyInference_chgEvidence" "', argument " "1"" of type '" "gum::ShaferShenoyInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::ShaferShenoyInference< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_gum__TensorT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ShaferShenoyInference_chgEvidence" "', argument " "2"" of type '" "gum::Tensor< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "ShaferShenoyInference_chgEvidence" "', argument " "2"" of type '" "gum::Tensor< double > const &""'"); 
  }
  arg2 = reinterpret_cast< gum::Tensor< double > * >(argp2);
  {
    try {
      gum_ShaferShenoyInference_Sl_double_Sg__chgEvidence__SWIG_4(arg1,(gum::Tensor< double > const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShaferShenoyInference_chgEvidence__SWIG_5(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::ShaferShenoyInference< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ShaferShenoyInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShaferShenoyInference_chgEvidence" "', argument " "1"" of type '" "gum::ShaferShenoyInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::ShaferShenoyInference< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ShaferShenoyInference_chgEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ShaferShenoyInference_chgEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "ShaferShenoyInference_chgEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      gum_ShaferShenoyInference_Sl_double_Sg__chgEvidence__SWIG_5(arg1,SWIG_STD_MOVE(arg2),(std::vector< double,std::allocator< double > > const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShaferShenoyInference_chgEvidence__SWIG_6(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::ShaferShenoyInference< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ShaferShenoyInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShaferShenoyInference_chgEvidence" "', argument " "1"" of type '" "gum::ShaferShenoyInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::ShaferShenoyInference< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ShaferShenoyInference_chgEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "ShaferShenoyInference_chgEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ShaferShenoyInference_chgEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "ShaferShenoyInference_chgEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      gum_ShaferShenoyInference_Sl_double_Sg__chgEvidence__SWIG_6(arg1,(std::string const &)*arg2,(std::vector< double,std::allocator< double > > const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShaferShenoyInference_chgEvidence(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ShaferShenoyInference_chgEvidence", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    PyObject *retobj = _wrap_ShaferShenoyInference_chgEvidence__SWIG_4(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_2;
    {
      {
        int res = SWIG_AsVal_size_t(argv[2], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_2;
    return _wrap_ShaferShenoyInference_chgEvidence__SWIG_0(self, argc, argv);
  }
check_2:
  
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_3;
    {
      int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_3;
    return _wrap_ShaferShenoyInference_chgEvidence__SWIG_2(self, argc, argv);
  }
check_3:
  
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_4;
    {
      int res = swig::asptr(argv[2], (std::vector< double,std::allocator< double > >**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_4;
    return _wrap_ShaferShenoyInference_chgEvidence__SWIG_5(self, argc, argv);
  }
check_4:
  
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[2], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_5;
    return _wrap_ShaferShenoyInference_chgEvidence__SWIG_1(self, argc, argv);
  }
check_5:
  
  if (argc == 3) {
    int _v = 0;
    {
      int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_6;
    return _wrap_ShaferShenoyInference_chgEvidence__SWIG_3(self, argc, argv);
  }
check_6:
  
  if (argc == 3) {
    PyObject *retobj = _wrap_ShaferShenoyInference_chgEvidence__SWIG_6(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ShaferShenoyInference_chgEvidence'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::ShaferShenoyInference< double >::chgEvidence(gum::NodeId const,gum::Idx const)\n"
    "    gum::ShaferShenoyInference< double >::chgEvidence(std::string const &,gum::Idx const)\n"
    "    gum::ShaferShenoyInference< double >::chgEvidence(gum::NodeId const,std::string const &)\n"
    "    gum::ShaferShenoyInference< double >::chgEvidence(std::string const &,std::string const &)\n"
    "    gum::ShaferShenoyInference< double >::chgEvidence(gum::Tensor< double > const &)\n"
    "    gum::ShaferShenoyInference< double >::chgEvidence(gum::NodeId const,std::vector< double,std::allocator< double > > const &)\n"
    "    gum::ShaferShenoyInference< double >::chgEvidence(std::string const &,std::vector< double,std::allocator< double > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ShaferShenoyInference_hasEvidence__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::ShaferShenoyInference< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  bool result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ShaferShenoyInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShaferShenoyInference_hasEvidence" "', argument " "1"" of type '" "gum::ShaferShenoyInference< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::ShaferShenoyInference< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ShaferShenoyInference_hasEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (bool)gum_ShaferShenoyInference_Sl_double_Sg__hasEvidence__SWIG_0((gum::ShaferShenoyInference< double > const *)arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShaferShenoyInference_hasEvidence__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::ShaferShenoyInference< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  bool result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ShaferShenoyInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShaferShenoyInference_hasEvidence" "', argument " "1"" of type '" "gum::ShaferShenoyInference< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::ShaferShenoyInference< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ShaferShenoyInference_hasEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "ShaferShenoyInference_hasEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)gum_ShaferShenoyInference_Sl_double_Sg__hasEvidence__SWIG_1((gum::ShaferShenoyInference< double > const *)arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShaferShenoyInference_hasEvidence(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ShaferShenoyInference_hasEvidence", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_ShaferShenoyInference_hasEvidence__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_ShaferShenoyInference_hasEvidence__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ShaferShenoyInference_hasEvidence'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::ShaferShenoyInference< double >::hasEvidence(gum::NodeId const) const\n"
    "    gum::ShaferShenoyInference< double >::hasEvidence(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ShaferShenoyInference_eraseAllEvidence(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::ShaferShenoyInference< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ShaferShenoyInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShaferShenoyInference_eraseAllEvidence" "', argument " "1"" of type '" "gum::ShaferShenoyInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::ShaferShenoyInference< double > * >(argp1);
  {
    try {
      gum_ShaferShenoyInference_Sl_double_Sg__eraseAllEvidence(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShaferShenoyInference_eraseEvidence__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::ShaferShenoyInference< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ShaferShenoyInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShaferShenoyInference_eraseEvidence" "', argument " "1"" of type '" "gum::ShaferShenoyInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::ShaferShenoyInference< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ShaferShenoyInference_eraseEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      gum_ShaferShenoyInference_Sl_double_Sg__eraseEvidence__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShaferShenoyInference_eraseEvidence__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::ShaferShenoyInference< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ShaferShenoyInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShaferShenoyInference_eraseEvidence" "', argument " "1"" of type '" "gum::ShaferShenoyInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::ShaferShenoyInference< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ShaferShenoyInference_eraseEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "ShaferShenoyInference_eraseEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      gum_ShaferShenoyInference_Sl_double_Sg__eraseEvidence__SWIG_1(arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShaferShenoyInference_eraseEvidence(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ShaferShenoyInference_eraseEvidence", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_ShaferShenoyInference_eraseEvidence__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_ShaferShenoyInference_eraseEvidence__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ShaferShenoyInference_eraseEvidence'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::ShaferShenoyInference< double >::eraseEvidence(gum::NodeId const)\n"
    "    gum::ShaferShenoyInference< double >::eraseEvidence(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ShaferShenoyInference_hasSoftEvidence__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::ShaferShenoyInference< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  bool result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ShaferShenoyInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShaferShenoyInference_hasSoftEvidence" "', argument " "1"" of type '" "gum::ShaferShenoyInference< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::ShaferShenoyInference< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ShaferShenoyInference_hasSoftEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (bool)gum_ShaferShenoyInference_Sl_double_Sg__hasSoftEvidence__SWIG_0((gum::ShaferShenoyInference< double > const *)arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShaferShenoyInference_hasHardEvidence(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::ShaferShenoyInference< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ShaferShenoyInference_hasHardEvidence", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ShaferShenoyInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShaferShenoyInference_hasHardEvidence" "', argument " "1"" of type '" "gum::ShaferShenoyInference< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::ShaferShenoyInference< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ShaferShenoyInference_hasHardEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "ShaferShenoyInference_hasHardEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)gum_ShaferShenoyInference_Sl_double_Sg__hasHardEvidence((gum::ShaferShenoyInference< double > const *)arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShaferShenoyInference_hasSoftEvidence__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::ShaferShenoyInference< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  bool result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ShaferShenoyInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShaferShenoyInference_hasSoftEvidence" "', argument " "1"" of type '" "gum::ShaferShenoyInference< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::ShaferShenoyInference< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ShaferShenoyInference_hasSoftEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "ShaferShenoyInference_hasSoftEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)gum_ShaferShenoyInference_Sl_double_Sg__hasSoftEvidence__SWIG_1((gum::ShaferShenoyInference< double > const *)arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShaferShenoyInference_hasSoftEvidence(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ShaferShenoyInference_hasSoftEvidence", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_ShaferShenoyInference_hasSoftEvidence__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_ShaferShenoyInference_hasSoftEvidence__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ShaferShenoyInference_hasSoftEvidence'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::ShaferShenoyInference< double >::hasSoftEvidence(gum::NodeId const) const\n"
    "    gum::ShaferShenoyInference< double >::hasSoftEvidence(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ShaferShenoyInference_nbrEvidence(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::ShaferShenoyInference< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::Size result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ShaferShenoyInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShaferShenoyInference_nbrEvidence" "', argument " "1"" of type '" "gum::ShaferShenoyInference< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::ShaferShenoyInference< double > * >(argp1);
  {
    try {
      result = gum_ShaferShenoyInference_Sl_double_Sg__nbrEvidence((gum::ShaferShenoyInference< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShaferShenoyInference_nbrHardEvidence(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::ShaferShenoyInference< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::Size result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ShaferShenoyInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShaferShenoyInference_nbrHardEvidence" "', argument " "1"" of type '" "gum::ShaferShenoyInference< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::ShaferShenoyInference< double > * >(argp1);
  {
    try {
      result = gum_ShaferShenoyInference_Sl_double_Sg__nbrHardEvidence((gum::ShaferShenoyInference< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShaferShenoyInference_nbrSoftEvidence(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::ShaferShenoyInference< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::Size result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ShaferShenoyInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShaferShenoyInference_nbrSoftEvidence" "', argument " "1"" of type '" "gum::ShaferShenoyInference< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::ShaferShenoyInference< double > * >(argp1);
  {
    try {
      result = gum_ShaferShenoyInference_Sl_double_Sg__nbrSoftEvidence((gum::ShaferShenoyInference< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShaferShenoyInference_eraseAllTargets(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::ShaferShenoyInference< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ShaferShenoyInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShaferShenoyInference_eraseAllTargets" "', argument " "1"" of type '" "gum::ShaferShenoyInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::ShaferShenoyInference< double > * >(argp1);
  {
    try {
      gum_ShaferShenoyInference_Sl_double_Sg__eraseAllTargets(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShaferShenoyInference_addAllTargets(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::ShaferShenoyInference< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ShaferShenoyInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShaferShenoyInference_addAllTargets" "', argument " "1"" of type '" "gum::ShaferShenoyInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::ShaferShenoyInference< double > * >(argp1);
  {
    try {
      gum_ShaferShenoyInference_Sl_double_Sg__addAllTargets(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShaferShenoyInference_addTarget__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::ShaferShenoyInference< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ShaferShenoyInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShaferShenoyInference_addTarget" "', argument " "1"" of type '" "gum::ShaferShenoyInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::ShaferShenoyInference< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ShaferShenoyInference_addTarget" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      gum_ShaferShenoyInference_Sl_double_Sg__addTarget__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShaferShenoyInference_addTarget__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::ShaferShenoyInference< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ShaferShenoyInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShaferShenoyInference_addTarget" "', argument " "1"" of type '" "gum::ShaferShenoyInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::ShaferShenoyInference< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ShaferShenoyInference_addTarget" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "ShaferShenoyInference_addTarget" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      gum_ShaferShenoyInference_Sl_double_Sg__addTarget__SWIG_1(arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShaferShenoyInference_addTarget(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ShaferShenoyInference_addTarget", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_ShaferShenoyInference_addTarget__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_ShaferShenoyInference_addTarget__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ShaferShenoyInference_addTarget'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::ShaferShenoyInference< double >::addTarget(gum::NodeId const)\n"
    "    gum::ShaferShenoyInference< double >::addTarget(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ShaferShenoyInference_eraseTarget__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::ShaferShenoyInference< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ShaferShenoyInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShaferShenoyInference_eraseTarget" "', argument " "1"" of type '" "gum::ShaferShenoyInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::ShaferShenoyInference< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ShaferShenoyInference_eraseTarget" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      gum_ShaferShenoyInference_Sl_double_Sg__eraseTarget__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShaferShenoyInference_eraseTarget__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::ShaferShenoyInference< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ShaferShenoyInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShaferShenoyInference_eraseTarget" "', argument " "1"" of type '" "gum::ShaferShenoyInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::ShaferShenoyInference< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ShaferShenoyInference_eraseTarget" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "ShaferShenoyInference_eraseTarget" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      gum_ShaferShenoyInference_Sl_double_Sg__eraseTarget__SWIG_1(arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShaferShenoyInference_eraseTarget(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ShaferShenoyInference_eraseTarget", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_ShaferShenoyInference_eraseTarget__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_ShaferShenoyInference_eraseTarget__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ShaferShenoyInference_eraseTarget'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::ShaferShenoyInference< double >::eraseTarget(gum::NodeId const)\n"
    "    gum::ShaferShenoyInference< double >::eraseTarget(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ShaferShenoyInference_isTarget__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::ShaferShenoyInference< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  bool result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ShaferShenoyInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShaferShenoyInference_isTarget" "', argument " "1"" of type '" "gum::ShaferShenoyInference< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::ShaferShenoyInference< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ShaferShenoyInference_isTarget" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (bool)gum_ShaferShenoyInference_Sl_double_Sg__isTarget__SWIG_0((gum::ShaferShenoyInference< double > const *)arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShaferShenoyInference_isTarget__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::ShaferShenoyInference< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  bool result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ShaferShenoyInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShaferShenoyInference_isTarget" "', argument " "1"" of type '" "gum::ShaferShenoyInference< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::ShaferShenoyInference< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ShaferShenoyInference_isTarget" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "ShaferShenoyInference_isTarget" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)gum_ShaferShenoyInference_Sl_double_Sg__isTarget__SWIG_1((gum::ShaferShenoyInference< double > const *)arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShaferShenoyInference_isTarget(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ShaferShenoyInference_isTarget", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_ShaferShenoyInference_isTarget__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_ShaferShenoyInference_isTarget__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ShaferShenoyInference_isTarget'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::ShaferShenoyInference< double >::isTarget(gum::NodeId const) const\n"
    "    gum::ShaferShenoyInference< double >::isTarget(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ShaferShenoyInference_nbrTargets(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::ShaferShenoyInference< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::Size result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ShaferShenoyInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShaferShenoyInference_nbrTargets" "', argument " "1"" of type '" "gum::ShaferShenoyInference< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::ShaferShenoyInference< double > * >(argp1);
  {
    try {
      result = gum_ShaferShenoyInference_Sl_double_Sg__nbrTargets((gum::ShaferShenoyInference< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShaferShenoyInference_H__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::ShaferShenoyInference< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  double result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ShaferShenoyInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShaferShenoyInference_H" "', argument " "1"" of type '" "gum::ShaferShenoyInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::ShaferShenoyInference< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ShaferShenoyInference_H" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (double)gum_ShaferShenoyInference_Sl_double_Sg__H__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShaferShenoyInference_H__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::ShaferShenoyInference< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  double result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ShaferShenoyInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShaferShenoyInference_H" "', argument " "1"" of type '" "gum::ShaferShenoyInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::ShaferShenoyInference< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ShaferShenoyInference_H" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "ShaferShenoyInference_H" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (double)gum_ShaferShenoyInference_Sl_double_Sg__H__SWIG_1(arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShaferShenoyInference_H(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ShaferShenoyInference_H", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_ShaferShenoyInference_H__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_ShaferShenoyInference_H__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ShaferShenoyInference_H'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::ShaferShenoyInference< double >::H(gum::NodeId const)\n"
    "    gum::ShaferShenoyInference< double >::H(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ShaferShenoyInference_evidenceImpact__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::ShaferShenoyInference< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  gum::NodeSet *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  gum::Tensor< double > result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ShaferShenoyInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShaferShenoyInference_evidenceImpact" "', argument " "1"" of type '" "gum::ShaferShenoyInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::ShaferShenoyInference< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ShaferShenoyInference_evidenceImpact" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_gum__SetT_std__size_t_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ShaferShenoyInference_evidenceImpact" "', argument " "3"" of type '" "gum::NodeSet const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "ShaferShenoyInference_evidenceImpact" "', argument " "3"" of type '" "gum::NodeSet const &""'"); 
  }
  arg3 = reinterpret_cast< gum::NodeSet * >(argp3);
  {
    try {
      result = gum_ShaferShenoyInference_Sl_double_Sg__evidenceImpact__SWIG_0(arg1,SWIG_STD_MOVE(arg2),(gum::Set< std::size_t > const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::Tensor< double >(result)), SWIGTYPE_p_gum__TensorT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShaferShenoyInference_evidenceImpact__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::ShaferShenoyInference< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  gum::Tensor< double > result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ShaferShenoyInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShaferShenoyInference_evidenceImpact" "', argument " "1"" of type '" "gum::ShaferShenoyInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::ShaferShenoyInference< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ShaferShenoyInference_evidenceImpact" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "ShaferShenoyInference_evidenceImpact" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ShaferShenoyInference_evidenceImpact" "', argument " "3"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "ShaferShenoyInference_evidenceImpact" "', argument " "3"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      result = gum_ShaferShenoyInference_Sl_double_Sg__evidenceImpact__SWIG_1(arg1,(std::string const &)*arg2,(std::vector< std::string,std::allocator< std::string > > const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::Tensor< double >(result)), SWIGTYPE_p_gum__TensorT_double_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShaferShenoyInference_BN(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::ShaferShenoyInference< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::IBayesNet< double > *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ShaferShenoyInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShaferShenoyInference_BN" "', argument " "1"" of type '" "gum::ShaferShenoyInference< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::ShaferShenoyInference< double > * >(argp1);
  {
    try {
      result = (gum::IBayesNet< double > *) &gum_ShaferShenoyInference_Sl_double_Sg__BN((gum::ShaferShenoyInference< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__IBayesNetT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShaferShenoyInference_posterior__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::ShaferShenoyInference< double > *arg1 = 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gum::Tensor< double > result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ShaferShenoyInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShaferShenoyInference_posterior" "', argument " "1"" of type '" "gum::ShaferShenoyInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::ShaferShenoyInference< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "ShaferShenoyInference_posterior" "', argument " "2"" of type '" "std::string const""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = gum_ShaferShenoyInference_Sl_double_Sg__posterior__SWIG_2(arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::Tensor< double >(result)), SWIGTYPE_p_gum__TensorT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShaferShenoyInference_posterior(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ShaferShenoyInference_posterior", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_ShaferShenoyInference_posterior__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_ShaferShenoyInference_posterior__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 2) {
    PyObject *retobj = _wrap_ShaferShenoyInference_posterior__SWIG_2(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ShaferShenoyInference_posterior'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::ShaferShenoyInference< double >::posterior(gum::NodeId const)\n"
    "    gum::ShaferShenoyInference< double >::posterior(std::string const &)\n"
    "    gum::ShaferShenoyInference< double >::posterior(std::string const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ShaferShenoyInference_eraseAllJointTargets(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::ShaferShenoyInference< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ShaferShenoyInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShaferShenoyInference_eraseAllJointTargets" "', argument " "1"" of type '" "gum::ShaferShenoyInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::ShaferShenoyInference< double > * >(argp1);
  {
    try {
      gum_ShaferShenoyInference_Sl_double_Sg__eraseAllJointTargets(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShaferShenoyInference_eraseAllMarginalTargets(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::ShaferShenoyInference< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ShaferShenoyInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShaferShenoyInference_eraseAllMarginalTargets" "', argument " "1"" of type '" "gum::ShaferShenoyInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::ShaferShenoyInference< double > * >(argp1);
  {
    try {
      gum_ShaferShenoyInference_Sl_double_Sg__eraseAllMarginalTargets(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShaferShenoyInference_nbrJointTargets(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::ShaferShenoyInference< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::Size result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ShaferShenoyInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShaferShenoyInference_nbrJointTargets" "', argument " "1"" of type '" "gum::ShaferShenoyInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::ShaferShenoyInference< double > * >(argp1);
  {
    try {
      result = gum_ShaferShenoyInference_Sl_double_Sg__nbrJointTargets(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShaferShenoyInference_evidenceJointImpact__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::ShaferShenoyInference< double > *arg1 = 0 ;
  gum::NodeSet *arg2 = 0 ;
  gum::NodeSet *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  gum::Tensor< double > result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ShaferShenoyInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShaferShenoyInference_evidenceJointImpact" "', argument " "1"" of type '" "gum::ShaferShenoyInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::ShaferShenoyInference< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_gum__SetT_std__size_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ShaferShenoyInference_evidenceJointImpact" "', argument " "2"" of type '" "gum::NodeSet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "ShaferShenoyInference_evidenceJointImpact" "', argument " "2"" of type '" "gum::NodeSet const &""'"); 
  }
  arg2 = reinterpret_cast< gum::NodeSet * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_gum__SetT_std__size_t_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ShaferShenoyInference_evidenceJointImpact" "', argument " "3"" of type '" "gum::NodeSet const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "ShaferShenoyInference_evidenceJointImpact" "', argument " "3"" of type '" "gum::NodeSet const &""'"); 
  }
  arg3 = reinterpret_cast< gum::NodeSet * >(argp3);
  {
    try {
      result = gum_ShaferShenoyInference_Sl_double_Sg__evidenceJointImpact__SWIG_0(arg1,(gum::Set< std::size_t > const &)*arg2,(gum::Set< std::size_t > const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::Tensor< double >(result)), SWIGTYPE_p_gum__TensorT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShaferShenoyInference_evidenceJointImpact__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::ShaferShenoyInference< double > *arg1 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  gum::Tensor< double > result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ShaferShenoyInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShaferShenoyInference_evidenceJointImpact" "', argument " "1"" of type '" "gum::ShaferShenoyInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::ShaferShenoyInference< double > * >(argp1);
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ShaferShenoyInference_evidenceJointImpact" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "ShaferShenoyInference_evidenceJointImpact" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ShaferShenoyInference_evidenceJointImpact" "', argument " "3"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "ShaferShenoyInference_evidenceJointImpact" "', argument " "3"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      result = gum_ShaferShenoyInference_Sl_double_Sg__evidenceJointImpact__SWIG_1(arg1,(std::vector< std::string,std::allocator< std::string > > const &)*arg2,(std::vector< std::string,std::allocator< std::string > > const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::Tensor< double >(result)), SWIGTYPE_p_gum__TensorT_double_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShaferShenoyInference_setNumberOfThreads(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::ShaferShenoyInference< double > *arg1 = 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ShaferShenoyInference_setNumberOfThreads", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ShaferShenoyInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShaferShenoyInference_setNumberOfThreads" "', argument " "1"" of type '" "gum::ShaferShenoyInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::ShaferShenoyInference< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ShaferShenoyInference_setNumberOfThreads" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      gum_ShaferShenoyInference_Sl_double_Sg__setNumberOfThreads(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShaferShenoyInference_getNumberOfThreads(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::ShaferShenoyInference< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ShaferShenoyInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShaferShenoyInference_getNumberOfThreads" "', argument " "1"" of type '" "gum::ShaferShenoyInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::ShaferShenoyInference< double > * >(argp1);
  {
    try {
      result = (int)gum_ShaferShenoyInference_Sl_double_Sg__getNumberOfThreads(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShaferShenoyInference_isGumNumberOfThreadsOverriden(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::ShaferShenoyInference< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ShaferShenoyInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShaferShenoyInference_isGumNumberOfThreadsOverriden" "', argument " "1"" of type '" "gum::ShaferShenoyInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::ShaferShenoyInference< double > * >(argp1);
  {
    try {
      result = (bool)gum_ShaferShenoyInference_Sl_double_Sg__isGumNumberOfThreadsOverriden(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShaferShenoyInference_setMaxMemory(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::ShaferShenoyInference< double > *arg1 = 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ShaferShenoyInference_setMaxMemory", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ShaferShenoyInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShaferShenoyInference_setMaxMemory" "', argument " "1"" of type '" "gum::ShaferShenoyInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::ShaferShenoyInference< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ShaferShenoyInference_setMaxMemory" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      gum_ShaferShenoyInference_Sl_double_Sg__setMaxMemory(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShaferShenoyInference_setEvidence(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::ShaferShenoyInference< double > *arg1 = 0 ;
  PyObject *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ShaferShenoyInference_setEvidence", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ShaferShenoyInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShaferShenoyInference_setEvidence" "', argument " "1"" of type '" "gum::ShaferShenoyInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::ShaferShenoyInference< double > * >(argp1);
  arg2 = swig_obj[1];
  {
    try {
      gum_ShaferShenoyInference_Sl_double_Sg__setEvidence(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShaferShenoyInference_updateEvidence(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::ShaferShenoyInference< double > *arg1 = 0 ;
  PyObject *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ShaferShenoyInference_updateEvidence", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ShaferShenoyInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShaferShenoyInference_updateEvidence" "', argument " "1"" of type '" "gum::ShaferShenoyInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::ShaferShenoyInference< double > * >(argp1);
  arg2 = swig_obj[1];
  {
    try {
      gum_ShaferShenoyInference_Sl_double_Sg__updateEvidence(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShaferShenoyInference_setTargets(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::ShaferShenoyInference< double > *arg1 = 0 ;
  PyObject *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ShaferShenoyInference_setTargets", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ShaferShenoyInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShaferShenoyInference_setTargets" "', argument " "1"" of type '" "gum::ShaferShenoyInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::ShaferShenoyInference< double > * >(argp1);
  arg2 = swig_obj[1];
  {
    try {
      gum_ShaferShenoyInference_Sl_double_Sg__setTargets(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShaferShenoyInference_hardEvidenceNodes(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::ShaferShenoyInference< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ShaferShenoyInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShaferShenoyInference_hardEvidenceNodes" "', argument " "1"" of type '" "gum::ShaferShenoyInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::ShaferShenoyInference< double > * >(argp1);
  {
    try {
      result = (PyObject *)gum_ShaferShenoyInference_Sl_double_Sg__hardEvidenceNodes(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShaferShenoyInference_softEvidenceNodes(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::ShaferShenoyInference< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ShaferShenoyInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShaferShenoyInference_softEvidenceNodes" "', argument " "1"" of type '" "gum::ShaferShenoyInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::ShaferShenoyInference< double > * >(argp1);
  {
    try {
      result = (PyObject *)gum_ShaferShenoyInference_Sl_double_Sg__softEvidenceNodes(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShaferShenoyInference_targets(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::ShaferShenoyInference< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ShaferShenoyInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShaferShenoyInference_targets" "', argument " "1"" of type '" "gum::ShaferShenoyInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::ShaferShenoyInference< double > * >(argp1);
  {
    try {
      result = (PyObject *)gum_ShaferShenoyInference_Sl_double_Sg__targets(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShaferShenoyInference_evidenceImpact__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::ShaferShenoyInference< double > *arg1 = 0 ;
  PyObject *arg2 = 0 ;
  PyObject *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gum::Tensor< double > result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ShaferShenoyInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShaferShenoyInference_evidenceImpact" "', argument " "1"" of type '" "gum::ShaferShenoyInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::ShaferShenoyInference< double > * >(argp1);
  arg2 = swig_obj[1];
  arg3 = swig_obj[2];
  {
    try {
      result = gum_ShaferShenoyInference_Sl_double_Sg__evidenceImpact__SWIG_2(arg1,arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::Tensor< double >(result)), SWIGTYPE_p_gum__TensorT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShaferShenoyInference_evidenceImpact(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ShaferShenoyInference_evidenceImpact", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    {
      int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_gum__SetT_std__size_t_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_1;
    return _wrap_ShaferShenoyInference_evidenceImpact__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 3) {
    int _v = 0;
    {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_2;
    {
      int res = swig::asptr(argv[2], (std::vector< std::string,std::allocator< std::string > >**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_2;
    return _wrap_ShaferShenoyInference_evidenceImpact__SWIG_1(self, argc, argv);
  }
check_2:
  
  if (argc == 3) {
    PyObject *retobj = _wrap_ShaferShenoyInference_evidenceImpact__SWIG_2(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ShaferShenoyInference_evidenceImpact'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::ShaferShenoyInference< double >::evidenceImpact(gum::NodeId,gum::NodeSet const &)\n"
    "    gum::ShaferShenoyInference< double >::evidenceImpact(std::string const &,std::vector< std::string,std::allocator< std::string > > const &)\n"
    "    gum::ShaferShenoyInference< double >::evidenceImpact(PyObject *,PyObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ShaferShenoyInference_jointMutualInformation(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::ShaferShenoyInference< double > *arg1 = 0 ;
  PyObject *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ShaferShenoyInference_jointMutualInformation", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ShaferShenoyInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShaferShenoyInference_jointMutualInformation" "', argument " "1"" of type '" "gum::ShaferShenoyInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::ShaferShenoyInference< double > * >(argp1);
  arg2 = swig_obj[1];
  {
    try {
      result = (double)gum_ShaferShenoyInference_Sl_double_Sg__jointMutualInformation(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShaferShenoyInference_evidenceJointImpact__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::ShaferShenoyInference< double > *arg1 = 0 ;
  PyObject *arg2 = 0 ;
  PyObject *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gum::Tensor< double > result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ShaferShenoyInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShaferShenoyInference_evidenceJointImpact" "', argument " "1"" of type '" "gum::ShaferShenoyInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::ShaferShenoyInference< double > * >(argp1);
  arg2 = swig_obj[1];
  arg3 = swig_obj[2];
  {
    try {
      result = gum_ShaferShenoyInference_Sl_double_Sg__evidenceJointImpact__SWIG_2(arg1,arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::Tensor< double >(result)), SWIGTYPE_p_gum__TensorT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShaferShenoyInference_evidenceJointImpact(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ShaferShenoyInference_evidenceJointImpact", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_gum__SetT_std__size_t_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_1;
    {
      int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_gum__SetT_std__size_t_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_1;
    return _wrap_ShaferShenoyInference_evidenceJointImpact__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 3) {
    int _v = 0;
    {
      int res = swig::asptr(argv[1], (std::vector< std::string,std::allocator< std::string > >**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_2;
    {
      int res = swig::asptr(argv[2], (std::vector< std::string,std::allocator< std::string > >**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_2;
    return _wrap_ShaferShenoyInference_evidenceJointImpact__SWIG_1(self, argc, argv);
  }
check_2:
  
  if (argc == 3) {
    PyObject *retobj = _wrap_ShaferShenoyInference_evidenceJointImpact__SWIG_2(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ShaferShenoyInference_evidenceJointImpact'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::ShaferShenoyInference< double >::evidenceJointImpact(gum::NodeSet const &,gum::NodeSet const &)\n"
    "    gum::ShaferShenoyInference< double >::evidenceJointImpact(std::vector< std::string,std::allocator< std::string > > const &,std::vector< std::string,std::allocator< std::string > > const &)\n"
    "    gum::ShaferShenoyInference< double >::evidenceJointImpact(PyObject *,PyObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ShaferShenoyInference_jointPosterior(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::ShaferShenoyInference< double > *arg1 = 0 ;
  PyObject *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  gum::Tensor< double > result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ShaferShenoyInference_jointPosterior", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ShaferShenoyInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShaferShenoyInference_jointPosterior" "', argument " "1"" of type '" "gum::ShaferShenoyInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::ShaferShenoyInference< double > * >(argp1);
  arg2 = swig_obj[1];
  {
    try {
      result = gum_ShaferShenoyInference_Sl_double_Sg__jointPosterior(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::Tensor< double >(result)), SWIGTYPE_p_gum__TensorT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShaferShenoyInference_addJointTarget(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::ShaferShenoyInference< double > *arg1 = 0 ;
  PyObject *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ShaferShenoyInference_addJointTarget", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ShaferShenoyInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShaferShenoyInference_addJointTarget" "', argument " "1"" of type '" "gum::ShaferShenoyInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::ShaferShenoyInference< double > * >(argp1);
  arg2 = swig_obj[1];
  {
    try {
      gum_ShaferShenoyInference_Sl_double_Sg__addJointTarget(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShaferShenoyInference_eraseJointTarget(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::ShaferShenoyInference< double > *arg1 = 0 ;
  PyObject *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ShaferShenoyInference_eraseJointTarget", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ShaferShenoyInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShaferShenoyInference_eraseJointTarget" "', argument " "1"" of type '" "gum::ShaferShenoyInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::ShaferShenoyInference< double > * >(argp1);
  arg2 = swig_obj[1];
  {
    try {
      gum_ShaferShenoyInference_Sl_double_Sg__eraseJointTarget(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShaferShenoyInference_isJointTarget(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::ShaferShenoyInference< double > *arg1 = 0 ;
  PyObject *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ShaferShenoyInference_isJointTarget", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ShaferShenoyInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShaferShenoyInference_isJointTarget" "', argument " "1"" of type '" "gum::ShaferShenoyInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::ShaferShenoyInference< double > * >(argp1);
  arg2 = swig_obj[1];
  {
    try {
      result = (bool)gum_ShaferShenoyInference_Sl_double_Sg__isJointTarget(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShaferShenoyInference_jointTargets(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::ShaferShenoyInference< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ShaferShenoyInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShaferShenoyInference_jointTargets" "', argument " "1"" of type '" "gum::ShaferShenoyInference< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::ShaferShenoyInference< double > * >(argp1);
  {
    try {
      result = (PyObject *)gum_ShaferShenoyInference_Sl_double_Sg__jointTargets((gum::ShaferShenoyInference< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ShaferShenoyInference_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj = NULL;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gum__ShaferShenoyInferenceT_double_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *ShaferShenoyInference_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_VariableElimination__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::IBayesNet< double > *arg1 = 0 ;
  gum::RelevantTensorsFinderType arg2 ;
  gum::FindBarrenNodesType arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  gum::VariableElimination< double > *result = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__IBayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VariableElimination" "', argument " "1"" of type '" "gum::IBayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::IBayesNet< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_VariableElimination" "', argument " "2"" of type '" "gum::RelevantTensorsFinderType""'");
  } 
  arg2 = static_cast< gum::RelevantTensorsFinderType >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_VariableElimination" "', argument " "3"" of type '" "gum::FindBarrenNodesType""'");
  } 
  arg3 = static_cast< gum::FindBarrenNodesType >(val3);
  {
    try {
      result = (gum::VariableElimination< double > *)new gum::VariableElimination< double >((gum::IBayesNet< double > const *)arg1,arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__VariableEliminationT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VariableElimination__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::IBayesNet< double > *arg1 = 0 ;
  gum::RelevantTensorsFinderType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  gum::VariableElimination< double > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__IBayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VariableElimination" "', argument " "1"" of type '" "gum::IBayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::IBayesNet< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_VariableElimination" "', argument " "2"" of type '" "gum::RelevantTensorsFinderType""'");
  } 
  arg2 = static_cast< gum::RelevantTensorsFinderType >(val2);
  {
    try {
      result = (gum::VariableElimination< double > *)new gum::VariableElimination< double >((gum::IBayesNet< double > const *)arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__VariableEliminationT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VariableElimination__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::IBayesNet< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gum::VariableElimination< double > *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__IBayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VariableElimination" "', argument " "1"" of type '" "gum::IBayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::IBayesNet< double > * >(argp1);
  {
    try {
      result = (gum::VariableElimination< double > *)new gum::VariableElimination< double >((gum::IBayesNet< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__VariableEliminationT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VariableElimination(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_VariableElimination", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    PyObject *retobj = _wrap_new_VariableElimination__SWIG_2(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 2) {
    PyObject *retobj = _wrap_new_VariableElimination__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    PyObject *retobj = _wrap_new_VariableElimination__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_VariableElimination'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::VariableElimination< double >::VariableElimination(gum::IBayesNet< double > const *,gum::RelevantTensorsFinderType,gum::FindBarrenNodesType)\n"
    "    gum::VariableElimination< double >::VariableElimination(gum::IBayesNet< double > const *,gum::RelevantTensorsFinderType)\n"
    "    gum::VariableElimination< double >::VariableElimination(gum::IBayesNet< double > const *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_VariableElimination(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::VariableElimination< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__VariableEliminationT_double_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VariableElimination" "', argument " "1"" of type '" "gum::VariableElimination< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::VariableElimination< double > * >(argp1);
  {
    try {
      delete arg1;
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableElimination_setTriangulation(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::VariableElimination< double > *arg1 = 0 ;
  gum::Triangulation *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "VariableElimination_setTriangulation", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__VariableEliminationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableElimination_setTriangulation" "', argument " "1"" of type '" "gum::VariableElimination< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::VariableElimination< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_gum__Triangulation,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VariableElimination_setTriangulation" "', argument " "2"" of type '" "gum::Triangulation const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "VariableElimination_setTriangulation" "', argument " "2"" of type '" "gum::Triangulation const &""'"); 
  }
  arg2 = reinterpret_cast< gum::Triangulation * >(argp2);
  {
    try {
      (arg1)->setTriangulation((gum::Triangulation const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableElimination_setRelevantTensorsFinderType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::VariableElimination< double > *arg1 = 0 ;
  gum::RelevantTensorsFinderType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "VariableElimination_setRelevantTensorsFinderType", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__VariableEliminationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableElimination_setRelevantTensorsFinderType" "', argument " "1"" of type '" "gum::VariableElimination< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::VariableElimination< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VariableElimination_setRelevantTensorsFinderType" "', argument " "2"" of type '" "gum::RelevantTensorsFinderType""'");
  } 
  arg2 = static_cast< gum::RelevantTensorsFinderType >(val2);
  {
    try {
      (arg1)->setRelevantTensorsFinderType(arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableElimination_setFindBarrenNodesType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::VariableElimination< double > *arg1 = 0 ;
  gum::FindBarrenNodesType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "VariableElimination_setFindBarrenNodesType", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__VariableEliminationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableElimination_setFindBarrenNodesType" "', argument " "1"" of type '" "gum::VariableElimination< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::VariableElimination< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VariableElimination_setFindBarrenNodesType" "', argument " "2"" of type '" "gum::FindBarrenNodesType""'");
  } 
  arg2 = static_cast< gum::FindBarrenNodesType >(val2);
  {
    try {
      (arg1)->setFindBarrenNodesType(arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableElimination_junctionTree(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::VariableElimination< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  gum::JunctionTree *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "VariableElimination_junctionTree", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__VariableEliminationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableElimination_junctionTree" "', argument " "1"" of type '" "gum::VariableElimination< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::VariableElimination< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VariableElimination_junctionTree" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (gum::JunctionTree *)(arg1)->junctionTree(SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__CliqueGraph, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableElimination_makeInference(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::VariableElimination< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__VariableEliminationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableElimination_makeInference" "', argument " "1"" of type '" "gum::VariableElimination< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::VariableElimination< double > * >(argp1);
  {
    try {
      gum_VariableElimination_Sl_double_Sg__makeInference(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableElimination_posterior__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::VariableElimination< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  gum::Tensor< double > result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__VariableEliminationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableElimination_posterior" "', argument " "1"" of type '" "gum::VariableElimination< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::VariableElimination< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VariableElimination_posterior" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = gum_VariableElimination_Sl_double_Sg__posterior__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::Tensor< double >(result)), SWIGTYPE_p_gum__TensorT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableElimination_posterior__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::VariableElimination< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  gum::Tensor< double > result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__VariableEliminationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableElimination_posterior" "', argument " "1"" of type '" "gum::VariableElimination< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::VariableElimination< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VariableElimination_posterior" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "VariableElimination_posterior" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = gum_VariableElimination_Sl_double_Sg__posterior__SWIG_1(arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::Tensor< double >(result)), SWIGTYPE_p_gum__TensorT_double_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableElimination_posterior(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "VariableElimination_posterior", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_VariableElimination_posterior__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_VariableElimination_posterior__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'VariableElimination_posterior'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::VariableElimination< double >::posterior(gum::NodeId const)\n"
    "    gum::VariableElimination< double >::posterior(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VariableElimination_addEvidence__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::VariableElimination< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  gum::Idx arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__VariableEliminationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableElimination_addEvidence" "', argument " "1"" of type '" "gum::VariableElimination< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::VariableElimination< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VariableElimination_addEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VariableElimination_addEvidence" "', argument " "3"" of type '" "gum::Idx""'");
  } 
  arg3 = static_cast< gum::Idx >(val3);
  {
    try {
      gum_VariableElimination_Sl_double_Sg__addEvidence__SWIG_0(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableElimination_addEvidence__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::VariableElimination< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  gum::Idx arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  size_t val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__VariableEliminationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableElimination_addEvidence" "', argument " "1"" of type '" "gum::VariableElimination< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::VariableElimination< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VariableElimination_addEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "VariableElimination_addEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VariableElimination_addEvidence" "', argument " "3"" of type '" "gum::Idx""'");
  } 
  arg3 = static_cast< gum::Idx >(val3);
  {
    try {
      gum_VariableElimination_Sl_double_Sg__addEvidence__SWIG_1(arg1,(std::string const &)*arg2,SWIG_STD_MOVE(arg3));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableElimination_addEvidence__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::VariableElimination< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__VariableEliminationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableElimination_addEvidence" "', argument " "1"" of type '" "gum::VariableElimination< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::VariableElimination< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VariableElimination_addEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VariableElimination_addEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "VariableElimination_addEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      gum_VariableElimination_Sl_double_Sg__addEvidence__SWIG_2(arg1,SWIG_STD_MOVE(arg2),(std::string const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableElimination_addEvidence__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::VariableElimination< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__VariableEliminationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableElimination_addEvidence" "', argument " "1"" of type '" "gum::VariableElimination< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::VariableElimination< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VariableElimination_addEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "VariableElimination_addEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VariableElimination_addEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "VariableElimination_addEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      gum_VariableElimination_Sl_double_Sg__addEvidence__SWIG_3(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableElimination_addEvidence__SWIG_4(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::VariableElimination< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__VariableEliminationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableElimination_addEvidence" "', argument " "1"" of type '" "gum::VariableElimination< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::VariableElimination< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VariableElimination_addEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VariableElimination_addEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "VariableElimination_addEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      gum_VariableElimination_Sl_double_Sg__addEvidence__SWIG_4(arg1,SWIG_STD_MOVE(arg2),(std::vector< double,std::allocator< double > > const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableElimination_addEvidence__SWIG_5(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::VariableElimination< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__VariableEliminationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableElimination_addEvidence" "', argument " "1"" of type '" "gum::VariableElimination< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::VariableElimination< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VariableElimination_addEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "VariableElimination_addEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VariableElimination_addEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "VariableElimination_addEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      gum_VariableElimination_Sl_double_Sg__addEvidence__SWIG_5(arg1,(std::string const &)*arg2,(std::vector< double,std::allocator< double > > const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableElimination_addEvidence__SWIG_6(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::VariableElimination< double > *arg1 = 0 ;
  gum::Tensor< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__VariableEliminationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableElimination_addEvidence" "', argument " "1"" of type '" "gum::VariableElimination< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::VariableElimination< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_gum__TensorT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VariableElimination_addEvidence" "', argument " "2"" of type '" "gum::Tensor< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "VariableElimination_addEvidence" "', argument " "2"" of type '" "gum::Tensor< double > const &""'"); 
  }
  arg2 = reinterpret_cast< gum::Tensor< double > * >(argp2);
  {
    try {
      gum_VariableElimination_Sl_double_Sg__addEvidence__SWIG_6(arg1,(gum::Tensor< double > const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableElimination_addEvidence(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "VariableElimination_addEvidence", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    PyObject *retobj = _wrap_VariableElimination_addEvidence__SWIG_6(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_2;
    {
      {
        int res = SWIG_AsVal_size_t(argv[2], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_2;
    return _wrap_VariableElimination_addEvidence__SWIG_0(self, argc, argv);
  }
check_2:
  
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_3;
    {
      int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_3;
    return _wrap_VariableElimination_addEvidence__SWIG_2(self, argc, argv);
  }
check_3:
  
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_4;
    {
      int res = swig::asptr(argv[2], (std::vector< double,std::allocator< double > >**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_4;
    return _wrap_VariableElimination_addEvidence__SWIG_4(self, argc, argv);
  }
check_4:
  
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[2], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_5;
    return _wrap_VariableElimination_addEvidence__SWIG_1(self, argc, argv);
  }
check_5:
  
  if (argc == 3) {
    int _v = 0;
    {
      int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_6;
    return _wrap_VariableElimination_addEvidence__SWIG_3(self, argc, argv);
  }
check_6:
  
  if (argc == 3) {
    PyObject *retobj = _wrap_VariableElimination_addEvidence__SWIG_5(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'VariableElimination_addEvidence'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::VariableElimination< double >::addEvidence(gum::NodeId const,gum::Idx const)\n"
    "    gum::VariableElimination< double >::addEvidence(std::string const &,gum::Idx const)\n"
    "    gum::VariableElimination< double >::addEvidence(gum::NodeId const,std::string const &)\n"
    "    gum::VariableElimination< double >::addEvidence(std::string const &,std::string const &)\n"
    "    gum::VariableElimination< double >::addEvidence(gum::NodeId const,std::vector< double,std::allocator< double > > const &)\n"
    "    gum::VariableElimination< double >::addEvidence(std::string const &,std::vector< double,std::allocator< double > > const &)\n"
    "    gum::VariableElimination< double >::addEvidence(gum::Tensor< double > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VariableElimination_chgEvidence__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::VariableElimination< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  gum::Idx arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__VariableEliminationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableElimination_chgEvidence" "', argument " "1"" of type '" "gum::VariableElimination< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::VariableElimination< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VariableElimination_chgEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VariableElimination_chgEvidence" "', argument " "3"" of type '" "gum::Idx""'");
  } 
  arg3 = static_cast< gum::Idx >(val3);
  {
    try {
      gum_VariableElimination_Sl_double_Sg__chgEvidence__SWIG_0(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableElimination_chgEvidence__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::VariableElimination< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  gum::Idx arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  size_t val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__VariableEliminationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableElimination_chgEvidence" "', argument " "1"" of type '" "gum::VariableElimination< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::VariableElimination< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VariableElimination_chgEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "VariableElimination_chgEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VariableElimination_chgEvidence" "', argument " "3"" of type '" "gum::Idx""'");
  } 
  arg3 = static_cast< gum::Idx >(val3);
  {
    try {
      gum_VariableElimination_Sl_double_Sg__chgEvidence__SWIG_1(arg1,(std::string const &)*arg2,SWIG_STD_MOVE(arg3));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableElimination_chgEvidence__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::VariableElimination< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__VariableEliminationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableElimination_chgEvidence" "', argument " "1"" of type '" "gum::VariableElimination< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::VariableElimination< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VariableElimination_chgEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VariableElimination_chgEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "VariableElimination_chgEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      gum_VariableElimination_Sl_double_Sg__chgEvidence__SWIG_2(arg1,SWIG_STD_MOVE(arg2),(std::string const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableElimination_chgEvidence__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::VariableElimination< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__VariableEliminationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableElimination_chgEvidence" "', argument " "1"" of type '" "gum::VariableElimination< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::VariableElimination< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VariableElimination_chgEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "VariableElimination_chgEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VariableElimination_chgEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "VariableElimination_chgEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      gum_VariableElimination_Sl_double_Sg__chgEvidence__SWIG_3(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableElimination_chgEvidence__SWIG_4(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::VariableElimination< double > *arg1 = 0 ;
  gum::Tensor< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__VariableEliminationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableElimination_chgEvidence" "', argument " "1"" of type '" "gum::VariableElimination< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::VariableElimination< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_gum__TensorT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VariableElimination_chgEvidence" "', argument " "2"" of type '" "gum::Tensor< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "VariableElimination_chgEvidence" "', argument " "2"" of type '" "gum::Tensor< double > const &""'"); 
  }
  arg2 = reinterpret_cast< gum::Tensor< double > * >(argp2);
  {
    try {
      gum_VariableElimination_Sl_double_Sg__chgEvidence__SWIG_4(arg1,(gum::Tensor< double > const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableElimination_chgEvidence__SWIG_5(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::VariableElimination< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__VariableEliminationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableElimination_chgEvidence" "', argument " "1"" of type '" "gum::VariableElimination< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::VariableElimination< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VariableElimination_chgEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VariableElimination_chgEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "VariableElimination_chgEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      gum_VariableElimination_Sl_double_Sg__chgEvidence__SWIG_5(arg1,SWIG_STD_MOVE(arg2),(std::vector< double,std::allocator< double > > const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableElimination_chgEvidence__SWIG_6(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::VariableElimination< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__VariableEliminationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableElimination_chgEvidence" "', argument " "1"" of type '" "gum::VariableElimination< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::VariableElimination< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VariableElimination_chgEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "VariableElimination_chgEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VariableElimination_chgEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "VariableElimination_chgEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      gum_VariableElimination_Sl_double_Sg__chgEvidence__SWIG_6(arg1,(std::string const &)*arg2,(std::vector< double,std::allocator< double > > const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableElimination_chgEvidence(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "VariableElimination_chgEvidence", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    PyObject *retobj = _wrap_VariableElimination_chgEvidence__SWIG_4(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_2;
    {
      {
        int res = SWIG_AsVal_size_t(argv[2], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_2;
    return _wrap_VariableElimination_chgEvidence__SWIG_0(self, argc, argv);
  }
check_2:
  
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_3;
    {
      int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_3;
    return _wrap_VariableElimination_chgEvidence__SWIG_2(self, argc, argv);
  }
check_3:
  
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_4;
    {
      int res = swig::asptr(argv[2], (std::vector< double,std::allocator< double > >**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_4;
    return _wrap_VariableElimination_chgEvidence__SWIG_5(self, argc, argv);
  }
check_4:
  
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[2], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_5;
    return _wrap_VariableElimination_chgEvidence__SWIG_1(self, argc, argv);
  }
check_5:
  
  if (argc == 3) {
    int _v = 0;
    {
      int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_6;
    return _wrap_VariableElimination_chgEvidence__SWIG_3(self, argc, argv);
  }
check_6:
  
  if (argc == 3) {
    PyObject *retobj = _wrap_VariableElimination_chgEvidence__SWIG_6(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'VariableElimination_chgEvidence'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::VariableElimination< double >::chgEvidence(gum::NodeId const,gum::Idx const)\n"
    "    gum::VariableElimination< double >::chgEvidence(std::string const &,gum::Idx const)\n"
    "    gum::VariableElimination< double >::chgEvidence(gum::NodeId const,std::string const &)\n"
    "    gum::VariableElimination< double >::chgEvidence(std::string const &,std::string const &)\n"
    "    gum::VariableElimination< double >::chgEvidence(gum::Tensor< double > const &)\n"
    "    gum::VariableElimination< double >::chgEvidence(gum::NodeId const,std::vector< double,std::allocator< double > > const &)\n"
    "    gum::VariableElimination< double >::chgEvidence(std::string const &,std::vector< double,std::allocator< double > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VariableElimination_hasEvidence__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::VariableElimination< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  bool result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__VariableEliminationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableElimination_hasEvidence" "', argument " "1"" of type '" "gum::VariableElimination< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::VariableElimination< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VariableElimination_hasEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (bool)gum_VariableElimination_Sl_double_Sg__hasEvidence__SWIG_0((gum::VariableElimination< double > const *)arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableElimination_hasEvidence__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::VariableElimination< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  bool result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__VariableEliminationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableElimination_hasEvidence" "', argument " "1"" of type '" "gum::VariableElimination< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::VariableElimination< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VariableElimination_hasEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "VariableElimination_hasEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)gum_VariableElimination_Sl_double_Sg__hasEvidence__SWIG_1((gum::VariableElimination< double > const *)arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableElimination_hasEvidence(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "VariableElimination_hasEvidence", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_VariableElimination_hasEvidence__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_VariableElimination_hasEvidence__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'VariableElimination_hasEvidence'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::VariableElimination< double >::hasEvidence(gum::NodeId const) const\n"
    "    gum::VariableElimination< double >::hasEvidence(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VariableElimination_eraseAllEvidence(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::VariableElimination< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__VariableEliminationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableElimination_eraseAllEvidence" "', argument " "1"" of type '" "gum::VariableElimination< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::VariableElimination< double > * >(argp1);
  {
    try {
      gum_VariableElimination_Sl_double_Sg__eraseAllEvidence(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableElimination_eraseEvidence__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::VariableElimination< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__VariableEliminationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableElimination_eraseEvidence" "', argument " "1"" of type '" "gum::VariableElimination< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::VariableElimination< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VariableElimination_eraseEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      gum_VariableElimination_Sl_double_Sg__eraseEvidence__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableElimination_eraseEvidence__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::VariableElimination< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__VariableEliminationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableElimination_eraseEvidence" "', argument " "1"" of type '" "gum::VariableElimination< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::VariableElimination< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VariableElimination_eraseEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "VariableElimination_eraseEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      gum_VariableElimination_Sl_double_Sg__eraseEvidence__SWIG_1(arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableElimination_eraseEvidence(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "VariableElimination_eraseEvidence", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_VariableElimination_eraseEvidence__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_VariableElimination_eraseEvidence__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'VariableElimination_eraseEvidence'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::VariableElimination< double >::eraseEvidence(gum::NodeId const)\n"
    "    gum::VariableElimination< double >::eraseEvidence(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VariableElimination_hasSoftEvidence__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::VariableElimination< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  bool result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__VariableEliminationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableElimination_hasSoftEvidence" "', argument " "1"" of type '" "gum::VariableElimination< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::VariableElimination< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VariableElimination_hasSoftEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (bool)gum_VariableElimination_Sl_double_Sg__hasSoftEvidence__SWIG_0((gum::VariableElimination< double > const *)arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableElimination_hasHardEvidence(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::VariableElimination< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "VariableElimination_hasHardEvidence", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__VariableEliminationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableElimination_hasHardEvidence" "', argument " "1"" of type '" "gum::VariableElimination< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::VariableElimination< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VariableElimination_hasHardEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "VariableElimination_hasHardEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)gum_VariableElimination_Sl_double_Sg__hasHardEvidence((gum::VariableElimination< double > const *)arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableElimination_hasSoftEvidence__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::VariableElimination< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  bool result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__VariableEliminationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableElimination_hasSoftEvidence" "', argument " "1"" of type '" "gum::VariableElimination< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::VariableElimination< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VariableElimination_hasSoftEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "VariableElimination_hasSoftEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)gum_VariableElimination_Sl_double_Sg__hasSoftEvidence__SWIG_1((gum::VariableElimination< double > const *)arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableElimination_hasSoftEvidence(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "VariableElimination_hasSoftEvidence", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_VariableElimination_hasSoftEvidence__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_VariableElimination_hasSoftEvidence__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'VariableElimination_hasSoftEvidence'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::VariableElimination< double >::hasSoftEvidence(gum::NodeId const) const\n"
    "    gum::VariableElimination< double >::hasSoftEvidence(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VariableElimination_nbrEvidence(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::VariableElimination< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::Size result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__VariableEliminationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableElimination_nbrEvidence" "', argument " "1"" of type '" "gum::VariableElimination< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::VariableElimination< double > * >(argp1);
  {
    try {
      result = gum_VariableElimination_Sl_double_Sg__nbrEvidence((gum::VariableElimination< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableElimination_nbrHardEvidence(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::VariableElimination< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::Size result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__VariableEliminationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableElimination_nbrHardEvidence" "', argument " "1"" of type '" "gum::VariableElimination< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::VariableElimination< double > * >(argp1);
  {
    try {
      result = gum_VariableElimination_Sl_double_Sg__nbrHardEvidence((gum::VariableElimination< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableElimination_nbrSoftEvidence(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::VariableElimination< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::Size result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__VariableEliminationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableElimination_nbrSoftEvidence" "', argument " "1"" of type '" "gum::VariableElimination< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::VariableElimination< double > * >(argp1);
  {
    try {
      result = gum_VariableElimination_Sl_double_Sg__nbrSoftEvidence((gum::VariableElimination< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableElimination_eraseAllTargets(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::VariableElimination< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__VariableEliminationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableElimination_eraseAllTargets" "', argument " "1"" of type '" "gum::VariableElimination< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::VariableElimination< double > * >(argp1);
  {
    try {
      gum_VariableElimination_Sl_double_Sg__eraseAllTargets(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableElimination_addAllTargets(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::VariableElimination< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__VariableEliminationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableElimination_addAllTargets" "', argument " "1"" of type '" "gum::VariableElimination< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::VariableElimination< double > * >(argp1);
  {
    try {
      gum_VariableElimination_Sl_double_Sg__addAllTargets(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableElimination_addTarget__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::VariableElimination< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__VariableEliminationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableElimination_addTarget" "', argument " "1"" of type '" "gum::VariableElimination< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::VariableElimination< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VariableElimination_addTarget" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      gum_VariableElimination_Sl_double_Sg__addTarget__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableElimination_addTarget__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::VariableElimination< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__VariableEliminationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableElimination_addTarget" "', argument " "1"" of type '" "gum::VariableElimination< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::VariableElimination< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VariableElimination_addTarget" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "VariableElimination_addTarget" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      gum_VariableElimination_Sl_double_Sg__addTarget__SWIG_1(arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableElimination_addTarget(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "VariableElimination_addTarget", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_VariableElimination_addTarget__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_VariableElimination_addTarget__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'VariableElimination_addTarget'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::VariableElimination< double >::addTarget(gum::NodeId const)\n"
    "    gum::VariableElimination< double >::addTarget(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VariableElimination_eraseTarget__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::VariableElimination< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__VariableEliminationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableElimination_eraseTarget" "', argument " "1"" of type '" "gum::VariableElimination< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::VariableElimination< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VariableElimination_eraseTarget" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      gum_VariableElimination_Sl_double_Sg__eraseTarget__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableElimination_eraseTarget__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::VariableElimination< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__VariableEliminationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableElimination_eraseTarget" "', argument " "1"" of type '" "gum::VariableElimination< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::VariableElimination< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VariableElimination_eraseTarget" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "VariableElimination_eraseTarget" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      gum_VariableElimination_Sl_double_Sg__eraseTarget__SWIG_1(arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableElimination_eraseTarget(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "VariableElimination_eraseTarget", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_VariableElimination_eraseTarget__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_VariableElimination_eraseTarget__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'VariableElimination_eraseTarget'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::VariableElimination< double >::eraseTarget(gum::NodeId const)\n"
    "    gum::VariableElimination< double >::eraseTarget(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VariableElimination_isTarget__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::VariableElimination< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  bool result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__VariableEliminationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableElimination_isTarget" "', argument " "1"" of type '" "gum::VariableElimination< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::VariableElimination< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VariableElimination_isTarget" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (bool)gum_VariableElimination_Sl_double_Sg__isTarget__SWIG_0((gum::VariableElimination< double > const *)arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableElimination_isTarget__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::VariableElimination< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  bool result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__VariableEliminationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableElimination_isTarget" "', argument " "1"" of type '" "gum::VariableElimination< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::VariableElimination< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VariableElimination_isTarget" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "VariableElimination_isTarget" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)gum_VariableElimination_Sl_double_Sg__isTarget__SWIG_1((gum::VariableElimination< double > const *)arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableElimination_isTarget(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "VariableElimination_isTarget", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_VariableElimination_isTarget__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_VariableElimination_isTarget__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'VariableElimination_isTarget'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::VariableElimination< double >::isTarget(gum::NodeId const) const\n"
    "    gum::VariableElimination< double >::isTarget(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VariableElimination_nbrTargets(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::VariableElimination< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::Size result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__VariableEliminationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableElimination_nbrTargets" "', argument " "1"" of type '" "gum::VariableElimination< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::VariableElimination< double > * >(argp1);
  {
    try {
      result = gum_VariableElimination_Sl_double_Sg__nbrTargets((gum::VariableElimination< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableElimination_H__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::VariableElimination< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  double result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__VariableEliminationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableElimination_H" "', argument " "1"" of type '" "gum::VariableElimination< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::VariableElimination< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VariableElimination_H" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (double)gum_VariableElimination_Sl_double_Sg__H__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableElimination_H__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::VariableElimination< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  double result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__VariableEliminationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableElimination_H" "', argument " "1"" of type '" "gum::VariableElimination< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::VariableElimination< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VariableElimination_H" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "VariableElimination_H" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (double)gum_VariableElimination_Sl_double_Sg__H__SWIG_1(arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableElimination_H(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "VariableElimination_H", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_VariableElimination_H__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_VariableElimination_H__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'VariableElimination_H'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::VariableElimination< double >::H(gum::NodeId const)\n"
    "    gum::VariableElimination< double >::H(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VariableElimination_evidenceImpact__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::VariableElimination< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  gum::NodeSet *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  gum::Tensor< double > result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__VariableEliminationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableElimination_evidenceImpact" "', argument " "1"" of type '" "gum::VariableElimination< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::VariableElimination< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VariableElimination_evidenceImpact" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_gum__SetT_std__size_t_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VariableElimination_evidenceImpact" "', argument " "3"" of type '" "gum::NodeSet const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "VariableElimination_evidenceImpact" "', argument " "3"" of type '" "gum::NodeSet const &""'"); 
  }
  arg3 = reinterpret_cast< gum::NodeSet * >(argp3);
  {
    try {
      result = gum_VariableElimination_Sl_double_Sg__evidenceImpact__SWIG_0(arg1,SWIG_STD_MOVE(arg2),(gum::Set< std::size_t > const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::Tensor< double >(result)), SWIGTYPE_p_gum__TensorT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableElimination_evidenceImpact__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::VariableElimination< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  gum::Tensor< double > result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__VariableEliminationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableElimination_evidenceImpact" "', argument " "1"" of type '" "gum::VariableElimination< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::VariableElimination< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VariableElimination_evidenceImpact" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "VariableElimination_evidenceImpact" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VariableElimination_evidenceImpact" "', argument " "3"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "VariableElimination_evidenceImpact" "', argument " "3"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      result = gum_VariableElimination_Sl_double_Sg__evidenceImpact__SWIG_1(arg1,(std::string const &)*arg2,(std::vector< std::string,std::allocator< std::string > > const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::Tensor< double >(result)), SWIGTYPE_p_gum__TensorT_double_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableElimination_BN(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::VariableElimination< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::IBayesNet< double > *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__VariableEliminationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableElimination_BN" "', argument " "1"" of type '" "gum::VariableElimination< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::VariableElimination< double > * >(argp1);
  {
    try {
      result = (gum::IBayesNet< double > *) &gum_VariableElimination_Sl_double_Sg__BN((gum::VariableElimination< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__IBayesNetT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableElimination_setNumberOfThreads(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::VariableElimination< double > *arg1 = 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "VariableElimination_setNumberOfThreads", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__VariableEliminationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableElimination_setNumberOfThreads" "', argument " "1"" of type '" "gum::VariableElimination< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::VariableElimination< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VariableElimination_setNumberOfThreads" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      gum_VariableElimination_Sl_double_Sg__setNumberOfThreads(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableElimination_getNumberOfThreads(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::VariableElimination< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__VariableEliminationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableElimination_getNumberOfThreads" "', argument " "1"" of type '" "gum::VariableElimination< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::VariableElimination< double > * >(argp1);
  {
    try {
      result = (int)gum_VariableElimination_Sl_double_Sg__getNumberOfThreads(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableElimination_isGumNumberOfThreadsOverriden(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::VariableElimination< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__VariableEliminationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableElimination_isGumNumberOfThreadsOverriden" "', argument " "1"" of type '" "gum::VariableElimination< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::VariableElimination< double > * >(argp1);
  {
    try {
      result = (bool)gum_VariableElimination_Sl_double_Sg__isGumNumberOfThreadsOverriden(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableElimination_setMaxMemory(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::VariableElimination< double > *arg1 = 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "VariableElimination_setMaxMemory", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__VariableEliminationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableElimination_setMaxMemory" "', argument " "1"" of type '" "gum::VariableElimination< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::VariableElimination< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VariableElimination_setMaxMemory" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      gum_VariableElimination_Sl_double_Sg__setMaxMemory(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableElimination_setEvidence(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::VariableElimination< double > *arg1 = 0 ;
  PyObject *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "VariableElimination_setEvidence", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__VariableEliminationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableElimination_setEvidence" "', argument " "1"" of type '" "gum::VariableElimination< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::VariableElimination< double > * >(argp1);
  arg2 = swig_obj[1];
  {
    try {
      gum_VariableElimination_Sl_double_Sg__setEvidence(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableElimination_updateEvidence(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::VariableElimination< double > *arg1 = 0 ;
  PyObject *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "VariableElimination_updateEvidence", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__VariableEliminationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableElimination_updateEvidence" "', argument " "1"" of type '" "gum::VariableElimination< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::VariableElimination< double > * >(argp1);
  arg2 = swig_obj[1];
  {
    try {
      gum_VariableElimination_Sl_double_Sg__updateEvidence(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableElimination_setTargets(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::VariableElimination< double > *arg1 = 0 ;
  PyObject *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "VariableElimination_setTargets", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__VariableEliminationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableElimination_setTargets" "', argument " "1"" of type '" "gum::VariableElimination< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::VariableElimination< double > * >(argp1);
  arg2 = swig_obj[1];
  {
    try {
      gum_VariableElimination_Sl_double_Sg__setTargets(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableElimination_hardEvidenceNodes(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::VariableElimination< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__VariableEliminationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableElimination_hardEvidenceNodes" "', argument " "1"" of type '" "gum::VariableElimination< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::VariableElimination< double > * >(argp1);
  {
    try {
      result = (PyObject *)gum_VariableElimination_Sl_double_Sg__hardEvidenceNodes(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableElimination_softEvidenceNodes(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::VariableElimination< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__VariableEliminationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableElimination_softEvidenceNodes" "', argument " "1"" of type '" "gum::VariableElimination< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::VariableElimination< double > * >(argp1);
  {
    try {
      result = (PyObject *)gum_VariableElimination_Sl_double_Sg__softEvidenceNodes(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableElimination_targets(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::VariableElimination< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__VariableEliminationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableElimination_targets" "', argument " "1"" of type '" "gum::VariableElimination< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::VariableElimination< double > * >(argp1);
  {
    try {
      result = (PyObject *)gum_VariableElimination_Sl_double_Sg__targets(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableElimination_evidenceImpact__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::VariableElimination< double > *arg1 = 0 ;
  PyObject *arg2 = 0 ;
  PyObject *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gum::Tensor< double > result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__VariableEliminationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableElimination_evidenceImpact" "', argument " "1"" of type '" "gum::VariableElimination< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::VariableElimination< double > * >(argp1);
  arg2 = swig_obj[1];
  arg3 = swig_obj[2];
  {
    try {
      result = gum_VariableElimination_Sl_double_Sg__evidenceImpact__SWIG_2(arg1,arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::Tensor< double >(result)), SWIGTYPE_p_gum__TensorT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableElimination_evidenceImpact(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "VariableElimination_evidenceImpact", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    {
      int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_gum__SetT_std__size_t_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_1;
    return _wrap_VariableElimination_evidenceImpact__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 3) {
    int _v = 0;
    {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_2;
    {
      int res = swig::asptr(argv[2], (std::vector< std::string,std::allocator< std::string > >**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_2;
    return _wrap_VariableElimination_evidenceImpact__SWIG_1(self, argc, argv);
  }
check_2:
  
  if (argc == 3) {
    PyObject *retobj = _wrap_VariableElimination_evidenceImpact__SWIG_2(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'VariableElimination_evidenceImpact'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::VariableElimination< double >::evidenceImpact(gum::NodeId,gum::NodeSet const &)\n"
    "    gum::VariableElimination< double >::evidenceImpact(std::string const &,std::vector< std::string,std::allocator< std::string > > const &)\n"
    "    gum::VariableElimination< double >::evidenceImpact(PyObject *,PyObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VariableElimination_jointMutualInformation(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::VariableElimination< double > *arg1 = 0 ;
  PyObject *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "VariableElimination_jointMutualInformation", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__VariableEliminationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableElimination_jointMutualInformation" "', argument " "1"" of type '" "gum::VariableElimination< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::VariableElimination< double > * >(argp1);
  arg2 = swig_obj[1];
  {
    try {
      result = (double)gum_VariableElimination_Sl_double_Sg__jointMutualInformation(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableElimination_evidenceJointImpact(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::VariableElimination< double > *arg1 = 0 ;
  PyObject *arg2 = 0 ;
  PyObject *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[3] ;
  gum::Tensor< double > result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "VariableElimination_evidenceJointImpact", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__VariableEliminationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableElimination_evidenceJointImpact" "', argument " "1"" of type '" "gum::VariableElimination< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::VariableElimination< double > * >(argp1);
  arg2 = swig_obj[1];
  arg3 = swig_obj[2];
  {
    try {
      result = gum_VariableElimination_Sl_double_Sg__evidenceJointImpact(arg1,arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::Tensor< double >(result)), SWIGTYPE_p_gum__TensorT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableElimination_jointPosterior(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::VariableElimination< double > *arg1 = 0 ;
  PyObject *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  gum::Tensor< double > result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "VariableElimination_jointPosterior", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__VariableEliminationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableElimination_jointPosterior" "', argument " "1"" of type '" "gum::VariableElimination< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::VariableElimination< double > * >(argp1);
  arg2 = swig_obj[1];
  {
    try {
      result = gum_VariableElimination_Sl_double_Sg__jointPosterior(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::Tensor< double >(result)), SWIGTYPE_p_gum__TensorT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableElimination_addJointTarget(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::VariableElimination< double > *arg1 = 0 ;
  PyObject *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "VariableElimination_addJointTarget", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__VariableEliminationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableElimination_addJointTarget" "', argument " "1"" of type '" "gum::VariableElimination< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::VariableElimination< double > * >(argp1);
  arg2 = swig_obj[1];
  {
    try {
      gum_VariableElimination_Sl_double_Sg__addJointTarget(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableElimination_eraseJointTarget(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::VariableElimination< double > *arg1 = 0 ;
  PyObject *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "VariableElimination_eraseJointTarget", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__VariableEliminationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableElimination_eraseJointTarget" "', argument " "1"" of type '" "gum::VariableElimination< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::VariableElimination< double > * >(argp1);
  arg2 = swig_obj[1];
  {
    try {
      gum_VariableElimination_Sl_double_Sg__eraseJointTarget(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableElimination_isJointTarget(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::VariableElimination< double > *arg1 = 0 ;
  PyObject *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "VariableElimination_isJointTarget", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__VariableEliminationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableElimination_isJointTarget" "', argument " "1"" of type '" "gum::VariableElimination< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::VariableElimination< double > * >(argp1);
  arg2 = swig_obj[1];
  {
    try {
      result = (bool)gum_VariableElimination_Sl_double_Sg__isJointTarget(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableElimination_jointTargets(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::VariableElimination< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__VariableEliminationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableElimination_jointTargets" "', argument " "1"" of type '" "gum::VariableElimination< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::VariableElimination< double > * >(argp1);
  {
    try {
      result = (PyObject *)gum_VariableElimination_Sl_double_Sg__jointTargets((gum::VariableElimination< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *VariableElimination_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj = NULL;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gum__VariableEliminationT_double_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *VariableElimination_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_GibbsSampling(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::IBayesNet< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::GibbsSampling< double > *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__IBayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GibbsSampling" "', argument " "1"" of type '" "gum::IBayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::IBayesNet< double > * >(argp1);
  {
    try {
      result = (gum::GibbsSampling< double > *)new gum::GibbsSampling< double >((gum::IBayesNet< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__GibbsSamplingT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_GibbsSampling(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsSampling< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__GibbsSamplingT_double_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GibbsSampling" "', argument " "1"" of type '" "gum::GibbsSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsSampling< double > * >(argp1);
  {
    try {
      delete arg1;
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsSampling_setBurnIn(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsSampling< double > *arg1 = 0 ;
  gum::Size arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "GibbsSampling_setBurnIn", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__GibbsSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsSampling_setBurnIn" "', argument " "1"" of type '" "gum::GibbsSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsSampling< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GibbsSampling_setBurnIn" "', argument " "2"" of type '" "gum::Size""'");
  } 
  arg2 = static_cast< gum::Size >(val2);
  {
    try {
      (arg1)->setBurnIn(SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsSampling_burnIn(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsSampling< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::Size result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__GibbsSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsSampling_burnIn" "', argument " "1"" of type '" "gum::GibbsSampling< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsSampling< double > * >(argp1);
  {
    try {
      result = ((gum::GibbsSampling< double > const *)arg1)->burnIn();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsSampling_setVerbosity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsSampling< double > *arg1 = 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "GibbsSampling_setVerbosity", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__GibbsSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsSampling_setVerbosity" "', argument " "1"" of type '" "gum::GibbsSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsSampling< double > * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GibbsSampling_setVerbosity" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      gum_GibbsSampling_Sl_double_Sg__setVerbosity(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsSampling_setEpsilon(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsSampling< double > *arg1 = 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "GibbsSampling_setEpsilon", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__GibbsSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsSampling_setEpsilon" "', argument " "1"" of type '" "gum::GibbsSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsSampling< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GibbsSampling_setEpsilon" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      gum_GibbsSampling_Sl_double_Sg__setEpsilon(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsSampling_setMinEpsilonRate(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsSampling< double > *arg1 = 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "GibbsSampling_setMinEpsilonRate", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__GibbsSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsSampling_setMinEpsilonRate" "', argument " "1"" of type '" "gum::GibbsSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsSampling< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GibbsSampling_setMinEpsilonRate" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      gum_GibbsSampling_Sl_double_Sg__setMinEpsilonRate(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsSampling_setMaxIter(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsSampling< double > *arg1 = 0 ;
  gum::Size arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "GibbsSampling_setMaxIter", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__GibbsSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsSampling_setMaxIter" "', argument " "1"" of type '" "gum::GibbsSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsSampling< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GibbsSampling_setMaxIter" "', argument " "2"" of type '" "gum::Size""'");
  } 
  arg2 = static_cast< gum::Size >(val2);
  {
    try {
      gum_GibbsSampling_Sl_double_Sg__setMaxIter(arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsSampling_setMaxTime(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsSampling< double > *arg1 = 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "GibbsSampling_setMaxTime", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__GibbsSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsSampling_setMaxTime" "', argument " "1"" of type '" "gum::GibbsSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsSampling< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GibbsSampling_setMaxTime" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      gum_GibbsSampling_Sl_double_Sg__setMaxTime(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsSampling_setPeriodSize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsSampling< double > *arg1 = 0 ;
  gum::Size arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "GibbsSampling_setPeriodSize", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__GibbsSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsSampling_setPeriodSize" "', argument " "1"" of type '" "gum::GibbsSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsSampling< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GibbsSampling_setPeriodSize" "', argument " "2"" of type '" "gum::Size""'");
  } 
  arg2 = static_cast< gum::Size >(val2);
  {
    try {
      gum_GibbsSampling_Sl_double_Sg__setPeriodSize(arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsSampling_verbosity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsSampling< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__GibbsSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsSampling_verbosity" "', argument " "1"" of type '" "gum::GibbsSampling< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsSampling< double > * >(argp1);
  {
    try {
      result = (bool)gum_GibbsSampling_Sl_double_Sg__verbosity((gum::GibbsSampling< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsSampling_epsilon(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsSampling< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__GibbsSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsSampling_epsilon" "', argument " "1"" of type '" "gum::GibbsSampling< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsSampling< double > * >(argp1);
  {
    try {
      result = (double)gum_GibbsSampling_Sl_double_Sg__epsilon((gum::GibbsSampling< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsSampling_minEpsilonRate(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsSampling< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__GibbsSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsSampling_minEpsilonRate" "', argument " "1"" of type '" "gum::GibbsSampling< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsSampling< double > * >(argp1);
  {
    try {
      result = (double)gum_GibbsSampling_Sl_double_Sg__minEpsilonRate((gum::GibbsSampling< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsSampling_maxIter(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsSampling< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::Size result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__GibbsSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsSampling_maxIter" "', argument " "1"" of type '" "gum::GibbsSampling< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsSampling< double > * >(argp1);
  {
    try {
      result = gum_GibbsSampling_Sl_double_Sg__maxIter((gum::GibbsSampling< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsSampling_maxTime(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsSampling< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__GibbsSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsSampling_maxTime" "', argument " "1"" of type '" "gum::GibbsSampling< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsSampling< double > * >(argp1);
  {
    try {
      result = (double)gum_GibbsSampling_Sl_double_Sg__maxTime((gum::GibbsSampling< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsSampling_periodSize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsSampling< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::Size result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__GibbsSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsSampling_periodSize" "', argument " "1"" of type '" "gum::GibbsSampling< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsSampling< double > * >(argp1);
  {
    try {
      result = gum_GibbsSampling_Sl_double_Sg__periodSize((gum::GibbsSampling< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsSampling_nbrIterations(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsSampling< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::Size result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__GibbsSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsSampling_nbrIterations" "', argument " "1"" of type '" "gum::GibbsSampling< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsSampling< double > * >(argp1);
  {
    try {
      result = gum_GibbsSampling_Sl_double_Sg__nbrIterations((gum::GibbsSampling< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsSampling_currentTime(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsSampling< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__GibbsSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsSampling_currentTime" "', argument " "1"" of type '" "gum::GibbsSampling< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsSampling< double > * >(argp1);
  {
    try {
      result = (double)gum_GibbsSampling_Sl_double_Sg__currentTime((gum::GibbsSampling< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsSampling_messageApproximationScheme(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsSampling< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__GibbsSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsSampling_messageApproximationScheme" "', argument " "1"" of type '" "gum::GibbsSampling< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsSampling< double > * >(argp1);
  {
    try {
      result = gum_GibbsSampling_Sl_double_Sg__messageApproximationScheme((gum::GibbsSampling< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsSampling_history(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsSampling< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< double,std::allocator< double > > *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__GibbsSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsSampling_history" "', argument " "1"" of type '" "gum::GibbsSampling< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsSampling< double > * >(argp1);
  {
    try {
      result = (std::vector< double,std::allocator< double > > *) &gum_GibbsSampling_Sl_double_Sg__history((gum::GibbsSampling< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< double,std::allocator< double > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsSampling__asIApproximationSchemeConfiguration(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsSampling< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::IApproximationSchemeConfiguration *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__GibbsSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsSampling__asIApproximationSchemeConfiguration" "', argument " "1"" of type '" "gum::GibbsSampling< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsSampling< double > * >(argp1);
  {
    try {
      result = (gum::IApproximationSchemeConfiguration *) &gum_GibbsSampling_Sl_double_Sg___asIApproximationSchemeConfiguration((gum::GibbsSampling< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__IApproximationSchemeConfiguration, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsSampling_makeInference(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsSampling< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__GibbsSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsSampling_makeInference" "', argument " "1"" of type '" "gum::GibbsSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsSampling< double > * >(argp1);
  {
    try {
      gum_GibbsSampling_Sl_double_Sg__makeInference(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsSampling_posterior__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::GibbsSampling< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  gum::Tensor< double > result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__GibbsSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsSampling_posterior" "', argument " "1"" of type '" "gum::GibbsSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsSampling< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GibbsSampling_posterior" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = gum_GibbsSampling_Sl_double_Sg__posterior__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::Tensor< double >(result)), SWIGTYPE_p_gum__TensorT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsSampling_posterior__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::GibbsSampling< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  gum::Tensor< double > result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__GibbsSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsSampling_posterior" "', argument " "1"" of type '" "gum::GibbsSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsSampling< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GibbsSampling_posterior" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "GibbsSampling_posterior" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = gum_GibbsSampling_Sl_double_Sg__posterior__SWIG_1(arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::Tensor< double >(result)), SWIGTYPE_p_gum__TensorT_double_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsSampling_posterior(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "GibbsSampling_posterior", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_GibbsSampling_posterior__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_GibbsSampling_posterior__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'GibbsSampling_posterior'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::GibbsSampling< double >::posterior(gum::NodeId const)\n"
    "    gum::GibbsSampling< double >::posterior(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_GibbsSampling_addEvidence__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::GibbsSampling< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  gum::Idx arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__GibbsSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsSampling_addEvidence" "', argument " "1"" of type '" "gum::GibbsSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsSampling< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GibbsSampling_addEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GibbsSampling_addEvidence" "', argument " "3"" of type '" "gum::Idx""'");
  } 
  arg3 = static_cast< gum::Idx >(val3);
  {
    try {
      gum_GibbsSampling_Sl_double_Sg__addEvidence__SWIG_0(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsSampling_addEvidence__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::GibbsSampling< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  gum::Idx arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  size_t val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__GibbsSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsSampling_addEvidence" "', argument " "1"" of type '" "gum::GibbsSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsSampling< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GibbsSampling_addEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "GibbsSampling_addEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GibbsSampling_addEvidence" "', argument " "3"" of type '" "gum::Idx""'");
  } 
  arg3 = static_cast< gum::Idx >(val3);
  {
    try {
      gum_GibbsSampling_Sl_double_Sg__addEvidence__SWIG_1(arg1,(std::string const &)*arg2,SWIG_STD_MOVE(arg3));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsSampling_addEvidence__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::GibbsSampling< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__GibbsSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsSampling_addEvidence" "', argument " "1"" of type '" "gum::GibbsSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsSampling< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GibbsSampling_addEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GibbsSampling_addEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "GibbsSampling_addEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      gum_GibbsSampling_Sl_double_Sg__addEvidence__SWIG_2(arg1,SWIG_STD_MOVE(arg2),(std::string const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsSampling_addEvidence__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::GibbsSampling< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__GibbsSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsSampling_addEvidence" "', argument " "1"" of type '" "gum::GibbsSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsSampling< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GibbsSampling_addEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "GibbsSampling_addEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GibbsSampling_addEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "GibbsSampling_addEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      gum_GibbsSampling_Sl_double_Sg__addEvidence__SWIG_3(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsSampling_addEvidence__SWIG_4(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::GibbsSampling< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__GibbsSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsSampling_addEvidence" "', argument " "1"" of type '" "gum::GibbsSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsSampling< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GibbsSampling_addEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GibbsSampling_addEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "GibbsSampling_addEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      gum_GibbsSampling_Sl_double_Sg__addEvidence__SWIG_4(arg1,SWIG_STD_MOVE(arg2),(std::vector< double,std::allocator< double > > const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsSampling_addEvidence__SWIG_5(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::GibbsSampling< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__GibbsSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsSampling_addEvidence" "', argument " "1"" of type '" "gum::GibbsSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsSampling< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GibbsSampling_addEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "GibbsSampling_addEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GibbsSampling_addEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "GibbsSampling_addEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      gum_GibbsSampling_Sl_double_Sg__addEvidence__SWIG_5(arg1,(std::string const &)*arg2,(std::vector< double,std::allocator< double > > const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsSampling_addEvidence__SWIG_6(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::GibbsSampling< double > *arg1 = 0 ;
  gum::Tensor< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__GibbsSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsSampling_addEvidence" "', argument " "1"" of type '" "gum::GibbsSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsSampling< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_gum__TensorT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GibbsSampling_addEvidence" "', argument " "2"" of type '" "gum::Tensor< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "GibbsSampling_addEvidence" "', argument " "2"" of type '" "gum::Tensor< double > const &""'"); 
  }
  arg2 = reinterpret_cast< gum::Tensor< double > * >(argp2);
  {
    try {
      gum_GibbsSampling_Sl_double_Sg__addEvidence__SWIG_6(arg1,(gum::Tensor< double > const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsSampling_addEvidence(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "GibbsSampling_addEvidence", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    PyObject *retobj = _wrap_GibbsSampling_addEvidence__SWIG_6(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_2;
    {
      {
        int res = SWIG_AsVal_size_t(argv[2], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_2;
    return _wrap_GibbsSampling_addEvidence__SWIG_0(self, argc, argv);
  }
check_2:
  
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_3;
    {
      int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_3;
    return _wrap_GibbsSampling_addEvidence__SWIG_2(self, argc, argv);
  }
check_3:
  
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_4;
    {
      int res = swig::asptr(argv[2], (std::vector< double,std::allocator< double > >**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_4;
    return _wrap_GibbsSampling_addEvidence__SWIG_4(self, argc, argv);
  }
check_4:
  
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[2], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_5;
    return _wrap_GibbsSampling_addEvidence__SWIG_1(self, argc, argv);
  }
check_5:
  
  if (argc == 3) {
    int _v = 0;
    {
      int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_6;
    return _wrap_GibbsSampling_addEvidence__SWIG_3(self, argc, argv);
  }
check_6:
  
  if (argc == 3) {
    PyObject *retobj = _wrap_GibbsSampling_addEvidence__SWIG_5(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'GibbsSampling_addEvidence'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::GibbsSampling< double >::addEvidence(gum::NodeId const,gum::Idx const)\n"
    "    gum::GibbsSampling< double >::addEvidence(std::string const &,gum::Idx const)\n"
    "    gum::GibbsSampling< double >::addEvidence(gum::NodeId const,std::string const &)\n"
    "    gum::GibbsSampling< double >::addEvidence(std::string const &,std::string const &)\n"
    "    gum::GibbsSampling< double >::addEvidence(gum::NodeId const,std::vector< double,std::allocator< double > > const &)\n"
    "    gum::GibbsSampling< double >::addEvidence(std::string const &,std::vector< double,std::allocator< double > > const &)\n"
    "    gum::GibbsSampling< double >::addEvidence(gum::Tensor< double > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_GibbsSampling_chgEvidence__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::GibbsSampling< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  gum::Idx arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__GibbsSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsSampling_chgEvidence" "', argument " "1"" of type '" "gum::GibbsSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsSampling< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GibbsSampling_chgEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GibbsSampling_chgEvidence" "', argument " "3"" of type '" "gum::Idx""'");
  } 
  arg3 = static_cast< gum::Idx >(val3);
  {
    try {
      gum_GibbsSampling_Sl_double_Sg__chgEvidence__SWIG_0(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsSampling_chgEvidence__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::GibbsSampling< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  gum::Idx arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  size_t val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__GibbsSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsSampling_chgEvidence" "', argument " "1"" of type '" "gum::GibbsSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsSampling< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GibbsSampling_chgEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "GibbsSampling_chgEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GibbsSampling_chgEvidence" "', argument " "3"" of type '" "gum::Idx""'");
  } 
  arg3 = static_cast< gum::Idx >(val3);
  {
    try {
      gum_GibbsSampling_Sl_double_Sg__chgEvidence__SWIG_1(arg1,(std::string const &)*arg2,SWIG_STD_MOVE(arg3));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsSampling_chgEvidence__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::GibbsSampling< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__GibbsSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsSampling_chgEvidence" "', argument " "1"" of type '" "gum::GibbsSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsSampling< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GibbsSampling_chgEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GibbsSampling_chgEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "GibbsSampling_chgEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      gum_GibbsSampling_Sl_double_Sg__chgEvidence__SWIG_2(arg1,SWIG_STD_MOVE(arg2),(std::string const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsSampling_chgEvidence__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::GibbsSampling< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__GibbsSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsSampling_chgEvidence" "', argument " "1"" of type '" "gum::GibbsSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsSampling< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GibbsSampling_chgEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "GibbsSampling_chgEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GibbsSampling_chgEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "GibbsSampling_chgEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      gum_GibbsSampling_Sl_double_Sg__chgEvidence__SWIG_3(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsSampling_chgEvidence__SWIG_4(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::GibbsSampling< double > *arg1 = 0 ;
  gum::Tensor< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__GibbsSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsSampling_chgEvidence" "', argument " "1"" of type '" "gum::GibbsSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsSampling< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_gum__TensorT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GibbsSampling_chgEvidence" "', argument " "2"" of type '" "gum::Tensor< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "GibbsSampling_chgEvidence" "', argument " "2"" of type '" "gum::Tensor< double > const &""'"); 
  }
  arg2 = reinterpret_cast< gum::Tensor< double > * >(argp2);
  {
    try {
      gum_GibbsSampling_Sl_double_Sg__chgEvidence__SWIG_4(arg1,(gum::Tensor< double > const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsSampling_chgEvidence__SWIG_5(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::GibbsSampling< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__GibbsSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsSampling_chgEvidence" "', argument " "1"" of type '" "gum::GibbsSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsSampling< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GibbsSampling_chgEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GibbsSampling_chgEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "GibbsSampling_chgEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      gum_GibbsSampling_Sl_double_Sg__chgEvidence__SWIG_5(arg1,SWIG_STD_MOVE(arg2),(std::vector< double,std::allocator< double > > const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsSampling_chgEvidence__SWIG_6(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::GibbsSampling< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__GibbsSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsSampling_chgEvidence" "', argument " "1"" of type '" "gum::GibbsSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsSampling< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GibbsSampling_chgEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "GibbsSampling_chgEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GibbsSampling_chgEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "GibbsSampling_chgEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      gum_GibbsSampling_Sl_double_Sg__chgEvidence__SWIG_6(arg1,(std::string const &)*arg2,(std::vector< double,std::allocator< double > > const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsSampling_chgEvidence(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "GibbsSampling_chgEvidence", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    PyObject *retobj = _wrap_GibbsSampling_chgEvidence__SWIG_4(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_2;
    {
      {
        int res = SWIG_AsVal_size_t(argv[2], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_2;
    return _wrap_GibbsSampling_chgEvidence__SWIG_0(self, argc, argv);
  }
check_2:
  
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_3;
    {
      int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_3;
    return _wrap_GibbsSampling_chgEvidence__SWIG_2(self, argc, argv);
  }
check_3:
  
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_4;
    {
      int res = swig::asptr(argv[2], (std::vector< double,std::allocator< double > >**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_4;
    return _wrap_GibbsSampling_chgEvidence__SWIG_5(self, argc, argv);
  }
check_4:
  
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[2], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_5;
    return _wrap_GibbsSampling_chgEvidence__SWIG_1(self, argc, argv);
  }
check_5:
  
  if (argc == 3) {
    int _v = 0;
    {
      int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_6;
    return _wrap_GibbsSampling_chgEvidence__SWIG_3(self, argc, argv);
  }
check_6:
  
  if (argc == 3) {
    PyObject *retobj = _wrap_GibbsSampling_chgEvidence__SWIG_6(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'GibbsSampling_chgEvidence'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::GibbsSampling< double >::chgEvidence(gum::NodeId const,gum::Idx const)\n"
    "    gum::GibbsSampling< double >::chgEvidence(std::string const &,gum::Idx const)\n"
    "    gum::GibbsSampling< double >::chgEvidence(gum::NodeId const,std::string const &)\n"
    "    gum::GibbsSampling< double >::chgEvidence(std::string const &,std::string const &)\n"
    "    gum::GibbsSampling< double >::chgEvidence(gum::Tensor< double > const &)\n"
    "    gum::GibbsSampling< double >::chgEvidence(gum::NodeId const,std::vector< double,std::allocator< double > > const &)\n"
    "    gum::GibbsSampling< double >::chgEvidence(std::string const &,std::vector< double,std::allocator< double > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_GibbsSampling_hasEvidence__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::GibbsSampling< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  bool result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__GibbsSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsSampling_hasEvidence" "', argument " "1"" of type '" "gum::GibbsSampling< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsSampling< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GibbsSampling_hasEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (bool)gum_GibbsSampling_Sl_double_Sg__hasEvidence__SWIG_0((gum::GibbsSampling< double > const *)arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsSampling_hasEvidence__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::GibbsSampling< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  bool result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__GibbsSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsSampling_hasEvidence" "', argument " "1"" of type '" "gum::GibbsSampling< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsSampling< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GibbsSampling_hasEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "GibbsSampling_hasEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)gum_GibbsSampling_Sl_double_Sg__hasEvidence__SWIG_1((gum::GibbsSampling< double > const *)arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsSampling_hasEvidence(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "GibbsSampling_hasEvidence", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_GibbsSampling_hasEvidence__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_GibbsSampling_hasEvidence__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'GibbsSampling_hasEvidence'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::GibbsSampling< double >::hasEvidence(gum::NodeId const) const\n"
    "    gum::GibbsSampling< double >::hasEvidence(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_GibbsSampling_eraseAllEvidence(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsSampling< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__GibbsSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsSampling_eraseAllEvidence" "', argument " "1"" of type '" "gum::GibbsSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsSampling< double > * >(argp1);
  {
    try {
      gum_GibbsSampling_Sl_double_Sg__eraseAllEvidence(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsSampling_eraseEvidence__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::GibbsSampling< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__GibbsSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsSampling_eraseEvidence" "', argument " "1"" of type '" "gum::GibbsSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsSampling< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GibbsSampling_eraseEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      gum_GibbsSampling_Sl_double_Sg__eraseEvidence__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsSampling_eraseEvidence__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::GibbsSampling< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__GibbsSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsSampling_eraseEvidence" "', argument " "1"" of type '" "gum::GibbsSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsSampling< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GibbsSampling_eraseEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "GibbsSampling_eraseEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      gum_GibbsSampling_Sl_double_Sg__eraseEvidence__SWIG_1(arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsSampling_eraseEvidence(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "GibbsSampling_eraseEvidence", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_GibbsSampling_eraseEvidence__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_GibbsSampling_eraseEvidence__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'GibbsSampling_eraseEvidence'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::GibbsSampling< double >::eraseEvidence(gum::NodeId const)\n"
    "    gum::GibbsSampling< double >::eraseEvidence(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_GibbsSampling_hasSoftEvidence__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::GibbsSampling< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  bool result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__GibbsSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsSampling_hasSoftEvidence" "', argument " "1"" of type '" "gum::GibbsSampling< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsSampling< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GibbsSampling_hasSoftEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (bool)gum_GibbsSampling_Sl_double_Sg__hasSoftEvidence__SWIG_0((gum::GibbsSampling< double > const *)arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsSampling_hasHardEvidence(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsSampling< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "GibbsSampling_hasHardEvidence", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__GibbsSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsSampling_hasHardEvidence" "', argument " "1"" of type '" "gum::GibbsSampling< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsSampling< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GibbsSampling_hasHardEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "GibbsSampling_hasHardEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)gum_GibbsSampling_Sl_double_Sg__hasHardEvidence((gum::GibbsSampling< double > const *)arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsSampling_hasSoftEvidence__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::GibbsSampling< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  bool result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__GibbsSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsSampling_hasSoftEvidence" "', argument " "1"" of type '" "gum::GibbsSampling< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsSampling< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GibbsSampling_hasSoftEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "GibbsSampling_hasSoftEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)gum_GibbsSampling_Sl_double_Sg__hasSoftEvidence__SWIG_1((gum::GibbsSampling< double > const *)arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsSampling_hasSoftEvidence(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "GibbsSampling_hasSoftEvidence", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_GibbsSampling_hasSoftEvidence__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_GibbsSampling_hasSoftEvidence__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'GibbsSampling_hasSoftEvidence'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::GibbsSampling< double >::hasSoftEvidence(gum::NodeId const) const\n"
    "    gum::GibbsSampling< double >::hasSoftEvidence(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_GibbsSampling_nbrEvidence(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsSampling< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::Size result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__GibbsSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsSampling_nbrEvidence" "', argument " "1"" of type '" "gum::GibbsSampling< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsSampling< double > * >(argp1);
  {
    try {
      result = gum_GibbsSampling_Sl_double_Sg__nbrEvidence((gum::GibbsSampling< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsSampling_nbrHardEvidence(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsSampling< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::Size result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__GibbsSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsSampling_nbrHardEvidence" "', argument " "1"" of type '" "gum::GibbsSampling< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsSampling< double > * >(argp1);
  {
    try {
      result = gum_GibbsSampling_Sl_double_Sg__nbrHardEvidence((gum::GibbsSampling< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsSampling_nbrSoftEvidence(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsSampling< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::Size result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__GibbsSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsSampling_nbrSoftEvidence" "', argument " "1"" of type '" "gum::GibbsSampling< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsSampling< double > * >(argp1);
  {
    try {
      result = gum_GibbsSampling_Sl_double_Sg__nbrSoftEvidence((gum::GibbsSampling< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsSampling_eraseAllTargets(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsSampling< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__GibbsSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsSampling_eraseAllTargets" "', argument " "1"" of type '" "gum::GibbsSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsSampling< double > * >(argp1);
  {
    try {
      gum_GibbsSampling_Sl_double_Sg__eraseAllTargets(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsSampling_addAllTargets(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsSampling< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__GibbsSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsSampling_addAllTargets" "', argument " "1"" of type '" "gum::GibbsSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsSampling< double > * >(argp1);
  {
    try {
      gum_GibbsSampling_Sl_double_Sg__addAllTargets(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsSampling_addTarget__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::GibbsSampling< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__GibbsSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsSampling_addTarget" "', argument " "1"" of type '" "gum::GibbsSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsSampling< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GibbsSampling_addTarget" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      gum_GibbsSampling_Sl_double_Sg__addTarget__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsSampling_addTarget__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::GibbsSampling< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__GibbsSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsSampling_addTarget" "', argument " "1"" of type '" "gum::GibbsSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsSampling< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GibbsSampling_addTarget" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "GibbsSampling_addTarget" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      gum_GibbsSampling_Sl_double_Sg__addTarget__SWIG_1(arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsSampling_addTarget(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "GibbsSampling_addTarget", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_GibbsSampling_addTarget__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_GibbsSampling_addTarget__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'GibbsSampling_addTarget'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::GibbsSampling< double >::addTarget(gum::NodeId const)\n"
    "    gum::GibbsSampling< double >::addTarget(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_GibbsSampling_eraseTarget__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::GibbsSampling< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__GibbsSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsSampling_eraseTarget" "', argument " "1"" of type '" "gum::GibbsSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsSampling< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GibbsSampling_eraseTarget" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      gum_GibbsSampling_Sl_double_Sg__eraseTarget__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsSampling_eraseTarget__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::GibbsSampling< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__GibbsSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsSampling_eraseTarget" "', argument " "1"" of type '" "gum::GibbsSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsSampling< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GibbsSampling_eraseTarget" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "GibbsSampling_eraseTarget" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      gum_GibbsSampling_Sl_double_Sg__eraseTarget__SWIG_1(arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsSampling_eraseTarget(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "GibbsSampling_eraseTarget", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_GibbsSampling_eraseTarget__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_GibbsSampling_eraseTarget__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'GibbsSampling_eraseTarget'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::GibbsSampling< double >::eraseTarget(gum::NodeId const)\n"
    "    gum::GibbsSampling< double >::eraseTarget(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_GibbsSampling_isTarget__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::GibbsSampling< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  bool result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__GibbsSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsSampling_isTarget" "', argument " "1"" of type '" "gum::GibbsSampling< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsSampling< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GibbsSampling_isTarget" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (bool)gum_GibbsSampling_Sl_double_Sg__isTarget__SWIG_0((gum::GibbsSampling< double > const *)arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsSampling_isTarget__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::GibbsSampling< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  bool result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__GibbsSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsSampling_isTarget" "', argument " "1"" of type '" "gum::GibbsSampling< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsSampling< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GibbsSampling_isTarget" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "GibbsSampling_isTarget" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)gum_GibbsSampling_Sl_double_Sg__isTarget__SWIG_1((gum::GibbsSampling< double > const *)arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsSampling_isTarget(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "GibbsSampling_isTarget", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_GibbsSampling_isTarget__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_GibbsSampling_isTarget__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'GibbsSampling_isTarget'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::GibbsSampling< double >::isTarget(gum::NodeId const) const\n"
    "    gum::GibbsSampling< double >::isTarget(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_GibbsSampling_nbrTargets(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsSampling< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::Size result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__GibbsSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsSampling_nbrTargets" "', argument " "1"" of type '" "gum::GibbsSampling< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsSampling< double > * >(argp1);
  {
    try {
      result = gum_GibbsSampling_Sl_double_Sg__nbrTargets((gum::GibbsSampling< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsSampling_H__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::GibbsSampling< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  double result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__GibbsSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsSampling_H" "', argument " "1"" of type '" "gum::GibbsSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsSampling< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GibbsSampling_H" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (double)gum_GibbsSampling_Sl_double_Sg__H__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsSampling_H__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::GibbsSampling< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  double result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__GibbsSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsSampling_H" "', argument " "1"" of type '" "gum::GibbsSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsSampling< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GibbsSampling_H" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "GibbsSampling_H" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (double)gum_GibbsSampling_Sl_double_Sg__H__SWIG_1(arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsSampling_H(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "GibbsSampling_H", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_GibbsSampling_H__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_GibbsSampling_H__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'GibbsSampling_H'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::GibbsSampling< double >::H(gum::NodeId const)\n"
    "    gum::GibbsSampling< double >::H(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_GibbsSampling_evidenceImpact__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::GibbsSampling< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  gum::NodeSet *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  gum::Tensor< double > result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__GibbsSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsSampling_evidenceImpact" "', argument " "1"" of type '" "gum::GibbsSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsSampling< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GibbsSampling_evidenceImpact" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_gum__SetT_std__size_t_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GibbsSampling_evidenceImpact" "', argument " "3"" of type '" "gum::NodeSet const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "GibbsSampling_evidenceImpact" "', argument " "3"" of type '" "gum::NodeSet const &""'"); 
  }
  arg3 = reinterpret_cast< gum::NodeSet * >(argp3);
  {
    try {
      result = gum_GibbsSampling_Sl_double_Sg__evidenceImpact__SWIG_0(arg1,SWIG_STD_MOVE(arg2),(gum::Set< std::size_t > const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::Tensor< double >(result)), SWIGTYPE_p_gum__TensorT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsSampling_evidenceImpact__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::GibbsSampling< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  gum::Tensor< double > result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__GibbsSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsSampling_evidenceImpact" "', argument " "1"" of type '" "gum::GibbsSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsSampling< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GibbsSampling_evidenceImpact" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "GibbsSampling_evidenceImpact" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GibbsSampling_evidenceImpact" "', argument " "3"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "GibbsSampling_evidenceImpact" "', argument " "3"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      result = gum_GibbsSampling_Sl_double_Sg__evidenceImpact__SWIG_1(arg1,(std::string const &)*arg2,(std::vector< std::string,std::allocator< std::string > > const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::Tensor< double >(result)), SWIGTYPE_p_gum__TensorT_double_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsSampling_BN(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsSampling< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::IBayesNet< double > *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__GibbsSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsSampling_BN" "', argument " "1"" of type '" "gum::GibbsSampling< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsSampling< double > * >(argp1);
  {
    try {
      result = (gum::IBayesNet< double > *) &gum_GibbsSampling_Sl_double_Sg__BN((gum::GibbsSampling< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__IBayesNetT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsSampling_currentPosterior__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::GibbsSampling< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  gum::Tensor< double > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__GibbsSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsSampling_currentPosterior" "', argument " "1"" of type '" "gum::GibbsSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsSampling< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GibbsSampling_currentPosterior" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (gum::Tensor< double > *) &gum_GibbsSampling_Sl_double_Sg__currentPosterior__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__TensorT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsSampling_currentPosterior__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::GibbsSampling< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  gum::Tensor< double > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__GibbsSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsSampling_currentPosterior" "', argument " "1"" of type '" "gum::GibbsSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsSampling< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GibbsSampling_currentPosterior" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "GibbsSampling_currentPosterior" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (gum::Tensor< double > *) &gum_GibbsSampling_Sl_double_Sg__currentPosterior__SWIG_1(arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__TensorT_double_t, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsSampling_currentPosterior(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "GibbsSampling_currentPosterior", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_GibbsSampling_currentPosterior__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_GibbsSampling_currentPosterior__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'GibbsSampling_currentPosterior'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::GibbsSampling< double >::currentPosterior(gum::NodeId const)\n"
    "    gum::GibbsSampling< double >::currentPosterior(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_GibbsSampling_nbrDrawnVar(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsSampling< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::Size result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__GibbsSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsSampling_nbrDrawnVar" "', argument " "1"" of type '" "gum::GibbsSampling< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsSampling< double > * >(argp1);
  {
    try {
      result = gum_GibbsSampling_Sl_double_Sg__nbrDrawnVar((gum::GibbsSampling< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsSampling_setNbrDrawnVar(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsSampling< double > *arg1 = 0 ;
  gum::Size arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "GibbsSampling_setNbrDrawnVar", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__GibbsSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsSampling_setNbrDrawnVar" "', argument " "1"" of type '" "gum::GibbsSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsSampling< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GibbsSampling_setNbrDrawnVar" "', argument " "2"" of type '" "gum::Size""'");
  } 
  arg2 = static_cast< gum::Size >(val2);
  {
    try {
      gum_GibbsSampling_Sl_double_Sg__setNbrDrawnVar(arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsSampling_isDrawnAtRandom(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsSampling< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__GibbsSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsSampling_isDrawnAtRandom" "', argument " "1"" of type '" "gum::GibbsSampling< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsSampling< double > * >(argp1);
  {
    try {
      result = (bool)gum_GibbsSampling_Sl_double_Sg__isDrawnAtRandom((gum::GibbsSampling< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsSampling_setDrawnAtRandom(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsSampling< double > *arg1 = 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "GibbsSampling_setDrawnAtRandom", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__GibbsSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsSampling_setDrawnAtRandom" "', argument " "1"" of type '" "gum::GibbsSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsSampling< double > * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GibbsSampling_setDrawnAtRandom" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      gum_GibbsSampling_Sl_double_Sg__setDrawnAtRandom(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsSampling_setEvidence(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsSampling< double > *arg1 = 0 ;
  PyObject *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "GibbsSampling_setEvidence", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__GibbsSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsSampling_setEvidence" "', argument " "1"" of type '" "gum::GibbsSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsSampling< double > * >(argp1);
  arg2 = swig_obj[1];
  {
    try {
      gum_GibbsSampling_Sl_double_Sg__setEvidence(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsSampling_updateEvidence(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsSampling< double > *arg1 = 0 ;
  PyObject *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "GibbsSampling_updateEvidence", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__GibbsSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsSampling_updateEvidence" "', argument " "1"" of type '" "gum::GibbsSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsSampling< double > * >(argp1);
  arg2 = swig_obj[1];
  {
    try {
      gum_GibbsSampling_Sl_double_Sg__updateEvidence(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsSampling_setTargets(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsSampling< double > *arg1 = 0 ;
  PyObject *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "GibbsSampling_setTargets", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__GibbsSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsSampling_setTargets" "', argument " "1"" of type '" "gum::GibbsSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsSampling< double > * >(argp1);
  arg2 = swig_obj[1];
  {
    try {
      gum_GibbsSampling_Sl_double_Sg__setTargets(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsSampling_hardEvidenceNodes(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsSampling< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__GibbsSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsSampling_hardEvidenceNodes" "', argument " "1"" of type '" "gum::GibbsSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsSampling< double > * >(argp1);
  {
    try {
      result = (PyObject *)gum_GibbsSampling_Sl_double_Sg__hardEvidenceNodes(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsSampling_softEvidenceNodes(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsSampling< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__GibbsSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsSampling_softEvidenceNodes" "', argument " "1"" of type '" "gum::GibbsSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsSampling< double > * >(argp1);
  {
    try {
      result = (PyObject *)gum_GibbsSampling_Sl_double_Sg__softEvidenceNodes(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsSampling_targets(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsSampling< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__GibbsSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsSampling_targets" "', argument " "1"" of type '" "gum::GibbsSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsSampling< double > * >(argp1);
  {
    try {
      result = (PyObject *)gum_GibbsSampling_Sl_double_Sg__targets(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsSampling_evidenceImpact__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::GibbsSampling< double > *arg1 = 0 ;
  PyObject *arg2 = 0 ;
  PyObject *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gum::Tensor< double > result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__GibbsSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsSampling_evidenceImpact" "', argument " "1"" of type '" "gum::GibbsSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsSampling< double > * >(argp1);
  arg2 = swig_obj[1];
  arg3 = swig_obj[2];
  {
    try {
      result = gum_GibbsSampling_Sl_double_Sg__evidenceImpact__SWIG_2(arg1,arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::Tensor< double >(result)), SWIGTYPE_p_gum__TensorT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsSampling_evidenceImpact(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "GibbsSampling_evidenceImpact", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    {
      int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_gum__SetT_std__size_t_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_1;
    return _wrap_GibbsSampling_evidenceImpact__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 3) {
    int _v = 0;
    {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_2;
    {
      int res = swig::asptr(argv[2], (std::vector< std::string,std::allocator< std::string > >**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_2;
    return _wrap_GibbsSampling_evidenceImpact__SWIG_1(self, argc, argv);
  }
check_2:
  
  if (argc == 3) {
    PyObject *retobj = _wrap_GibbsSampling_evidenceImpact__SWIG_2(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'GibbsSampling_evidenceImpact'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::GibbsSampling< double >::evidenceImpact(gum::NodeId,gum::NodeSet const &)\n"
    "    gum::GibbsSampling< double >::evidenceImpact(std::string const &,std::vector< std::string,std::allocator< std::string > > const &)\n"
    "    gum::GibbsSampling< double >::evidenceImpact(PyObject *,PyObject *)\n");
  return 0;
}


SWIGINTERN PyObject *GibbsSampling_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj = NULL;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gum__GibbsSamplingT_double_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *GibbsSampling_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_ImportanceSampling(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::IBayesNet< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::ImportanceSampling< double > *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__IBayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ImportanceSampling" "', argument " "1"" of type '" "gum::IBayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::IBayesNet< double > * >(argp1);
  {
    try {
      result = (gum::ImportanceSampling< double > *)new gum::ImportanceSampling< double >((gum::IBayesNet< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__ImportanceSamplingT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ImportanceSampling(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::ImportanceSampling< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ImportanceSamplingT_double_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ImportanceSampling" "', argument " "1"" of type '" "gum::ImportanceSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::ImportanceSampling< double > * >(argp1);
  {
    try {
      delete arg1;
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImportanceSampling_setVerbosity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::ImportanceSampling< double > *arg1 = 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ImportanceSampling_setVerbosity", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ImportanceSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImportanceSampling_setVerbosity" "', argument " "1"" of type '" "gum::ImportanceSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::ImportanceSampling< double > * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImportanceSampling_setVerbosity" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      gum_ImportanceSampling_Sl_double_Sg__setVerbosity(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImportanceSampling_setEpsilon(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::ImportanceSampling< double > *arg1 = 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ImportanceSampling_setEpsilon", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ImportanceSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImportanceSampling_setEpsilon" "', argument " "1"" of type '" "gum::ImportanceSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::ImportanceSampling< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImportanceSampling_setEpsilon" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      gum_ImportanceSampling_Sl_double_Sg__setEpsilon(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImportanceSampling_setMinEpsilonRate(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::ImportanceSampling< double > *arg1 = 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ImportanceSampling_setMinEpsilonRate", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ImportanceSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImportanceSampling_setMinEpsilonRate" "', argument " "1"" of type '" "gum::ImportanceSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::ImportanceSampling< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImportanceSampling_setMinEpsilonRate" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      gum_ImportanceSampling_Sl_double_Sg__setMinEpsilonRate(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImportanceSampling_setMaxIter(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::ImportanceSampling< double > *arg1 = 0 ;
  gum::Size arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ImportanceSampling_setMaxIter", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ImportanceSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImportanceSampling_setMaxIter" "', argument " "1"" of type '" "gum::ImportanceSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::ImportanceSampling< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImportanceSampling_setMaxIter" "', argument " "2"" of type '" "gum::Size""'");
  } 
  arg2 = static_cast< gum::Size >(val2);
  {
    try {
      gum_ImportanceSampling_Sl_double_Sg__setMaxIter(arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImportanceSampling_setMaxTime(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::ImportanceSampling< double > *arg1 = 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ImportanceSampling_setMaxTime", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ImportanceSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImportanceSampling_setMaxTime" "', argument " "1"" of type '" "gum::ImportanceSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::ImportanceSampling< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImportanceSampling_setMaxTime" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      gum_ImportanceSampling_Sl_double_Sg__setMaxTime(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImportanceSampling_setPeriodSize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::ImportanceSampling< double > *arg1 = 0 ;
  gum::Size arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ImportanceSampling_setPeriodSize", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ImportanceSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImportanceSampling_setPeriodSize" "', argument " "1"" of type '" "gum::ImportanceSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::ImportanceSampling< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImportanceSampling_setPeriodSize" "', argument " "2"" of type '" "gum::Size""'");
  } 
  arg2 = static_cast< gum::Size >(val2);
  {
    try {
      gum_ImportanceSampling_Sl_double_Sg__setPeriodSize(arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImportanceSampling_verbosity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::ImportanceSampling< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ImportanceSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImportanceSampling_verbosity" "', argument " "1"" of type '" "gum::ImportanceSampling< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::ImportanceSampling< double > * >(argp1);
  {
    try {
      result = (bool)gum_ImportanceSampling_Sl_double_Sg__verbosity((gum::ImportanceSampling< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImportanceSampling_epsilon(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::ImportanceSampling< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ImportanceSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImportanceSampling_epsilon" "', argument " "1"" of type '" "gum::ImportanceSampling< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::ImportanceSampling< double > * >(argp1);
  {
    try {
      result = (double)gum_ImportanceSampling_Sl_double_Sg__epsilon((gum::ImportanceSampling< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImportanceSampling_minEpsilonRate(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::ImportanceSampling< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ImportanceSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImportanceSampling_minEpsilonRate" "', argument " "1"" of type '" "gum::ImportanceSampling< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::ImportanceSampling< double > * >(argp1);
  {
    try {
      result = (double)gum_ImportanceSampling_Sl_double_Sg__minEpsilonRate((gum::ImportanceSampling< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImportanceSampling_maxIter(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::ImportanceSampling< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::Size result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ImportanceSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImportanceSampling_maxIter" "', argument " "1"" of type '" "gum::ImportanceSampling< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::ImportanceSampling< double > * >(argp1);
  {
    try {
      result = gum_ImportanceSampling_Sl_double_Sg__maxIter((gum::ImportanceSampling< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImportanceSampling_maxTime(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::ImportanceSampling< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ImportanceSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImportanceSampling_maxTime" "', argument " "1"" of type '" "gum::ImportanceSampling< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::ImportanceSampling< double > * >(argp1);
  {
    try {
      result = (double)gum_ImportanceSampling_Sl_double_Sg__maxTime((gum::ImportanceSampling< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImportanceSampling_periodSize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::ImportanceSampling< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::Size result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ImportanceSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImportanceSampling_periodSize" "', argument " "1"" of type '" "gum::ImportanceSampling< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::ImportanceSampling< double > * >(argp1);
  {
    try {
      result = gum_ImportanceSampling_Sl_double_Sg__periodSize((gum::ImportanceSampling< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImportanceSampling_nbrIterations(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::ImportanceSampling< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::Size result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ImportanceSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImportanceSampling_nbrIterations" "', argument " "1"" of type '" "gum::ImportanceSampling< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::ImportanceSampling< double > * >(argp1);
  {
    try {
      result = gum_ImportanceSampling_Sl_double_Sg__nbrIterations((gum::ImportanceSampling< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImportanceSampling_currentTime(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::ImportanceSampling< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ImportanceSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImportanceSampling_currentTime" "', argument " "1"" of type '" "gum::ImportanceSampling< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::ImportanceSampling< double > * >(argp1);
  {
    try {
      result = (double)gum_ImportanceSampling_Sl_double_Sg__currentTime((gum::ImportanceSampling< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImportanceSampling_messageApproximationScheme(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::ImportanceSampling< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ImportanceSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImportanceSampling_messageApproximationScheme" "', argument " "1"" of type '" "gum::ImportanceSampling< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::ImportanceSampling< double > * >(argp1);
  {
    try {
      result = gum_ImportanceSampling_Sl_double_Sg__messageApproximationScheme((gum::ImportanceSampling< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImportanceSampling_history(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::ImportanceSampling< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< double,std::allocator< double > > *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ImportanceSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImportanceSampling_history" "', argument " "1"" of type '" "gum::ImportanceSampling< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::ImportanceSampling< double > * >(argp1);
  {
    try {
      result = (std::vector< double,std::allocator< double > > *) &gum_ImportanceSampling_Sl_double_Sg__history((gum::ImportanceSampling< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< double,std::allocator< double > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImportanceSampling__asIApproximationSchemeConfiguration(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::ImportanceSampling< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::IApproximationSchemeConfiguration *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ImportanceSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImportanceSampling__asIApproximationSchemeConfiguration" "', argument " "1"" of type '" "gum::ImportanceSampling< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::ImportanceSampling< double > * >(argp1);
  {
    try {
      result = (gum::IApproximationSchemeConfiguration *) &gum_ImportanceSampling_Sl_double_Sg___asIApproximationSchemeConfiguration((gum::ImportanceSampling< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__IApproximationSchemeConfiguration, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImportanceSampling_makeInference(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::ImportanceSampling< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ImportanceSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImportanceSampling_makeInference" "', argument " "1"" of type '" "gum::ImportanceSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::ImportanceSampling< double > * >(argp1);
  {
    try {
      gum_ImportanceSampling_Sl_double_Sg__makeInference(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImportanceSampling_posterior__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::ImportanceSampling< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  gum::Tensor< double > result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ImportanceSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImportanceSampling_posterior" "', argument " "1"" of type '" "gum::ImportanceSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::ImportanceSampling< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImportanceSampling_posterior" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = gum_ImportanceSampling_Sl_double_Sg__posterior__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::Tensor< double >(result)), SWIGTYPE_p_gum__TensorT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImportanceSampling_posterior__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::ImportanceSampling< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  gum::Tensor< double > result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ImportanceSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImportanceSampling_posterior" "', argument " "1"" of type '" "gum::ImportanceSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::ImportanceSampling< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImportanceSampling_posterior" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "ImportanceSampling_posterior" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = gum_ImportanceSampling_Sl_double_Sg__posterior__SWIG_1(arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::Tensor< double >(result)), SWIGTYPE_p_gum__TensorT_double_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImportanceSampling_posterior(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ImportanceSampling_posterior", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_ImportanceSampling_posterior__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_ImportanceSampling_posterior__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ImportanceSampling_posterior'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::ImportanceSampling< double >::posterior(gum::NodeId const)\n"
    "    gum::ImportanceSampling< double >::posterior(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ImportanceSampling_addEvidence__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::ImportanceSampling< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  gum::Idx arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ImportanceSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImportanceSampling_addEvidence" "', argument " "1"" of type '" "gum::ImportanceSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::ImportanceSampling< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImportanceSampling_addEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ImportanceSampling_addEvidence" "', argument " "3"" of type '" "gum::Idx""'");
  } 
  arg3 = static_cast< gum::Idx >(val3);
  {
    try {
      gum_ImportanceSampling_Sl_double_Sg__addEvidence__SWIG_0(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImportanceSampling_addEvidence__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::ImportanceSampling< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  gum::Idx arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  size_t val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ImportanceSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImportanceSampling_addEvidence" "', argument " "1"" of type '" "gum::ImportanceSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::ImportanceSampling< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImportanceSampling_addEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "ImportanceSampling_addEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ImportanceSampling_addEvidence" "', argument " "3"" of type '" "gum::Idx""'");
  } 
  arg3 = static_cast< gum::Idx >(val3);
  {
    try {
      gum_ImportanceSampling_Sl_double_Sg__addEvidence__SWIG_1(arg1,(std::string const &)*arg2,SWIG_STD_MOVE(arg3));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImportanceSampling_addEvidence__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::ImportanceSampling< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ImportanceSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImportanceSampling_addEvidence" "', argument " "1"" of type '" "gum::ImportanceSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::ImportanceSampling< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImportanceSampling_addEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ImportanceSampling_addEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "ImportanceSampling_addEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      gum_ImportanceSampling_Sl_double_Sg__addEvidence__SWIG_2(arg1,SWIG_STD_MOVE(arg2),(std::string const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImportanceSampling_addEvidence__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::ImportanceSampling< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ImportanceSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImportanceSampling_addEvidence" "', argument " "1"" of type '" "gum::ImportanceSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::ImportanceSampling< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImportanceSampling_addEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "ImportanceSampling_addEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ImportanceSampling_addEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "ImportanceSampling_addEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      gum_ImportanceSampling_Sl_double_Sg__addEvidence__SWIG_3(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImportanceSampling_addEvidence__SWIG_4(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::ImportanceSampling< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ImportanceSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImportanceSampling_addEvidence" "', argument " "1"" of type '" "gum::ImportanceSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::ImportanceSampling< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImportanceSampling_addEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ImportanceSampling_addEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "ImportanceSampling_addEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      gum_ImportanceSampling_Sl_double_Sg__addEvidence__SWIG_4(arg1,SWIG_STD_MOVE(arg2),(std::vector< double,std::allocator< double > > const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImportanceSampling_addEvidence__SWIG_5(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::ImportanceSampling< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ImportanceSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImportanceSampling_addEvidence" "', argument " "1"" of type '" "gum::ImportanceSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::ImportanceSampling< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImportanceSampling_addEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "ImportanceSampling_addEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ImportanceSampling_addEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "ImportanceSampling_addEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      gum_ImportanceSampling_Sl_double_Sg__addEvidence__SWIG_5(arg1,(std::string const &)*arg2,(std::vector< double,std::allocator< double > > const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImportanceSampling_addEvidence__SWIG_6(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::ImportanceSampling< double > *arg1 = 0 ;
  gum::Tensor< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ImportanceSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImportanceSampling_addEvidence" "', argument " "1"" of type '" "gum::ImportanceSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::ImportanceSampling< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_gum__TensorT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImportanceSampling_addEvidence" "', argument " "2"" of type '" "gum::Tensor< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "ImportanceSampling_addEvidence" "', argument " "2"" of type '" "gum::Tensor< double > const &""'"); 
  }
  arg2 = reinterpret_cast< gum::Tensor< double > * >(argp2);
  {
    try {
      gum_ImportanceSampling_Sl_double_Sg__addEvidence__SWIG_6(arg1,(gum::Tensor< double > const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImportanceSampling_addEvidence(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ImportanceSampling_addEvidence", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    PyObject *retobj = _wrap_ImportanceSampling_addEvidence__SWIG_6(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_2;
    {
      {
        int res = SWIG_AsVal_size_t(argv[2], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_2;
    return _wrap_ImportanceSampling_addEvidence__SWIG_0(self, argc, argv);
  }
check_2:
  
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_3;
    {
      int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_3;
    return _wrap_ImportanceSampling_addEvidence__SWIG_2(self, argc, argv);
  }
check_3:
  
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_4;
    {
      int res = swig::asptr(argv[2], (std::vector< double,std::allocator< double > >**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_4;
    return _wrap_ImportanceSampling_addEvidence__SWIG_4(self, argc, argv);
  }
check_4:
  
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[2], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_5;
    return _wrap_ImportanceSampling_addEvidence__SWIG_1(self, argc, argv);
  }
check_5:
  
  if (argc == 3) {
    int _v = 0;
    {
      int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_6;
    return _wrap_ImportanceSampling_addEvidence__SWIG_3(self, argc, argv);
  }
check_6:
  
  if (argc == 3) {
    PyObject *retobj = _wrap_ImportanceSampling_addEvidence__SWIG_5(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ImportanceSampling_addEvidence'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::ImportanceSampling< double >::addEvidence(gum::NodeId const,gum::Idx const)\n"
    "    gum::ImportanceSampling< double >::addEvidence(std::string const &,gum::Idx const)\n"
    "    gum::ImportanceSampling< double >::addEvidence(gum::NodeId const,std::string const &)\n"
    "    gum::ImportanceSampling< double >::addEvidence(std::string const &,std::string const &)\n"
    "    gum::ImportanceSampling< double >::addEvidence(gum::NodeId const,std::vector< double,std::allocator< double > > const &)\n"
    "    gum::ImportanceSampling< double >::addEvidence(std::string const &,std::vector< double,std::allocator< double > > const &)\n"
    "    gum::ImportanceSampling< double >::addEvidence(gum::Tensor< double > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ImportanceSampling_chgEvidence__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::ImportanceSampling< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  gum::Idx arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ImportanceSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImportanceSampling_chgEvidence" "', argument " "1"" of type '" "gum::ImportanceSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::ImportanceSampling< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImportanceSampling_chgEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ImportanceSampling_chgEvidence" "', argument " "3"" of type '" "gum::Idx""'");
  } 
  arg3 = static_cast< gum::Idx >(val3);
  {
    try {
      gum_ImportanceSampling_Sl_double_Sg__chgEvidence__SWIG_0(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImportanceSampling_chgEvidence__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::ImportanceSampling< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  gum::Idx arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  size_t val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ImportanceSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImportanceSampling_chgEvidence" "', argument " "1"" of type '" "gum::ImportanceSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::ImportanceSampling< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImportanceSampling_chgEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "ImportanceSampling_chgEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ImportanceSampling_chgEvidence" "', argument " "3"" of type '" "gum::Idx""'");
  } 
  arg3 = static_cast< gum::Idx >(val3);
  {
    try {
      gum_ImportanceSampling_Sl_double_Sg__chgEvidence__SWIG_1(arg1,(std::string const &)*arg2,SWIG_STD_MOVE(arg3));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImportanceSampling_chgEvidence__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::ImportanceSampling< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ImportanceSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImportanceSampling_chgEvidence" "', argument " "1"" of type '" "gum::ImportanceSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::ImportanceSampling< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImportanceSampling_chgEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ImportanceSampling_chgEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "ImportanceSampling_chgEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      gum_ImportanceSampling_Sl_double_Sg__chgEvidence__SWIG_2(arg1,SWIG_STD_MOVE(arg2),(std::string const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImportanceSampling_chgEvidence__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::ImportanceSampling< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ImportanceSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImportanceSampling_chgEvidence" "', argument " "1"" of type '" "gum::ImportanceSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::ImportanceSampling< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImportanceSampling_chgEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "ImportanceSampling_chgEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ImportanceSampling_chgEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "ImportanceSampling_chgEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      gum_ImportanceSampling_Sl_double_Sg__chgEvidence__SWIG_3(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImportanceSampling_chgEvidence__SWIG_4(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::ImportanceSampling< double > *arg1 = 0 ;
  gum::Tensor< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ImportanceSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImportanceSampling_chgEvidence" "', argument " "1"" of type '" "gum::ImportanceSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::ImportanceSampling< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_gum__TensorT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImportanceSampling_chgEvidence" "', argument " "2"" of type '" "gum::Tensor< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "ImportanceSampling_chgEvidence" "', argument " "2"" of type '" "gum::Tensor< double > const &""'"); 
  }
  arg2 = reinterpret_cast< gum::Tensor< double > * >(argp2);
  {
    try {
      gum_ImportanceSampling_Sl_double_Sg__chgEvidence__SWIG_4(arg1,(gum::Tensor< double > const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImportanceSampling_chgEvidence__SWIG_5(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::ImportanceSampling< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ImportanceSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImportanceSampling_chgEvidence" "', argument " "1"" of type '" "gum::ImportanceSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::ImportanceSampling< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImportanceSampling_chgEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ImportanceSampling_chgEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "ImportanceSampling_chgEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      gum_ImportanceSampling_Sl_double_Sg__chgEvidence__SWIG_5(arg1,SWIG_STD_MOVE(arg2),(std::vector< double,std::allocator< double > > const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImportanceSampling_chgEvidence__SWIG_6(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::ImportanceSampling< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ImportanceSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImportanceSampling_chgEvidence" "', argument " "1"" of type '" "gum::ImportanceSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::ImportanceSampling< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImportanceSampling_chgEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "ImportanceSampling_chgEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ImportanceSampling_chgEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "ImportanceSampling_chgEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      gum_ImportanceSampling_Sl_double_Sg__chgEvidence__SWIG_6(arg1,(std::string const &)*arg2,(std::vector< double,std::allocator< double > > const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImportanceSampling_chgEvidence(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ImportanceSampling_chgEvidence", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    PyObject *retobj = _wrap_ImportanceSampling_chgEvidence__SWIG_4(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_2;
    {
      {
        int res = SWIG_AsVal_size_t(argv[2], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_2;
    return _wrap_ImportanceSampling_chgEvidence__SWIG_0(self, argc, argv);
  }
check_2:
  
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_3;
    {
      int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_3;
    return _wrap_ImportanceSampling_chgEvidence__SWIG_2(self, argc, argv);
  }
check_3:
  
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_4;
    {
      int res = swig::asptr(argv[2], (std::vector< double,std::allocator< double > >**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_4;
    return _wrap_ImportanceSampling_chgEvidence__SWIG_5(self, argc, argv);
  }
check_4:
  
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[2], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_5;
    return _wrap_ImportanceSampling_chgEvidence__SWIG_1(self, argc, argv);
  }
check_5:
  
  if (argc == 3) {
    int _v = 0;
    {
      int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_6;
    return _wrap_ImportanceSampling_chgEvidence__SWIG_3(self, argc, argv);
  }
check_6:
  
  if (argc == 3) {
    PyObject *retobj = _wrap_ImportanceSampling_chgEvidence__SWIG_6(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ImportanceSampling_chgEvidence'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::ImportanceSampling< double >::chgEvidence(gum::NodeId const,gum::Idx const)\n"
    "    gum::ImportanceSampling< double >::chgEvidence(std::string const &,gum::Idx const)\n"
    "    gum::ImportanceSampling< double >::chgEvidence(gum::NodeId const,std::string const &)\n"
    "    gum::ImportanceSampling< double >::chgEvidence(std::string const &,std::string const &)\n"
    "    gum::ImportanceSampling< double >::chgEvidence(gum::Tensor< double > const &)\n"
    "    gum::ImportanceSampling< double >::chgEvidence(gum::NodeId const,std::vector< double,std::allocator< double > > const &)\n"
    "    gum::ImportanceSampling< double >::chgEvidence(std::string const &,std::vector< double,std::allocator< double > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ImportanceSampling_hasEvidence__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::ImportanceSampling< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  bool result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ImportanceSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImportanceSampling_hasEvidence" "', argument " "1"" of type '" "gum::ImportanceSampling< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::ImportanceSampling< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImportanceSampling_hasEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (bool)gum_ImportanceSampling_Sl_double_Sg__hasEvidence__SWIG_0((gum::ImportanceSampling< double > const *)arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImportanceSampling_hasEvidence__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::ImportanceSampling< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  bool result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ImportanceSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImportanceSampling_hasEvidence" "', argument " "1"" of type '" "gum::ImportanceSampling< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::ImportanceSampling< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImportanceSampling_hasEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "ImportanceSampling_hasEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)gum_ImportanceSampling_Sl_double_Sg__hasEvidence__SWIG_1((gum::ImportanceSampling< double > const *)arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImportanceSampling_hasEvidence(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ImportanceSampling_hasEvidence", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_ImportanceSampling_hasEvidence__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_ImportanceSampling_hasEvidence__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ImportanceSampling_hasEvidence'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::ImportanceSampling< double >::hasEvidence(gum::NodeId const) const\n"
    "    gum::ImportanceSampling< double >::hasEvidence(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ImportanceSampling_eraseAllEvidence(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::ImportanceSampling< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ImportanceSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImportanceSampling_eraseAllEvidence" "', argument " "1"" of type '" "gum::ImportanceSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::ImportanceSampling< double > * >(argp1);
  {
    try {
      gum_ImportanceSampling_Sl_double_Sg__eraseAllEvidence(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImportanceSampling_eraseEvidence__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::ImportanceSampling< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ImportanceSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImportanceSampling_eraseEvidence" "', argument " "1"" of type '" "gum::ImportanceSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::ImportanceSampling< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImportanceSampling_eraseEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      gum_ImportanceSampling_Sl_double_Sg__eraseEvidence__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImportanceSampling_eraseEvidence__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::ImportanceSampling< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ImportanceSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImportanceSampling_eraseEvidence" "', argument " "1"" of type '" "gum::ImportanceSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::ImportanceSampling< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImportanceSampling_eraseEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "ImportanceSampling_eraseEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      gum_ImportanceSampling_Sl_double_Sg__eraseEvidence__SWIG_1(arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImportanceSampling_eraseEvidence(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ImportanceSampling_eraseEvidence", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_ImportanceSampling_eraseEvidence__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_ImportanceSampling_eraseEvidence__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ImportanceSampling_eraseEvidence'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::ImportanceSampling< double >::eraseEvidence(gum::NodeId const)\n"
    "    gum::ImportanceSampling< double >::eraseEvidence(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ImportanceSampling_hasSoftEvidence__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::ImportanceSampling< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  bool result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ImportanceSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImportanceSampling_hasSoftEvidence" "', argument " "1"" of type '" "gum::ImportanceSampling< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::ImportanceSampling< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImportanceSampling_hasSoftEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (bool)gum_ImportanceSampling_Sl_double_Sg__hasSoftEvidence__SWIG_0((gum::ImportanceSampling< double > const *)arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImportanceSampling_hasHardEvidence(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::ImportanceSampling< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ImportanceSampling_hasHardEvidence", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ImportanceSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImportanceSampling_hasHardEvidence" "', argument " "1"" of type '" "gum::ImportanceSampling< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::ImportanceSampling< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImportanceSampling_hasHardEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "ImportanceSampling_hasHardEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)gum_ImportanceSampling_Sl_double_Sg__hasHardEvidence((gum::ImportanceSampling< double > const *)arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImportanceSampling_hasSoftEvidence__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::ImportanceSampling< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  bool result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ImportanceSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImportanceSampling_hasSoftEvidence" "', argument " "1"" of type '" "gum::ImportanceSampling< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::ImportanceSampling< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImportanceSampling_hasSoftEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "ImportanceSampling_hasSoftEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)gum_ImportanceSampling_Sl_double_Sg__hasSoftEvidence__SWIG_1((gum::ImportanceSampling< double > const *)arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImportanceSampling_hasSoftEvidence(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ImportanceSampling_hasSoftEvidence", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_ImportanceSampling_hasSoftEvidence__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_ImportanceSampling_hasSoftEvidence__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ImportanceSampling_hasSoftEvidence'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::ImportanceSampling< double >::hasSoftEvidence(gum::NodeId const) const\n"
    "    gum::ImportanceSampling< double >::hasSoftEvidence(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ImportanceSampling_nbrEvidence(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::ImportanceSampling< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::Size result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ImportanceSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImportanceSampling_nbrEvidence" "', argument " "1"" of type '" "gum::ImportanceSampling< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::ImportanceSampling< double > * >(argp1);
  {
    try {
      result = gum_ImportanceSampling_Sl_double_Sg__nbrEvidence((gum::ImportanceSampling< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImportanceSampling_nbrHardEvidence(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::ImportanceSampling< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::Size result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ImportanceSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImportanceSampling_nbrHardEvidence" "', argument " "1"" of type '" "gum::ImportanceSampling< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::ImportanceSampling< double > * >(argp1);
  {
    try {
      result = gum_ImportanceSampling_Sl_double_Sg__nbrHardEvidence((gum::ImportanceSampling< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImportanceSampling_nbrSoftEvidence(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::ImportanceSampling< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::Size result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ImportanceSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImportanceSampling_nbrSoftEvidence" "', argument " "1"" of type '" "gum::ImportanceSampling< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::ImportanceSampling< double > * >(argp1);
  {
    try {
      result = gum_ImportanceSampling_Sl_double_Sg__nbrSoftEvidence((gum::ImportanceSampling< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImportanceSampling_eraseAllTargets(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::ImportanceSampling< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ImportanceSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImportanceSampling_eraseAllTargets" "', argument " "1"" of type '" "gum::ImportanceSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::ImportanceSampling< double > * >(argp1);
  {
    try {
      gum_ImportanceSampling_Sl_double_Sg__eraseAllTargets(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImportanceSampling_addAllTargets(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::ImportanceSampling< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ImportanceSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImportanceSampling_addAllTargets" "', argument " "1"" of type '" "gum::ImportanceSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::ImportanceSampling< double > * >(argp1);
  {
    try {
      gum_ImportanceSampling_Sl_double_Sg__addAllTargets(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImportanceSampling_addTarget__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::ImportanceSampling< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ImportanceSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImportanceSampling_addTarget" "', argument " "1"" of type '" "gum::ImportanceSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::ImportanceSampling< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImportanceSampling_addTarget" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      gum_ImportanceSampling_Sl_double_Sg__addTarget__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImportanceSampling_addTarget__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::ImportanceSampling< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ImportanceSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImportanceSampling_addTarget" "', argument " "1"" of type '" "gum::ImportanceSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::ImportanceSampling< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImportanceSampling_addTarget" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "ImportanceSampling_addTarget" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      gum_ImportanceSampling_Sl_double_Sg__addTarget__SWIG_1(arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImportanceSampling_addTarget(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ImportanceSampling_addTarget", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_ImportanceSampling_addTarget__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_ImportanceSampling_addTarget__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ImportanceSampling_addTarget'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::ImportanceSampling< double >::addTarget(gum::NodeId const)\n"
    "    gum::ImportanceSampling< double >::addTarget(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ImportanceSampling_eraseTarget__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::ImportanceSampling< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ImportanceSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImportanceSampling_eraseTarget" "', argument " "1"" of type '" "gum::ImportanceSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::ImportanceSampling< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImportanceSampling_eraseTarget" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      gum_ImportanceSampling_Sl_double_Sg__eraseTarget__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImportanceSampling_eraseTarget__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::ImportanceSampling< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ImportanceSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImportanceSampling_eraseTarget" "', argument " "1"" of type '" "gum::ImportanceSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::ImportanceSampling< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImportanceSampling_eraseTarget" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "ImportanceSampling_eraseTarget" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      gum_ImportanceSampling_Sl_double_Sg__eraseTarget__SWIG_1(arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImportanceSampling_eraseTarget(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ImportanceSampling_eraseTarget", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_ImportanceSampling_eraseTarget__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_ImportanceSampling_eraseTarget__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ImportanceSampling_eraseTarget'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::ImportanceSampling< double >::eraseTarget(gum::NodeId const)\n"
    "    gum::ImportanceSampling< double >::eraseTarget(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ImportanceSampling_isTarget__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::ImportanceSampling< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  bool result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ImportanceSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImportanceSampling_isTarget" "', argument " "1"" of type '" "gum::ImportanceSampling< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::ImportanceSampling< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImportanceSampling_isTarget" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (bool)gum_ImportanceSampling_Sl_double_Sg__isTarget__SWIG_0((gum::ImportanceSampling< double > const *)arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImportanceSampling_isTarget__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::ImportanceSampling< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  bool result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ImportanceSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImportanceSampling_isTarget" "', argument " "1"" of type '" "gum::ImportanceSampling< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::ImportanceSampling< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImportanceSampling_isTarget" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "ImportanceSampling_isTarget" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)gum_ImportanceSampling_Sl_double_Sg__isTarget__SWIG_1((gum::ImportanceSampling< double > const *)arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImportanceSampling_isTarget(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ImportanceSampling_isTarget", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_ImportanceSampling_isTarget__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_ImportanceSampling_isTarget__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ImportanceSampling_isTarget'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::ImportanceSampling< double >::isTarget(gum::NodeId const) const\n"
    "    gum::ImportanceSampling< double >::isTarget(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ImportanceSampling_nbrTargets(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::ImportanceSampling< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::Size result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ImportanceSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImportanceSampling_nbrTargets" "', argument " "1"" of type '" "gum::ImportanceSampling< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::ImportanceSampling< double > * >(argp1);
  {
    try {
      result = gum_ImportanceSampling_Sl_double_Sg__nbrTargets((gum::ImportanceSampling< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImportanceSampling_H__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::ImportanceSampling< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  double result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ImportanceSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImportanceSampling_H" "', argument " "1"" of type '" "gum::ImportanceSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::ImportanceSampling< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImportanceSampling_H" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (double)gum_ImportanceSampling_Sl_double_Sg__H__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImportanceSampling_H__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::ImportanceSampling< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  double result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ImportanceSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImportanceSampling_H" "', argument " "1"" of type '" "gum::ImportanceSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::ImportanceSampling< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImportanceSampling_H" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "ImportanceSampling_H" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (double)gum_ImportanceSampling_Sl_double_Sg__H__SWIG_1(arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImportanceSampling_H(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ImportanceSampling_H", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_ImportanceSampling_H__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_ImportanceSampling_H__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ImportanceSampling_H'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::ImportanceSampling< double >::H(gum::NodeId const)\n"
    "    gum::ImportanceSampling< double >::H(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ImportanceSampling_evidenceImpact__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::ImportanceSampling< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  gum::NodeSet *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  gum::Tensor< double > result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ImportanceSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImportanceSampling_evidenceImpact" "', argument " "1"" of type '" "gum::ImportanceSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::ImportanceSampling< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImportanceSampling_evidenceImpact" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_gum__SetT_std__size_t_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ImportanceSampling_evidenceImpact" "', argument " "3"" of type '" "gum::NodeSet const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "ImportanceSampling_evidenceImpact" "', argument " "3"" of type '" "gum::NodeSet const &""'"); 
  }
  arg3 = reinterpret_cast< gum::NodeSet * >(argp3);
  {
    try {
      result = gum_ImportanceSampling_Sl_double_Sg__evidenceImpact__SWIG_0(arg1,SWIG_STD_MOVE(arg2),(gum::Set< std::size_t > const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::Tensor< double >(result)), SWIGTYPE_p_gum__TensorT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImportanceSampling_evidenceImpact__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::ImportanceSampling< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  gum::Tensor< double > result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ImportanceSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImportanceSampling_evidenceImpact" "', argument " "1"" of type '" "gum::ImportanceSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::ImportanceSampling< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImportanceSampling_evidenceImpact" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "ImportanceSampling_evidenceImpact" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ImportanceSampling_evidenceImpact" "', argument " "3"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "ImportanceSampling_evidenceImpact" "', argument " "3"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      result = gum_ImportanceSampling_Sl_double_Sg__evidenceImpact__SWIG_1(arg1,(std::string const &)*arg2,(std::vector< std::string,std::allocator< std::string > > const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::Tensor< double >(result)), SWIGTYPE_p_gum__TensorT_double_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImportanceSampling_BN(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::ImportanceSampling< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::IBayesNet< double > *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ImportanceSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImportanceSampling_BN" "', argument " "1"" of type '" "gum::ImportanceSampling< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::ImportanceSampling< double > * >(argp1);
  {
    try {
      result = (gum::IBayesNet< double > *) &gum_ImportanceSampling_Sl_double_Sg__BN((gum::ImportanceSampling< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__IBayesNetT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImportanceSampling_currentPosterior__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::ImportanceSampling< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  gum::Tensor< double > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ImportanceSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImportanceSampling_currentPosterior" "', argument " "1"" of type '" "gum::ImportanceSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::ImportanceSampling< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ImportanceSampling_currentPosterior" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (gum::Tensor< double > *) &gum_ImportanceSampling_Sl_double_Sg__currentPosterior__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__TensorT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImportanceSampling_currentPosterior__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::ImportanceSampling< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  gum::Tensor< double > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ImportanceSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImportanceSampling_currentPosterior" "', argument " "1"" of type '" "gum::ImportanceSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::ImportanceSampling< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImportanceSampling_currentPosterior" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "ImportanceSampling_currentPosterior" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (gum::Tensor< double > *) &gum_ImportanceSampling_Sl_double_Sg__currentPosterior__SWIG_1(arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__TensorT_double_t, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImportanceSampling_currentPosterior(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ImportanceSampling_currentPosterior", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_ImportanceSampling_currentPosterior__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_ImportanceSampling_currentPosterior__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ImportanceSampling_currentPosterior'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::ImportanceSampling< double >::currentPosterior(gum::NodeId const)\n"
    "    gum::ImportanceSampling< double >::currentPosterior(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ImportanceSampling_setEvidence(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::ImportanceSampling< double > *arg1 = 0 ;
  PyObject *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ImportanceSampling_setEvidence", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ImportanceSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImportanceSampling_setEvidence" "', argument " "1"" of type '" "gum::ImportanceSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::ImportanceSampling< double > * >(argp1);
  arg2 = swig_obj[1];
  {
    try {
      gum_ImportanceSampling_Sl_double_Sg__setEvidence(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImportanceSampling_updateEvidence(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::ImportanceSampling< double > *arg1 = 0 ;
  PyObject *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ImportanceSampling_updateEvidence", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ImportanceSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImportanceSampling_updateEvidence" "', argument " "1"" of type '" "gum::ImportanceSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::ImportanceSampling< double > * >(argp1);
  arg2 = swig_obj[1];
  {
    try {
      gum_ImportanceSampling_Sl_double_Sg__updateEvidence(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImportanceSampling_setTargets(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::ImportanceSampling< double > *arg1 = 0 ;
  PyObject *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ImportanceSampling_setTargets", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ImportanceSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImportanceSampling_setTargets" "', argument " "1"" of type '" "gum::ImportanceSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::ImportanceSampling< double > * >(argp1);
  arg2 = swig_obj[1];
  {
    try {
      gum_ImportanceSampling_Sl_double_Sg__setTargets(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImportanceSampling_hardEvidenceNodes(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::ImportanceSampling< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ImportanceSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImportanceSampling_hardEvidenceNodes" "', argument " "1"" of type '" "gum::ImportanceSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::ImportanceSampling< double > * >(argp1);
  {
    try {
      result = (PyObject *)gum_ImportanceSampling_Sl_double_Sg__hardEvidenceNodes(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImportanceSampling_softEvidenceNodes(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::ImportanceSampling< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ImportanceSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImportanceSampling_softEvidenceNodes" "', argument " "1"" of type '" "gum::ImportanceSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::ImportanceSampling< double > * >(argp1);
  {
    try {
      result = (PyObject *)gum_ImportanceSampling_Sl_double_Sg__softEvidenceNodes(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImportanceSampling_targets(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::ImportanceSampling< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ImportanceSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImportanceSampling_targets" "', argument " "1"" of type '" "gum::ImportanceSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::ImportanceSampling< double > * >(argp1);
  {
    try {
      result = (PyObject *)gum_ImportanceSampling_Sl_double_Sg__targets(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImportanceSampling_evidenceImpact__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::ImportanceSampling< double > *arg1 = 0 ;
  PyObject *arg2 = 0 ;
  PyObject *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gum::Tensor< double > result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ImportanceSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImportanceSampling_evidenceImpact" "', argument " "1"" of type '" "gum::ImportanceSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::ImportanceSampling< double > * >(argp1);
  arg2 = swig_obj[1];
  arg3 = swig_obj[2];
  {
    try {
      result = gum_ImportanceSampling_Sl_double_Sg__evidenceImpact__SWIG_2(arg1,arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::Tensor< double >(result)), SWIGTYPE_p_gum__TensorT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImportanceSampling_evidenceImpact(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ImportanceSampling_evidenceImpact", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    {
      int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_gum__SetT_std__size_t_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_1;
    return _wrap_ImportanceSampling_evidenceImpact__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 3) {
    int _v = 0;
    {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_2;
    {
      int res = swig::asptr(argv[2], (std::vector< std::string,std::allocator< std::string > >**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_2;
    return _wrap_ImportanceSampling_evidenceImpact__SWIG_1(self, argc, argv);
  }
check_2:
  
  if (argc == 3) {
    PyObject *retobj = _wrap_ImportanceSampling_evidenceImpact__SWIG_2(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ImportanceSampling_evidenceImpact'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::ImportanceSampling< double >::evidenceImpact(gum::NodeId,gum::NodeSet const &)\n"
    "    gum::ImportanceSampling< double >::evidenceImpact(std::string const &,std::vector< std::string,std::allocator< std::string > > const &)\n"
    "    gum::ImportanceSampling< double >::evidenceImpact(PyObject *,PyObject *)\n");
  return 0;
}


SWIGINTERN PyObject *ImportanceSampling_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj = NULL;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gum__ImportanceSamplingT_double_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *ImportanceSampling_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_WeightedSampling(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::IBayesNet< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::WeightedSampling< double > *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__IBayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_WeightedSampling" "', argument " "1"" of type '" "gum::IBayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::IBayesNet< double > * >(argp1);
  {
    try {
      result = (gum::WeightedSampling< double > *)new gum::WeightedSampling< double >((gum::IBayesNet< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__WeightedSamplingT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_WeightedSampling(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::WeightedSampling< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__WeightedSamplingT_double_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_WeightedSampling" "', argument " "1"" of type '" "gum::WeightedSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::WeightedSampling< double > * >(argp1);
  {
    try {
      delete arg1;
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeightedSampling_setVerbosity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::WeightedSampling< double > *arg1 = 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "WeightedSampling_setVerbosity", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__WeightedSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeightedSampling_setVerbosity" "', argument " "1"" of type '" "gum::WeightedSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::WeightedSampling< double > * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WeightedSampling_setVerbosity" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      gum_WeightedSampling_Sl_double_Sg__setVerbosity(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeightedSampling_setEpsilon(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::WeightedSampling< double > *arg1 = 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "WeightedSampling_setEpsilon", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__WeightedSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeightedSampling_setEpsilon" "', argument " "1"" of type '" "gum::WeightedSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::WeightedSampling< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WeightedSampling_setEpsilon" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      gum_WeightedSampling_Sl_double_Sg__setEpsilon(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeightedSampling_setMinEpsilonRate(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::WeightedSampling< double > *arg1 = 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "WeightedSampling_setMinEpsilonRate", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__WeightedSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeightedSampling_setMinEpsilonRate" "', argument " "1"" of type '" "gum::WeightedSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::WeightedSampling< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WeightedSampling_setMinEpsilonRate" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      gum_WeightedSampling_Sl_double_Sg__setMinEpsilonRate(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeightedSampling_setMaxIter(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::WeightedSampling< double > *arg1 = 0 ;
  gum::Size arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "WeightedSampling_setMaxIter", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__WeightedSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeightedSampling_setMaxIter" "', argument " "1"" of type '" "gum::WeightedSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::WeightedSampling< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WeightedSampling_setMaxIter" "', argument " "2"" of type '" "gum::Size""'");
  } 
  arg2 = static_cast< gum::Size >(val2);
  {
    try {
      gum_WeightedSampling_Sl_double_Sg__setMaxIter(arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeightedSampling_setMaxTime(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::WeightedSampling< double > *arg1 = 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "WeightedSampling_setMaxTime", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__WeightedSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeightedSampling_setMaxTime" "', argument " "1"" of type '" "gum::WeightedSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::WeightedSampling< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WeightedSampling_setMaxTime" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      gum_WeightedSampling_Sl_double_Sg__setMaxTime(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeightedSampling_setPeriodSize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::WeightedSampling< double > *arg1 = 0 ;
  gum::Size arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "WeightedSampling_setPeriodSize", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__WeightedSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeightedSampling_setPeriodSize" "', argument " "1"" of type '" "gum::WeightedSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::WeightedSampling< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WeightedSampling_setPeriodSize" "', argument " "2"" of type '" "gum::Size""'");
  } 
  arg2 = static_cast< gum::Size >(val2);
  {
    try {
      gum_WeightedSampling_Sl_double_Sg__setPeriodSize(arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeightedSampling_verbosity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::WeightedSampling< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__WeightedSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeightedSampling_verbosity" "', argument " "1"" of type '" "gum::WeightedSampling< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::WeightedSampling< double > * >(argp1);
  {
    try {
      result = (bool)gum_WeightedSampling_Sl_double_Sg__verbosity((gum::WeightedSampling< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeightedSampling_epsilon(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::WeightedSampling< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__WeightedSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeightedSampling_epsilon" "', argument " "1"" of type '" "gum::WeightedSampling< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::WeightedSampling< double > * >(argp1);
  {
    try {
      result = (double)gum_WeightedSampling_Sl_double_Sg__epsilon((gum::WeightedSampling< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeightedSampling_minEpsilonRate(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::WeightedSampling< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__WeightedSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeightedSampling_minEpsilonRate" "', argument " "1"" of type '" "gum::WeightedSampling< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::WeightedSampling< double > * >(argp1);
  {
    try {
      result = (double)gum_WeightedSampling_Sl_double_Sg__minEpsilonRate((gum::WeightedSampling< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeightedSampling_maxIter(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::WeightedSampling< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::Size result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__WeightedSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeightedSampling_maxIter" "', argument " "1"" of type '" "gum::WeightedSampling< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::WeightedSampling< double > * >(argp1);
  {
    try {
      result = gum_WeightedSampling_Sl_double_Sg__maxIter((gum::WeightedSampling< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeightedSampling_maxTime(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::WeightedSampling< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__WeightedSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeightedSampling_maxTime" "', argument " "1"" of type '" "gum::WeightedSampling< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::WeightedSampling< double > * >(argp1);
  {
    try {
      result = (double)gum_WeightedSampling_Sl_double_Sg__maxTime((gum::WeightedSampling< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeightedSampling_periodSize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::WeightedSampling< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::Size result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__WeightedSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeightedSampling_periodSize" "', argument " "1"" of type '" "gum::WeightedSampling< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::WeightedSampling< double > * >(argp1);
  {
    try {
      result = gum_WeightedSampling_Sl_double_Sg__periodSize((gum::WeightedSampling< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeightedSampling_nbrIterations(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::WeightedSampling< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::Size result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__WeightedSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeightedSampling_nbrIterations" "', argument " "1"" of type '" "gum::WeightedSampling< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::WeightedSampling< double > * >(argp1);
  {
    try {
      result = gum_WeightedSampling_Sl_double_Sg__nbrIterations((gum::WeightedSampling< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeightedSampling_currentTime(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::WeightedSampling< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__WeightedSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeightedSampling_currentTime" "', argument " "1"" of type '" "gum::WeightedSampling< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::WeightedSampling< double > * >(argp1);
  {
    try {
      result = (double)gum_WeightedSampling_Sl_double_Sg__currentTime((gum::WeightedSampling< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeightedSampling_messageApproximationScheme(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::WeightedSampling< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__WeightedSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeightedSampling_messageApproximationScheme" "', argument " "1"" of type '" "gum::WeightedSampling< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::WeightedSampling< double > * >(argp1);
  {
    try {
      result = gum_WeightedSampling_Sl_double_Sg__messageApproximationScheme((gum::WeightedSampling< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeightedSampling_history(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::WeightedSampling< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< double,std::allocator< double > > *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__WeightedSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeightedSampling_history" "', argument " "1"" of type '" "gum::WeightedSampling< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::WeightedSampling< double > * >(argp1);
  {
    try {
      result = (std::vector< double,std::allocator< double > > *) &gum_WeightedSampling_Sl_double_Sg__history((gum::WeightedSampling< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< double,std::allocator< double > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeightedSampling__asIApproximationSchemeConfiguration(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::WeightedSampling< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::IApproximationSchemeConfiguration *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__WeightedSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeightedSampling__asIApproximationSchemeConfiguration" "', argument " "1"" of type '" "gum::WeightedSampling< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::WeightedSampling< double > * >(argp1);
  {
    try {
      result = (gum::IApproximationSchemeConfiguration *) &gum_WeightedSampling_Sl_double_Sg___asIApproximationSchemeConfiguration((gum::WeightedSampling< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__IApproximationSchemeConfiguration, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeightedSampling_makeInference(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::WeightedSampling< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__WeightedSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeightedSampling_makeInference" "', argument " "1"" of type '" "gum::WeightedSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::WeightedSampling< double > * >(argp1);
  {
    try {
      gum_WeightedSampling_Sl_double_Sg__makeInference(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeightedSampling_posterior__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::WeightedSampling< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  gum::Tensor< double > result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__WeightedSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeightedSampling_posterior" "', argument " "1"" of type '" "gum::WeightedSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::WeightedSampling< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WeightedSampling_posterior" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = gum_WeightedSampling_Sl_double_Sg__posterior__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::Tensor< double >(result)), SWIGTYPE_p_gum__TensorT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeightedSampling_posterior__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::WeightedSampling< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  gum::Tensor< double > result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__WeightedSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeightedSampling_posterior" "', argument " "1"" of type '" "gum::WeightedSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::WeightedSampling< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WeightedSampling_posterior" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "WeightedSampling_posterior" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = gum_WeightedSampling_Sl_double_Sg__posterior__SWIG_1(arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::Tensor< double >(result)), SWIGTYPE_p_gum__TensorT_double_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeightedSampling_posterior(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "WeightedSampling_posterior", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_WeightedSampling_posterior__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_WeightedSampling_posterior__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'WeightedSampling_posterior'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::WeightedSampling< double >::posterior(gum::NodeId const)\n"
    "    gum::WeightedSampling< double >::posterior(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_WeightedSampling_addEvidence__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::WeightedSampling< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  gum::Idx arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__WeightedSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeightedSampling_addEvidence" "', argument " "1"" of type '" "gum::WeightedSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::WeightedSampling< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WeightedSampling_addEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "WeightedSampling_addEvidence" "', argument " "3"" of type '" "gum::Idx""'");
  } 
  arg3 = static_cast< gum::Idx >(val3);
  {
    try {
      gum_WeightedSampling_Sl_double_Sg__addEvidence__SWIG_0(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeightedSampling_addEvidence__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::WeightedSampling< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  gum::Idx arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  size_t val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__WeightedSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeightedSampling_addEvidence" "', argument " "1"" of type '" "gum::WeightedSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::WeightedSampling< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WeightedSampling_addEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "WeightedSampling_addEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "WeightedSampling_addEvidence" "', argument " "3"" of type '" "gum::Idx""'");
  } 
  arg3 = static_cast< gum::Idx >(val3);
  {
    try {
      gum_WeightedSampling_Sl_double_Sg__addEvidence__SWIG_1(arg1,(std::string const &)*arg2,SWIG_STD_MOVE(arg3));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeightedSampling_addEvidence__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::WeightedSampling< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__WeightedSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeightedSampling_addEvidence" "', argument " "1"" of type '" "gum::WeightedSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::WeightedSampling< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WeightedSampling_addEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "WeightedSampling_addEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "WeightedSampling_addEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      gum_WeightedSampling_Sl_double_Sg__addEvidence__SWIG_2(arg1,SWIG_STD_MOVE(arg2),(std::string const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeightedSampling_addEvidence__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::WeightedSampling< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__WeightedSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeightedSampling_addEvidence" "', argument " "1"" of type '" "gum::WeightedSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::WeightedSampling< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WeightedSampling_addEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "WeightedSampling_addEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "WeightedSampling_addEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "WeightedSampling_addEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      gum_WeightedSampling_Sl_double_Sg__addEvidence__SWIG_3(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeightedSampling_addEvidence__SWIG_4(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::WeightedSampling< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__WeightedSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeightedSampling_addEvidence" "', argument " "1"" of type '" "gum::WeightedSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::WeightedSampling< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WeightedSampling_addEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "WeightedSampling_addEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "WeightedSampling_addEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      gum_WeightedSampling_Sl_double_Sg__addEvidence__SWIG_4(arg1,SWIG_STD_MOVE(arg2),(std::vector< double,std::allocator< double > > const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeightedSampling_addEvidence__SWIG_5(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::WeightedSampling< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__WeightedSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeightedSampling_addEvidence" "', argument " "1"" of type '" "gum::WeightedSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::WeightedSampling< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WeightedSampling_addEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "WeightedSampling_addEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "WeightedSampling_addEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "WeightedSampling_addEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      gum_WeightedSampling_Sl_double_Sg__addEvidence__SWIG_5(arg1,(std::string const &)*arg2,(std::vector< double,std::allocator< double > > const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeightedSampling_addEvidence__SWIG_6(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::WeightedSampling< double > *arg1 = 0 ;
  gum::Tensor< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__WeightedSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeightedSampling_addEvidence" "', argument " "1"" of type '" "gum::WeightedSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::WeightedSampling< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_gum__TensorT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WeightedSampling_addEvidence" "', argument " "2"" of type '" "gum::Tensor< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "WeightedSampling_addEvidence" "', argument " "2"" of type '" "gum::Tensor< double > const &""'"); 
  }
  arg2 = reinterpret_cast< gum::Tensor< double > * >(argp2);
  {
    try {
      gum_WeightedSampling_Sl_double_Sg__addEvidence__SWIG_6(arg1,(gum::Tensor< double > const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeightedSampling_addEvidence(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "WeightedSampling_addEvidence", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    PyObject *retobj = _wrap_WeightedSampling_addEvidence__SWIG_6(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_2;
    {
      {
        int res = SWIG_AsVal_size_t(argv[2], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_2;
    return _wrap_WeightedSampling_addEvidence__SWIG_0(self, argc, argv);
  }
check_2:
  
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_3;
    {
      int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_3;
    return _wrap_WeightedSampling_addEvidence__SWIG_2(self, argc, argv);
  }
check_3:
  
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_4;
    {
      int res = swig::asptr(argv[2], (std::vector< double,std::allocator< double > >**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_4;
    return _wrap_WeightedSampling_addEvidence__SWIG_4(self, argc, argv);
  }
check_4:
  
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[2], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_5;
    return _wrap_WeightedSampling_addEvidence__SWIG_1(self, argc, argv);
  }
check_5:
  
  if (argc == 3) {
    int _v = 0;
    {
      int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_6;
    return _wrap_WeightedSampling_addEvidence__SWIG_3(self, argc, argv);
  }
check_6:
  
  if (argc == 3) {
    PyObject *retobj = _wrap_WeightedSampling_addEvidence__SWIG_5(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'WeightedSampling_addEvidence'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::WeightedSampling< double >::addEvidence(gum::NodeId const,gum::Idx const)\n"
    "    gum::WeightedSampling< double >::addEvidence(std::string const &,gum::Idx const)\n"
    "    gum::WeightedSampling< double >::addEvidence(gum::NodeId const,std::string const &)\n"
    "    gum::WeightedSampling< double >::addEvidence(std::string const &,std::string const &)\n"
    "    gum::WeightedSampling< double >::addEvidence(gum::NodeId const,std::vector< double,std::allocator< double > > const &)\n"
    "    gum::WeightedSampling< double >::addEvidence(std::string const &,std::vector< double,std::allocator< double > > const &)\n"
    "    gum::WeightedSampling< double >::addEvidence(gum::Tensor< double > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_WeightedSampling_chgEvidence__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::WeightedSampling< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  gum::Idx arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__WeightedSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeightedSampling_chgEvidence" "', argument " "1"" of type '" "gum::WeightedSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::WeightedSampling< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WeightedSampling_chgEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "WeightedSampling_chgEvidence" "', argument " "3"" of type '" "gum::Idx""'");
  } 
  arg3 = static_cast< gum::Idx >(val3);
  {
    try {
      gum_WeightedSampling_Sl_double_Sg__chgEvidence__SWIG_0(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeightedSampling_chgEvidence__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::WeightedSampling< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  gum::Idx arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  size_t val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__WeightedSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeightedSampling_chgEvidence" "', argument " "1"" of type '" "gum::WeightedSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::WeightedSampling< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WeightedSampling_chgEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "WeightedSampling_chgEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "WeightedSampling_chgEvidence" "', argument " "3"" of type '" "gum::Idx""'");
  } 
  arg3 = static_cast< gum::Idx >(val3);
  {
    try {
      gum_WeightedSampling_Sl_double_Sg__chgEvidence__SWIG_1(arg1,(std::string const &)*arg2,SWIG_STD_MOVE(arg3));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeightedSampling_chgEvidence__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::WeightedSampling< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__WeightedSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeightedSampling_chgEvidence" "', argument " "1"" of type '" "gum::WeightedSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::WeightedSampling< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WeightedSampling_chgEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "WeightedSampling_chgEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "WeightedSampling_chgEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      gum_WeightedSampling_Sl_double_Sg__chgEvidence__SWIG_2(arg1,SWIG_STD_MOVE(arg2),(std::string const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeightedSampling_chgEvidence__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::WeightedSampling< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__WeightedSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeightedSampling_chgEvidence" "', argument " "1"" of type '" "gum::WeightedSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::WeightedSampling< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WeightedSampling_chgEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "WeightedSampling_chgEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "WeightedSampling_chgEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "WeightedSampling_chgEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      gum_WeightedSampling_Sl_double_Sg__chgEvidence__SWIG_3(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeightedSampling_chgEvidence__SWIG_4(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::WeightedSampling< double > *arg1 = 0 ;
  gum::Tensor< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__WeightedSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeightedSampling_chgEvidence" "', argument " "1"" of type '" "gum::WeightedSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::WeightedSampling< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_gum__TensorT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WeightedSampling_chgEvidence" "', argument " "2"" of type '" "gum::Tensor< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "WeightedSampling_chgEvidence" "', argument " "2"" of type '" "gum::Tensor< double > const &""'"); 
  }
  arg2 = reinterpret_cast< gum::Tensor< double > * >(argp2);
  {
    try {
      gum_WeightedSampling_Sl_double_Sg__chgEvidence__SWIG_4(arg1,(gum::Tensor< double > const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeightedSampling_chgEvidence__SWIG_5(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::WeightedSampling< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__WeightedSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeightedSampling_chgEvidence" "', argument " "1"" of type '" "gum::WeightedSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::WeightedSampling< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WeightedSampling_chgEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "WeightedSampling_chgEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "WeightedSampling_chgEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      gum_WeightedSampling_Sl_double_Sg__chgEvidence__SWIG_5(arg1,SWIG_STD_MOVE(arg2),(std::vector< double,std::allocator< double > > const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeightedSampling_chgEvidence__SWIG_6(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::WeightedSampling< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__WeightedSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeightedSampling_chgEvidence" "', argument " "1"" of type '" "gum::WeightedSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::WeightedSampling< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WeightedSampling_chgEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "WeightedSampling_chgEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "WeightedSampling_chgEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "WeightedSampling_chgEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      gum_WeightedSampling_Sl_double_Sg__chgEvidence__SWIG_6(arg1,(std::string const &)*arg2,(std::vector< double,std::allocator< double > > const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeightedSampling_chgEvidence(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "WeightedSampling_chgEvidence", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    PyObject *retobj = _wrap_WeightedSampling_chgEvidence__SWIG_4(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_2;
    {
      {
        int res = SWIG_AsVal_size_t(argv[2], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_2;
    return _wrap_WeightedSampling_chgEvidence__SWIG_0(self, argc, argv);
  }
check_2:
  
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_3;
    {
      int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_3;
    return _wrap_WeightedSampling_chgEvidence__SWIG_2(self, argc, argv);
  }
check_3:
  
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_4;
    {
      int res = swig::asptr(argv[2], (std::vector< double,std::allocator< double > >**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_4;
    return _wrap_WeightedSampling_chgEvidence__SWIG_5(self, argc, argv);
  }
check_4:
  
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[2], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_5;
    return _wrap_WeightedSampling_chgEvidence__SWIG_1(self, argc, argv);
  }
check_5:
  
  if (argc == 3) {
    int _v = 0;
    {
      int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_6;
    return _wrap_WeightedSampling_chgEvidence__SWIG_3(self, argc, argv);
  }
check_6:
  
  if (argc == 3) {
    PyObject *retobj = _wrap_WeightedSampling_chgEvidence__SWIG_6(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'WeightedSampling_chgEvidence'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::WeightedSampling< double >::chgEvidence(gum::NodeId const,gum::Idx const)\n"
    "    gum::WeightedSampling< double >::chgEvidence(std::string const &,gum::Idx const)\n"
    "    gum::WeightedSampling< double >::chgEvidence(gum::NodeId const,std::string const &)\n"
    "    gum::WeightedSampling< double >::chgEvidence(std::string const &,std::string const &)\n"
    "    gum::WeightedSampling< double >::chgEvidence(gum::Tensor< double > const &)\n"
    "    gum::WeightedSampling< double >::chgEvidence(gum::NodeId const,std::vector< double,std::allocator< double > > const &)\n"
    "    gum::WeightedSampling< double >::chgEvidence(std::string const &,std::vector< double,std::allocator< double > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_WeightedSampling_hasEvidence__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::WeightedSampling< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  bool result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__WeightedSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeightedSampling_hasEvidence" "', argument " "1"" of type '" "gum::WeightedSampling< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::WeightedSampling< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WeightedSampling_hasEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (bool)gum_WeightedSampling_Sl_double_Sg__hasEvidence__SWIG_0((gum::WeightedSampling< double > const *)arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeightedSampling_hasEvidence__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::WeightedSampling< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  bool result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__WeightedSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeightedSampling_hasEvidence" "', argument " "1"" of type '" "gum::WeightedSampling< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::WeightedSampling< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WeightedSampling_hasEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "WeightedSampling_hasEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)gum_WeightedSampling_Sl_double_Sg__hasEvidence__SWIG_1((gum::WeightedSampling< double > const *)arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeightedSampling_hasEvidence(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "WeightedSampling_hasEvidence", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_WeightedSampling_hasEvidence__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_WeightedSampling_hasEvidence__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'WeightedSampling_hasEvidence'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::WeightedSampling< double >::hasEvidence(gum::NodeId const) const\n"
    "    gum::WeightedSampling< double >::hasEvidence(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_WeightedSampling_eraseAllEvidence(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::WeightedSampling< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__WeightedSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeightedSampling_eraseAllEvidence" "', argument " "1"" of type '" "gum::WeightedSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::WeightedSampling< double > * >(argp1);
  {
    try {
      gum_WeightedSampling_Sl_double_Sg__eraseAllEvidence(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeightedSampling_eraseEvidence__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::WeightedSampling< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__WeightedSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeightedSampling_eraseEvidence" "', argument " "1"" of type '" "gum::WeightedSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::WeightedSampling< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WeightedSampling_eraseEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      gum_WeightedSampling_Sl_double_Sg__eraseEvidence__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeightedSampling_eraseEvidence__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::WeightedSampling< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__WeightedSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeightedSampling_eraseEvidence" "', argument " "1"" of type '" "gum::WeightedSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::WeightedSampling< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WeightedSampling_eraseEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "WeightedSampling_eraseEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      gum_WeightedSampling_Sl_double_Sg__eraseEvidence__SWIG_1(arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeightedSampling_eraseEvidence(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "WeightedSampling_eraseEvidence", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_WeightedSampling_eraseEvidence__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_WeightedSampling_eraseEvidence__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'WeightedSampling_eraseEvidence'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::WeightedSampling< double >::eraseEvidence(gum::NodeId const)\n"
    "    gum::WeightedSampling< double >::eraseEvidence(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_WeightedSampling_hasSoftEvidence__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::WeightedSampling< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  bool result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__WeightedSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeightedSampling_hasSoftEvidence" "', argument " "1"" of type '" "gum::WeightedSampling< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::WeightedSampling< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WeightedSampling_hasSoftEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (bool)gum_WeightedSampling_Sl_double_Sg__hasSoftEvidence__SWIG_0((gum::WeightedSampling< double > const *)arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeightedSampling_hasHardEvidence(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::WeightedSampling< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "WeightedSampling_hasHardEvidence", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__WeightedSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeightedSampling_hasHardEvidence" "', argument " "1"" of type '" "gum::WeightedSampling< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::WeightedSampling< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WeightedSampling_hasHardEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "WeightedSampling_hasHardEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)gum_WeightedSampling_Sl_double_Sg__hasHardEvidence((gum::WeightedSampling< double > const *)arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeightedSampling_hasSoftEvidence__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::WeightedSampling< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  bool result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__WeightedSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeightedSampling_hasSoftEvidence" "', argument " "1"" of type '" "gum::WeightedSampling< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::WeightedSampling< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WeightedSampling_hasSoftEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "WeightedSampling_hasSoftEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)gum_WeightedSampling_Sl_double_Sg__hasSoftEvidence__SWIG_1((gum::WeightedSampling< double > const *)arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeightedSampling_hasSoftEvidence(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "WeightedSampling_hasSoftEvidence", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_WeightedSampling_hasSoftEvidence__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_WeightedSampling_hasSoftEvidence__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'WeightedSampling_hasSoftEvidence'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::WeightedSampling< double >::hasSoftEvidence(gum::NodeId const) const\n"
    "    gum::WeightedSampling< double >::hasSoftEvidence(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_WeightedSampling_nbrEvidence(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::WeightedSampling< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::Size result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__WeightedSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeightedSampling_nbrEvidence" "', argument " "1"" of type '" "gum::WeightedSampling< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::WeightedSampling< double > * >(argp1);
  {
    try {
      result = gum_WeightedSampling_Sl_double_Sg__nbrEvidence((gum::WeightedSampling< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeightedSampling_nbrHardEvidence(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::WeightedSampling< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::Size result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__WeightedSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeightedSampling_nbrHardEvidence" "', argument " "1"" of type '" "gum::WeightedSampling< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::WeightedSampling< double > * >(argp1);
  {
    try {
      result = gum_WeightedSampling_Sl_double_Sg__nbrHardEvidence((gum::WeightedSampling< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeightedSampling_nbrSoftEvidence(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::WeightedSampling< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::Size result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__WeightedSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeightedSampling_nbrSoftEvidence" "', argument " "1"" of type '" "gum::WeightedSampling< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::WeightedSampling< double > * >(argp1);
  {
    try {
      result = gum_WeightedSampling_Sl_double_Sg__nbrSoftEvidence((gum::WeightedSampling< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeightedSampling_eraseAllTargets(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::WeightedSampling< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__WeightedSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeightedSampling_eraseAllTargets" "', argument " "1"" of type '" "gum::WeightedSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::WeightedSampling< double > * >(argp1);
  {
    try {
      gum_WeightedSampling_Sl_double_Sg__eraseAllTargets(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeightedSampling_addAllTargets(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::WeightedSampling< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__WeightedSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeightedSampling_addAllTargets" "', argument " "1"" of type '" "gum::WeightedSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::WeightedSampling< double > * >(argp1);
  {
    try {
      gum_WeightedSampling_Sl_double_Sg__addAllTargets(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeightedSampling_addTarget__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::WeightedSampling< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__WeightedSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeightedSampling_addTarget" "', argument " "1"" of type '" "gum::WeightedSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::WeightedSampling< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WeightedSampling_addTarget" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      gum_WeightedSampling_Sl_double_Sg__addTarget__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeightedSampling_addTarget__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::WeightedSampling< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__WeightedSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeightedSampling_addTarget" "', argument " "1"" of type '" "gum::WeightedSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::WeightedSampling< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WeightedSampling_addTarget" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "WeightedSampling_addTarget" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      gum_WeightedSampling_Sl_double_Sg__addTarget__SWIG_1(arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeightedSampling_addTarget(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "WeightedSampling_addTarget", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_WeightedSampling_addTarget__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_WeightedSampling_addTarget__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'WeightedSampling_addTarget'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::WeightedSampling< double >::addTarget(gum::NodeId const)\n"
    "    gum::WeightedSampling< double >::addTarget(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_WeightedSampling_eraseTarget__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::WeightedSampling< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__WeightedSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeightedSampling_eraseTarget" "', argument " "1"" of type '" "gum::WeightedSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::WeightedSampling< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WeightedSampling_eraseTarget" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      gum_WeightedSampling_Sl_double_Sg__eraseTarget__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeightedSampling_eraseTarget__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::WeightedSampling< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__WeightedSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeightedSampling_eraseTarget" "', argument " "1"" of type '" "gum::WeightedSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::WeightedSampling< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WeightedSampling_eraseTarget" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "WeightedSampling_eraseTarget" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      gum_WeightedSampling_Sl_double_Sg__eraseTarget__SWIG_1(arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeightedSampling_eraseTarget(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "WeightedSampling_eraseTarget", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_WeightedSampling_eraseTarget__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_WeightedSampling_eraseTarget__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'WeightedSampling_eraseTarget'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::WeightedSampling< double >::eraseTarget(gum::NodeId const)\n"
    "    gum::WeightedSampling< double >::eraseTarget(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_WeightedSampling_isTarget__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::WeightedSampling< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  bool result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__WeightedSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeightedSampling_isTarget" "', argument " "1"" of type '" "gum::WeightedSampling< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::WeightedSampling< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WeightedSampling_isTarget" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (bool)gum_WeightedSampling_Sl_double_Sg__isTarget__SWIG_0((gum::WeightedSampling< double > const *)arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeightedSampling_isTarget__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::WeightedSampling< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  bool result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__WeightedSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeightedSampling_isTarget" "', argument " "1"" of type '" "gum::WeightedSampling< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::WeightedSampling< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WeightedSampling_isTarget" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "WeightedSampling_isTarget" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)gum_WeightedSampling_Sl_double_Sg__isTarget__SWIG_1((gum::WeightedSampling< double > const *)arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeightedSampling_isTarget(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "WeightedSampling_isTarget", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_WeightedSampling_isTarget__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_WeightedSampling_isTarget__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'WeightedSampling_isTarget'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::WeightedSampling< double >::isTarget(gum::NodeId const) const\n"
    "    gum::WeightedSampling< double >::isTarget(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_WeightedSampling_nbrTargets(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::WeightedSampling< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::Size result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__WeightedSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeightedSampling_nbrTargets" "', argument " "1"" of type '" "gum::WeightedSampling< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::WeightedSampling< double > * >(argp1);
  {
    try {
      result = gum_WeightedSampling_Sl_double_Sg__nbrTargets((gum::WeightedSampling< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeightedSampling_H__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::WeightedSampling< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  double result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__WeightedSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeightedSampling_H" "', argument " "1"" of type '" "gum::WeightedSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::WeightedSampling< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WeightedSampling_H" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (double)gum_WeightedSampling_Sl_double_Sg__H__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeightedSampling_H__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::WeightedSampling< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  double result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__WeightedSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeightedSampling_H" "', argument " "1"" of type '" "gum::WeightedSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::WeightedSampling< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WeightedSampling_H" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "WeightedSampling_H" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (double)gum_WeightedSampling_Sl_double_Sg__H__SWIG_1(arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeightedSampling_H(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "WeightedSampling_H", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_WeightedSampling_H__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_WeightedSampling_H__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'WeightedSampling_H'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::WeightedSampling< double >::H(gum::NodeId const)\n"
    "    gum::WeightedSampling< double >::H(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_WeightedSampling_evidenceImpact__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::WeightedSampling< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  gum::NodeSet *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  gum::Tensor< double > result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__WeightedSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeightedSampling_evidenceImpact" "', argument " "1"" of type '" "gum::WeightedSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::WeightedSampling< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WeightedSampling_evidenceImpact" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_gum__SetT_std__size_t_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "WeightedSampling_evidenceImpact" "', argument " "3"" of type '" "gum::NodeSet const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "WeightedSampling_evidenceImpact" "', argument " "3"" of type '" "gum::NodeSet const &""'"); 
  }
  arg3 = reinterpret_cast< gum::NodeSet * >(argp3);
  {
    try {
      result = gum_WeightedSampling_Sl_double_Sg__evidenceImpact__SWIG_0(arg1,SWIG_STD_MOVE(arg2),(gum::Set< std::size_t > const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::Tensor< double >(result)), SWIGTYPE_p_gum__TensorT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeightedSampling_evidenceImpact__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::WeightedSampling< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  gum::Tensor< double > result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__WeightedSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeightedSampling_evidenceImpact" "', argument " "1"" of type '" "gum::WeightedSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::WeightedSampling< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WeightedSampling_evidenceImpact" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "WeightedSampling_evidenceImpact" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "WeightedSampling_evidenceImpact" "', argument " "3"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "WeightedSampling_evidenceImpact" "', argument " "3"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      result = gum_WeightedSampling_Sl_double_Sg__evidenceImpact__SWIG_1(arg1,(std::string const &)*arg2,(std::vector< std::string,std::allocator< std::string > > const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::Tensor< double >(result)), SWIGTYPE_p_gum__TensorT_double_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeightedSampling_BN(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::WeightedSampling< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::IBayesNet< double > *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__WeightedSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeightedSampling_BN" "', argument " "1"" of type '" "gum::WeightedSampling< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::WeightedSampling< double > * >(argp1);
  {
    try {
      result = (gum::IBayesNet< double > *) &gum_WeightedSampling_Sl_double_Sg__BN((gum::WeightedSampling< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__IBayesNetT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeightedSampling_currentPosterior__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::WeightedSampling< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  gum::Tensor< double > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__WeightedSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeightedSampling_currentPosterior" "', argument " "1"" of type '" "gum::WeightedSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::WeightedSampling< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WeightedSampling_currentPosterior" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (gum::Tensor< double > *) &gum_WeightedSampling_Sl_double_Sg__currentPosterior__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__TensorT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeightedSampling_currentPosterior__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::WeightedSampling< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  gum::Tensor< double > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__WeightedSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeightedSampling_currentPosterior" "', argument " "1"" of type '" "gum::WeightedSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::WeightedSampling< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WeightedSampling_currentPosterior" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "WeightedSampling_currentPosterior" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (gum::Tensor< double > *) &gum_WeightedSampling_Sl_double_Sg__currentPosterior__SWIG_1(arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__TensorT_double_t, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeightedSampling_currentPosterior(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "WeightedSampling_currentPosterior", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_WeightedSampling_currentPosterior__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_WeightedSampling_currentPosterior__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'WeightedSampling_currentPosterior'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::WeightedSampling< double >::currentPosterior(gum::NodeId const)\n"
    "    gum::WeightedSampling< double >::currentPosterior(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_WeightedSampling_setEvidence(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::WeightedSampling< double > *arg1 = 0 ;
  PyObject *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "WeightedSampling_setEvidence", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__WeightedSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeightedSampling_setEvidence" "', argument " "1"" of type '" "gum::WeightedSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::WeightedSampling< double > * >(argp1);
  arg2 = swig_obj[1];
  {
    try {
      gum_WeightedSampling_Sl_double_Sg__setEvidence(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeightedSampling_updateEvidence(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::WeightedSampling< double > *arg1 = 0 ;
  PyObject *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "WeightedSampling_updateEvidence", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__WeightedSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeightedSampling_updateEvidence" "', argument " "1"" of type '" "gum::WeightedSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::WeightedSampling< double > * >(argp1);
  arg2 = swig_obj[1];
  {
    try {
      gum_WeightedSampling_Sl_double_Sg__updateEvidence(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeightedSampling_setTargets(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::WeightedSampling< double > *arg1 = 0 ;
  PyObject *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "WeightedSampling_setTargets", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__WeightedSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeightedSampling_setTargets" "', argument " "1"" of type '" "gum::WeightedSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::WeightedSampling< double > * >(argp1);
  arg2 = swig_obj[1];
  {
    try {
      gum_WeightedSampling_Sl_double_Sg__setTargets(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeightedSampling_hardEvidenceNodes(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::WeightedSampling< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__WeightedSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeightedSampling_hardEvidenceNodes" "', argument " "1"" of type '" "gum::WeightedSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::WeightedSampling< double > * >(argp1);
  {
    try {
      result = (PyObject *)gum_WeightedSampling_Sl_double_Sg__hardEvidenceNodes(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeightedSampling_softEvidenceNodes(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::WeightedSampling< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__WeightedSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeightedSampling_softEvidenceNodes" "', argument " "1"" of type '" "gum::WeightedSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::WeightedSampling< double > * >(argp1);
  {
    try {
      result = (PyObject *)gum_WeightedSampling_Sl_double_Sg__softEvidenceNodes(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeightedSampling_targets(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::WeightedSampling< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__WeightedSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeightedSampling_targets" "', argument " "1"" of type '" "gum::WeightedSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::WeightedSampling< double > * >(argp1);
  {
    try {
      result = (PyObject *)gum_WeightedSampling_Sl_double_Sg__targets(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeightedSampling_evidenceImpact__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::WeightedSampling< double > *arg1 = 0 ;
  PyObject *arg2 = 0 ;
  PyObject *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gum::Tensor< double > result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__WeightedSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeightedSampling_evidenceImpact" "', argument " "1"" of type '" "gum::WeightedSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::WeightedSampling< double > * >(argp1);
  arg2 = swig_obj[1];
  arg3 = swig_obj[2];
  {
    try {
      result = gum_WeightedSampling_Sl_double_Sg__evidenceImpact__SWIG_2(arg1,arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::Tensor< double >(result)), SWIGTYPE_p_gum__TensorT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeightedSampling_evidenceImpact(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "WeightedSampling_evidenceImpact", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    {
      int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_gum__SetT_std__size_t_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_1;
    return _wrap_WeightedSampling_evidenceImpact__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 3) {
    int _v = 0;
    {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_2;
    {
      int res = swig::asptr(argv[2], (std::vector< std::string,std::allocator< std::string > >**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_2;
    return _wrap_WeightedSampling_evidenceImpact__SWIG_1(self, argc, argv);
  }
check_2:
  
  if (argc == 3) {
    PyObject *retobj = _wrap_WeightedSampling_evidenceImpact__SWIG_2(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'WeightedSampling_evidenceImpact'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::WeightedSampling< double >::evidenceImpact(gum::NodeId,gum::NodeSet const &)\n"
    "    gum::WeightedSampling< double >::evidenceImpact(std::string const &,std::vector< std::string,std::allocator< std::string > > const &)\n"
    "    gum::WeightedSampling< double >::evidenceImpact(PyObject *,PyObject *)\n");
  return 0;
}


SWIGINTERN PyObject *WeightedSampling_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj = NULL;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gum__WeightedSamplingT_double_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *WeightedSampling_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_MonteCarloSampling(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::IBayesNet< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::MonteCarloSampling< double > *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__IBayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MonteCarloSampling" "', argument " "1"" of type '" "gum::IBayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::IBayesNet< double > * >(argp1);
  {
    try {
      result = (gum::MonteCarloSampling< double > *)new gum::MonteCarloSampling< double >((gum::IBayesNet< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__MonteCarloSamplingT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_MonteCarloSampling(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::MonteCarloSampling< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__MonteCarloSamplingT_double_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MonteCarloSampling" "', argument " "1"" of type '" "gum::MonteCarloSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::MonteCarloSampling< double > * >(argp1);
  {
    try {
      delete arg1;
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonteCarloSampling_setVerbosity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::MonteCarloSampling< double > *arg1 = 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "MonteCarloSampling_setVerbosity", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__MonteCarloSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MonteCarloSampling_setVerbosity" "', argument " "1"" of type '" "gum::MonteCarloSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::MonteCarloSampling< double > * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MonteCarloSampling_setVerbosity" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      gum_MonteCarloSampling_Sl_double_Sg__setVerbosity(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonteCarloSampling_setEpsilon(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::MonteCarloSampling< double > *arg1 = 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "MonteCarloSampling_setEpsilon", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__MonteCarloSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MonteCarloSampling_setEpsilon" "', argument " "1"" of type '" "gum::MonteCarloSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::MonteCarloSampling< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MonteCarloSampling_setEpsilon" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      gum_MonteCarloSampling_Sl_double_Sg__setEpsilon(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonteCarloSampling_setMinEpsilonRate(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::MonteCarloSampling< double > *arg1 = 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "MonteCarloSampling_setMinEpsilonRate", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__MonteCarloSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MonteCarloSampling_setMinEpsilonRate" "', argument " "1"" of type '" "gum::MonteCarloSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::MonteCarloSampling< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MonteCarloSampling_setMinEpsilonRate" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      gum_MonteCarloSampling_Sl_double_Sg__setMinEpsilonRate(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonteCarloSampling_setMaxIter(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::MonteCarloSampling< double > *arg1 = 0 ;
  gum::Size arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "MonteCarloSampling_setMaxIter", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__MonteCarloSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MonteCarloSampling_setMaxIter" "', argument " "1"" of type '" "gum::MonteCarloSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::MonteCarloSampling< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MonteCarloSampling_setMaxIter" "', argument " "2"" of type '" "gum::Size""'");
  } 
  arg2 = static_cast< gum::Size >(val2);
  {
    try {
      gum_MonteCarloSampling_Sl_double_Sg__setMaxIter(arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonteCarloSampling_setMaxTime(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::MonteCarloSampling< double > *arg1 = 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "MonteCarloSampling_setMaxTime", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__MonteCarloSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MonteCarloSampling_setMaxTime" "', argument " "1"" of type '" "gum::MonteCarloSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::MonteCarloSampling< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MonteCarloSampling_setMaxTime" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      gum_MonteCarloSampling_Sl_double_Sg__setMaxTime(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonteCarloSampling_setPeriodSize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::MonteCarloSampling< double > *arg1 = 0 ;
  gum::Size arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "MonteCarloSampling_setPeriodSize", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__MonteCarloSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MonteCarloSampling_setPeriodSize" "', argument " "1"" of type '" "gum::MonteCarloSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::MonteCarloSampling< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MonteCarloSampling_setPeriodSize" "', argument " "2"" of type '" "gum::Size""'");
  } 
  arg2 = static_cast< gum::Size >(val2);
  {
    try {
      gum_MonteCarloSampling_Sl_double_Sg__setPeriodSize(arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonteCarloSampling_verbosity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::MonteCarloSampling< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__MonteCarloSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MonteCarloSampling_verbosity" "', argument " "1"" of type '" "gum::MonteCarloSampling< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::MonteCarloSampling< double > * >(argp1);
  {
    try {
      result = (bool)gum_MonteCarloSampling_Sl_double_Sg__verbosity((gum::MonteCarloSampling< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonteCarloSampling_epsilon(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::MonteCarloSampling< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__MonteCarloSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MonteCarloSampling_epsilon" "', argument " "1"" of type '" "gum::MonteCarloSampling< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::MonteCarloSampling< double > * >(argp1);
  {
    try {
      result = (double)gum_MonteCarloSampling_Sl_double_Sg__epsilon((gum::MonteCarloSampling< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonteCarloSampling_minEpsilonRate(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::MonteCarloSampling< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__MonteCarloSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MonteCarloSampling_minEpsilonRate" "', argument " "1"" of type '" "gum::MonteCarloSampling< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::MonteCarloSampling< double > * >(argp1);
  {
    try {
      result = (double)gum_MonteCarloSampling_Sl_double_Sg__minEpsilonRate((gum::MonteCarloSampling< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonteCarloSampling_maxIter(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::MonteCarloSampling< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::Size result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__MonteCarloSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MonteCarloSampling_maxIter" "', argument " "1"" of type '" "gum::MonteCarloSampling< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::MonteCarloSampling< double > * >(argp1);
  {
    try {
      result = gum_MonteCarloSampling_Sl_double_Sg__maxIter((gum::MonteCarloSampling< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonteCarloSampling_maxTime(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::MonteCarloSampling< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__MonteCarloSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MonteCarloSampling_maxTime" "', argument " "1"" of type '" "gum::MonteCarloSampling< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::MonteCarloSampling< double > * >(argp1);
  {
    try {
      result = (double)gum_MonteCarloSampling_Sl_double_Sg__maxTime((gum::MonteCarloSampling< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonteCarloSampling_periodSize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::MonteCarloSampling< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::Size result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__MonteCarloSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MonteCarloSampling_periodSize" "', argument " "1"" of type '" "gum::MonteCarloSampling< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::MonteCarloSampling< double > * >(argp1);
  {
    try {
      result = gum_MonteCarloSampling_Sl_double_Sg__periodSize((gum::MonteCarloSampling< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonteCarloSampling_nbrIterations(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::MonteCarloSampling< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::Size result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__MonteCarloSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MonteCarloSampling_nbrIterations" "', argument " "1"" of type '" "gum::MonteCarloSampling< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::MonteCarloSampling< double > * >(argp1);
  {
    try {
      result = gum_MonteCarloSampling_Sl_double_Sg__nbrIterations((gum::MonteCarloSampling< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonteCarloSampling_currentTime(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::MonteCarloSampling< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__MonteCarloSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MonteCarloSampling_currentTime" "', argument " "1"" of type '" "gum::MonteCarloSampling< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::MonteCarloSampling< double > * >(argp1);
  {
    try {
      result = (double)gum_MonteCarloSampling_Sl_double_Sg__currentTime((gum::MonteCarloSampling< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonteCarloSampling_messageApproximationScheme(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::MonteCarloSampling< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__MonteCarloSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MonteCarloSampling_messageApproximationScheme" "', argument " "1"" of type '" "gum::MonteCarloSampling< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::MonteCarloSampling< double > * >(argp1);
  {
    try {
      result = gum_MonteCarloSampling_Sl_double_Sg__messageApproximationScheme((gum::MonteCarloSampling< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonteCarloSampling_history(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::MonteCarloSampling< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< double,std::allocator< double > > *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__MonteCarloSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MonteCarloSampling_history" "', argument " "1"" of type '" "gum::MonteCarloSampling< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::MonteCarloSampling< double > * >(argp1);
  {
    try {
      result = (std::vector< double,std::allocator< double > > *) &gum_MonteCarloSampling_Sl_double_Sg__history((gum::MonteCarloSampling< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< double,std::allocator< double > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonteCarloSampling__asIApproximationSchemeConfiguration(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::MonteCarloSampling< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::IApproximationSchemeConfiguration *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__MonteCarloSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MonteCarloSampling__asIApproximationSchemeConfiguration" "', argument " "1"" of type '" "gum::MonteCarloSampling< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::MonteCarloSampling< double > * >(argp1);
  {
    try {
      result = (gum::IApproximationSchemeConfiguration *) &gum_MonteCarloSampling_Sl_double_Sg___asIApproximationSchemeConfiguration((gum::MonteCarloSampling< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__IApproximationSchemeConfiguration, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonteCarloSampling_makeInference(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::MonteCarloSampling< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__MonteCarloSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MonteCarloSampling_makeInference" "', argument " "1"" of type '" "gum::MonteCarloSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::MonteCarloSampling< double > * >(argp1);
  {
    try {
      gum_MonteCarloSampling_Sl_double_Sg__makeInference(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonteCarloSampling_posterior__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::MonteCarloSampling< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  gum::Tensor< double > result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__MonteCarloSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MonteCarloSampling_posterior" "', argument " "1"" of type '" "gum::MonteCarloSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::MonteCarloSampling< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MonteCarloSampling_posterior" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = gum_MonteCarloSampling_Sl_double_Sg__posterior__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::Tensor< double >(result)), SWIGTYPE_p_gum__TensorT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonteCarloSampling_posterior__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::MonteCarloSampling< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  gum::Tensor< double > result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__MonteCarloSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MonteCarloSampling_posterior" "', argument " "1"" of type '" "gum::MonteCarloSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::MonteCarloSampling< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MonteCarloSampling_posterior" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "MonteCarloSampling_posterior" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = gum_MonteCarloSampling_Sl_double_Sg__posterior__SWIG_1(arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::Tensor< double >(result)), SWIGTYPE_p_gum__TensorT_double_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonteCarloSampling_posterior(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "MonteCarloSampling_posterior", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_MonteCarloSampling_posterior__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_MonteCarloSampling_posterior__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'MonteCarloSampling_posterior'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::MonteCarloSampling< double >::posterior(gum::NodeId const)\n"
    "    gum::MonteCarloSampling< double >::posterior(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MonteCarloSampling_addEvidence__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::MonteCarloSampling< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  gum::Idx arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__MonteCarloSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MonteCarloSampling_addEvidence" "', argument " "1"" of type '" "gum::MonteCarloSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::MonteCarloSampling< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MonteCarloSampling_addEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MonteCarloSampling_addEvidence" "', argument " "3"" of type '" "gum::Idx""'");
  } 
  arg3 = static_cast< gum::Idx >(val3);
  {
    try {
      gum_MonteCarloSampling_Sl_double_Sg__addEvidence__SWIG_0(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonteCarloSampling_addEvidence__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::MonteCarloSampling< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  gum::Idx arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  size_t val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__MonteCarloSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MonteCarloSampling_addEvidence" "', argument " "1"" of type '" "gum::MonteCarloSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::MonteCarloSampling< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MonteCarloSampling_addEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "MonteCarloSampling_addEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MonteCarloSampling_addEvidence" "', argument " "3"" of type '" "gum::Idx""'");
  } 
  arg3 = static_cast< gum::Idx >(val3);
  {
    try {
      gum_MonteCarloSampling_Sl_double_Sg__addEvidence__SWIG_1(arg1,(std::string const &)*arg2,SWIG_STD_MOVE(arg3));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonteCarloSampling_addEvidence__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::MonteCarloSampling< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__MonteCarloSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MonteCarloSampling_addEvidence" "', argument " "1"" of type '" "gum::MonteCarloSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::MonteCarloSampling< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MonteCarloSampling_addEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MonteCarloSampling_addEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "MonteCarloSampling_addEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      gum_MonteCarloSampling_Sl_double_Sg__addEvidence__SWIG_2(arg1,SWIG_STD_MOVE(arg2),(std::string const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonteCarloSampling_addEvidence__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::MonteCarloSampling< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__MonteCarloSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MonteCarloSampling_addEvidence" "', argument " "1"" of type '" "gum::MonteCarloSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::MonteCarloSampling< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MonteCarloSampling_addEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "MonteCarloSampling_addEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MonteCarloSampling_addEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "MonteCarloSampling_addEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      gum_MonteCarloSampling_Sl_double_Sg__addEvidence__SWIG_3(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonteCarloSampling_addEvidence__SWIG_4(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::MonteCarloSampling< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__MonteCarloSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MonteCarloSampling_addEvidence" "', argument " "1"" of type '" "gum::MonteCarloSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::MonteCarloSampling< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MonteCarloSampling_addEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MonteCarloSampling_addEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "MonteCarloSampling_addEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      gum_MonteCarloSampling_Sl_double_Sg__addEvidence__SWIG_4(arg1,SWIG_STD_MOVE(arg2),(std::vector< double,std::allocator< double > > const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonteCarloSampling_addEvidence__SWIG_5(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::MonteCarloSampling< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__MonteCarloSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MonteCarloSampling_addEvidence" "', argument " "1"" of type '" "gum::MonteCarloSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::MonteCarloSampling< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MonteCarloSampling_addEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "MonteCarloSampling_addEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MonteCarloSampling_addEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "MonteCarloSampling_addEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      gum_MonteCarloSampling_Sl_double_Sg__addEvidence__SWIG_5(arg1,(std::string const &)*arg2,(std::vector< double,std::allocator< double > > const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonteCarloSampling_addEvidence__SWIG_6(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::MonteCarloSampling< double > *arg1 = 0 ;
  gum::Tensor< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__MonteCarloSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MonteCarloSampling_addEvidence" "', argument " "1"" of type '" "gum::MonteCarloSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::MonteCarloSampling< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_gum__TensorT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MonteCarloSampling_addEvidence" "', argument " "2"" of type '" "gum::Tensor< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "MonteCarloSampling_addEvidence" "', argument " "2"" of type '" "gum::Tensor< double > const &""'"); 
  }
  arg2 = reinterpret_cast< gum::Tensor< double > * >(argp2);
  {
    try {
      gum_MonteCarloSampling_Sl_double_Sg__addEvidence__SWIG_6(arg1,(gum::Tensor< double > const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonteCarloSampling_addEvidence(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "MonteCarloSampling_addEvidence", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    PyObject *retobj = _wrap_MonteCarloSampling_addEvidence__SWIG_6(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_2;
    {
      {
        int res = SWIG_AsVal_size_t(argv[2], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_2;
    return _wrap_MonteCarloSampling_addEvidence__SWIG_0(self, argc, argv);
  }
check_2:
  
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_3;
    {
      int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_3;
    return _wrap_MonteCarloSampling_addEvidence__SWIG_2(self, argc, argv);
  }
check_3:
  
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_4;
    {
      int res = swig::asptr(argv[2], (std::vector< double,std::allocator< double > >**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_4;
    return _wrap_MonteCarloSampling_addEvidence__SWIG_4(self, argc, argv);
  }
check_4:
  
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[2], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_5;
    return _wrap_MonteCarloSampling_addEvidence__SWIG_1(self, argc, argv);
  }
check_5:
  
  if (argc == 3) {
    int _v = 0;
    {
      int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_6;
    return _wrap_MonteCarloSampling_addEvidence__SWIG_3(self, argc, argv);
  }
check_6:
  
  if (argc == 3) {
    PyObject *retobj = _wrap_MonteCarloSampling_addEvidence__SWIG_5(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'MonteCarloSampling_addEvidence'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::MonteCarloSampling< double >::addEvidence(gum::NodeId const,gum::Idx const)\n"
    "    gum::MonteCarloSampling< double >::addEvidence(std::string const &,gum::Idx const)\n"
    "    gum::MonteCarloSampling< double >::addEvidence(gum::NodeId const,std::string const &)\n"
    "    gum::MonteCarloSampling< double >::addEvidence(std::string const &,std::string const &)\n"
    "    gum::MonteCarloSampling< double >::addEvidence(gum::NodeId const,std::vector< double,std::allocator< double > > const &)\n"
    "    gum::MonteCarloSampling< double >::addEvidence(std::string const &,std::vector< double,std::allocator< double > > const &)\n"
    "    gum::MonteCarloSampling< double >::addEvidence(gum::Tensor< double > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MonteCarloSampling_chgEvidence__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::MonteCarloSampling< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  gum::Idx arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__MonteCarloSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MonteCarloSampling_chgEvidence" "', argument " "1"" of type '" "gum::MonteCarloSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::MonteCarloSampling< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MonteCarloSampling_chgEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MonteCarloSampling_chgEvidence" "', argument " "3"" of type '" "gum::Idx""'");
  } 
  arg3 = static_cast< gum::Idx >(val3);
  {
    try {
      gum_MonteCarloSampling_Sl_double_Sg__chgEvidence__SWIG_0(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonteCarloSampling_chgEvidence__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::MonteCarloSampling< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  gum::Idx arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  size_t val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__MonteCarloSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MonteCarloSampling_chgEvidence" "', argument " "1"" of type '" "gum::MonteCarloSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::MonteCarloSampling< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MonteCarloSampling_chgEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "MonteCarloSampling_chgEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MonteCarloSampling_chgEvidence" "', argument " "3"" of type '" "gum::Idx""'");
  } 
  arg3 = static_cast< gum::Idx >(val3);
  {
    try {
      gum_MonteCarloSampling_Sl_double_Sg__chgEvidence__SWIG_1(arg1,(std::string const &)*arg2,SWIG_STD_MOVE(arg3));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonteCarloSampling_chgEvidence__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::MonteCarloSampling< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__MonteCarloSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MonteCarloSampling_chgEvidence" "', argument " "1"" of type '" "gum::MonteCarloSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::MonteCarloSampling< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MonteCarloSampling_chgEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MonteCarloSampling_chgEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "MonteCarloSampling_chgEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      gum_MonteCarloSampling_Sl_double_Sg__chgEvidence__SWIG_2(arg1,SWIG_STD_MOVE(arg2),(std::string const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonteCarloSampling_chgEvidence__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::MonteCarloSampling< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__MonteCarloSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MonteCarloSampling_chgEvidence" "', argument " "1"" of type '" "gum::MonteCarloSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::MonteCarloSampling< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MonteCarloSampling_chgEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "MonteCarloSampling_chgEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MonteCarloSampling_chgEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "MonteCarloSampling_chgEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      gum_MonteCarloSampling_Sl_double_Sg__chgEvidence__SWIG_3(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonteCarloSampling_chgEvidence__SWIG_4(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::MonteCarloSampling< double > *arg1 = 0 ;
  gum::Tensor< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__MonteCarloSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MonteCarloSampling_chgEvidence" "', argument " "1"" of type '" "gum::MonteCarloSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::MonteCarloSampling< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_gum__TensorT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MonteCarloSampling_chgEvidence" "', argument " "2"" of type '" "gum::Tensor< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "MonteCarloSampling_chgEvidence" "', argument " "2"" of type '" "gum::Tensor< double > const &""'"); 
  }
  arg2 = reinterpret_cast< gum::Tensor< double > * >(argp2);
  {
    try {
      gum_MonteCarloSampling_Sl_double_Sg__chgEvidence__SWIG_4(arg1,(gum::Tensor< double > const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonteCarloSampling_chgEvidence__SWIG_5(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::MonteCarloSampling< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__MonteCarloSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MonteCarloSampling_chgEvidence" "', argument " "1"" of type '" "gum::MonteCarloSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::MonteCarloSampling< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MonteCarloSampling_chgEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MonteCarloSampling_chgEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "MonteCarloSampling_chgEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      gum_MonteCarloSampling_Sl_double_Sg__chgEvidence__SWIG_5(arg1,SWIG_STD_MOVE(arg2),(std::vector< double,std::allocator< double > > const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonteCarloSampling_chgEvidence__SWIG_6(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::MonteCarloSampling< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__MonteCarloSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MonteCarloSampling_chgEvidence" "', argument " "1"" of type '" "gum::MonteCarloSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::MonteCarloSampling< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MonteCarloSampling_chgEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "MonteCarloSampling_chgEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MonteCarloSampling_chgEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "MonteCarloSampling_chgEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      gum_MonteCarloSampling_Sl_double_Sg__chgEvidence__SWIG_6(arg1,(std::string const &)*arg2,(std::vector< double,std::allocator< double > > const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonteCarloSampling_chgEvidence(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "MonteCarloSampling_chgEvidence", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    PyObject *retobj = _wrap_MonteCarloSampling_chgEvidence__SWIG_4(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_2;
    {
      {
        int res = SWIG_AsVal_size_t(argv[2], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_2;
    return _wrap_MonteCarloSampling_chgEvidence__SWIG_0(self, argc, argv);
  }
check_2:
  
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_3;
    {
      int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_3;
    return _wrap_MonteCarloSampling_chgEvidence__SWIG_2(self, argc, argv);
  }
check_3:
  
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_4;
    {
      int res = swig::asptr(argv[2], (std::vector< double,std::allocator< double > >**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_4;
    return _wrap_MonteCarloSampling_chgEvidence__SWIG_5(self, argc, argv);
  }
check_4:
  
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[2], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_5;
    return _wrap_MonteCarloSampling_chgEvidence__SWIG_1(self, argc, argv);
  }
check_5:
  
  if (argc == 3) {
    int _v = 0;
    {
      int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_6;
    return _wrap_MonteCarloSampling_chgEvidence__SWIG_3(self, argc, argv);
  }
check_6:
  
  if (argc == 3) {
    PyObject *retobj = _wrap_MonteCarloSampling_chgEvidence__SWIG_6(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'MonteCarloSampling_chgEvidence'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::MonteCarloSampling< double >::chgEvidence(gum::NodeId const,gum::Idx const)\n"
    "    gum::MonteCarloSampling< double >::chgEvidence(std::string const &,gum::Idx const)\n"
    "    gum::MonteCarloSampling< double >::chgEvidence(gum::NodeId const,std::string const &)\n"
    "    gum::MonteCarloSampling< double >::chgEvidence(std::string const &,std::string const &)\n"
    "    gum::MonteCarloSampling< double >::chgEvidence(gum::Tensor< double > const &)\n"
    "    gum::MonteCarloSampling< double >::chgEvidence(gum::NodeId const,std::vector< double,std::allocator< double > > const &)\n"
    "    gum::MonteCarloSampling< double >::chgEvidence(std::string const &,std::vector< double,std::allocator< double > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MonteCarloSampling_hasEvidence__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::MonteCarloSampling< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  bool result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__MonteCarloSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MonteCarloSampling_hasEvidence" "', argument " "1"" of type '" "gum::MonteCarloSampling< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::MonteCarloSampling< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MonteCarloSampling_hasEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (bool)gum_MonteCarloSampling_Sl_double_Sg__hasEvidence__SWIG_0((gum::MonteCarloSampling< double > const *)arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonteCarloSampling_hasEvidence__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::MonteCarloSampling< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  bool result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__MonteCarloSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MonteCarloSampling_hasEvidence" "', argument " "1"" of type '" "gum::MonteCarloSampling< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::MonteCarloSampling< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MonteCarloSampling_hasEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "MonteCarloSampling_hasEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)gum_MonteCarloSampling_Sl_double_Sg__hasEvidence__SWIG_1((gum::MonteCarloSampling< double > const *)arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonteCarloSampling_hasEvidence(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "MonteCarloSampling_hasEvidence", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_MonteCarloSampling_hasEvidence__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_MonteCarloSampling_hasEvidence__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'MonteCarloSampling_hasEvidence'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::MonteCarloSampling< double >::hasEvidence(gum::NodeId const) const\n"
    "    gum::MonteCarloSampling< double >::hasEvidence(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MonteCarloSampling_eraseAllEvidence(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::MonteCarloSampling< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__MonteCarloSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MonteCarloSampling_eraseAllEvidence" "', argument " "1"" of type '" "gum::MonteCarloSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::MonteCarloSampling< double > * >(argp1);
  {
    try {
      gum_MonteCarloSampling_Sl_double_Sg__eraseAllEvidence(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonteCarloSampling_eraseEvidence__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::MonteCarloSampling< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__MonteCarloSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MonteCarloSampling_eraseEvidence" "', argument " "1"" of type '" "gum::MonteCarloSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::MonteCarloSampling< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MonteCarloSampling_eraseEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      gum_MonteCarloSampling_Sl_double_Sg__eraseEvidence__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonteCarloSampling_eraseEvidence__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::MonteCarloSampling< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__MonteCarloSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MonteCarloSampling_eraseEvidence" "', argument " "1"" of type '" "gum::MonteCarloSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::MonteCarloSampling< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MonteCarloSampling_eraseEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "MonteCarloSampling_eraseEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      gum_MonteCarloSampling_Sl_double_Sg__eraseEvidence__SWIG_1(arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonteCarloSampling_eraseEvidence(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "MonteCarloSampling_eraseEvidence", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_MonteCarloSampling_eraseEvidence__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_MonteCarloSampling_eraseEvidence__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'MonteCarloSampling_eraseEvidence'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::MonteCarloSampling< double >::eraseEvidence(gum::NodeId const)\n"
    "    gum::MonteCarloSampling< double >::eraseEvidence(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MonteCarloSampling_hasSoftEvidence__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::MonteCarloSampling< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  bool result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__MonteCarloSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MonteCarloSampling_hasSoftEvidence" "', argument " "1"" of type '" "gum::MonteCarloSampling< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::MonteCarloSampling< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MonteCarloSampling_hasSoftEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (bool)gum_MonteCarloSampling_Sl_double_Sg__hasSoftEvidence__SWIG_0((gum::MonteCarloSampling< double > const *)arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonteCarloSampling_hasHardEvidence(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::MonteCarloSampling< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "MonteCarloSampling_hasHardEvidence", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__MonteCarloSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MonteCarloSampling_hasHardEvidence" "', argument " "1"" of type '" "gum::MonteCarloSampling< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::MonteCarloSampling< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MonteCarloSampling_hasHardEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "MonteCarloSampling_hasHardEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)gum_MonteCarloSampling_Sl_double_Sg__hasHardEvidence((gum::MonteCarloSampling< double > const *)arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonteCarloSampling_hasSoftEvidence__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::MonteCarloSampling< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  bool result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__MonteCarloSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MonteCarloSampling_hasSoftEvidence" "', argument " "1"" of type '" "gum::MonteCarloSampling< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::MonteCarloSampling< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MonteCarloSampling_hasSoftEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "MonteCarloSampling_hasSoftEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)gum_MonteCarloSampling_Sl_double_Sg__hasSoftEvidence__SWIG_1((gum::MonteCarloSampling< double > const *)arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonteCarloSampling_hasSoftEvidence(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "MonteCarloSampling_hasSoftEvidence", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_MonteCarloSampling_hasSoftEvidence__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_MonteCarloSampling_hasSoftEvidence__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'MonteCarloSampling_hasSoftEvidence'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::MonteCarloSampling< double >::hasSoftEvidence(gum::NodeId const) const\n"
    "    gum::MonteCarloSampling< double >::hasSoftEvidence(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MonteCarloSampling_nbrEvidence(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::MonteCarloSampling< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::Size result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__MonteCarloSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MonteCarloSampling_nbrEvidence" "', argument " "1"" of type '" "gum::MonteCarloSampling< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::MonteCarloSampling< double > * >(argp1);
  {
    try {
      result = gum_MonteCarloSampling_Sl_double_Sg__nbrEvidence((gum::MonteCarloSampling< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonteCarloSampling_nbrHardEvidence(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::MonteCarloSampling< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::Size result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__MonteCarloSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MonteCarloSampling_nbrHardEvidence" "', argument " "1"" of type '" "gum::MonteCarloSampling< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::MonteCarloSampling< double > * >(argp1);
  {
    try {
      result = gum_MonteCarloSampling_Sl_double_Sg__nbrHardEvidence((gum::MonteCarloSampling< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonteCarloSampling_nbrSoftEvidence(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::MonteCarloSampling< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::Size result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__MonteCarloSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MonteCarloSampling_nbrSoftEvidence" "', argument " "1"" of type '" "gum::MonteCarloSampling< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::MonteCarloSampling< double > * >(argp1);
  {
    try {
      result = gum_MonteCarloSampling_Sl_double_Sg__nbrSoftEvidence((gum::MonteCarloSampling< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonteCarloSampling_eraseAllTargets(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::MonteCarloSampling< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__MonteCarloSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MonteCarloSampling_eraseAllTargets" "', argument " "1"" of type '" "gum::MonteCarloSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::MonteCarloSampling< double > * >(argp1);
  {
    try {
      gum_MonteCarloSampling_Sl_double_Sg__eraseAllTargets(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonteCarloSampling_addAllTargets(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::MonteCarloSampling< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__MonteCarloSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MonteCarloSampling_addAllTargets" "', argument " "1"" of type '" "gum::MonteCarloSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::MonteCarloSampling< double > * >(argp1);
  {
    try {
      gum_MonteCarloSampling_Sl_double_Sg__addAllTargets(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonteCarloSampling_addTarget__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::MonteCarloSampling< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__MonteCarloSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MonteCarloSampling_addTarget" "', argument " "1"" of type '" "gum::MonteCarloSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::MonteCarloSampling< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MonteCarloSampling_addTarget" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      gum_MonteCarloSampling_Sl_double_Sg__addTarget__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonteCarloSampling_addTarget__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::MonteCarloSampling< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__MonteCarloSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MonteCarloSampling_addTarget" "', argument " "1"" of type '" "gum::MonteCarloSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::MonteCarloSampling< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MonteCarloSampling_addTarget" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "MonteCarloSampling_addTarget" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      gum_MonteCarloSampling_Sl_double_Sg__addTarget__SWIG_1(arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonteCarloSampling_addTarget(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "MonteCarloSampling_addTarget", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_MonteCarloSampling_addTarget__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_MonteCarloSampling_addTarget__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'MonteCarloSampling_addTarget'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::MonteCarloSampling< double >::addTarget(gum::NodeId const)\n"
    "    gum::MonteCarloSampling< double >::addTarget(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MonteCarloSampling_eraseTarget__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::MonteCarloSampling< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__MonteCarloSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MonteCarloSampling_eraseTarget" "', argument " "1"" of type '" "gum::MonteCarloSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::MonteCarloSampling< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MonteCarloSampling_eraseTarget" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      gum_MonteCarloSampling_Sl_double_Sg__eraseTarget__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonteCarloSampling_eraseTarget__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::MonteCarloSampling< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__MonteCarloSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MonteCarloSampling_eraseTarget" "', argument " "1"" of type '" "gum::MonteCarloSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::MonteCarloSampling< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MonteCarloSampling_eraseTarget" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "MonteCarloSampling_eraseTarget" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      gum_MonteCarloSampling_Sl_double_Sg__eraseTarget__SWIG_1(arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonteCarloSampling_eraseTarget(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "MonteCarloSampling_eraseTarget", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_MonteCarloSampling_eraseTarget__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_MonteCarloSampling_eraseTarget__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'MonteCarloSampling_eraseTarget'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::MonteCarloSampling< double >::eraseTarget(gum::NodeId const)\n"
    "    gum::MonteCarloSampling< double >::eraseTarget(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MonteCarloSampling_isTarget__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::MonteCarloSampling< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  bool result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__MonteCarloSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MonteCarloSampling_isTarget" "', argument " "1"" of type '" "gum::MonteCarloSampling< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::MonteCarloSampling< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MonteCarloSampling_isTarget" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (bool)gum_MonteCarloSampling_Sl_double_Sg__isTarget__SWIG_0((gum::MonteCarloSampling< double > const *)arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonteCarloSampling_isTarget__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::MonteCarloSampling< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  bool result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__MonteCarloSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MonteCarloSampling_isTarget" "', argument " "1"" of type '" "gum::MonteCarloSampling< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::MonteCarloSampling< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MonteCarloSampling_isTarget" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "MonteCarloSampling_isTarget" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)gum_MonteCarloSampling_Sl_double_Sg__isTarget__SWIG_1((gum::MonteCarloSampling< double > const *)arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonteCarloSampling_isTarget(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "MonteCarloSampling_isTarget", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_MonteCarloSampling_isTarget__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_MonteCarloSampling_isTarget__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'MonteCarloSampling_isTarget'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::MonteCarloSampling< double >::isTarget(gum::NodeId const) const\n"
    "    gum::MonteCarloSampling< double >::isTarget(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MonteCarloSampling_nbrTargets(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::MonteCarloSampling< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::Size result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__MonteCarloSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MonteCarloSampling_nbrTargets" "', argument " "1"" of type '" "gum::MonteCarloSampling< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::MonteCarloSampling< double > * >(argp1);
  {
    try {
      result = gum_MonteCarloSampling_Sl_double_Sg__nbrTargets((gum::MonteCarloSampling< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonteCarloSampling_H__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::MonteCarloSampling< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  double result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__MonteCarloSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MonteCarloSampling_H" "', argument " "1"" of type '" "gum::MonteCarloSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::MonteCarloSampling< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MonteCarloSampling_H" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (double)gum_MonteCarloSampling_Sl_double_Sg__H__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonteCarloSampling_H__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::MonteCarloSampling< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  double result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__MonteCarloSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MonteCarloSampling_H" "', argument " "1"" of type '" "gum::MonteCarloSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::MonteCarloSampling< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MonteCarloSampling_H" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "MonteCarloSampling_H" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (double)gum_MonteCarloSampling_Sl_double_Sg__H__SWIG_1(arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonteCarloSampling_H(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "MonteCarloSampling_H", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_MonteCarloSampling_H__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_MonteCarloSampling_H__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'MonteCarloSampling_H'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::MonteCarloSampling< double >::H(gum::NodeId const)\n"
    "    gum::MonteCarloSampling< double >::H(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MonteCarloSampling_evidenceImpact__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::MonteCarloSampling< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  gum::NodeSet *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  gum::Tensor< double > result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__MonteCarloSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MonteCarloSampling_evidenceImpact" "', argument " "1"" of type '" "gum::MonteCarloSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::MonteCarloSampling< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MonteCarloSampling_evidenceImpact" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_gum__SetT_std__size_t_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MonteCarloSampling_evidenceImpact" "', argument " "3"" of type '" "gum::NodeSet const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "MonteCarloSampling_evidenceImpact" "', argument " "3"" of type '" "gum::NodeSet const &""'"); 
  }
  arg3 = reinterpret_cast< gum::NodeSet * >(argp3);
  {
    try {
      result = gum_MonteCarloSampling_Sl_double_Sg__evidenceImpact__SWIG_0(arg1,SWIG_STD_MOVE(arg2),(gum::Set< std::size_t > const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::Tensor< double >(result)), SWIGTYPE_p_gum__TensorT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonteCarloSampling_evidenceImpact__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::MonteCarloSampling< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  gum::Tensor< double > result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__MonteCarloSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MonteCarloSampling_evidenceImpact" "', argument " "1"" of type '" "gum::MonteCarloSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::MonteCarloSampling< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MonteCarloSampling_evidenceImpact" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "MonteCarloSampling_evidenceImpact" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MonteCarloSampling_evidenceImpact" "', argument " "3"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "MonteCarloSampling_evidenceImpact" "', argument " "3"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      result = gum_MonteCarloSampling_Sl_double_Sg__evidenceImpact__SWIG_1(arg1,(std::string const &)*arg2,(std::vector< std::string,std::allocator< std::string > > const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::Tensor< double >(result)), SWIGTYPE_p_gum__TensorT_double_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonteCarloSampling_BN(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::MonteCarloSampling< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::IBayesNet< double > *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__MonteCarloSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MonteCarloSampling_BN" "', argument " "1"" of type '" "gum::MonteCarloSampling< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::MonteCarloSampling< double > * >(argp1);
  {
    try {
      result = (gum::IBayesNet< double > *) &gum_MonteCarloSampling_Sl_double_Sg__BN((gum::MonteCarloSampling< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__IBayesNetT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonteCarloSampling_currentPosterior__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::MonteCarloSampling< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  gum::Tensor< double > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__MonteCarloSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MonteCarloSampling_currentPosterior" "', argument " "1"" of type '" "gum::MonteCarloSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::MonteCarloSampling< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MonteCarloSampling_currentPosterior" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (gum::Tensor< double > *) &gum_MonteCarloSampling_Sl_double_Sg__currentPosterior__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__TensorT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonteCarloSampling_currentPosterior__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::MonteCarloSampling< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  gum::Tensor< double > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__MonteCarloSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MonteCarloSampling_currentPosterior" "', argument " "1"" of type '" "gum::MonteCarloSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::MonteCarloSampling< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MonteCarloSampling_currentPosterior" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "MonteCarloSampling_currentPosterior" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (gum::Tensor< double > *) &gum_MonteCarloSampling_Sl_double_Sg__currentPosterior__SWIG_1(arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__TensorT_double_t, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonteCarloSampling_currentPosterior(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "MonteCarloSampling_currentPosterior", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_MonteCarloSampling_currentPosterior__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_MonteCarloSampling_currentPosterior__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'MonteCarloSampling_currentPosterior'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::MonteCarloSampling< double >::currentPosterior(gum::NodeId const)\n"
    "    gum::MonteCarloSampling< double >::currentPosterior(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MonteCarloSampling_setEvidence(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::MonteCarloSampling< double > *arg1 = 0 ;
  PyObject *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "MonteCarloSampling_setEvidence", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__MonteCarloSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MonteCarloSampling_setEvidence" "', argument " "1"" of type '" "gum::MonteCarloSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::MonteCarloSampling< double > * >(argp1);
  arg2 = swig_obj[1];
  {
    try {
      gum_MonteCarloSampling_Sl_double_Sg__setEvidence(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonteCarloSampling_updateEvidence(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::MonteCarloSampling< double > *arg1 = 0 ;
  PyObject *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "MonteCarloSampling_updateEvidence", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__MonteCarloSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MonteCarloSampling_updateEvidence" "', argument " "1"" of type '" "gum::MonteCarloSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::MonteCarloSampling< double > * >(argp1);
  arg2 = swig_obj[1];
  {
    try {
      gum_MonteCarloSampling_Sl_double_Sg__updateEvidence(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonteCarloSampling_setTargets(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::MonteCarloSampling< double > *arg1 = 0 ;
  PyObject *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "MonteCarloSampling_setTargets", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__MonteCarloSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MonteCarloSampling_setTargets" "', argument " "1"" of type '" "gum::MonteCarloSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::MonteCarloSampling< double > * >(argp1);
  arg2 = swig_obj[1];
  {
    try {
      gum_MonteCarloSampling_Sl_double_Sg__setTargets(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonteCarloSampling_hardEvidenceNodes(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::MonteCarloSampling< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__MonteCarloSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MonteCarloSampling_hardEvidenceNodes" "', argument " "1"" of type '" "gum::MonteCarloSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::MonteCarloSampling< double > * >(argp1);
  {
    try {
      result = (PyObject *)gum_MonteCarloSampling_Sl_double_Sg__hardEvidenceNodes(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonteCarloSampling_softEvidenceNodes(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::MonteCarloSampling< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__MonteCarloSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MonteCarloSampling_softEvidenceNodes" "', argument " "1"" of type '" "gum::MonteCarloSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::MonteCarloSampling< double > * >(argp1);
  {
    try {
      result = (PyObject *)gum_MonteCarloSampling_Sl_double_Sg__softEvidenceNodes(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonteCarloSampling_targets(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::MonteCarloSampling< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__MonteCarloSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MonteCarloSampling_targets" "', argument " "1"" of type '" "gum::MonteCarloSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::MonteCarloSampling< double > * >(argp1);
  {
    try {
      result = (PyObject *)gum_MonteCarloSampling_Sl_double_Sg__targets(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonteCarloSampling_evidenceImpact__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::MonteCarloSampling< double > *arg1 = 0 ;
  PyObject *arg2 = 0 ;
  PyObject *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gum::Tensor< double > result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__MonteCarloSamplingT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MonteCarloSampling_evidenceImpact" "', argument " "1"" of type '" "gum::MonteCarloSampling< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::MonteCarloSampling< double > * >(argp1);
  arg2 = swig_obj[1];
  arg3 = swig_obj[2];
  {
    try {
      result = gum_MonteCarloSampling_Sl_double_Sg__evidenceImpact__SWIG_2(arg1,arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::Tensor< double >(result)), SWIGTYPE_p_gum__TensorT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonteCarloSampling_evidenceImpact(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "MonteCarloSampling_evidenceImpact", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    {
      int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_gum__SetT_std__size_t_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_1;
    return _wrap_MonteCarloSampling_evidenceImpact__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 3) {
    int _v = 0;
    {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_2;
    {
      int res = swig::asptr(argv[2], (std::vector< std::string,std::allocator< std::string > >**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_2;
    return _wrap_MonteCarloSampling_evidenceImpact__SWIG_1(self, argc, argv);
  }
check_2:
  
  if (argc == 3) {
    PyObject *retobj = _wrap_MonteCarloSampling_evidenceImpact__SWIG_2(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'MonteCarloSampling_evidenceImpact'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::MonteCarloSampling< double >::evidenceImpact(gum::NodeId,gum::NodeSet const &)\n"
    "    gum::MonteCarloSampling< double >::evidenceImpact(std::string const &,std::vector< std::string,std::allocator< std::string > > const &)\n"
    "    gum::MonteCarloSampling< double >::evidenceImpact(PyObject *,PyObject *)\n");
  return 0;
}


SWIGINTERN PyObject *MonteCarloSampling_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj = NULL;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gum__MonteCarloSamplingT_double_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *MonteCarloSampling_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_LoopyImportanceSampling(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::IBayesNet< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::LoopySamplingInference< double,gum::ImportanceSampling > *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__IBayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LoopyImportanceSampling" "', argument " "1"" of type '" "gum::IBayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::IBayesNet< double > * >(argp1);
  {
    try {
      result = (gum::LoopySamplingInference< double,gum::ImportanceSampling > *)new gum::LoopySamplingInference< double,gum::ImportanceSampling >((gum::IBayesNet< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__ImportanceSampling_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_LoopyImportanceSampling(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::ImportanceSampling > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__ImportanceSampling_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LoopyImportanceSampling" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::ImportanceSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::ImportanceSampling > * >(argp1);
  {
    try {
      delete arg1;
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyImportanceSampling_makeInference_(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::ImportanceSampling > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__ImportanceSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyImportanceSampling_makeInference_" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::ImportanceSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::ImportanceSampling > * >(argp1);
  {
    try {
      (arg1)->makeInference_();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyImportanceSampling_setVirtualLBPSize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::ImportanceSampling > *arg1 = 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LoopyImportanceSampling_setVirtualLBPSize", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__ImportanceSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyImportanceSampling_setVirtualLBPSize" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::ImportanceSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::ImportanceSampling > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoopyImportanceSampling_setVirtualLBPSize" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setVirtualLBPSize(arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyImportanceSampling_setVerbosity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::ImportanceSampling > *arg1 = 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LoopyImportanceSampling_setVerbosity", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__ImportanceSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyImportanceSampling_setVerbosity" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::ImportanceSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::ImportanceSampling > * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoopyImportanceSampling_setVerbosity" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__setVerbosity(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyImportanceSampling_setEpsilon(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::ImportanceSampling > *arg1 = 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LoopyImportanceSampling_setEpsilon", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__ImportanceSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyImportanceSampling_setEpsilon" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::ImportanceSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::ImportanceSampling > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoopyImportanceSampling_setEpsilon" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__setEpsilon(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyImportanceSampling_setMinEpsilonRate(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::ImportanceSampling > *arg1 = 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LoopyImportanceSampling_setMinEpsilonRate", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__ImportanceSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyImportanceSampling_setMinEpsilonRate" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::ImportanceSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::ImportanceSampling > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoopyImportanceSampling_setMinEpsilonRate" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__setMinEpsilonRate(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyImportanceSampling_setMaxIter(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::ImportanceSampling > *arg1 = 0 ;
  gum::Size arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LoopyImportanceSampling_setMaxIter", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__ImportanceSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyImportanceSampling_setMaxIter" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::ImportanceSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::ImportanceSampling > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoopyImportanceSampling_setMaxIter" "', argument " "2"" of type '" "gum::Size""'");
  } 
  arg2 = static_cast< gum::Size >(val2);
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__setMaxIter(arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyImportanceSampling_setMaxTime(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::ImportanceSampling > *arg1 = 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LoopyImportanceSampling_setMaxTime", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__ImportanceSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyImportanceSampling_setMaxTime" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::ImportanceSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::ImportanceSampling > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoopyImportanceSampling_setMaxTime" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__setMaxTime(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyImportanceSampling_setPeriodSize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::ImportanceSampling > *arg1 = 0 ;
  gum::Size arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LoopyImportanceSampling_setPeriodSize", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__ImportanceSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyImportanceSampling_setPeriodSize" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::ImportanceSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::ImportanceSampling > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoopyImportanceSampling_setPeriodSize" "', argument " "2"" of type '" "gum::Size""'");
  } 
  arg2 = static_cast< gum::Size >(val2);
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__setPeriodSize(arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyImportanceSampling_verbosity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::ImportanceSampling > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__ImportanceSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyImportanceSampling_verbosity" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::ImportanceSampling > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::ImportanceSampling > * >(argp1);
  {
    try {
      result = (bool)gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__verbosity((gum::LoopySamplingInference< double,gum::ImportanceSampling > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyImportanceSampling_epsilon(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::ImportanceSampling > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__ImportanceSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyImportanceSampling_epsilon" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::ImportanceSampling > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::ImportanceSampling > * >(argp1);
  {
    try {
      result = (double)gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__epsilon((gum::LoopySamplingInference< double,gum::ImportanceSampling > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyImportanceSampling_minEpsilonRate(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::ImportanceSampling > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__ImportanceSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyImportanceSampling_minEpsilonRate" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::ImportanceSampling > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::ImportanceSampling > * >(argp1);
  {
    try {
      result = (double)gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__minEpsilonRate((gum::LoopySamplingInference< double,gum::ImportanceSampling > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyImportanceSampling_maxIter(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::ImportanceSampling > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::Size result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__ImportanceSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyImportanceSampling_maxIter" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::ImportanceSampling > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::ImportanceSampling > * >(argp1);
  {
    try {
      result = gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__maxIter((gum::LoopySamplingInference< double,gum::ImportanceSampling > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyImportanceSampling_maxTime(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::ImportanceSampling > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__ImportanceSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyImportanceSampling_maxTime" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::ImportanceSampling > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::ImportanceSampling > * >(argp1);
  {
    try {
      result = (double)gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__maxTime((gum::LoopySamplingInference< double,gum::ImportanceSampling > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyImportanceSampling_periodSize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::ImportanceSampling > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::Size result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__ImportanceSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyImportanceSampling_periodSize" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::ImportanceSampling > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::ImportanceSampling > * >(argp1);
  {
    try {
      result = gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__periodSize((gum::LoopySamplingInference< double,gum::ImportanceSampling > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyImportanceSampling_nbrIterations(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::ImportanceSampling > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::Size result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__ImportanceSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyImportanceSampling_nbrIterations" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::ImportanceSampling > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::ImportanceSampling > * >(argp1);
  {
    try {
      result = gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__nbrIterations((gum::LoopySamplingInference< double,gum::ImportanceSampling > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyImportanceSampling_currentTime(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::ImportanceSampling > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__ImportanceSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyImportanceSampling_currentTime" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::ImportanceSampling > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::ImportanceSampling > * >(argp1);
  {
    try {
      result = (double)gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__currentTime((gum::LoopySamplingInference< double,gum::ImportanceSampling > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyImportanceSampling_messageApproximationScheme(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::ImportanceSampling > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__ImportanceSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyImportanceSampling_messageApproximationScheme" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::ImportanceSampling > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::ImportanceSampling > * >(argp1);
  {
    try {
      result = gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__messageApproximationScheme((gum::LoopySamplingInference< double,gum::ImportanceSampling > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyImportanceSampling_history(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::ImportanceSampling > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< double,std::allocator< double > > *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__ImportanceSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyImportanceSampling_history" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::ImportanceSampling > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::ImportanceSampling > * >(argp1);
  {
    try {
      result = (std::vector< double,std::allocator< double > > *) &gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__history((gum::LoopySamplingInference< double,gum::ImportanceSampling > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< double,std::allocator< double > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyImportanceSampling__asIApproximationSchemeConfiguration(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::ImportanceSampling > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::IApproximationSchemeConfiguration *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__ImportanceSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyImportanceSampling__asIApproximationSchemeConfiguration" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::ImportanceSampling > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::ImportanceSampling > * >(argp1);
  {
    try {
      result = (gum::IApproximationSchemeConfiguration *) &gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg___asIApproximationSchemeConfiguration((gum::LoopySamplingInference< double,gum::ImportanceSampling > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__IApproximationSchemeConfiguration, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyImportanceSampling_makeInference(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::ImportanceSampling > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__ImportanceSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyImportanceSampling_makeInference" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::ImportanceSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::ImportanceSampling > * >(argp1);
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__makeInference(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyImportanceSampling_posterior__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::ImportanceSampling > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  gum::Tensor< double > result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__ImportanceSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyImportanceSampling_posterior" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::ImportanceSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::ImportanceSampling > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoopyImportanceSampling_posterior" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__posterior__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::Tensor< double >(result)), SWIGTYPE_p_gum__TensorT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyImportanceSampling_posterior__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::ImportanceSampling > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  gum::Tensor< double > result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__ImportanceSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyImportanceSampling_posterior" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::ImportanceSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::ImportanceSampling > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LoopyImportanceSampling_posterior" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyImportanceSampling_posterior" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__posterior__SWIG_1(arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::Tensor< double >(result)), SWIGTYPE_p_gum__TensorT_double_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyImportanceSampling_posterior(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "LoopyImportanceSampling_posterior", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_LoopyImportanceSampling_posterior__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_LoopyImportanceSampling_posterior__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LoopyImportanceSampling_posterior'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::LoopySamplingInference< double,gum::ImportanceSampling >::posterior(gum::NodeId const)\n"
    "    gum::LoopySamplingInference< double,gum::ImportanceSampling >::posterior(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LoopyImportanceSampling_addEvidence__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::ImportanceSampling > *arg1 = 0 ;
  gum::NodeId arg2 ;
  gum::Idx arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__ImportanceSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyImportanceSampling_addEvidence" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::ImportanceSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::ImportanceSampling > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoopyImportanceSampling_addEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "LoopyImportanceSampling_addEvidence" "', argument " "3"" of type '" "gum::Idx""'");
  } 
  arg3 = static_cast< gum::Idx >(val3);
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__addEvidence__SWIG_0(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyImportanceSampling_addEvidence__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::ImportanceSampling > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  gum::Idx arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  size_t val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__ImportanceSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyImportanceSampling_addEvidence" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::ImportanceSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::ImportanceSampling > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LoopyImportanceSampling_addEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyImportanceSampling_addEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "LoopyImportanceSampling_addEvidence" "', argument " "3"" of type '" "gum::Idx""'");
  } 
  arg3 = static_cast< gum::Idx >(val3);
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__addEvidence__SWIG_1(arg1,(std::string const &)*arg2,SWIG_STD_MOVE(arg3));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyImportanceSampling_addEvidence__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::ImportanceSampling > *arg1 = 0 ;
  gum::NodeId arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__ImportanceSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyImportanceSampling_addEvidence" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::ImportanceSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::ImportanceSampling > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoopyImportanceSampling_addEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LoopyImportanceSampling_addEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyImportanceSampling_addEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__addEvidence__SWIG_2(arg1,SWIG_STD_MOVE(arg2),(std::string const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyImportanceSampling_addEvidence__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::ImportanceSampling > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__ImportanceSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyImportanceSampling_addEvidence" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::ImportanceSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::ImportanceSampling > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LoopyImportanceSampling_addEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyImportanceSampling_addEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LoopyImportanceSampling_addEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyImportanceSampling_addEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__addEvidence__SWIG_3(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyImportanceSampling_addEvidence__SWIG_4(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::ImportanceSampling > *arg1 = 0 ;
  gum::NodeId arg2 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__ImportanceSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyImportanceSampling_addEvidence" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::ImportanceSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::ImportanceSampling > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoopyImportanceSampling_addEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LoopyImportanceSampling_addEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyImportanceSampling_addEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__addEvidence__SWIG_4(arg1,SWIG_STD_MOVE(arg2),(std::vector< double,std::allocator< double > > const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyImportanceSampling_addEvidence__SWIG_5(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::ImportanceSampling > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__ImportanceSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyImportanceSampling_addEvidence" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::ImportanceSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::ImportanceSampling > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LoopyImportanceSampling_addEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyImportanceSampling_addEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LoopyImportanceSampling_addEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyImportanceSampling_addEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__addEvidence__SWIG_5(arg1,(std::string const &)*arg2,(std::vector< double,std::allocator< double > > const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyImportanceSampling_addEvidence__SWIG_6(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::ImportanceSampling > *arg1 = 0 ;
  gum::Tensor< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__ImportanceSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyImportanceSampling_addEvidence" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::ImportanceSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::ImportanceSampling > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_gum__TensorT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LoopyImportanceSampling_addEvidence" "', argument " "2"" of type '" "gum::Tensor< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyImportanceSampling_addEvidence" "', argument " "2"" of type '" "gum::Tensor< double > const &""'"); 
  }
  arg2 = reinterpret_cast< gum::Tensor< double > * >(argp2);
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__addEvidence__SWIG_6(arg1,(gum::Tensor< double > const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyImportanceSampling_addEvidence(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "LoopyImportanceSampling_addEvidence", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    PyObject *retobj = _wrap_LoopyImportanceSampling_addEvidence__SWIG_6(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_2;
    {
      {
        int res = SWIG_AsVal_size_t(argv[2], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_2;
    return _wrap_LoopyImportanceSampling_addEvidence__SWIG_0(self, argc, argv);
  }
check_2:
  
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_3;
    {
      int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_3;
    return _wrap_LoopyImportanceSampling_addEvidence__SWIG_2(self, argc, argv);
  }
check_3:
  
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_4;
    {
      int res = swig::asptr(argv[2], (std::vector< double,std::allocator< double > >**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_4;
    return _wrap_LoopyImportanceSampling_addEvidence__SWIG_4(self, argc, argv);
  }
check_4:
  
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[2], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_5;
    return _wrap_LoopyImportanceSampling_addEvidence__SWIG_1(self, argc, argv);
  }
check_5:
  
  if (argc == 3) {
    int _v = 0;
    {
      int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_6;
    return _wrap_LoopyImportanceSampling_addEvidence__SWIG_3(self, argc, argv);
  }
check_6:
  
  if (argc == 3) {
    PyObject *retobj = _wrap_LoopyImportanceSampling_addEvidence__SWIG_5(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LoopyImportanceSampling_addEvidence'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::LoopySamplingInference< double,gum::ImportanceSampling >::addEvidence(gum::NodeId const,gum::Idx const)\n"
    "    gum::LoopySamplingInference< double,gum::ImportanceSampling >::addEvidence(std::string const &,gum::Idx const)\n"
    "    gum::LoopySamplingInference< double,gum::ImportanceSampling >::addEvidence(gum::NodeId const,std::string const &)\n"
    "    gum::LoopySamplingInference< double,gum::ImportanceSampling >::addEvidence(std::string const &,std::string const &)\n"
    "    gum::LoopySamplingInference< double,gum::ImportanceSampling >::addEvidence(gum::NodeId const,std::vector< double,std::allocator< double > > const &)\n"
    "    gum::LoopySamplingInference< double,gum::ImportanceSampling >::addEvidence(std::string const &,std::vector< double,std::allocator< double > > const &)\n"
    "    gum::LoopySamplingInference< double,gum::ImportanceSampling >::addEvidence(gum::Tensor< double > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LoopyImportanceSampling_chgEvidence__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::ImportanceSampling > *arg1 = 0 ;
  gum::NodeId arg2 ;
  gum::Idx arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__ImportanceSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyImportanceSampling_chgEvidence" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::ImportanceSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::ImportanceSampling > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoopyImportanceSampling_chgEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "LoopyImportanceSampling_chgEvidence" "', argument " "3"" of type '" "gum::Idx""'");
  } 
  arg3 = static_cast< gum::Idx >(val3);
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__chgEvidence__SWIG_0(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyImportanceSampling_chgEvidence__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::ImportanceSampling > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  gum::Idx arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  size_t val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__ImportanceSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyImportanceSampling_chgEvidence" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::ImportanceSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::ImportanceSampling > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LoopyImportanceSampling_chgEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyImportanceSampling_chgEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "LoopyImportanceSampling_chgEvidence" "', argument " "3"" of type '" "gum::Idx""'");
  } 
  arg3 = static_cast< gum::Idx >(val3);
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__chgEvidence__SWIG_1(arg1,(std::string const &)*arg2,SWIG_STD_MOVE(arg3));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyImportanceSampling_chgEvidence__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::ImportanceSampling > *arg1 = 0 ;
  gum::NodeId arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__ImportanceSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyImportanceSampling_chgEvidence" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::ImportanceSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::ImportanceSampling > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoopyImportanceSampling_chgEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LoopyImportanceSampling_chgEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyImportanceSampling_chgEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__chgEvidence__SWIG_2(arg1,SWIG_STD_MOVE(arg2),(std::string const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyImportanceSampling_chgEvidence__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::ImportanceSampling > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__ImportanceSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyImportanceSampling_chgEvidence" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::ImportanceSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::ImportanceSampling > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LoopyImportanceSampling_chgEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyImportanceSampling_chgEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LoopyImportanceSampling_chgEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyImportanceSampling_chgEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__chgEvidence__SWIG_3(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyImportanceSampling_chgEvidence__SWIG_4(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::ImportanceSampling > *arg1 = 0 ;
  gum::Tensor< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__ImportanceSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyImportanceSampling_chgEvidence" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::ImportanceSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::ImportanceSampling > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_gum__TensorT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LoopyImportanceSampling_chgEvidence" "', argument " "2"" of type '" "gum::Tensor< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyImportanceSampling_chgEvidence" "', argument " "2"" of type '" "gum::Tensor< double > const &""'"); 
  }
  arg2 = reinterpret_cast< gum::Tensor< double > * >(argp2);
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__chgEvidence__SWIG_4(arg1,(gum::Tensor< double > const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyImportanceSampling_chgEvidence__SWIG_5(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::ImportanceSampling > *arg1 = 0 ;
  gum::NodeId arg2 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__ImportanceSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyImportanceSampling_chgEvidence" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::ImportanceSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::ImportanceSampling > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoopyImportanceSampling_chgEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LoopyImportanceSampling_chgEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyImportanceSampling_chgEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__chgEvidence__SWIG_5(arg1,SWIG_STD_MOVE(arg2),(std::vector< double,std::allocator< double > > const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyImportanceSampling_chgEvidence__SWIG_6(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::ImportanceSampling > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__ImportanceSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyImportanceSampling_chgEvidence" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::ImportanceSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::ImportanceSampling > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LoopyImportanceSampling_chgEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyImportanceSampling_chgEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LoopyImportanceSampling_chgEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyImportanceSampling_chgEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__chgEvidence__SWIG_6(arg1,(std::string const &)*arg2,(std::vector< double,std::allocator< double > > const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyImportanceSampling_chgEvidence(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "LoopyImportanceSampling_chgEvidence", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    PyObject *retobj = _wrap_LoopyImportanceSampling_chgEvidence__SWIG_4(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_2;
    {
      {
        int res = SWIG_AsVal_size_t(argv[2], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_2;
    return _wrap_LoopyImportanceSampling_chgEvidence__SWIG_0(self, argc, argv);
  }
check_2:
  
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_3;
    {
      int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_3;
    return _wrap_LoopyImportanceSampling_chgEvidence__SWIG_2(self, argc, argv);
  }
check_3:
  
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_4;
    {
      int res = swig::asptr(argv[2], (std::vector< double,std::allocator< double > >**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_4;
    return _wrap_LoopyImportanceSampling_chgEvidence__SWIG_5(self, argc, argv);
  }
check_4:
  
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[2], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_5;
    return _wrap_LoopyImportanceSampling_chgEvidence__SWIG_1(self, argc, argv);
  }
check_5:
  
  if (argc == 3) {
    int _v = 0;
    {
      int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_6;
    return _wrap_LoopyImportanceSampling_chgEvidence__SWIG_3(self, argc, argv);
  }
check_6:
  
  if (argc == 3) {
    PyObject *retobj = _wrap_LoopyImportanceSampling_chgEvidence__SWIG_6(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LoopyImportanceSampling_chgEvidence'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::LoopySamplingInference< double,gum::ImportanceSampling >::chgEvidence(gum::NodeId const,gum::Idx const)\n"
    "    gum::LoopySamplingInference< double,gum::ImportanceSampling >::chgEvidence(std::string const &,gum::Idx const)\n"
    "    gum::LoopySamplingInference< double,gum::ImportanceSampling >::chgEvidence(gum::NodeId const,std::string const &)\n"
    "    gum::LoopySamplingInference< double,gum::ImportanceSampling >::chgEvidence(std::string const &,std::string const &)\n"
    "    gum::LoopySamplingInference< double,gum::ImportanceSampling >::chgEvidence(gum::Tensor< double > const &)\n"
    "    gum::LoopySamplingInference< double,gum::ImportanceSampling >::chgEvidence(gum::NodeId const,std::vector< double,std::allocator< double > > const &)\n"
    "    gum::LoopySamplingInference< double,gum::ImportanceSampling >::chgEvidence(std::string const &,std::vector< double,std::allocator< double > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LoopyImportanceSampling_hasEvidence__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::ImportanceSampling > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  bool result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__ImportanceSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyImportanceSampling_hasEvidence" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::ImportanceSampling > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::ImportanceSampling > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoopyImportanceSampling_hasEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (bool)gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__hasEvidence__SWIG_0((gum::LoopySamplingInference< double,gum::ImportanceSampling > const *)arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyImportanceSampling_hasEvidence__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::ImportanceSampling > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  bool result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__ImportanceSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyImportanceSampling_hasEvidence" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::ImportanceSampling > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::ImportanceSampling > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LoopyImportanceSampling_hasEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyImportanceSampling_hasEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__hasEvidence__SWIG_1((gum::LoopySamplingInference< double,gum::ImportanceSampling > const *)arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyImportanceSampling_hasEvidence(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "LoopyImportanceSampling_hasEvidence", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_LoopyImportanceSampling_hasEvidence__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_LoopyImportanceSampling_hasEvidence__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LoopyImportanceSampling_hasEvidence'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::LoopySamplingInference< double,gum::ImportanceSampling >::hasEvidence(gum::NodeId const) const\n"
    "    gum::LoopySamplingInference< double,gum::ImportanceSampling >::hasEvidence(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LoopyImportanceSampling_eraseAllEvidence(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::ImportanceSampling > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__ImportanceSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyImportanceSampling_eraseAllEvidence" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::ImportanceSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::ImportanceSampling > * >(argp1);
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__eraseAllEvidence(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyImportanceSampling_eraseEvidence__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::ImportanceSampling > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__ImportanceSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyImportanceSampling_eraseEvidence" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::ImportanceSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::ImportanceSampling > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoopyImportanceSampling_eraseEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__eraseEvidence__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyImportanceSampling_eraseEvidence__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::ImportanceSampling > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__ImportanceSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyImportanceSampling_eraseEvidence" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::ImportanceSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::ImportanceSampling > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LoopyImportanceSampling_eraseEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyImportanceSampling_eraseEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__eraseEvidence__SWIG_1(arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyImportanceSampling_eraseEvidence(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "LoopyImportanceSampling_eraseEvidence", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_LoopyImportanceSampling_eraseEvidence__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_LoopyImportanceSampling_eraseEvidence__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LoopyImportanceSampling_eraseEvidence'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::LoopySamplingInference< double,gum::ImportanceSampling >::eraseEvidence(gum::NodeId const)\n"
    "    gum::LoopySamplingInference< double,gum::ImportanceSampling >::eraseEvidence(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LoopyImportanceSampling_hasSoftEvidence__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::ImportanceSampling > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  bool result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__ImportanceSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyImportanceSampling_hasSoftEvidence" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::ImportanceSampling > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::ImportanceSampling > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoopyImportanceSampling_hasSoftEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (bool)gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__hasSoftEvidence__SWIG_0((gum::LoopySamplingInference< double,gum::ImportanceSampling > const *)arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyImportanceSampling_hasHardEvidence(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::ImportanceSampling > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LoopyImportanceSampling_hasHardEvidence", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__ImportanceSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyImportanceSampling_hasHardEvidence" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::ImportanceSampling > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::ImportanceSampling > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LoopyImportanceSampling_hasHardEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyImportanceSampling_hasHardEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__hasHardEvidence((gum::LoopySamplingInference< double,gum::ImportanceSampling > const *)arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyImportanceSampling_hasSoftEvidence__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::ImportanceSampling > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  bool result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__ImportanceSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyImportanceSampling_hasSoftEvidence" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::ImportanceSampling > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::ImportanceSampling > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LoopyImportanceSampling_hasSoftEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyImportanceSampling_hasSoftEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__hasSoftEvidence__SWIG_1((gum::LoopySamplingInference< double,gum::ImportanceSampling > const *)arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyImportanceSampling_hasSoftEvidence(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "LoopyImportanceSampling_hasSoftEvidence", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_LoopyImportanceSampling_hasSoftEvidence__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_LoopyImportanceSampling_hasSoftEvidence__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LoopyImportanceSampling_hasSoftEvidence'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::LoopySamplingInference< double,gum::ImportanceSampling >::hasSoftEvidence(gum::NodeId const) const\n"
    "    gum::LoopySamplingInference< double,gum::ImportanceSampling >::hasSoftEvidence(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LoopyImportanceSampling_nbrEvidence(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::ImportanceSampling > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::Size result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__ImportanceSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyImportanceSampling_nbrEvidence" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::ImportanceSampling > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::ImportanceSampling > * >(argp1);
  {
    try {
      result = gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__nbrEvidence((gum::LoopySamplingInference< double,gum::ImportanceSampling > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyImportanceSampling_nbrHardEvidence(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::ImportanceSampling > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::Size result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__ImportanceSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyImportanceSampling_nbrHardEvidence" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::ImportanceSampling > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::ImportanceSampling > * >(argp1);
  {
    try {
      result = gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__nbrHardEvidence((gum::LoopySamplingInference< double,gum::ImportanceSampling > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyImportanceSampling_nbrSoftEvidence(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::ImportanceSampling > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::Size result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__ImportanceSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyImportanceSampling_nbrSoftEvidence" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::ImportanceSampling > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::ImportanceSampling > * >(argp1);
  {
    try {
      result = gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__nbrSoftEvidence((gum::LoopySamplingInference< double,gum::ImportanceSampling > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyImportanceSampling_eraseAllTargets(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::ImportanceSampling > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__ImportanceSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyImportanceSampling_eraseAllTargets" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::ImportanceSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::ImportanceSampling > * >(argp1);
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__eraseAllTargets(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyImportanceSampling_addAllTargets(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::ImportanceSampling > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__ImportanceSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyImportanceSampling_addAllTargets" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::ImportanceSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::ImportanceSampling > * >(argp1);
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__addAllTargets(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyImportanceSampling_addTarget__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::ImportanceSampling > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__ImportanceSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyImportanceSampling_addTarget" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::ImportanceSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::ImportanceSampling > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoopyImportanceSampling_addTarget" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__addTarget__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyImportanceSampling_addTarget__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::ImportanceSampling > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__ImportanceSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyImportanceSampling_addTarget" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::ImportanceSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::ImportanceSampling > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LoopyImportanceSampling_addTarget" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyImportanceSampling_addTarget" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__addTarget__SWIG_1(arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyImportanceSampling_addTarget(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "LoopyImportanceSampling_addTarget", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_LoopyImportanceSampling_addTarget__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_LoopyImportanceSampling_addTarget__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LoopyImportanceSampling_addTarget'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::LoopySamplingInference< double,gum::ImportanceSampling >::addTarget(gum::NodeId const)\n"
    "    gum::LoopySamplingInference< double,gum::ImportanceSampling >::addTarget(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LoopyImportanceSampling_eraseTarget__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::ImportanceSampling > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__ImportanceSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyImportanceSampling_eraseTarget" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::ImportanceSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::ImportanceSampling > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoopyImportanceSampling_eraseTarget" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__eraseTarget__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyImportanceSampling_eraseTarget__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::ImportanceSampling > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__ImportanceSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyImportanceSampling_eraseTarget" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::ImportanceSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::ImportanceSampling > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LoopyImportanceSampling_eraseTarget" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyImportanceSampling_eraseTarget" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__eraseTarget__SWIG_1(arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyImportanceSampling_eraseTarget(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "LoopyImportanceSampling_eraseTarget", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_LoopyImportanceSampling_eraseTarget__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_LoopyImportanceSampling_eraseTarget__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LoopyImportanceSampling_eraseTarget'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::LoopySamplingInference< double,gum::ImportanceSampling >::eraseTarget(gum::NodeId const)\n"
    "    gum::LoopySamplingInference< double,gum::ImportanceSampling >::eraseTarget(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LoopyImportanceSampling_isTarget__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::ImportanceSampling > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  bool result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__ImportanceSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyImportanceSampling_isTarget" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::ImportanceSampling > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::ImportanceSampling > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoopyImportanceSampling_isTarget" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (bool)gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__isTarget__SWIG_0((gum::LoopySamplingInference< double,gum::ImportanceSampling > const *)arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyImportanceSampling_isTarget__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::ImportanceSampling > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  bool result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__ImportanceSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyImportanceSampling_isTarget" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::ImportanceSampling > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::ImportanceSampling > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LoopyImportanceSampling_isTarget" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyImportanceSampling_isTarget" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__isTarget__SWIG_1((gum::LoopySamplingInference< double,gum::ImportanceSampling > const *)arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyImportanceSampling_isTarget(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "LoopyImportanceSampling_isTarget", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_LoopyImportanceSampling_isTarget__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_LoopyImportanceSampling_isTarget__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LoopyImportanceSampling_isTarget'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::LoopySamplingInference< double,gum::ImportanceSampling >::isTarget(gum::NodeId const) const\n"
    "    gum::LoopySamplingInference< double,gum::ImportanceSampling >::isTarget(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LoopyImportanceSampling_nbrTargets(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::ImportanceSampling > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::Size result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__ImportanceSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyImportanceSampling_nbrTargets" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::ImportanceSampling > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::ImportanceSampling > * >(argp1);
  {
    try {
      result = gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__nbrTargets((gum::LoopySamplingInference< double,gum::ImportanceSampling > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyImportanceSampling_H__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::ImportanceSampling > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  double result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__ImportanceSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyImportanceSampling_H" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::ImportanceSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::ImportanceSampling > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoopyImportanceSampling_H" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (double)gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__H__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyImportanceSampling_H__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::ImportanceSampling > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  double result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__ImportanceSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyImportanceSampling_H" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::ImportanceSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::ImportanceSampling > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LoopyImportanceSampling_H" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyImportanceSampling_H" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (double)gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__H__SWIG_1(arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyImportanceSampling_H(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "LoopyImportanceSampling_H", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_LoopyImportanceSampling_H__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_LoopyImportanceSampling_H__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LoopyImportanceSampling_H'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::LoopySamplingInference< double,gum::ImportanceSampling >::H(gum::NodeId const)\n"
    "    gum::LoopySamplingInference< double,gum::ImportanceSampling >::H(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LoopyImportanceSampling_evidenceImpact__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::ImportanceSampling > *arg1 = 0 ;
  gum::NodeId arg2 ;
  gum::NodeSet *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  gum::Tensor< double > result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__ImportanceSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyImportanceSampling_evidenceImpact" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::ImportanceSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::ImportanceSampling > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoopyImportanceSampling_evidenceImpact" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_gum__SetT_std__size_t_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LoopyImportanceSampling_evidenceImpact" "', argument " "3"" of type '" "gum::NodeSet const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyImportanceSampling_evidenceImpact" "', argument " "3"" of type '" "gum::NodeSet const &""'"); 
  }
  arg3 = reinterpret_cast< gum::NodeSet * >(argp3);
  {
    try {
      result = gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__evidenceImpact__SWIG_0(arg1,SWIG_STD_MOVE(arg2),(gum::Set< std::size_t > const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::Tensor< double >(result)), SWIGTYPE_p_gum__TensorT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyImportanceSampling_evidenceImpact__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::ImportanceSampling > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  gum::Tensor< double > result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__ImportanceSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyImportanceSampling_evidenceImpact" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::ImportanceSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::ImportanceSampling > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LoopyImportanceSampling_evidenceImpact" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyImportanceSampling_evidenceImpact" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LoopyImportanceSampling_evidenceImpact" "', argument " "3"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyImportanceSampling_evidenceImpact" "', argument " "3"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      result = gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__evidenceImpact__SWIG_1(arg1,(std::string const &)*arg2,(std::vector< std::string,std::allocator< std::string > > const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::Tensor< double >(result)), SWIGTYPE_p_gum__TensorT_double_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyImportanceSampling_BN(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::ImportanceSampling > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::IBayesNet< double > *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__ImportanceSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyImportanceSampling_BN" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::ImportanceSampling > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::ImportanceSampling > * >(argp1);
  {
    try {
      result = (gum::IBayesNet< double > *) &gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__BN((gum::LoopySamplingInference< double,gum::ImportanceSampling > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__IBayesNetT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyImportanceSampling_currentPosterior__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::ImportanceSampling > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  gum::Tensor< double > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__ImportanceSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyImportanceSampling_currentPosterior" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::ImportanceSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::ImportanceSampling > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoopyImportanceSampling_currentPosterior" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (gum::Tensor< double > *) &gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__currentPosterior__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__TensorT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyImportanceSampling_currentPosterior__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::ImportanceSampling > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  gum::Tensor< double > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__ImportanceSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyImportanceSampling_currentPosterior" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::ImportanceSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::ImportanceSampling > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LoopyImportanceSampling_currentPosterior" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyImportanceSampling_currentPosterior" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (gum::Tensor< double > *) &gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__currentPosterior__SWIG_1(arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__TensorT_double_t, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyImportanceSampling_currentPosterior(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "LoopyImportanceSampling_currentPosterior", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_LoopyImportanceSampling_currentPosterior__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_LoopyImportanceSampling_currentPosterior__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LoopyImportanceSampling_currentPosterior'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::LoopySamplingInference< double,gum::ImportanceSampling >::currentPosterior(gum::NodeId const)\n"
    "    gum::LoopySamplingInference< double,gum::ImportanceSampling >::currentPosterior(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LoopyImportanceSampling_setEvidence(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::ImportanceSampling > *arg1 = 0 ;
  PyObject *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LoopyImportanceSampling_setEvidence", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__ImportanceSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyImportanceSampling_setEvidence" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::ImportanceSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::ImportanceSampling > * >(argp1);
  arg2 = swig_obj[1];
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__setEvidence(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyImportanceSampling_updateEvidence(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::ImportanceSampling > *arg1 = 0 ;
  PyObject *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LoopyImportanceSampling_updateEvidence", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__ImportanceSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyImportanceSampling_updateEvidence" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::ImportanceSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::ImportanceSampling > * >(argp1);
  arg2 = swig_obj[1];
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__updateEvidence(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyImportanceSampling_setTargets(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::ImportanceSampling > *arg1 = 0 ;
  PyObject *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LoopyImportanceSampling_setTargets", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__ImportanceSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyImportanceSampling_setTargets" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::ImportanceSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::ImportanceSampling > * >(argp1);
  arg2 = swig_obj[1];
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__setTargets(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyImportanceSampling_hardEvidenceNodes(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::ImportanceSampling > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__ImportanceSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyImportanceSampling_hardEvidenceNodes" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::ImportanceSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::ImportanceSampling > * >(argp1);
  {
    try {
      result = (PyObject *)gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__hardEvidenceNodes(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyImportanceSampling_softEvidenceNodes(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::ImportanceSampling > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__ImportanceSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyImportanceSampling_softEvidenceNodes" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::ImportanceSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::ImportanceSampling > * >(argp1);
  {
    try {
      result = (PyObject *)gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__softEvidenceNodes(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyImportanceSampling_targets(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::ImportanceSampling > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__ImportanceSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyImportanceSampling_targets" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::ImportanceSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::ImportanceSampling > * >(argp1);
  {
    try {
      result = (PyObject *)gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__targets(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyImportanceSampling_evidenceImpact__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::ImportanceSampling > *arg1 = 0 ;
  PyObject *arg2 = 0 ;
  PyObject *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gum::Tensor< double > result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__ImportanceSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyImportanceSampling_evidenceImpact" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::ImportanceSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::ImportanceSampling > * >(argp1);
  arg2 = swig_obj[1];
  arg3 = swig_obj[2];
  {
    try {
      result = gum_LoopySamplingInference_Sl_double_Sc_gum_ImportanceSampling_Sg__evidenceImpact__SWIG_2(arg1,arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::Tensor< double >(result)), SWIGTYPE_p_gum__TensorT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyImportanceSampling_evidenceImpact(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "LoopyImportanceSampling_evidenceImpact", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    {
      int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_gum__SetT_std__size_t_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_1;
    return _wrap_LoopyImportanceSampling_evidenceImpact__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 3) {
    int _v = 0;
    {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_2;
    {
      int res = swig::asptr(argv[2], (std::vector< std::string,std::allocator< std::string > >**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_2;
    return _wrap_LoopyImportanceSampling_evidenceImpact__SWIG_1(self, argc, argv);
  }
check_2:
  
  if (argc == 3) {
    PyObject *retobj = _wrap_LoopyImportanceSampling_evidenceImpact__SWIG_2(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LoopyImportanceSampling_evidenceImpact'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::LoopySamplingInference< double,gum::ImportanceSampling >::evidenceImpact(gum::NodeId,gum::NodeSet const &)\n"
    "    gum::LoopySamplingInference< double,gum::ImportanceSampling >::evidenceImpact(std::string const &,std::vector< std::string,std::allocator< std::string > > const &)\n"
    "    gum::LoopySamplingInference< double,gum::ImportanceSampling >::evidenceImpact(PyObject *,PyObject *)\n");
  return 0;
}


SWIGINTERN PyObject *LoopyImportanceSampling_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj = NULL;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__ImportanceSampling_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *LoopyImportanceSampling_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_LoopyWeightedSampling(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::IBayesNet< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::LoopySamplingInference< double,gum::WeightedSampling > *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__IBayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LoopyWeightedSampling" "', argument " "1"" of type '" "gum::IBayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::IBayesNet< double > * >(argp1);
  {
    try {
      result = (gum::LoopySamplingInference< double,gum::WeightedSampling > *)new gum::LoopySamplingInference< double,gum::WeightedSampling >((gum::IBayesNet< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__WeightedSampling_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_LoopyWeightedSampling(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::WeightedSampling > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__WeightedSampling_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LoopyWeightedSampling" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::WeightedSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::WeightedSampling > * >(argp1);
  {
    try {
      delete arg1;
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyWeightedSampling_makeInference_(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::WeightedSampling > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__WeightedSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyWeightedSampling_makeInference_" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::WeightedSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::WeightedSampling > * >(argp1);
  {
    try {
      (arg1)->makeInference_();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyWeightedSampling_setVirtualLBPSize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::WeightedSampling > *arg1 = 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LoopyWeightedSampling_setVirtualLBPSize", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__WeightedSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyWeightedSampling_setVirtualLBPSize" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::WeightedSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::WeightedSampling > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoopyWeightedSampling_setVirtualLBPSize" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setVirtualLBPSize(arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyWeightedSampling_setVerbosity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::WeightedSampling > *arg1 = 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LoopyWeightedSampling_setVerbosity", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__WeightedSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyWeightedSampling_setVerbosity" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::WeightedSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::WeightedSampling > * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoopyWeightedSampling_setVerbosity" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__setVerbosity(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyWeightedSampling_setEpsilon(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::WeightedSampling > *arg1 = 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LoopyWeightedSampling_setEpsilon", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__WeightedSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyWeightedSampling_setEpsilon" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::WeightedSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::WeightedSampling > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoopyWeightedSampling_setEpsilon" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__setEpsilon(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyWeightedSampling_setMinEpsilonRate(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::WeightedSampling > *arg1 = 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LoopyWeightedSampling_setMinEpsilonRate", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__WeightedSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyWeightedSampling_setMinEpsilonRate" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::WeightedSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::WeightedSampling > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoopyWeightedSampling_setMinEpsilonRate" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__setMinEpsilonRate(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyWeightedSampling_setMaxIter(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::WeightedSampling > *arg1 = 0 ;
  gum::Size arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LoopyWeightedSampling_setMaxIter", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__WeightedSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyWeightedSampling_setMaxIter" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::WeightedSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::WeightedSampling > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoopyWeightedSampling_setMaxIter" "', argument " "2"" of type '" "gum::Size""'");
  } 
  arg2 = static_cast< gum::Size >(val2);
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__setMaxIter(arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyWeightedSampling_setMaxTime(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::WeightedSampling > *arg1 = 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LoopyWeightedSampling_setMaxTime", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__WeightedSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyWeightedSampling_setMaxTime" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::WeightedSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::WeightedSampling > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoopyWeightedSampling_setMaxTime" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__setMaxTime(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyWeightedSampling_setPeriodSize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::WeightedSampling > *arg1 = 0 ;
  gum::Size arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LoopyWeightedSampling_setPeriodSize", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__WeightedSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyWeightedSampling_setPeriodSize" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::WeightedSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::WeightedSampling > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoopyWeightedSampling_setPeriodSize" "', argument " "2"" of type '" "gum::Size""'");
  } 
  arg2 = static_cast< gum::Size >(val2);
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__setPeriodSize(arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyWeightedSampling_verbosity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::WeightedSampling > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__WeightedSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyWeightedSampling_verbosity" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::WeightedSampling > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::WeightedSampling > * >(argp1);
  {
    try {
      result = (bool)gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__verbosity((gum::LoopySamplingInference< double,gum::WeightedSampling > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyWeightedSampling_epsilon(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::WeightedSampling > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__WeightedSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyWeightedSampling_epsilon" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::WeightedSampling > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::WeightedSampling > * >(argp1);
  {
    try {
      result = (double)gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__epsilon((gum::LoopySamplingInference< double,gum::WeightedSampling > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyWeightedSampling_minEpsilonRate(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::WeightedSampling > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__WeightedSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyWeightedSampling_minEpsilonRate" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::WeightedSampling > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::WeightedSampling > * >(argp1);
  {
    try {
      result = (double)gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__minEpsilonRate((gum::LoopySamplingInference< double,gum::WeightedSampling > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyWeightedSampling_maxIter(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::WeightedSampling > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::Size result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__WeightedSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyWeightedSampling_maxIter" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::WeightedSampling > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::WeightedSampling > * >(argp1);
  {
    try {
      result = gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__maxIter((gum::LoopySamplingInference< double,gum::WeightedSampling > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyWeightedSampling_maxTime(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::WeightedSampling > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__WeightedSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyWeightedSampling_maxTime" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::WeightedSampling > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::WeightedSampling > * >(argp1);
  {
    try {
      result = (double)gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__maxTime((gum::LoopySamplingInference< double,gum::WeightedSampling > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyWeightedSampling_periodSize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::WeightedSampling > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::Size result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__WeightedSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyWeightedSampling_periodSize" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::WeightedSampling > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::WeightedSampling > * >(argp1);
  {
    try {
      result = gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__periodSize((gum::LoopySamplingInference< double,gum::WeightedSampling > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyWeightedSampling_nbrIterations(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::WeightedSampling > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::Size result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__WeightedSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyWeightedSampling_nbrIterations" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::WeightedSampling > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::WeightedSampling > * >(argp1);
  {
    try {
      result = gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__nbrIterations((gum::LoopySamplingInference< double,gum::WeightedSampling > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyWeightedSampling_currentTime(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::WeightedSampling > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__WeightedSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyWeightedSampling_currentTime" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::WeightedSampling > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::WeightedSampling > * >(argp1);
  {
    try {
      result = (double)gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__currentTime((gum::LoopySamplingInference< double,gum::WeightedSampling > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyWeightedSampling_messageApproximationScheme(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::WeightedSampling > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__WeightedSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyWeightedSampling_messageApproximationScheme" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::WeightedSampling > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::WeightedSampling > * >(argp1);
  {
    try {
      result = gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__messageApproximationScheme((gum::LoopySamplingInference< double,gum::WeightedSampling > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyWeightedSampling_history(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::WeightedSampling > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< double,std::allocator< double > > *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__WeightedSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyWeightedSampling_history" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::WeightedSampling > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::WeightedSampling > * >(argp1);
  {
    try {
      result = (std::vector< double,std::allocator< double > > *) &gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__history((gum::LoopySamplingInference< double,gum::WeightedSampling > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< double,std::allocator< double > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyWeightedSampling__asIApproximationSchemeConfiguration(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::WeightedSampling > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::IApproximationSchemeConfiguration *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__WeightedSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyWeightedSampling__asIApproximationSchemeConfiguration" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::WeightedSampling > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::WeightedSampling > * >(argp1);
  {
    try {
      result = (gum::IApproximationSchemeConfiguration *) &gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg___asIApproximationSchemeConfiguration((gum::LoopySamplingInference< double,gum::WeightedSampling > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__IApproximationSchemeConfiguration, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyWeightedSampling_makeInference(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::WeightedSampling > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__WeightedSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyWeightedSampling_makeInference" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::WeightedSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::WeightedSampling > * >(argp1);
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__makeInference(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyWeightedSampling_posterior__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::WeightedSampling > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  gum::Tensor< double > result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__WeightedSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyWeightedSampling_posterior" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::WeightedSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::WeightedSampling > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoopyWeightedSampling_posterior" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__posterior__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::Tensor< double >(result)), SWIGTYPE_p_gum__TensorT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyWeightedSampling_posterior__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::WeightedSampling > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  gum::Tensor< double > result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__WeightedSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyWeightedSampling_posterior" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::WeightedSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::WeightedSampling > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LoopyWeightedSampling_posterior" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyWeightedSampling_posterior" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__posterior__SWIG_1(arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::Tensor< double >(result)), SWIGTYPE_p_gum__TensorT_double_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyWeightedSampling_posterior(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "LoopyWeightedSampling_posterior", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_LoopyWeightedSampling_posterior__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_LoopyWeightedSampling_posterior__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LoopyWeightedSampling_posterior'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::LoopySamplingInference< double,gum::WeightedSampling >::posterior(gum::NodeId const)\n"
    "    gum::LoopySamplingInference< double,gum::WeightedSampling >::posterior(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LoopyWeightedSampling_addEvidence__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::WeightedSampling > *arg1 = 0 ;
  gum::NodeId arg2 ;
  gum::Idx arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__WeightedSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyWeightedSampling_addEvidence" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::WeightedSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::WeightedSampling > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoopyWeightedSampling_addEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "LoopyWeightedSampling_addEvidence" "', argument " "3"" of type '" "gum::Idx""'");
  } 
  arg3 = static_cast< gum::Idx >(val3);
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__addEvidence__SWIG_0(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyWeightedSampling_addEvidence__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::WeightedSampling > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  gum::Idx arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  size_t val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__WeightedSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyWeightedSampling_addEvidence" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::WeightedSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::WeightedSampling > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LoopyWeightedSampling_addEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyWeightedSampling_addEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "LoopyWeightedSampling_addEvidence" "', argument " "3"" of type '" "gum::Idx""'");
  } 
  arg3 = static_cast< gum::Idx >(val3);
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__addEvidence__SWIG_1(arg1,(std::string const &)*arg2,SWIG_STD_MOVE(arg3));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyWeightedSampling_addEvidence__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::WeightedSampling > *arg1 = 0 ;
  gum::NodeId arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__WeightedSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyWeightedSampling_addEvidence" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::WeightedSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::WeightedSampling > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoopyWeightedSampling_addEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LoopyWeightedSampling_addEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyWeightedSampling_addEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__addEvidence__SWIG_2(arg1,SWIG_STD_MOVE(arg2),(std::string const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyWeightedSampling_addEvidence__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::WeightedSampling > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__WeightedSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyWeightedSampling_addEvidence" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::WeightedSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::WeightedSampling > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LoopyWeightedSampling_addEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyWeightedSampling_addEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LoopyWeightedSampling_addEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyWeightedSampling_addEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__addEvidence__SWIG_3(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyWeightedSampling_addEvidence__SWIG_4(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::WeightedSampling > *arg1 = 0 ;
  gum::NodeId arg2 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__WeightedSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyWeightedSampling_addEvidence" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::WeightedSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::WeightedSampling > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoopyWeightedSampling_addEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LoopyWeightedSampling_addEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyWeightedSampling_addEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__addEvidence__SWIG_4(arg1,SWIG_STD_MOVE(arg2),(std::vector< double,std::allocator< double > > const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyWeightedSampling_addEvidence__SWIG_5(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::WeightedSampling > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__WeightedSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyWeightedSampling_addEvidence" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::WeightedSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::WeightedSampling > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LoopyWeightedSampling_addEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyWeightedSampling_addEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LoopyWeightedSampling_addEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyWeightedSampling_addEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__addEvidence__SWIG_5(arg1,(std::string const &)*arg2,(std::vector< double,std::allocator< double > > const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyWeightedSampling_addEvidence__SWIG_6(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::WeightedSampling > *arg1 = 0 ;
  gum::Tensor< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__WeightedSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyWeightedSampling_addEvidence" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::WeightedSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::WeightedSampling > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_gum__TensorT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LoopyWeightedSampling_addEvidence" "', argument " "2"" of type '" "gum::Tensor< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyWeightedSampling_addEvidence" "', argument " "2"" of type '" "gum::Tensor< double > const &""'"); 
  }
  arg2 = reinterpret_cast< gum::Tensor< double > * >(argp2);
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__addEvidence__SWIG_6(arg1,(gum::Tensor< double > const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyWeightedSampling_addEvidence(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "LoopyWeightedSampling_addEvidence", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    PyObject *retobj = _wrap_LoopyWeightedSampling_addEvidence__SWIG_6(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_2;
    {
      {
        int res = SWIG_AsVal_size_t(argv[2], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_2;
    return _wrap_LoopyWeightedSampling_addEvidence__SWIG_0(self, argc, argv);
  }
check_2:
  
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_3;
    {
      int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_3;
    return _wrap_LoopyWeightedSampling_addEvidence__SWIG_2(self, argc, argv);
  }
check_3:
  
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_4;
    {
      int res = swig::asptr(argv[2], (std::vector< double,std::allocator< double > >**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_4;
    return _wrap_LoopyWeightedSampling_addEvidence__SWIG_4(self, argc, argv);
  }
check_4:
  
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[2], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_5;
    return _wrap_LoopyWeightedSampling_addEvidence__SWIG_1(self, argc, argv);
  }
check_5:
  
  if (argc == 3) {
    int _v = 0;
    {
      int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_6;
    return _wrap_LoopyWeightedSampling_addEvidence__SWIG_3(self, argc, argv);
  }
check_6:
  
  if (argc == 3) {
    PyObject *retobj = _wrap_LoopyWeightedSampling_addEvidence__SWIG_5(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LoopyWeightedSampling_addEvidence'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::LoopySamplingInference< double,gum::WeightedSampling >::addEvidence(gum::NodeId const,gum::Idx const)\n"
    "    gum::LoopySamplingInference< double,gum::WeightedSampling >::addEvidence(std::string const &,gum::Idx const)\n"
    "    gum::LoopySamplingInference< double,gum::WeightedSampling >::addEvidence(gum::NodeId const,std::string const &)\n"
    "    gum::LoopySamplingInference< double,gum::WeightedSampling >::addEvidence(std::string const &,std::string const &)\n"
    "    gum::LoopySamplingInference< double,gum::WeightedSampling >::addEvidence(gum::NodeId const,std::vector< double,std::allocator< double > > const &)\n"
    "    gum::LoopySamplingInference< double,gum::WeightedSampling >::addEvidence(std::string const &,std::vector< double,std::allocator< double > > const &)\n"
    "    gum::LoopySamplingInference< double,gum::WeightedSampling >::addEvidence(gum::Tensor< double > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LoopyWeightedSampling_chgEvidence__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::WeightedSampling > *arg1 = 0 ;
  gum::NodeId arg2 ;
  gum::Idx arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__WeightedSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyWeightedSampling_chgEvidence" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::WeightedSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::WeightedSampling > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoopyWeightedSampling_chgEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "LoopyWeightedSampling_chgEvidence" "', argument " "3"" of type '" "gum::Idx""'");
  } 
  arg3 = static_cast< gum::Idx >(val3);
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__chgEvidence__SWIG_0(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyWeightedSampling_chgEvidence__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::WeightedSampling > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  gum::Idx arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  size_t val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__WeightedSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyWeightedSampling_chgEvidence" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::WeightedSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::WeightedSampling > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LoopyWeightedSampling_chgEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyWeightedSampling_chgEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "LoopyWeightedSampling_chgEvidence" "', argument " "3"" of type '" "gum::Idx""'");
  } 
  arg3 = static_cast< gum::Idx >(val3);
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__chgEvidence__SWIG_1(arg1,(std::string const &)*arg2,SWIG_STD_MOVE(arg3));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyWeightedSampling_chgEvidence__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::WeightedSampling > *arg1 = 0 ;
  gum::NodeId arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__WeightedSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyWeightedSampling_chgEvidence" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::WeightedSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::WeightedSampling > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoopyWeightedSampling_chgEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LoopyWeightedSampling_chgEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyWeightedSampling_chgEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__chgEvidence__SWIG_2(arg1,SWIG_STD_MOVE(arg2),(std::string const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyWeightedSampling_chgEvidence__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::WeightedSampling > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__WeightedSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyWeightedSampling_chgEvidence" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::WeightedSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::WeightedSampling > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LoopyWeightedSampling_chgEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyWeightedSampling_chgEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LoopyWeightedSampling_chgEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyWeightedSampling_chgEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__chgEvidence__SWIG_3(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyWeightedSampling_chgEvidence__SWIG_4(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::WeightedSampling > *arg1 = 0 ;
  gum::Tensor< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__WeightedSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyWeightedSampling_chgEvidence" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::WeightedSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::WeightedSampling > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_gum__TensorT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LoopyWeightedSampling_chgEvidence" "', argument " "2"" of type '" "gum::Tensor< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyWeightedSampling_chgEvidence" "', argument " "2"" of type '" "gum::Tensor< double > const &""'"); 
  }
  arg2 = reinterpret_cast< gum::Tensor< double > * >(argp2);
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__chgEvidence__SWIG_4(arg1,(gum::Tensor< double > const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyWeightedSampling_chgEvidence__SWIG_5(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::WeightedSampling > *arg1 = 0 ;
  gum::NodeId arg2 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__WeightedSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyWeightedSampling_chgEvidence" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::WeightedSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::WeightedSampling > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoopyWeightedSampling_chgEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LoopyWeightedSampling_chgEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyWeightedSampling_chgEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__chgEvidence__SWIG_5(arg1,SWIG_STD_MOVE(arg2),(std::vector< double,std::allocator< double > > const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyWeightedSampling_chgEvidence__SWIG_6(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::WeightedSampling > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__WeightedSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyWeightedSampling_chgEvidence" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::WeightedSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::WeightedSampling > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LoopyWeightedSampling_chgEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyWeightedSampling_chgEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LoopyWeightedSampling_chgEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyWeightedSampling_chgEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__chgEvidence__SWIG_6(arg1,(std::string const &)*arg2,(std::vector< double,std::allocator< double > > const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyWeightedSampling_chgEvidence(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "LoopyWeightedSampling_chgEvidence", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    PyObject *retobj = _wrap_LoopyWeightedSampling_chgEvidence__SWIG_4(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_2;
    {
      {
        int res = SWIG_AsVal_size_t(argv[2], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_2;
    return _wrap_LoopyWeightedSampling_chgEvidence__SWIG_0(self, argc, argv);
  }
check_2:
  
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_3;
    {
      int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_3;
    return _wrap_LoopyWeightedSampling_chgEvidence__SWIG_2(self, argc, argv);
  }
check_3:
  
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_4;
    {
      int res = swig::asptr(argv[2], (std::vector< double,std::allocator< double > >**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_4;
    return _wrap_LoopyWeightedSampling_chgEvidence__SWIG_5(self, argc, argv);
  }
check_4:
  
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[2], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_5;
    return _wrap_LoopyWeightedSampling_chgEvidence__SWIG_1(self, argc, argv);
  }
check_5:
  
  if (argc == 3) {
    int _v = 0;
    {
      int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_6;
    return _wrap_LoopyWeightedSampling_chgEvidence__SWIG_3(self, argc, argv);
  }
check_6:
  
  if (argc == 3) {
    PyObject *retobj = _wrap_LoopyWeightedSampling_chgEvidence__SWIG_6(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LoopyWeightedSampling_chgEvidence'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::LoopySamplingInference< double,gum::WeightedSampling >::chgEvidence(gum::NodeId const,gum::Idx const)\n"
    "    gum::LoopySamplingInference< double,gum::WeightedSampling >::chgEvidence(std::string const &,gum::Idx const)\n"
    "    gum::LoopySamplingInference< double,gum::WeightedSampling >::chgEvidence(gum::NodeId const,std::string const &)\n"
    "    gum::LoopySamplingInference< double,gum::WeightedSampling >::chgEvidence(std::string const &,std::string const &)\n"
    "    gum::LoopySamplingInference< double,gum::WeightedSampling >::chgEvidence(gum::Tensor< double > const &)\n"
    "    gum::LoopySamplingInference< double,gum::WeightedSampling >::chgEvidence(gum::NodeId const,std::vector< double,std::allocator< double > > const &)\n"
    "    gum::LoopySamplingInference< double,gum::WeightedSampling >::chgEvidence(std::string const &,std::vector< double,std::allocator< double > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LoopyWeightedSampling_hasEvidence__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::WeightedSampling > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  bool result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__WeightedSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyWeightedSampling_hasEvidence" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::WeightedSampling > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::WeightedSampling > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoopyWeightedSampling_hasEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (bool)gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__hasEvidence__SWIG_0((gum::LoopySamplingInference< double,gum::WeightedSampling > const *)arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyWeightedSampling_hasEvidence__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::WeightedSampling > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  bool result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__WeightedSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyWeightedSampling_hasEvidence" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::WeightedSampling > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::WeightedSampling > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LoopyWeightedSampling_hasEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyWeightedSampling_hasEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__hasEvidence__SWIG_1((gum::LoopySamplingInference< double,gum::WeightedSampling > const *)arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyWeightedSampling_hasEvidence(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "LoopyWeightedSampling_hasEvidence", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_LoopyWeightedSampling_hasEvidence__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_LoopyWeightedSampling_hasEvidence__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LoopyWeightedSampling_hasEvidence'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::LoopySamplingInference< double,gum::WeightedSampling >::hasEvidence(gum::NodeId const) const\n"
    "    gum::LoopySamplingInference< double,gum::WeightedSampling >::hasEvidence(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LoopyWeightedSampling_eraseAllEvidence(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::WeightedSampling > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__WeightedSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyWeightedSampling_eraseAllEvidence" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::WeightedSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::WeightedSampling > * >(argp1);
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__eraseAllEvidence(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyWeightedSampling_eraseEvidence__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::WeightedSampling > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__WeightedSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyWeightedSampling_eraseEvidence" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::WeightedSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::WeightedSampling > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoopyWeightedSampling_eraseEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__eraseEvidence__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyWeightedSampling_eraseEvidence__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::WeightedSampling > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__WeightedSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyWeightedSampling_eraseEvidence" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::WeightedSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::WeightedSampling > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LoopyWeightedSampling_eraseEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyWeightedSampling_eraseEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__eraseEvidence__SWIG_1(arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyWeightedSampling_eraseEvidence(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "LoopyWeightedSampling_eraseEvidence", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_LoopyWeightedSampling_eraseEvidence__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_LoopyWeightedSampling_eraseEvidence__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LoopyWeightedSampling_eraseEvidence'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::LoopySamplingInference< double,gum::WeightedSampling >::eraseEvidence(gum::NodeId const)\n"
    "    gum::LoopySamplingInference< double,gum::WeightedSampling >::eraseEvidence(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LoopyWeightedSampling_hasSoftEvidence__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::WeightedSampling > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  bool result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__WeightedSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyWeightedSampling_hasSoftEvidence" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::WeightedSampling > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::WeightedSampling > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoopyWeightedSampling_hasSoftEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (bool)gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__hasSoftEvidence__SWIG_0((gum::LoopySamplingInference< double,gum::WeightedSampling > const *)arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyWeightedSampling_hasHardEvidence(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::WeightedSampling > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LoopyWeightedSampling_hasHardEvidence", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__WeightedSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyWeightedSampling_hasHardEvidence" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::WeightedSampling > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::WeightedSampling > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LoopyWeightedSampling_hasHardEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyWeightedSampling_hasHardEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__hasHardEvidence((gum::LoopySamplingInference< double,gum::WeightedSampling > const *)arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyWeightedSampling_hasSoftEvidence__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::WeightedSampling > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  bool result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__WeightedSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyWeightedSampling_hasSoftEvidence" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::WeightedSampling > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::WeightedSampling > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LoopyWeightedSampling_hasSoftEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyWeightedSampling_hasSoftEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__hasSoftEvidence__SWIG_1((gum::LoopySamplingInference< double,gum::WeightedSampling > const *)arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyWeightedSampling_hasSoftEvidence(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "LoopyWeightedSampling_hasSoftEvidence", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_LoopyWeightedSampling_hasSoftEvidence__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_LoopyWeightedSampling_hasSoftEvidence__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LoopyWeightedSampling_hasSoftEvidence'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::LoopySamplingInference< double,gum::WeightedSampling >::hasSoftEvidence(gum::NodeId const) const\n"
    "    gum::LoopySamplingInference< double,gum::WeightedSampling >::hasSoftEvidence(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LoopyWeightedSampling_nbrEvidence(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::WeightedSampling > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::Size result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__WeightedSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyWeightedSampling_nbrEvidence" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::WeightedSampling > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::WeightedSampling > * >(argp1);
  {
    try {
      result = gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__nbrEvidence((gum::LoopySamplingInference< double,gum::WeightedSampling > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyWeightedSampling_nbrHardEvidence(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::WeightedSampling > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::Size result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__WeightedSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyWeightedSampling_nbrHardEvidence" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::WeightedSampling > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::WeightedSampling > * >(argp1);
  {
    try {
      result = gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__nbrHardEvidence((gum::LoopySamplingInference< double,gum::WeightedSampling > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyWeightedSampling_nbrSoftEvidence(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::WeightedSampling > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::Size result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__WeightedSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyWeightedSampling_nbrSoftEvidence" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::WeightedSampling > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::WeightedSampling > * >(argp1);
  {
    try {
      result = gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__nbrSoftEvidence((gum::LoopySamplingInference< double,gum::WeightedSampling > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyWeightedSampling_eraseAllTargets(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::WeightedSampling > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__WeightedSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyWeightedSampling_eraseAllTargets" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::WeightedSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::WeightedSampling > * >(argp1);
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__eraseAllTargets(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyWeightedSampling_addAllTargets(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::WeightedSampling > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__WeightedSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyWeightedSampling_addAllTargets" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::WeightedSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::WeightedSampling > * >(argp1);
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__addAllTargets(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyWeightedSampling_addTarget__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::WeightedSampling > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__WeightedSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyWeightedSampling_addTarget" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::WeightedSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::WeightedSampling > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoopyWeightedSampling_addTarget" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__addTarget__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyWeightedSampling_addTarget__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::WeightedSampling > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__WeightedSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyWeightedSampling_addTarget" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::WeightedSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::WeightedSampling > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LoopyWeightedSampling_addTarget" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyWeightedSampling_addTarget" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__addTarget__SWIG_1(arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyWeightedSampling_addTarget(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "LoopyWeightedSampling_addTarget", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_LoopyWeightedSampling_addTarget__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_LoopyWeightedSampling_addTarget__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LoopyWeightedSampling_addTarget'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::LoopySamplingInference< double,gum::WeightedSampling >::addTarget(gum::NodeId const)\n"
    "    gum::LoopySamplingInference< double,gum::WeightedSampling >::addTarget(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LoopyWeightedSampling_eraseTarget__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::WeightedSampling > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__WeightedSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyWeightedSampling_eraseTarget" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::WeightedSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::WeightedSampling > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoopyWeightedSampling_eraseTarget" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__eraseTarget__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyWeightedSampling_eraseTarget__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::WeightedSampling > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__WeightedSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyWeightedSampling_eraseTarget" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::WeightedSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::WeightedSampling > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LoopyWeightedSampling_eraseTarget" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyWeightedSampling_eraseTarget" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__eraseTarget__SWIG_1(arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyWeightedSampling_eraseTarget(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "LoopyWeightedSampling_eraseTarget", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_LoopyWeightedSampling_eraseTarget__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_LoopyWeightedSampling_eraseTarget__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LoopyWeightedSampling_eraseTarget'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::LoopySamplingInference< double,gum::WeightedSampling >::eraseTarget(gum::NodeId const)\n"
    "    gum::LoopySamplingInference< double,gum::WeightedSampling >::eraseTarget(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LoopyWeightedSampling_isTarget__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::WeightedSampling > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  bool result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__WeightedSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyWeightedSampling_isTarget" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::WeightedSampling > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::WeightedSampling > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoopyWeightedSampling_isTarget" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (bool)gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__isTarget__SWIG_0((gum::LoopySamplingInference< double,gum::WeightedSampling > const *)arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyWeightedSampling_isTarget__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::WeightedSampling > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  bool result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__WeightedSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyWeightedSampling_isTarget" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::WeightedSampling > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::WeightedSampling > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LoopyWeightedSampling_isTarget" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyWeightedSampling_isTarget" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__isTarget__SWIG_1((gum::LoopySamplingInference< double,gum::WeightedSampling > const *)arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyWeightedSampling_isTarget(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "LoopyWeightedSampling_isTarget", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_LoopyWeightedSampling_isTarget__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_LoopyWeightedSampling_isTarget__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LoopyWeightedSampling_isTarget'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::LoopySamplingInference< double,gum::WeightedSampling >::isTarget(gum::NodeId const) const\n"
    "    gum::LoopySamplingInference< double,gum::WeightedSampling >::isTarget(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LoopyWeightedSampling_nbrTargets(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::WeightedSampling > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::Size result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__WeightedSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyWeightedSampling_nbrTargets" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::WeightedSampling > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::WeightedSampling > * >(argp1);
  {
    try {
      result = gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__nbrTargets((gum::LoopySamplingInference< double,gum::WeightedSampling > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyWeightedSampling_H__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::WeightedSampling > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  double result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__WeightedSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyWeightedSampling_H" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::WeightedSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::WeightedSampling > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoopyWeightedSampling_H" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (double)gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__H__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyWeightedSampling_H__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::WeightedSampling > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  double result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__WeightedSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyWeightedSampling_H" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::WeightedSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::WeightedSampling > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LoopyWeightedSampling_H" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyWeightedSampling_H" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (double)gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__H__SWIG_1(arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyWeightedSampling_H(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "LoopyWeightedSampling_H", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_LoopyWeightedSampling_H__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_LoopyWeightedSampling_H__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LoopyWeightedSampling_H'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::LoopySamplingInference< double,gum::WeightedSampling >::H(gum::NodeId const)\n"
    "    gum::LoopySamplingInference< double,gum::WeightedSampling >::H(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LoopyWeightedSampling_evidenceImpact__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::WeightedSampling > *arg1 = 0 ;
  gum::NodeId arg2 ;
  gum::NodeSet *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  gum::Tensor< double > result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__WeightedSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyWeightedSampling_evidenceImpact" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::WeightedSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::WeightedSampling > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoopyWeightedSampling_evidenceImpact" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_gum__SetT_std__size_t_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LoopyWeightedSampling_evidenceImpact" "', argument " "3"" of type '" "gum::NodeSet const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyWeightedSampling_evidenceImpact" "', argument " "3"" of type '" "gum::NodeSet const &""'"); 
  }
  arg3 = reinterpret_cast< gum::NodeSet * >(argp3);
  {
    try {
      result = gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__evidenceImpact__SWIG_0(arg1,SWIG_STD_MOVE(arg2),(gum::Set< std::size_t > const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::Tensor< double >(result)), SWIGTYPE_p_gum__TensorT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyWeightedSampling_evidenceImpact__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::WeightedSampling > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  gum::Tensor< double > result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__WeightedSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyWeightedSampling_evidenceImpact" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::WeightedSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::WeightedSampling > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LoopyWeightedSampling_evidenceImpact" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyWeightedSampling_evidenceImpact" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LoopyWeightedSampling_evidenceImpact" "', argument " "3"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyWeightedSampling_evidenceImpact" "', argument " "3"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      result = gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__evidenceImpact__SWIG_1(arg1,(std::string const &)*arg2,(std::vector< std::string,std::allocator< std::string > > const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::Tensor< double >(result)), SWIGTYPE_p_gum__TensorT_double_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyWeightedSampling_BN(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::WeightedSampling > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::IBayesNet< double > *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__WeightedSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyWeightedSampling_BN" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::WeightedSampling > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::WeightedSampling > * >(argp1);
  {
    try {
      result = (gum::IBayesNet< double > *) &gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__BN((gum::LoopySamplingInference< double,gum::WeightedSampling > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__IBayesNetT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyWeightedSampling_currentPosterior__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::WeightedSampling > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  gum::Tensor< double > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__WeightedSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyWeightedSampling_currentPosterior" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::WeightedSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::WeightedSampling > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoopyWeightedSampling_currentPosterior" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (gum::Tensor< double > *) &gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__currentPosterior__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__TensorT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyWeightedSampling_currentPosterior__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::WeightedSampling > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  gum::Tensor< double > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__WeightedSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyWeightedSampling_currentPosterior" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::WeightedSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::WeightedSampling > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LoopyWeightedSampling_currentPosterior" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyWeightedSampling_currentPosterior" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (gum::Tensor< double > *) &gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__currentPosterior__SWIG_1(arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__TensorT_double_t, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyWeightedSampling_currentPosterior(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "LoopyWeightedSampling_currentPosterior", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_LoopyWeightedSampling_currentPosterior__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_LoopyWeightedSampling_currentPosterior__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LoopyWeightedSampling_currentPosterior'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::LoopySamplingInference< double,gum::WeightedSampling >::currentPosterior(gum::NodeId const)\n"
    "    gum::LoopySamplingInference< double,gum::WeightedSampling >::currentPosterior(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LoopyWeightedSampling_setEvidence(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::WeightedSampling > *arg1 = 0 ;
  PyObject *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LoopyWeightedSampling_setEvidence", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__WeightedSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyWeightedSampling_setEvidence" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::WeightedSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::WeightedSampling > * >(argp1);
  arg2 = swig_obj[1];
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__setEvidence(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyWeightedSampling_updateEvidence(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::WeightedSampling > *arg1 = 0 ;
  PyObject *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LoopyWeightedSampling_updateEvidence", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__WeightedSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyWeightedSampling_updateEvidence" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::WeightedSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::WeightedSampling > * >(argp1);
  arg2 = swig_obj[1];
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__updateEvidence(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyWeightedSampling_setTargets(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::WeightedSampling > *arg1 = 0 ;
  PyObject *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LoopyWeightedSampling_setTargets", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__WeightedSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyWeightedSampling_setTargets" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::WeightedSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::WeightedSampling > * >(argp1);
  arg2 = swig_obj[1];
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__setTargets(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyWeightedSampling_hardEvidenceNodes(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::WeightedSampling > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__WeightedSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyWeightedSampling_hardEvidenceNodes" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::WeightedSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::WeightedSampling > * >(argp1);
  {
    try {
      result = (PyObject *)gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__hardEvidenceNodes(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyWeightedSampling_softEvidenceNodes(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::WeightedSampling > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__WeightedSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyWeightedSampling_softEvidenceNodes" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::WeightedSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::WeightedSampling > * >(argp1);
  {
    try {
      result = (PyObject *)gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__softEvidenceNodes(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyWeightedSampling_targets(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::WeightedSampling > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__WeightedSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyWeightedSampling_targets" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::WeightedSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::WeightedSampling > * >(argp1);
  {
    try {
      result = (PyObject *)gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__targets(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyWeightedSampling_evidenceImpact__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::WeightedSampling > *arg1 = 0 ;
  PyObject *arg2 = 0 ;
  PyObject *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gum::Tensor< double > result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__WeightedSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyWeightedSampling_evidenceImpact" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::WeightedSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::WeightedSampling > * >(argp1);
  arg2 = swig_obj[1];
  arg3 = swig_obj[2];
  {
    try {
      result = gum_LoopySamplingInference_Sl_double_Sc_gum_WeightedSampling_Sg__evidenceImpact__SWIG_2(arg1,arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::Tensor< double >(result)), SWIGTYPE_p_gum__TensorT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyWeightedSampling_evidenceImpact(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "LoopyWeightedSampling_evidenceImpact", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    {
      int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_gum__SetT_std__size_t_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_1;
    return _wrap_LoopyWeightedSampling_evidenceImpact__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 3) {
    int _v = 0;
    {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_2;
    {
      int res = swig::asptr(argv[2], (std::vector< std::string,std::allocator< std::string > >**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_2;
    return _wrap_LoopyWeightedSampling_evidenceImpact__SWIG_1(self, argc, argv);
  }
check_2:
  
  if (argc == 3) {
    PyObject *retobj = _wrap_LoopyWeightedSampling_evidenceImpact__SWIG_2(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LoopyWeightedSampling_evidenceImpact'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::LoopySamplingInference< double,gum::WeightedSampling >::evidenceImpact(gum::NodeId,gum::NodeSet const &)\n"
    "    gum::LoopySamplingInference< double,gum::WeightedSampling >::evidenceImpact(std::string const &,std::vector< std::string,std::allocator< std::string > > const &)\n"
    "    gum::LoopySamplingInference< double,gum::WeightedSampling >::evidenceImpact(PyObject *,PyObject *)\n");
  return 0;
}


SWIGINTERN PyObject *LoopyWeightedSampling_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj = NULL;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__WeightedSampling_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *LoopyWeightedSampling_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_LoopyGibbsSampling(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::IBayesNet< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::LoopySamplingInference< double,gum::GibbsSampling > *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__IBayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LoopyGibbsSampling" "', argument " "1"" of type '" "gum::IBayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::IBayesNet< double > * >(argp1);
  {
    try {
      result = (gum::LoopySamplingInference< double,gum::GibbsSampling > *)new gum::LoopySamplingInference< double,gum::GibbsSampling >((gum::IBayesNet< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__GibbsSampling_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_LoopyGibbsSampling(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::GibbsSampling > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__GibbsSampling_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LoopyGibbsSampling" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::GibbsSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::GibbsSampling > * >(argp1);
  {
    try {
      delete arg1;
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyGibbsSampling_makeInference_(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::GibbsSampling > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__GibbsSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyGibbsSampling_makeInference_" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::GibbsSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::GibbsSampling > * >(argp1);
  {
    try {
      (arg1)->makeInference_();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyGibbsSampling_setVirtualLBPSize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::GibbsSampling > *arg1 = 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LoopyGibbsSampling_setVirtualLBPSize", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__GibbsSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyGibbsSampling_setVirtualLBPSize" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::GibbsSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::GibbsSampling > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoopyGibbsSampling_setVirtualLBPSize" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setVirtualLBPSize(arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyGibbsSampling_setVerbosity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::GibbsSampling > *arg1 = 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LoopyGibbsSampling_setVerbosity", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__GibbsSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyGibbsSampling_setVerbosity" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::GibbsSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::GibbsSampling > * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoopyGibbsSampling_setVerbosity" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__setVerbosity(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyGibbsSampling_setEpsilon(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::GibbsSampling > *arg1 = 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LoopyGibbsSampling_setEpsilon", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__GibbsSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyGibbsSampling_setEpsilon" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::GibbsSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::GibbsSampling > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoopyGibbsSampling_setEpsilon" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__setEpsilon(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyGibbsSampling_setMinEpsilonRate(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::GibbsSampling > *arg1 = 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LoopyGibbsSampling_setMinEpsilonRate", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__GibbsSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyGibbsSampling_setMinEpsilonRate" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::GibbsSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::GibbsSampling > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoopyGibbsSampling_setMinEpsilonRate" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__setMinEpsilonRate(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyGibbsSampling_setMaxIter(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::GibbsSampling > *arg1 = 0 ;
  gum::Size arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LoopyGibbsSampling_setMaxIter", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__GibbsSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyGibbsSampling_setMaxIter" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::GibbsSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::GibbsSampling > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoopyGibbsSampling_setMaxIter" "', argument " "2"" of type '" "gum::Size""'");
  } 
  arg2 = static_cast< gum::Size >(val2);
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__setMaxIter(arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyGibbsSampling_setMaxTime(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::GibbsSampling > *arg1 = 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LoopyGibbsSampling_setMaxTime", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__GibbsSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyGibbsSampling_setMaxTime" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::GibbsSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::GibbsSampling > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoopyGibbsSampling_setMaxTime" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__setMaxTime(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyGibbsSampling_setPeriodSize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::GibbsSampling > *arg1 = 0 ;
  gum::Size arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LoopyGibbsSampling_setPeriodSize", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__GibbsSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyGibbsSampling_setPeriodSize" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::GibbsSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::GibbsSampling > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoopyGibbsSampling_setPeriodSize" "', argument " "2"" of type '" "gum::Size""'");
  } 
  arg2 = static_cast< gum::Size >(val2);
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__setPeriodSize(arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyGibbsSampling_verbosity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::GibbsSampling > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__GibbsSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyGibbsSampling_verbosity" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::GibbsSampling > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::GibbsSampling > * >(argp1);
  {
    try {
      result = (bool)gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__verbosity((gum::LoopySamplingInference< double,gum::GibbsSampling > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyGibbsSampling_epsilon(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::GibbsSampling > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__GibbsSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyGibbsSampling_epsilon" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::GibbsSampling > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::GibbsSampling > * >(argp1);
  {
    try {
      result = (double)gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__epsilon((gum::LoopySamplingInference< double,gum::GibbsSampling > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyGibbsSampling_minEpsilonRate(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::GibbsSampling > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__GibbsSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyGibbsSampling_minEpsilonRate" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::GibbsSampling > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::GibbsSampling > * >(argp1);
  {
    try {
      result = (double)gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__minEpsilonRate((gum::LoopySamplingInference< double,gum::GibbsSampling > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyGibbsSampling_maxIter(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::GibbsSampling > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::Size result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__GibbsSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyGibbsSampling_maxIter" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::GibbsSampling > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::GibbsSampling > * >(argp1);
  {
    try {
      result = gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__maxIter((gum::LoopySamplingInference< double,gum::GibbsSampling > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyGibbsSampling_maxTime(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::GibbsSampling > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__GibbsSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyGibbsSampling_maxTime" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::GibbsSampling > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::GibbsSampling > * >(argp1);
  {
    try {
      result = (double)gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__maxTime((gum::LoopySamplingInference< double,gum::GibbsSampling > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyGibbsSampling_periodSize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::GibbsSampling > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::Size result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__GibbsSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyGibbsSampling_periodSize" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::GibbsSampling > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::GibbsSampling > * >(argp1);
  {
    try {
      result = gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__periodSize((gum::LoopySamplingInference< double,gum::GibbsSampling > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyGibbsSampling_nbrIterations(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::GibbsSampling > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::Size result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__GibbsSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyGibbsSampling_nbrIterations" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::GibbsSampling > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::GibbsSampling > * >(argp1);
  {
    try {
      result = gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__nbrIterations((gum::LoopySamplingInference< double,gum::GibbsSampling > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyGibbsSampling_currentTime(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::GibbsSampling > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__GibbsSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyGibbsSampling_currentTime" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::GibbsSampling > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::GibbsSampling > * >(argp1);
  {
    try {
      result = (double)gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__currentTime((gum::LoopySamplingInference< double,gum::GibbsSampling > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyGibbsSampling_messageApproximationScheme(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::GibbsSampling > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__GibbsSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyGibbsSampling_messageApproximationScheme" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::GibbsSampling > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::GibbsSampling > * >(argp1);
  {
    try {
      result = gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__messageApproximationScheme((gum::LoopySamplingInference< double,gum::GibbsSampling > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyGibbsSampling_history(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::GibbsSampling > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< double,std::allocator< double > > *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__GibbsSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyGibbsSampling_history" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::GibbsSampling > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::GibbsSampling > * >(argp1);
  {
    try {
      result = (std::vector< double,std::allocator< double > > *) &gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__history((gum::LoopySamplingInference< double,gum::GibbsSampling > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< double,std::allocator< double > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyGibbsSampling__asIApproximationSchemeConfiguration(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::GibbsSampling > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::IApproximationSchemeConfiguration *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__GibbsSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyGibbsSampling__asIApproximationSchemeConfiguration" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::GibbsSampling > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::GibbsSampling > * >(argp1);
  {
    try {
      result = (gum::IApproximationSchemeConfiguration *) &gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg___asIApproximationSchemeConfiguration((gum::LoopySamplingInference< double,gum::GibbsSampling > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__IApproximationSchemeConfiguration, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyGibbsSampling_makeInference(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::GibbsSampling > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__GibbsSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyGibbsSampling_makeInference" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::GibbsSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::GibbsSampling > * >(argp1);
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__makeInference(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyGibbsSampling_posterior__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::GibbsSampling > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  gum::Tensor< double > result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__GibbsSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyGibbsSampling_posterior" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::GibbsSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::GibbsSampling > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoopyGibbsSampling_posterior" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__posterior__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::Tensor< double >(result)), SWIGTYPE_p_gum__TensorT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyGibbsSampling_posterior__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::GibbsSampling > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  gum::Tensor< double > result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__GibbsSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyGibbsSampling_posterior" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::GibbsSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::GibbsSampling > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LoopyGibbsSampling_posterior" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyGibbsSampling_posterior" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__posterior__SWIG_1(arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::Tensor< double >(result)), SWIGTYPE_p_gum__TensorT_double_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyGibbsSampling_posterior(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "LoopyGibbsSampling_posterior", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_LoopyGibbsSampling_posterior__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_LoopyGibbsSampling_posterior__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LoopyGibbsSampling_posterior'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::LoopySamplingInference< double,gum::GibbsSampling >::posterior(gum::NodeId const)\n"
    "    gum::LoopySamplingInference< double,gum::GibbsSampling >::posterior(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LoopyGibbsSampling_addEvidence__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::GibbsSampling > *arg1 = 0 ;
  gum::NodeId arg2 ;
  gum::Idx arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__GibbsSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyGibbsSampling_addEvidence" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::GibbsSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::GibbsSampling > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoopyGibbsSampling_addEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "LoopyGibbsSampling_addEvidence" "', argument " "3"" of type '" "gum::Idx""'");
  } 
  arg3 = static_cast< gum::Idx >(val3);
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__addEvidence__SWIG_0(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyGibbsSampling_addEvidence__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::GibbsSampling > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  gum::Idx arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  size_t val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__GibbsSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyGibbsSampling_addEvidence" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::GibbsSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::GibbsSampling > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LoopyGibbsSampling_addEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyGibbsSampling_addEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "LoopyGibbsSampling_addEvidence" "', argument " "3"" of type '" "gum::Idx""'");
  } 
  arg3 = static_cast< gum::Idx >(val3);
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__addEvidence__SWIG_1(arg1,(std::string const &)*arg2,SWIG_STD_MOVE(arg3));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyGibbsSampling_addEvidence__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::GibbsSampling > *arg1 = 0 ;
  gum::NodeId arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__GibbsSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyGibbsSampling_addEvidence" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::GibbsSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::GibbsSampling > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoopyGibbsSampling_addEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LoopyGibbsSampling_addEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyGibbsSampling_addEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__addEvidence__SWIG_2(arg1,SWIG_STD_MOVE(arg2),(std::string const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyGibbsSampling_addEvidence__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::GibbsSampling > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__GibbsSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyGibbsSampling_addEvidence" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::GibbsSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::GibbsSampling > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LoopyGibbsSampling_addEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyGibbsSampling_addEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LoopyGibbsSampling_addEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyGibbsSampling_addEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__addEvidence__SWIG_3(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyGibbsSampling_addEvidence__SWIG_4(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::GibbsSampling > *arg1 = 0 ;
  gum::NodeId arg2 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__GibbsSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyGibbsSampling_addEvidence" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::GibbsSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::GibbsSampling > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoopyGibbsSampling_addEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LoopyGibbsSampling_addEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyGibbsSampling_addEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__addEvidence__SWIG_4(arg1,SWIG_STD_MOVE(arg2),(std::vector< double,std::allocator< double > > const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyGibbsSampling_addEvidence__SWIG_5(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::GibbsSampling > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__GibbsSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyGibbsSampling_addEvidence" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::GibbsSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::GibbsSampling > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LoopyGibbsSampling_addEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyGibbsSampling_addEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LoopyGibbsSampling_addEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyGibbsSampling_addEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__addEvidence__SWIG_5(arg1,(std::string const &)*arg2,(std::vector< double,std::allocator< double > > const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyGibbsSampling_addEvidence__SWIG_6(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::GibbsSampling > *arg1 = 0 ;
  gum::Tensor< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__GibbsSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyGibbsSampling_addEvidence" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::GibbsSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::GibbsSampling > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_gum__TensorT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LoopyGibbsSampling_addEvidence" "', argument " "2"" of type '" "gum::Tensor< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyGibbsSampling_addEvidence" "', argument " "2"" of type '" "gum::Tensor< double > const &""'"); 
  }
  arg2 = reinterpret_cast< gum::Tensor< double > * >(argp2);
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__addEvidence__SWIG_6(arg1,(gum::Tensor< double > const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyGibbsSampling_addEvidence(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "LoopyGibbsSampling_addEvidence", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    PyObject *retobj = _wrap_LoopyGibbsSampling_addEvidence__SWIG_6(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_2;
    {
      {
        int res = SWIG_AsVal_size_t(argv[2], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_2;
    return _wrap_LoopyGibbsSampling_addEvidence__SWIG_0(self, argc, argv);
  }
check_2:
  
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_3;
    {
      int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_3;
    return _wrap_LoopyGibbsSampling_addEvidence__SWIG_2(self, argc, argv);
  }
check_3:
  
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_4;
    {
      int res = swig::asptr(argv[2], (std::vector< double,std::allocator< double > >**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_4;
    return _wrap_LoopyGibbsSampling_addEvidence__SWIG_4(self, argc, argv);
  }
check_4:
  
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[2], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_5;
    return _wrap_LoopyGibbsSampling_addEvidence__SWIG_1(self, argc, argv);
  }
check_5:
  
  if (argc == 3) {
    int _v = 0;
    {
      int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_6;
    return _wrap_LoopyGibbsSampling_addEvidence__SWIG_3(self, argc, argv);
  }
check_6:
  
  if (argc == 3) {
    PyObject *retobj = _wrap_LoopyGibbsSampling_addEvidence__SWIG_5(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LoopyGibbsSampling_addEvidence'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::LoopySamplingInference< double,gum::GibbsSampling >::addEvidence(gum::NodeId const,gum::Idx const)\n"
    "    gum::LoopySamplingInference< double,gum::GibbsSampling >::addEvidence(std::string const &,gum::Idx const)\n"
    "    gum::LoopySamplingInference< double,gum::GibbsSampling >::addEvidence(gum::NodeId const,std::string const &)\n"
    "    gum::LoopySamplingInference< double,gum::GibbsSampling >::addEvidence(std::string const &,std::string const &)\n"
    "    gum::LoopySamplingInference< double,gum::GibbsSampling >::addEvidence(gum::NodeId const,std::vector< double,std::allocator< double > > const &)\n"
    "    gum::LoopySamplingInference< double,gum::GibbsSampling >::addEvidence(std::string const &,std::vector< double,std::allocator< double > > const &)\n"
    "    gum::LoopySamplingInference< double,gum::GibbsSampling >::addEvidence(gum::Tensor< double > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LoopyGibbsSampling_chgEvidence__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::GibbsSampling > *arg1 = 0 ;
  gum::NodeId arg2 ;
  gum::Idx arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__GibbsSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyGibbsSampling_chgEvidence" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::GibbsSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::GibbsSampling > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoopyGibbsSampling_chgEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "LoopyGibbsSampling_chgEvidence" "', argument " "3"" of type '" "gum::Idx""'");
  } 
  arg3 = static_cast< gum::Idx >(val3);
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__chgEvidence__SWIG_0(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyGibbsSampling_chgEvidence__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::GibbsSampling > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  gum::Idx arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  size_t val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__GibbsSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyGibbsSampling_chgEvidence" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::GibbsSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::GibbsSampling > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LoopyGibbsSampling_chgEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyGibbsSampling_chgEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "LoopyGibbsSampling_chgEvidence" "', argument " "3"" of type '" "gum::Idx""'");
  } 
  arg3 = static_cast< gum::Idx >(val3);
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__chgEvidence__SWIG_1(arg1,(std::string const &)*arg2,SWIG_STD_MOVE(arg3));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyGibbsSampling_chgEvidence__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::GibbsSampling > *arg1 = 0 ;
  gum::NodeId arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__GibbsSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyGibbsSampling_chgEvidence" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::GibbsSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::GibbsSampling > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoopyGibbsSampling_chgEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LoopyGibbsSampling_chgEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyGibbsSampling_chgEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__chgEvidence__SWIG_2(arg1,SWIG_STD_MOVE(arg2),(std::string const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyGibbsSampling_chgEvidence__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::GibbsSampling > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__GibbsSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyGibbsSampling_chgEvidence" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::GibbsSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::GibbsSampling > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LoopyGibbsSampling_chgEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyGibbsSampling_chgEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LoopyGibbsSampling_chgEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyGibbsSampling_chgEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__chgEvidence__SWIG_3(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyGibbsSampling_chgEvidence__SWIG_4(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::GibbsSampling > *arg1 = 0 ;
  gum::Tensor< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__GibbsSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyGibbsSampling_chgEvidence" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::GibbsSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::GibbsSampling > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_gum__TensorT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LoopyGibbsSampling_chgEvidence" "', argument " "2"" of type '" "gum::Tensor< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyGibbsSampling_chgEvidence" "', argument " "2"" of type '" "gum::Tensor< double > const &""'"); 
  }
  arg2 = reinterpret_cast< gum::Tensor< double > * >(argp2);
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__chgEvidence__SWIG_4(arg1,(gum::Tensor< double > const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyGibbsSampling_chgEvidence__SWIG_5(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::GibbsSampling > *arg1 = 0 ;
  gum::NodeId arg2 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__GibbsSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyGibbsSampling_chgEvidence" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::GibbsSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::GibbsSampling > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoopyGibbsSampling_chgEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LoopyGibbsSampling_chgEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyGibbsSampling_chgEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__chgEvidence__SWIG_5(arg1,SWIG_STD_MOVE(arg2),(std::vector< double,std::allocator< double > > const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyGibbsSampling_chgEvidence__SWIG_6(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::GibbsSampling > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__GibbsSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyGibbsSampling_chgEvidence" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::GibbsSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::GibbsSampling > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LoopyGibbsSampling_chgEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyGibbsSampling_chgEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LoopyGibbsSampling_chgEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyGibbsSampling_chgEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__chgEvidence__SWIG_6(arg1,(std::string const &)*arg2,(std::vector< double,std::allocator< double > > const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyGibbsSampling_chgEvidence(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "LoopyGibbsSampling_chgEvidence", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    PyObject *retobj = _wrap_LoopyGibbsSampling_chgEvidence__SWIG_4(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_2;
    {
      {
        int res = SWIG_AsVal_size_t(argv[2], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_2;
    return _wrap_LoopyGibbsSampling_chgEvidence__SWIG_0(self, argc, argv);
  }
check_2:
  
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_3;
    {
      int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_3;
    return _wrap_LoopyGibbsSampling_chgEvidence__SWIG_2(self, argc, argv);
  }
check_3:
  
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_4;
    {
      int res = swig::asptr(argv[2], (std::vector< double,std::allocator< double > >**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_4;
    return _wrap_LoopyGibbsSampling_chgEvidence__SWIG_5(self, argc, argv);
  }
check_4:
  
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[2], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_5;
    return _wrap_LoopyGibbsSampling_chgEvidence__SWIG_1(self, argc, argv);
  }
check_5:
  
  if (argc == 3) {
    int _v = 0;
    {
      int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_6;
    return _wrap_LoopyGibbsSampling_chgEvidence__SWIG_3(self, argc, argv);
  }
check_6:
  
  if (argc == 3) {
    PyObject *retobj = _wrap_LoopyGibbsSampling_chgEvidence__SWIG_6(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LoopyGibbsSampling_chgEvidence'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::LoopySamplingInference< double,gum::GibbsSampling >::chgEvidence(gum::NodeId const,gum::Idx const)\n"
    "    gum::LoopySamplingInference< double,gum::GibbsSampling >::chgEvidence(std::string const &,gum::Idx const)\n"
    "    gum::LoopySamplingInference< double,gum::GibbsSampling >::chgEvidence(gum::NodeId const,std::string const &)\n"
    "    gum::LoopySamplingInference< double,gum::GibbsSampling >::chgEvidence(std::string const &,std::string const &)\n"
    "    gum::LoopySamplingInference< double,gum::GibbsSampling >::chgEvidence(gum::Tensor< double > const &)\n"
    "    gum::LoopySamplingInference< double,gum::GibbsSampling >::chgEvidence(gum::NodeId const,std::vector< double,std::allocator< double > > const &)\n"
    "    gum::LoopySamplingInference< double,gum::GibbsSampling >::chgEvidence(std::string const &,std::vector< double,std::allocator< double > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LoopyGibbsSampling_hasEvidence__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::GibbsSampling > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  bool result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__GibbsSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyGibbsSampling_hasEvidence" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::GibbsSampling > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::GibbsSampling > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoopyGibbsSampling_hasEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (bool)gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__hasEvidence__SWIG_0((gum::LoopySamplingInference< double,gum::GibbsSampling > const *)arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyGibbsSampling_hasEvidence__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::GibbsSampling > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  bool result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__GibbsSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyGibbsSampling_hasEvidence" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::GibbsSampling > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::GibbsSampling > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LoopyGibbsSampling_hasEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyGibbsSampling_hasEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__hasEvidence__SWIG_1((gum::LoopySamplingInference< double,gum::GibbsSampling > const *)arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyGibbsSampling_hasEvidence(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "LoopyGibbsSampling_hasEvidence", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_LoopyGibbsSampling_hasEvidence__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_LoopyGibbsSampling_hasEvidence__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LoopyGibbsSampling_hasEvidence'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::LoopySamplingInference< double,gum::GibbsSampling >::hasEvidence(gum::NodeId const) const\n"
    "    gum::LoopySamplingInference< double,gum::GibbsSampling >::hasEvidence(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LoopyGibbsSampling_eraseAllEvidence(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::GibbsSampling > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__GibbsSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyGibbsSampling_eraseAllEvidence" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::GibbsSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::GibbsSampling > * >(argp1);
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__eraseAllEvidence(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyGibbsSampling_eraseEvidence__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::GibbsSampling > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__GibbsSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyGibbsSampling_eraseEvidence" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::GibbsSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::GibbsSampling > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoopyGibbsSampling_eraseEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__eraseEvidence__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyGibbsSampling_eraseEvidence__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::GibbsSampling > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__GibbsSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyGibbsSampling_eraseEvidence" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::GibbsSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::GibbsSampling > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LoopyGibbsSampling_eraseEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyGibbsSampling_eraseEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__eraseEvidence__SWIG_1(arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyGibbsSampling_eraseEvidence(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "LoopyGibbsSampling_eraseEvidence", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_LoopyGibbsSampling_eraseEvidence__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_LoopyGibbsSampling_eraseEvidence__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LoopyGibbsSampling_eraseEvidence'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::LoopySamplingInference< double,gum::GibbsSampling >::eraseEvidence(gum::NodeId const)\n"
    "    gum::LoopySamplingInference< double,gum::GibbsSampling >::eraseEvidence(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LoopyGibbsSampling_hasSoftEvidence__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::GibbsSampling > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  bool result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__GibbsSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyGibbsSampling_hasSoftEvidence" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::GibbsSampling > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::GibbsSampling > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoopyGibbsSampling_hasSoftEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (bool)gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__hasSoftEvidence__SWIG_0((gum::LoopySamplingInference< double,gum::GibbsSampling > const *)arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyGibbsSampling_hasHardEvidence(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::GibbsSampling > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LoopyGibbsSampling_hasHardEvidence", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__GibbsSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyGibbsSampling_hasHardEvidence" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::GibbsSampling > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::GibbsSampling > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LoopyGibbsSampling_hasHardEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyGibbsSampling_hasHardEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__hasHardEvidence((gum::LoopySamplingInference< double,gum::GibbsSampling > const *)arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyGibbsSampling_hasSoftEvidence__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::GibbsSampling > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  bool result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__GibbsSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyGibbsSampling_hasSoftEvidence" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::GibbsSampling > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::GibbsSampling > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LoopyGibbsSampling_hasSoftEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyGibbsSampling_hasSoftEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__hasSoftEvidence__SWIG_1((gum::LoopySamplingInference< double,gum::GibbsSampling > const *)arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyGibbsSampling_hasSoftEvidence(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "LoopyGibbsSampling_hasSoftEvidence", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_LoopyGibbsSampling_hasSoftEvidence__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_LoopyGibbsSampling_hasSoftEvidence__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LoopyGibbsSampling_hasSoftEvidence'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::LoopySamplingInference< double,gum::GibbsSampling >::hasSoftEvidence(gum::NodeId const) const\n"
    "    gum::LoopySamplingInference< double,gum::GibbsSampling >::hasSoftEvidence(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LoopyGibbsSampling_nbrEvidence(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::GibbsSampling > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::Size result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__GibbsSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyGibbsSampling_nbrEvidence" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::GibbsSampling > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::GibbsSampling > * >(argp1);
  {
    try {
      result = gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__nbrEvidence((gum::LoopySamplingInference< double,gum::GibbsSampling > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyGibbsSampling_nbrHardEvidence(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::GibbsSampling > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::Size result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__GibbsSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyGibbsSampling_nbrHardEvidence" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::GibbsSampling > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::GibbsSampling > * >(argp1);
  {
    try {
      result = gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__nbrHardEvidence((gum::LoopySamplingInference< double,gum::GibbsSampling > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyGibbsSampling_nbrSoftEvidence(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::GibbsSampling > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::Size result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__GibbsSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyGibbsSampling_nbrSoftEvidence" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::GibbsSampling > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::GibbsSampling > * >(argp1);
  {
    try {
      result = gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__nbrSoftEvidence((gum::LoopySamplingInference< double,gum::GibbsSampling > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyGibbsSampling_eraseAllTargets(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::GibbsSampling > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__GibbsSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyGibbsSampling_eraseAllTargets" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::GibbsSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::GibbsSampling > * >(argp1);
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__eraseAllTargets(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyGibbsSampling_addAllTargets(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::GibbsSampling > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__GibbsSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyGibbsSampling_addAllTargets" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::GibbsSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::GibbsSampling > * >(argp1);
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__addAllTargets(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyGibbsSampling_addTarget__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::GibbsSampling > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__GibbsSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyGibbsSampling_addTarget" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::GibbsSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::GibbsSampling > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoopyGibbsSampling_addTarget" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__addTarget__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyGibbsSampling_addTarget__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::GibbsSampling > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__GibbsSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyGibbsSampling_addTarget" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::GibbsSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::GibbsSampling > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LoopyGibbsSampling_addTarget" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyGibbsSampling_addTarget" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__addTarget__SWIG_1(arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyGibbsSampling_addTarget(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "LoopyGibbsSampling_addTarget", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_LoopyGibbsSampling_addTarget__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_LoopyGibbsSampling_addTarget__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LoopyGibbsSampling_addTarget'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::LoopySamplingInference< double,gum::GibbsSampling >::addTarget(gum::NodeId const)\n"
    "    gum::LoopySamplingInference< double,gum::GibbsSampling >::addTarget(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LoopyGibbsSampling_eraseTarget__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::GibbsSampling > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__GibbsSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyGibbsSampling_eraseTarget" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::GibbsSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::GibbsSampling > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoopyGibbsSampling_eraseTarget" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__eraseTarget__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyGibbsSampling_eraseTarget__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::GibbsSampling > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__GibbsSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyGibbsSampling_eraseTarget" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::GibbsSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::GibbsSampling > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LoopyGibbsSampling_eraseTarget" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyGibbsSampling_eraseTarget" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__eraseTarget__SWIG_1(arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyGibbsSampling_eraseTarget(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "LoopyGibbsSampling_eraseTarget", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_LoopyGibbsSampling_eraseTarget__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_LoopyGibbsSampling_eraseTarget__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LoopyGibbsSampling_eraseTarget'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::LoopySamplingInference< double,gum::GibbsSampling >::eraseTarget(gum::NodeId const)\n"
    "    gum::LoopySamplingInference< double,gum::GibbsSampling >::eraseTarget(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LoopyGibbsSampling_isTarget__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::GibbsSampling > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  bool result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__GibbsSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyGibbsSampling_isTarget" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::GibbsSampling > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::GibbsSampling > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoopyGibbsSampling_isTarget" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (bool)gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__isTarget__SWIG_0((gum::LoopySamplingInference< double,gum::GibbsSampling > const *)arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyGibbsSampling_isTarget__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::GibbsSampling > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  bool result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__GibbsSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyGibbsSampling_isTarget" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::GibbsSampling > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::GibbsSampling > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LoopyGibbsSampling_isTarget" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyGibbsSampling_isTarget" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__isTarget__SWIG_1((gum::LoopySamplingInference< double,gum::GibbsSampling > const *)arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyGibbsSampling_isTarget(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "LoopyGibbsSampling_isTarget", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_LoopyGibbsSampling_isTarget__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_LoopyGibbsSampling_isTarget__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LoopyGibbsSampling_isTarget'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::LoopySamplingInference< double,gum::GibbsSampling >::isTarget(gum::NodeId const) const\n"
    "    gum::LoopySamplingInference< double,gum::GibbsSampling >::isTarget(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LoopyGibbsSampling_nbrTargets(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::GibbsSampling > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::Size result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__GibbsSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyGibbsSampling_nbrTargets" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::GibbsSampling > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::GibbsSampling > * >(argp1);
  {
    try {
      result = gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__nbrTargets((gum::LoopySamplingInference< double,gum::GibbsSampling > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyGibbsSampling_H__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::GibbsSampling > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  double result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__GibbsSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyGibbsSampling_H" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::GibbsSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::GibbsSampling > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoopyGibbsSampling_H" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (double)gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__H__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyGibbsSampling_H__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::GibbsSampling > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  double result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__GibbsSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyGibbsSampling_H" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::GibbsSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::GibbsSampling > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LoopyGibbsSampling_H" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyGibbsSampling_H" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (double)gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__H__SWIG_1(arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyGibbsSampling_H(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "LoopyGibbsSampling_H", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_LoopyGibbsSampling_H__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_LoopyGibbsSampling_H__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LoopyGibbsSampling_H'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::LoopySamplingInference< double,gum::GibbsSampling >::H(gum::NodeId const)\n"
    "    gum::LoopySamplingInference< double,gum::GibbsSampling >::H(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LoopyGibbsSampling_evidenceImpact__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::GibbsSampling > *arg1 = 0 ;
  gum::NodeId arg2 ;
  gum::NodeSet *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  gum::Tensor< double > result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__GibbsSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyGibbsSampling_evidenceImpact" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::GibbsSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::GibbsSampling > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoopyGibbsSampling_evidenceImpact" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_gum__SetT_std__size_t_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LoopyGibbsSampling_evidenceImpact" "', argument " "3"" of type '" "gum::NodeSet const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyGibbsSampling_evidenceImpact" "', argument " "3"" of type '" "gum::NodeSet const &""'"); 
  }
  arg3 = reinterpret_cast< gum::NodeSet * >(argp3);
  {
    try {
      result = gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__evidenceImpact__SWIG_0(arg1,SWIG_STD_MOVE(arg2),(gum::Set< std::size_t > const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::Tensor< double >(result)), SWIGTYPE_p_gum__TensorT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyGibbsSampling_evidenceImpact__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::GibbsSampling > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  gum::Tensor< double > result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__GibbsSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyGibbsSampling_evidenceImpact" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::GibbsSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::GibbsSampling > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LoopyGibbsSampling_evidenceImpact" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyGibbsSampling_evidenceImpact" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LoopyGibbsSampling_evidenceImpact" "', argument " "3"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyGibbsSampling_evidenceImpact" "', argument " "3"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      result = gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__evidenceImpact__SWIG_1(arg1,(std::string const &)*arg2,(std::vector< std::string,std::allocator< std::string > > const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::Tensor< double >(result)), SWIGTYPE_p_gum__TensorT_double_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyGibbsSampling_BN(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::GibbsSampling > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::IBayesNet< double > *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__GibbsSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyGibbsSampling_BN" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::GibbsSampling > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::GibbsSampling > * >(argp1);
  {
    try {
      result = (gum::IBayesNet< double > *) &gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__BN((gum::LoopySamplingInference< double,gum::GibbsSampling > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__IBayesNetT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyGibbsSampling_currentPosterior__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::GibbsSampling > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  gum::Tensor< double > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__GibbsSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyGibbsSampling_currentPosterior" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::GibbsSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::GibbsSampling > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoopyGibbsSampling_currentPosterior" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (gum::Tensor< double > *) &gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__currentPosterior__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__TensorT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyGibbsSampling_currentPosterior__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::GibbsSampling > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  gum::Tensor< double > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__GibbsSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyGibbsSampling_currentPosterior" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::GibbsSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::GibbsSampling > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LoopyGibbsSampling_currentPosterior" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyGibbsSampling_currentPosterior" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (gum::Tensor< double > *) &gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__currentPosterior__SWIG_1(arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__TensorT_double_t, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyGibbsSampling_currentPosterior(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "LoopyGibbsSampling_currentPosterior", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_LoopyGibbsSampling_currentPosterior__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_LoopyGibbsSampling_currentPosterior__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LoopyGibbsSampling_currentPosterior'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::LoopySamplingInference< double,gum::GibbsSampling >::currentPosterior(gum::NodeId const)\n"
    "    gum::LoopySamplingInference< double,gum::GibbsSampling >::currentPosterior(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LoopyGibbsSampling_nbrDrawnVar(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::GibbsSampling > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::Size result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__GibbsSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyGibbsSampling_nbrDrawnVar" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::GibbsSampling > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::GibbsSampling > * >(argp1);
  {
    try {
      result = gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__nbrDrawnVar((gum::LoopySamplingInference< double,gum::GibbsSampling > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyGibbsSampling_setNbrDrawnVar(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::GibbsSampling > *arg1 = 0 ;
  gum::Size arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LoopyGibbsSampling_setNbrDrawnVar", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__GibbsSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyGibbsSampling_setNbrDrawnVar" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::GibbsSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::GibbsSampling > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoopyGibbsSampling_setNbrDrawnVar" "', argument " "2"" of type '" "gum::Size""'");
  } 
  arg2 = static_cast< gum::Size >(val2);
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__setNbrDrawnVar(arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyGibbsSampling_isDrawnAtRandom(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::GibbsSampling > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__GibbsSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyGibbsSampling_isDrawnAtRandom" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::GibbsSampling > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::GibbsSampling > * >(argp1);
  {
    try {
      result = (bool)gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__isDrawnAtRandom((gum::LoopySamplingInference< double,gum::GibbsSampling > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyGibbsSampling_setDrawnAtRandom(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::GibbsSampling > *arg1 = 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LoopyGibbsSampling_setDrawnAtRandom", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__GibbsSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyGibbsSampling_setDrawnAtRandom" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::GibbsSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::GibbsSampling > * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoopyGibbsSampling_setDrawnAtRandom" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__setDrawnAtRandom(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyGibbsSampling_burnIn(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::GibbsSampling > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::Size result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__GibbsSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyGibbsSampling_burnIn" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::GibbsSampling > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::GibbsSampling > * >(argp1);
  {
    try {
      result = gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__burnIn((gum::LoopySamplingInference< double,gum::GibbsSampling > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyGibbsSampling_setBurnIn(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::GibbsSampling > *arg1 = 0 ;
  gum::Size arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LoopyGibbsSampling_setBurnIn", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__GibbsSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyGibbsSampling_setBurnIn" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::GibbsSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::GibbsSampling > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoopyGibbsSampling_setBurnIn" "', argument " "2"" of type '" "gum::Size""'");
  } 
  arg2 = static_cast< gum::Size >(val2);
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__setBurnIn(arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyGibbsSampling_setEvidence(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::GibbsSampling > *arg1 = 0 ;
  PyObject *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LoopyGibbsSampling_setEvidence", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__GibbsSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyGibbsSampling_setEvidence" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::GibbsSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::GibbsSampling > * >(argp1);
  arg2 = swig_obj[1];
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__setEvidence(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyGibbsSampling_updateEvidence(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::GibbsSampling > *arg1 = 0 ;
  PyObject *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LoopyGibbsSampling_updateEvidence", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__GibbsSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyGibbsSampling_updateEvidence" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::GibbsSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::GibbsSampling > * >(argp1);
  arg2 = swig_obj[1];
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__updateEvidence(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyGibbsSampling_setTargets(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::GibbsSampling > *arg1 = 0 ;
  PyObject *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LoopyGibbsSampling_setTargets", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__GibbsSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyGibbsSampling_setTargets" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::GibbsSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::GibbsSampling > * >(argp1);
  arg2 = swig_obj[1];
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__setTargets(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyGibbsSampling_hardEvidenceNodes(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::GibbsSampling > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__GibbsSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyGibbsSampling_hardEvidenceNodes" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::GibbsSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::GibbsSampling > * >(argp1);
  {
    try {
      result = (PyObject *)gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__hardEvidenceNodes(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyGibbsSampling_softEvidenceNodes(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::GibbsSampling > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__GibbsSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyGibbsSampling_softEvidenceNodes" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::GibbsSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::GibbsSampling > * >(argp1);
  {
    try {
      result = (PyObject *)gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__softEvidenceNodes(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyGibbsSampling_targets(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::GibbsSampling > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__GibbsSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyGibbsSampling_targets" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::GibbsSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::GibbsSampling > * >(argp1);
  {
    try {
      result = (PyObject *)gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__targets(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyGibbsSampling_evidenceImpact__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::GibbsSampling > *arg1 = 0 ;
  PyObject *arg2 = 0 ;
  PyObject *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gum::Tensor< double > result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__GibbsSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyGibbsSampling_evidenceImpact" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::GibbsSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::GibbsSampling > * >(argp1);
  arg2 = swig_obj[1];
  arg3 = swig_obj[2];
  {
    try {
      result = gum_LoopySamplingInference_Sl_double_Sc_gum_GibbsSampling_Sg__evidenceImpact__SWIG_2(arg1,arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::Tensor< double >(result)), SWIGTYPE_p_gum__TensorT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyGibbsSampling_evidenceImpact(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "LoopyGibbsSampling_evidenceImpact", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    {
      int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_gum__SetT_std__size_t_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_1;
    return _wrap_LoopyGibbsSampling_evidenceImpact__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 3) {
    int _v = 0;
    {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_2;
    {
      int res = swig::asptr(argv[2], (std::vector< std::string,std::allocator< std::string > >**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_2;
    return _wrap_LoopyGibbsSampling_evidenceImpact__SWIG_1(self, argc, argv);
  }
check_2:
  
  if (argc == 3) {
    PyObject *retobj = _wrap_LoopyGibbsSampling_evidenceImpact__SWIG_2(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LoopyGibbsSampling_evidenceImpact'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::LoopySamplingInference< double,gum::GibbsSampling >::evidenceImpact(gum::NodeId,gum::NodeSet const &)\n"
    "    gum::LoopySamplingInference< double,gum::GibbsSampling >::evidenceImpact(std::string const &,std::vector< std::string,std::allocator< std::string > > const &)\n"
    "    gum::LoopySamplingInference< double,gum::GibbsSampling >::evidenceImpact(PyObject *,PyObject *)\n");
  return 0;
}


SWIGINTERN PyObject *LoopyGibbsSampling_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj = NULL;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__GibbsSampling_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *LoopyGibbsSampling_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_LoopyMonteCarloSampling(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::IBayesNet< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::LoopySamplingInference< double,gum::MonteCarloSampling > *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__IBayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LoopyMonteCarloSampling" "', argument " "1"" of type '" "gum::IBayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::IBayesNet< double > * >(argp1);
  {
    try {
      result = (gum::LoopySamplingInference< double,gum::MonteCarloSampling > *)new gum::LoopySamplingInference< double,gum::MonteCarloSampling >((gum::IBayesNet< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__MonteCarloSampling_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_LoopyMonteCarloSampling(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::MonteCarloSampling > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__MonteCarloSampling_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LoopyMonteCarloSampling" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::MonteCarloSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::MonteCarloSampling > * >(argp1);
  {
    try {
      delete arg1;
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyMonteCarloSampling_makeInference_(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::MonteCarloSampling > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__MonteCarloSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyMonteCarloSampling_makeInference_" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::MonteCarloSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::MonteCarloSampling > * >(argp1);
  {
    try {
      (arg1)->makeInference_();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyMonteCarloSampling_setVirtualLBPSize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::MonteCarloSampling > *arg1 = 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LoopyMonteCarloSampling_setVirtualLBPSize", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__MonteCarloSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyMonteCarloSampling_setVirtualLBPSize" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::MonteCarloSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::MonteCarloSampling > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoopyMonteCarloSampling_setVirtualLBPSize" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setVirtualLBPSize(arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyMonteCarloSampling_setVerbosity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::MonteCarloSampling > *arg1 = 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LoopyMonteCarloSampling_setVerbosity", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__MonteCarloSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyMonteCarloSampling_setVerbosity" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::MonteCarloSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::MonteCarloSampling > * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoopyMonteCarloSampling_setVerbosity" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__setVerbosity(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyMonteCarloSampling_setEpsilon(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::MonteCarloSampling > *arg1 = 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LoopyMonteCarloSampling_setEpsilon", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__MonteCarloSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyMonteCarloSampling_setEpsilon" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::MonteCarloSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::MonteCarloSampling > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoopyMonteCarloSampling_setEpsilon" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__setEpsilon(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyMonteCarloSampling_setMinEpsilonRate(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::MonteCarloSampling > *arg1 = 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LoopyMonteCarloSampling_setMinEpsilonRate", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__MonteCarloSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyMonteCarloSampling_setMinEpsilonRate" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::MonteCarloSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::MonteCarloSampling > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoopyMonteCarloSampling_setMinEpsilonRate" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__setMinEpsilonRate(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyMonteCarloSampling_setMaxIter(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::MonteCarloSampling > *arg1 = 0 ;
  gum::Size arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LoopyMonteCarloSampling_setMaxIter", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__MonteCarloSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyMonteCarloSampling_setMaxIter" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::MonteCarloSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::MonteCarloSampling > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoopyMonteCarloSampling_setMaxIter" "', argument " "2"" of type '" "gum::Size""'");
  } 
  arg2 = static_cast< gum::Size >(val2);
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__setMaxIter(arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyMonteCarloSampling_setMaxTime(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::MonteCarloSampling > *arg1 = 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LoopyMonteCarloSampling_setMaxTime", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__MonteCarloSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyMonteCarloSampling_setMaxTime" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::MonteCarloSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::MonteCarloSampling > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoopyMonteCarloSampling_setMaxTime" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__setMaxTime(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyMonteCarloSampling_setPeriodSize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::MonteCarloSampling > *arg1 = 0 ;
  gum::Size arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LoopyMonteCarloSampling_setPeriodSize", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__MonteCarloSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyMonteCarloSampling_setPeriodSize" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::MonteCarloSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::MonteCarloSampling > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoopyMonteCarloSampling_setPeriodSize" "', argument " "2"" of type '" "gum::Size""'");
  } 
  arg2 = static_cast< gum::Size >(val2);
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__setPeriodSize(arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyMonteCarloSampling_verbosity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::MonteCarloSampling > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__MonteCarloSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyMonteCarloSampling_verbosity" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::MonteCarloSampling > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::MonteCarloSampling > * >(argp1);
  {
    try {
      result = (bool)gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__verbosity((gum::LoopySamplingInference< double,gum::MonteCarloSampling > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyMonteCarloSampling_epsilon(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::MonteCarloSampling > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__MonteCarloSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyMonteCarloSampling_epsilon" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::MonteCarloSampling > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::MonteCarloSampling > * >(argp1);
  {
    try {
      result = (double)gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__epsilon((gum::LoopySamplingInference< double,gum::MonteCarloSampling > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyMonteCarloSampling_minEpsilonRate(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::MonteCarloSampling > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__MonteCarloSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyMonteCarloSampling_minEpsilonRate" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::MonteCarloSampling > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::MonteCarloSampling > * >(argp1);
  {
    try {
      result = (double)gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__minEpsilonRate((gum::LoopySamplingInference< double,gum::MonteCarloSampling > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyMonteCarloSampling_maxIter(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::MonteCarloSampling > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::Size result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__MonteCarloSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyMonteCarloSampling_maxIter" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::MonteCarloSampling > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::MonteCarloSampling > * >(argp1);
  {
    try {
      result = gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__maxIter((gum::LoopySamplingInference< double,gum::MonteCarloSampling > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyMonteCarloSampling_maxTime(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::MonteCarloSampling > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__MonteCarloSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyMonteCarloSampling_maxTime" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::MonteCarloSampling > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::MonteCarloSampling > * >(argp1);
  {
    try {
      result = (double)gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__maxTime((gum::LoopySamplingInference< double,gum::MonteCarloSampling > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyMonteCarloSampling_periodSize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::MonteCarloSampling > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::Size result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__MonteCarloSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyMonteCarloSampling_periodSize" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::MonteCarloSampling > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::MonteCarloSampling > * >(argp1);
  {
    try {
      result = gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__periodSize((gum::LoopySamplingInference< double,gum::MonteCarloSampling > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyMonteCarloSampling_nbrIterations(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::MonteCarloSampling > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::Size result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__MonteCarloSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyMonteCarloSampling_nbrIterations" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::MonteCarloSampling > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::MonteCarloSampling > * >(argp1);
  {
    try {
      result = gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__nbrIterations((gum::LoopySamplingInference< double,gum::MonteCarloSampling > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyMonteCarloSampling_currentTime(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::MonteCarloSampling > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__MonteCarloSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyMonteCarloSampling_currentTime" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::MonteCarloSampling > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::MonteCarloSampling > * >(argp1);
  {
    try {
      result = (double)gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__currentTime((gum::LoopySamplingInference< double,gum::MonteCarloSampling > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyMonteCarloSampling_messageApproximationScheme(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::MonteCarloSampling > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__MonteCarloSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyMonteCarloSampling_messageApproximationScheme" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::MonteCarloSampling > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::MonteCarloSampling > * >(argp1);
  {
    try {
      result = gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__messageApproximationScheme((gum::LoopySamplingInference< double,gum::MonteCarloSampling > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyMonteCarloSampling_history(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::MonteCarloSampling > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< double,std::allocator< double > > *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__MonteCarloSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyMonteCarloSampling_history" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::MonteCarloSampling > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::MonteCarloSampling > * >(argp1);
  {
    try {
      result = (std::vector< double,std::allocator< double > > *) &gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__history((gum::LoopySamplingInference< double,gum::MonteCarloSampling > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< double,std::allocator< double > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyMonteCarloSampling__asIApproximationSchemeConfiguration(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::MonteCarloSampling > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::IApproximationSchemeConfiguration *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__MonteCarloSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyMonteCarloSampling__asIApproximationSchemeConfiguration" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::MonteCarloSampling > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::MonteCarloSampling > * >(argp1);
  {
    try {
      result = (gum::IApproximationSchemeConfiguration *) &gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg___asIApproximationSchemeConfiguration((gum::LoopySamplingInference< double,gum::MonteCarloSampling > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__IApproximationSchemeConfiguration, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyMonteCarloSampling_makeInference(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::MonteCarloSampling > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__MonteCarloSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyMonteCarloSampling_makeInference" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::MonteCarloSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::MonteCarloSampling > * >(argp1);
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__makeInference(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyMonteCarloSampling_posterior__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::MonteCarloSampling > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  gum::Tensor< double > result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__MonteCarloSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyMonteCarloSampling_posterior" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::MonteCarloSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::MonteCarloSampling > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoopyMonteCarloSampling_posterior" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__posterior__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::Tensor< double >(result)), SWIGTYPE_p_gum__TensorT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyMonteCarloSampling_posterior__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::MonteCarloSampling > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  gum::Tensor< double > result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__MonteCarloSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyMonteCarloSampling_posterior" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::MonteCarloSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::MonteCarloSampling > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LoopyMonteCarloSampling_posterior" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyMonteCarloSampling_posterior" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__posterior__SWIG_1(arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::Tensor< double >(result)), SWIGTYPE_p_gum__TensorT_double_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyMonteCarloSampling_posterior(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "LoopyMonteCarloSampling_posterior", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_LoopyMonteCarloSampling_posterior__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_LoopyMonteCarloSampling_posterior__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LoopyMonteCarloSampling_posterior'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::LoopySamplingInference< double,gum::MonteCarloSampling >::posterior(gum::NodeId const)\n"
    "    gum::LoopySamplingInference< double,gum::MonteCarloSampling >::posterior(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LoopyMonteCarloSampling_addEvidence__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::MonteCarloSampling > *arg1 = 0 ;
  gum::NodeId arg2 ;
  gum::Idx arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__MonteCarloSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyMonteCarloSampling_addEvidence" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::MonteCarloSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::MonteCarloSampling > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoopyMonteCarloSampling_addEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "LoopyMonteCarloSampling_addEvidence" "', argument " "3"" of type '" "gum::Idx""'");
  } 
  arg3 = static_cast< gum::Idx >(val3);
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__addEvidence__SWIG_0(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyMonteCarloSampling_addEvidence__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::MonteCarloSampling > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  gum::Idx arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  size_t val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__MonteCarloSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyMonteCarloSampling_addEvidence" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::MonteCarloSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::MonteCarloSampling > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LoopyMonteCarloSampling_addEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyMonteCarloSampling_addEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "LoopyMonteCarloSampling_addEvidence" "', argument " "3"" of type '" "gum::Idx""'");
  } 
  arg3 = static_cast< gum::Idx >(val3);
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__addEvidence__SWIG_1(arg1,(std::string const &)*arg2,SWIG_STD_MOVE(arg3));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyMonteCarloSampling_addEvidence__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::MonteCarloSampling > *arg1 = 0 ;
  gum::NodeId arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__MonteCarloSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyMonteCarloSampling_addEvidence" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::MonteCarloSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::MonteCarloSampling > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoopyMonteCarloSampling_addEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LoopyMonteCarloSampling_addEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyMonteCarloSampling_addEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__addEvidence__SWIG_2(arg1,SWIG_STD_MOVE(arg2),(std::string const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyMonteCarloSampling_addEvidence__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::MonteCarloSampling > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__MonteCarloSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyMonteCarloSampling_addEvidence" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::MonteCarloSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::MonteCarloSampling > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LoopyMonteCarloSampling_addEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyMonteCarloSampling_addEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LoopyMonteCarloSampling_addEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyMonteCarloSampling_addEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__addEvidence__SWIG_3(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyMonteCarloSampling_addEvidence__SWIG_4(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::MonteCarloSampling > *arg1 = 0 ;
  gum::NodeId arg2 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__MonteCarloSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyMonteCarloSampling_addEvidence" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::MonteCarloSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::MonteCarloSampling > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoopyMonteCarloSampling_addEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LoopyMonteCarloSampling_addEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyMonteCarloSampling_addEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__addEvidence__SWIG_4(arg1,SWIG_STD_MOVE(arg2),(std::vector< double,std::allocator< double > > const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyMonteCarloSampling_addEvidence__SWIG_5(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::MonteCarloSampling > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__MonteCarloSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyMonteCarloSampling_addEvidence" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::MonteCarloSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::MonteCarloSampling > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LoopyMonteCarloSampling_addEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyMonteCarloSampling_addEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LoopyMonteCarloSampling_addEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyMonteCarloSampling_addEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__addEvidence__SWIG_5(arg1,(std::string const &)*arg2,(std::vector< double,std::allocator< double > > const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyMonteCarloSampling_addEvidence__SWIG_6(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::MonteCarloSampling > *arg1 = 0 ;
  gum::Tensor< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__MonteCarloSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyMonteCarloSampling_addEvidence" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::MonteCarloSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::MonteCarloSampling > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_gum__TensorT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LoopyMonteCarloSampling_addEvidence" "', argument " "2"" of type '" "gum::Tensor< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyMonteCarloSampling_addEvidence" "', argument " "2"" of type '" "gum::Tensor< double > const &""'"); 
  }
  arg2 = reinterpret_cast< gum::Tensor< double > * >(argp2);
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__addEvidence__SWIG_6(arg1,(gum::Tensor< double > const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyMonteCarloSampling_addEvidence(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "LoopyMonteCarloSampling_addEvidence", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    PyObject *retobj = _wrap_LoopyMonteCarloSampling_addEvidence__SWIG_6(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_2;
    {
      {
        int res = SWIG_AsVal_size_t(argv[2], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_2;
    return _wrap_LoopyMonteCarloSampling_addEvidence__SWIG_0(self, argc, argv);
  }
check_2:
  
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_3;
    {
      int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_3;
    return _wrap_LoopyMonteCarloSampling_addEvidence__SWIG_2(self, argc, argv);
  }
check_3:
  
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_4;
    {
      int res = swig::asptr(argv[2], (std::vector< double,std::allocator< double > >**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_4;
    return _wrap_LoopyMonteCarloSampling_addEvidence__SWIG_4(self, argc, argv);
  }
check_4:
  
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[2], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_5;
    return _wrap_LoopyMonteCarloSampling_addEvidence__SWIG_1(self, argc, argv);
  }
check_5:
  
  if (argc == 3) {
    int _v = 0;
    {
      int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_6;
    return _wrap_LoopyMonteCarloSampling_addEvidence__SWIG_3(self, argc, argv);
  }
check_6:
  
  if (argc == 3) {
    PyObject *retobj = _wrap_LoopyMonteCarloSampling_addEvidence__SWIG_5(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LoopyMonteCarloSampling_addEvidence'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::LoopySamplingInference< double,gum::MonteCarloSampling >::addEvidence(gum::NodeId const,gum::Idx const)\n"
    "    gum::LoopySamplingInference< double,gum::MonteCarloSampling >::addEvidence(std::string const &,gum::Idx const)\n"
    "    gum::LoopySamplingInference< double,gum::MonteCarloSampling >::addEvidence(gum::NodeId const,std::string const &)\n"
    "    gum::LoopySamplingInference< double,gum::MonteCarloSampling >::addEvidence(std::string const &,std::string const &)\n"
    "    gum::LoopySamplingInference< double,gum::MonteCarloSampling >::addEvidence(gum::NodeId const,std::vector< double,std::allocator< double > > const &)\n"
    "    gum::LoopySamplingInference< double,gum::MonteCarloSampling >::addEvidence(std::string const &,std::vector< double,std::allocator< double > > const &)\n"
    "    gum::LoopySamplingInference< double,gum::MonteCarloSampling >::addEvidence(gum::Tensor< double > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LoopyMonteCarloSampling_chgEvidence__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::MonteCarloSampling > *arg1 = 0 ;
  gum::NodeId arg2 ;
  gum::Idx arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__MonteCarloSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyMonteCarloSampling_chgEvidence" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::MonteCarloSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::MonteCarloSampling > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoopyMonteCarloSampling_chgEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "LoopyMonteCarloSampling_chgEvidence" "', argument " "3"" of type '" "gum::Idx""'");
  } 
  arg3 = static_cast< gum::Idx >(val3);
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__chgEvidence__SWIG_0(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyMonteCarloSampling_chgEvidence__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::MonteCarloSampling > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  gum::Idx arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  size_t val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__MonteCarloSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyMonteCarloSampling_chgEvidence" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::MonteCarloSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::MonteCarloSampling > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LoopyMonteCarloSampling_chgEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyMonteCarloSampling_chgEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "LoopyMonteCarloSampling_chgEvidence" "', argument " "3"" of type '" "gum::Idx""'");
  } 
  arg3 = static_cast< gum::Idx >(val3);
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__chgEvidence__SWIG_1(arg1,(std::string const &)*arg2,SWIG_STD_MOVE(arg3));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyMonteCarloSampling_chgEvidence__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::MonteCarloSampling > *arg1 = 0 ;
  gum::NodeId arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__MonteCarloSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyMonteCarloSampling_chgEvidence" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::MonteCarloSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::MonteCarloSampling > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoopyMonteCarloSampling_chgEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LoopyMonteCarloSampling_chgEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyMonteCarloSampling_chgEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__chgEvidence__SWIG_2(arg1,SWIG_STD_MOVE(arg2),(std::string const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyMonteCarloSampling_chgEvidence__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::MonteCarloSampling > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__MonteCarloSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyMonteCarloSampling_chgEvidence" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::MonteCarloSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::MonteCarloSampling > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LoopyMonteCarloSampling_chgEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyMonteCarloSampling_chgEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LoopyMonteCarloSampling_chgEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyMonteCarloSampling_chgEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__chgEvidence__SWIG_3(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyMonteCarloSampling_chgEvidence__SWIG_4(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::MonteCarloSampling > *arg1 = 0 ;
  gum::Tensor< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__MonteCarloSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyMonteCarloSampling_chgEvidence" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::MonteCarloSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::MonteCarloSampling > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_gum__TensorT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LoopyMonteCarloSampling_chgEvidence" "', argument " "2"" of type '" "gum::Tensor< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyMonteCarloSampling_chgEvidence" "', argument " "2"" of type '" "gum::Tensor< double > const &""'"); 
  }
  arg2 = reinterpret_cast< gum::Tensor< double > * >(argp2);
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__chgEvidence__SWIG_4(arg1,(gum::Tensor< double > const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyMonteCarloSampling_chgEvidence__SWIG_5(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::MonteCarloSampling > *arg1 = 0 ;
  gum::NodeId arg2 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__MonteCarloSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyMonteCarloSampling_chgEvidence" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::MonteCarloSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::MonteCarloSampling > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoopyMonteCarloSampling_chgEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LoopyMonteCarloSampling_chgEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyMonteCarloSampling_chgEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__chgEvidence__SWIG_5(arg1,SWIG_STD_MOVE(arg2),(std::vector< double,std::allocator< double > > const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyMonteCarloSampling_chgEvidence__SWIG_6(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::MonteCarloSampling > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__MonteCarloSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyMonteCarloSampling_chgEvidence" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::MonteCarloSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::MonteCarloSampling > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LoopyMonteCarloSampling_chgEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyMonteCarloSampling_chgEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LoopyMonteCarloSampling_chgEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyMonteCarloSampling_chgEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__chgEvidence__SWIG_6(arg1,(std::string const &)*arg2,(std::vector< double,std::allocator< double > > const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyMonteCarloSampling_chgEvidence(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "LoopyMonteCarloSampling_chgEvidence", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    PyObject *retobj = _wrap_LoopyMonteCarloSampling_chgEvidence__SWIG_4(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_2;
    {
      {
        int res = SWIG_AsVal_size_t(argv[2], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_2;
    return _wrap_LoopyMonteCarloSampling_chgEvidence__SWIG_0(self, argc, argv);
  }
check_2:
  
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_3;
    {
      int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_3;
    return _wrap_LoopyMonteCarloSampling_chgEvidence__SWIG_2(self, argc, argv);
  }
check_3:
  
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_4;
    {
      int res = swig::asptr(argv[2], (std::vector< double,std::allocator< double > >**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_4;
    return _wrap_LoopyMonteCarloSampling_chgEvidence__SWIG_5(self, argc, argv);
  }
check_4:
  
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[2], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_5;
    return _wrap_LoopyMonteCarloSampling_chgEvidence__SWIG_1(self, argc, argv);
  }
check_5:
  
  if (argc == 3) {
    int _v = 0;
    {
      int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_6;
    return _wrap_LoopyMonteCarloSampling_chgEvidence__SWIG_3(self, argc, argv);
  }
check_6:
  
  if (argc == 3) {
    PyObject *retobj = _wrap_LoopyMonteCarloSampling_chgEvidence__SWIG_6(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LoopyMonteCarloSampling_chgEvidence'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::LoopySamplingInference< double,gum::MonteCarloSampling >::chgEvidence(gum::NodeId const,gum::Idx const)\n"
    "    gum::LoopySamplingInference< double,gum::MonteCarloSampling >::chgEvidence(std::string const &,gum::Idx const)\n"
    "    gum::LoopySamplingInference< double,gum::MonteCarloSampling >::chgEvidence(gum::NodeId const,std::string const &)\n"
    "    gum::LoopySamplingInference< double,gum::MonteCarloSampling >::chgEvidence(std::string const &,std::string const &)\n"
    "    gum::LoopySamplingInference< double,gum::MonteCarloSampling >::chgEvidence(gum::Tensor< double > const &)\n"
    "    gum::LoopySamplingInference< double,gum::MonteCarloSampling >::chgEvidence(gum::NodeId const,std::vector< double,std::allocator< double > > const &)\n"
    "    gum::LoopySamplingInference< double,gum::MonteCarloSampling >::chgEvidence(std::string const &,std::vector< double,std::allocator< double > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LoopyMonteCarloSampling_hasEvidence__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::MonteCarloSampling > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  bool result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__MonteCarloSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyMonteCarloSampling_hasEvidence" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::MonteCarloSampling > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::MonteCarloSampling > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoopyMonteCarloSampling_hasEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (bool)gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__hasEvidence__SWIG_0((gum::LoopySamplingInference< double,gum::MonteCarloSampling > const *)arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyMonteCarloSampling_hasEvidence__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::MonteCarloSampling > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  bool result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__MonteCarloSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyMonteCarloSampling_hasEvidence" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::MonteCarloSampling > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::MonteCarloSampling > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LoopyMonteCarloSampling_hasEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyMonteCarloSampling_hasEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__hasEvidence__SWIG_1((gum::LoopySamplingInference< double,gum::MonteCarloSampling > const *)arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyMonteCarloSampling_hasEvidence(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "LoopyMonteCarloSampling_hasEvidence", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_LoopyMonteCarloSampling_hasEvidence__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_LoopyMonteCarloSampling_hasEvidence__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LoopyMonteCarloSampling_hasEvidence'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::LoopySamplingInference< double,gum::MonteCarloSampling >::hasEvidence(gum::NodeId const) const\n"
    "    gum::LoopySamplingInference< double,gum::MonteCarloSampling >::hasEvidence(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LoopyMonteCarloSampling_eraseAllEvidence(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::MonteCarloSampling > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__MonteCarloSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyMonteCarloSampling_eraseAllEvidence" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::MonteCarloSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::MonteCarloSampling > * >(argp1);
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__eraseAllEvidence(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyMonteCarloSampling_eraseEvidence__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::MonteCarloSampling > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__MonteCarloSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyMonteCarloSampling_eraseEvidence" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::MonteCarloSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::MonteCarloSampling > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoopyMonteCarloSampling_eraseEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__eraseEvidence__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyMonteCarloSampling_eraseEvidence__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::MonteCarloSampling > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__MonteCarloSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyMonteCarloSampling_eraseEvidence" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::MonteCarloSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::MonteCarloSampling > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LoopyMonteCarloSampling_eraseEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyMonteCarloSampling_eraseEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__eraseEvidence__SWIG_1(arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyMonteCarloSampling_eraseEvidence(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "LoopyMonteCarloSampling_eraseEvidence", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_LoopyMonteCarloSampling_eraseEvidence__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_LoopyMonteCarloSampling_eraseEvidence__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LoopyMonteCarloSampling_eraseEvidence'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::LoopySamplingInference< double,gum::MonteCarloSampling >::eraseEvidence(gum::NodeId const)\n"
    "    gum::LoopySamplingInference< double,gum::MonteCarloSampling >::eraseEvidence(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LoopyMonteCarloSampling_hasSoftEvidence__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::MonteCarloSampling > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  bool result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__MonteCarloSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyMonteCarloSampling_hasSoftEvidence" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::MonteCarloSampling > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::MonteCarloSampling > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoopyMonteCarloSampling_hasSoftEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (bool)gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__hasSoftEvidence__SWIG_0((gum::LoopySamplingInference< double,gum::MonteCarloSampling > const *)arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyMonteCarloSampling_hasHardEvidence(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::MonteCarloSampling > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LoopyMonteCarloSampling_hasHardEvidence", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__MonteCarloSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyMonteCarloSampling_hasHardEvidence" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::MonteCarloSampling > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::MonteCarloSampling > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LoopyMonteCarloSampling_hasHardEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyMonteCarloSampling_hasHardEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__hasHardEvidence((gum::LoopySamplingInference< double,gum::MonteCarloSampling > const *)arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyMonteCarloSampling_hasSoftEvidence__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::MonteCarloSampling > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  bool result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__MonteCarloSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyMonteCarloSampling_hasSoftEvidence" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::MonteCarloSampling > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::MonteCarloSampling > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LoopyMonteCarloSampling_hasSoftEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyMonteCarloSampling_hasSoftEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__hasSoftEvidence__SWIG_1((gum::LoopySamplingInference< double,gum::MonteCarloSampling > const *)arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyMonteCarloSampling_hasSoftEvidence(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "LoopyMonteCarloSampling_hasSoftEvidence", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_LoopyMonteCarloSampling_hasSoftEvidence__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_LoopyMonteCarloSampling_hasSoftEvidence__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LoopyMonteCarloSampling_hasSoftEvidence'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::LoopySamplingInference< double,gum::MonteCarloSampling >::hasSoftEvidence(gum::NodeId const) const\n"
    "    gum::LoopySamplingInference< double,gum::MonteCarloSampling >::hasSoftEvidence(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LoopyMonteCarloSampling_nbrEvidence(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::MonteCarloSampling > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::Size result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__MonteCarloSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyMonteCarloSampling_nbrEvidence" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::MonteCarloSampling > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::MonteCarloSampling > * >(argp1);
  {
    try {
      result = gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__nbrEvidence((gum::LoopySamplingInference< double,gum::MonteCarloSampling > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyMonteCarloSampling_nbrHardEvidence(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::MonteCarloSampling > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::Size result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__MonteCarloSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyMonteCarloSampling_nbrHardEvidence" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::MonteCarloSampling > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::MonteCarloSampling > * >(argp1);
  {
    try {
      result = gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__nbrHardEvidence((gum::LoopySamplingInference< double,gum::MonteCarloSampling > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyMonteCarloSampling_nbrSoftEvidence(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::MonteCarloSampling > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::Size result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__MonteCarloSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyMonteCarloSampling_nbrSoftEvidence" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::MonteCarloSampling > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::MonteCarloSampling > * >(argp1);
  {
    try {
      result = gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__nbrSoftEvidence((gum::LoopySamplingInference< double,gum::MonteCarloSampling > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyMonteCarloSampling_eraseAllTargets(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::MonteCarloSampling > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__MonteCarloSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyMonteCarloSampling_eraseAllTargets" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::MonteCarloSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::MonteCarloSampling > * >(argp1);
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__eraseAllTargets(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyMonteCarloSampling_addAllTargets(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::MonteCarloSampling > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__MonteCarloSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyMonteCarloSampling_addAllTargets" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::MonteCarloSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::MonteCarloSampling > * >(argp1);
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__addAllTargets(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyMonteCarloSampling_addTarget__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::MonteCarloSampling > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__MonteCarloSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyMonteCarloSampling_addTarget" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::MonteCarloSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::MonteCarloSampling > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoopyMonteCarloSampling_addTarget" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__addTarget__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyMonteCarloSampling_addTarget__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::MonteCarloSampling > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__MonteCarloSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyMonteCarloSampling_addTarget" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::MonteCarloSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::MonteCarloSampling > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LoopyMonteCarloSampling_addTarget" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyMonteCarloSampling_addTarget" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__addTarget__SWIG_1(arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyMonteCarloSampling_addTarget(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "LoopyMonteCarloSampling_addTarget", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_LoopyMonteCarloSampling_addTarget__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_LoopyMonteCarloSampling_addTarget__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LoopyMonteCarloSampling_addTarget'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::LoopySamplingInference< double,gum::MonteCarloSampling >::addTarget(gum::NodeId const)\n"
    "    gum::LoopySamplingInference< double,gum::MonteCarloSampling >::addTarget(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LoopyMonteCarloSampling_eraseTarget__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::MonteCarloSampling > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__MonteCarloSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyMonteCarloSampling_eraseTarget" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::MonteCarloSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::MonteCarloSampling > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoopyMonteCarloSampling_eraseTarget" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__eraseTarget__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyMonteCarloSampling_eraseTarget__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::MonteCarloSampling > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__MonteCarloSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyMonteCarloSampling_eraseTarget" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::MonteCarloSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::MonteCarloSampling > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LoopyMonteCarloSampling_eraseTarget" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyMonteCarloSampling_eraseTarget" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__eraseTarget__SWIG_1(arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyMonteCarloSampling_eraseTarget(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "LoopyMonteCarloSampling_eraseTarget", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_LoopyMonteCarloSampling_eraseTarget__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_LoopyMonteCarloSampling_eraseTarget__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LoopyMonteCarloSampling_eraseTarget'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::LoopySamplingInference< double,gum::MonteCarloSampling >::eraseTarget(gum::NodeId const)\n"
    "    gum::LoopySamplingInference< double,gum::MonteCarloSampling >::eraseTarget(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LoopyMonteCarloSampling_isTarget__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::MonteCarloSampling > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  bool result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__MonteCarloSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyMonteCarloSampling_isTarget" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::MonteCarloSampling > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::MonteCarloSampling > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoopyMonteCarloSampling_isTarget" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (bool)gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__isTarget__SWIG_0((gum::LoopySamplingInference< double,gum::MonteCarloSampling > const *)arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyMonteCarloSampling_isTarget__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::MonteCarloSampling > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  bool result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__MonteCarloSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyMonteCarloSampling_isTarget" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::MonteCarloSampling > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::MonteCarloSampling > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LoopyMonteCarloSampling_isTarget" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyMonteCarloSampling_isTarget" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__isTarget__SWIG_1((gum::LoopySamplingInference< double,gum::MonteCarloSampling > const *)arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyMonteCarloSampling_isTarget(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "LoopyMonteCarloSampling_isTarget", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_LoopyMonteCarloSampling_isTarget__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_LoopyMonteCarloSampling_isTarget__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LoopyMonteCarloSampling_isTarget'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::LoopySamplingInference< double,gum::MonteCarloSampling >::isTarget(gum::NodeId const) const\n"
    "    gum::LoopySamplingInference< double,gum::MonteCarloSampling >::isTarget(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LoopyMonteCarloSampling_nbrTargets(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::MonteCarloSampling > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::Size result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__MonteCarloSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyMonteCarloSampling_nbrTargets" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::MonteCarloSampling > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::MonteCarloSampling > * >(argp1);
  {
    try {
      result = gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__nbrTargets((gum::LoopySamplingInference< double,gum::MonteCarloSampling > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyMonteCarloSampling_H__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::MonteCarloSampling > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  double result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__MonteCarloSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyMonteCarloSampling_H" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::MonteCarloSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::MonteCarloSampling > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoopyMonteCarloSampling_H" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (double)gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__H__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyMonteCarloSampling_H__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::MonteCarloSampling > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  double result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__MonteCarloSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyMonteCarloSampling_H" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::MonteCarloSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::MonteCarloSampling > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LoopyMonteCarloSampling_H" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyMonteCarloSampling_H" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (double)gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__H__SWIG_1(arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyMonteCarloSampling_H(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "LoopyMonteCarloSampling_H", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_LoopyMonteCarloSampling_H__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_LoopyMonteCarloSampling_H__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LoopyMonteCarloSampling_H'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::LoopySamplingInference< double,gum::MonteCarloSampling >::H(gum::NodeId const)\n"
    "    gum::LoopySamplingInference< double,gum::MonteCarloSampling >::H(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LoopyMonteCarloSampling_evidenceImpact__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::MonteCarloSampling > *arg1 = 0 ;
  gum::NodeId arg2 ;
  gum::NodeSet *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  gum::Tensor< double > result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__MonteCarloSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyMonteCarloSampling_evidenceImpact" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::MonteCarloSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::MonteCarloSampling > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoopyMonteCarloSampling_evidenceImpact" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_gum__SetT_std__size_t_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LoopyMonteCarloSampling_evidenceImpact" "', argument " "3"" of type '" "gum::NodeSet const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyMonteCarloSampling_evidenceImpact" "', argument " "3"" of type '" "gum::NodeSet const &""'"); 
  }
  arg3 = reinterpret_cast< gum::NodeSet * >(argp3);
  {
    try {
      result = gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__evidenceImpact__SWIG_0(arg1,SWIG_STD_MOVE(arg2),(gum::Set< std::size_t > const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::Tensor< double >(result)), SWIGTYPE_p_gum__TensorT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyMonteCarloSampling_evidenceImpact__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::MonteCarloSampling > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  gum::Tensor< double > result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__MonteCarloSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyMonteCarloSampling_evidenceImpact" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::MonteCarloSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::MonteCarloSampling > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LoopyMonteCarloSampling_evidenceImpact" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyMonteCarloSampling_evidenceImpact" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LoopyMonteCarloSampling_evidenceImpact" "', argument " "3"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyMonteCarloSampling_evidenceImpact" "', argument " "3"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      result = gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__evidenceImpact__SWIG_1(arg1,(std::string const &)*arg2,(std::vector< std::string,std::allocator< std::string > > const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::Tensor< double >(result)), SWIGTYPE_p_gum__TensorT_double_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyMonteCarloSampling_BN(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::MonteCarloSampling > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::IBayesNet< double > *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__MonteCarloSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyMonteCarloSampling_BN" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::MonteCarloSampling > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::MonteCarloSampling > * >(argp1);
  {
    try {
      result = (gum::IBayesNet< double > *) &gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__BN((gum::LoopySamplingInference< double,gum::MonteCarloSampling > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__IBayesNetT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyMonteCarloSampling_currentPosterior__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::MonteCarloSampling > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  gum::Tensor< double > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__MonteCarloSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyMonteCarloSampling_currentPosterior" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::MonteCarloSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::MonteCarloSampling > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoopyMonteCarloSampling_currentPosterior" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (gum::Tensor< double > *) &gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__currentPosterior__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__TensorT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyMonteCarloSampling_currentPosterior__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::MonteCarloSampling > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  gum::Tensor< double > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__MonteCarloSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyMonteCarloSampling_currentPosterior" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::MonteCarloSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::MonteCarloSampling > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LoopyMonteCarloSampling_currentPosterior" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyMonteCarloSampling_currentPosterior" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (gum::Tensor< double > *) &gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__currentPosterior__SWIG_1(arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__TensorT_double_t, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyMonteCarloSampling_currentPosterior(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "LoopyMonteCarloSampling_currentPosterior", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_LoopyMonteCarloSampling_currentPosterior__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_LoopyMonteCarloSampling_currentPosterior__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LoopyMonteCarloSampling_currentPosterior'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::LoopySamplingInference< double,gum::MonteCarloSampling >::currentPosterior(gum::NodeId const)\n"
    "    gum::LoopySamplingInference< double,gum::MonteCarloSampling >::currentPosterior(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LoopyMonteCarloSampling_setEvidence(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::MonteCarloSampling > *arg1 = 0 ;
  PyObject *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LoopyMonteCarloSampling_setEvidence", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__MonteCarloSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyMonteCarloSampling_setEvidence" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::MonteCarloSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::MonteCarloSampling > * >(argp1);
  arg2 = swig_obj[1];
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__setEvidence(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyMonteCarloSampling_updateEvidence(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::MonteCarloSampling > *arg1 = 0 ;
  PyObject *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LoopyMonteCarloSampling_updateEvidence", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__MonteCarloSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyMonteCarloSampling_updateEvidence" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::MonteCarloSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::MonteCarloSampling > * >(argp1);
  arg2 = swig_obj[1];
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__updateEvidence(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyMonteCarloSampling_setTargets(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::MonteCarloSampling > *arg1 = 0 ;
  PyObject *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LoopyMonteCarloSampling_setTargets", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__MonteCarloSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyMonteCarloSampling_setTargets" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::MonteCarloSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::MonteCarloSampling > * >(argp1);
  arg2 = swig_obj[1];
  {
    try {
      gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__setTargets(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyMonteCarloSampling_hardEvidenceNodes(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::MonteCarloSampling > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__MonteCarloSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyMonteCarloSampling_hardEvidenceNodes" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::MonteCarloSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::MonteCarloSampling > * >(argp1);
  {
    try {
      result = (PyObject *)gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__hardEvidenceNodes(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyMonteCarloSampling_softEvidenceNodes(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::MonteCarloSampling > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__MonteCarloSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyMonteCarloSampling_softEvidenceNodes" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::MonteCarloSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::MonteCarloSampling > * >(argp1);
  {
    try {
      result = (PyObject *)gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__softEvidenceNodes(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyMonteCarloSampling_targets(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::MonteCarloSampling > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__MonteCarloSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyMonteCarloSampling_targets" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::MonteCarloSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::MonteCarloSampling > * >(argp1);
  {
    try {
      result = (PyObject *)gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__targets(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyMonteCarloSampling_evidenceImpact__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopySamplingInference< double,gum::MonteCarloSampling > *arg1 = 0 ;
  PyObject *arg2 = 0 ;
  PyObject *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gum::Tensor< double > result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__MonteCarloSampling_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyMonteCarloSampling_evidenceImpact" "', argument " "1"" of type '" "gum::LoopySamplingInference< double,gum::MonteCarloSampling > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopySamplingInference< double,gum::MonteCarloSampling > * >(argp1);
  arg2 = swig_obj[1];
  arg3 = swig_obj[2];
  {
    try {
      result = gum_LoopySamplingInference_Sl_double_Sc_gum_MonteCarloSampling_Sg__evidenceImpact__SWIG_2(arg1,arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::Tensor< double >(result)), SWIGTYPE_p_gum__TensorT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyMonteCarloSampling_evidenceImpact(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "LoopyMonteCarloSampling_evidenceImpact", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    {
      int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_gum__SetT_std__size_t_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_1;
    return _wrap_LoopyMonteCarloSampling_evidenceImpact__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 3) {
    int _v = 0;
    {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_2;
    {
      int res = swig::asptr(argv[2], (std::vector< std::string,std::allocator< std::string > >**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_2;
    return _wrap_LoopyMonteCarloSampling_evidenceImpact__SWIG_1(self, argc, argv);
  }
check_2:
  
  if (argc == 3) {
    PyObject *retobj = _wrap_LoopyMonteCarloSampling_evidenceImpact__SWIG_2(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LoopyMonteCarloSampling_evidenceImpact'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::LoopySamplingInference< double,gum::MonteCarloSampling >::evidenceImpact(gum::NodeId,gum::NodeSet const &)\n"
    "    gum::LoopySamplingInference< double,gum::MonteCarloSampling >::evidenceImpact(std::string const &,std::vector< std::string,std::allocator< std::string > > const &)\n"
    "    gum::LoopySamplingInference< double,gum::MonteCarloSampling >::evidenceImpact(PyObject *,PyObject *)\n");
  return 0;
}


SWIGINTERN PyObject *LoopyMonteCarloSampling_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj = NULL;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gum__LoopySamplingInferenceT_double_gum__MonteCarloSampling_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *LoopyMonteCarloSampling_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_LoopyBeliefPropagation(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::IBayesNet< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::LoopyBeliefPropagation< double > *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__IBayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LoopyBeliefPropagation" "', argument " "1"" of type '" "gum::IBayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::IBayesNet< double > * >(argp1);
  {
    try {
      result = (gum::LoopyBeliefPropagation< double > *)new gum::LoopyBeliefPropagation< double >((gum::IBayesNet< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__LoopyBeliefPropagationT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_LoopyBeliefPropagation(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopyBeliefPropagation< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopyBeliefPropagationT_double_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LoopyBeliefPropagation" "', argument " "1"" of type '" "gum::LoopyBeliefPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopyBeliefPropagation< double > * >(argp1);
  {
    try {
      delete arg1;
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyBeliefPropagation_setVerbosity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopyBeliefPropagation< double > *arg1 = 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LoopyBeliefPropagation_setVerbosity", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopyBeliefPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyBeliefPropagation_setVerbosity" "', argument " "1"" of type '" "gum::LoopyBeliefPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopyBeliefPropagation< double > * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoopyBeliefPropagation_setVerbosity" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      gum_LoopyBeliefPropagation_Sl_double_Sg__setVerbosity(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyBeliefPropagation_setEpsilon(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopyBeliefPropagation< double > *arg1 = 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LoopyBeliefPropagation_setEpsilon", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopyBeliefPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyBeliefPropagation_setEpsilon" "', argument " "1"" of type '" "gum::LoopyBeliefPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopyBeliefPropagation< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoopyBeliefPropagation_setEpsilon" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      gum_LoopyBeliefPropagation_Sl_double_Sg__setEpsilon(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyBeliefPropagation_setMinEpsilonRate(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopyBeliefPropagation< double > *arg1 = 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LoopyBeliefPropagation_setMinEpsilonRate", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopyBeliefPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyBeliefPropagation_setMinEpsilonRate" "', argument " "1"" of type '" "gum::LoopyBeliefPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopyBeliefPropagation< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoopyBeliefPropagation_setMinEpsilonRate" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      gum_LoopyBeliefPropagation_Sl_double_Sg__setMinEpsilonRate(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyBeliefPropagation_setMaxIter(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopyBeliefPropagation< double > *arg1 = 0 ;
  gum::Size arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LoopyBeliefPropagation_setMaxIter", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopyBeliefPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyBeliefPropagation_setMaxIter" "', argument " "1"" of type '" "gum::LoopyBeliefPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopyBeliefPropagation< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoopyBeliefPropagation_setMaxIter" "', argument " "2"" of type '" "gum::Size""'");
  } 
  arg2 = static_cast< gum::Size >(val2);
  {
    try {
      gum_LoopyBeliefPropagation_Sl_double_Sg__setMaxIter(arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyBeliefPropagation_setMaxTime(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopyBeliefPropagation< double > *arg1 = 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LoopyBeliefPropagation_setMaxTime", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopyBeliefPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyBeliefPropagation_setMaxTime" "', argument " "1"" of type '" "gum::LoopyBeliefPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopyBeliefPropagation< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoopyBeliefPropagation_setMaxTime" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      gum_LoopyBeliefPropagation_Sl_double_Sg__setMaxTime(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyBeliefPropagation_setPeriodSize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopyBeliefPropagation< double > *arg1 = 0 ;
  gum::Size arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LoopyBeliefPropagation_setPeriodSize", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopyBeliefPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyBeliefPropagation_setPeriodSize" "', argument " "1"" of type '" "gum::LoopyBeliefPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopyBeliefPropagation< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoopyBeliefPropagation_setPeriodSize" "', argument " "2"" of type '" "gum::Size""'");
  } 
  arg2 = static_cast< gum::Size >(val2);
  {
    try {
      gum_LoopyBeliefPropagation_Sl_double_Sg__setPeriodSize(arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyBeliefPropagation_verbosity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopyBeliefPropagation< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopyBeliefPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyBeliefPropagation_verbosity" "', argument " "1"" of type '" "gum::LoopyBeliefPropagation< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopyBeliefPropagation< double > * >(argp1);
  {
    try {
      result = (bool)gum_LoopyBeliefPropagation_Sl_double_Sg__verbosity((gum::LoopyBeliefPropagation< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyBeliefPropagation_epsilon(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopyBeliefPropagation< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopyBeliefPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyBeliefPropagation_epsilon" "', argument " "1"" of type '" "gum::LoopyBeliefPropagation< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopyBeliefPropagation< double > * >(argp1);
  {
    try {
      result = (double)gum_LoopyBeliefPropagation_Sl_double_Sg__epsilon((gum::LoopyBeliefPropagation< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyBeliefPropagation_minEpsilonRate(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopyBeliefPropagation< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopyBeliefPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyBeliefPropagation_minEpsilonRate" "', argument " "1"" of type '" "gum::LoopyBeliefPropagation< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopyBeliefPropagation< double > * >(argp1);
  {
    try {
      result = (double)gum_LoopyBeliefPropagation_Sl_double_Sg__minEpsilonRate((gum::LoopyBeliefPropagation< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyBeliefPropagation_maxIter(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopyBeliefPropagation< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::Size result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopyBeliefPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyBeliefPropagation_maxIter" "', argument " "1"" of type '" "gum::LoopyBeliefPropagation< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopyBeliefPropagation< double > * >(argp1);
  {
    try {
      result = gum_LoopyBeliefPropagation_Sl_double_Sg__maxIter((gum::LoopyBeliefPropagation< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyBeliefPropagation_maxTime(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopyBeliefPropagation< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopyBeliefPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyBeliefPropagation_maxTime" "', argument " "1"" of type '" "gum::LoopyBeliefPropagation< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopyBeliefPropagation< double > * >(argp1);
  {
    try {
      result = (double)gum_LoopyBeliefPropagation_Sl_double_Sg__maxTime((gum::LoopyBeliefPropagation< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyBeliefPropagation_periodSize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopyBeliefPropagation< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::Size result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopyBeliefPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyBeliefPropagation_periodSize" "', argument " "1"" of type '" "gum::LoopyBeliefPropagation< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopyBeliefPropagation< double > * >(argp1);
  {
    try {
      result = gum_LoopyBeliefPropagation_Sl_double_Sg__periodSize((gum::LoopyBeliefPropagation< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyBeliefPropagation_nbrIterations(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopyBeliefPropagation< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::Size result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopyBeliefPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyBeliefPropagation_nbrIterations" "', argument " "1"" of type '" "gum::LoopyBeliefPropagation< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopyBeliefPropagation< double > * >(argp1);
  {
    try {
      result = gum_LoopyBeliefPropagation_Sl_double_Sg__nbrIterations((gum::LoopyBeliefPropagation< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyBeliefPropagation_currentTime(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopyBeliefPropagation< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopyBeliefPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyBeliefPropagation_currentTime" "', argument " "1"" of type '" "gum::LoopyBeliefPropagation< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopyBeliefPropagation< double > * >(argp1);
  {
    try {
      result = (double)gum_LoopyBeliefPropagation_Sl_double_Sg__currentTime((gum::LoopyBeliefPropagation< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyBeliefPropagation_messageApproximationScheme(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopyBeliefPropagation< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopyBeliefPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyBeliefPropagation_messageApproximationScheme" "', argument " "1"" of type '" "gum::LoopyBeliefPropagation< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopyBeliefPropagation< double > * >(argp1);
  {
    try {
      result = gum_LoopyBeliefPropagation_Sl_double_Sg__messageApproximationScheme((gum::LoopyBeliefPropagation< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyBeliefPropagation_history(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopyBeliefPropagation< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< double,std::allocator< double > > *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopyBeliefPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyBeliefPropagation_history" "', argument " "1"" of type '" "gum::LoopyBeliefPropagation< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopyBeliefPropagation< double > * >(argp1);
  {
    try {
      result = (std::vector< double,std::allocator< double > > *) &gum_LoopyBeliefPropagation_Sl_double_Sg__history((gum::LoopyBeliefPropagation< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< double,std::allocator< double > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyBeliefPropagation__asIApproximationSchemeConfiguration(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopyBeliefPropagation< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::IApproximationSchemeConfiguration *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopyBeliefPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyBeliefPropagation__asIApproximationSchemeConfiguration" "', argument " "1"" of type '" "gum::LoopyBeliefPropagation< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopyBeliefPropagation< double > * >(argp1);
  {
    try {
      result = (gum::IApproximationSchemeConfiguration *) &gum_LoopyBeliefPropagation_Sl_double_Sg___asIApproximationSchemeConfiguration((gum::LoopyBeliefPropagation< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__IApproximationSchemeConfiguration, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyBeliefPropagation_makeInference(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopyBeliefPropagation< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopyBeliefPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyBeliefPropagation_makeInference" "', argument " "1"" of type '" "gum::LoopyBeliefPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopyBeliefPropagation< double > * >(argp1);
  {
    try {
      gum_LoopyBeliefPropagation_Sl_double_Sg__makeInference(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyBeliefPropagation_posterior__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopyBeliefPropagation< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  gum::Tensor< double > result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopyBeliefPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyBeliefPropagation_posterior" "', argument " "1"" of type '" "gum::LoopyBeliefPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopyBeliefPropagation< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoopyBeliefPropagation_posterior" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = gum_LoopyBeliefPropagation_Sl_double_Sg__posterior__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::Tensor< double >(result)), SWIGTYPE_p_gum__TensorT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyBeliefPropagation_posterior__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopyBeliefPropagation< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  gum::Tensor< double > result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopyBeliefPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyBeliefPropagation_posterior" "', argument " "1"" of type '" "gum::LoopyBeliefPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopyBeliefPropagation< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LoopyBeliefPropagation_posterior" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyBeliefPropagation_posterior" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = gum_LoopyBeliefPropagation_Sl_double_Sg__posterior__SWIG_1(arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::Tensor< double >(result)), SWIGTYPE_p_gum__TensorT_double_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyBeliefPropagation_posterior(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "LoopyBeliefPropagation_posterior", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_LoopyBeliefPropagation_posterior__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_LoopyBeliefPropagation_posterior__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LoopyBeliefPropagation_posterior'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::LoopyBeliefPropagation< double >::posterior(gum::NodeId const)\n"
    "    gum::LoopyBeliefPropagation< double >::posterior(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LoopyBeliefPropagation_addEvidence__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopyBeliefPropagation< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  gum::Idx arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopyBeliefPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyBeliefPropagation_addEvidence" "', argument " "1"" of type '" "gum::LoopyBeliefPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopyBeliefPropagation< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoopyBeliefPropagation_addEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "LoopyBeliefPropagation_addEvidence" "', argument " "3"" of type '" "gum::Idx""'");
  } 
  arg3 = static_cast< gum::Idx >(val3);
  {
    try {
      gum_LoopyBeliefPropagation_Sl_double_Sg__addEvidence__SWIG_0(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyBeliefPropagation_addEvidence__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopyBeliefPropagation< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  gum::Idx arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  size_t val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopyBeliefPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyBeliefPropagation_addEvidence" "', argument " "1"" of type '" "gum::LoopyBeliefPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopyBeliefPropagation< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LoopyBeliefPropagation_addEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyBeliefPropagation_addEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "LoopyBeliefPropagation_addEvidence" "', argument " "3"" of type '" "gum::Idx""'");
  } 
  arg3 = static_cast< gum::Idx >(val3);
  {
    try {
      gum_LoopyBeliefPropagation_Sl_double_Sg__addEvidence__SWIG_1(arg1,(std::string const &)*arg2,SWIG_STD_MOVE(arg3));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyBeliefPropagation_addEvidence__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopyBeliefPropagation< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopyBeliefPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyBeliefPropagation_addEvidence" "', argument " "1"" of type '" "gum::LoopyBeliefPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopyBeliefPropagation< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoopyBeliefPropagation_addEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LoopyBeliefPropagation_addEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyBeliefPropagation_addEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      gum_LoopyBeliefPropagation_Sl_double_Sg__addEvidence__SWIG_2(arg1,SWIG_STD_MOVE(arg2),(std::string const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyBeliefPropagation_addEvidence__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopyBeliefPropagation< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopyBeliefPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyBeliefPropagation_addEvidence" "', argument " "1"" of type '" "gum::LoopyBeliefPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopyBeliefPropagation< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LoopyBeliefPropagation_addEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyBeliefPropagation_addEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LoopyBeliefPropagation_addEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyBeliefPropagation_addEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      gum_LoopyBeliefPropagation_Sl_double_Sg__addEvidence__SWIG_3(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyBeliefPropagation_addEvidence__SWIG_4(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopyBeliefPropagation< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopyBeliefPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyBeliefPropagation_addEvidence" "', argument " "1"" of type '" "gum::LoopyBeliefPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopyBeliefPropagation< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoopyBeliefPropagation_addEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LoopyBeliefPropagation_addEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyBeliefPropagation_addEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      gum_LoopyBeliefPropagation_Sl_double_Sg__addEvidence__SWIG_4(arg1,SWIG_STD_MOVE(arg2),(std::vector< double,std::allocator< double > > const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyBeliefPropagation_addEvidence__SWIG_5(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopyBeliefPropagation< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopyBeliefPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyBeliefPropagation_addEvidence" "', argument " "1"" of type '" "gum::LoopyBeliefPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopyBeliefPropagation< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LoopyBeliefPropagation_addEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyBeliefPropagation_addEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LoopyBeliefPropagation_addEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyBeliefPropagation_addEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      gum_LoopyBeliefPropagation_Sl_double_Sg__addEvidence__SWIG_5(arg1,(std::string const &)*arg2,(std::vector< double,std::allocator< double > > const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyBeliefPropagation_addEvidence__SWIG_6(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopyBeliefPropagation< double > *arg1 = 0 ;
  gum::Tensor< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopyBeliefPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyBeliefPropagation_addEvidence" "', argument " "1"" of type '" "gum::LoopyBeliefPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopyBeliefPropagation< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_gum__TensorT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LoopyBeliefPropagation_addEvidence" "', argument " "2"" of type '" "gum::Tensor< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyBeliefPropagation_addEvidence" "', argument " "2"" of type '" "gum::Tensor< double > const &""'"); 
  }
  arg2 = reinterpret_cast< gum::Tensor< double > * >(argp2);
  {
    try {
      gum_LoopyBeliefPropagation_Sl_double_Sg__addEvidence__SWIG_6(arg1,(gum::Tensor< double > const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyBeliefPropagation_addEvidence(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "LoopyBeliefPropagation_addEvidence", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    PyObject *retobj = _wrap_LoopyBeliefPropagation_addEvidence__SWIG_6(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_2;
    {
      {
        int res = SWIG_AsVal_size_t(argv[2], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_2;
    return _wrap_LoopyBeliefPropagation_addEvidence__SWIG_0(self, argc, argv);
  }
check_2:
  
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_3;
    {
      int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_3;
    return _wrap_LoopyBeliefPropagation_addEvidence__SWIG_2(self, argc, argv);
  }
check_3:
  
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_4;
    {
      int res = swig::asptr(argv[2], (std::vector< double,std::allocator< double > >**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_4;
    return _wrap_LoopyBeliefPropagation_addEvidence__SWIG_4(self, argc, argv);
  }
check_4:
  
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[2], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_5;
    return _wrap_LoopyBeliefPropagation_addEvidence__SWIG_1(self, argc, argv);
  }
check_5:
  
  if (argc == 3) {
    int _v = 0;
    {
      int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_6;
    return _wrap_LoopyBeliefPropagation_addEvidence__SWIG_3(self, argc, argv);
  }
check_6:
  
  if (argc == 3) {
    PyObject *retobj = _wrap_LoopyBeliefPropagation_addEvidence__SWIG_5(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LoopyBeliefPropagation_addEvidence'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::LoopyBeliefPropagation< double >::addEvidence(gum::NodeId const,gum::Idx const)\n"
    "    gum::LoopyBeliefPropagation< double >::addEvidence(std::string const &,gum::Idx const)\n"
    "    gum::LoopyBeliefPropagation< double >::addEvidence(gum::NodeId const,std::string const &)\n"
    "    gum::LoopyBeliefPropagation< double >::addEvidence(std::string const &,std::string const &)\n"
    "    gum::LoopyBeliefPropagation< double >::addEvidence(gum::NodeId const,std::vector< double,std::allocator< double > > const &)\n"
    "    gum::LoopyBeliefPropagation< double >::addEvidence(std::string const &,std::vector< double,std::allocator< double > > const &)\n"
    "    gum::LoopyBeliefPropagation< double >::addEvidence(gum::Tensor< double > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LoopyBeliefPropagation_chgEvidence__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopyBeliefPropagation< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  gum::Idx arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopyBeliefPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyBeliefPropagation_chgEvidence" "', argument " "1"" of type '" "gum::LoopyBeliefPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopyBeliefPropagation< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoopyBeliefPropagation_chgEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "LoopyBeliefPropagation_chgEvidence" "', argument " "3"" of type '" "gum::Idx""'");
  } 
  arg3 = static_cast< gum::Idx >(val3);
  {
    try {
      gum_LoopyBeliefPropagation_Sl_double_Sg__chgEvidence__SWIG_0(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyBeliefPropagation_chgEvidence__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopyBeliefPropagation< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  gum::Idx arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  size_t val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopyBeliefPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyBeliefPropagation_chgEvidence" "', argument " "1"" of type '" "gum::LoopyBeliefPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopyBeliefPropagation< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LoopyBeliefPropagation_chgEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyBeliefPropagation_chgEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "LoopyBeliefPropagation_chgEvidence" "', argument " "3"" of type '" "gum::Idx""'");
  } 
  arg3 = static_cast< gum::Idx >(val3);
  {
    try {
      gum_LoopyBeliefPropagation_Sl_double_Sg__chgEvidence__SWIG_1(arg1,(std::string const &)*arg2,SWIG_STD_MOVE(arg3));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyBeliefPropagation_chgEvidence__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopyBeliefPropagation< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopyBeliefPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyBeliefPropagation_chgEvidence" "', argument " "1"" of type '" "gum::LoopyBeliefPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopyBeliefPropagation< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoopyBeliefPropagation_chgEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LoopyBeliefPropagation_chgEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyBeliefPropagation_chgEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      gum_LoopyBeliefPropagation_Sl_double_Sg__chgEvidence__SWIG_2(arg1,SWIG_STD_MOVE(arg2),(std::string const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyBeliefPropagation_chgEvidence__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopyBeliefPropagation< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopyBeliefPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyBeliefPropagation_chgEvidence" "', argument " "1"" of type '" "gum::LoopyBeliefPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopyBeliefPropagation< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LoopyBeliefPropagation_chgEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyBeliefPropagation_chgEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LoopyBeliefPropagation_chgEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyBeliefPropagation_chgEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      gum_LoopyBeliefPropagation_Sl_double_Sg__chgEvidence__SWIG_3(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyBeliefPropagation_chgEvidence__SWIG_4(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopyBeliefPropagation< double > *arg1 = 0 ;
  gum::Tensor< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopyBeliefPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyBeliefPropagation_chgEvidence" "', argument " "1"" of type '" "gum::LoopyBeliefPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopyBeliefPropagation< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_gum__TensorT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LoopyBeliefPropagation_chgEvidence" "', argument " "2"" of type '" "gum::Tensor< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyBeliefPropagation_chgEvidence" "', argument " "2"" of type '" "gum::Tensor< double > const &""'"); 
  }
  arg2 = reinterpret_cast< gum::Tensor< double > * >(argp2);
  {
    try {
      gum_LoopyBeliefPropagation_Sl_double_Sg__chgEvidence__SWIG_4(arg1,(gum::Tensor< double > const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyBeliefPropagation_chgEvidence__SWIG_5(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopyBeliefPropagation< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopyBeliefPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyBeliefPropagation_chgEvidence" "', argument " "1"" of type '" "gum::LoopyBeliefPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopyBeliefPropagation< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoopyBeliefPropagation_chgEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LoopyBeliefPropagation_chgEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyBeliefPropagation_chgEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      gum_LoopyBeliefPropagation_Sl_double_Sg__chgEvidence__SWIG_5(arg1,SWIG_STD_MOVE(arg2),(std::vector< double,std::allocator< double > > const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyBeliefPropagation_chgEvidence__SWIG_6(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopyBeliefPropagation< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopyBeliefPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyBeliefPropagation_chgEvidence" "', argument " "1"" of type '" "gum::LoopyBeliefPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopyBeliefPropagation< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LoopyBeliefPropagation_chgEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyBeliefPropagation_chgEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LoopyBeliefPropagation_chgEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyBeliefPropagation_chgEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      gum_LoopyBeliefPropagation_Sl_double_Sg__chgEvidence__SWIG_6(arg1,(std::string const &)*arg2,(std::vector< double,std::allocator< double > > const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyBeliefPropagation_chgEvidence(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "LoopyBeliefPropagation_chgEvidence", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    PyObject *retobj = _wrap_LoopyBeliefPropagation_chgEvidence__SWIG_4(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_2;
    {
      {
        int res = SWIG_AsVal_size_t(argv[2], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_2;
    return _wrap_LoopyBeliefPropagation_chgEvidence__SWIG_0(self, argc, argv);
  }
check_2:
  
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_3;
    {
      int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_3;
    return _wrap_LoopyBeliefPropagation_chgEvidence__SWIG_2(self, argc, argv);
  }
check_3:
  
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_4;
    {
      int res = swig::asptr(argv[2], (std::vector< double,std::allocator< double > >**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_4;
    return _wrap_LoopyBeliefPropagation_chgEvidence__SWIG_5(self, argc, argv);
  }
check_4:
  
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[2], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_5;
    return _wrap_LoopyBeliefPropagation_chgEvidence__SWIG_1(self, argc, argv);
  }
check_5:
  
  if (argc == 3) {
    int _v = 0;
    {
      int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_6;
    return _wrap_LoopyBeliefPropagation_chgEvidence__SWIG_3(self, argc, argv);
  }
check_6:
  
  if (argc == 3) {
    PyObject *retobj = _wrap_LoopyBeliefPropagation_chgEvidence__SWIG_6(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LoopyBeliefPropagation_chgEvidence'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::LoopyBeliefPropagation< double >::chgEvidence(gum::NodeId const,gum::Idx const)\n"
    "    gum::LoopyBeliefPropagation< double >::chgEvidence(std::string const &,gum::Idx const)\n"
    "    gum::LoopyBeliefPropagation< double >::chgEvidence(gum::NodeId const,std::string const &)\n"
    "    gum::LoopyBeliefPropagation< double >::chgEvidence(std::string const &,std::string const &)\n"
    "    gum::LoopyBeliefPropagation< double >::chgEvidence(gum::Tensor< double > const &)\n"
    "    gum::LoopyBeliefPropagation< double >::chgEvidence(gum::NodeId const,std::vector< double,std::allocator< double > > const &)\n"
    "    gum::LoopyBeliefPropagation< double >::chgEvidence(std::string const &,std::vector< double,std::allocator< double > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LoopyBeliefPropagation_hasEvidence__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopyBeliefPropagation< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  bool result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopyBeliefPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyBeliefPropagation_hasEvidence" "', argument " "1"" of type '" "gum::LoopyBeliefPropagation< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopyBeliefPropagation< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoopyBeliefPropagation_hasEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (bool)gum_LoopyBeliefPropagation_Sl_double_Sg__hasEvidence__SWIG_0((gum::LoopyBeliefPropagation< double > const *)arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyBeliefPropagation_hasEvidence__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopyBeliefPropagation< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  bool result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopyBeliefPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyBeliefPropagation_hasEvidence" "', argument " "1"" of type '" "gum::LoopyBeliefPropagation< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopyBeliefPropagation< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LoopyBeliefPropagation_hasEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyBeliefPropagation_hasEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)gum_LoopyBeliefPropagation_Sl_double_Sg__hasEvidence__SWIG_1((gum::LoopyBeliefPropagation< double > const *)arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyBeliefPropagation_hasEvidence(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "LoopyBeliefPropagation_hasEvidence", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_LoopyBeliefPropagation_hasEvidence__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_LoopyBeliefPropagation_hasEvidence__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LoopyBeliefPropagation_hasEvidence'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::LoopyBeliefPropagation< double >::hasEvidence(gum::NodeId const) const\n"
    "    gum::LoopyBeliefPropagation< double >::hasEvidence(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LoopyBeliefPropagation_eraseAllEvidence(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopyBeliefPropagation< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopyBeliefPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyBeliefPropagation_eraseAllEvidence" "', argument " "1"" of type '" "gum::LoopyBeliefPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopyBeliefPropagation< double > * >(argp1);
  {
    try {
      gum_LoopyBeliefPropagation_Sl_double_Sg__eraseAllEvidence(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyBeliefPropagation_eraseEvidence__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopyBeliefPropagation< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopyBeliefPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyBeliefPropagation_eraseEvidence" "', argument " "1"" of type '" "gum::LoopyBeliefPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopyBeliefPropagation< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoopyBeliefPropagation_eraseEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      gum_LoopyBeliefPropagation_Sl_double_Sg__eraseEvidence__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyBeliefPropagation_eraseEvidence__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopyBeliefPropagation< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopyBeliefPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyBeliefPropagation_eraseEvidence" "', argument " "1"" of type '" "gum::LoopyBeliefPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopyBeliefPropagation< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LoopyBeliefPropagation_eraseEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyBeliefPropagation_eraseEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      gum_LoopyBeliefPropagation_Sl_double_Sg__eraseEvidence__SWIG_1(arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyBeliefPropagation_eraseEvidence(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "LoopyBeliefPropagation_eraseEvidence", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_LoopyBeliefPropagation_eraseEvidence__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_LoopyBeliefPropagation_eraseEvidence__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LoopyBeliefPropagation_eraseEvidence'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::LoopyBeliefPropagation< double >::eraseEvidence(gum::NodeId const)\n"
    "    gum::LoopyBeliefPropagation< double >::eraseEvidence(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LoopyBeliefPropagation_hasSoftEvidence__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopyBeliefPropagation< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  bool result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopyBeliefPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyBeliefPropagation_hasSoftEvidence" "', argument " "1"" of type '" "gum::LoopyBeliefPropagation< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopyBeliefPropagation< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoopyBeliefPropagation_hasSoftEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (bool)gum_LoopyBeliefPropagation_Sl_double_Sg__hasSoftEvidence__SWIG_0((gum::LoopyBeliefPropagation< double > const *)arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyBeliefPropagation_hasHardEvidence(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopyBeliefPropagation< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LoopyBeliefPropagation_hasHardEvidence", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopyBeliefPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyBeliefPropagation_hasHardEvidence" "', argument " "1"" of type '" "gum::LoopyBeliefPropagation< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopyBeliefPropagation< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LoopyBeliefPropagation_hasHardEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyBeliefPropagation_hasHardEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)gum_LoopyBeliefPropagation_Sl_double_Sg__hasHardEvidence((gum::LoopyBeliefPropagation< double > const *)arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyBeliefPropagation_hasSoftEvidence__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopyBeliefPropagation< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  bool result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopyBeliefPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyBeliefPropagation_hasSoftEvidence" "', argument " "1"" of type '" "gum::LoopyBeliefPropagation< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopyBeliefPropagation< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LoopyBeliefPropagation_hasSoftEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyBeliefPropagation_hasSoftEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)gum_LoopyBeliefPropagation_Sl_double_Sg__hasSoftEvidence__SWIG_1((gum::LoopyBeliefPropagation< double > const *)arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyBeliefPropagation_hasSoftEvidence(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "LoopyBeliefPropagation_hasSoftEvidence", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_LoopyBeliefPropagation_hasSoftEvidence__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_LoopyBeliefPropagation_hasSoftEvidence__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LoopyBeliefPropagation_hasSoftEvidence'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::LoopyBeliefPropagation< double >::hasSoftEvidence(gum::NodeId const) const\n"
    "    gum::LoopyBeliefPropagation< double >::hasSoftEvidence(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LoopyBeliefPropagation_nbrEvidence(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopyBeliefPropagation< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::Size result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopyBeliefPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyBeliefPropagation_nbrEvidence" "', argument " "1"" of type '" "gum::LoopyBeliefPropagation< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopyBeliefPropagation< double > * >(argp1);
  {
    try {
      result = gum_LoopyBeliefPropagation_Sl_double_Sg__nbrEvidence((gum::LoopyBeliefPropagation< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyBeliefPropagation_nbrHardEvidence(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopyBeliefPropagation< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::Size result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopyBeliefPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyBeliefPropagation_nbrHardEvidence" "', argument " "1"" of type '" "gum::LoopyBeliefPropagation< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopyBeliefPropagation< double > * >(argp1);
  {
    try {
      result = gum_LoopyBeliefPropagation_Sl_double_Sg__nbrHardEvidence((gum::LoopyBeliefPropagation< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyBeliefPropagation_nbrSoftEvidence(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopyBeliefPropagation< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::Size result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopyBeliefPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyBeliefPropagation_nbrSoftEvidence" "', argument " "1"" of type '" "gum::LoopyBeliefPropagation< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopyBeliefPropagation< double > * >(argp1);
  {
    try {
      result = gum_LoopyBeliefPropagation_Sl_double_Sg__nbrSoftEvidence((gum::LoopyBeliefPropagation< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyBeliefPropagation_eraseAllTargets(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopyBeliefPropagation< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopyBeliefPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyBeliefPropagation_eraseAllTargets" "', argument " "1"" of type '" "gum::LoopyBeliefPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopyBeliefPropagation< double > * >(argp1);
  {
    try {
      gum_LoopyBeliefPropagation_Sl_double_Sg__eraseAllTargets(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyBeliefPropagation_addAllTargets(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopyBeliefPropagation< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopyBeliefPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyBeliefPropagation_addAllTargets" "', argument " "1"" of type '" "gum::LoopyBeliefPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopyBeliefPropagation< double > * >(argp1);
  {
    try {
      gum_LoopyBeliefPropagation_Sl_double_Sg__addAllTargets(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyBeliefPropagation_addTarget__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopyBeliefPropagation< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopyBeliefPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyBeliefPropagation_addTarget" "', argument " "1"" of type '" "gum::LoopyBeliefPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopyBeliefPropagation< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoopyBeliefPropagation_addTarget" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      gum_LoopyBeliefPropagation_Sl_double_Sg__addTarget__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyBeliefPropagation_addTarget__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopyBeliefPropagation< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopyBeliefPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyBeliefPropagation_addTarget" "', argument " "1"" of type '" "gum::LoopyBeliefPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopyBeliefPropagation< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LoopyBeliefPropagation_addTarget" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyBeliefPropagation_addTarget" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      gum_LoopyBeliefPropagation_Sl_double_Sg__addTarget__SWIG_1(arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyBeliefPropagation_addTarget(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "LoopyBeliefPropagation_addTarget", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_LoopyBeliefPropagation_addTarget__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_LoopyBeliefPropagation_addTarget__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LoopyBeliefPropagation_addTarget'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::LoopyBeliefPropagation< double >::addTarget(gum::NodeId const)\n"
    "    gum::LoopyBeliefPropagation< double >::addTarget(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LoopyBeliefPropagation_eraseTarget__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopyBeliefPropagation< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopyBeliefPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyBeliefPropagation_eraseTarget" "', argument " "1"" of type '" "gum::LoopyBeliefPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopyBeliefPropagation< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoopyBeliefPropagation_eraseTarget" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      gum_LoopyBeliefPropagation_Sl_double_Sg__eraseTarget__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyBeliefPropagation_eraseTarget__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopyBeliefPropagation< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopyBeliefPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyBeliefPropagation_eraseTarget" "', argument " "1"" of type '" "gum::LoopyBeliefPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopyBeliefPropagation< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LoopyBeliefPropagation_eraseTarget" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyBeliefPropagation_eraseTarget" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      gum_LoopyBeliefPropagation_Sl_double_Sg__eraseTarget__SWIG_1(arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyBeliefPropagation_eraseTarget(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "LoopyBeliefPropagation_eraseTarget", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_LoopyBeliefPropagation_eraseTarget__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_LoopyBeliefPropagation_eraseTarget__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LoopyBeliefPropagation_eraseTarget'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::LoopyBeliefPropagation< double >::eraseTarget(gum::NodeId const)\n"
    "    gum::LoopyBeliefPropagation< double >::eraseTarget(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LoopyBeliefPropagation_isTarget__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopyBeliefPropagation< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  bool result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopyBeliefPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyBeliefPropagation_isTarget" "', argument " "1"" of type '" "gum::LoopyBeliefPropagation< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopyBeliefPropagation< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoopyBeliefPropagation_isTarget" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (bool)gum_LoopyBeliefPropagation_Sl_double_Sg__isTarget__SWIG_0((gum::LoopyBeliefPropagation< double > const *)arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyBeliefPropagation_isTarget__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopyBeliefPropagation< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  bool result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopyBeliefPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyBeliefPropagation_isTarget" "', argument " "1"" of type '" "gum::LoopyBeliefPropagation< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopyBeliefPropagation< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LoopyBeliefPropagation_isTarget" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyBeliefPropagation_isTarget" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)gum_LoopyBeliefPropagation_Sl_double_Sg__isTarget__SWIG_1((gum::LoopyBeliefPropagation< double > const *)arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyBeliefPropagation_isTarget(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "LoopyBeliefPropagation_isTarget", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_LoopyBeliefPropagation_isTarget__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_LoopyBeliefPropagation_isTarget__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LoopyBeliefPropagation_isTarget'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::LoopyBeliefPropagation< double >::isTarget(gum::NodeId const) const\n"
    "    gum::LoopyBeliefPropagation< double >::isTarget(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LoopyBeliefPropagation_nbrTargets(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopyBeliefPropagation< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::Size result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopyBeliefPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyBeliefPropagation_nbrTargets" "', argument " "1"" of type '" "gum::LoopyBeliefPropagation< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopyBeliefPropagation< double > * >(argp1);
  {
    try {
      result = gum_LoopyBeliefPropagation_Sl_double_Sg__nbrTargets((gum::LoopyBeliefPropagation< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyBeliefPropagation_H__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopyBeliefPropagation< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  double result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopyBeliefPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyBeliefPropagation_H" "', argument " "1"" of type '" "gum::LoopyBeliefPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopyBeliefPropagation< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoopyBeliefPropagation_H" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (double)gum_LoopyBeliefPropagation_Sl_double_Sg__H__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyBeliefPropagation_H__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopyBeliefPropagation< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  double result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopyBeliefPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyBeliefPropagation_H" "', argument " "1"" of type '" "gum::LoopyBeliefPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopyBeliefPropagation< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LoopyBeliefPropagation_H" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyBeliefPropagation_H" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (double)gum_LoopyBeliefPropagation_Sl_double_Sg__H__SWIG_1(arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyBeliefPropagation_H(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "LoopyBeliefPropagation_H", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_LoopyBeliefPropagation_H__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_LoopyBeliefPropagation_H__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LoopyBeliefPropagation_H'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::LoopyBeliefPropagation< double >::H(gum::NodeId const)\n"
    "    gum::LoopyBeliefPropagation< double >::H(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LoopyBeliefPropagation_evidenceImpact__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopyBeliefPropagation< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  gum::NodeSet *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  gum::Tensor< double > result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopyBeliefPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyBeliefPropagation_evidenceImpact" "', argument " "1"" of type '" "gum::LoopyBeliefPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopyBeliefPropagation< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoopyBeliefPropagation_evidenceImpact" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_gum__SetT_std__size_t_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LoopyBeliefPropagation_evidenceImpact" "', argument " "3"" of type '" "gum::NodeSet const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyBeliefPropagation_evidenceImpact" "', argument " "3"" of type '" "gum::NodeSet const &""'"); 
  }
  arg3 = reinterpret_cast< gum::NodeSet * >(argp3);
  {
    try {
      result = gum_LoopyBeliefPropagation_Sl_double_Sg__evidenceImpact__SWIG_0(arg1,SWIG_STD_MOVE(arg2),(gum::Set< std::size_t > const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::Tensor< double >(result)), SWIGTYPE_p_gum__TensorT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyBeliefPropagation_evidenceImpact__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopyBeliefPropagation< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  gum::Tensor< double > result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopyBeliefPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyBeliefPropagation_evidenceImpact" "', argument " "1"" of type '" "gum::LoopyBeliefPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopyBeliefPropagation< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LoopyBeliefPropagation_evidenceImpact" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyBeliefPropagation_evidenceImpact" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LoopyBeliefPropagation_evidenceImpact" "', argument " "3"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LoopyBeliefPropagation_evidenceImpact" "', argument " "3"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      result = gum_LoopyBeliefPropagation_Sl_double_Sg__evidenceImpact__SWIG_1(arg1,(std::string const &)*arg2,(std::vector< std::string,std::allocator< std::string > > const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::Tensor< double >(result)), SWIGTYPE_p_gum__TensorT_double_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyBeliefPropagation_BN(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopyBeliefPropagation< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::IBayesNet< double > *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopyBeliefPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyBeliefPropagation_BN" "', argument " "1"" of type '" "gum::LoopyBeliefPropagation< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopyBeliefPropagation< double > * >(argp1);
  {
    try {
      result = (gum::IBayesNet< double > *) &gum_LoopyBeliefPropagation_Sl_double_Sg__BN((gum::LoopyBeliefPropagation< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__IBayesNetT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyBeliefPropagation_setEvidence(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopyBeliefPropagation< double > *arg1 = 0 ;
  PyObject *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LoopyBeliefPropagation_setEvidence", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopyBeliefPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyBeliefPropagation_setEvidence" "', argument " "1"" of type '" "gum::LoopyBeliefPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopyBeliefPropagation< double > * >(argp1);
  arg2 = swig_obj[1];
  {
    try {
      gum_LoopyBeliefPropagation_Sl_double_Sg__setEvidence(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyBeliefPropagation_updateEvidence(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopyBeliefPropagation< double > *arg1 = 0 ;
  PyObject *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LoopyBeliefPropagation_updateEvidence", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopyBeliefPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyBeliefPropagation_updateEvidence" "', argument " "1"" of type '" "gum::LoopyBeliefPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopyBeliefPropagation< double > * >(argp1);
  arg2 = swig_obj[1];
  {
    try {
      gum_LoopyBeliefPropagation_Sl_double_Sg__updateEvidence(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyBeliefPropagation_setTargets(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopyBeliefPropagation< double > *arg1 = 0 ;
  PyObject *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LoopyBeliefPropagation_setTargets", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopyBeliefPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyBeliefPropagation_setTargets" "', argument " "1"" of type '" "gum::LoopyBeliefPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopyBeliefPropagation< double > * >(argp1);
  arg2 = swig_obj[1];
  {
    try {
      gum_LoopyBeliefPropagation_Sl_double_Sg__setTargets(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyBeliefPropagation_hardEvidenceNodes(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopyBeliefPropagation< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopyBeliefPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyBeliefPropagation_hardEvidenceNodes" "', argument " "1"" of type '" "gum::LoopyBeliefPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopyBeliefPropagation< double > * >(argp1);
  {
    try {
      result = (PyObject *)gum_LoopyBeliefPropagation_Sl_double_Sg__hardEvidenceNodes(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyBeliefPropagation_softEvidenceNodes(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopyBeliefPropagation< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopyBeliefPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyBeliefPropagation_softEvidenceNodes" "', argument " "1"" of type '" "gum::LoopyBeliefPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopyBeliefPropagation< double > * >(argp1);
  {
    try {
      result = (PyObject *)gum_LoopyBeliefPropagation_Sl_double_Sg__softEvidenceNodes(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyBeliefPropagation_targets(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::LoopyBeliefPropagation< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopyBeliefPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyBeliefPropagation_targets" "', argument " "1"" of type '" "gum::LoopyBeliefPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopyBeliefPropagation< double > * >(argp1);
  {
    try {
      result = (PyObject *)gum_LoopyBeliefPropagation_Sl_double_Sg__targets(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyBeliefPropagation_evidenceImpact__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::LoopyBeliefPropagation< double > *arg1 = 0 ;
  PyObject *arg2 = 0 ;
  PyObject *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gum::Tensor< double > result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__LoopyBeliefPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoopyBeliefPropagation_evidenceImpact" "', argument " "1"" of type '" "gum::LoopyBeliefPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LoopyBeliefPropagation< double > * >(argp1);
  arg2 = swig_obj[1];
  arg3 = swig_obj[2];
  {
    try {
      result = gum_LoopyBeliefPropagation_Sl_double_Sg__evidenceImpact__SWIG_2(arg1,arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::Tensor< double >(result)), SWIGTYPE_p_gum__TensorT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoopyBeliefPropagation_evidenceImpact(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "LoopyBeliefPropagation_evidenceImpact", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    {
      int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_gum__SetT_std__size_t_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_1;
    return _wrap_LoopyBeliefPropagation_evidenceImpact__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 3) {
    int _v = 0;
    {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_2;
    {
      int res = swig::asptr(argv[2], (std::vector< std::string,std::allocator< std::string > >**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_2;
    return _wrap_LoopyBeliefPropagation_evidenceImpact__SWIG_1(self, argc, argv);
  }
check_2:
  
  if (argc == 3) {
    PyObject *retobj = _wrap_LoopyBeliefPropagation_evidenceImpact__SWIG_2(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LoopyBeliefPropagation_evidenceImpact'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::LoopyBeliefPropagation< double >::evidenceImpact(gum::NodeId,gum::NodeSet const &)\n"
    "    gum::LoopyBeliefPropagation< double >::evidenceImpact(std::string const &,std::vector< std::string,std::allocator< std::string > > const &)\n"
    "    gum::LoopyBeliefPropagation< double >::evidenceImpact(PyObject *,PyObject *)\n");
  return 0;
}


SWIGINTERN PyObject *LoopyBeliefPropagation_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj = NULL;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gum__LoopyBeliefPropagationT_double_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *LoopyBeliefPropagation_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_ExactBNdistance__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::IBayesNet< double > *arg1 = 0 ;
  gum::IBayesNet< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  gum::ExactBNdistance< double > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_gum__IBayesNetT_double_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ExactBNdistance" "', argument " "1"" of type '" "gum::IBayesNet< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "new_ExactBNdistance" "', argument " "1"" of type '" "gum::IBayesNet< double > const &""'"); 
  }
  arg1 = reinterpret_cast< gum::IBayesNet< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_gum__IBayesNetT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ExactBNdistance" "', argument " "2"" of type '" "gum::IBayesNet< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "new_ExactBNdistance" "', argument " "2"" of type '" "gum::IBayesNet< double > const &""'"); 
  }
  arg2 = reinterpret_cast< gum::IBayesNet< double > * >(argp2);
  {
    try {
      result = (gum::ExactBNdistance< double > *)new gum::ExactBNdistance< double >((gum::IBayesNet< double > const &)*arg1,(gum::IBayesNet< double > const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__ExactBNdistanceT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ExactBNdistance__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::BNdistance< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gum::ExactBNdistance< double > *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_gum__BNdistanceT_double_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ExactBNdistance" "', argument " "1"" of type '" "gum::BNdistance< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "new_ExactBNdistance" "', argument " "1"" of type '" "gum::BNdistance< double > const &""'"); 
  }
  arg1 = reinterpret_cast< gum::BNdistance< double > * >(argp1);
  {
    try {
      result = (gum::ExactBNdistance< double > *)new gum::ExactBNdistance< double >((gum::BNdistance< double > const &)*arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__ExactBNdistanceT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ExactBNdistance(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_ExactBNdistance", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    PyObject *retobj = _wrap_new_ExactBNdistance__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 2) {
    PyObject *retobj = _wrap_new_ExactBNdistance__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_ExactBNdistance'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::ExactBNdistance< double >::ExactBNdistance(gum::IBayesNet< double > const &,gum::IBayesNet< double > const &)\n"
    "    gum::ExactBNdistance< double >::ExactBNdistance(gum::BNdistance< double > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_ExactBNdistance(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::ExactBNdistance< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ExactBNdistanceT_double_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ExactBNdistance" "', argument " "1"" of type '" "gum::ExactBNdistance< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::ExactBNdistance< double > * >(argp1);
  {
    try {
      delete arg1;
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExactBNdistance_compute(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::ExactBNdistance< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__ExactBNdistanceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExactBNdistance_compute" "', argument " "1"" of type '" "gum::ExactBNdistance< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::ExactBNdistance< double > * >(argp1);
  {
    try {
      result = (PyObject *)gum_ExactBNdistance_Sl_double_Sg__compute(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ExactBNdistance_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj = NULL;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gum__ExactBNdistanceT_double_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *ExactBNdistance_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_GibbsBNdistance__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::IBayesNet< double > *arg1 = 0 ;
  gum::IBayesNet< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  gum::GibbsBNdistance< double > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_gum__IBayesNetT_double_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GibbsBNdistance" "', argument " "1"" of type '" "gum::IBayesNet< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "new_GibbsBNdistance" "', argument " "1"" of type '" "gum::IBayesNet< double > const &""'"); 
  }
  arg1 = reinterpret_cast< gum::IBayesNet< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_gum__IBayesNetT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_GibbsBNdistance" "', argument " "2"" of type '" "gum::IBayesNet< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "new_GibbsBNdistance" "', argument " "2"" of type '" "gum::IBayesNet< double > const &""'"); 
  }
  arg2 = reinterpret_cast< gum::IBayesNet< double > * >(argp2);
  {
    try {
      result = (gum::GibbsBNdistance< double > *)new gum::GibbsBNdistance< double >((gum::IBayesNet< double > const &)*arg1,(gum::IBayesNet< double > const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__GibbsBNdistanceT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GibbsBNdistance__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::BNdistance< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gum::GibbsBNdistance< double > *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_gum__BNdistanceT_double_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GibbsBNdistance" "', argument " "1"" of type '" "gum::BNdistance< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "new_GibbsBNdistance" "', argument " "1"" of type '" "gum::BNdistance< double > const &""'"); 
  }
  arg1 = reinterpret_cast< gum::BNdistance< double > * >(argp1);
  {
    try {
      result = (gum::GibbsBNdistance< double > *)new gum::GibbsBNdistance< double >((gum::BNdistance< double > const &)*arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__GibbsBNdistanceT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GibbsBNdistance(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_GibbsBNdistance", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    PyObject *retobj = _wrap_new_GibbsBNdistance__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 2) {
    PyObject *retobj = _wrap_new_GibbsBNdistance__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_GibbsBNdistance'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::GibbsBNdistance< double >::GibbsBNdistance(gum::IBayesNet< double > const &,gum::IBayesNet< double > const &)\n"
    "    gum::GibbsBNdistance< double >::GibbsBNdistance(gum::BNdistance< double > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_GibbsBNdistance(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsBNdistance< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__GibbsBNdistanceT_double_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GibbsBNdistance" "', argument " "1"" of type '" "gum::GibbsBNdistance< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsBNdistance< double > * >(argp1);
  {
    try {
      delete arg1;
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsBNdistance_setBurnIn(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsBNdistance< double > *arg1 = 0 ;
  gum::Size arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "GibbsBNdistance_setBurnIn", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__GibbsBNdistanceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsBNdistance_setBurnIn" "', argument " "1"" of type '" "gum::GibbsBNdistance< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsBNdistance< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GibbsBNdistance_setBurnIn" "', argument " "2"" of type '" "gum::Size""'");
  } 
  arg2 = static_cast< gum::Size >(val2);
  {
    try {
      (arg1)->setBurnIn(SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsBNdistance_burnIn(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsBNdistance< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::Size result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__GibbsBNdistanceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsBNdistance_burnIn" "', argument " "1"" of type '" "gum::GibbsBNdistance< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsBNdistance< double > * >(argp1);
  {
    try {
      result = ((gum::GibbsBNdistance< double > const *)arg1)->burnIn();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsBNdistance_compute(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsBNdistance< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__GibbsBNdistanceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsBNdistance_compute" "', argument " "1"" of type '" "gum::GibbsBNdistance< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsBNdistance< double > * >(argp1);
  {
    try {
      result = (PyObject *)gum_GibbsBNdistance_Sl_double_Sg__compute(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsBNdistance_setVerbosity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsBNdistance< double > *arg1 = 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "GibbsBNdistance_setVerbosity", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__GibbsBNdistanceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsBNdistance_setVerbosity" "', argument " "1"" of type '" "gum::GibbsBNdistance< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsBNdistance< double > * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GibbsBNdistance_setVerbosity" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      gum_GibbsBNdistance_Sl_double_Sg__setVerbosity(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsBNdistance_setEpsilon(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsBNdistance< double > *arg1 = 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "GibbsBNdistance_setEpsilon", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__GibbsBNdistanceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsBNdistance_setEpsilon" "', argument " "1"" of type '" "gum::GibbsBNdistance< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsBNdistance< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GibbsBNdistance_setEpsilon" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      gum_GibbsBNdistance_Sl_double_Sg__setEpsilon(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsBNdistance_setMinEpsilonRate(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsBNdistance< double > *arg1 = 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "GibbsBNdistance_setMinEpsilonRate", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__GibbsBNdistanceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsBNdistance_setMinEpsilonRate" "', argument " "1"" of type '" "gum::GibbsBNdistance< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsBNdistance< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GibbsBNdistance_setMinEpsilonRate" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      gum_GibbsBNdistance_Sl_double_Sg__setMinEpsilonRate(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsBNdistance_setMaxIter(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsBNdistance< double > *arg1 = 0 ;
  gum::Size arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "GibbsBNdistance_setMaxIter", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__GibbsBNdistanceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsBNdistance_setMaxIter" "', argument " "1"" of type '" "gum::GibbsBNdistance< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsBNdistance< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GibbsBNdistance_setMaxIter" "', argument " "2"" of type '" "gum::Size""'");
  } 
  arg2 = static_cast< gum::Size >(val2);
  {
    try {
      gum_GibbsBNdistance_Sl_double_Sg__setMaxIter(arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsBNdistance_setMaxTime(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsBNdistance< double > *arg1 = 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "GibbsBNdistance_setMaxTime", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__GibbsBNdistanceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsBNdistance_setMaxTime" "', argument " "1"" of type '" "gum::GibbsBNdistance< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsBNdistance< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GibbsBNdistance_setMaxTime" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      gum_GibbsBNdistance_Sl_double_Sg__setMaxTime(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsBNdistance_setPeriodSize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsBNdistance< double > *arg1 = 0 ;
  gum::Size arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "GibbsBNdistance_setPeriodSize", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__GibbsBNdistanceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsBNdistance_setPeriodSize" "', argument " "1"" of type '" "gum::GibbsBNdistance< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsBNdistance< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GibbsBNdistance_setPeriodSize" "', argument " "2"" of type '" "gum::Size""'");
  } 
  arg2 = static_cast< gum::Size >(val2);
  {
    try {
      gum_GibbsBNdistance_Sl_double_Sg__setPeriodSize(arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsBNdistance_verbosity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsBNdistance< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__GibbsBNdistanceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsBNdistance_verbosity" "', argument " "1"" of type '" "gum::GibbsBNdistance< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsBNdistance< double > * >(argp1);
  {
    try {
      result = (bool)gum_GibbsBNdistance_Sl_double_Sg__verbosity((gum::GibbsBNdistance< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsBNdistance_epsilon(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsBNdistance< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__GibbsBNdistanceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsBNdistance_epsilon" "', argument " "1"" of type '" "gum::GibbsBNdistance< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsBNdistance< double > * >(argp1);
  {
    try {
      result = (double)gum_GibbsBNdistance_Sl_double_Sg__epsilon((gum::GibbsBNdistance< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsBNdistance_minEpsilonRate(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsBNdistance< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__GibbsBNdistanceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsBNdistance_minEpsilonRate" "', argument " "1"" of type '" "gum::GibbsBNdistance< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsBNdistance< double > * >(argp1);
  {
    try {
      result = (double)gum_GibbsBNdistance_Sl_double_Sg__minEpsilonRate((gum::GibbsBNdistance< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsBNdistance_maxIter(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsBNdistance< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::Size result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__GibbsBNdistanceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsBNdistance_maxIter" "', argument " "1"" of type '" "gum::GibbsBNdistance< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsBNdistance< double > * >(argp1);
  {
    try {
      result = gum_GibbsBNdistance_Sl_double_Sg__maxIter((gum::GibbsBNdistance< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsBNdistance_maxTime(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsBNdistance< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__GibbsBNdistanceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsBNdistance_maxTime" "', argument " "1"" of type '" "gum::GibbsBNdistance< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsBNdistance< double > * >(argp1);
  {
    try {
      result = (double)gum_GibbsBNdistance_Sl_double_Sg__maxTime((gum::GibbsBNdistance< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsBNdistance_periodSize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsBNdistance< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::Size result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__GibbsBNdistanceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsBNdistance_periodSize" "', argument " "1"" of type '" "gum::GibbsBNdistance< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsBNdistance< double > * >(argp1);
  {
    try {
      result = gum_GibbsBNdistance_Sl_double_Sg__periodSize((gum::GibbsBNdistance< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsBNdistance_nbrIterations(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsBNdistance< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::Size result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__GibbsBNdistanceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsBNdistance_nbrIterations" "', argument " "1"" of type '" "gum::GibbsBNdistance< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsBNdistance< double > * >(argp1);
  {
    try {
      result = gum_GibbsBNdistance_Sl_double_Sg__nbrIterations((gum::GibbsBNdistance< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsBNdistance_currentTime(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsBNdistance< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__GibbsBNdistanceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsBNdistance_currentTime" "', argument " "1"" of type '" "gum::GibbsBNdistance< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsBNdistance< double > * >(argp1);
  {
    try {
      result = (double)gum_GibbsBNdistance_Sl_double_Sg__currentTime((gum::GibbsBNdistance< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsBNdistance_messageApproximationScheme(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsBNdistance< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__GibbsBNdistanceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsBNdistance_messageApproximationScheme" "', argument " "1"" of type '" "gum::GibbsBNdistance< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsBNdistance< double > * >(argp1);
  {
    try {
      result = gum_GibbsBNdistance_Sl_double_Sg__messageApproximationScheme((gum::GibbsBNdistance< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsBNdistance_history(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsBNdistance< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< double,std::allocator< double > > *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__GibbsBNdistanceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsBNdistance_history" "', argument " "1"" of type '" "gum::GibbsBNdistance< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsBNdistance< double > * >(argp1);
  {
    try {
      result = (std::vector< double,std::allocator< double > > *) &gum_GibbsBNdistance_Sl_double_Sg__history((gum::GibbsBNdistance< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< double,std::allocator< double > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsBNdistance__asIApproximationSchemeConfiguration(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsBNdistance< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::IApproximationSchemeConfiguration *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__GibbsBNdistanceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsBNdistance__asIApproximationSchemeConfiguration" "', argument " "1"" of type '" "gum::GibbsBNdistance< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsBNdistance< double > * >(argp1);
  {
    try {
      result = (gum::IApproximationSchemeConfiguration *) &gum_GibbsBNdistance_Sl_double_Sg___asIApproximationSchemeConfiguration((gum::GibbsBNdistance< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__IApproximationSchemeConfiguration, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsBNdistance_nbrDrawnVar(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsBNdistance< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::Size result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__GibbsBNdistanceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsBNdistance_nbrDrawnVar" "', argument " "1"" of type '" "gum::GibbsBNdistance< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsBNdistance< double > * >(argp1);
  {
    try {
      result = gum_GibbsBNdistance_Sl_double_Sg__nbrDrawnVar((gum::GibbsBNdistance< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsBNdistance_setNbrDrawnVar(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsBNdistance< double > *arg1 = 0 ;
  gum::Size arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "GibbsBNdistance_setNbrDrawnVar", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__GibbsBNdistanceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsBNdistance_setNbrDrawnVar" "', argument " "1"" of type '" "gum::GibbsBNdistance< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsBNdistance< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GibbsBNdistance_setNbrDrawnVar" "', argument " "2"" of type '" "gum::Size""'");
  } 
  arg2 = static_cast< gum::Size >(val2);
  {
    try {
      gum_GibbsBNdistance_Sl_double_Sg__setNbrDrawnVar(arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsBNdistance_isDrawnAtRandom(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsBNdistance< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__GibbsBNdistanceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsBNdistance_isDrawnAtRandom" "', argument " "1"" of type '" "gum::GibbsBNdistance< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsBNdistance< double > * >(argp1);
  {
    try {
      result = (bool)gum_GibbsBNdistance_Sl_double_Sg__isDrawnAtRandom((gum::GibbsBNdistance< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsBNdistance_setDrawnAtRandom(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsBNdistance< double > *arg1 = 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "GibbsBNdistance_setDrawnAtRandom", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__GibbsBNdistanceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsBNdistance_setDrawnAtRandom" "', argument " "1"" of type '" "gum::GibbsBNdistance< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsBNdistance< double > * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GibbsBNdistance_setDrawnAtRandom" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      gum_GibbsBNdistance_Sl_double_Sg__setDrawnAtRandom(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *GibbsBNdistance_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj = NULL;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gum__GibbsBNdistanceT_double_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *GibbsBNdistance_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_BNDatabaseGenerator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::learning::BNDatabaseGenerator< double > *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_gum__BayesNetT_double_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_BNDatabaseGenerator" "', argument " "1"" of type '" "gum::BayesNet< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "new_BNDatabaseGenerator" "', argument " "1"" of type '" "gum::BayesNet< double > const &""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  {
    try {
      result = (gum::learning::BNDatabaseGenerator< double > *)new gum::learning::BNDatabaseGenerator< double >((gum::BayesNet< double > const &)*arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__learning__BNDatabaseGeneratorT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_BNDatabaseGenerator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNDatabaseGenerator< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNDatabaseGeneratorT_double_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_BNDatabaseGenerator" "', argument " "1"" of type '" "gum::learning::BNDatabaseGenerator< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNDatabaseGenerator< double > * >(argp1);
  {
    try {
      delete arg1;
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNDatabaseGenerator_drawSamples__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::learning::BNDatabaseGenerator< double > *arg1 = 0 ;
  gum::Size arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  double result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNDatabaseGeneratorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNDatabaseGenerator_drawSamples" "', argument " "1"" of type '" "gum::learning::BNDatabaseGenerator< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNDatabaseGenerator< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BNDatabaseGenerator_drawSamples" "', argument " "2"" of type '" "gum::Size""'");
  } 
  arg2 = static_cast< gum::Size >(val2);
  {
    try {
      result = (double)(arg1)->drawSamples(SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNDatabaseGenerator_drawSamples__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::learning::BNDatabaseGenerator< double > *arg1 = 0 ;
  gum::Size arg2 ;
  gum::Instantiation *arg3 = 0 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  double result;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNDatabaseGeneratorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNDatabaseGenerator_drawSamples" "', argument " "1"" of type '" "gum::learning::BNDatabaseGenerator< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNDatabaseGenerator< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BNDatabaseGenerator_drawSamples" "', argument " "2"" of type '" "gum::Size""'");
  } 
  arg2 = static_cast< gum::Size >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_gum__Instantiation,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BNDatabaseGenerator_drawSamples" "', argument " "3"" of type '" "gum::Instantiation const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BNDatabaseGenerator_drawSamples" "', argument " "3"" of type '" "gum::Instantiation const &""'"); 
  }
  arg3 = reinterpret_cast< gum::Instantiation * >(argp3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "BNDatabaseGenerator_drawSamples" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      result = (double)(arg1)->drawSamples(SWIG_STD_MOVE(arg2),(gum::Instantiation const &)*arg3,arg4);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNDatabaseGenerator_drawSamples__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::learning::BNDatabaseGenerator< double > *arg1 = 0 ;
  gum::Size arg2 ;
  gum::Instantiation *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  double result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNDatabaseGeneratorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNDatabaseGenerator_drawSamples" "', argument " "1"" of type '" "gum::learning::BNDatabaseGenerator< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNDatabaseGenerator< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BNDatabaseGenerator_drawSamples" "', argument " "2"" of type '" "gum::Size""'");
  } 
  arg2 = static_cast< gum::Size >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_gum__Instantiation,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BNDatabaseGenerator_drawSamples" "', argument " "3"" of type '" "gum::Instantiation const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BNDatabaseGenerator_drawSamples" "', argument " "3"" of type '" "gum::Instantiation const &""'"); 
  }
  arg3 = reinterpret_cast< gum::Instantiation * >(argp3);
  {
    try {
      result = (double)(arg1)->drawSamples(SWIG_STD_MOVE(arg2),(gum::Instantiation const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNDatabaseGenerator_setDiscretizedLabelModeRandom(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNDatabaseGenerator< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNDatabaseGeneratorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNDatabaseGenerator_setDiscretizedLabelModeRandom" "', argument " "1"" of type '" "gum::learning::BNDatabaseGenerator< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNDatabaseGenerator< double > * >(argp1);
  {
    try {
      (arg1)->setDiscretizedLabelModeRandom();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNDatabaseGenerator_setDiscretizedLabelModeMedian(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNDatabaseGenerator< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNDatabaseGeneratorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNDatabaseGenerator_setDiscretizedLabelModeMedian" "', argument " "1"" of type '" "gum::learning::BNDatabaseGenerator< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNDatabaseGenerator< double > * >(argp1);
  {
    try {
      (arg1)->setDiscretizedLabelModeMedian();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNDatabaseGenerator_setDiscretizedLabelModeInterval(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNDatabaseGenerator< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNDatabaseGeneratorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNDatabaseGenerator_setDiscretizedLabelModeInterval" "', argument " "1"" of type '" "gum::learning::BNDatabaseGenerator< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNDatabaseGenerator< double > * >(argp1);
  {
    try {
      (arg1)->setDiscretizedLabelModeInterval();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNDatabaseGenerator_toCSV__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::learning::BNDatabaseGenerator< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  bool arg4 ;
  std::string arg5 ;
  bool arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  bool val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  
  (void)self;
  if ((nobjs < 6) || (nobjs > 6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNDatabaseGeneratorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNDatabaseGenerator_toCSV" "', argument " "1"" of type '" "gum::learning::BNDatabaseGenerator< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNDatabaseGenerator< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BNDatabaseGenerator_toCSV" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BNDatabaseGenerator_toCSV" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BNDatabaseGenerator_toCSV" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_bool(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "BNDatabaseGenerator_toCSV" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[4], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "BNDatabaseGenerator_toCSV" "', argument " "5"" of type '" "std::string""'"); 
    }
    arg5 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode6 = SWIG_AsVal_bool(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "BNDatabaseGenerator_toCSV" "', argument " "6"" of type '" "bool""'");
  } 
  arg6 = static_cast< bool >(val6);
  {
    try {
      ((gum::learning::BNDatabaseGenerator< double > const *)arg1)->toCSV((std::string const &)*arg2,arg3,arg4,SWIG_STD_MOVE(arg5),arg6);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNDatabaseGenerator_toCSV__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::learning::BNDatabaseGenerator< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  bool arg4 ;
  std::string arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  bool val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  
  (void)self;
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNDatabaseGeneratorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNDatabaseGenerator_toCSV" "', argument " "1"" of type '" "gum::learning::BNDatabaseGenerator< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNDatabaseGenerator< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BNDatabaseGenerator_toCSV" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BNDatabaseGenerator_toCSV" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BNDatabaseGenerator_toCSV" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_bool(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "BNDatabaseGenerator_toCSV" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[4], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "BNDatabaseGenerator_toCSV" "', argument " "5"" of type '" "std::string""'"); 
    }
    arg5 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      ((gum::learning::BNDatabaseGenerator< double > const *)arg1)->toCSV((std::string const &)*arg2,arg3,arg4,SWIG_STD_MOVE(arg5));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNDatabaseGenerator_toCSV__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::learning::BNDatabaseGenerator< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  bool val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNDatabaseGeneratorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNDatabaseGenerator_toCSV" "', argument " "1"" of type '" "gum::learning::BNDatabaseGenerator< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNDatabaseGenerator< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BNDatabaseGenerator_toCSV" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BNDatabaseGenerator_toCSV" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BNDatabaseGenerator_toCSV" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_bool(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "BNDatabaseGenerator_toCSV" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  {
    try {
      ((gum::learning::BNDatabaseGenerator< double > const *)arg1)->toCSV((std::string const &)*arg2,arg3,arg4);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNDatabaseGenerator_toCSV__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::learning::BNDatabaseGenerator< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  bool val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNDatabaseGeneratorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNDatabaseGenerator_toCSV" "', argument " "1"" of type '" "gum::learning::BNDatabaseGenerator< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNDatabaseGenerator< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BNDatabaseGenerator_toCSV" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BNDatabaseGenerator_toCSV" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BNDatabaseGenerator_toCSV" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      ((gum::learning::BNDatabaseGenerator< double > const *)arg1)->toCSV((std::string const &)*arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNDatabaseGenerator_toCSV__SWIG_4(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::learning::BNDatabaseGenerator< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNDatabaseGeneratorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNDatabaseGenerator_toCSV" "', argument " "1"" of type '" "gum::learning::BNDatabaseGenerator< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNDatabaseGenerator< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BNDatabaseGenerator_toCSV" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BNDatabaseGenerator_toCSV" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      ((gum::learning::BNDatabaseGenerator< double > const *)arg1)->toCSV((std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNDatabaseGenerator_toCSV(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[7] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "BNDatabaseGenerator_toCSV", 0, 6, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    PyObject *retobj = _wrap_BNDatabaseGenerator_toCSV__SWIG_4(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    PyObject *retobj = _wrap_BNDatabaseGenerator_toCSV__SWIG_3(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 4) {
    PyObject *retobj = _wrap_BNDatabaseGenerator_toCSV__SWIG_2(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 5) {
    PyObject *retobj = _wrap_BNDatabaseGenerator_toCSV__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 6) {
    PyObject *retobj = _wrap_BNDatabaseGenerator_toCSV__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'BNDatabaseGenerator_toCSV'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::learning::BNDatabaseGenerator< double >::toCSV(std::string const &,bool,bool,std::string,bool) const\n"
    "    gum::learning::BNDatabaseGenerator< double >::toCSV(std::string const &,bool,bool,std::string) const\n"
    "    gum::learning::BNDatabaseGenerator< double >::toCSV(std::string const &,bool,bool) const\n"
    "    gum::learning::BNDatabaseGenerator< double >::toCSV(std::string const &,bool) const\n"
    "    gum::learning::BNDatabaseGenerator< double >::toCSV(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BNDatabaseGenerator_samplesNbRows(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNDatabaseGenerator< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::Size result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNDatabaseGeneratorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNDatabaseGenerator_samplesNbRows" "', argument " "1"" of type '" "gum::learning::BNDatabaseGenerator< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNDatabaseGenerator< double > * >(argp1);
  {
    try {
      result = ((gum::learning::BNDatabaseGenerator< double > const *)arg1)->samplesNbRows();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNDatabaseGenerator_samplesNbCols(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNDatabaseGenerator< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::Size result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNDatabaseGeneratorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNDatabaseGenerator_samplesNbCols" "', argument " "1"" of type '" "gum::learning::BNDatabaseGenerator< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNDatabaseGenerator< double > * >(argp1);
  {
    try {
      result = ((gum::learning::BNDatabaseGenerator< double > const *)arg1)->samplesNbCols();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNDatabaseGenerator_samplesAt(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNDatabaseGenerator< double > *arg1 = 0 ;
  gum::Idx arg2 ;
  gum::Idx arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  gum::Idx result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "BNDatabaseGenerator_samplesAt", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNDatabaseGeneratorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNDatabaseGenerator_samplesAt" "', argument " "1"" of type '" "gum::learning::BNDatabaseGenerator< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNDatabaseGenerator< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BNDatabaseGenerator_samplesAt" "', argument " "2"" of type '" "gum::Idx""'");
  } 
  arg2 = static_cast< gum::Idx >(val2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BNDatabaseGenerator_samplesAt" "', argument " "3"" of type '" "gum::Idx""'");
  } 
  arg3 = static_cast< gum::Idx >(val3);
  {
    try {
      result = ((gum::learning::BNDatabaseGenerator< double > const *)arg1)->samplesAt(SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNDatabaseGenerator_samplesLabelAt(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNDatabaseGenerator< double > *arg1 = 0 ;
  gum::Idx arg2 ;
  gum::Idx arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::string result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "BNDatabaseGenerator_samplesLabelAt", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNDatabaseGeneratorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNDatabaseGenerator_samplesLabelAt" "', argument " "1"" of type '" "gum::learning::BNDatabaseGenerator< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNDatabaseGenerator< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BNDatabaseGenerator_samplesLabelAt" "', argument " "2"" of type '" "gum::Idx""'");
  } 
  arg2 = static_cast< gum::Idx >(val2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BNDatabaseGenerator_samplesLabelAt" "', argument " "3"" of type '" "gum::Idx""'");
  } 
  arg3 = static_cast< gum::Idx >(val3);
  {
    try {
      result = ((gum::learning::BNDatabaseGenerator< double > const *)arg1)->samplesLabelAt(SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNDatabaseGenerator_setVarOrder__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::learning::BNDatabaseGenerator< double > *arg1 = 0 ;
  std::vector< gum::Idx,std::allocator< gum::Idx > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNDatabaseGeneratorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNDatabaseGenerator_setVarOrder" "', argument " "1"" of type '" "gum::learning::BNDatabaseGenerator< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNDatabaseGenerator< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_std__size_t_std__allocatorT_std__size_t_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BNDatabaseGenerator_setVarOrder" "', argument " "2"" of type '" "std::vector< gum::Idx,std::allocator< gum::Idx > > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BNDatabaseGenerator_setVarOrder" "', argument " "2"" of type '" "std::vector< gum::Idx,std::allocator< gum::Idx > > const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< gum::Idx,std::allocator< gum::Idx > > * >(argp2);
  {
    try {
      (arg1)->setVarOrder((std::vector< gum::Idx,std::allocator< gum::Idx > > const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNDatabaseGenerator_setVarOrder__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::learning::BNDatabaseGenerator< double > *arg1 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNDatabaseGeneratorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNDatabaseGenerator_setVarOrder" "', argument " "1"" of type '" "gum::learning::BNDatabaseGenerator< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNDatabaseGenerator< double > * >(argp1);
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BNDatabaseGenerator_setVarOrder" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BNDatabaseGenerator_setVarOrder" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->setVarOrder((std::vector< std::string,std::allocator< std::string > > const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNDatabaseGenerator_setVarOrder(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "BNDatabaseGenerator_setVarOrder", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__vectorT_std__size_t_std__allocatorT_std__size_t_t_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_1;
    return _wrap_BNDatabaseGenerator_setVarOrder__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_BNDatabaseGenerator_setVarOrder__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'BNDatabaseGenerator_setVarOrder'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::learning::BNDatabaseGenerator< double >::setVarOrder(std::vector< gum::Idx,std::allocator< gum::Idx > > const &)\n"
    "    gum::learning::BNDatabaseGenerator< double >::setVarOrder(std::vector< std::string,std::allocator< std::string > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BNDatabaseGenerator_setVarOrderFromCSV__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::learning::BNDatabaseGenerator< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNDatabaseGeneratorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNDatabaseGenerator_setVarOrderFromCSV" "', argument " "1"" of type '" "gum::learning::BNDatabaseGenerator< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNDatabaseGenerator< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BNDatabaseGenerator_setVarOrderFromCSV" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BNDatabaseGenerator_setVarOrderFromCSV" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BNDatabaseGenerator_setVarOrderFromCSV" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BNDatabaseGenerator_setVarOrderFromCSV" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->setVarOrderFromCSV((std::string const &)*arg2,(std::string const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNDatabaseGenerator_setVarOrderFromCSV__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::learning::BNDatabaseGenerator< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNDatabaseGeneratorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNDatabaseGenerator_setVarOrderFromCSV" "', argument " "1"" of type '" "gum::learning::BNDatabaseGenerator< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNDatabaseGenerator< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BNDatabaseGenerator_setVarOrderFromCSV" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BNDatabaseGenerator_setVarOrderFromCSV" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->setVarOrderFromCSV((std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNDatabaseGenerator_setVarOrderFromCSV(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "BNDatabaseGenerator_setVarOrderFromCSV", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    PyObject *retobj = _wrap_BNDatabaseGenerator_setVarOrderFromCSV__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    PyObject *retobj = _wrap_BNDatabaseGenerator_setVarOrderFromCSV__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'BNDatabaseGenerator_setVarOrderFromCSV'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::learning::BNDatabaseGenerator< double >::setVarOrderFromCSV(std::string const &,std::string const &)\n"
    "    gum::learning::BNDatabaseGenerator< double >::setVarOrderFromCSV(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BNDatabaseGenerator_setTopologicalVarOrder(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNDatabaseGenerator< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNDatabaseGeneratorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNDatabaseGenerator_setTopologicalVarOrder" "', argument " "1"" of type '" "gum::learning::BNDatabaseGenerator< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNDatabaseGenerator< double > * >(argp1);
  {
    try {
      (arg1)->setTopologicalVarOrder();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNDatabaseGenerator_setAntiTopologicalVarOrder(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNDatabaseGenerator< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNDatabaseGeneratorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNDatabaseGenerator_setAntiTopologicalVarOrder" "', argument " "1"" of type '" "gum::learning::BNDatabaseGenerator< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNDatabaseGenerator< double > * >(argp1);
  {
    try {
      (arg1)->setAntiTopologicalVarOrder();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNDatabaseGenerator_setRandomVarOrder(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNDatabaseGenerator< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNDatabaseGeneratorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNDatabaseGenerator_setRandomVarOrder" "', argument " "1"" of type '" "gum::learning::BNDatabaseGenerator< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNDatabaseGenerator< double > * >(argp1);
  {
    try {
      (arg1)->setRandomVarOrder();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNDatabaseGenerator_varOrderNames(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNDatabaseGenerator< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::string,std::allocator< std::string > > result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNDatabaseGeneratorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNDatabaseGenerator_varOrderNames" "', argument " "1"" of type '" "gum::learning::BNDatabaseGenerator< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNDatabaseGenerator< double > * >(argp1);
  {
    try {
      result = ((gum::learning::BNDatabaseGenerator< double > const *)arg1)->varOrderNames();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< std::string,std::allocator< std::string > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNDatabaseGenerator_log2likelihood(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNDatabaseGenerator< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNDatabaseGeneratorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNDatabaseGenerator_log2likelihood" "', argument " "1"" of type '" "gum::learning::BNDatabaseGenerator< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNDatabaseGenerator< double > * >(argp1);
  {
    try {
      result = (double)((gum::learning::BNDatabaseGenerator< double > const *)arg1)->log2likelihood();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNDatabaseGenerator_bn(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNDatabaseGenerator< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::BayesNet< double > *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNDatabaseGeneratorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNDatabaseGenerator_bn" "', argument " "1"" of type '" "gum::learning::BNDatabaseGenerator< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNDatabaseGenerator< double > * >(argp1);
  {
    try {
      result = (gum::BayesNet< double > *) &(arg1)->bn();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNDatabaseGenerator_varOrder(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNDatabaseGenerator< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNDatabaseGeneratorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNDatabaseGenerator_varOrder" "', argument " "1"" of type '" "gum::learning::BNDatabaseGenerator< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNDatabaseGenerator< double > * >(argp1);
  {
    try {
      result = (PyObject *)gum_learning_BNDatabaseGenerator_Sl_double_Sg__varOrder((gum::learning::BNDatabaseGenerator< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNDatabaseGenerator_drawSamples__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::learning::BNDatabaseGenerator< double > *arg1 = 0 ;
  gum::Size arg2 ;
  PyObject *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  double result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNDatabaseGeneratorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNDatabaseGenerator_drawSamples" "', argument " "1"" of type '" "gum::learning::BNDatabaseGenerator< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNDatabaseGenerator< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BNDatabaseGenerator_drawSamples" "', argument " "2"" of type '" "gum::Size""'");
  } 
  arg2 = static_cast< gum::Size >(val2);
  arg3 = swig_obj[2];
  {
    try {
      result = (double)gum_learning_BNDatabaseGenerator_Sl_double_Sg__drawSamples__SWIG_3(arg1,SWIG_STD_MOVE(arg2),arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNDatabaseGenerator_drawSamples(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "BNDatabaseGenerator_drawSamples", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    PyObject *retobj = _wrap_BNDatabaseGenerator_drawSamples__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    int _v = 0;
    {
      int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_gum__Instantiation, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_2;
    return _wrap_BNDatabaseGenerator_drawSamples__SWIG_2(self, argc, argv);
  }
check_2:
  
  if (argc == 3) {
    PyObject *retobj = _wrap_BNDatabaseGenerator_drawSamples__SWIG_3(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 4) {
    PyObject *retobj = _wrap_BNDatabaseGenerator_drawSamples__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'BNDatabaseGenerator_drawSamples'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::learning::BNDatabaseGenerator< double >::drawSamples(gum::Size)\n"
    "    gum::learning::BNDatabaseGenerator< double >::drawSamples(gum::Size,gum::Instantiation const &,int)\n"
    "    gum::learning::BNDatabaseGenerator< double >::drawSamples(gum::Size,gum::Instantiation const &)\n"
    "    gum::learning::BNDatabaseGenerator< double >::drawSamples(gum::Size,PyObject *)\n");
  return 0;
}


SWIGINTERN PyObject *BNDatabaseGenerator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj = NULL;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gum__learning__BNDatabaseGeneratorT_double_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *BNDatabaseGenerator_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_BNLearner__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = 0 ;
  bool arg3 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  bool val3 ;
  int ecode3 = 0 ;
  gum::learning::BNLearner< double > *result = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_BNLearner" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "new_BNLearner" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_BNLearner" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "new_BNLearner" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_BNLearner" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      result = (gum::learning::BNLearner< double > *)new gum::learning::BNLearner< double >((std::string const &)*arg1,(std::vector< std::string,std::allocator< std::string > > const &)*arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__learning__BNLearnerT_double_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BNLearner__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  gum::learning::BNLearner< double > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_BNLearner" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "new_BNLearner" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_BNLearner" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "new_BNLearner" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (gum::learning::BNLearner< double > *)new gum::learning::BNLearner< double >((std::string const &)*arg1,(std::vector< std::string,std::allocator< std::string > > const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__learning__BNLearnerT_double_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BNLearner__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  gum::learning::BNLearner< double > *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_BNLearner" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "new_BNLearner" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (gum::learning::BNLearner< double > *)new gum::learning::BNLearner< double >((std::string const &)*arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__learning__BNLearnerT_double_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BNLearner__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::learning::DatabaseTable *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gum::learning::BNLearner< double > *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_gum__learning__DatabaseTable,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_BNLearner" "', argument " "1"" of type '" "gum::learning::DatabaseTable const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "new_BNLearner" "', argument " "1"" of type '" "gum::learning::DatabaseTable const &""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::DatabaseTable * >(argp1);
  {
    try {
      result = (gum::learning::BNLearner< double > *)new gum::learning::BNLearner< double >((gum::learning::DatabaseTable const &)*arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__learning__BNLearnerT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BNLearner__SWIG_4(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  gum::BayesNet< double > *arg2 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg3 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  gum::learning::BNLearner< double > *result = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_BNLearner" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "new_BNLearner" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_gum__BayesNetT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_BNLearner" "', argument " "2"" of type '" "gum::BayesNet< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "new_BNLearner" "', argument " "2"" of type '" "gum::BayesNet< double > const &""'"); 
  }
  arg2 = reinterpret_cast< gum::BayesNet< double > * >(argp2);
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_BNLearner" "', argument " "3"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "new_BNLearner" "', argument " "3"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      result = (gum::learning::BNLearner< double > *)new gum::learning::BNLearner< double >((std::string const &)*arg1,(gum::BayesNet< double > const &)*arg2,(std::vector< std::string,std::allocator< std::string > > const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__learning__BNLearnerT_double_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BNLearner__SWIG_5(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  gum::BayesNet< double > *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  gum::learning::BNLearner< double > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_BNLearner" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "new_BNLearner" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_gum__BayesNetT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_BNLearner" "', argument " "2"" of type '" "gum::BayesNet< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "new_BNLearner" "', argument " "2"" of type '" "gum::BayesNet< double > const &""'"); 
  }
  arg2 = reinterpret_cast< gum::BayesNet< double > * >(argp2);
  {
    try {
      result = (gum::learning::BNLearner< double > *)new gum::learning::BNLearner< double >((std::string const &)*arg1,(gum::BayesNet< double > const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__learning__BNLearnerT_double_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BNLearner__SWIG_6(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gum::learning::BNLearner< double > *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_gum__learning__BNLearnerT_double_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_BNLearner" "', argument " "1"" of type '" "gum::learning::BNLearner< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "new_BNLearner" "', argument " "1"" of type '" "gum::learning::BNLearner< double > const &""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  {
    try {
      result = (gum::learning::BNLearner< double > *)new gum::learning::BNLearner< double >((gum::learning::BNLearner< double > const &)*arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__learning__BNLearnerT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BNLearner__SWIG_7(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::unique_ptr< gum::learning::BNLearner< double > > rvrdeleter1 ;
  gum::learning::BNLearner< double > *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_gum__learning__BNLearnerT_double_t, SWIG_POINTER_RELEASE |  0 );
  if (!SWIG_IsOK(res1)) {
    if (res1 == SWIG_ERROR_RELEASE_NOT_OWNED) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_BNLearner" "', cannot release ownership as memory is not owned for argument " "1"" of type '" "gum::learning::BNLearner< double > &&""'");
    } else {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_BNLearner" "', argument " "1"" of type '" "gum::learning::BNLearner< double > &&""'"); 
    }
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "new_BNLearner" "', argument " "1"" of type '" "gum::learning::BNLearner< double > &&""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  rvrdeleter1.reset(arg1);
  {
    try {
      result = (gum::learning::BNLearner< double > *)new gum::learning::BNLearner< double >((gum::learning::BNLearner< double > &&)*arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__learning__BNLearnerT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BNLearner(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_BNLearner", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_gum__learning__DatabaseTable, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_1;
    return _wrap_new_BNLearner__SWIG_3(self, argc, argv);
  }
check_1:
  
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_gum__learning__BNLearnerT_double_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_2;
    return _wrap_new_BNLearner__SWIG_6(self, argc, argv);
  }
check_2:
  
  if (argc == 1) {
    int _v = 0;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__learning__BNLearnerT_double_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_3;
    return _wrap_new_BNLearner__SWIG_7(self, argc, argv);
  }
check_3:
  
  if (argc == 1) {
    PyObject *retobj = _wrap_new_BNLearner__SWIG_2(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_gum__BayesNetT_double_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_5;
    return _wrap_new_BNLearner__SWIG_5(self, argc, argv);
  }
check_5:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_new_BNLearner__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    int _v = 0;
    {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_gum__BayesNetT_double_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_7;
    {
      int res = swig::asptr(argv[2], (std::vector< std::string,std::allocator< std::string > >**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_7;
    return _wrap_new_BNLearner__SWIG_4(self, argc, argv);
  }
check_7:
  
  if (argc == 3) {
    PyObject *retobj = _wrap_new_BNLearner__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_BNLearner'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::learning::BNLearner< double >::BNLearner(std::string const &,std::vector< std::string,std::allocator< std::string > > const &,bool const)\n"
    "    gum::learning::BNLearner< double >::BNLearner(std::string const &,std::vector< std::string,std::allocator< std::string > > const &)\n"
    "    gum::learning::BNLearner< double >::BNLearner(std::string const &)\n"
    "    gum::learning::BNLearner< double >::BNLearner(gum::learning::DatabaseTable const &)\n"
    "    gum::learning::BNLearner< double >::BNLearner(std::string const &,gum::BayesNet< double > const &,std::vector< std::string,std::allocator< std::string > > const &)\n"
    "    gum::learning::BNLearner< double >::BNLearner(std::string const &,gum::BayesNet< double > const &)\n"
    "    gum::learning::BNLearner< double >::BNLearner(gum::learning::BNLearner< double > const &)\n"
    "    gum::learning::BNLearner< double >::BNLearner(gum::learning::BNLearner< double > &&)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_BNLearner(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_BNLearner" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  {
    try {
      delete arg1;
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_learnBN(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::BayesNet< double > result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_learnBN" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  {
    try {
      result = (arg1)->learnBN();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::BayesNet< double >(result)), SWIGTYPE_p_gum__BayesNetT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_learnParameters__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  gum::DAG *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  gum::BayesNet< double > result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_learnParameters" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_gum__DAG,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BNLearner_learnParameters" "', argument " "2"" of type '" "gum::DAG const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BNLearner_learnParameters" "', argument " "2"" of type '" "gum::DAG const &""'"); 
  }
  arg2 = reinterpret_cast< gum::DAG * >(argp2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BNLearner_learnParameters" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      result = (arg1)->learnParameters((gum::DAG const &)*arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::BayesNet< double >(result)), SWIGTYPE_p_gum__BayesNetT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_learnParameters__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  gum::DAG *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  gum::BayesNet< double > result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_learnParameters" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_gum__DAG,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BNLearner_learnParameters" "', argument " "2"" of type '" "gum::DAG const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BNLearner_learnParameters" "', argument " "2"" of type '" "gum::DAG const &""'"); 
  }
  arg2 = reinterpret_cast< gum::DAG * >(argp2);
  {
    try {
      result = (arg1)->learnParameters((gum::DAG const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::BayesNet< double >(result)), SWIGTYPE_p_gum__BayesNetT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_learnParameters__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  gum::BayesNet< double > result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_learnParameters" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BNLearner_learnParameters" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      result = (arg1)->learnParameters(arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::BayesNet< double >(result)), SWIGTYPE_p_gum__BayesNetT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_learnParameters__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gum::BayesNet< double > result;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_learnParameters" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  {
    try {
      result = (arg1)->learnParameters();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::BayesNet< double >(result)), SWIGTYPE_p_gum__BayesNetT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_learnParameters(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "BNLearner_learnParameters", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    PyObject *retobj = _wrap_BNLearner_learnParameters__SWIG_3(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_gum__DAG, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_2;
    return _wrap_BNLearner_learnParameters__SWIG_1(self, argc, argv);
  }
check_2:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_BNLearner_learnParameters__SWIG_2(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    PyObject *retobj = _wrap_BNLearner_learnParameters__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'BNLearner_learnParameters'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::learning::BNLearner< double >::learnParameters(gum::DAG const &,bool)\n"
    "    gum::learning::BNLearner< double >::learnParameters(gum::DAG const &)\n"
    "    gum::learning::BNLearner< double >::learnParameters(bool)\n"
    "    gum::learning::BNLearner< double >::learnParameters()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BNLearner_copyState(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  gum::learning::BNLearner< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "BNLearner_copyState", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_copyState" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_gum__learning__BNLearnerT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BNLearner_copyState" "', argument " "2"" of type '" "gum::learning::BNLearner< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BNLearner_copyState" "', argument " "2"" of type '" "gum::learning::BNLearner< double > const &""'"); 
  }
  arg2 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp2);
  {
    try {
      (arg1)->copyState((gum::learning::BNLearner< double > const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_setInitialDAG(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  gum::DAG *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  gum::learning::BNLearner< double > *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "BNLearner_setInitialDAG", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_setInitialDAG" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_gum__DAG,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BNLearner_setInitialDAG" "', argument " "2"" of type '" "gum::DAG const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BNLearner_setInitialDAG" "', argument " "2"" of type '" "gum::DAG const &""'"); 
  }
  arg2 = reinterpret_cast< gum::DAG * >(argp2);
  {
    try {
      result = (gum::learning::BNLearner< double > *) &(arg1)->setInitialDAG((gum::DAG const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_useEM(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  gum::learning::BNLearner< double > *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "BNLearner_useEM", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_useEM" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BNLearner_useEM" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (gum::learning::BNLearner< double > *) &(arg1)->useEM(arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_useScoreAIC(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::learning::BNLearner< double > *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_useScoreAIC" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  {
    try {
      result = (gum::learning::BNLearner< double > *) &(arg1)->useScoreAIC();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_useScoreBD(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::learning::BNLearner< double > *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_useScoreBD" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  {
    try {
      result = (gum::learning::BNLearner< double > *) &(arg1)->useScoreBD();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_useScoreBDeu(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::learning::BNLearner< double > *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_useScoreBDeu" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  {
    try {
      result = (gum::learning::BNLearner< double > *) &(arg1)->useScoreBDeu();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_useScoreBIC(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::learning::BNLearner< double > *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_useScoreBIC" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  {
    try {
      result = (gum::learning::BNLearner< double > *) &(arg1)->useScoreBIC();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_useScoreK2(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::learning::BNLearner< double > *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_useScoreK2" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  {
    try {
      result = (gum::learning::BNLearner< double > *) &(arg1)->useScoreK2();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_useScoreLog2Likelihood(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::learning::BNLearner< double > *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_useScoreLog2Likelihood" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  {
    try {
      result = (gum::learning::BNLearner< double > *) &(arg1)->useScoreLog2Likelihood();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_useNoPrior(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::learning::BNLearner< double > *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_useNoPrior" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  {
    try {
      result = (gum::learning::BNLearner< double > *) &(arg1)->useNoPrior();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_useBDeuPrior__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  gum::learning::BNLearner< double > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_useBDeuPrior" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BNLearner_useBDeuPrior" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (gum::learning::BNLearner< double > *) &(arg1)->useBDeuPrior(arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_useBDeuPrior__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gum::learning::BNLearner< double > *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_useBDeuPrior" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  {
    try {
      result = (gum::learning::BNLearner< double > *) &(arg1)->useBDeuPrior();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_useBDeuPrior(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "BNLearner_useBDeuPrior", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    PyObject *retobj = _wrap_BNLearner_useBDeuPrior__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 2) {
    PyObject *retobj = _wrap_BNLearner_useBDeuPrior__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'BNLearner_useBDeuPrior'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::learning::BNLearner< double >::useBDeuPrior(double)\n"
    "    gum::learning::BNLearner< double >::useBDeuPrior()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BNLearner_useSmoothingPrior__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  gum::learning::BNLearner< double > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_useSmoothingPrior" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BNLearner_useSmoothingPrior" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (gum::learning::BNLearner< double > *) &(arg1)->useSmoothingPrior(arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_useSmoothingPrior__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gum::learning::BNLearner< double > *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_useSmoothingPrior" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  {
    try {
      result = (gum::learning::BNLearner< double > *) &(arg1)->useSmoothingPrior();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_useSmoothingPrior(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "BNLearner_useSmoothingPrior", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    PyObject *retobj = _wrap_BNLearner_useSmoothingPrior__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 2) {
    PyObject *retobj = _wrap_BNLearner_useSmoothingPrior__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'BNLearner_useSmoothingPrior'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::learning::BNLearner< double >::useSmoothingPrior(double)\n"
    "    gum::learning::BNLearner< double >::useSmoothingPrior()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BNLearner_useDirichletPrior__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  double val3 ;
  int ecode3 = 0 ;
  gum::learning::BNLearner< double > *result = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_useDirichletPrior" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BNLearner_useDirichletPrior" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BNLearner_useDirichletPrior" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BNLearner_useDirichletPrior" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (gum::learning::BNLearner< double > *) &(arg1)->useDirichletPrior((std::string const &)*arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_useDirichletPrior__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  gum::learning::BNLearner< double > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_useDirichletPrior" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BNLearner_useDirichletPrior" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BNLearner_useDirichletPrior" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (gum::learning::BNLearner< double > *) &(arg1)->useDirichletPrior((std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_useDirichletPrior__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  gum::BayesNet< double > *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  gum::learning::BNLearner< double > *result = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_useDirichletPrior" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_gum__BayesNetT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BNLearner_useDirichletPrior" "', argument " "2"" of type '" "gum::BayesNet< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BNLearner_useDirichletPrior" "', argument " "2"" of type '" "gum::BayesNet< double > const &""'"); 
  }
  arg2 = reinterpret_cast< gum::BayesNet< double > * >(argp2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BNLearner_useDirichletPrior" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (gum::learning::BNLearner< double > *) &(arg1)->useDirichletPrior((gum::BayesNet< double > const &)*arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_useDirichletPrior__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  gum::BayesNet< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  gum::learning::BNLearner< double > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_useDirichletPrior" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_gum__BayesNetT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BNLearner_useDirichletPrior" "', argument " "2"" of type '" "gum::BayesNet< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BNLearner_useDirichletPrior" "', argument " "2"" of type '" "gum::BayesNet< double > const &""'"); 
  }
  arg2 = reinterpret_cast< gum::BayesNet< double > * >(argp2);
  {
    try {
      result = (gum::learning::BNLearner< double > *) &(arg1)->useDirichletPrior((gum::BayesNet< double > const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_useDirichletPrior(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "BNLearner_useDirichletPrior", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_gum__BayesNetT_double_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_1;
    return _wrap_BNLearner_useDirichletPrior__SWIG_3(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_BNLearner_useDirichletPrior__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    int _v = 0;
    {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_gum__BayesNetT_double_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_3;
    PyObject *retobj = _wrap_BNLearner_useDirichletPrior__SWIG_2(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
check_3:
  
  if (argc == 3) {
    PyObject *retobj = _wrap_BNLearner_useDirichletPrior__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'BNLearner_useDirichletPrior'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::learning::BNLearner< double >::useDirichletPrior(std::string const &,double)\n"
    "    gum::learning::BNLearner< double >::useDirichletPrior(std::string const &)\n"
    "    gum::learning::BNLearner< double >::useDirichletPrior(gum::BayesNet< double > const &,double)\n"
    "    gum::learning::BNLearner< double >::useDirichletPrior(gum::BayesNet< double > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BNLearner_useGreedyHillClimbing(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::learning::BNLearner< double > *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_useGreedyHillClimbing" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  {
    try {
      result = (gum::learning::BNLearner< double > *) &(arg1)->useGreedyHillClimbing();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_useLocalSearchWithTabuList__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  gum::Size arg2 ;
  gum::Size arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  gum::learning::BNLearner< double > *result = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_useLocalSearchWithTabuList" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BNLearner_useLocalSearchWithTabuList" "', argument " "2"" of type '" "gum::Size""'");
  } 
  arg2 = static_cast< gum::Size >(val2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BNLearner_useLocalSearchWithTabuList" "', argument " "3"" of type '" "gum::Size""'");
  } 
  arg3 = static_cast< gum::Size >(val3);
  {
    try {
      result = (gum::learning::BNLearner< double > *) &(arg1)->useLocalSearchWithTabuList(SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_useLocalSearchWithTabuList__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  gum::Size arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  gum::learning::BNLearner< double > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_useLocalSearchWithTabuList" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BNLearner_useLocalSearchWithTabuList" "', argument " "2"" of type '" "gum::Size""'");
  } 
  arg2 = static_cast< gum::Size >(val2);
  {
    try {
      result = (gum::learning::BNLearner< double > *) &(arg1)->useLocalSearchWithTabuList(SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_useLocalSearchWithTabuList__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gum::learning::BNLearner< double > *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_useLocalSearchWithTabuList" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  {
    try {
      result = (gum::learning::BNLearner< double > *) &(arg1)->useLocalSearchWithTabuList();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_useLocalSearchWithTabuList(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "BNLearner_useLocalSearchWithTabuList", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    PyObject *retobj = _wrap_BNLearner_useLocalSearchWithTabuList__SWIG_2(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 2) {
    PyObject *retobj = _wrap_BNLearner_useLocalSearchWithTabuList__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    PyObject *retobj = _wrap_BNLearner_useLocalSearchWithTabuList__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'BNLearner_useLocalSearchWithTabuList'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::learning::BNLearner< double >::useLocalSearchWithTabuList(gum::Size,gum::Size)\n"
    "    gum::learning::BNLearner< double >::useLocalSearchWithTabuList(gum::Size)\n"
    "    gum::learning::BNLearner< double >::useLocalSearchWithTabuList()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BNLearner_useK2__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  gum::Sequence< gum::NodeId > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  gum::learning::BNLearner< double > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_useK2" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_gum__SequenceT_std__size_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BNLearner_useK2" "', argument " "2"" of type '" "gum::Sequence< gum::NodeId > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BNLearner_useK2" "', argument " "2"" of type '" "gum::Sequence< gum::NodeId > const &""'"); 
  }
  arg2 = reinterpret_cast< gum::Sequence< gum::NodeId > * >(argp2);
  {
    try {
      result = (gum::learning::BNLearner< double > *) &(arg1)->useK2((gum::Sequence< gum::NodeId > const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_useK2__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  std::vector< gum::NodeId,std::allocator< gum::NodeId > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  gum::learning::BNLearner< double > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_useK2" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_std__size_t_std__allocatorT_std__size_t_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BNLearner_useK2" "', argument " "2"" of type '" "std::vector< gum::NodeId,std::allocator< gum::NodeId > > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BNLearner_useK2" "', argument " "2"" of type '" "std::vector< gum::NodeId,std::allocator< gum::NodeId > > const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< gum::NodeId,std::allocator< gum::NodeId > > * >(argp2);
  {
    try {
      result = (gum::learning::BNLearner< double > *) &(arg1)->useK2((std::vector< gum::NodeId,std::allocator< gum::NodeId > > const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_useMIIC(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::learning::BNLearner< double > *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_useMIIC" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  {
    try {
      result = (gum::learning::BNLearner< double > *) &(arg1)->useMIIC();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_useNMLCorrection(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::learning::BNLearner< double > *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_useNMLCorrection" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  {
    try {
      result = (gum::learning::BNLearner< double > *) &(arg1)->useNMLCorrection();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_useMDLCorrection(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::learning::BNLearner< double > *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_useMDLCorrection" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  {
    try {
      result = (gum::learning::BNLearner< double > *) &(arg1)->useMDLCorrection();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_useNoCorrection(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::learning::BNLearner< double > *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_useNoCorrection" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  {
    try {
      result = (gum::learning::BNLearner< double > *) &(arg1)->useNoCorrection();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_setMaxIndegree(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  gum::Size arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  gum::learning::BNLearner< double > *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "BNLearner_setMaxIndegree", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_setMaxIndegree" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BNLearner_setMaxIndegree" "', argument " "2"" of type '" "gum::Size""'");
  } 
  arg2 = static_cast< gum::Size >(val2);
  {
    try {
      result = (gum::learning::BNLearner< double > *) &(arg1)->setMaxIndegree(SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_setSliceOrder__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  gum::NodeProperty< gum::NodeId > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  gum::learning::BNLearner< double > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_setSliceOrder" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_gum__NodePropertyT_std__size_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BNLearner_setSliceOrder" "', argument " "2"" of type '" "gum::NodeProperty< gum::NodeId > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BNLearner_setSliceOrder" "', argument " "2"" of type '" "gum::NodeProperty< gum::NodeId > const &""'"); 
  }
  arg2 = reinterpret_cast< gum::NodeProperty< gum::NodeId > * >(argp2);
  {
    try {
      result = (gum::learning::BNLearner< double > *) &(arg1)->setSliceOrder((gum::NodeProperty< gum::NodeId > const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_setSliceOrder__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  std::vector< std::vector< std::string,std::allocator< std::string > >,std::allocator< std::vector< std::string,std::allocator< std::string > > > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  gum::learning::BNLearner< double > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_setSliceOrder" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_std__vectorT_std__string_t_std__allocatorT_std__vectorT_std__string_t_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BNLearner_setSliceOrder" "', argument " "2"" of type '" "std::vector< std::vector< std::string,std::allocator< std::string > >,std::allocator< std::vector< std::string,std::allocator< std::string > > > > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BNLearner_setSliceOrder" "', argument " "2"" of type '" "std::vector< std::vector< std::string,std::allocator< std::string > >,std::allocator< std::vector< std::string,std::allocator< std::string > > > > const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::vector< std::string,std::allocator< std::string > >,std::allocator< std::vector< std::string,std::allocator< std::string > > > > * >(argp2);
  {
    try {
      result = (gum::learning::BNLearner< double > *) &(arg1)->setSliceOrder((std::vector< std::vector< std::string,std::allocator< std::string > >,std::allocator< std::vector< std::string,std::allocator< std::string > > > > const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_addForbiddenArc__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  gum::Arc *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  gum::learning::BNLearner< double > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_addForbiddenArc" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_gum__Arc,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BNLearner_addForbiddenArc" "', argument " "2"" of type '" "gum::Arc const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BNLearner_addForbiddenArc" "', argument " "2"" of type '" "gum::Arc const &""'"); 
  }
  arg2 = reinterpret_cast< gum::Arc * >(argp2);
  {
    try {
      result = (gum::learning::BNLearner< double > *) &(arg1)->addForbiddenArc((gum::Arc const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_addForbiddenArc__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  gum::NodeId arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  gum::learning::BNLearner< double > *result = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_addForbiddenArc" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BNLearner_addForbiddenArc" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BNLearner_addForbiddenArc" "', argument " "3"" of type '" "gum::NodeId""'");
  } 
  arg3 = static_cast< gum::NodeId >(val3);
  {
    try {
      result = (gum::learning::BNLearner< double > *) &(arg1)->addForbiddenArc(SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_addForbiddenArc__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  gum::learning::BNLearner< double > *result = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_addForbiddenArc" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BNLearner_addForbiddenArc" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BNLearner_addForbiddenArc" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BNLearner_addForbiddenArc" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BNLearner_addForbiddenArc" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      result = (gum::learning::BNLearner< double > *) &(arg1)->addForbiddenArc((std::string const &)*arg2,(std::string const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_addForbiddenArc(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "BNLearner_addForbiddenArc", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    PyObject *retobj = _wrap_BNLearner_addForbiddenArc__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_2;
    {
      {
        int res = SWIG_AsVal_size_t(argv[2], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_2;
    return _wrap_BNLearner_addForbiddenArc__SWIG_1(self, argc, argv);
  }
check_2:
  
  if (argc == 3) {
    PyObject *retobj = _wrap_BNLearner_addForbiddenArc__SWIG_2(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'BNLearner_addForbiddenArc'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::learning::BNLearner< double >::addForbiddenArc(gum::Arc const &)\n"
    "    gum::learning::BNLearner< double >::addForbiddenArc(gum::NodeId,gum::NodeId)\n"
    "    gum::learning::BNLearner< double >::addForbiddenArc(std::string const &,std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BNLearner_eraseForbiddenArc__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  gum::Arc *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  gum::learning::BNLearner< double > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_eraseForbiddenArc" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_gum__Arc,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BNLearner_eraseForbiddenArc" "', argument " "2"" of type '" "gum::Arc const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BNLearner_eraseForbiddenArc" "', argument " "2"" of type '" "gum::Arc const &""'"); 
  }
  arg2 = reinterpret_cast< gum::Arc * >(argp2);
  {
    try {
      result = (gum::learning::BNLearner< double > *) &(arg1)->eraseForbiddenArc((gum::Arc const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_eraseForbiddenArc__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  gum::NodeId arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  gum::learning::BNLearner< double > *result = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_eraseForbiddenArc" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BNLearner_eraseForbiddenArc" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BNLearner_eraseForbiddenArc" "', argument " "3"" of type '" "gum::NodeId""'");
  } 
  arg3 = static_cast< gum::NodeId >(val3);
  {
    try {
      result = (gum::learning::BNLearner< double > *) &(arg1)->eraseForbiddenArc(SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_eraseForbiddenArc__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  gum::learning::BNLearner< double > *result = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_eraseForbiddenArc" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BNLearner_eraseForbiddenArc" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BNLearner_eraseForbiddenArc" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BNLearner_eraseForbiddenArc" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BNLearner_eraseForbiddenArc" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      result = (gum::learning::BNLearner< double > *) &(arg1)->eraseForbiddenArc((std::string const &)*arg2,(std::string const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_eraseForbiddenArc(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "BNLearner_eraseForbiddenArc", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    PyObject *retobj = _wrap_BNLearner_eraseForbiddenArc__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_2;
    {
      {
        int res = SWIG_AsVal_size_t(argv[2], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_2;
    return _wrap_BNLearner_eraseForbiddenArc__SWIG_1(self, argc, argv);
  }
check_2:
  
  if (argc == 3) {
    PyObject *retobj = _wrap_BNLearner_eraseForbiddenArc__SWIG_2(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'BNLearner_eraseForbiddenArc'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::learning::BNLearner< double >::eraseForbiddenArc(gum::Arc const &)\n"
    "    gum::learning::BNLearner< double >::eraseForbiddenArc(gum::NodeId,gum::NodeId)\n"
    "    gum::learning::BNLearner< double >::eraseForbiddenArc(std::string const &,std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BNLearner_addMandatoryArc__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  gum::Arc *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  gum::learning::BNLearner< double > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_addMandatoryArc" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_gum__Arc,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BNLearner_addMandatoryArc" "', argument " "2"" of type '" "gum::Arc const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BNLearner_addMandatoryArc" "', argument " "2"" of type '" "gum::Arc const &""'"); 
  }
  arg2 = reinterpret_cast< gum::Arc * >(argp2);
  {
    try {
      result = (gum::learning::BNLearner< double > *) &(arg1)->addMandatoryArc((gum::Arc const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_addMandatoryArc__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  gum::NodeId arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  gum::learning::BNLearner< double > *result = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_addMandatoryArc" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BNLearner_addMandatoryArc" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BNLearner_addMandatoryArc" "', argument " "3"" of type '" "gum::NodeId""'");
  } 
  arg3 = static_cast< gum::NodeId >(val3);
  {
    try {
      result = (gum::learning::BNLearner< double > *) &(arg1)->addMandatoryArc(SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_addMandatoryArc__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  gum::learning::BNLearner< double > *result = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_addMandatoryArc" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BNLearner_addMandatoryArc" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BNLearner_addMandatoryArc" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BNLearner_addMandatoryArc" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BNLearner_addMandatoryArc" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      result = (gum::learning::BNLearner< double > *) &(arg1)->addMandatoryArc((std::string const &)*arg2,(std::string const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_addMandatoryArc(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "BNLearner_addMandatoryArc", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    PyObject *retobj = _wrap_BNLearner_addMandatoryArc__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_2;
    {
      {
        int res = SWIG_AsVal_size_t(argv[2], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_2;
    return _wrap_BNLearner_addMandatoryArc__SWIG_1(self, argc, argv);
  }
check_2:
  
  if (argc == 3) {
    PyObject *retobj = _wrap_BNLearner_addMandatoryArc__SWIG_2(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'BNLearner_addMandatoryArc'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::learning::BNLearner< double >::addMandatoryArc(gum::Arc const &)\n"
    "    gum::learning::BNLearner< double >::addMandatoryArc(gum::NodeId,gum::NodeId)\n"
    "    gum::learning::BNLearner< double >::addMandatoryArc(std::string const &,std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BNLearner_eraseMandatoryArc__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  gum::Arc *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  gum::learning::BNLearner< double > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_eraseMandatoryArc" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_gum__Arc,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BNLearner_eraseMandatoryArc" "', argument " "2"" of type '" "gum::Arc const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BNLearner_eraseMandatoryArc" "', argument " "2"" of type '" "gum::Arc const &""'"); 
  }
  arg2 = reinterpret_cast< gum::Arc * >(argp2);
  {
    try {
      result = (gum::learning::BNLearner< double > *) &(arg1)->eraseMandatoryArc((gum::Arc const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_eraseMandatoryArc__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  gum::NodeId arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  gum::learning::BNLearner< double > *result = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_eraseMandatoryArc" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BNLearner_eraseMandatoryArc" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BNLearner_eraseMandatoryArc" "', argument " "3"" of type '" "gum::NodeId""'");
  } 
  arg3 = static_cast< gum::NodeId >(val3);
  {
    try {
      result = (gum::learning::BNLearner< double > *) &(arg1)->eraseMandatoryArc(SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_eraseMandatoryArc__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  gum::learning::BNLearner< double > *result = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_eraseMandatoryArc" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BNLearner_eraseMandatoryArc" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BNLearner_eraseMandatoryArc" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BNLearner_eraseMandatoryArc" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BNLearner_eraseMandatoryArc" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      result = (gum::learning::BNLearner< double > *) &(arg1)->eraseMandatoryArc((std::string const &)*arg2,(std::string const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_eraseMandatoryArc(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "BNLearner_eraseMandatoryArc", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    PyObject *retobj = _wrap_BNLearner_eraseMandatoryArc__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_2;
    {
      {
        int res = SWIG_AsVal_size_t(argv[2], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_2;
    return _wrap_BNLearner_eraseMandatoryArc__SWIG_1(self, argc, argv);
  }
check_2:
  
  if (argc == 3) {
    PyObject *retobj = _wrap_BNLearner_eraseMandatoryArc__SWIG_2(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'BNLearner_eraseMandatoryArc'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::learning::BNLearner< double >::eraseMandatoryArc(gum::Arc const &)\n"
    "    gum::learning::BNLearner< double >::eraseMandatoryArc(gum::NodeId,gum::NodeId)\n"
    "    gum::learning::BNLearner< double >::eraseMandatoryArc(std::string const &,std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BNLearner_addPossibleEdge__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  gum::Edge *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  gum::learning::BNLearner< double > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_addPossibleEdge" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_gum__Edge,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BNLearner_addPossibleEdge" "', argument " "2"" of type '" "gum::Edge const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BNLearner_addPossibleEdge" "', argument " "2"" of type '" "gum::Edge const &""'"); 
  }
  arg2 = reinterpret_cast< gum::Edge * >(argp2);
  {
    try {
      result = (gum::learning::BNLearner< double > *) &(arg1)->addPossibleEdge((gum::Edge const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_addPossibleEdge__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  gum::NodeId arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  gum::learning::BNLearner< double > *result = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_addPossibleEdge" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BNLearner_addPossibleEdge" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BNLearner_addPossibleEdge" "', argument " "3"" of type '" "gum::NodeId""'");
  } 
  arg3 = static_cast< gum::NodeId >(val3);
  {
    try {
      result = (gum::learning::BNLearner< double > *) &(arg1)->addPossibleEdge(SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_addPossibleEdge__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  gum::learning::BNLearner< double > *result = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_addPossibleEdge" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BNLearner_addPossibleEdge" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BNLearner_addPossibleEdge" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BNLearner_addPossibleEdge" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BNLearner_addPossibleEdge" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      result = (gum::learning::BNLearner< double > *) &(arg1)->addPossibleEdge((std::string const &)*arg2,(std::string const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_addPossibleEdge(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "BNLearner_addPossibleEdge", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    PyObject *retobj = _wrap_BNLearner_addPossibleEdge__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_2;
    {
      {
        int res = SWIG_AsVal_size_t(argv[2], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_2;
    return _wrap_BNLearner_addPossibleEdge__SWIG_1(self, argc, argv);
  }
check_2:
  
  if (argc == 3) {
    PyObject *retobj = _wrap_BNLearner_addPossibleEdge__SWIG_2(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'BNLearner_addPossibleEdge'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::learning::BNLearner< double >::addPossibleEdge(gum::Edge const &)\n"
    "    gum::learning::BNLearner< double >::addPossibleEdge(gum::NodeId,gum::NodeId)\n"
    "    gum::learning::BNLearner< double >::addPossibleEdge(std::string const &,std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BNLearner_erasePossibleEdge__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  gum::Edge *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  gum::learning::BNLearner< double > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_erasePossibleEdge" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_gum__Edge,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BNLearner_erasePossibleEdge" "', argument " "2"" of type '" "gum::Edge const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BNLearner_erasePossibleEdge" "', argument " "2"" of type '" "gum::Edge const &""'"); 
  }
  arg2 = reinterpret_cast< gum::Edge * >(argp2);
  {
    try {
      result = (gum::learning::BNLearner< double > *) &(arg1)->erasePossibleEdge((gum::Edge const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_erasePossibleEdge__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  gum::NodeId arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  gum::learning::BNLearner< double > *result = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_erasePossibleEdge" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BNLearner_erasePossibleEdge" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BNLearner_erasePossibleEdge" "', argument " "3"" of type '" "gum::NodeId""'");
  } 
  arg3 = static_cast< gum::NodeId >(val3);
  {
    try {
      result = (gum::learning::BNLearner< double > *) &(arg1)->erasePossibleEdge(SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_erasePossibleEdge__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  gum::learning::BNLearner< double > *result = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_erasePossibleEdge" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BNLearner_erasePossibleEdge" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BNLearner_erasePossibleEdge" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BNLearner_erasePossibleEdge" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BNLearner_erasePossibleEdge" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      result = (gum::learning::BNLearner< double > *) &(arg1)->erasePossibleEdge((std::string const &)*arg2,(std::string const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_erasePossibleEdge(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "BNLearner_erasePossibleEdge", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    PyObject *retobj = _wrap_BNLearner_erasePossibleEdge__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_2;
    {
      {
        int res = SWIG_AsVal_size_t(argv[2], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_2;
    return _wrap_BNLearner_erasePossibleEdge__SWIG_1(self, argc, argv);
  }
check_2:
  
  if (argc == 3) {
    PyObject *retobj = _wrap_BNLearner_erasePossibleEdge__SWIG_2(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'BNLearner_erasePossibleEdge'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::learning::BNLearner< double >::erasePossibleEdge(gum::Edge const &)\n"
    "    gum::learning::BNLearner< double >::erasePossibleEdge(gum::NodeId,gum::NodeId)\n"
    "    gum::learning::BNLearner< double >::erasePossibleEdge(std::string const &,std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BNLearner_setPossibleEdges__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  gum::EdgeSet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  gum::learning::BNLearner< double > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_setPossibleEdges" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_gum__SetT_gum__Edge_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BNLearner_setPossibleEdges" "', argument " "2"" of type '" "gum::EdgeSet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BNLearner_setPossibleEdges" "', argument " "2"" of type '" "gum::EdgeSet const &""'"); 
  }
  arg2 = reinterpret_cast< gum::EdgeSet * >(argp2);
  {
    try {
      result = (gum::learning::BNLearner< double > *) &(arg1)->setPossibleEdges((gum::EdgeSet const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_setPossibleSkeleton(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  gum::UndiGraph *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  gum::learning::BNLearner< double > *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "BNLearner_setPossibleSkeleton", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_setPossibleSkeleton" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_gum__UndiGraph,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BNLearner_setPossibleSkeleton" "', argument " "2"" of type '" "gum::UndiGraph const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BNLearner_setPossibleSkeleton" "', argument " "2"" of type '" "gum::UndiGraph const &""'"); 
  }
  arg2 = reinterpret_cast< gum::UndiGraph * >(argp2);
  {
    try {
      result = (gum::learning::BNLearner< double > *) &(arg1)->setPossibleSkeleton((gum::UndiGraph const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_addNoParentNode__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  gum::learning::BNLearner< double > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_addNoParentNode" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BNLearner_addNoParentNode" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (gum::learning::BNLearner< double > *) &(arg1)->addNoParentNode(SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_addNoParentNode__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  gum::learning::BNLearner< double > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_addNoParentNode" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BNLearner_addNoParentNode" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BNLearner_addNoParentNode" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (gum::learning::BNLearner< double > *) &(arg1)->addNoParentNode((std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_addNoParentNode(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "BNLearner_addNoParentNode", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_BNLearner_addNoParentNode__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_BNLearner_addNoParentNode__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'BNLearner_addNoParentNode'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::learning::BNLearner< double >::addNoParentNode(gum::NodeId)\n"
    "    gum::learning::BNLearner< double >::addNoParentNode(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BNLearner_eraseNoParentNode__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  gum::learning::BNLearner< double > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_eraseNoParentNode" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BNLearner_eraseNoParentNode" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (gum::learning::BNLearner< double > *) &(arg1)->eraseNoParentNode(SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_eraseNoParentNode__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  gum::learning::BNLearner< double > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_eraseNoParentNode" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BNLearner_eraseNoParentNode" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BNLearner_eraseNoParentNode" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (gum::learning::BNLearner< double > *) &(arg1)->eraseNoParentNode((std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_eraseNoParentNode(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "BNLearner_eraseNoParentNode", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_BNLearner_eraseNoParentNode__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_BNLearner_eraseNoParentNode__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'BNLearner_eraseNoParentNode'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::learning::BNLearner< double >::eraseNoParentNode(gum::NodeId)\n"
    "    gum::learning::BNLearner< double >::eraseNoParentNode(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BNLearner_addNoChildrenNode__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  gum::learning::BNLearner< double > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_addNoChildrenNode" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BNLearner_addNoChildrenNode" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (gum::learning::BNLearner< double > *) &(arg1)->addNoChildrenNode(SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_addNoChildrenNode__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  gum::learning::BNLearner< double > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_addNoChildrenNode" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BNLearner_addNoChildrenNode" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BNLearner_addNoChildrenNode" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (gum::learning::BNLearner< double > *) &(arg1)->addNoChildrenNode((std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_addNoChildrenNode(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "BNLearner_addNoChildrenNode", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_BNLearner_addNoChildrenNode__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_BNLearner_addNoChildrenNode__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'BNLearner_addNoChildrenNode'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::learning::BNLearner< double >::addNoChildrenNode(gum::NodeId)\n"
    "    gum::learning::BNLearner< double >::addNoChildrenNode(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BNLearner_eraseNoChildrenNode__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  gum::learning::BNLearner< double > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_eraseNoChildrenNode" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BNLearner_eraseNoChildrenNode" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (gum::learning::BNLearner< double > *) &(arg1)->eraseNoChildrenNode(SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_eraseNoChildrenNode__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  gum::learning::BNLearner< double > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_eraseNoChildrenNode" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BNLearner_eraseNoChildrenNode" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BNLearner_eraseNoChildrenNode" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (gum::learning::BNLearner< double > *) &(arg1)->eraseNoChildrenNode((std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_eraseNoChildrenNode(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "BNLearner_eraseNoChildrenNode", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_BNLearner_eraseNoChildrenNode__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_BNLearner_eraseNoChildrenNode__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'BNLearner_eraseNoChildrenNode'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::learning::BNLearner< double >::eraseNoChildrenNode(gum::NodeId)\n"
    "    gum::learning::BNLearner< double >::eraseNoChildrenNode(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BNLearner_isConstraintBased(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_isConstraintBased" "', argument " "1"" of type '" "gum::learning::BNLearner< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  {
    try {
      result = (bool)((gum::learning::BNLearner< double > const *)arg1)->isConstraintBased();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_isScoreBased(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_isScoreBased" "', argument " "1"" of type '" "gum::learning::BNLearner< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  {
    try {
      result = (bool)((gum::learning::BNLearner< double > const *)arg1)->isScoreBased();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner___repr__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner___repr__" "', argument " "1"" of type '" "gum::learning::BNLearner< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  {
    try {
      result = gum_learning_BNLearner_Sl_double_Sg____repr__((gum::learning::BNLearner< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner___str__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner___str__" "', argument " "1"" of type '" "gum::learning::BNLearner< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  {
    try {
      result = gum_learning_BNLearner_Sl_double_Sg____str__((gum::learning::BNLearner< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_setVerbosity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "BNLearner_setVerbosity", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_setVerbosity" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BNLearner_setVerbosity" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      gum_learning_BNLearner_Sl_double_Sg__setVerbosity(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_setEpsilon(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "BNLearner_setEpsilon", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_setEpsilon" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BNLearner_setEpsilon" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      gum_learning_BNLearner_Sl_double_Sg__setEpsilon(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_setMinEpsilonRate(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "BNLearner_setMinEpsilonRate", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_setMinEpsilonRate" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BNLearner_setMinEpsilonRate" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      gum_learning_BNLearner_Sl_double_Sg__setMinEpsilonRate(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_setMaxIter(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  gum::Size arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "BNLearner_setMaxIter", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_setMaxIter" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BNLearner_setMaxIter" "', argument " "2"" of type '" "gum::Size""'");
  } 
  arg2 = static_cast< gum::Size >(val2);
  {
    try {
      gum_learning_BNLearner_Sl_double_Sg__setMaxIter(arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_setMaxTime(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "BNLearner_setMaxTime", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_setMaxTime" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BNLearner_setMaxTime" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      gum_learning_BNLearner_Sl_double_Sg__setMaxTime(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_setPeriodSize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  gum::Size arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "BNLearner_setPeriodSize", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_setPeriodSize" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BNLearner_setPeriodSize" "', argument " "2"" of type '" "gum::Size""'");
  } 
  arg2 = static_cast< gum::Size >(val2);
  {
    try {
      gum_learning_BNLearner_Sl_double_Sg__setPeriodSize(arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_verbosity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_verbosity" "', argument " "1"" of type '" "gum::learning::BNLearner< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  {
    try {
      result = (bool)gum_learning_BNLearner_Sl_double_Sg__verbosity((gum::learning::BNLearner< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_epsilon(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_epsilon" "', argument " "1"" of type '" "gum::learning::BNLearner< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  {
    try {
      result = (double)gum_learning_BNLearner_Sl_double_Sg__epsilon((gum::learning::BNLearner< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_minEpsilonRate(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_minEpsilonRate" "', argument " "1"" of type '" "gum::learning::BNLearner< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  {
    try {
      result = (double)gum_learning_BNLearner_Sl_double_Sg__minEpsilonRate((gum::learning::BNLearner< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_maxIter(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::Size result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_maxIter" "', argument " "1"" of type '" "gum::learning::BNLearner< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  {
    try {
      result = gum_learning_BNLearner_Sl_double_Sg__maxIter((gum::learning::BNLearner< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_maxTime(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_maxTime" "', argument " "1"" of type '" "gum::learning::BNLearner< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  {
    try {
      result = (double)gum_learning_BNLearner_Sl_double_Sg__maxTime((gum::learning::BNLearner< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_periodSize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::Size result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_periodSize" "', argument " "1"" of type '" "gum::learning::BNLearner< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  {
    try {
      result = gum_learning_BNLearner_Sl_double_Sg__periodSize((gum::learning::BNLearner< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_nbrIterations(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::Size result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_nbrIterations" "', argument " "1"" of type '" "gum::learning::BNLearner< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  {
    try {
      result = gum_learning_BNLearner_Sl_double_Sg__nbrIterations((gum::learning::BNLearner< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_currentTime(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_currentTime" "', argument " "1"" of type '" "gum::learning::BNLearner< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  {
    try {
      result = (double)gum_learning_BNLearner_Sl_double_Sg__currentTime((gum::learning::BNLearner< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_messageApproximationScheme(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_messageApproximationScheme" "', argument " "1"" of type '" "gum::learning::BNLearner< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  {
    try {
      result = gum_learning_BNLearner_Sl_double_Sg__messageApproximationScheme((gum::learning::BNLearner< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_history(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< double,std::allocator< double > > *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_history" "', argument " "1"" of type '" "gum::learning::BNLearner< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  {
    try {
      result = (std::vector< double,std::allocator< double > > *) &gum_learning_BNLearner_Sl_double_Sg__history((gum::learning::BNLearner< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< double,std::allocator< double > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner__asIApproximationSchemeConfiguration(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::IApproximationSchemeConfiguration *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner__asIApproximationSchemeConfiguration" "', argument " "1"" of type '" "gum::learning::BNLearner< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  {
    try {
      result = (gum::IApproximationSchemeConfiguration *) &gum_learning_BNLearner_Sl_double_Sg___asIApproximationSchemeConfiguration((gum::learning::BNLearner< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__IApproximationSchemeConfiguration, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_learnDAG(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::DAG result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_learnDAG" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  {
    try {
      result = gum_learning_BNLearner_Sl_double_Sg__learnDAG(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::DAG(result)), SWIGTYPE_p_gum__DAG, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_learnPDAG(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::PDAG result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_learnPDAG" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  {
    try {
      result = gum_learning_BNLearner_Sl_double_Sg__learnPDAG(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::PDAG(result)), SWIGTYPE_p_gum__PDAG, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_names(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::string,std::allocator< std::string > > *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_names" "', argument " "1"" of type '" "gum::learning::BNLearner< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  {
    try {
      result = (std::vector< std::string,std::allocator< std::string > > *) &gum_learning_BNLearner_Sl_double_Sg__names((gum::learning::BNLearner< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< std::string,std::allocator< std::string > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_idFromName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  gum::NodeId result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "BNLearner_idFromName", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_idFromName" "', argument " "1"" of type '" "gum::learning::BNLearner< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BNLearner_idFromName" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BNLearner_idFromName" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = gum_learning_BNLearner_Sl_double_Sg__idFromName((gum::learning::BNLearner< double > const *)arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_nameFromId(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  std::string *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "BNLearner_nameFromId", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_nameFromId" "', argument " "1"" of type '" "gum::learning::BNLearner< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BNLearner_nameFromId" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (std::string *) &gum_learning_BNLearner_Sl_double_Sg__nameFromId((gum::learning::BNLearner< double > const *)arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_setDatabaseWeight(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "BNLearner_setDatabaseWeight", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_setDatabaseWeight" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BNLearner_setDatabaseWeight" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      gum_learning_BNLearner_Sl_double_Sg__setDatabaseWeight(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_setRecordWeight(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  std::size_t arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "BNLearner_setRecordWeight", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_setRecordWeight" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BNLearner_setRecordWeight" "', argument " "2"" of type '" "std::size_t""'");
  } 
  arg2 = static_cast< std::size_t >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BNLearner_setRecordWeight" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      gum_learning_BNLearner_Sl_double_Sg__setRecordWeight(arg1,SWIG_STD_MOVE(arg2),arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_databaseWeight(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_databaseWeight" "', argument " "1"" of type '" "gum::learning::BNLearner< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  {
    try {
      result = (double)gum_learning_BNLearner_Sl_double_Sg__databaseWeight((gum::learning::BNLearner< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_recordWeight(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  std::size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "BNLearner_recordWeight", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_recordWeight" "', argument " "1"" of type '" "gum::learning::BNLearner< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BNLearner_recordWeight" "', argument " "2"" of type '" "std::size_t""'");
  } 
  arg2 = static_cast< std::size_t >(val2);
  {
    try {
      result = (double)gum_learning_BNLearner_Sl_double_Sg__recordWeight((gum::learning::BNLearner< double > const *)arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_hasMissingValues(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_hasMissingValues" "', argument " "1"" of type '" "gum::learning::BNLearner< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  {
    try {
      result = (bool)gum_learning_BNLearner_Sl_double_Sg__hasMissingValues((gum::learning::BNLearner< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_logLikelihood__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  std::vector< gum::NodeId,std::allocator< gum::NodeId > > *arg2 = 0 ;
  std::vector< gum::NodeId,std::allocator< gum::NodeId > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  double result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_logLikelihood" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_std__size_t_std__allocatorT_std__size_t_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BNLearner_logLikelihood" "', argument " "2"" of type '" "std::vector< gum::NodeId,std::allocator< gum::NodeId > > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BNLearner_logLikelihood" "', argument " "2"" of type '" "std::vector< gum::NodeId,std::allocator< gum::NodeId > > const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< gum::NodeId,std::allocator< gum::NodeId > > * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_std__vectorT_std__size_t_std__allocatorT_std__size_t_t_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BNLearner_logLikelihood" "', argument " "3"" of type '" "std::vector< gum::NodeId,std::allocator< gum::NodeId > > const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BNLearner_logLikelihood" "', argument " "3"" of type '" "std::vector< gum::NodeId,std::allocator< gum::NodeId > > const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< gum::NodeId,std::allocator< gum::NodeId > > * >(argp3);
  {
    try {
      result = (double)gum_learning_BNLearner_Sl_double_Sg__logLikelihood__SWIG_0(arg1,(std::vector< std::size_t,std::allocator< std::size_t > > const &)*arg2,(std::vector< std::size_t,std::allocator< std::size_t > > const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_logLikelihood__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  std::vector< gum::NodeId,std::allocator< gum::NodeId > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_logLikelihood" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_std__size_t_std__allocatorT_std__size_t_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BNLearner_logLikelihood" "', argument " "2"" of type '" "std::vector< gum::NodeId,std::allocator< gum::NodeId > > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BNLearner_logLikelihood" "', argument " "2"" of type '" "std::vector< gum::NodeId,std::allocator< gum::NodeId > > const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< gum::NodeId,std::allocator< gum::NodeId > > * >(argp2);
  {
    try {
      result = (double)gum_learning_BNLearner_Sl_double_Sg__logLikelihood__SWIG_1(arg1,(std::vector< std::size_t,std::allocator< std::size_t > > const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_logLikelihood__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  double result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_logLikelihood" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BNLearner_logLikelihood" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BNLearner_logLikelihood" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BNLearner_logLikelihood" "', argument " "3"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BNLearner_logLikelihood" "', argument " "3"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      result = (double)gum_learning_BNLearner_Sl_double_Sg__logLikelihood__SWIG_2(arg1,(std::vector< std::string,std::allocator< std::string > > const &)*arg2,(std::vector< std::string,std::allocator< std::string > > const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_logLikelihood__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  double result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_logLikelihood" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BNLearner_logLikelihood" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BNLearner_logLikelihood" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (double)gum_learning_BNLearner_Sl_double_Sg__logLikelihood__SWIG_3(arg1,(std::vector< std::string,std::allocator< std::string > > const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_logLikelihood(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "BNLearner_logLikelihood", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__vectorT_std__size_t_std__allocatorT_std__size_t_t_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_1;
    return _wrap_BNLearner_logLikelihood__SWIG_1(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_BNLearner_logLikelihood__SWIG_3(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    int _v = 0;
    {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__vectorT_std__size_t_std__allocatorT_std__size_t_t_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_3;
    {
      int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__vectorT_std__size_t_std__allocatorT_std__size_t_t_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_3;
    return _wrap_BNLearner_logLikelihood__SWIG_0(self, argc, argv);
  }
check_3:
  
  if (argc == 3) {
    PyObject *retobj = _wrap_BNLearner_logLikelihood__SWIG_2(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'BNLearner_logLikelihood'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::learning::BNLearner< double >::logLikelihood(std::vector< gum::NodeId,std::allocator< gum::NodeId > > const &,std::vector< gum::NodeId,std::allocator< gum::NodeId > > const &)\n"
    "    gum::learning::BNLearner< double >::logLikelihood(std::vector< gum::NodeId,std::allocator< gum::NodeId > > const &)\n"
    "    gum::learning::BNLearner< double >::logLikelihood(std::vector< std::string,std::allocator< std::string > > const &,std::vector< std::string,std::allocator< std::string > > const &)\n"
    "    gum::learning::BNLearner< double >::logLikelihood(std::vector< std::string,std::allocator< std::string > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BNLearner_score__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  std::vector< gum::NodeId,std::allocator< gum::NodeId > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  double result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_score" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BNLearner_score" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_std__vectorT_std__size_t_std__allocatorT_std__size_t_t_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BNLearner_score" "', argument " "3"" of type '" "std::vector< gum::NodeId,std::allocator< gum::NodeId > > const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BNLearner_score" "', argument " "3"" of type '" "std::vector< gum::NodeId,std::allocator< gum::NodeId > > const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< gum::NodeId,std::allocator< gum::NodeId > > * >(argp3);
  {
    try {
      result = (double)gum_learning_BNLearner_Sl_double_Sg__score__SWIG_0(arg1,SWIG_STD_MOVE(arg2),(std::vector< std::size_t,std::allocator< std::size_t > > const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_score__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  double result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_score" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BNLearner_score" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (double)gum_learning_BNLearner_Sl_double_Sg__score__SWIG_1(arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_score__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  double result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_score" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BNLearner_score" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BNLearner_score" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BNLearner_score" "', argument " "3"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BNLearner_score" "', argument " "3"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      result = (double)gum_learning_BNLearner_Sl_double_Sg__score__SWIG_2(arg1,(std::string const &)*arg2,(std::vector< std::string,std::allocator< std::string > > const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_score__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  double result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_score" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BNLearner_score" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BNLearner_score" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (double)gum_learning_BNLearner_Sl_double_Sg__score__SWIG_3(arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_score(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "BNLearner_score", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_BNLearner_score__SWIG_1(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_BNLearner_score__SWIG_3(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_3;
    {
      int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__vectorT_std__size_t_std__allocatorT_std__size_t_t_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_3;
    return _wrap_BNLearner_score__SWIG_0(self, argc, argv);
  }
check_3:
  
  if (argc == 3) {
    PyObject *retobj = _wrap_BNLearner_score__SWIG_2(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'BNLearner_score'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::learning::BNLearner< double >::score(gum::NodeId,std::vector< gum::NodeId,std::allocator< gum::NodeId > > const &)\n"
    "    gum::learning::BNLearner< double >::score(gum::NodeId)\n"
    "    gum::learning::BNLearner< double >::score(std::string const &,std::vector< std::string,std::allocator< std::string > > const &)\n"
    "    gum::learning::BNLearner< double >::score(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BNLearner_mutualInformation__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  gum::NodeId arg3 ;
  std::vector< gum::NodeId,std::allocator< gum::NodeId > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  double result;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_mutualInformation" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BNLearner_mutualInformation" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BNLearner_mutualInformation" "', argument " "3"" of type '" "gum::NodeId""'");
  } 
  arg3 = static_cast< gum::NodeId >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_std__vectorT_std__size_t_std__allocatorT_std__size_t_t_t,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "BNLearner_mutualInformation" "', argument " "4"" of type '" "std::vector< gum::NodeId,std::allocator< gum::NodeId > > const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BNLearner_mutualInformation" "', argument " "4"" of type '" "std::vector< gum::NodeId,std::allocator< gum::NodeId > > const &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< gum::NodeId,std::allocator< gum::NodeId > > * >(argp4);
  {
    try {
      result = (double)gum_learning_BNLearner_Sl_double_Sg__mutualInformation__SWIG_0(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(std::vector< std::size_t,std::allocator< std::size_t > > const &)*arg4);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_mutualInformation__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  gum::NodeId arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  double result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_mutualInformation" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BNLearner_mutualInformation" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BNLearner_mutualInformation" "', argument " "3"" of type '" "gum::NodeId""'");
  } 
  arg3 = static_cast< gum::NodeId >(val3);
  {
    try {
      result = (double)gum_learning_BNLearner_Sl_double_Sg__mutualInformation__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_mutualInformation__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  int res4 = SWIG_OLDOBJ ;
  double result;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_mutualInformation" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BNLearner_mutualInformation" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BNLearner_mutualInformation" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BNLearner_mutualInformation" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BNLearner_mutualInformation" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "BNLearner_mutualInformation" "', argument " "4"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BNLearner_mutualInformation" "', argument " "4"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      result = (double)gum_learning_BNLearner_Sl_double_Sg__mutualInformation__SWIG_2(arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::vector< std::string,std::allocator< std::string > > const &)*arg4);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_mutualInformation__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  double result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_mutualInformation" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BNLearner_mutualInformation" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BNLearner_mutualInformation" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BNLearner_mutualInformation" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BNLearner_mutualInformation" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      result = (double)gum_learning_BNLearner_Sl_double_Sg__mutualInformation__SWIG_3(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_mutualInformation(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "BNLearner_mutualInformation", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    {
      {
        int res = SWIG_AsVal_size_t(argv[2], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_BNLearner_mutualInformation__SWIG_1(self, argc, argv);
  }
check_1:
  
  if (argc == 3) {
    PyObject *retobj = _wrap_BNLearner_mutualInformation__SWIG_3(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 4) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_3;
    {
      {
        int res = SWIG_AsVal_size_t(argv[2], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_3;
    {
      int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_std__vectorT_std__size_t_std__allocatorT_std__size_t_t_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_3;
    return _wrap_BNLearner_mutualInformation__SWIG_0(self, argc, argv);
  }
check_3:
  
  if (argc == 4) {
    PyObject *retobj = _wrap_BNLearner_mutualInformation__SWIG_2(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'BNLearner_mutualInformation'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::learning::BNLearner< double >::mutualInformation(gum::NodeId,gum::NodeId,std::vector< gum::NodeId,std::allocator< gum::NodeId > > const &)\n"
    "    gum::learning::BNLearner< double >::mutualInformation(gum::NodeId,gum::NodeId)\n"
    "    gum::learning::BNLearner< double >::mutualInformation(std::string const &,std::string const &,std::vector< std::string,std::allocator< std::string > > const &)\n"
    "    gum::learning::BNLearner< double >::mutualInformation(std::string const &,std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BNLearner_correctedMutualInformation__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  gum::NodeId arg3 ;
  std::vector< gum::NodeId,std::allocator< gum::NodeId > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  double result;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_correctedMutualInformation" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BNLearner_correctedMutualInformation" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BNLearner_correctedMutualInformation" "', argument " "3"" of type '" "gum::NodeId""'");
  } 
  arg3 = static_cast< gum::NodeId >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_std__vectorT_std__size_t_std__allocatorT_std__size_t_t_t,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "BNLearner_correctedMutualInformation" "', argument " "4"" of type '" "std::vector< gum::NodeId,std::allocator< gum::NodeId > > const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BNLearner_correctedMutualInformation" "', argument " "4"" of type '" "std::vector< gum::NodeId,std::allocator< gum::NodeId > > const &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< gum::NodeId,std::allocator< gum::NodeId > > * >(argp4);
  {
    try {
      result = (double)gum_learning_BNLearner_Sl_double_Sg__correctedMutualInformation__SWIG_0(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(std::vector< std::size_t,std::allocator< std::size_t > > const &)*arg4);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_correctedMutualInformation__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  gum::NodeId arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  double result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_correctedMutualInformation" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BNLearner_correctedMutualInformation" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BNLearner_correctedMutualInformation" "', argument " "3"" of type '" "gum::NodeId""'");
  } 
  arg3 = static_cast< gum::NodeId >(val3);
  {
    try {
      result = (double)gum_learning_BNLearner_Sl_double_Sg__correctedMutualInformation__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_correctedMutualInformation__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  int res4 = SWIG_OLDOBJ ;
  double result;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_correctedMutualInformation" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BNLearner_correctedMutualInformation" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BNLearner_correctedMutualInformation" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BNLearner_correctedMutualInformation" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BNLearner_correctedMutualInformation" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "BNLearner_correctedMutualInformation" "', argument " "4"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BNLearner_correctedMutualInformation" "', argument " "4"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      result = (double)gum_learning_BNLearner_Sl_double_Sg__correctedMutualInformation__SWIG_2(arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::vector< std::string,std::allocator< std::string > > const &)*arg4);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_correctedMutualInformation__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  double result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_correctedMutualInformation" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BNLearner_correctedMutualInformation" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BNLearner_correctedMutualInformation" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BNLearner_correctedMutualInformation" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BNLearner_correctedMutualInformation" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      result = (double)gum_learning_BNLearner_Sl_double_Sg__correctedMutualInformation__SWIG_3(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_correctedMutualInformation(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "BNLearner_correctedMutualInformation", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    {
      {
        int res = SWIG_AsVal_size_t(argv[2], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_BNLearner_correctedMutualInformation__SWIG_1(self, argc, argv);
  }
check_1:
  
  if (argc == 3) {
    PyObject *retobj = _wrap_BNLearner_correctedMutualInformation__SWIG_3(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 4) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_3;
    {
      {
        int res = SWIG_AsVal_size_t(argv[2], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_3;
    {
      int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_std__vectorT_std__size_t_std__allocatorT_std__size_t_t_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_3;
    return _wrap_BNLearner_correctedMutualInformation__SWIG_0(self, argc, argv);
  }
check_3:
  
  if (argc == 4) {
    PyObject *retobj = _wrap_BNLearner_correctedMutualInformation__SWIG_2(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'BNLearner_correctedMutualInformation'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::learning::BNLearner< double >::correctedMutualInformation(gum::NodeId,gum::NodeId,std::vector< gum::NodeId,std::allocator< gum::NodeId > > const &)\n"
    "    gum::learning::BNLearner< double >::correctedMutualInformation(gum::NodeId,gum::NodeId)\n"
    "    gum::learning::BNLearner< double >::correctedMutualInformation(std::string const &,std::string const &,std::vector< std::string,std::allocator< std::string > > const &)\n"
    "    gum::learning::BNLearner< double >::correctedMutualInformation(std::string const &,std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BNLearner_rawPseudoCount__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  std::vector< gum::NodeId,std::allocator< gum::NodeId > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::vector< double,std::allocator< double > > result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_rawPseudoCount" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_std__size_t_std__allocatorT_std__size_t_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BNLearner_rawPseudoCount" "', argument " "2"" of type '" "std::vector< gum::NodeId,std::allocator< gum::NodeId > > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BNLearner_rawPseudoCount" "', argument " "2"" of type '" "std::vector< gum::NodeId,std::allocator< gum::NodeId > > const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< gum::NodeId,std::allocator< gum::NodeId > > * >(argp2);
  {
    try {
      result = gum_learning_BNLearner_Sl_double_Sg__rawPseudoCount__SWIG_0(arg1,(std::vector< std::size_t,std::allocator< std::size_t > > const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< double,std::allocator< double > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_rawPseudoCount__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  std::vector< double,std::allocator< double > > result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_rawPseudoCount" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BNLearner_rawPseudoCount" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BNLearner_rawPseudoCount" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = gum_learning_BNLearner_Sl_double_Sg__rawPseudoCount__SWIG_1(arg1,(std::vector< std::string,std::allocator< std::string > > const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< double,std::allocator< double > > >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_rawPseudoCount(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "BNLearner_rawPseudoCount", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__vectorT_std__size_t_std__allocatorT_std__size_t_t_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_1;
    return _wrap_BNLearner_rawPseudoCount__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_BNLearner_rawPseudoCount__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'BNLearner_rawPseudoCount'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::learning::BNLearner< double >::rawPseudoCount(std::vector< gum::NodeId,std::allocator< gum::NodeId > > const &)\n"
    "    gum::learning::BNLearner< double >::rawPseudoCount(std::vector< std::string,std::allocator< std::string > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BNLearner_nbRows(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::Size result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_nbRows" "', argument " "1"" of type '" "gum::learning::BNLearner< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  {
    try {
      result = gum_learning_BNLearner_Sl_double_Sg__nbRows((gum::learning::BNLearner< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_nbCols(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::Size result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_nbCols" "', argument " "1"" of type '" "gum::learning::BNLearner< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  {
    try {
      result = gum_learning_BNLearner_Sl_double_Sg__nbCols((gum::learning::BNLearner< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_domainSize__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  gum::Size result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_domainSize" "', argument " "1"" of type '" "gum::learning::BNLearner< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BNLearner_domainSize" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = gum_learning_BNLearner_Sl_double_Sg__domainSize__SWIG_0((gum::learning::BNLearner< double > const *)arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_domainSize__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  gum::Size result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_domainSize" "', argument " "1"" of type '" "gum::learning::BNLearner< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BNLearner_domainSize" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BNLearner_domainSize" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = gum_learning_BNLearner_Sl_double_Sg__domainSize__SWIG_1((gum::learning::BNLearner< double > const *)arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_domainSize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "BNLearner_domainSize", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_BNLearner_domainSize__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_BNLearner_domainSize__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'BNLearner_domainSize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::learning::BNLearner< double >::domainSize(gum::NodeId) const\n"
    "    gum::learning::BNLearner< double >::domainSize(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BNLearner_setNumberOfThreads(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  gum::Size arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "BNLearner_setNumberOfThreads", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_setNumberOfThreads" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BNLearner_setNumberOfThreads" "', argument " "2"" of type '" "gum::Size""'");
  } 
  arg2 = static_cast< gum::Size >(val2);
  {
    try {
      gum_learning_BNLearner_Sl_double_Sg__setNumberOfThreads(arg1,SWIG_STD_MOVE(arg2));
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_getNumberOfThreads(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  gum::Size result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_getNumberOfThreads" "', argument " "1"" of type '" "gum::learning::BNLearner< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  {
    try {
      result = gum_learning_BNLearner_Sl_double_Sg__getNumberOfThreads((gum::learning::BNLearner< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_isGumNumberOfThreadsOverriden(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_isGumNumberOfThreadsOverriden" "', argument " "1"" of type '" "gum::learning::BNLearner< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  {
    try {
      result = (bool)gum_learning_BNLearner_Sl_double_Sg__isGumNumberOfThreadsOverriden((gum::learning::BNLearner< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_chi2__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  int res4 = SWIG_OLDOBJ ;
  PyObject *result = 0 ;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_chi2" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BNLearner_chi2" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BNLearner_chi2" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BNLearner_chi2" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BNLearner_chi2" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "BNLearner_chi2" "', argument " "4"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BNLearner_chi2" "', argument " "4"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      result = (PyObject *)gum_learning_BNLearner_Sl_double_Sg__chi2__SWIG_0(arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::vector< std::string,std::allocator< std::string > > const &)*arg4);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_chi2__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  PyObject *result = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_chi2" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BNLearner_chi2" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BNLearner_chi2" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BNLearner_chi2" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BNLearner_chi2" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      result = (PyObject *)gum_learning_BNLearner_Sl_double_Sg__chi2__SWIG_0(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_chi2(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "BNLearner_chi2", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    PyObject *retobj = _wrap_BNLearner_chi2__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 4) {
    PyObject *retobj = _wrap_BNLearner_chi2__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'BNLearner_chi2'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::learning::BNLearner< double >::chi2(std::string const &,std::string const &,std::vector< std::string,std::allocator< std::string > > const &)\n"
    "    gum::learning::BNLearner< double >::chi2(std::string const &,std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BNLearner_G2__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  int res4 = SWIG_OLDOBJ ;
  PyObject *result = 0 ;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_G2" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BNLearner_G2" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BNLearner_G2" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BNLearner_G2" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BNLearner_G2" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "BNLearner_G2" "', argument " "4"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BNLearner_G2" "', argument " "4"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      result = (PyObject *)gum_learning_BNLearner_Sl_double_Sg__G2__SWIG_0(arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::vector< std::string,std::allocator< std::string > > const &)*arg4);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_G2__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  PyObject *result = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_G2" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BNLearner_G2" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BNLearner_G2" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BNLearner_G2" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "BNLearner_G2" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      result = (PyObject *)gum_learning_BNLearner_Sl_double_Sg__G2__SWIG_0(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_G2(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "BNLearner_G2", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    PyObject *retobj = _wrap_BNLearner_G2__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 4) {
    PyObject *retobj = _wrap_BNLearner_G2__SWIG_0(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'BNLearner_G2'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::learning::BNLearner< double >::G2(std::string const &,std::string const &,std::vector< std::string,std::allocator< std::string > > const &)\n"
    "    gum::learning::BNLearner< double >::G2(std::string const &,std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BNLearner_setSliceOrder__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  PyObject *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gum::learning::BNLearner< double > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_setSliceOrder" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  arg2 = swig_obj[1];
  {
    try {
      result = (gum::learning::BNLearner< double > *) &gum_learning_BNLearner_Sl_double_Sg__setSliceOrder__SWIG_2(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_setSliceOrder(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "BNLearner_setSliceOrder", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_gum__NodePropertyT_std__size_t_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_1;
    return _wrap_BNLearner_setSliceOrder__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__vectorT_std__vectorT_std__string_t_std__allocatorT_std__vectorT_std__string_t_t_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_2;
    return _wrap_BNLearner_setSliceOrder__SWIG_1(self, argc, argv);
  }
check_2:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_BNLearner_setSliceOrder__SWIG_2(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'BNLearner_setSliceOrder'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::learning::BNLearner< double >::setSliceOrder(gum::NodeProperty< gum::NodeId > const &)\n"
    "    gum::learning::BNLearner< double >::setSliceOrder(std::vector< std::vector< std::string,std::allocator< std::string > >,std::allocator< std::vector< std::string,std::allocator< std::string > > > > const &)\n"
    "    gum::learning::BNLearner< double >::setSliceOrder(PyObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BNLearner_useK2__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  PyObject *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gum::learning::BNLearner< double > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_useK2" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  arg2 = swig_obj[1];
  {
    try {
      result = (gum::learning::BNLearner< double > *) &gum_learning_BNLearner_Sl_double_Sg__useK2__SWIG_2(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_useK2(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "BNLearner_useK2", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_gum__SequenceT_std__size_t_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_1;
    return _wrap_BNLearner_useK2__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__vectorT_std__size_t_std__allocatorT_std__size_t_t_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_2;
    return _wrap_BNLearner_useK2__SWIG_1(self, argc, argv);
  }
check_2:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_BNLearner_useK2__SWIG_2(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'BNLearner_useK2'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::learning::BNLearner< double >::useK2(gum::Sequence< gum::NodeId > const &)\n"
    "    gum::learning::BNLearner< double >::useK2(std::vector< gum::NodeId,std::allocator< gum::NodeId > > const &)\n"
    "    gum::learning::BNLearner< double >::useK2(PyObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BNLearner_latentVariables(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_latentVariables" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  {
    try {
      result = (PyObject *)gum_learning_BNLearner_Sl_double_Sg__latentVariables(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_state(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_state" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  {
    try {
      result = (PyObject *)gum_learning_BNLearner_Sl_double_Sg__state(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_setPossibleEdges__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  PyObject *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_setPossibleEdges" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  arg2 = swig_obj[1];
  {
    try {
      gum_learning_BNLearner_Sl_double_Sg__setPossibleEdges__SWIG_1(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_setPossibleEdges(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "BNLearner_setPossibleEdges", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_gum__SetT_gum__Edge_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_1;
    return _wrap_BNLearner_setPossibleEdges__SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_BNLearner_setPossibleEdges__SWIG_1(self, argc, argv);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'BNLearner_setPossibleEdges'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::learning::BNLearner< double >::setPossibleEdges(gum::EdgeSet const &)\n"
    "    gum::learning::BNLearner< double >::setPossibleEdges(PyObject *)\n");
  return 0;
}


SWIGINTERN PyObject *BNLearner_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj = NULL;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gum__learning__BNLearnerT_double_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *BNLearner_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

static PyMethodDef SwigMethods[] = {
	 { "delete_SwigPyIterator", _wrap_delete_SwigPyIterator, METH_O, NULL},
	 { "SwigPyIterator_value", _wrap_SwigPyIterator_value, METH_O, NULL},
	 { "SwigPyIterator_incr", _wrap_SwigPyIterator_incr, METH_VARARGS, NULL},
	 { "SwigPyIterator_decr", _wrap_SwigPyIterator_decr, METH_VARARGS, NULL},
	 { "SwigPyIterator_distance", _wrap_SwigPyIterator_distance, METH_VARARGS, NULL},
	 { "SwigPyIterator_equal", _wrap_SwigPyIterator_equal, METH_VARARGS, NULL},
	 { "SwigPyIterator_copy", _wrap_SwigPyIterator_copy, METH_O, NULL},
	 { "SwigPyIterator_next", _wrap_SwigPyIterator_next, METH_O, NULL},
	 { "SwigPyIterator___next__", _wrap_SwigPyIterator___next__, METH_O, NULL},
	 { "SwigPyIterator_previous", _wrap_SwigPyIterator_previous, METH_O, NULL},
	 { "SwigPyIterator_advance", _wrap_SwigPyIterator_advance, METH_VARARGS, NULL},
	 { "SwigPyIterator___eq__", _wrap_SwigPyIterator___eq__, METH_VARARGS, NULL},
	 { "SwigPyIterator___ne__", _wrap_SwigPyIterator___ne__, METH_VARARGS, NULL},
	 { "SwigPyIterator___iadd__", _wrap_SwigPyIterator___iadd__, METH_VARARGS, NULL},
	 { "SwigPyIterator___isub__", _wrap_SwigPyIterator___isub__, METH_VARARGS, NULL},
	 { "SwigPyIterator___add__", _wrap_SwigPyIterator___add__, METH_VARARGS, NULL},
	 { "SwigPyIterator___sub__", _wrap_SwigPyIterator___sub__, METH_VARARGS, NULL},
	 { "SwigPyIterator_swigregister", SwigPyIterator_swigregister, METH_O, NULL},
	 { "new_PythonBNListener", _wrap_new_PythonBNListener, METH_VARARGS, "\n"
		"\n"
		"Listener for Bayesian Network's modifications. This listener is notified when the structure of the BN is changed.\n"
		"\n"
		"PythonBNListener(bn:gum.BayesNet,vnm:gum.VariableNodeMap) -> PythonBNListener\n"
		"    default constructor\n"
		"\n"
		"Note\n"
		"----\n"
		"    This class est mainly automatically instantiated using the method gum.BayesNet.addStructureListener.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"bn : BaysNet\n"
		"    The bayes net to listen to\n"
		"vnm : VarNodeMap\n"
		"    A translation unit between id of node and name of variable (usually : bn.variableNodeMap()).\n"
		"\n"
		""},
	 { "delete_PythonBNListener", _wrap_delete_PythonBNListener, METH_O, NULL},
	 { "PythonBNListener_whenNodeAdded", _wrap_PythonBNListener_whenNodeAdded, METH_VARARGS, NULL},
	 { "PythonBNListener_whenNodeDeleted", _wrap_PythonBNListener_whenNodeDeleted, METH_VARARGS, NULL},
	 { "PythonBNListener_whenArcAdded", _wrap_PythonBNListener_whenArcAdded, METH_VARARGS, NULL},
	 { "PythonBNListener_whenArcDeleted", _wrap_PythonBNListener_whenArcDeleted, METH_VARARGS, NULL},
	 { "PythonBNListener_setWhenArcAdded", _wrap_PythonBNListener_setWhenArcAdded, METH_VARARGS, "\n"
		"\n"
		"Add the listener in parameter to the list of existing ones for adding an arc.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"pyfunc : lambda expression\n"
		"    a function (i:int,j:int) called when when an arc (i,j) is added\n"
		"\n"
		""},
	 { "PythonBNListener_setWhenArcDeleted", _wrap_PythonBNListener_setWhenArcDeleted, METH_VARARGS, "\n"
		"\n"
		"Add the listener in parameter to the list of existing ones for deleting an arc.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"pyfunc : lambda expression\n"
		"    a function (i:int,j:int) called when when an arc (i,j) is removed\n"
		"\n"
		""},
	 { "PythonBNListener_setWhenNodeAdded", _wrap_PythonBNListener_setWhenNodeAdded, METH_VARARGS, "\n"
		"\n"
		"Add the listener in parameter to the list of existing ones for adding a node.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"pyfunc : lambda expression\n"
		"    a function (i:int,s:str) called when a node of id i and name s is added.\n"
		"\n"
		""},
	 { "PythonBNListener_setWhenNodeDeleted", _wrap_PythonBNListener_setWhenNodeDeleted, METH_VARARGS, "\n"
		"\n"
		"Add the listener in parameter to the list of existing ones for deleting an arc.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"pyfunc : lambda expression\n"
		"    a function (i:int) called when a node of id i and name s is removed.\n"
		"\n"
		""},
	 { "PythonBNListener_swigregister", PythonBNListener_swigregister, METH_O, NULL},
	 { "PythonBNListener_swiginit", PythonBNListener_swiginit, METH_VARARGS, NULL},
	 { "PythonLoadListener_whenLoading", _wrap_PythonLoadListener_whenLoading, METH_VARARGS, NULL},
	 { "PythonLoadListener_setPythonListener", _wrap_PythonLoadListener_setPythonListener, METH_VARARGS, "\n"
		"\n"
		"\n"
		"\n"
		""},
	 { "new_PythonLoadListener", _wrap_new_PythonLoadListener, METH_NOARGS, NULL},
	 { "delete_PythonLoadListener", _wrap_delete_PythonLoadListener, METH_O, NULL},
	 { "PythonLoadListener_swigregister", PythonLoadListener_swigregister, METH_O, NULL},
	 { "PythonLoadListener_swiginit", PythonLoadListener_swiginit, METH_VARARGS, NULL},
	 { "_fillLoadListeners_", _wrap__fillLoadListeners_, METH_VARARGS, NULL},
	 { "new_PythonApproximationListener", _wrap_new_PythonApproximationListener, METH_O, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"algo : IApproximationSchemeConfiguration\n"
		"	an approxmation scheme\n"
		"\n"
		""},
	 { "delete_PythonApproximationListener", _wrap_delete_PythonApproximationListener, METH_O, NULL},
	 { "PythonApproximationListener_whenProgress", _wrap_PythonApproximationListener_whenProgress, METH_VARARGS, NULL},
	 { "PythonApproximationListener_whenStop", _wrap_PythonApproximationListener_whenStop, METH_VARARGS, NULL},
	 { "PythonApproximationListener_setWhenProgress", _wrap_PythonApproximationListener_setWhenProgress, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"pyfunc\n"
		"	the function to execute\n"
		"\n"
		""},
	 { "PythonApproximationListener_setWhenStop", _wrap_PythonApproximationListener_setWhenStop, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"pyfunc\n"
		"	the function to execute\n"
		"\n"
		""},
	 { "PythonApproximationListener_swigregister", PythonApproximationListener_swigregister, METH_O, NULL},
	 { "PythonApproximationListener_swiginit", PythonApproximationListener_swiginit, METH_VARARGS, NULL},
	 { "new_PythonDatabaseGeneratorListener", _wrap_new_PythonDatabaseGeneratorListener, METH_O, NULL},
	 { "delete_PythonDatabaseGeneratorListener", _wrap_delete_PythonDatabaseGeneratorListener, METH_O, NULL},
	 { "PythonDatabaseGeneratorListener_whenProgress", _wrap_PythonDatabaseGeneratorListener_whenProgress, METH_VARARGS, NULL},
	 { "PythonDatabaseGeneratorListener_whenStop", _wrap_PythonDatabaseGeneratorListener_whenStop, METH_VARARGS, NULL},
	 { "PythonDatabaseGeneratorListener_setWhenProgress", _wrap_PythonDatabaseGeneratorListener_setWhenProgress, METH_VARARGS, NULL},
	 { "PythonDatabaseGeneratorListener_setWhenStop", _wrap_PythonDatabaseGeneratorListener_setWhenStop, METH_VARARGS, NULL},
	 { "PythonDatabaseGeneratorListener_swigregister", PythonDatabaseGeneratorListener_swigregister, METH_O, NULL},
	 { "PythonDatabaseGeneratorListener_swiginit", PythonDatabaseGeneratorListener_swiginit, METH_VARARGS, NULL},
	 { "BNGenerator_generate", _wrap_BNGenerator_generate, METH_VARARGS, "\n"
		"\n"
		"Generate a new Bayesian network\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"n_nodes : int\n"
		"	the number of nodes (default=10)\n"
		"n_arcs : int\n"
		"	the number of arcs (default=15)\n"
		"n_nodmax : int\n"
		"	the max number of modalities for a node (default=4)\n"
		"\n"
		"Returns\n"
		"-------\n"
		"pyagrum.BayesNet\n"
		"	the generated Bayesian network\n"
		"\n"
		"Raises\n"
		"------\n"
		"  pyagrum.OperationNotAllowed\n"
		"	If n_modmax < 2\n"
		"  pyagrum.OperationNotAllowed\n"
		"	If n_arcs is incompatible with n_nodes (not enough arcs)\n"
		"\n"
		""},
	 { "new_BNGenerator", _wrap_new_BNGenerator, METH_NOARGS, "\n"
		"\n"
		"BNGenerator is used to easily generate Bayesian networks.\n"
		"\n"
		"BNGenerator() -> BNGenerator\n"
		"    default constructor\n"
		"\n"
		""},
	 { "delete_BNGenerator", _wrap_delete_BNGenerator, METH_O, NULL},
	 { "BNGenerator_swigregister", BNGenerator_swigregister, METH_O, NULL},
	 { "BNGenerator_swiginit", BNGenerator_swiginit, METH_VARARGS, NULL},
	 { "new_InformationTheory", _wrap_new_InformationTheory, METH_VARARGS, "\n"
		"\n"
		"This class gathers information theory concepts for subsets named X,Y and Z computed with only one (optimized) inference.\n"
		"\n"
		"\n"
		"**it=gum.InformationTheory(ie,X,Y,Z)**\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"    ie : InferenceEngine\n"
		"      the inference algorithme to use (for instance, `pyagrum.LazyPropagation`)\n"
		"    X : int or str or iterable[int or str]\n"
		"      a first nodeset\n"
		"    Y  : int or str or iterable[int or str]\n"
		"      a second nodeset\n"
		"    Z :  : int or str or iterable[int or str] (optional)\n"
		"      a third (an optional) nodeset\n"
		"\n"
		"Example\n"
		"-------\n"
		"\n"
		"      .. code:: python\n"
		"\n"
		"          import pyagrum as gum\n"
		"          bn=gum.fastBN('A->B<-C<-D->E<-F->G->A')\n"
		"          ie=gum.LazyPropagation(bn)\n"
		"          it=gum.InformationTheory(ie,'A',['B','G'],['C'])\n"
		"          print(f'Entropy(A)={it.entropyX()}'')\n"
		"          print(f'MutualInformation(A;B,G)={it.mutualInformationXY()}')\n"
		"          print(f'MutualInformation(A;B,G| C)={it.mutualInformationXYgivenZ()}')\n"
		"          print(f'VariationOfInformation(A;B,G)={it.variationOfInformationXY()}')\n"
		"\n"
		""},
	 { "InformationTheory_entropyXY", _wrap_InformationTheory_entropyXY, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  float\n"
		"    The entropy of nodeset, union of X and Y.\n"
		"\n"
		""},
	 { "InformationTheory_entropyX", _wrap_InformationTheory_entropyX, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"float\n"
		"  The entropy of nodeset X.\n"
		"\n"
		""},
	 { "InformationTheory_entropyY", _wrap_InformationTheory_entropyY, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  float\n"
		"    The entropy of nodeset X.\n"
		"\n"
		""},
	 { "InformationTheory_entropyXgivenY", _wrap_InformationTheory_entropyXgivenY, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  float\n"
		"    The conditional entropy of nodeset X conditionned by nodeset Y\n"
		"\n"
		""},
	 { "InformationTheory_entropyYgivenX", _wrap_InformationTheory_entropyYgivenX, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  float\n"
		"    The conditional entropy of nodeset Y conditionned by nodeset X\n"
		"\n"
		""},
	 { "InformationTheory_mutualInformationXY", _wrap_InformationTheory_mutualInformationXY, METH_O, NULL},
	 { "InformationTheory_variationOfInformationXY", _wrap_InformationTheory_variationOfInformationXY, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  float\n"
		"    The variation of information between nodeset X and nodeset Y\n"
		"\n"
		""},
	 { "InformationTheory_entropyXYgivenZ", _wrap_InformationTheory_entropyXYgivenZ, METH_O, NULL},
	 { "InformationTheory_mutualInformationXYgivenZ", _wrap_InformationTheory_mutualInformationXYgivenZ, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  float\n"
		"    The conditional mutual information between nodeset X and nodeset Y conditionned by nodeset Z\n"
		"\n"
		""},
	 { "delete_InformationTheory", _wrap_delete_InformationTheory, METH_O, NULL},
	 { "InformationTheory_swigregister", InformationTheory_swigregister, METH_O, NULL},
	 { "InformationTheory_swiginit", InformationTheory_swiginit, METH_VARARGS, NULL},
	 { "new_PRMexplorer", _wrap_new_PRMexplorer, METH_NOARGS, "\n"
		"\n"
		"PRMexplorer helps navigate through probabilistic relational models.\n"
		"\n"
		"PRMexplorer() -> PRMexplorer\n"
		"    default constructor\n"
		"\n"
		""},
	 { "delete_PRMexplorer", _wrap_delete_PRMexplorer, METH_O, NULL},
	 { "PRMexplorer_load", _wrap_PRMexplorer_load, METH_VARARGS, "\n"
		"\n"
		"Load a PRM into the explorer.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"filename : str\n"
		"	the name of the o3prm file\n"
		"classpath : str\n"
		"	the classpath of the PRM\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.FatalError\n"
		"	If file not found\n"
		"\n"
		""},
	 { "PRMexplorer_isType", _wrap_PRMexplorer_isType, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"name : str\n"
		"	an element name\n"
		"\n"
		"Returns\n"
		"-------\n"
		"bool\n"
		"	True if the parameter correspond to a type in the PRM\n"
		"\n"
		""},
	 { "PRMexplorer_isClass", _wrap_PRMexplorer_isClass, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"name : str\n"
		"	an element name\n"
		"\n"
		"Returns\n"
		"-------\n"
		"bool\n"
		"	True if the parameter correspond to a class in the PRM\n"
		"\n"
		""},
	 { "PRMexplorer_isInterface", _wrap_PRMexplorer_isInterface, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"name : str\n"
		"	an element name\n"
		"\n"
		"Returns\n"
		"-------\n"
		"bool\n"
		"	True if the parameter correspond to an interface in the PRM\n"
		"\n"
		""},
	 { "PRMexplorer_classes", _wrap_PRMexplorer_classes, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"list\n"
		"	the list of classes\n"
		"\n"
		""},
	 { "PRMexplorer_classAttributes", _wrap_PRMexplorer_classAttributes, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"class_name : str\n"
		"	a class name\n"
		"\n"
		"Returns\n"
		"-------\n"
		"list\n"
		"	the list of attributes\n"
		"\n"
		"Raises\n"
		"------\n"
		"  pyagrum.IndexError\n"
		"	If the class is not in the PRM\n"
		"\n"
		""},
	 { "PRMexplorer_isAttribute", _wrap_PRMexplorer_isAttribute, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"class_name : str\n"
		"	a class name\n"
		"att_name : str\n"
		"	the name of the attribute to be tested\n"
		"\n"
		"Returns\n"
		"-------\n"
		"bool\n"
		"	True if att_name is an attribute of class_name\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.IndexError\n"
		"	If the class is not in the PRM\n"
		"pyagrum.IndexError\n"
		"	If att_name is not an element of class_name\n"
		"\n"
		""},
	 { "PRMexplorer_classReferences", _wrap_PRMexplorer_classReferences, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"class_name : str\n"
		"	a class name\n"
		"\n"
		"Returns\n"
		"-------\n"
		"list\n"
		"	the list of references\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.IndexError\n"
		"	If the class is not in the PRM\n"
		"\n"
		""},
	 { "PRMexplorer_classParameters", _wrap_PRMexplorer_classParameters, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"class_name : str\n"
		"	a class name\n"
		"\n"
		"Returns\n"
		"-------\n"
		"list\n"
		"	the list of parameters\n"
		"\n"
		"Raises\n"
		"------\n"
		"  pyagrum.IndexError\n"
		"	If the class is not in the PRM\n"
		"\n"
		""},
	 { "PRMexplorer_classImplements", _wrap_PRMexplorer_classImplements, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"class_name : str\n"
		"	a class name\n"
		"\n"
		"Returns\n"
		"-------\n"
		"list\n"
		"	the list of interfaces implemented by the class\n"
		"\n"
		""},
	 { "PRMexplorer_aggType_set", _wrap_PRMexplorer_aggType_set, METH_VARARGS, "\n"
		"\n"
		"min/max/count/exists/forall/or/and/amplitude/median\n"
		"\n"
		""},
	 { "PRMexplorer_aggType_get", _wrap_PRMexplorer_aggType_get, METH_O, "\n"
		"\n"
		"min/max/count/exists/forall/or/and/amplitude/median\n"
		"\n"
		""},
	 { "PRMexplorer_classAggregates", _wrap_PRMexplorer_classAggregates, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"class_name : str\n"
		"	a class name\n"
		"\n"
		"Returns\n"
		"-------\n"
		"list\n"
		"	the list of aggregates in the class\n"
		"\n"
		"Raises\n"
		"------\n"
		"  pyagrum.IndexError\n"
		"	If the class is not in the PRM\n"
		"\n"
		""},
	 { "PRMexplorer_classSlotChains", _wrap_PRMexplorer_classSlotChains, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"class_name : str\n"
		"	a class name\n"
		"\n"
		"Returns\n"
		"-------\n"
		"list\n"
		"	the list of class slot chains\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.IndexError\n"
		"	if the class is not in the PRM\n"
		"\n"
		""},
	 { "PRMexplorer_classDag", _wrap_PRMexplorer_classDag, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"class_name : str\n"
		"	a class name\n"
		"\n"
		"Returns\n"
		"-------\n"
		"tuple\n"
		"	a description of the DAG\n"
		"\n"
		"Raises\n"
		"------\n"
		"  pyagrum.IndexError\n"
		"	If the class is not in the PRM\n"
		"\n"
		""},
	 { "PRMexplorer_getalltheSystems", _wrap_PRMexplorer_getalltheSystems, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"list\n"
		"	the list of all the systems and their components\n"
		"\n"
		""},
	 { "PRMexplorer_getSuperClass", _wrap_PRMexplorer_getSuperClass, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"class_name : str\n"
		"	a class name\n"
		"\n"
		"Returns\n"
		"-------\n"
		"str\n"
		"	the class extended by class_name\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.IndexError\n"
		"	If the class is not in the PRM\n"
		"\n"
		""},
	 { "PRMexplorer_getDirectSubClass", _wrap_PRMexplorer_getDirectSubClass, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"class_name : str\n"
		"	a class name\n"
		"\n"
		"Returns\n"
		"-------\n"
		"list\n"
		"	the list of direct subclasses\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.IndexError\n"
		"	If the class is not in the PRM\n"
		"\n"
		""},
	 { "PRMexplorer_cpf", _wrap_PRMexplorer_cpf, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"class_name : str\n"
		"	a class name\n"
		"\n"
		"attribute : str\n"
		"	an attribute\n"
		"\n"
		"Returns\n"
		"-------\n"
		"pyagrum.Tensor\n"
		"	the tensor of the attribute\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.OperationNotAllowed\n"
		"	If the class element doesn't have any gum::Tensor (like a gum::PRMReferenceSlot).\n"
		"pyagrum.IndexError\n"
		"	If the class is not in the PRM\n"
		"pyagrum.IndexError\n"
		"	If the attribute in parameters does not exist\n"
		"\n"
		""},
	 { "PRMexplorer_types", _wrap_PRMexplorer_types, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"list\n"
		"	the list of the custom types in the PRM\n"
		"\n"
		""},
	 { "PRMexplorer_getSuperType", _wrap_PRMexplorer_getSuperType, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"type_name : str\n"
		"	a type name\n"
		"\n"
		"Returns\n"
		"-------\n"
		"str\n"
		"	the type extended by type_name\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.IndexError\n"
		"	If the type is not in the PRM\n"
		"\n"
		""},
	 { "PRMexplorer_getDirectSubTypes", _wrap_PRMexplorer_getDirectSubTypes, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"type_name : str\n"
		"	a type name\n"
		"\n"
		"Returns\n"
		"-------\n"
		"list\n"
		"	the list of direct subtypes\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.IndexError\n"
		"	If the type is not in the PRM\n"
		"\n"
		""},
	 { "PRMexplorer_getLabels", _wrap_PRMexplorer_getLabels, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"type_name : str\n"
		"	a type name\n"
		"\n"
		"Returns\n"
		"-------\n"
		"list\n"
		"	the list of type labels\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.IndexError\n"
		"	If the type is not in the PRM\n"
		"\n"
		""},
	 { "PRMexplorer_getLabelMap", _wrap_PRMexplorer_getLabelMap, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"type_name : str\n"
		"	a type name\n"
		"\n"
		"Returns\n"
		"-------\n"
		"dict\n"
		"	a dict containing pairs of label and their values\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.IndexError\n"
		"	If the type is not in the PRM\n"
		"\n"
		""},
	 { "PRMexplorer_interfaces", _wrap_PRMexplorer_interfaces, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"list\n"
		"	the list of interfaces in the PRM\n"
		"\n"
		""},
	 { "PRMexplorer_interAttributes", _wrap_PRMexplorer_interAttributes, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"interface_name : str\n"
		"	an interface\n"
		"\n"
		"allAttributes : bool\n"
		"	True if supertypes of a custom type should be indicated\n"
		"\n"
		"Returns\n"
		"-------\n"
		"list\n"
		"	the list of (<type>,<attribute_name>) for the given interface\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.IndexError\n"
		"	If the type is not in the PRM\n"
		"\n"
		""},
	 { "PRMexplorer_interReferences", _wrap_PRMexplorer_interReferences, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"interface_name : str\n"
		"	an interface\n"
		"\n"
		"Returns\n"
		"-------\n"
		"list\n"
		"	the list of (<reference_type>,<reference_name>,<True if the reference is an array>) for the given interface\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.IndexError\n"
		"	If the type is not in the PRM\n"
		"\n"
		""},
	 { "PRMexplorer_getSuperInterface", _wrap_PRMexplorer_getSuperInterface, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"interface_name : str\n"
		"	an interface name\n"
		"\n"
		"Returns\n"
		"-------\n"
		"str\n"
		"	the interace extended by interface_name\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.IndexError\n"
		"	If the interface is not in the PRM\n"
		"\n"
		""},
	 { "PRMexplorer_getDirectSubInterfaces", _wrap_PRMexplorer_getDirectSubInterfaces, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"interface_name : str\n"
		"	an interface name\n"
		"\n"
		"Returns\n"
		"-------\n"
		"list\n"
		"	the list of direct subinterfaces\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.IndexError\n"
		"	If the interface is not in the PRM\n"
		"\n"
		""},
	 { "PRMexplorer_getImplementations", _wrap_PRMexplorer_getImplementations, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"interface_name : str\n"
		"	an interface name\n"
		"\n"
		"Returns\n"
		"-------\n"
		"str\n"
		"	the list of classes implementing the interface\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.IndexError\n"
		"	If the interface is not in the PRM\n"
		"\n"
		""},
	 { "PRMexplorer_swigregister", PRMexplorer_swigregister, METH_O, NULL},
	 { "PRMexplorer_swiginit", PRMexplorer_swiginit, METH_VARARGS, NULL},
	 { "new_EssentialGraph", _wrap_new_EssentialGraph, METH_VARARGS, NULL},
	 { "delete_EssentialGraph", _wrap_delete_EssentialGraph, METH_O, NULL},
	 { "EssentialGraph_pdag", _wrap_EssentialGraph_pdag, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"pyagrum.PDAG\n"
		"	the PDAG (Partially Directed Graph)\n"
		"\n"
		""},
	 { "EssentialGraph_toDot", _wrap_EssentialGraph_toDot, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"str\n"
		"    a friendly display of the graph in DOT format\n"
		"\n"
		""},
	 { "EssentialGraph_sizeArcs", _wrap_EssentialGraph_sizeArcs, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"    the number of arcs in the graph\n"
		"\n"
		""},
	 { "EssentialGraph_sizeEdges", _wrap_EssentialGraph_sizeEdges, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"    the number of edges in the graph\n"
		"\n"
		""},
	 { "EssentialGraph_sizeNodes", _wrap_EssentialGraph_sizeNodes, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"	the number of nodes in the graph\n"
		"\n"
		""},
	 { "EssentialGraph_size", _wrap_EssentialGraph_size, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"	the number of nodes in the graph\n"
		"\n"
		""},
	 { "EssentialGraph_skeleton", _wrap_EssentialGraph_skeleton, METH_O, NULL},
	 { "EssentialGraph_idFromName", _wrap_EssentialGraph_idFromName, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"name : str\n"
		"  the name of the variable in the model\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"  the nodeId from the name of the variable in the model\n"
		"\n"
		""},
	 { "EssentialGraph_nameFromId", _wrap_EssentialGraph_nameFromId, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"node : int\n"
		"  the nodeId of the variable in the model\n"
		"\n"
		"Returns\n"
		"-------\n"
		"str\n"
		"  the name of the variable in the model from the nodeId\n"
		"\n"
		""},
	 { "EssentialGraph_nodes", _wrap_EssentialGraph_nodes, METH_O, NULL},
	 { "EssentialGraph_arcs", _wrap_EssentialGraph_arcs, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"list\n"
		"	The lisf of arcs in the EssentialGraph\n"
		"\n"
		""},
	 { "EssentialGraph_parents", _wrap_EssentialGraph_parents, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id :\n"
		"	The id of the child node\n"
		"\n"
		"Returns\n"
		"-------\n"
		"Set\n"
		"    the set of the parents ids.\n"
		"\n"
		""},
	 { "EssentialGraph_children", _wrap_EssentialGraph_children, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id : int\n"
		"  the id of the parent\n"
		"\n"
		"Returns\n"
		"-------\n"
		"Set\n"
		"	the set of all the children\n"
		"\n"
		""},
	 { "EssentialGraph_edges", _wrap_EssentialGraph_edges, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"List\n"
		"  the list of the edges\n"
		"\n"
		""},
	 { "EssentialGraph_neighbours", _wrap_EssentialGraph_neighbours, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id : int\n"
		"    the id of the checked node\n"
		"\n"
		"Returns\n"
		"-------\n"
		"Set\n"
		"    The set of edges adjacent to the given node\n"
		"\n"
		""},
	 { "EssentialGraph_swigregister", EssentialGraph_swigregister, METH_O, NULL},
	 { "EssentialGraph_swiginit", EssentialGraph_swiginit, METH_VARARGS, NULL},
	 { "new_MarkovBlanket", _wrap_new_MarkovBlanket, METH_VARARGS, NULL},
	 { "delete_MarkovBlanket", _wrap_delete_MarkovBlanket, METH_O, NULL},
	 { "MarkovBlanket_dag", _wrap_MarkovBlanket_dag, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"pyagrum.DAG\n"
		"  a copy of the DAG\n"
		"\n"
		""},
	 { "MarkovBlanket_toDot", _wrap_MarkovBlanket_toDot, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"str\n"
		"    a friendly display of the graph in DOT format\n"
		"\n"
		""},
	 { "MarkovBlanket_sizeArcs", _wrap_MarkovBlanket_sizeArcs, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"    the number of arcs in the graph\n"
		"\n"
		""},
	 { "MarkovBlanket_sizeNodes", _wrap_MarkovBlanket_sizeNodes, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"	the number of nodes in the graph\n"
		"\n"
		""},
	 { "MarkovBlanket_size", _wrap_MarkovBlanket_size, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"    the number of nodes in the graph\n"
		"\n"
		""},
	 { "MarkovBlanket_hasSameStructure", _wrap_MarkovBlanket_hasSameStructure, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"pyagrum.DAGmodel\n"
		"	a direct acyclic model\n"
		"\n"
		"Returns\n"
		"-------\n"
		"bool\n"
		"    True if all the named node are the same and all the named arcs are the same\n"
		"\n"
		""},
	 { "MarkovBlanket_nodes", _wrap_MarkovBlanket_nodes, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"set\n"
		"    the set of ids\n"
		"\n"
		""},
	 { "MarkovBlanket_arcs", _wrap_MarkovBlanket_arcs, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"List\n"
		"	the list of the arcs\n"
		"\n"
		""},
	 { "MarkovBlanket_parents", _wrap_MarkovBlanket_parents, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id :\n"
		"	The id of the child node\n"
		"\n"
		"Returns\n"
		"-------\n"
		"Set\n"
		"    the set of the parents ids.\n"
		"\n"
		""},
	 { "MarkovBlanket_children", _wrap_MarkovBlanket_children, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id : int\n"
		"  the id of the parent\n"
		"\n"
		"Returns\n"
		"-------\n"
		"Set\n"
		"	the set of all the children\n"
		"\n"
		""},
	 { "MarkovBlanket_swigregister", MarkovBlanket_swigregister, METH_O, NULL},
	 { "MarkovBlanket_swiginit", MarkovBlanket_swiginit, METH_VARARGS, NULL},
	 { "new_StructuralComparator", _wrap_new_StructuralComparator, METH_NOARGS, NULL},
	 { "delete_StructuralComparator", _wrap_delete_StructuralComparator, METH_O, NULL},
	 { "StructuralComparator_compare", _wrap_StructuralComparator_compare, METH_VARARGS, "\n"
		"\n"
		"Use to compare the edges/arcs of two structure of the same type and same sizes (either DiGraph, UndiGraph or MixedGraph).\n"
		"\n"
		"Could be use to compare a BN and its learned version.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ref :\n"
		"	the structure of reference\n"
		"test :\n"
		"	the structure we want to test\n"
		"\n"
		""},
	 { "StructuralComparator_precision_skeleton", _wrap_StructuralComparator_precision_skeleton, METH_O, "\n"
		"\n"
		"Rate of true postive over labelized edges.\n"
		"\n"
		"Returns\n"
		"-------\n"
		"float\n"
		"	the precision of the tested graph skeleton\n"
		"\n"
		""},
	 { "StructuralComparator_recall_skeleton", _wrap_StructuralComparator_recall_skeleton, METH_O, "\n"
		"\n"
		"Rate of true postive over labelized edges.\n"
		"\n"
		"Returns\n"
		"-------\n"
		"float\n"
		"	the recall of the tested graph skeleton\n"
		"\n"
		""},
	 { "StructuralComparator_f_score_skeleton", _wrap_StructuralComparator_f_score_skeleton, METH_O, "\n"
		"\n"
		"Harmonic mean between recall and precision.\n"
		"\n"
		"Returns\n"
		"-------\n"
		"float\n"
		"	the tarmonic mean of the tested graph skeleton\n"
		"\n"
		""},
	 { "StructuralComparator_precision", _wrap_StructuralComparator_precision, METH_O, "\n"
		"\n"
		"Rate of true postive over postively labelized arcs/edges.\n"
		"\n"
		"Returns\n"
		"-------\n"
		"float\n"
		"	the precision of the tested graph\n"
		"\n"
		""},
	 { "StructuralComparator_recall", _wrap_StructuralComparator_recall, METH_O, "\n"
		"\n"
		"Rate of true postive over labelized arcs/edges.\n"
		"\n"
		"Returns\n"
		"-------\n"
		"float\n"
		"	the recall of the tested graph\n"
		"\n"
		""},
	 { "StructuralComparator_f_score", _wrap_StructuralComparator_f_score, METH_O, "\n"
		"\n"
		"Harmonic mean between recall and precision.\n"
		"\n"
		"Returns\n"
		"-------\n"
		"float\n"
		"	the harmonic mean of the tested graph\n"
		"\n"
		""},
	 { "StructuralComparator_swigregister", StructuralComparator_swigregister, METH_O, NULL},
	 { "StructuralComparator_swiginit", StructuralComparator_swiginit, METH_VARARGS, NULL},
	 { "delete_IBayesNet", _wrap_delete_IBayesNet, METH_O, NULL},
	 { "IBayesNet_cpt", _wrap_IBayesNet_cpt, METH_VARARGS, "\n"
		"\n"
		"Returns the CPT of a variable.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"VarId : int\n"
		"	A variable's id in the pyagrum.IBayesNet.\n"
		"name : str\n"
		"	A variable's name in the pyagrum.IBayesNet.\n"
		"\n"
		"Returns\n"
		"-------\n"
		"pyagrum.Tensor\n"
		"	The variable's CPT.\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.NotFound\n"
		"	If no variable's id matches varId.\n"
		"\n"
		""},
	 { "IBayesNet_variableNodeMap", _wrap_IBayesNet_variableNodeMap, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"pyagrum.variableNodeMap\n"
		"	the variable node map\n"
		"\n"
		""},
	 { "IBayesNet_variable", _wrap_IBayesNet_variable, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id : int\n"
		"	a variable's id\n"
		"name : str\n"
		"	a variable's name\n"
		"\n"
		"Returns\n"
		"-------\n"
		"pyagrum.DiscreteVariable\n"
		"	the variable\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.IndexError\n"
		"	If the graph does not contain the variable\n"
		"\n"
		""},
	 { "IBayesNet_nodeId", _wrap_IBayesNet_nodeId, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"var : pyagrum.DiscreteVariable\n"
		"	a variable\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"	the id of the variable\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.IndexError\n"
		"	If the graph does not contain the variable\n"
		"\n"
		""},
	 { "IBayesNet_idFromName", _wrap_IBayesNet_idFromName, METH_VARARGS, "\n"
		"\n"
		"Returns a variable's id given its name in the graph.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"name : str\n"
		"	The variable's name from which the id is returned.\n"
		"\n"
		"Notes\n"
		"-----\n"
		"  A convenient shortcut for `g.variableFromName(name)` is `g[name]`.\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int :\n"
		"	The variable's node id.\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.NotFound\n"
		"	If name does not match a variable in the graph\n"
		"\n"
		""},
	 { "IBayesNet_variableFromName", _wrap_IBayesNet_variableFromName, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"name : str\n"
		"	a variable's name\n"
		"\n"
		"Returns\n"
		"-------\n"
		"pyagrum.DiscreteVariable\n"
		"	the variable\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.IndexError\n"
		"	If the graph does not contain the variable\n"
		"\n"
		""},
	 { "IBayesNet_jointProbability", _wrap_IBayesNet_jointProbability, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i : pyagrum.instantiation\n"
		"	an instantiation of the variables\n"
		"\n"
		"Returns\n"
		"-------\n"
		"float\n"
		"	a parameter of the joint probability for the BayesNet\n"
		"\n"
		"Warnings\n"
		"--------\n"
		"a variable not present in the instantiation is assumed to be instantiated to 0\n"
		"\n"
		""},
	 { "IBayesNet_log2JointProbability", _wrap_IBayesNet_log2JointProbability, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i : pyagrum.instantiation\n"
		"	an instantiation of the variables\n"
		"\n"
		"Returns\n"
		"-------\n"
		"float\n"
		"	a parameter of the log joint probability for the BayesNet\n"
		"\n"
		"Warnings\n"
		"--------\n"
		"a variable not present in the instantiation is assumed to be instantiated to 0\n"
		"\n"
		""},
	 { "IBayesNet_check", _wrap_IBayesNet_check, METH_O, "\n"
		"\n"
		"Check if the BayesNet is consistent (variables, CPT, ...)\n"
		"\n"
		"Returns\n"
		"-------\n"
		"List[str]\n"
		"  list of found issues\n"
		"\n"
		""},
	 { "IBayesNet___eq__", _wrap_IBayesNet___eq__, METH_VARARGS, NULL},
	 { "IBayesNet___ne__", _wrap_IBayesNet___ne__, METH_VARARGS, NULL},
	 { "IBayesNet_dim", _wrap_IBayesNet_dim, METH_O, "\n"
		"\n"
		"Returns the dimension (the number of free parameters) in this BayesNet.\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"	the dimension of the BayesNet\n"
		"\n"
		""},
	 { "IBayesNet_maxVarDomainSize", _wrap_IBayesNet_maxVarDomainSize, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"	the biggest domain size among the variables of the BayesNet\n"
		"\n"
		""},
	 { "IBayesNet_minParam", _wrap_IBayesNet_minParam, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"float\n"
		"    the smallest value in the CPTs of the IBayesNet\n"
		"\n"
		""},
	 { "IBayesNet_maxParam", _wrap_IBayesNet_maxParam, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"float\n"
		"    the biggest value in the CPTs of the BayesNet\n"
		"\n"
		""},
	 { "IBayesNet_minNonZeroParam", _wrap_IBayesNet_minNonZeroParam, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"float\n"
		"    the smallest value (not equal to 0) in the CPTs of the IBayesNet\n"
		"\n"
		""},
	 { "IBayesNet_maxNonOneParam", _wrap_IBayesNet_maxNonOneParam, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"float\n"
		"	The biggest value (not equal to 1) in the CPTs of the BayesNet\n"
		"\n"
		""},
	 { "IBayesNet_toDot", _wrap_IBayesNet_toDot, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"str\n"
		"    a friendly display of the graph in DOT format\n"
		"\n"
		""},
	 { "IBayesNet_evEq", _wrap_IBayesNet_evEq, METH_VARARGS, NULL},
	 { "IBayesNet_evIn", _wrap_IBayesNet_evIn, METH_VARARGS, NULL},
	 { "IBayesNet_evLt", _wrap_IBayesNet_evLt, METH_VARARGS, NULL},
	 { "IBayesNet_evGt", _wrap_IBayesNet_evGt, METH_VARARGS, NULL},
	 { "IBayesNet_memoryFootprint", _wrap_IBayesNet_memoryFootprint, METH_O, "\n"
		"\n"
		"get the size (in byte) of the (main footprint) of the BayesNet\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"  the size in byte of the representation (of the parameters) of the BayesNet\n"
		"\n"
		""},
	 { "IBayesNet_ids", _wrap_IBayesNet_ids, METH_VARARGS, "\n"
		"\n"
		"List of ids for a list of names of variables in the model\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"lov : List[str]\n"
		"  List of variable names\n"
		"\n"
		"Returns\n"
		"-------\n"
		"List[int]\n"
		"	The ids for the list of names of the graph variables\n"
		"\n"
		""},
	 { "IBayesNet_nodeset", _wrap_IBayesNet_nodeset, METH_VARARGS, "\n"
		"\n"
		"Set of ids for a list of names of variables in the model\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"lov : List[str]\n"
		"  List of variable names\n"
		"\n"
		"Returns\n"
		"-------\n"
		"Set[int]\n"
		"	The set of ids for the list of names of the graph variables\n"
		"\n"
		""},
	 { "IBayesNet_minimalCondSet", _wrap_IBayesNet_minimalCondSet, METH_VARARGS, "\n"
		"\n"
		"Returns, given one or many targets and a list of variables, the minimal set of those needed to calculate the target/targets.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"target : int\n"
		"	The id of the target\n"
		"targets : List[int]\n"
		"	The ids of the targets\n"
		"list : List[int]\n"
		"	The list of available variables\n"
		"\n"
		"Returns\n"
		"-------\n"
		"Set[int]\n"
		"	The minimal set of variables\n"
		"\n"
		""},
	 { "IBayesNet_isIndependent", _wrap_IBayesNet_isIndependent, METH_VARARGS, "\n"
		"\n"
		"check if nodes X and nodes Y are independent given nodes Z\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"X : str|int|List[str|int]\n"
		"      a list of of nodeIds or names\n"
		"Y : str|int|List[str|int]\n"
		"      a list of of nodeIds or names\n"
		"Z : str|int|List[str|int]\n"
		"      a list of of nodeIds or names\n"
		"\n"
		"Raises\n"
		"------\n"
		"InvalidArgument\n"
		"  if X and Y share variables\n"
		"\n"
		"Returns\n"
		"-------\n"
		"bool\n"
		"  True if X and Y are independent given Z in the model\n"
		"\n"
		""},
	 { "IBayesNet_names", _wrap_IBayesNet_names, METH_O, "\n"
		"\n"
		"Set of names of variables in the model\n"
		"\n"
		"Returns\n"
		"-------\n"
		"Set[str]\n"
		"	The names of the graph variables\n"
		"\n"
		""},
	 { "IBayesNet_nodes", _wrap_IBayesNet_nodes, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"Set[int]\n"
		"    the set of ids\n"
		"\n"
		""},
	 { "IBayesNet_arcs", _wrap_IBayesNet_arcs, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"list\n"
		"	The lisf of arcs in the IBayesNet\n"
		"\n"
		""},
	 { "IBayesNet_parents", _wrap_IBayesNet_parents, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id :\n"
		"	The id of the child node\n"
		"\n"
		"Returns\n"
		"-------\n"
		"Set\n"
		"    the set of the parents ids.\n"
		"\n"
		""},
	 { "IBayesNet_children", _wrap_IBayesNet_children, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id : int\n"
		"  the id of the parent\n"
		"\n"
		"Returns\n"
		"-------\n"
		"Set\n"
		"	the set of all the children\n"
		"\n"
		""},
	 { "IBayesNet_family", _wrap_IBayesNet_family, METH_VARARGS, "\n"
		"\n"
		"give the set of parents of a node and the node\n"
		"\n"
		"Parameters\n"
		"---------\n"
		"norid : str|int\n"
		"  the node\n"
		"\n"
		"Returns\n"
		"-------\n"
		"Set[int]\n"
		"  the set of nodeId of the family of the node `norid`\n"
		"\n"
		""},
	 { "IBayesNet_descendants", _wrap_IBayesNet_descendants, METH_VARARGS, "\n"
		"\n"
		"give the set of nodeid of descendants of a node\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"norid : str|int\n"
		"  the name or the id of the node\n"
		"\n"
		"Returns\n"
		"-------\n"
		"Set[int]\n"
		"  the set of ids of the descendants of node `norid`.\n"
		"\n"
		""},
	 { "IBayesNet_ancestors", _wrap_IBayesNet_ancestors, METH_VARARGS, "\n"
		"\n"
		"give the set of nodeid of ancestors of a node\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"norid : str|int\n"
		"  the name or the id of the node\n"
		"\n"
		"Returns\n"
		"-------\n"
		"Set[int]\n"
		"  the set of ids of the ancestors of node `norid`.\n"
		"\n"
		""},
	 { "IBayesNet_moralizedAncestralGraph", _wrap_IBayesNet_moralizedAncestralGraph, METH_VARARGS, "\n"
		"\n"
		"build a UndiGraph by moralizing the Ancestral Graph of a list of nodes\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"nodes : str|int|List[str|int]\n"
		"  the list of of nodeIds or names\n"
		"\n"
		"Warnings\n"
		"--------\n"
		"  gum.UndiGraph only knows NodeId. Hence the moralized ancestral graph does not include the names of the variables.graph\n"
		"\n"
		"Returns\n"
		"-------\n"
		"gum.UndiGraph\n"
		"  the moralized ancestral graph of the nodes\n"
		"\n"
		""},
	 { "IBayesNet___repr__", _wrap_IBayesNet___repr__, METH_O, NULL},
	 { "IBayesNet___str__", _wrap_IBayesNet___str__, METH_O, NULL},
	 { "IBayesNet_swigregister", IBayesNet_swigregister, METH_O, NULL},
	 { "BayesNet_fastPrototype", _wrap_BayesNet_fastPrototype, METH_VARARGS, "\n"
		"\n"
		"Create a Bayesian network with a dot-like syntax which specifies:\n"
		"    - the structure 'a->b->c;b->d<-e;'.\n"
		"    - the type of the variables with different syntax:\n"
		"\n"
		"      - by default, a variable is a pyagrum.RangeVariable using the default domain size ([2])\n"
		"      - with 'a[10]', the variable is a pyagrum.RangeVariable using 10 as domain size (from 0 to 9)\n"
		"      - with 'a[3,7]', the variable is a pyagrum.RangeVariable using a domainSize from 3 to 7\n"
		"      - with 'a[1,3.14,5,6.2]', the variable is a pyagrum.DiscretizedVariable using the given ticks (at least 3 values)\n"
		"      - with 'a{top|middle|bottom}', the variable is a pyagrum.LabelizedVariable using the given labels.\n"
		"      - with 'a{-1|5|0|3}', the variable is a pyagrum.IntegerVariable using the sorted given values.\n"
		"      - with 'a{-0.5|5.01|0|3.1415}', the variable is a pyagrum.NumericalDiscreteVariable using the sorted given values.\n"
		"\n"
		"Note\n"
		"----\n"
		"  - If the dot-like string contains such a specification more than once for a variable, the first specification will be used.\n"
		"  - the CPTs are randomly generated.\n"
		"  - see also pyagrum.fastBN.\n"
		"\n"
		"Examples\n"
		"--------\n"
		">>> import pyagrum as gum\n"
		">>> bn=pyagrum.BayesNet.fastPrototype('A->B[1,3]<-C{yes|No}->D[2,4]<-E[1,2.5,3.9]',6)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"dotlike : str\n"
		"        the string containing the specification\n"
		"domainSize : int or str\n"
		"        the default domain size or the default domain for variables\n"
		"\n"
		"Returns\n"
		"-------\n"
		"pyagrum.BayesNet\n"
		"        the resulting Bayesian network\n"
		"\n"
		""},
	 { "delete_BayesNet", _wrap_delete_BayesNet, METH_O, NULL},
	 { "new_BayesNet", _wrap_new_BayesNet, METH_VARARGS, NULL},
	 { "BayesNet_cpt", _wrap_BayesNet_cpt, METH_VARARGS, "\n"
		"\n"
		"Returns the CPT of a variable.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"VarId :  Union[int,str]\n"
		"	a variable's id (int) or name\n"
		"\n"
		"Returns\n"
		"-------\n"
		"pyagrum.Tensor\n"
		"	The variable's CPT.\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.NotFound\n"
		"    If no variable's id matches varId.\n"
		"\n"
		""},
	 { "BayesNet_variableNodeMap", _wrap_BayesNet_variableNodeMap, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"pyagrum.variableNodeMap\n"
		"	the variable node map\n"
		"\n"
		""},
	 { "BayesNet_add", _wrap_BayesNet_add, METH_VARARGS, "\n"
		"\n"
		"Add a variable to the pyagrum.BayesNet.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"variable : pyagrum.DiscreteVariable\n"
		"	the variable added\n"
		"descr : str\n"
		"	the description of the variable (following :ref:`fast syntax<Quick specification of (randomly parameterized) graphical models>`)\n"
		"nbrmod : int\n"
		"	the number of modalities for the new variable\n"
		"id : int\n"
		"	the variable forced id in the pyagrum.BayesNet\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"	the id of the new node\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.DuplicateLabel\n"
		"    If variable.name() or id is already used in this pyagrum.BayesNet.\n"
		"pyagrum.NotAllowed\n"
		"    If nbrmod is less than 2\n"
		"\n"
		""},
	 { "BayesNet_clear", _wrap_BayesNet_clear, METH_O, "\n"
		"\n"
		"Clear the whole BayesNet\n"
		"\n"
		""},
	 { "BayesNet_erase", _wrap_BayesNet_erase, METH_VARARGS, "\n"
		"\n"
		"Remove a variable from the gum::BayesNet.\n"
		"\n"
		"Removes the corresponding variable from the gum::BayesNet and from all of it's children gum::Tensor.\n"
		"\n"
		"If no variable matches the given id, then nothing is done.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"var : Union[int,str,pyagrum.DiscreteVariable]\n"
		"	the current name, the id of the variable or a reference to the variable\n"
		"\n"
		""},
	 { "BayesNet_variable", _wrap_BayesNet_variable, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id : int\n"
		"	a variable's id\n"
		"name : str\n"
		"	a variable's name\n"
		"\n"
		"Returns\n"
		"-------\n"
		"pyagrum.DiscreteVariable\n"
		"	the variable\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.IndexError\n"
		"	If the graph does not contain the variable\n"
		"\n"
		""},
	 { "BayesNet_changeVariableName", _wrap_BayesNet_changeVariableName, METH_VARARGS, "\n"
		"\n"
		"Changes a variable's name in the gum::BayesNet.\n"
		"\n"
		"This will change the gum::DiscreteVariable names in the gum::BayesNet.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"var : Union[int,str]\n"
		"	the current name or the id of the variable\n"
		"new_name : str\n"
		"	the new name of the variable\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.DuplicateLabel\n"
		"    If new_name is already used in this BayesNet.\n"
		"pyagrum.NotFound\n"
		"    If no variable matches id.\n"
		"\n"
		""},
	 { "BayesNet_changeVariableLabel", _wrap_BayesNet_changeVariableLabel, METH_VARARGS, "\n"
		"\n"
		"change the label of the variable associated to nodeId to the new value.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"var : Union[int,str]\n"
		"	the current name or the id of the variable\n"
		"old_label : str\n"
		"	the new label\n"
		"new_label : str\n"
		"	the new label\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.NotFound\n"
		"    if id/name is not a variable or if old_label does not exist.\n"
		"\n"
		""},
	 { "BayesNet_nodeId", _wrap_BayesNet_nodeId, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"var : pyagrum.DiscreteVariable\n"
		"	a variable\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"	the id of the variable\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.IndexError\n"
		"	If the graph does not contain the variable\n"
		"\n"
		""},
	 { "BayesNet_idFromName", _wrap_BayesNet_idFromName, METH_VARARGS, "\n"
		"\n"
		"Returns a variable's id given its name in the graph.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"name : str\n"
		"	The variable's name from which the id is returned.\n"
		"\n"
		"Notes\n"
		"-----\n"
		"  A convenient shortcut for `g.variableFromName(name)` is `g[name]`.\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int :\n"
		"	The variable's node id.\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.NotFound\n"
		"	If name does not match a variable in the graph\n"
		"\n"
		""},
	 { "BayesNet_variableFromName", _wrap_BayesNet_variableFromName, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"name : str\n"
		"	a variable's name\n"
		"\n"
		"Returns\n"
		"-------\n"
		"pyagrum.DiscreteVariable\n"
		"	the variable\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.IndexError\n"
		"	If the graph does not contain the variable\n"
		"\n"
		""},
	 { "BayesNet_addArc", _wrap_BayesNet_addArc, METH_VARARGS, "\n"
		"\n"
		"Add an arc in the BN, and update arc.head's CPT.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"head : Union[int,str]\n"
		"	a variable's id (int) or name\n"
		"head : Union[int,str]\n"
		"	a variable's id (int) or name\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.InvalidEdge\n"
		"    If arc.tail and/or arc.head are not in the BN.\n"
		"pyagrum.DuplicateElement\n"
		"    If the arc already exists.\n"
		"\n"
		""},
	 { "BayesNet_eraseArc", _wrap_BayesNet_eraseArc, METH_VARARGS, "\n"
		"\n"
		"Removes an arc in the BN, and update head's CTP.\n"
		"\n"
		"If (tail, head) doesn't exist, the nothing happens.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"arc : pyagrum.Arc when calling eraseArc(arc)\n"
		"	The arc to be removed.\n"
		"head : Union[int,str]\n"
		"	a variable's id (int) or name for the head when calling eraseArc(head,tail)\n"
		"tail : Union[int,str]\n"
		"	a variable's id (int) or name for the tail when calling eraseArc(head,tail)\n"
		"\n"
		""},
	 { "BayesNet_beginTopologyTransformation", _wrap_BayesNet_beginTopologyTransformation, METH_O, "\n"
		"\n"
		"When inserting/removing arcs, node CPTs change their dimension with a cost in time.\n"
		"begin Multiple Change for all CPTs\n"
		"These functions delay the CPTs change to be done just once at the end of a sequence of topology modification, begins a sequence of insertions/deletions of arcs without changing the dimensions of the CPTs.\n"
		"\n"
		""},
	 { "BayesNet_endTopologyTransformation", _wrap_BayesNet_endTopologyTransformation, METH_O, "\n"
		"\n"
		"Terminates a sequence of insertions/deletions of arcs by adjusting all CPTs dimensions.\n"
		"End Multiple Change for all CPTs.\n"
		"\n"
		"Returns\n"
		"-------\n"
		"pyagrum.BayesNet\n"
		"\n"
		""},
	 { "BayesNet_reverseArc", _wrap_BayesNet_reverseArc, METH_VARARGS, "\n"
		"\n"
		"Reverses an arc while preserving the same joint distribution.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"tail\n"
		"	(int) the id of the tail variable\n"
		"head\n"
		"	(int) the id of the head variable\n"
		"tail\n"
		"	(str) the name of the tail variable\n"
		"head\n"
		"	(str) the name of the head variable\n"
		"arc : pyagrum.Arc\n"
		"	an arc\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.InvalidArc\n"
		"    If the arc does not exsit or if its reversal would induce a directed cycle.\n"
		"\n"
		""},
	 { "BayesNet_addNoisyOR", _wrap_BayesNet_addNoisyOR, METH_VARARGS, "\n"
		"\n"
		"Add a variable, it's associate node and a noisyOR implementation.\n"
		"\n"
		"Since it seems that the 'classical' noisyOR is the Compound noisyOR, we keep the addNoisyOR as an alias for addNoisyORCompound.\n"
		"\n"
		"(The id of the new variable can be automatically generated.)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"variable : pyagrum.DiscreteVariable\n"
		"	The variable added by copy\n"
		"externalWeight : float\n"
		"	the added external weight\n"
		"id : int\n"
		"	The proposed id for the variable.\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"	the id of the added variable.\n"
		"\n"
		"Raises\n"
		"--------\n"
		"pyagrum.DuplicateElement\n"
		"    If id is already used\n"
		"\n"
		""},
	 { "BayesNet_addNoisyORNet", _wrap_BayesNet_addNoisyORNet, METH_VARARGS, "\n"
		"\n"
		"Add a variable, its associate node and a noisyOR implementation.\n"
		"\n"
		"Since it seems that the 'classical' noisyOR is the Compound noisyOR, we keep the addNoisyOR as an alias for addNoisyORCompound.\n"
		"\n"
		"(The id of the new variable can be automatically generated.)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"variable : pyagrum.DiscreteVariable\n"
		"	The variable added by copy\n"
		"externalWeight : float\n"
		"	the added external weight\n"
		"id : int\n"
		"	The proposed id for the variable.\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"	the id of the added variable.\n"
		"\n"
		""},
	 { "BayesNet_addNoisyORCompound", _wrap_BayesNet_addNoisyORCompound, METH_VARARGS, "\n"
		"\n"
		"Add a variable, it's associate node and a noisyOR implementation.\n"
		"\n"
		"Since it seems that the 'classical' noisyOR is the Compound noisyOR, we keep the addNoisyOR as an alias for addNoisyORCompound.\n"
		"\n"
		"(The id of the new variable can be automatically generated.)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"variable : pyagrum.DiscreteVariable\n"
		"	The variable added by copy\n"
		"externalWeight : float\n"
		"	the added external weight\n"
		"id : int\n"
		"	The proposed id for the variable.\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"	the id of the added variable.\n"
		"\n"
		"Raises\n"
		"--------\n"
		"pyagrum.DuplicateElement\n"
		"    If id is already used\n"
		"\n"
		""},
	 { "BayesNet_addNoisyAND", _wrap_BayesNet_addNoisyAND, METH_VARARGS, "\n"
		"\n"
		"Add a variable, its associate node and a noisyAND implementation.\n"
		"\n"
		"(The id of the new variable can be automatically generated.)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"variable : pyagrum.DiscreteVariable\n"
		"	The variable added by copy\n"
		"externalWeight : float\n"
		"	the added external weight\n"
		"id : int\n"
		"	The proposed id for the variable.\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"	the id of the added variable.\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.DuplicateElement\n"
		"    If id is already used\n"
		"\n"
		""},
	 { "BayesNet_addLogit", _wrap_BayesNet_addLogit, METH_VARARGS, "\n"
		"\n"
		"Add a variable, its associate node and a Logit implementation.\n"
		"\n"
		"(The id of the new variable can be automatically generated.)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"variable : pyagrum.DiscreteVariable\n"
		"	The variable added by copy\n"
		"externalWeight : float\n"
		"	the added external weight\n"
		"id : int\n"
		"	The proposed id for the variable.\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"	the id of the added variable.\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.DuplicateElement\n"
		"    If id is already used\n"
		"\n"
		""},
	 { "BayesNet_addOR", _wrap_BayesNet_addOR, METH_VARARGS, "\n"
		"\n"
		"Add a variable, it's associate node and an OR implementation.\n"
		"\n"
		"The id of the new variable is automatically generated.\n"
		"\n"
		"Warnings\n"
		"--------\n"
		"	If parents are not boolean, all value>1 is True\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"variable : pyagrum.DiscreteVariable\n"
		"	The variable added by copy\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"	the id of the added variable.\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.SizeError\n"
		"    If variable.domainSize()>2\n"
		"\n"
		""},
	 { "BayesNet_addAND", _wrap_BayesNet_addAND, METH_VARARGS, "\n"
		"\n"
		"Add a variable, it's associate node and an AND implementation.\n"
		"\n"
		"The id of the new variable is automatically generated.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"variable : pyagrum.DiscreteVariable\n"
		"	The variable added by copy.\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"	the id of the added variable.\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.SizeError\n"
		"    If variable.domainSize()>2\n"
		"\n"
		""},
	 { "BayesNet_addAMPLITUDE", _wrap_BayesNet_addAMPLITUDE, METH_VARARGS, "\n"
		"\n"
		"Others aggregators\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"variable : pyagrum.DiscreteVariable\n"
		"	the variable to be added\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"	the id of the added value\n"
		"\n"
		""},
	 { "BayesNet_addCOUNT", _wrap_BayesNet_addCOUNT, METH_VARARGS, "\n"
		"\n"
		"Others aggregators\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"variable : pyagrum.DiscreteVariable\n"
		"	the variable to be added\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"	the id of the added value\n"
		"\n"
		""},
	 { "BayesNet_addEXISTS", _wrap_BayesNet_addEXISTS, METH_VARARGS, "\n"
		"\n"
		"Others aggregators\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"variable : pyagrum.DiscreteVariable\n"
		"	the variable to be added\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"	the id of the added value\n"
		"\n"
		""},
	 { "BayesNet_addFORALL", _wrap_BayesNet_addFORALL, METH_VARARGS, "\n"
		"\n"
		"Others aggregators\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"variable : pyagrum.DiscreteVariable\n"
		"	the variable to be added\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"	the id of the added variable.\n"
		"\n"
		""},
	 { "BayesNet_addMAX", _wrap_BayesNet_addMAX, METH_VARARGS, "\n"
		"\n"
		"Others aggregators\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"variable : pyagrum.DiscreteVariable\n"
		"	the variable to be added\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"	the id of the added value\n"
		"\n"
		""},
	 { "BayesNet_addMEDIAN", _wrap_BayesNet_addMEDIAN, METH_VARARGS, "\n"
		"\n"
		"Others aggregators\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"variable : pyagrum.DiscreteVariable\n"
		"	the variable to be added\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"	the id of the added value\n"
		"\n"
		""},
	 { "BayesNet_addMIN", _wrap_BayesNet_addMIN, METH_VARARGS, "\n"
		"\n"
		"Others aggregators\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"variable : pyagrum.DiscreteVariable\n"
		"	the variable to be added\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"	the id of the added value\n"
		"\n"
		""},
	 { "BayesNet_addSUM", _wrap_BayesNet_addSUM, METH_VARARGS, "\n"
		"\n"
		"Others aggregators\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"variable : pyagrum.DiscreteVariable\n"
		"        the variable to be added\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"        the id of the added value\n"
		"\n"
		""},
	 { "BayesNet_addWeightedArc", _wrap_BayesNet_addWeightedArc, METH_VARARGS, "\n"
		"\n"
		"Add an arc in the BN, and update arc.head's CPT.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"head : Union[int,str]\n"
		"	a variable's id (int) or name\n"
		"tail : Union[int,str]\n"
		"	a variable's id (int) or name\n"
		"causalWeight : float\n"
		"	the added causal weight\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.InvalidArc\n"
		"    If arc.tail and/or arc.head are not in the BN.\n"
		"pyagrum.InvalidArc\n"
		"    If variable in arc.head is not a NoisyOR variable.\n"
		"\n"
		""},
	 { "BayesNet_generateCPTs", _wrap_BayesNet_generateCPTs, METH_O, "\n"
		"\n"
		"Randomly generates CPTs for a given structure.\n"
		"\n"
		""},
	 { "BayesNet_generateCPT", _wrap_BayesNet_generateCPT, METH_VARARGS, "\n"
		"\n"
		"Randomly generate CPT for a given node in a given structure.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"node : Union[int,str]\n"
		"	a variable's id (int) or name\n"
		"\n"
		""},
	 { "BayesNet_changeTensor", _wrap_BayesNet_changeTensor, METH_VARARGS, "\n"
		"\n"
		"change the CPT associated to nodeId to newPot delete the old CPT associated to nodeId.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"var : Union[int,str]\n"
		"	the current name or the id of the variable\n"
		"newPot : pyagrum.Tensor\n"
		"	the new tensor\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.NotAllowed\n"
		"    If newPot has not the same signature as __probaMap[NodeId]\n"
		"\n"
		""},
	 { "BayesNet_dag", _wrap_BayesNet_dag, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"pyagrum.DAG\n"
		"	a constant reference to the dag of this BayesNet.\n"
		"\n"
		""},
	 { "BayesNet_size", _wrap_BayesNet_size, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"    the number of nodes in the graph\n"
		"\n"
		""},
	 { "BayesNet_log10DomainSize", _wrap_BayesNet_log10DomainSize, METH_O, "\n"
		"\n"
		"returns the log10 of the domain size of the model defined as the product of the domain sizes of the variables in the model.\n"
		"\n"
		"Returns\n"
		"-------\n"
		"float\n"
		"	the log10 domain size.\n"
		"\n"
		""},
	 { "BayesNet_ids", _wrap_BayesNet_ids, METH_VARARGS, "\n"
		"\n"
		"List of ids for a list of names of variables in the model\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"lov : List[str]\n"
		"  List of variable names\n"
		"\n"
		"Returns\n"
		"-------\n"
		"List[int]\n"
		"	The ids for the list of names of the graph variables\n"
		"\n"
		""},
	 { "BayesNet_nodeset", _wrap_BayesNet_nodeset, METH_VARARGS, "\n"
		"\n"
		"Set of ids for a list of names of variables in the model\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"lov : List[str]\n"
		"  List of variable names\n"
		"\n"
		"Returns\n"
		"-------\n"
		"Set[int]\n"
		"	The set of ids for the list of names of the graph variables\n"
		"\n"
		""},
	 { "BayesNet_minimalCondSet", _wrap_BayesNet_minimalCondSet, METH_VARARGS, "\n"
		"\n"
		"Returns, given one or many targets and a list of variables, the minimal set of those needed to calculate the target/targets.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"target : int\n"
		"	The id of the target\n"
		"targets : List[int]\n"
		"	The ids of the targets\n"
		"list : List[int]\n"
		"	The list of available variables\n"
		"\n"
		"Returns\n"
		"-------\n"
		"Set[int]\n"
		"	The minimal set of variables\n"
		"\n"
		""},
	 { "BayesNet_isIndependent", _wrap_BayesNet_isIndependent, METH_VARARGS, "\n"
		"\n"
		"check if nodes X and nodes Y are independent given nodes Z\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"X : str|int|List[str|int]\n"
		"      a list of of nodeIds or names\n"
		"Y : str|int|List[str|int]\n"
		"      a list of of nodeIds or names\n"
		"Z : str|int|List[str|int]\n"
		"      a list of of nodeIds or names\n"
		"\n"
		"Raises\n"
		"------\n"
		"InvalidArgument\n"
		"  if X and Y share variables\n"
		"\n"
		"Returns\n"
		"-------\n"
		"bool\n"
		"  True if X and Y are independent given Z in the model\n"
		"\n"
		""},
	 { "BayesNet_names", _wrap_BayesNet_names, METH_O, "\n"
		"\n"
		"Set of names of variables in the model\n"
		"\n"
		"Returns\n"
		"-------\n"
		"Set[str]\n"
		"	The names of the graph variables\n"
		"\n"
		""},
	 { "BayesNet_nodes", _wrap_BayesNet_nodes, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"Set[int]\n"
		"    the set of ids\n"
		"\n"
		""},
	 { "BayesNet_arcs", _wrap_BayesNet_arcs, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"list\n"
		"	The lisf of arcs in the IBayesNet\n"
		"\n"
		""},
	 { "BayesNet_parents", _wrap_BayesNet_parents, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id :\n"
		"	The id of the child node\n"
		"\n"
		"Returns\n"
		"-------\n"
		"Set\n"
		"    the set of the parents ids.\n"
		"\n"
		""},
	 { "BayesNet_children", _wrap_BayesNet_children, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id : int\n"
		"  the id of the parent\n"
		"\n"
		"Returns\n"
		"-------\n"
		"Set\n"
		"	the set of all the children\n"
		"\n"
		""},
	 { "BayesNet_family", _wrap_BayesNet_family, METH_VARARGS, "\n"
		"\n"
		"give the set of parents of a node and the node\n"
		"\n"
		"Parameters\n"
		"---------\n"
		"norid : str|int\n"
		"  the node\n"
		"\n"
		"Returns\n"
		"-------\n"
		"Set[int]\n"
		"  the set of nodeId of the family of the node `norid`\n"
		"\n"
		""},
	 { "BayesNet_descendants", _wrap_BayesNet_descendants, METH_VARARGS, "\n"
		"\n"
		"give the set of nodeid of descendants of a node\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"norid : str|int\n"
		"  the name or the id of the node\n"
		"\n"
		"Returns\n"
		"-------\n"
		"Set[int]\n"
		"  the set of ids of the descendants of node `norid`.\n"
		"\n"
		""},
	 { "BayesNet_ancestors", _wrap_BayesNet_ancestors, METH_VARARGS, "\n"
		"\n"
		"give the set of nodeid of ancestors of a node\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"norid : str|int\n"
		"  the name or the id of the node\n"
		"\n"
		"Returns\n"
		"-------\n"
		"Set[int]\n"
		"  the set of ids of the ancestors of node `norid`.\n"
		"\n"
		""},
	 { "BayesNet_moralizedAncestralGraph", _wrap_BayesNet_moralizedAncestralGraph, METH_VARARGS, "\n"
		"\n"
		"build a UndiGraph by moralizing the Ancestral Graph of a list of nodes\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"nodes : str|int|List[str|int]\n"
		"  the list of of nodeIds or names\n"
		"\n"
		"Warnings\n"
		"--------\n"
		"  gum.UndiGraph only knows NodeId. Hence the moralized ancestral graph does not include the names of the variables.graph\n"
		"\n"
		"Returns\n"
		"-------\n"
		"gum.UndiGraph\n"
		"  the moralized ancestral graph of the nodes\n"
		"\n"
		""},
	 { "BayesNet_loadBIF", _wrap_BayesNet_loadBIF, METH_VARARGS, "\n"
		"\n"
		"Load a BIF file.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"name : str\n"
		"	the file's name\n"
		"l : list\n"
		"	list of functions to execute\n"
		"\n"
		"Raises\n"
		"--------\n"
		"pyagrum.IOError\n"
		"    If file not found\n"
		"pyagrum.FatalError\n"
		"    If file is not valid\n"
		"\n"
		""},
	 { "BayesNet_saveBIF", _wrap_BayesNet_saveBIF, METH_VARARGS, "\n"
		"\n"
		"Save the BayesNet in a BIF file.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"name : str\n"
		"	the file's name\n"
		"allowModificationWhenSaving: bool\n"
		"        False by default.\n"
		"        if true, syntax errors are corrected when saving the file. If false, they throw a FatalError.\n"
		"\n"
		""},
	 { "BayesNet_loadDSL", _wrap_BayesNet_loadDSL, METH_VARARGS, "\n"
		"\n"
		"Load a DSL file.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"name : str\n"
		"	the file's name\n"
		"l : list\n"
		"	list of functions to execute\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.IOError\n"
		"    If file not found\n"
		"pyagrum.FatalError\n"
		"    If file is not valid\n"
		"\n"
		""},
	 { "BayesNet_loadXDSL", _wrap_BayesNet_loadXDSL, METH_VARARGS, "\n"
		"\n"
		"Load a XDSL file.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"name : str\n"
		"	the file's name\n"
		"l : list\n"
		"	list of functions to execute\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.IOError\n"
		"    If file not found\n"
		"pyagrum.FatalError\n"
		"    If file is not valid\n"
		"\n"
		""},
	 { "BayesNet_saveDSL", _wrap_BayesNet_saveDSL, METH_VARARGS, "\n"
		"\n"
		"Save the BayesNet in a DSL file.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"name : str\n"
		"	the file's name\n"
		"allowModificationWhenSaving: bool\n"
		"        False by default.\n"
		"        if true, syntax errors are corrected when saving the file. If false, they throw a FatalError.\n"
		"\n"
		""},
	 { "BayesNet_saveXDSL", _wrap_BayesNet_saveXDSL, METH_VARARGS, "\n"
		"\n"
		"Save the BayesNet in a XDSL file.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"name : str\n"
		"	the file's name\n"
		"allowModificationWhenSaving: bool\n"
		"        (not used).\n"
		"        if true, syntax errors are corrected when saving the file. If false, they throw a FatalError.\n"
		"\n"
		""},
	 { "BayesNet_loadNET", _wrap_BayesNet_loadNET, METH_VARARGS, "\n"
		"\n"
		"Load a NET file.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"name : str\n"
		"	the name's file\n"
		"l : list\n"
		"	list of functions to execute\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.IOError\n"
		"    If file not found\n"
		"pyagrum.FatalError\n"
		"    If file is not valid\n"
		"\n"
		""},
	 { "BayesNet_saveNET", _wrap_BayesNet_saveNET, METH_VARARGS, "\n"
		"\n"
		"Save the BayesNet in a NET file.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"name : str\n"
		"	the file's name\n"
		"allowModificationWhenSaving: bool\n"
		"        False by default.\n"
		"        if true, syntax errors are corrected when saving the file. If false, they throw a FatalError.\n"
		"\n"
		""},
	 { "BayesNet_loadO3PRM", _wrap_BayesNet_loadO3PRM, METH_VARARGS, "\n"
		"\n"
		"Load an O3PRM file.\n"
		"\n"
		"Warnings\n"
		"--------\n"
		"The O3PRM language is the only language allowing to manipulate not only DiscretizedVariable but also RangeVariable and LabelizedVariable.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"name : str\n"
		"	the file's name\n"
		"system : str\n"
		"	the system's name\n"
		"classpath : str\n"
		"	the classpath\n"
		"l : list\n"
		"	list of functions to execute\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.IOError\n"
		"    If file not found\n"
		"pyagrum.FatalError\n"
		"    If file is not valid\n"
		"\n"
		""},
	 { "BayesNet_saveO3PRM", _wrap_BayesNet_saveO3PRM, METH_VARARGS, "\n"
		"\n"
		"Save the BayesNet in an O3PRM file.\n"
		"\n"
		"Warnings\n"
		"--------\n"
		"The O3PRM language is the only language allowing to manipulate not only DiscretizedVariable but also RangeVariable and LabelizedVariable.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"name : str\n"
		"	the file's name\n"
		"allowModificationWhenSaving: bool\n"
		"        False by default.\n"
		"        if true, syntax errors are corrected when saving the file. If false, they throw a FatalError.\n"
		"\n"
		""},
	 { "BayesNet_loadBIFXML", _wrap_BayesNet_loadBIFXML, METH_VARARGS, "\n"
		"\n"
		"Load a BIFXML file.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"name : str\n"
		"	the name's file\n"
		"l : list\n"
		"	list of functions to execute\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.IOError\n"
		"    If file not found\n"
		"pyagrum.FatalError\n"
		"    If file is not valid\n"
		"\n"
		""},
	 { "BayesNet_saveBIFXML", _wrap_BayesNet_saveBIFXML, METH_VARARGS, "\n"
		"\n"
		"Save the BayesNet in a BIFXML file.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"name : str\n"
		"	the file's name\n"
		"allowModificationWhenSaving: bool\n"
		"        False by default.\n"
		"        if true, syntax errors are corrected when saving the file. If false, they throw a FatalError.\n"
		"\n"
		""},
	 { "BayesNet_loadUAI", _wrap_BayesNet_loadUAI, METH_VARARGS, "\n"
		"\n"
		"Load an UAI file.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"name : str\n"
		"	the name's file\n"
		"l : list\n"
		"	list of functions to execute\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.IOError\n"
		"    If file not found\n"
		"pyagrum.FatalError\n"
		"    If file is not valid\n"
		"\n"
		""},
	 { "BayesNet_saveUAI", _wrap_BayesNet_saveUAI, METH_VARARGS, "\n"
		"\n"
		"Save the BayesNet in an UAI file.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"name : str\n"
		"	the file's name\n"
		"allowModificationWhenSaving: bool\n"
		"        False by default.\n"
		"        if true, syntax errors are corrected when saving the file. If false, they throw a FatalError.\n"
		"\n"
		""},
	 { "BayesNet___repr__", _wrap_BayesNet___repr__, METH_O, NULL},
	 { "BayesNet___str__", _wrap_BayesNet___str__, METH_O, NULL},
	 { "BayesNet_swigregister", BayesNet_swigregister, METH_O, NULL},
	 { "BayesNet_swiginit", BayesNet_swiginit, METH_VARARGS, NULL},
	 { "new_BayesNetFragment", _wrap_new_BayesNetFragment, METH_O, NULL},
	 { "delete_BayesNetFragment", _wrap_delete_BayesNetFragment, METH_O, NULL},
	 { "BayesNetFragment_whenNodeAdded", _wrap_BayesNetFragment_whenNodeAdded, METH_VARARGS, NULL},
	 { "BayesNetFragment_whenNodeDeleted", _wrap_BayesNetFragment_whenNodeDeleted, METH_VARARGS, NULL},
	 { "BayesNetFragment_whenArcAdded", _wrap_BayesNetFragment_whenArcAdded, METH_VARARGS, NULL},
	 { "BayesNetFragment_whenArcDeleted", _wrap_BayesNetFragment_whenArcDeleted, METH_VARARGS, NULL},
	 { "BayesNetFragment_cpt", _wrap_BayesNetFragment_cpt, METH_VARARGS, "\n"
		"\n"
		"Returns the CPT of a variable.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"VarId : int\n"
		"	A variable's id in the pyagrum.IBayesNet.\n"
		"name : str\n"
		"	A variable's name in the pyagrum.IBayesNet.\n"
		"\n"
		"Returns\n"
		"-------\n"
		"pyagrum.Tensor\n"
		"	The variable's CPT.\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.NotFound\n"
		"	If no variable's id matches varId.\n"
		"\n"
		""},
	 { "BayesNetFragment_variableNodeMap", _wrap_BayesNetFragment_variableNodeMap, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"pyagrum.variableNodeMap\n"
		"	the variable node map\n"
		"\n"
		""},
	 { "BayesNetFragment_variable", _wrap_BayesNetFragment_variable, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id : int\n"
		"	a variable's id\n"
		"name : str\n"
		"	a variable's name\n"
		"\n"
		"Returns\n"
		"-------\n"
		"pyagrum.DiscreteVariable\n"
		"	the variable\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.IndexError\n"
		"	If the graph does not contain the variable\n"
		"\n"
		""},
	 { "BayesNetFragment_nodeId", _wrap_BayesNetFragment_nodeId, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"var : pyagrum.DiscreteVariable\n"
		"	a variable\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"	the id of the variable\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.IndexError\n"
		"	If the graph does not contain the variable\n"
		"\n"
		""},
	 { "BayesNetFragment_idFromName", _wrap_BayesNetFragment_idFromName, METH_VARARGS, "\n"
		"\n"
		"Returns a variable's id given its name in the graph.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"name : str\n"
		"	The variable's name from which the id is returned.\n"
		"\n"
		"Notes\n"
		"-----\n"
		"  A convenient shortcut for `g.variableFromName(name)` is `g[name]`.\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int :\n"
		"	The variable's node id.\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.NotFound\n"
		"	If name does not match a variable in the graph\n"
		"\n"
		""},
	 { "BayesNetFragment_variableFromName", _wrap_BayesNetFragment_variableFromName, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"name : str\n"
		"	a variable's name\n"
		"\n"
		"Returns\n"
		"-------\n"
		"pyagrum.DiscreteVariable\n"
		"	the variable\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.IndexError\n"
		"	If the graph does not contain the variable\n"
		"\n"
		""},
	 { "BayesNetFragment_toDot", _wrap_BayesNetFragment_toDot, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"str\n"
		"    a friendly display of the graph in DOT format\n"
		"\n"
		""},
	 { "BayesNetFragment_isInstalledNode", _wrap_BayesNetFragment_isInstalledNode, METH_VARARGS, "\n"
		"\n"
		"Check if a node is in the fragment\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"n : int, str\n"
		"	the id or the name of the variable.\n"
		"\n"
		""},
	 { "BayesNetFragment_installNode", _wrap_BayesNetFragment_installNode, METH_VARARGS, "\n"
		"\n"
		"Add a node to the fragment. The arcs that can be added between installed nodes are created.\n"
		"No specific CPT are created. Then either the parents of the node are already in the fragment\n"
		"and the node is consistant, or the parents are not in the fragment and the node is not consistant.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"n : int, str\n"
		"	the id or the name of the variable.\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.NotFound\n"
		"  if the node is not found.\n"
		"\n"
		""},
	 { "BayesNetFragment_installAscendants", _wrap_BayesNetFragment_installAscendants, METH_VARARGS, "\n"
		"\n"
		"Add the variable and all its ascendants in the fragment. No inconsistant node are created.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"n : int, str\n"
		"	the id or the name of the variable.\n"
		"\n"
		"Raises\n"
		"------\n"
		"  pyagrum.NotFound\n"
		"  if the node is not found.\n"
		"\n"
		""},
	 { "BayesNetFragment_uninstallNode", _wrap_BayesNetFragment_uninstallNode, METH_VARARGS, "\n"
		"\n"
		"Remove a node from the fragment. The fragment can become inconsistant.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"n : int, str\n"
		"	the id or the name of the variable.\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.NotFound\n"
		"  if the node is not found.\n"
		"\n"
		""},
	 { "BayesNetFragment_installMarginal", _wrap_BayesNetFragment_installMarginal, METH_VARARGS, "\n"
		"\n"
		"Install a local marginal for a node. Doing so, it removes the parents of the node in the fragment.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"n : int, str\n"
		"	the id or the name of the variable.\n"
		"pot : Tensor\n"
		"  the Tensor (marginal) to install\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.NotFound\n"
		"  if the node is not found.\n"
		"\n"
		""},
	 { "BayesNetFragment_installCPT", _wrap_BayesNetFragment_installCPT, METH_VARARGS, "\n"
		"\n"
		"Install a local CPT for a node. Doing so, it changes the parents of the node in the fragment.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"n : int, str\n"
		"	the id or the name of the variable.\n"
		"pot : Tensor\n"
		"  the Tensor to install\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.NotFound\n"
		"  if the node is not found.\n"
		"\n"
		""},
	 { "BayesNetFragment_uninstallCPT", _wrap_BayesNetFragment_uninstallCPT, METH_VARARGS, "\n"
		"\n"
		"Remove a local CPT. The fragment can become inconsistant.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"n : int, str\n"
		"	the id or the name of the variable.\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.NotFound\n"
		"  if the node is not found.\n"
		"\n"
		""},
	 { "BayesNetFragment_checkConsistency", _wrap_BayesNetFragment_checkConsistency, METH_VARARGS, "\n"
		"\n"
		"If a variable is added to the fragment but not its parents, there is no CPT consistant for this variable. This function checks the consistency for a variable of for all.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"\n"
		"n : int, str (optional)\n"
		"	the id or the name of the variable. If no argument, the function checks all the variables.\n"
		"\n"
		"Returns\n"
		"-------\n"
		"boolean\n"
		"	True if the variable(s) is consistant.\n"
		"\n"
		"Raises\n"
		"------\n"
		"  pyagrum.NotFound\n"
		"  if the node is not found.\n"
		"\n"
		""},
	 { "BayesNetFragment_toBN", _wrap_BayesNetFragment_toBN, METH_O, "\n"
		"\n"
		"Create a BayesNet from a fragment.\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.OperationNotAllowed\n"
		"  if the fragment is not consistent.\n"
		"\n"
		""},
	 { "BayesNetFragment_dag", _wrap_BayesNetFragment_dag, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"pyagrum.DAG\n"
		"	a constant reference to the dag of this BayesNet.\n"
		"\n"
		""},
	 { "BayesNetFragment_ids", _wrap_BayesNetFragment_ids, METH_VARARGS, "\n"
		"\n"
		"List of ids for a list of names of variables in the model\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"lov : List[str]\n"
		"  List of variable names\n"
		"\n"
		"Returns\n"
		"-------\n"
		"List[int]\n"
		"	The ids for the list of names of the graph variables\n"
		"\n"
		""},
	 { "BayesNetFragment_nodeset", _wrap_BayesNetFragment_nodeset, METH_VARARGS, "\n"
		"\n"
		"Set of ids for a list of names of variables in the model\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"lov : List[str]\n"
		"  List of variable names\n"
		"\n"
		"Returns\n"
		"-------\n"
		"Set[int]\n"
		"	The set of ids for the list of names of the graph variables\n"
		"\n"
		""},
	 { "BayesNetFragment_minimalCondSet", _wrap_BayesNetFragment_minimalCondSet, METH_VARARGS, "\n"
		"\n"
		"Returns, given one or many targets and a list of variables, the minimal set of those needed to calculate the target/targets.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"target : int\n"
		"	The id of the target\n"
		"targets : List[int]\n"
		"	The ids of the targets\n"
		"list : List[int]\n"
		"	The list of available variables\n"
		"\n"
		"Returns\n"
		"-------\n"
		"Set[int]\n"
		"	The minimal set of variables\n"
		"\n"
		""},
	 { "BayesNetFragment_isIndependent", _wrap_BayesNetFragment_isIndependent, METH_VARARGS, "\n"
		"\n"
		"check if nodes X and nodes Y are independent given nodes Z\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"X : str|int|List[str|int]\n"
		"      a list of of nodeIds or names\n"
		"Y : str|int|List[str|int]\n"
		"      a list of of nodeIds or names\n"
		"Z : str|int|List[str|int]\n"
		"      a list of of nodeIds or names\n"
		"\n"
		"Raises\n"
		"------\n"
		"InvalidArgument\n"
		"  if X and Y share variables\n"
		"\n"
		"Returns\n"
		"-------\n"
		"bool\n"
		"  True if X and Y are independent given Z in the model\n"
		"\n"
		""},
	 { "BayesNetFragment_names", _wrap_BayesNetFragment_names, METH_O, "\n"
		"\n"
		"Set of names of variables in the model\n"
		"\n"
		"Returns\n"
		"-------\n"
		"Set[str]\n"
		"	The names of the graph variables\n"
		"\n"
		""},
	 { "BayesNetFragment_nodes", _wrap_BayesNetFragment_nodes, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"Set[int]\n"
		"    the set of ids\n"
		"\n"
		""},
	 { "BayesNetFragment_arcs", _wrap_BayesNetFragment_arcs, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"list\n"
		"	The lisf of arcs in the IBayesNet\n"
		"\n"
		""},
	 { "BayesNetFragment_parents", _wrap_BayesNetFragment_parents, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id :\n"
		"	The id of the child node\n"
		"\n"
		"Returns\n"
		"-------\n"
		"Set\n"
		"    the set of the parents ids.\n"
		"\n"
		""},
	 { "BayesNetFragment_children", _wrap_BayesNetFragment_children, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id : int\n"
		"  the id of the parent\n"
		"\n"
		"Returns\n"
		"-------\n"
		"Set\n"
		"	the set of all the children\n"
		"\n"
		""},
	 { "BayesNetFragment_family", _wrap_BayesNetFragment_family, METH_VARARGS, "\n"
		"\n"
		"give the set of parents of a node and the node\n"
		"\n"
		"Parameters\n"
		"---------\n"
		"norid : str|int\n"
		"  the node\n"
		"\n"
		"Returns\n"
		"-------\n"
		"Set[int]\n"
		"  the set of nodeId of the family of the node `norid`\n"
		"\n"
		""},
	 { "BayesNetFragment_descendants", _wrap_BayesNetFragment_descendants, METH_VARARGS, "\n"
		"\n"
		"give the set of nodeid of descendants of a node\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"norid : str|int\n"
		"  the name or the id of the node\n"
		"\n"
		"Returns\n"
		"-------\n"
		"Set[int]\n"
		"  the set of ids of the descendants of node `norid`.\n"
		"\n"
		""},
	 { "BayesNetFragment_ancestors", _wrap_BayesNetFragment_ancestors, METH_VARARGS, "\n"
		"\n"
		"give the set of nodeid of ancestors of a node\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"norid : str|int\n"
		"  the name or the id of the node\n"
		"\n"
		"Returns\n"
		"-------\n"
		"Set[int]\n"
		"  the set of ids of the ancestors of node `norid`.\n"
		"\n"
		""},
	 { "BayesNetFragment_moralizedAncestralGraph", _wrap_BayesNetFragment_moralizedAncestralGraph, METH_VARARGS, "\n"
		"\n"
		"build a UndiGraph by moralizing the Ancestral Graph of a list of nodes\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"nodes : str|int|List[str|int]\n"
		"  the list of of nodeIds or names\n"
		"\n"
		"Warnings\n"
		"--------\n"
		"  gum.UndiGraph only knows NodeId. Hence the moralized ancestral graph does not include the names of the variables.graph\n"
		"\n"
		"Returns\n"
		"-------\n"
		"gum.UndiGraph\n"
		"  the moralized ancestral graph of the nodes\n"
		"\n"
		""},
	 { "BayesNetFragment_swigregister", BayesNetFragment_swigregister, METH_O, NULL},
	 { "BayesNetFragment_swiginit", BayesNetFragment_swiginit, METH_VARARGS, NULL},
	 { "new_LazyPropagation", _wrap_new_LazyPropagation, METH_VARARGS, NULL},
	 { "delete_LazyPropagation", _wrap_delete_LazyPropagation, METH_O, NULL},
	 { "LazyPropagation_setTriangulation", _wrap_LazyPropagation_setTriangulation, METH_VARARGS, NULL},
	 { "LazyPropagation_setRelevantTensorsFinderType", _wrap_LazyPropagation_setRelevantTensorsFinderType, METH_VARARGS, "\n"
		"\n"
		"sets how we determine the relevant tensors to combine\n"
		"\n"
		"When a clique sends a message to a separator, it first constitute the set of the tensors it contains and of the tensors contained in the messages it received. If RelevantTensorsFinderType = FIND_ALL, all these tensors are combined and projected to produce the message sent to the separator. If RelevantTensorsFinderType = DSEP_BAYESBALL_NODES, then only the set of tensors d-connected to the variables of the separator are kept for combination and projection.\n"
		"\n"
		"0 = FIND_ALL\n"
		"1 = DSEP_BAYESBALL_NODES\n"
		"2 = DSEP_BAYESBALL_TENSORS\n"
		"3 = DSEP_KOLLER_FRIEDMAN_2009\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"type : int\n"
		"  the finder type\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.InvalidArgument\n"
		"  If type is not implemented\n"
		"\n"
		""},
	 { "LazyPropagation_setFindBarrenNodesType", _wrap_LazyPropagation_setFindBarrenNodesType, METH_VARARGS, "\n"
		"\n"
		"sets how we determine barren nodes\n"
		"\n"
		"Barren nodes are unnecessary for probability inference, so they can be safely discarded in this case (type = FIND_BARREN_NODES). This speeds-up inference. However, there are some cases in which we do not want to remove barren nodes, typically when we want to answer queries such as Most Probable Explanations (MPE).\n"
		"\n"
		"0 = FIND_NO_BARREN_NODES\n"
		"1 = FIND_BARREN_NODES\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"type : int\n"
		"  the finder type\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.InvalidArgument\n"
		"  If type is not implemented\n"
		"\n"
		""},
	 { "LazyPropagation_joinTree", _wrap_LazyPropagation_joinTree, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"pyagrum.CliqueGraph\n"
		"  the current join tree used\n"
		"\n"
		""},
	 { "LazyPropagation_junctionTree", _wrap_LazyPropagation_junctionTree, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"pyagrum.CliqueGraph\n"
		"  the current junction tree\n"
		"\n"
		""},
	 { "LazyPropagation_evidenceProbability", _wrap_LazyPropagation_evidenceProbability, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"float\n"
		"  the probability of evidence\n"
		"\n"
		""},
	 { "LazyPropagation_mpe", _wrap_LazyPropagation_mpe, METH_O, "\n"
		"\n"
		"Find the Most Probable Explanation (MPE) given the evidence (if any) added into LazyPropagation\n"
		"\n"
		"Returns\n"
		"-------\n"
		"pyagrum.Instantiation\n"
		"  An instantiation of all the variables of the Bayes net representing the Most Probable Explanation.\n"
		"\n"
		""},
	 { "LazyPropagation_mpeLog2Posterior", _wrap_LazyPropagation_mpeLog2Posterior, METH_O, "\n"
		"\n"
		"Find the Most Probable Explanation (MPE) given the evidence (if any) added into LazyPropagation as well as the log2 of its posterior probability\n"
		"\n"
		"Returns\n"
		"-------\n"
		"Tuple[pyagrum.Instantiation, float]\n"
		"    A tuple with the instantiation of all the variables of the Bayes net representing the Most Probable Explanation and the log2 of its posterior probability\n"
		"\n"
		""},
	 { "LazyPropagation_makeInference", _wrap_LazyPropagation_makeInference, METH_O, "\n"
		"\n"
		"Perform the heavy computations needed to compute the targets' posteriors\n"
		"\n"
		"In a Junction tree propagation scheme, for instance, the heavy computations are those of the messages sent in the JT.\n"
		"This is precisely what makeInference should compute. Later, the computations of the posteriors can be done 'lightly' by multiplying and projecting those messages.\n"
		"\n"
		""},
	 { "LazyPropagation_addEvidence", _wrap_LazyPropagation_addEvidence, METH_VARARGS, "\n"
		"\n"
		"Adds a new evidence on a node (might be soft or hard).\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id : int\n"
		"  a node Id\n"
		"nodeName : int\n"
		"  a node name\n"
		"val :\n"
		"  (int) a node value\n"
		"val :\n"
		"  (str) the label of the node value\n"
		"vals : list\n"
		"  a list of values\n"
		"\n"
		"Raises\n"
		"------\n"
		"  pyagrum.InvalidArgument\n"
		"    If the node already has an evidence\n"
		"  pyagrum.InvalidArgument\n"
		"    If val is not a value for the node\n"
		"  pyagrum.InvalidArgument\n"
		"    If the size of vals is different from the domain side of the node\n"
		"  pyagrum.FatalError\n"
		"    If vals is a vector of 0s\n"
		"  pyagrum.UndefinedElement\n"
		"    If the node does not belong to the Bayesian network\n"
		"\n"
		""},
	 { "LazyPropagation_chgEvidence", _wrap_LazyPropagation_chgEvidence, METH_VARARGS, "\n"
		"\n"
		"Change the value of an already existing evidence on a node (might be soft or hard).\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id : int\n"
		"  a node Id\n"
		"nodeName : int\n"
		"  a node name\n"
		"val : int|str\n"
		"  a node value or the label of the node value\n"
		"vals : List[float]\n"
		"  a list of values\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.InvalidArgument\n"
		"  If the node does not already have an evidence\n"
		"pyagrum.InvalidArgument\n"
		"  If val is not a value for the node\n"
		"pyagrum.InvalidArgument\n"
		"  If the size of vals is different from the domain side of the node\n"
		"pyagrum.FatalError\n"
		"  If vals is a vector of 0s\n"
		"pyagrum.UndefinedElement\n"
		"  If the node does not belong to the Bayesian network\n"
		"\n"
		""},
	 { "LazyPropagation_hasEvidence", _wrap_LazyPropagation_hasEvidence, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id : int\n"
		"  a node Id\n"
		"nodeName : str\n"
		"  a node name\n"
		"\n"
		"Returns\n"
		"-------\n"
		"bool\n"
		"  True if some node(s) (or the one in parameters) have received evidence\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.IndexError\n"
		"  If the node does not belong to the Bayesian network\n"
		"\n"
		""},
	 { "LazyPropagation_eraseAllEvidence", _wrap_LazyPropagation_eraseAllEvidence, METH_O, "\n"
		"\n"
		"Removes all the evidence entered into the network.\n"
		"\n"
		""},
	 { "LazyPropagation_eraseEvidence", _wrap_LazyPropagation_eraseEvidence, METH_VARARGS, "\n"
		"\n"
		"Remove the evidence, if any, corresponding to the node Id or name.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id : int\n"
		"  a node Id\n"
		"nodeName : int\n"
		"  a node name\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.IndexError\n"
		"  If the node does not belong to the Bayesian network\n"
		"\n"
		""},
	 { "LazyPropagation_hasHardEvidence", _wrap_LazyPropagation_hasHardEvidence, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id : int\n"
		"  a node Id\n"
		"nodeName : str\n"
		"  a node name\n"
		"\n"
		"Returns\n"
		"-------\n"
		"bool\n"
		"  True if node has received a hard evidence\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.IndexError\n"
		"  If the node does not belong to the Bayesian network\n"
		"\n"
		""},
	 { "LazyPropagation_hasSoftEvidence", _wrap_LazyPropagation_hasSoftEvidence, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id : int\n"
		"  a node Id\n"
		"nodeName : str\n"
		"  a node name\n"
		"\n"
		"Returns\n"
		"-------\n"
		"bool\n"
		"  True if node has received a soft evidence\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.IndexError\n"
		"  If the node does not belong to the Bayesian network\n"
		"\n"
		""},
	 { "LazyPropagation_nbrEvidence", _wrap_LazyPropagation_nbrEvidence, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"  the number of evidence entered into the Bayesian network\n"
		"\n"
		""},
	 { "LazyPropagation_nbrHardEvidence", _wrap_LazyPropagation_nbrHardEvidence, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"  the number of hard evidence entered into the Bayesian network\n"
		"\n"
		""},
	 { "LazyPropagation_nbrSoftEvidence", _wrap_LazyPropagation_nbrSoftEvidence, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"  the number of soft evidence entered into the Bayesian network\n"
		"\n"
		""},
	 { "LazyPropagation_eraseAllTargets", _wrap_LazyPropagation_eraseAllTargets, METH_O, "\n"
		"\n"
		"Clear all previously defined targets (marginal and joint targets).\n"
		"\n"
		"As a result, no posterior can be computed (since we can only compute the posteriors of the marginal or joint targets that have been added by the user).\n"
		"\n"
		""},
	 { "LazyPropagation_addAllTargets", _wrap_LazyPropagation_addAllTargets, METH_O, "\n"
		"\n"
		"Add all the nodes as targets.\n"
		"\n"
		""},
	 { "LazyPropagation_addTarget", _wrap_LazyPropagation_addTarget, METH_VARARGS, "\n"
		"\n"
		"Add a marginal target to the list of targets.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"target : int\n"
		"  a node Id\n"
		"nodeName : str\n"
		"  a node name\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.UndefinedElement\n"
		"  If target is not a NodeId in the Bayes net\n"
		"\n"
		""},
	 { "LazyPropagation_eraseTarget", _wrap_LazyPropagation_eraseTarget, METH_VARARGS, "\n"
		"\n"
		"Remove, if existing, the marginal target.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"target : int\n"
		"  a node Id\n"
		"nodeName : int\n"
		"  a node name\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.IndexError\n"
		"  If one of the node does not belong to the Bayesian network\n"
		"pyagrum.UndefinedElement\n"
		"  If node Id is not in the Bayesian network\n"
		"\n"
		""},
	 { "LazyPropagation_isTarget", _wrap_LazyPropagation_isTarget, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"variable : int\n"
		" a node Id\n"
		"nodeName : str\n"
		"  a node name\n"
		"\n"
		"Returns\n"
		"-------\n"
		"bool\n"
		"  True if variable is a (marginal) target\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.IndexError\n"
		"  If the node does not belong to the Bayesian network\n"
		"pyagrum.UndefinedElement\n"
		"  If node Id is not in the Bayesian network\n"
		"\n"
		""},
	 { "LazyPropagation_nbrTargets", _wrap_LazyPropagation_nbrTargets, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"  the number of marginal targets\n"
		"\n"
		""},
	 { "LazyPropagation_H", _wrap_LazyPropagation_H, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"X : int\n"
		"  a node Id\n"
		"nodeName : str\n"
		"  a node name\n"
		"\n"
		"Returns\n"
		"-------\n"
		"float\n"
		"  the computed Shanon's entropy of a node given the observation\n"
		"\n"
		""},
	 { "LazyPropagation_BN", _wrap_LazyPropagation_BN, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"pyagrum.IBayesNet\n"
		"  A constant reference over the IBayesNet referenced by this class.\n"
		"\n"
		"Raises\n"
		"------\n"
		"  pyagrum.UndefinedElement\n"
		"    If no Bayes net has been assigned to the inference.\n"
		"\n"
		""},
	 { "LazyPropagation_posterior", _wrap_LazyPropagation_posterior, METH_VARARGS, "\n"
		"\n"
		"Computes and returns the posterior of a node.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"var : int\n"
		"  the node Id of the node for which we need a posterior probability\n"
		"nodeName : str\n"
		"  the node name of the node for which we need a posterior probability\n"
		"\n"
		"Returns\n"
		"-------\n"
		"pyagrum.Tensor\n"
		"  a const ref to the posterior probability of the node\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.UndefinedElement\n"
		"  If an element of nodes is not in targets\n"
		"\n"
		""},
	 { "LazyPropagation_eraseAllJointTargets", _wrap_LazyPropagation_eraseAllJointTargets, METH_O, "\n"
		"\n"
		"Clear all previously defined joint targets.\n"
		"\n"
		""},
	 { "LazyPropagation_eraseAllMarginalTargets", _wrap_LazyPropagation_eraseAllMarginalTargets, METH_O, "\n"
		"\n"
		"Clear all the previously defined marginal targets.\n"
		"\n"
		""},
	 { "LazyPropagation_nbrJointTargets", _wrap_LazyPropagation_nbrJointTargets, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"  the number of joint targets\n"
		"\n"
		""},
	 { "LazyPropagation_setNumberOfThreads", _wrap_LazyPropagation_setNumberOfThreads, METH_VARARGS, "\n"
		"\n"
		"If the argument nb is different from 0, this number of threads will be used during inferences, hence overriding aGrUM's default number of threads.\n"
		"If, on the contrary, nb is equal to 0, the parallelized inference engine will comply with aGrUM's default number of threads.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"nb : int\n"
		"	the number of threads to be used by ShaferShenoyMRFInference\n"
		"\n"
		""},
	 { "LazyPropagation_getNumberOfThreads", _wrap_LazyPropagation_getNumberOfThreads, METH_O, "\n"
		"\n"
		"returns the number of threads used by LazyPropagation during inferences.\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"	the number of threads used by LazyPropagation during inferences\n"
		"\n"
		""},
	 { "LazyPropagation_isGumNumberOfThreadsOverriden", _wrap_LazyPropagation_isGumNumberOfThreadsOverriden, METH_O, "\n"
		"\n"
		"Indicates whether LazyPropagation currently overrides aGrUM's default number of threads (see method setNumberOfThreads).\n"
		"\n"
		"Returns\n"
		"-------\n"
		"bool\n"
		"	A Boolean indicating whether LazyPropagation currently overrides aGrUM's default number of threads\n"
		"\n"
		""},
	 { "LazyPropagation_setMaxMemory", _wrap_LazyPropagation_setMaxMemory, METH_VARARGS, "\n"
		"\n"
		"sets an upper bound on the memory consumption admissible\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"gigabytes: float\n"
		"  this upper bound in gigabytes.\n"
		"\n"
		""},
	 { "LazyPropagation_setEvidence", _wrap_LazyPropagation_setEvidence, METH_VARARGS, NULL},
	 { "LazyPropagation_updateEvidence", _wrap_LazyPropagation_updateEvidence, METH_VARARGS, NULL},
	 { "LazyPropagation_setTargets", _wrap_LazyPropagation_setTargets, METH_VARARGS, NULL},
	 { "LazyPropagation_hardEvidenceNodes", _wrap_LazyPropagation_hardEvidenceNodes, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"set\n"
		"  the set of nodes with hard evidence\n"
		"\n"
		""},
	 { "LazyPropagation_softEvidenceNodes", _wrap_LazyPropagation_softEvidenceNodes, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"set\n"
		"  the set of nodes with soft evidence\n"
		"\n"
		""},
	 { "LazyPropagation_targets", _wrap_LazyPropagation_targets, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"list\n"
		"  the list of marginal targets\n"
		"\n"
		""},
	 { "LazyPropagation_evidenceImpact", _wrap_LazyPropagation_evidenceImpact, METH_VARARGS, "\n"
		"\n"
		"Create a pyagrum.Tensor for P(target|evs) (for all instanciation of target and evs)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"target : set\n"
		"  a set of targets ids or names.\n"
		"evs : set\n"
		"  a set of nodes ids or names.\n"
		"\n"
		"Warnings\n"
		"--------\n"
		"if some evs are d-separated, they are not included in the Tensor.\n"
		"\n"
		"Returns\n"
		"-------\n"
		"pyagrum.Tensor\n"
		"  a Tensor for P(targets|evs)\n"
		"\n"
		""},
	 { "LazyPropagation_jointMutualInformation", _wrap_LazyPropagation_jointMutualInformation, METH_VARARGS, NULL},
	 { "LazyPropagation_evidenceJointImpact", _wrap_LazyPropagation_evidenceJointImpact, METH_VARARGS, "\n"
		"\n"
		"Create a pyagrum.Tensor for P(joint targets|evs) (for all instanciation of targets and evs)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"targets : List[int|str]\n"
		"  a list of node Ids or node names\n"
		"evs : Set[int|str]\n"
		"  a set of nodes ids or names.\n"
		"\n"
		"Returns\n"
		"-------\n"
		"pyagrum.Tensor\n"
		"  a Tensor for P(target|evs)\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.Exception\n"
		"  If some evidene entered into the Bayes net are incompatible (their joint proba = 0)\n"
		"\n"
		""},
	 { "LazyPropagation_jointPosterior", _wrap_LazyPropagation_jointPosterior, METH_VARARGS, "\n"
		"\n"
		"Compute the joint posterior of a set of nodes.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"list :\n"
		"  the list of nodes whose posterior joint probability is wanted\n"
		"\n"
		"\n"
		"Warnings\n"
		"--------\n"
		"The order of the variables given by the list here or when the jointTarget is declared can not be assumed to be used by the Tensor.\n"
		"\n"
		"Returns\n"
		"-------\n"
		"pyagrum.Tensor\n"
		"  a const ref to the posterior joint probability of the set of nodes.\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.UndefinedElement\n"
		"  If an element of nodes is not in targets\n"
		"\n"
		""},
	 { "LazyPropagation_addJointTarget", _wrap_LazyPropagation_addJointTarget, METH_VARARGS, "\n"
		"\n"
		"Add a list of nodes as a new joint target. As a collateral effect, every node is added as a marginal target.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"list\n"
		"  a list of names of nodes\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.UndefinedElement\n"
		"  If some node(s) do not belong to the Bayesian network\n"
		"\n"
		""},
	 { "LazyPropagation_eraseJointTarget", _wrap_LazyPropagation_eraseJointTarget, METH_VARARGS, "\n"
		"\n"
		"Remove, if existing, the joint target.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"list\n"
		"  a list of names or Ids of nodes\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.IndexError\n"
		"  If one of the node does not belong to the Bayesian network\n"
		"pyagrum.UndefinedElement\n"
		"  If node Id is not in the Bayesian network\n"
		"\n"
		""},
	 { "LazyPropagation_isJointTarget", _wrap_LazyPropagation_isJointTarget, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"list\n"
		"  a list of nodes ids or names.\n"
		"\n"
		"Returns\n"
		"-------\n"
		"bool\n"
		"  True if target is a joint target.\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.IndexError\n"
		"  If the node does not belong to the Bayesian network\n"
		"pyagrum.UndefinedElement\n"
		"  If node Id is not in the Bayesian network\n"
		"\n"
		""},
	 { "LazyPropagation_jointTargets", _wrap_LazyPropagation_jointTargets, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"list\n"
		"  the list of target sets\n"
		"\n"
		""},
	 { "LazyPropagation_swigregister", LazyPropagation_swigregister, METH_O, NULL},
	 { "LazyPropagation_swiginit", LazyPropagation_swiginit, METH_VARARGS, NULL},
	 { "new_ShaferShenoyInference", _wrap_new_ShaferShenoyInference, METH_VARARGS, NULL},
	 { "delete_ShaferShenoyInference", _wrap_delete_ShaferShenoyInference, METH_O, NULL},
	 { "ShaferShenoyInference_setTriangulation", _wrap_ShaferShenoyInference_setTriangulation, METH_VARARGS, NULL},
	 { "ShaferShenoyInference_setRelevantTensorsFinderType", _wrap_ShaferShenoyInference_setRelevantTensorsFinderType, METH_VARARGS, "\n"
		"\n"
		"sets how we determine the relevant tensors to combine\n"
		"\n"
		"When a clique sends a message to a separator, it first constitute the set of the tensors it contains and of the tensors contained in the messages it received. If RelevantTensorsFinderType = FIND_ALL, all these tensors are combined and projected to produce the message sent to the separator. If RelevantTensorsFinderType = DSEP_BAYESBALL_NODES, then only the set of tensors d-connected to the variables of the separator are kept for combination and projection.\n"
		"\n"
		"0 = FIND_ALL\n"
		"1 = DSEP_BAYESBALL_NODES\n"
		"2 = DSEP_BAYESBALL_TENSORS\n"
		"3 = DSEP_KOLLER_FRIEDMAN_2009\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"type : int\n"
		"  the finder type\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.InvalidArgument\n"
		"  If type is not implemented\n"
		"\n"
		""},
	 { "ShaferShenoyInference_setFindBarrenNodesType", _wrap_ShaferShenoyInference_setFindBarrenNodesType, METH_VARARGS, "\n"
		"\n"
		"sets how we determine barren nodes\n"
		"\n"
		"Barren nodes are unnecessary for probability inference, so they can be safely discarded in this case (type = FIND_BARREN_NODES). This speeds-up inference. However, there are some cases in which we do not want to remove barren nodes, typically when we want to answer queries such as Most Probable Explanations (MPE).\n"
		"\n"
		"0 = FIND_NO_BARREN_NODES\n"
		"1 = FIND_BARREN_NODES\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"type : int\n"
		"  the finder type\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.InvalidArgument\n"
		"  If type is not implemented\n"
		"\n"
		""},
	 { "ShaferShenoyInference_joinTree", _wrap_ShaferShenoyInference_joinTree, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"pyagrum.CliqueGraph\n"
		"  the current join tree used\n"
		"\n"
		""},
	 { "ShaferShenoyInference_junctionTree", _wrap_ShaferShenoyInference_junctionTree, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"pyagrum.CliqueGraph\n"
		"  the current junction tree\n"
		"\n"
		""},
	 { "ShaferShenoyInference_evidenceProbability", _wrap_ShaferShenoyInference_evidenceProbability, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"float\n"
		"  the probability of evidence\n"
		"\n"
		""},
	 { "ShaferShenoyInference_makeInference", _wrap_ShaferShenoyInference_makeInference, METH_O, "\n"
		"\n"
		"Perform the heavy computations needed to compute the targets' posteriors\n"
		"\n"
		"In a Junction tree propagation scheme, for instance, the heavy computations are those of the messages sent in the JT.\n"
		"This is precisely what makeInference should compute. Later, the computations of the posteriors can be done 'lightly' by multiplying and projecting those messages.\n"
		"\n"
		""},
	 { "ShaferShenoyInference_addEvidence", _wrap_ShaferShenoyInference_addEvidence, METH_VARARGS, "\n"
		"\n"
		"Adds a new evidence on a node (might be soft or hard).\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id : int\n"
		"  a node Id\n"
		"nodeName : int\n"
		"  a node name\n"
		"val :\n"
		"  (int) a node value\n"
		"val :\n"
		"  (str) the label of the node value\n"
		"vals : list\n"
		"  a list of values\n"
		"\n"
		"Raises\n"
		"------\n"
		"  pyagrum.InvalidArgument\n"
		"    If the node already has an evidence\n"
		"  pyagrum.InvalidArgument\n"
		"    If val is not a value for the node\n"
		"  pyagrum.InvalidArgument\n"
		"    If the size of vals is different from the domain side of the node\n"
		"  pyagrum.FatalError\n"
		"    If vals is a vector of 0s\n"
		"  pyagrum.UndefinedElement\n"
		"    If the node does not belong to the Bayesian network\n"
		"\n"
		""},
	 { "ShaferShenoyInference_chgEvidence", _wrap_ShaferShenoyInference_chgEvidence, METH_VARARGS, "\n"
		"\n"
		"Change the value of an already existing evidence on a node (might be soft or hard).\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id : int\n"
		"  a node Id\n"
		"nodeName : int\n"
		"  a node name\n"
		"val : int|str\n"
		"  a node value or the label of the node value\n"
		"vals : List[float]\n"
		"  a list of values\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.InvalidArgument\n"
		"  If the node does not already have an evidence\n"
		"pyagrum.InvalidArgument\n"
		"  If val is not a value for the node\n"
		"pyagrum.InvalidArgument\n"
		"  If the size of vals is different from the domain side of the node\n"
		"pyagrum.FatalError\n"
		"  If vals is a vector of 0s\n"
		"pyagrum.UndefinedElement\n"
		"  If the node does not belong to the Bayesian network\n"
		"\n"
		""},
	 { "ShaferShenoyInference_hasEvidence", _wrap_ShaferShenoyInference_hasEvidence, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id : int\n"
		"  a node Id\n"
		"nodeName : str\n"
		"  a node name\n"
		"\n"
		"Returns\n"
		"-------\n"
		"bool\n"
		"  True if some node(s) (or the one in parameters) have received evidence\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.IndexError\n"
		"  If the node does not belong to the Bayesian network\n"
		"\n"
		""},
	 { "ShaferShenoyInference_eraseAllEvidence", _wrap_ShaferShenoyInference_eraseAllEvidence, METH_O, "\n"
		"\n"
		"Removes all the evidence entered into the network.\n"
		"\n"
		""},
	 { "ShaferShenoyInference_eraseEvidence", _wrap_ShaferShenoyInference_eraseEvidence, METH_VARARGS, "\n"
		"\n"
		"Remove the evidence, if any, corresponding to the node Id or name.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id : int\n"
		"  a node Id\n"
		"nodeName : int\n"
		"  a node name\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.IndexError\n"
		"  If the node does not belong to the Bayesian network\n"
		"\n"
		""},
	 { "ShaferShenoyInference_hasHardEvidence", _wrap_ShaferShenoyInference_hasHardEvidence, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id : int\n"
		"  a node Id\n"
		"nodeName : str\n"
		"  a node name\n"
		"\n"
		"Returns\n"
		"-------\n"
		"bool\n"
		"  True if node has received a hard evidence\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.IndexError\n"
		"  If the node does not belong to the Bayesian network\n"
		"\n"
		""},
	 { "ShaferShenoyInference_hasSoftEvidence", _wrap_ShaferShenoyInference_hasSoftEvidence, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id : int\n"
		"  a node Id\n"
		"nodeName : str\n"
		"  a node name\n"
		"\n"
		"Returns\n"
		"-------\n"
		"bool\n"
		"  True if node has received a soft evidence\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.IndexError\n"
		"  If the node does not belong to the Bayesian network\n"
		"\n"
		""},
	 { "ShaferShenoyInference_nbrEvidence", _wrap_ShaferShenoyInference_nbrEvidence, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"  the number of evidence entered into the Bayesian network\n"
		"\n"
		""},
	 { "ShaferShenoyInference_nbrHardEvidence", _wrap_ShaferShenoyInference_nbrHardEvidence, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"  the number of hard evidence entered into the Bayesian network\n"
		"\n"
		""},
	 { "ShaferShenoyInference_nbrSoftEvidence", _wrap_ShaferShenoyInference_nbrSoftEvidence, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"  the number of soft evidence entered into the Bayesian network\n"
		"\n"
		""},
	 { "ShaferShenoyInference_eraseAllTargets", _wrap_ShaferShenoyInference_eraseAllTargets, METH_O, "\n"
		"\n"
		"Clear all previously defined targets (marginal and joint targets).\n"
		"\n"
		"As a result, no posterior can be computed (since we can only compute the posteriors of the marginal or joint targets that have been added by the user).\n"
		"\n"
		""},
	 { "ShaferShenoyInference_addAllTargets", _wrap_ShaferShenoyInference_addAllTargets, METH_O, "\n"
		"\n"
		"Add all the nodes as targets.\n"
		"\n"
		""},
	 { "ShaferShenoyInference_addTarget", _wrap_ShaferShenoyInference_addTarget, METH_VARARGS, "\n"
		"\n"
		"Add a marginal target to the list of targets.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"target : int\n"
		"  a node Id\n"
		"nodeName : str\n"
		"  a node name\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.UndefinedElement\n"
		"  If target is not a NodeId in the Bayes net\n"
		"\n"
		""},
	 { "ShaferShenoyInference_eraseTarget", _wrap_ShaferShenoyInference_eraseTarget, METH_VARARGS, "\n"
		"\n"
		"Remove, if existing, the marginal target.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"target : int\n"
		"  a node Id\n"
		"nodeName : int\n"
		"  a node name\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.IndexError\n"
		"  If one of the node does not belong to the Bayesian network\n"
		"pyagrum.UndefinedElement\n"
		"  If node Id is not in the Bayesian network\n"
		"\n"
		""},
	 { "ShaferShenoyInference_isTarget", _wrap_ShaferShenoyInference_isTarget, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"variable : int\n"
		" a node Id\n"
		"nodeName : str\n"
		"  a node name\n"
		"\n"
		"Returns\n"
		"-------\n"
		"bool\n"
		"  True if variable is a (marginal) target\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.IndexError\n"
		"  If the node does not belong to the Bayesian network\n"
		"pyagrum.UndefinedElement\n"
		"  If node Id is not in the Bayesian network\n"
		"\n"
		""},
	 { "ShaferShenoyInference_nbrTargets", _wrap_ShaferShenoyInference_nbrTargets, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"  the number of marginal targets\n"
		"\n"
		""},
	 { "ShaferShenoyInference_H", _wrap_ShaferShenoyInference_H, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"X : int\n"
		"  a node Id\n"
		"nodeName : str\n"
		"  a node name\n"
		"\n"
		"Returns\n"
		"-------\n"
		"float\n"
		"  the computed Shanon's entropy of a node given the observation\n"
		"\n"
		""},
	 { "ShaferShenoyInference_BN", _wrap_ShaferShenoyInference_BN, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"pyagrum.IBayesNet\n"
		"  A constant reference over the IBayesNet referenced by this class.\n"
		"\n"
		"Raises\n"
		"------\n"
		"  pyagrum.UndefinedElement\n"
		"    If no Bayes net has been assigned to the inference.\n"
		"\n"
		""},
	 { "ShaferShenoyInference_posterior", _wrap_ShaferShenoyInference_posterior, METH_VARARGS, "\n"
		"\n"
		"Computes and returns the posterior of a node.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"var : int\n"
		"  the node Id of the node for which we need a posterior probability\n"
		"nodeName : str\n"
		"  the node name of the node for which we need a posterior probability\n"
		"\n"
		"Returns\n"
		"-------\n"
		"pyagrum.Tensor\n"
		"  a const ref to the posterior probability of the node\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.UndefinedElement\n"
		"  If an element of nodes is not in targets\n"
		"\n"
		""},
	 { "ShaferShenoyInference_eraseAllJointTargets", _wrap_ShaferShenoyInference_eraseAllJointTargets, METH_O, "\n"
		"\n"
		"Clear all previously defined joint targets.\n"
		"\n"
		""},
	 { "ShaferShenoyInference_eraseAllMarginalTargets", _wrap_ShaferShenoyInference_eraseAllMarginalTargets, METH_O, "\n"
		"\n"
		"Clear all the previously defined marginal targets.\n"
		"\n"
		""},
	 { "ShaferShenoyInference_nbrJointTargets", _wrap_ShaferShenoyInference_nbrJointTargets, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"  the number of joint targets\n"
		"\n"
		""},
	 { "ShaferShenoyInference_setNumberOfThreads", _wrap_ShaferShenoyInference_setNumberOfThreads, METH_VARARGS, "\n"
		"\n"
		"If the argument nb is different from 0, this number of threads will be used during inferences, hence overriding aGrUM's default number of threads.\n"
		"If, on the contrary, nb is equal to 0, the parallelized inference engine will comply with aGrUM's default number of threads.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"nb : int\n"
		"	the number of threads to be used by ShaferShenoyMRFInference\n"
		"\n"
		""},
	 { "ShaferShenoyInference_getNumberOfThreads", _wrap_ShaferShenoyInference_getNumberOfThreads, METH_O, "\n"
		"\n"
		"returns the number of threads used by LazyPropagation during inferences.\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"	the number of threads used by LazyPropagation during inferences\n"
		"\n"
		""},
	 { "ShaferShenoyInference_isGumNumberOfThreadsOverriden", _wrap_ShaferShenoyInference_isGumNumberOfThreadsOverriden, METH_O, "\n"
		"\n"
		"Indicates whether LazyPropagation currently overrides aGrUM's default number of threads (see method setNumberOfThreads).\n"
		"\n"
		"Returns\n"
		"-------\n"
		"bool\n"
		"	A Boolean indicating whether LazyPropagation currently overrides aGrUM's default number of threads\n"
		"\n"
		""},
	 { "ShaferShenoyInference_setMaxMemory", _wrap_ShaferShenoyInference_setMaxMemory, METH_VARARGS, "\n"
		"\n"
		"sets an upper bound on the memory consumption admissible\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"gigabytes: float\n"
		"  this upper bound in gigabytes.\n"
		"\n"
		""},
	 { "ShaferShenoyInference_setEvidence", _wrap_ShaferShenoyInference_setEvidence, METH_VARARGS, NULL},
	 { "ShaferShenoyInference_updateEvidence", _wrap_ShaferShenoyInference_updateEvidence, METH_VARARGS, NULL},
	 { "ShaferShenoyInference_setTargets", _wrap_ShaferShenoyInference_setTargets, METH_VARARGS, NULL},
	 { "ShaferShenoyInference_hardEvidenceNodes", _wrap_ShaferShenoyInference_hardEvidenceNodes, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"set\n"
		"  the set of nodes with hard evidence\n"
		"\n"
		""},
	 { "ShaferShenoyInference_softEvidenceNodes", _wrap_ShaferShenoyInference_softEvidenceNodes, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"set\n"
		"  the set of nodes with soft evidence\n"
		"\n"
		""},
	 { "ShaferShenoyInference_targets", _wrap_ShaferShenoyInference_targets, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"list\n"
		"  the list of marginal targets\n"
		"\n"
		""},
	 { "ShaferShenoyInference_evidenceImpact", _wrap_ShaferShenoyInference_evidenceImpact, METH_VARARGS, "\n"
		"\n"
		"Create a pyagrum.Tensor for P(target|evs) (for all instanciation of target and evs)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"target : set\n"
		"  a set of targets ids or names.\n"
		"evs : set\n"
		"  a set of nodes ids or names.\n"
		"\n"
		"Warnings\n"
		"--------\n"
		"if some evs are d-separated, they are not included in the Tensor.\n"
		"\n"
		"Returns\n"
		"-------\n"
		"pyagrum.Tensor\n"
		"  a Tensor for P(targets|evs)\n"
		"\n"
		""},
	 { "ShaferShenoyInference_jointMutualInformation", _wrap_ShaferShenoyInference_jointMutualInformation, METH_VARARGS, NULL},
	 { "ShaferShenoyInference_evidenceJointImpact", _wrap_ShaferShenoyInference_evidenceJointImpact, METH_VARARGS, "\n"
		"\n"
		"Create a pyagrum.Tensor for P(joint targets|evs) (for all instanciation of targets and evs)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"targets : List[int|str]\n"
		"  a list of node Ids or node names\n"
		"evs : Set[int|str]\n"
		"  a set of nodes ids or names.\n"
		"\n"
		"Returns\n"
		"-------\n"
		"pyagrum.Tensor\n"
		"  a Tensor for P(target|evs)\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.Exception\n"
		"  If some evidene entered into the Bayes net are incompatible (their joint proba = 0)\n"
		"\n"
		""},
	 { "ShaferShenoyInference_jointPosterior", _wrap_ShaferShenoyInference_jointPosterior, METH_VARARGS, "\n"
		"\n"
		"Compute the joint posterior of a set of nodes.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"list :\n"
		"  the list of nodes whose posterior joint probability is wanted\n"
		"\n"
		"\n"
		"Warnings\n"
		"--------\n"
		"The order of the variables given by the list here or when the jointTarget is declared can not be assumed to be used by the Tensor.\n"
		"\n"
		"Returns\n"
		"-------\n"
		"pyagrum.Tensor\n"
		"  a const ref to the posterior joint probability of the set of nodes.\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.UndefinedElement\n"
		"  If an element of nodes is not in targets\n"
		"\n"
		""},
	 { "ShaferShenoyInference_addJointTarget", _wrap_ShaferShenoyInference_addJointTarget, METH_VARARGS, "\n"
		"\n"
		"Add a list of nodes as a new joint target. As a collateral effect, every node is added as a marginal target.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"list\n"
		"  a list of names of nodes\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.UndefinedElement\n"
		"  If some node(s) do not belong to the Bayesian network\n"
		"\n"
		""},
	 { "ShaferShenoyInference_eraseJointTarget", _wrap_ShaferShenoyInference_eraseJointTarget, METH_VARARGS, "\n"
		"\n"
		"Remove, if existing, the joint target.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"list\n"
		"  a list of names or Ids of nodes\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.IndexError\n"
		"  If one of the node does not belong to the Bayesian network\n"
		"pyagrum.UndefinedElement\n"
		"  If node Id is not in the Bayesian network\n"
		"\n"
		""},
	 { "ShaferShenoyInference_isJointTarget", _wrap_ShaferShenoyInference_isJointTarget, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"list\n"
		"  a list of nodes ids or names.\n"
		"\n"
		"Returns\n"
		"-------\n"
		"bool\n"
		"  True if target is a joint target.\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.IndexError\n"
		"  If the node does not belong to the Bayesian network\n"
		"pyagrum.UndefinedElement\n"
		"  If node Id is not in the Bayesian network\n"
		"\n"
		""},
	 { "ShaferShenoyInference_jointTargets", _wrap_ShaferShenoyInference_jointTargets, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"list\n"
		"  the list of target sets\n"
		"\n"
		""},
	 { "ShaferShenoyInference_swigregister", ShaferShenoyInference_swigregister, METH_O, NULL},
	 { "ShaferShenoyInference_swiginit", ShaferShenoyInference_swiginit, METH_VARARGS, NULL},
	 { "new_VariableElimination", _wrap_new_VariableElimination, METH_VARARGS, NULL},
	 { "delete_VariableElimination", _wrap_delete_VariableElimination, METH_O, NULL},
	 { "VariableElimination_setTriangulation", _wrap_VariableElimination_setTriangulation, METH_VARARGS, NULL},
	 { "VariableElimination_setRelevantTensorsFinderType", _wrap_VariableElimination_setRelevantTensorsFinderType, METH_VARARGS, "\n"
		"\n"
		"sets how we determine the relevant tensors to combine\n"
		"\n"
		"When a clique sends a message to a separator, it first constitute the set of the tensors it contains and of the tensors contained in the messages it received. If RelevantTensorsFinderType = FIND_ALL, all these tensors are combined and projected to produce the message sent to the separator. If RelevantTensorsFinderType = DSEP_BAYESBALL_NODES, then only the set of tensors d-connected to the variables of the separator are kept for combination and projection.\n"
		"\n"
		"0 = FIND_ALL\n"
		"1 = DSEP_BAYESBALL_NODES\n"
		"2 = DSEP_BAYESBALL_TENSORS\n"
		"3 = DSEP_KOLLER_FRIEDMAN_2009\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"type : int\n"
		"  the finder type\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.InvalidArgument\n"
		"  If type is not implemented\n"
		"\n"
		""},
	 { "VariableElimination_setFindBarrenNodesType", _wrap_VariableElimination_setFindBarrenNodesType, METH_VARARGS, "\n"
		"\n"
		"sets how we determine barren nodes\n"
		"\n"
		"Barren nodes are unnecessary for probability inference, so they can be safely discarded in this case (type = FIND_BARREN_NODES). This speeds-up inference. However, there are some cases in which we do not want to remove barren nodes, typically when we want to answer queries such as Most Probable Explanations (MPE).\n"
		"\n"
		"0 = FIND_NO_BARREN_NODES\n"
		"1 = FIND_BARREN_NODES\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"type : int\n"
		"  the finder type\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.InvalidArgument\n"
		"  If type is not implemented\n"
		"\n"
		""},
	 { "VariableElimination_junctionTree", _wrap_VariableElimination_junctionTree, METH_VARARGS, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"pyagrum.CliqueGraph\n"
		"  the current junction tree\n"
		"\n"
		""},
	 { "VariableElimination_makeInference", _wrap_VariableElimination_makeInference, METH_O, "\n"
		"\n"
		"Perform the heavy computations needed to compute the targets' posteriors\n"
		"\n"
		"In a Junction tree propagation scheme, for instance, the heavy computations are those of the messages sent in the JT.\n"
		"This is precisely what makeInference should compute. Later, the computations of the posteriors can be done 'lightly' by multiplying and projecting those messages.\n"
		"\n"
		""},
	 { "VariableElimination_posterior", _wrap_VariableElimination_posterior, METH_VARARGS, "\n"
		"\n"
		"Computes and returns the posterior of a node.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"var : int\n"
		"  the node Id of the node for which we need a posterior probability\n"
		"nodeName : str\n"
		"  the node name of the node for which we need a posterior probability\n"
		"\n"
		"Returns\n"
		"-------\n"
		"pyagrum.Tensor\n"
		"  a const ref to the posterior probability of the node\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.UndefinedElement\n"
		"  If an element of nodes is not in targets\n"
		"\n"
		""},
	 { "VariableElimination_addEvidence", _wrap_VariableElimination_addEvidence, METH_VARARGS, "\n"
		"\n"
		"Adds a new evidence on a node (might be soft or hard).\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id : int\n"
		"  a node Id\n"
		"nodeName : int\n"
		"  a node name\n"
		"val :\n"
		"  (int) a node value\n"
		"val :\n"
		"  (str) the label of the node value\n"
		"vals : list\n"
		"  a list of values\n"
		"\n"
		"Raises\n"
		"------\n"
		"  pyagrum.InvalidArgument\n"
		"    If the node already has an evidence\n"
		"  pyagrum.InvalidArgument\n"
		"    If val is not a value for the node\n"
		"  pyagrum.InvalidArgument\n"
		"    If the size of vals is different from the domain side of the node\n"
		"  pyagrum.FatalError\n"
		"    If vals is a vector of 0s\n"
		"  pyagrum.UndefinedElement\n"
		"    If the node does not belong to the Bayesian network\n"
		"\n"
		""},
	 { "VariableElimination_chgEvidence", _wrap_VariableElimination_chgEvidence, METH_VARARGS, "\n"
		"\n"
		"Change the value of an already existing evidence on a node (might be soft or hard).\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id : int\n"
		"  a node Id\n"
		"nodeName : int\n"
		"  a node name\n"
		"val : int|str\n"
		"  a node value or the label of the node value\n"
		"vals : List[float]\n"
		"  a list of values\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.InvalidArgument\n"
		"  If the node does not already have an evidence\n"
		"pyagrum.InvalidArgument\n"
		"  If val is not a value for the node\n"
		"pyagrum.InvalidArgument\n"
		"  If the size of vals is different from the domain side of the node\n"
		"pyagrum.FatalError\n"
		"  If vals is a vector of 0s\n"
		"pyagrum.UndefinedElement\n"
		"  If the node does not belong to the Bayesian network\n"
		"\n"
		""},
	 { "VariableElimination_hasEvidence", _wrap_VariableElimination_hasEvidence, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id : int\n"
		"  a node Id\n"
		"nodeName : str\n"
		"  a node name\n"
		"\n"
		"Returns\n"
		"-------\n"
		"bool\n"
		"  True if some node(s) (or the one in parameters) have received evidence\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.IndexError\n"
		"  If the node does not belong to the Bayesian network\n"
		"\n"
		""},
	 { "VariableElimination_eraseAllEvidence", _wrap_VariableElimination_eraseAllEvidence, METH_O, "\n"
		"\n"
		"Removes all the evidence entered into the network.\n"
		"\n"
		""},
	 { "VariableElimination_eraseEvidence", _wrap_VariableElimination_eraseEvidence, METH_VARARGS, "\n"
		"\n"
		"Remove the evidence, if any, corresponding to the node Id or name.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id : int\n"
		"  a node Id\n"
		"nodeName : int\n"
		"  a node name\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.IndexError\n"
		"  If the node does not belong to the Bayesian network\n"
		"\n"
		""},
	 { "VariableElimination_hasHardEvidence", _wrap_VariableElimination_hasHardEvidence, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id : int\n"
		"  a node Id\n"
		"nodeName : str\n"
		"  a node name\n"
		"\n"
		"Returns\n"
		"-------\n"
		"bool\n"
		"  True if node has received a hard evidence\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.IndexError\n"
		"  If the node does not belong to the Bayesian network\n"
		"\n"
		""},
	 { "VariableElimination_hasSoftEvidence", _wrap_VariableElimination_hasSoftEvidence, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id : int\n"
		"  a node Id\n"
		"nodeName : str\n"
		"  a node name\n"
		"\n"
		"Returns\n"
		"-------\n"
		"bool\n"
		"  True if node has received a soft evidence\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.IndexError\n"
		"  If the node does not belong to the Bayesian network\n"
		"\n"
		""},
	 { "VariableElimination_nbrEvidence", _wrap_VariableElimination_nbrEvidence, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"  the number of evidence entered into the Bayesian network\n"
		"\n"
		""},
	 { "VariableElimination_nbrHardEvidence", _wrap_VariableElimination_nbrHardEvidence, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"  the number of hard evidence entered into the Bayesian network\n"
		"\n"
		""},
	 { "VariableElimination_nbrSoftEvidence", _wrap_VariableElimination_nbrSoftEvidence, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"  the number of soft evidence entered into the Bayesian network\n"
		"\n"
		""},
	 { "VariableElimination_eraseAllTargets", _wrap_VariableElimination_eraseAllTargets, METH_O, "\n"
		"\n"
		"Clear all previously defined targets (marginal and joint targets).\n"
		"\n"
		"As a result, no posterior can be computed (since we can only compute the posteriors of the marginal or joint targets that have been added by the user).\n"
		"\n"
		""},
	 { "VariableElimination_addAllTargets", _wrap_VariableElimination_addAllTargets, METH_O, "\n"
		"\n"
		"Add all the nodes as targets.\n"
		"\n"
		""},
	 { "VariableElimination_addTarget", _wrap_VariableElimination_addTarget, METH_VARARGS, "\n"
		"\n"
		"Add a marginal target to the list of targets.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"target : int\n"
		"  a node Id\n"
		"nodeName : str\n"
		"  a node name\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.UndefinedElement\n"
		"  If target is not a NodeId in the Bayes net\n"
		"\n"
		""},
	 { "VariableElimination_eraseTarget", _wrap_VariableElimination_eraseTarget, METH_VARARGS, "\n"
		"\n"
		"Remove, if existing, the marginal target.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"target : int\n"
		"  a node Id\n"
		"nodeName : int\n"
		"  a node name\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.IndexError\n"
		"  If one of the node does not belong to the Bayesian network\n"
		"pyagrum.UndefinedElement\n"
		"  If node Id is not in the Bayesian network\n"
		"\n"
		""},
	 { "VariableElimination_isTarget", _wrap_VariableElimination_isTarget, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"variable : int\n"
		" a node Id\n"
		"nodeName : str\n"
		"  a node name\n"
		"\n"
		"Returns\n"
		"-------\n"
		"bool\n"
		"  True if variable is a (marginal) target\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.IndexError\n"
		"  If the node does not belong to the Bayesian network\n"
		"pyagrum.UndefinedElement\n"
		"  If node Id is not in the Bayesian network\n"
		"\n"
		""},
	 { "VariableElimination_nbrTargets", _wrap_VariableElimination_nbrTargets, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"  the number of marginal targets\n"
		"\n"
		""},
	 { "VariableElimination_H", _wrap_VariableElimination_H, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"X : int\n"
		"  a node Id\n"
		"nodeName : str\n"
		"  a node name\n"
		"\n"
		"Returns\n"
		"-------\n"
		"float\n"
		"  the computed Shanon's entropy of a node given the observation\n"
		"\n"
		""},
	 { "VariableElimination_BN", _wrap_VariableElimination_BN, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"pyagrum.IBayesNet\n"
		"  A constant reference over the IBayesNet referenced by this class.\n"
		"\n"
		"Raises\n"
		"------\n"
		"  pyagrum.UndefinedElement\n"
		"    If no Bayes net has been assigned to the inference.\n"
		"\n"
		""},
	 { "VariableElimination_setNumberOfThreads", _wrap_VariableElimination_setNumberOfThreads, METH_VARARGS, "\n"
		"\n"
		"If the argument nb is different from 0, this number of threads will be used during inferences, hence overriding aGrUM's default number of threads.\n"
		"If, on the contrary, nb is equal to 0, the parallelized inference engine will comply with aGrUM's default number of threads.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"nb : int\n"
		"	the number of threads to be used by ShaferShenoyMRFInference\n"
		"\n"
		""},
	 { "VariableElimination_getNumberOfThreads", _wrap_VariableElimination_getNumberOfThreads, METH_O, "\n"
		"\n"
		"returns the number of threads used by LazyPropagation during inferences.\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"	the number of threads used by LazyPropagation during inferences\n"
		"\n"
		""},
	 { "VariableElimination_isGumNumberOfThreadsOverriden", _wrap_VariableElimination_isGumNumberOfThreadsOverriden, METH_O, "\n"
		"\n"
		"Indicates whether LazyPropagation currently overrides aGrUM's default number of threads (see method setNumberOfThreads).\n"
		"\n"
		"Returns\n"
		"-------\n"
		"bool\n"
		"	A Boolean indicating whether LazyPropagation currently overrides aGrUM's default number of threads\n"
		"\n"
		""},
	 { "VariableElimination_setMaxMemory", _wrap_VariableElimination_setMaxMemory, METH_VARARGS, "\n"
		"\n"
		"sets an upper bound on the memory consumption admissible\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"gigabytes: float\n"
		"  this upper bound in gigabytes.\n"
		"\n"
		""},
	 { "VariableElimination_setEvidence", _wrap_VariableElimination_setEvidence, METH_VARARGS, NULL},
	 { "VariableElimination_updateEvidence", _wrap_VariableElimination_updateEvidence, METH_VARARGS, NULL},
	 { "VariableElimination_setTargets", _wrap_VariableElimination_setTargets, METH_VARARGS, NULL},
	 { "VariableElimination_hardEvidenceNodes", _wrap_VariableElimination_hardEvidenceNodes, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"set\n"
		"  the set of nodes with hard evidence\n"
		"\n"
		""},
	 { "VariableElimination_softEvidenceNodes", _wrap_VariableElimination_softEvidenceNodes, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"set\n"
		"  the set of nodes with soft evidence\n"
		"\n"
		""},
	 { "VariableElimination_targets", _wrap_VariableElimination_targets, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"list\n"
		"  the list of marginal targets\n"
		"\n"
		""},
	 { "VariableElimination_evidenceImpact", _wrap_VariableElimination_evidenceImpact, METH_VARARGS, "\n"
		"\n"
		"Create a pyagrum.Tensor for P(target|evs) (for all instanciation of target and evs)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"target : set\n"
		"  a set of targets ids or names.\n"
		"evs : set\n"
		"  a set of nodes ids or names.\n"
		"\n"
		"Warnings\n"
		"--------\n"
		"if some evs are d-separated, they are not included in the Tensor.\n"
		"\n"
		"Returns\n"
		"-------\n"
		"pyagrum.Tensor\n"
		"  a Tensor for P(targets|evs)\n"
		"\n"
		""},
	 { "VariableElimination_jointMutualInformation", _wrap_VariableElimination_jointMutualInformation, METH_VARARGS, NULL},
	 { "VariableElimination_evidenceJointImpact", _wrap_VariableElimination_evidenceJointImpact, METH_VARARGS, "\n"
		"\n"
		"Create a pyagrum.Tensor for P(joint targets|evs) (for all instanciation of targets and evs)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"targets : List[int|str]\n"
		"  a list of node Ids or node names\n"
		"evs : Set[int|str]\n"
		"  a set of nodes ids or names.\n"
		"\n"
		"Returns\n"
		"-------\n"
		"pyagrum.Tensor\n"
		"  a Tensor for P(target|evs)\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.Exception\n"
		"  If some evidene entered into the Bayes net are incompatible (their joint proba = 0)\n"
		"\n"
		""},
	 { "VariableElimination_jointPosterior", _wrap_VariableElimination_jointPosterior, METH_VARARGS, "\n"
		"\n"
		"Compute the joint posterior of a set of nodes.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"list :\n"
		"  the list of nodes whose posterior joint probability is wanted\n"
		"\n"
		"\n"
		"Warnings\n"
		"--------\n"
		"The order of the variables given by the list here or when the jointTarget is declared can not be assumed to be used by the Tensor.\n"
		"\n"
		"Returns\n"
		"-------\n"
		"pyagrum.Tensor\n"
		"  a const ref to the posterior joint probability of the set of nodes.\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.UndefinedElement\n"
		"  If an element of nodes is not in targets\n"
		"\n"
		""},
	 { "VariableElimination_addJointTarget", _wrap_VariableElimination_addJointTarget, METH_VARARGS, "\n"
		"\n"
		"Add a list of nodes as a new joint target. As a collateral effect, every node is added as a marginal target.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"list\n"
		"  a list of names of nodes\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.UndefinedElement\n"
		"  If some node(s) do not belong to the Bayesian network\n"
		"\n"
		""},
	 { "VariableElimination_eraseJointTarget", _wrap_VariableElimination_eraseJointTarget, METH_VARARGS, "\n"
		"\n"
		"Remove, if existing, the joint target.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"list\n"
		"  a list of names or Ids of nodes\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.IndexError\n"
		"  If one of the node does not belong to the Bayesian network\n"
		"pyagrum.UndefinedElement\n"
		"  If node Id is not in the Bayesian network\n"
		"\n"
		""},
	 { "VariableElimination_isJointTarget", _wrap_VariableElimination_isJointTarget, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"list\n"
		"  a list of nodes ids or names.\n"
		"\n"
		"Returns\n"
		"-------\n"
		"bool\n"
		"  True if target is a joint target.\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.IndexError\n"
		"  If the node does not belong to the Bayesian network\n"
		"pyagrum.UndefinedElement\n"
		"  If node Id is not in the Bayesian network\n"
		"\n"
		""},
	 { "VariableElimination_jointTargets", _wrap_VariableElimination_jointTargets, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"list\n"
		"  the list of target sets\n"
		"\n"
		""},
	 { "VariableElimination_swigregister", VariableElimination_swigregister, METH_O, NULL},
	 { "VariableElimination_swiginit", VariableElimination_swiginit, METH_VARARGS, NULL},
	 { "new_GibbsSampling", _wrap_new_GibbsSampling, METH_O, NULL},
	 { "delete_GibbsSampling", _wrap_delete_GibbsSampling, METH_O, NULL},
	 { "GibbsSampling_setBurnIn", _wrap_GibbsSampling_setBurnIn, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"b : int\n"
		"  size of burn in on number of iteration\n"
		"\n"
		""},
	 { "GibbsSampling_burnIn", _wrap_GibbsSampling_burnIn, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"  size of burn in on number of iteration\n"
		"\n"
		""},
	 { "GibbsSampling_setVerbosity", _wrap_GibbsSampling_setVerbosity, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"v : bool\n"
		"        verbosity\n"
		"\n"
		""},
	 { "GibbsSampling_setEpsilon", _wrap_GibbsSampling_setEpsilon, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"eps : float\n"
		"	the epsilon we want to use\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.OutOfBounds\n"
		"	If eps<0\n"
		"\n"
		""},
	 { "GibbsSampling_setMinEpsilonRate", _wrap_GibbsSampling_setMinEpsilonRate, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"rate : float\n"
		"	the minimal epsilon rate\n"
		"\n"
		""},
	 { "GibbsSampling_setMaxIter", _wrap_GibbsSampling_setMaxIter, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"max : int\n"
		"	the maximum number of iteration\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.OutOfBounds\n"
		"	If max <= 1\n"
		"\n"
		""},
	 { "GibbsSampling_setMaxTime", _wrap_GibbsSampling_setMaxTime, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"tiemout : float\n"
		"	stopping criterion on timeout (in seconds)\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.OutOfBounds\n"
		"	If timeout<=0.0\n"
		"\n"
		""},
	 { "GibbsSampling_setPeriodSize", _wrap_GibbsSampling_setPeriodSize, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"p : int\n"
		"	number of samples between 2 stopping\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.OutOfBounds\n"
		"	If p<1\n"
		"\n"
		""},
	 { "GibbsSampling_verbosity", _wrap_GibbsSampling_verbosity, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"bool\n"
		"	True if the verbosity is enabled\n"
		"\n"
		""},
	 { "GibbsSampling_epsilon", _wrap_GibbsSampling_epsilon, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"float\n"
		"	the value of epsilon\n"
		"\n"
		""},
	 { "GibbsSampling_minEpsilonRate", _wrap_GibbsSampling_minEpsilonRate, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"float\n"
		"	the value of the minimal epsilon rate\n"
		"\n"
		""},
	 { "GibbsSampling_maxIter", _wrap_GibbsSampling_maxIter, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"	the criterion on number of iterations\n"
		"\n"
		""},
	 { "GibbsSampling_maxTime", _wrap_GibbsSampling_maxTime, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"float\n"
		"	the timeout(in seconds)\n"
		"\n"
		""},
	 { "GibbsSampling_periodSize", _wrap_GibbsSampling_periodSize, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"	the number of samples between 2 stopping\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.OutOfBounds\n"
		"	If p<1\n"
		"\n"
		""},
	 { "GibbsSampling_nbrIterations", _wrap_GibbsSampling_nbrIterations, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"	the number of iterations\n"
		"\n"
		""},
	 { "GibbsSampling_currentTime", _wrap_GibbsSampling_currentTime, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"float\n"
		"	get the current running time in second (float)\n"
		"\n"
		""},
	 { "GibbsSampling_messageApproximationScheme", _wrap_GibbsSampling_messageApproximationScheme, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"str\n"
		"	the approximation scheme message\n"
		"\n"
		""},
	 { "GibbsSampling_history", _wrap_GibbsSampling_history, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"tuple\n"
		"	the scheme history\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.OperationNotAllowed\n"
		"	If the scheme did not performed or if verbosity is set to false\n"
		"\n"
		""},
	 { "GibbsSampling__asIApproximationSchemeConfiguration", _wrap_GibbsSampling__asIApproximationSchemeConfiguration, METH_O, NULL},
	 { "GibbsSampling_makeInference", _wrap_GibbsSampling_makeInference, METH_O, "\n"
		"\n"
		"Perform the heavy computations needed to compute the targets' posteriors\n"
		"\n"
		"In a Junction tree propagation scheme, for instance, the heavy computations are those of the messages sent in the JT.\n"
		"This is precisely what makeInference should compute. Later, the computations of the posteriors can be done 'lightly' by multiplying and projecting those messages.\n"
		"\n"
		""},
	 { "GibbsSampling_posterior", _wrap_GibbsSampling_posterior, METH_VARARGS, "\n"
		"\n"
		"Computes and returns the posterior of a node.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"var : int\n"
		"  the node Id of the node for which we need a posterior probability\n"
		"nodeName : str\n"
		"  the node name of the node for which we need a posterior probability\n"
		"\n"
		"Returns\n"
		"-------\n"
		"pyagrum.Tensor\n"
		"  a const ref to the posterior probability of the node\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.UndefinedElement\n"
		"  If an element of nodes is not in targets\n"
		"\n"
		""},
	 { "GibbsSampling_addEvidence", _wrap_GibbsSampling_addEvidence, METH_VARARGS, "\n"
		"\n"
		"Adds a new evidence on a node (might be soft or hard).\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id : int\n"
		"  a node Id\n"
		"nodeName : int\n"
		"  a node name\n"
		"val :\n"
		"  (int) a node value\n"
		"val :\n"
		"  (str) the label of the node value\n"
		"vals : list\n"
		"  a list of values\n"
		"\n"
		"Raises\n"
		"------\n"
		"  pyagrum.InvalidArgument\n"
		"    If the node already has an evidence\n"
		"  pyagrum.InvalidArgument\n"
		"    If val is not a value for the node\n"
		"  pyagrum.InvalidArgument\n"
		"    If the size of vals is different from the domain side of the node\n"
		"  pyagrum.FatalError\n"
		"    If vals is a vector of 0s\n"
		"  pyagrum.UndefinedElement\n"
		"    If the node does not belong to the Bayesian network\n"
		"\n"
		""},
	 { "GibbsSampling_chgEvidence", _wrap_GibbsSampling_chgEvidence, METH_VARARGS, "\n"
		"\n"
		"Change the value of an already existing evidence on a node (might be soft or hard).\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id : int\n"
		"  a node Id\n"
		"nodeName : int\n"
		"  a node name\n"
		"val : int|str\n"
		"  a node value or the label of the node value\n"
		"vals : List[float]\n"
		"  a list of values\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.InvalidArgument\n"
		"  If the node does not already have an evidence\n"
		"pyagrum.InvalidArgument\n"
		"  If val is not a value for the node\n"
		"pyagrum.InvalidArgument\n"
		"  If the size of vals is different from the domain side of the node\n"
		"pyagrum.FatalError\n"
		"  If vals is a vector of 0s\n"
		"pyagrum.UndefinedElement\n"
		"  If the node does not belong to the Bayesian network\n"
		"\n"
		""},
	 { "GibbsSampling_hasEvidence", _wrap_GibbsSampling_hasEvidence, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id : int\n"
		"  a node Id\n"
		"nodeName : str\n"
		"  a node name\n"
		"\n"
		"Returns\n"
		"-------\n"
		"bool\n"
		"  True if some node(s) (or the one in parameters) have received evidence\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.IndexError\n"
		"  If the node does not belong to the Bayesian network\n"
		"\n"
		""},
	 { "GibbsSampling_eraseAllEvidence", _wrap_GibbsSampling_eraseAllEvidence, METH_O, "\n"
		"\n"
		"Removes all the evidence entered into the network.\n"
		"\n"
		""},
	 { "GibbsSampling_eraseEvidence", _wrap_GibbsSampling_eraseEvidence, METH_VARARGS, "\n"
		"\n"
		"Remove the evidence, if any, corresponding to the node Id or name.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id : int\n"
		"  a node Id\n"
		"nodeName : int\n"
		"  a node name\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.IndexError\n"
		"  If the node does not belong to the Bayesian network\n"
		"\n"
		""},
	 { "GibbsSampling_hasHardEvidence", _wrap_GibbsSampling_hasHardEvidence, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id : int\n"
		"  a node Id\n"
		"nodeName : str\n"
		"  a node name\n"
		"\n"
		"Returns\n"
		"-------\n"
		"bool\n"
		"  True if node has received a hard evidence\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.IndexError\n"
		"  If the node does not belong to the Bayesian network\n"
		"\n"
		""},
	 { "GibbsSampling_hasSoftEvidence", _wrap_GibbsSampling_hasSoftEvidence, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id : int\n"
		"  a node Id\n"
		"nodeName : str\n"
		"  a node name\n"
		"\n"
		"Returns\n"
		"-------\n"
		"bool\n"
		"  True if node has received a soft evidence\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.IndexError\n"
		"  If the node does not belong to the Bayesian network\n"
		"\n"
		""},
	 { "GibbsSampling_nbrEvidence", _wrap_GibbsSampling_nbrEvidence, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"  the number of evidence entered into the Bayesian network\n"
		"\n"
		""},
	 { "GibbsSampling_nbrHardEvidence", _wrap_GibbsSampling_nbrHardEvidence, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"  the number of hard evidence entered into the Bayesian network\n"
		"\n"
		""},
	 { "GibbsSampling_nbrSoftEvidence", _wrap_GibbsSampling_nbrSoftEvidence, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"  the number of soft evidence entered into the Bayesian network\n"
		"\n"
		""},
	 { "GibbsSampling_eraseAllTargets", _wrap_GibbsSampling_eraseAllTargets, METH_O, "\n"
		"\n"
		"Clear all previously defined targets (marginal and joint targets).\n"
		"\n"
		"As a result, no posterior can be computed (since we can only compute the posteriors of the marginal or joint targets that have been added by the user).\n"
		"\n"
		""},
	 { "GibbsSampling_addAllTargets", _wrap_GibbsSampling_addAllTargets, METH_O, "\n"
		"\n"
		"Add all the nodes as targets.\n"
		"\n"
		""},
	 { "GibbsSampling_addTarget", _wrap_GibbsSampling_addTarget, METH_VARARGS, "\n"
		"\n"
		"Add a marginal target to the list of targets.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"target : int\n"
		"  a node Id\n"
		"nodeName : str\n"
		"  a node name\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.UndefinedElement\n"
		"  If target is not a NodeId in the Bayes net\n"
		"\n"
		""},
	 { "GibbsSampling_eraseTarget", _wrap_GibbsSampling_eraseTarget, METH_VARARGS, "\n"
		"\n"
		"Remove, if existing, the marginal target.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"target : int\n"
		"  a node Id\n"
		"nodeName : int\n"
		"  a node name\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.IndexError\n"
		"  If one of the node does not belong to the Bayesian network\n"
		"pyagrum.UndefinedElement\n"
		"  If node Id is not in the Bayesian network\n"
		"\n"
		""},
	 { "GibbsSampling_isTarget", _wrap_GibbsSampling_isTarget, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"variable : int\n"
		" a node Id\n"
		"nodeName : str\n"
		"  a node name\n"
		"\n"
		"Returns\n"
		"-------\n"
		"bool\n"
		"  True if variable is a (marginal) target\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.IndexError\n"
		"  If the node does not belong to the Bayesian network\n"
		"pyagrum.UndefinedElement\n"
		"  If node Id is not in the Bayesian network\n"
		"\n"
		""},
	 { "GibbsSampling_nbrTargets", _wrap_GibbsSampling_nbrTargets, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"  the number of marginal targets\n"
		"\n"
		""},
	 { "GibbsSampling_H", _wrap_GibbsSampling_H, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"X : int\n"
		"  a node Id\n"
		"nodeName : str\n"
		"  a node name\n"
		"\n"
		"Returns\n"
		"-------\n"
		"float\n"
		"  the computed Shanon's entropy of a node given the observation\n"
		"\n"
		""},
	 { "GibbsSampling_BN", _wrap_GibbsSampling_BN, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"pyagrum.IBayesNet\n"
		"  A constant reference over the IBayesNet referenced by this class.\n"
		"\n"
		"Raises\n"
		"------\n"
		"  pyagrum.UndefinedElement\n"
		"    If no Bayes net has been assigned to the inference.\n"
		"\n"
		""},
	 { "GibbsSampling_currentPosterior", _wrap_GibbsSampling_currentPosterior, METH_VARARGS, "\n"
		"\n"
		"Computes and returns the current posterior of a node.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"var : int\n"
		"  the node Id of the node for which we need a posterior probability\n"
		"nodeName : str\n"
		"  the node name of the node for which we need a posterior probability\n"
		"\n"
		"Returns\n"
		"-------\n"
		"pyagrum.Tensor\n"
		"  a const ref to the current posterior probability of the node\n"
		"\n"
		"Raises\n"
		"------\n"
		"UndefinedElement\n"
		"  If an element of nodes is not in targets\n"
		"\n"
		""},
	 { "GibbsSampling_nbrDrawnVar", _wrap_GibbsSampling_nbrDrawnVar, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"  the number of variable drawn at each iteration\n"
		"\n"
		""},
	 { "GibbsSampling_setNbrDrawnVar", _wrap_GibbsSampling_setNbrDrawnVar, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"_nbr : int\n"
		"  the number of variables to be drawn at each iteration\n"
		"\n"
		""},
	 { "GibbsSampling_isDrawnAtRandom", _wrap_GibbsSampling_isDrawnAtRandom, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"bool\n"
		"  True if variables are drawn at random\n"
		"\n"
		""},
	 { "GibbsSampling_setDrawnAtRandom", _wrap_GibbsSampling_setDrawnAtRandom, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"_atRandom : bool\n"
		"  indicates if variables should be drawn at random\n"
		"\n"
		""},
	 { "GibbsSampling_setEvidence", _wrap_GibbsSampling_setEvidence, METH_VARARGS, NULL},
	 { "GibbsSampling_updateEvidence", _wrap_GibbsSampling_updateEvidence, METH_VARARGS, NULL},
	 { "GibbsSampling_setTargets", _wrap_GibbsSampling_setTargets, METH_VARARGS, NULL},
	 { "GibbsSampling_hardEvidenceNodes", _wrap_GibbsSampling_hardEvidenceNodes, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"set\n"
		"  the set of nodes with hard evidence\n"
		"\n"
		""},
	 { "GibbsSampling_softEvidenceNodes", _wrap_GibbsSampling_softEvidenceNodes, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"set\n"
		"  the set of nodes with soft evidence\n"
		"\n"
		""},
	 { "GibbsSampling_targets", _wrap_GibbsSampling_targets, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"list\n"
		"  the list of marginal targets\n"
		"\n"
		""},
	 { "GibbsSampling_evidenceImpact", _wrap_GibbsSampling_evidenceImpact, METH_VARARGS, "\n"
		"\n"
		"Create a pyagrum.Tensor for P(target|evs) (for all instanciation of target and evs)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"target : set\n"
		"  a set of targets ids or names.\n"
		"evs : set\n"
		"  a set of nodes ids or names.\n"
		"\n"
		"Warnings\n"
		"--------\n"
		"if some evs are d-separated, they are not included in the Tensor.\n"
		"\n"
		"Returns\n"
		"-------\n"
		"pyagrum.Tensor\n"
		"  a Tensor for P(targets|evs)\n"
		"\n"
		""},
	 { "GibbsSampling_swigregister", GibbsSampling_swigregister, METH_O, NULL},
	 { "GibbsSampling_swiginit", GibbsSampling_swiginit, METH_VARARGS, NULL},
	 { "new_ImportanceSampling", _wrap_new_ImportanceSampling, METH_O, NULL},
	 { "delete_ImportanceSampling", _wrap_delete_ImportanceSampling, METH_O, NULL},
	 { "ImportanceSampling_setVerbosity", _wrap_ImportanceSampling_setVerbosity, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"v : bool\n"
		"        verbosity\n"
		"\n"
		""},
	 { "ImportanceSampling_setEpsilon", _wrap_ImportanceSampling_setEpsilon, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"eps : float\n"
		"	the epsilon we want to use\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.OutOfBounds\n"
		"	If eps<0\n"
		"\n"
		""},
	 { "ImportanceSampling_setMinEpsilonRate", _wrap_ImportanceSampling_setMinEpsilonRate, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"rate : float\n"
		"	the minimal epsilon rate\n"
		"\n"
		""},
	 { "ImportanceSampling_setMaxIter", _wrap_ImportanceSampling_setMaxIter, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"max : int\n"
		"	the maximum number of iteration\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.OutOfBounds\n"
		"	If max <= 1\n"
		"\n"
		""},
	 { "ImportanceSampling_setMaxTime", _wrap_ImportanceSampling_setMaxTime, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"tiemout : float\n"
		"	stopping criterion on timeout (in seconds)\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.OutOfBounds\n"
		"	If timeout<=0.0\n"
		"\n"
		""},
	 { "ImportanceSampling_setPeriodSize", _wrap_ImportanceSampling_setPeriodSize, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"p : int\n"
		"	number of samples between 2 stopping\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.OutOfBounds\n"
		"	If p<1\n"
		"\n"
		""},
	 { "ImportanceSampling_verbosity", _wrap_ImportanceSampling_verbosity, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"bool\n"
		"	True if the verbosity is enabled\n"
		"\n"
		""},
	 { "ImportanceSampling_epsilon", _wrap_ImportanceSampling_epsilon, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"float\n"
		"	the value of epsilon\n"
		"\n"
		""},
	 { "ImportanceSampling_minEpsilonRate", _wrap_ImportanceSampling_minEpsilonRate, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"float\n"
		"	the value of the minimal epsilon rate\n"
		"\n"
		""},
	 { "ImportanceSampling_maxIter", _wrap_ImportanceSampling_maxIter, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"	the criterion on number of iterations\n"
		"\n"
		""},
	 { "ImportanceSampling_maxTime", _wrap_ImportanceSampling_maxTime, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"float\n"
		"	the timeout(in seconds)\n"
		"\n"
		""},
	 { "ImportanceSampling_periodSize", _wrap_ImportanceSampling_periodSize, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"	the number of samples between 2 stopping\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.OutOfBounds\n"
		"	If p<1\n"
		"\n"
		""},
	 { "ImportanceSampling_nbrIterations", _wrap_ImportanceSampling_nbrIterations, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"	the number of iterations\n"
		"\n"
		""},
	 { "ImportanceSampling_currentTime", _wrap_ImportanceSampling_currentTime, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"float\n"
		"	get the current running time in second (float)\n"
		"\n"
		""},
	 { "ImportanceSampling_messageApproximationScheme", _wrap_ImportanceSampling_messageApproximationScheme, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"str\n"
		"	the approximation scheme message\n"
		"\n"
		""},
	 { "ImportanceSampling_history", _wrap_ImportanceSampling_history, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"tuple\n"
		"	the scheme history\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.OperationNotAllowed\n"
		"	If the scheme did not performed or if verbosity is set to false\n"
		"\n"
		""},
	 { "ImportanceSampling__asIApproximationSchemeConfiguration", _wrap_ImportanceSampling__asIApproximationSchemeConfiguration, METH_O, NULL},
	 { "ImportanceSampling_makeInference", _wrap_ImportanceSampling_makeInference, METH_O, "\n"
		"\n"
		"Perform the heavy computations needed to compute the targets' posteriors\n"
		"\n"
		"In a Junction tree propagation scheme, for instance, the heavy computations are those of the messages sent in the JT.\n"
		"This is precisely what makeInference should compute. Later, the computations of the posteriors can be done 'lightly' by multiplying and projecting those messages.\n"
		"\n"
		""},
	 { "ImportanceSampling_posterior", _wrap_ImportanceSampling_posterior, METH_VARARGS, "\n"
		"\n"
		"Computes and returns the posterior of a node.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"var : int\n"
		"  the node Id of the node for which we need a posterior probability\n"
		"nodeName : str\n"
		"  the node name of the node for which we need a posterior probability\n"
		"\n"
		"Returns\n"
		"-------\n"
		"pyagrum.Tensor\n"
		"  a const ref to the posterior probability of the node\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.UndefinedElement\n"
		"  If an element of nodes is not in targets\n"
		"\n"
		""},
	 { "ImportanceSampling_addEvidence", _wrap_ImportanceSampling_addEvidence, METH_VARARGS, "\n"
		"\n"
		"Adds a new evidence on a node (might be soft or hard).\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id : int\n"
		"  a node Id\n"
		"nodeName : int\n"
		"  a node name\n"
		"val :\n"
		"  (int) a node value\n"
		"val :\n"
		"  (str) the label of the node value\n"
		"vals : list\n"
		"  a list of values\n"
		"\n"
		"Raises\n"
		"------\n"
		"  pyagrum.InvalidArgument\n"
		"    If the node already has an evidence\n"
		"  pyagrum.InvalidArgument\n"
		"    If val is not a value for the node\n"
		"  pyagrum.InvalidArgument\n"
		"    If the size of vals is different from the domain side of the node\n"
		"  pyagrum.FatalError\n"
		"    If vals is a vector of 0s\n"
		"  pyagrum.UndefinedElement\n"
		"    If the node does not belong to the Bayesian network\n"
		"\n"
		""},
	 { "ImportanceSampling_chgEvidence", _wrap_ImportanceSampling_chgEvidence, METH_VARARGS, "\n"
		"\n"
		"Change the value of an already existing evidence on a node (might be soft or hard).\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id : int\n"
		"  a node Id\n"
		"nodeName : int\n"
		"  a node name\n"
		"val : int|str\n"
		"  a node value or the label of the node value\n"
		"vals : List[float]\n"
		"  a list of values\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.InvalidArgument\n"
		"  If the node does not already have an evidence\n"
		"pyagrum.InvalidArgument\n"
		"  If val is not a value for the node\n"
		"pyagrum.InvalidArgument\n"
		"  If the size of vals is different from the domain side of the node\n"
		"pyagrum.FatalError\n"
		"  If vals is a vector of 0s\n"
		"pyagrum.UndefinedElement\n"
		"  If the node does not belong to the Bayesian network\n"
		"\n"
		""},
	 { "ImportanceSampling_hasEvidence", _wrap_ImportanceSampling_hasEvidence, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id : int\n"
		"  a node Id\n"
		"nodeName : str\n"
		"  a node name\n"
		"\n"
		"Returns\n"
		"-------\n"
		"bool\n"
		"  True if some node(s) (or the one in parameters) have received evidence\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.IndexError\n"
		"  If the node does not belong to the Bayesian network\n"
		"\n"
		""},
	 { "ImportanceSampling_eraseAllEvidence", _wrap_ImportanceSampling_eraseAllEvidence, METH_O, "\n"
		"\n"
		"Removes all the evidence entered into the network.\n"
		"\n"
		""},
	 { "ImportanceSampling_eraseEvidence", _wrap_ImportanceSampling_eraseEvidence, METH_VARARGS, "\n"
		"\n"
		"Remove the evidence, if any, corresponding to the node Id or name.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id : int\n"
		"  a node Id\n"
		"nodeName : int\n"
		"  a node name\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.IndexError\n"
		"  If the node does not belong to the Bayesian network\n"
		"\n"
		""},
	 { "ImportanceSampling_hasHardEvidence", _wrap_ImportanceSampling_hasHardEvidence, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id : int\n"
		"  a node Id\n"
		"nodeName : str\n"
		"  a node name\n"
		"\n"
		"Returns\n"
		"-------\n"
		"bool\n"
		"  True if node has received a hard evidence\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.IndexError\n"
		"  If the node does not belong to the Bayesian network\n"
		"\n"
		""},
	 { "ImportanceSampling_hasSoftEvidence", _wrap_ImportanceSampling_hasSoftEvidence, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id : int\n"
		"  a node Id\n"
		"nodeName : str\n"
		"  a node name\n"
		"\n"
		"Returns\n"
		"-------\n"
		"bool\n"
		"  True if node has received a soft evidence\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.IndexError\n"
		"  If the node does not belong to the Bayesian network\n"
		"\n"
		""},
	 { "ImportanceSampling_nbrEvidence", _wrap_ImportanceSampling_nbrEvidence, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"  the number of evidence entered into the Bayesian network\n"
		"\n"
		""},
	 { "ImportanceSampling_nbrHardEvidence", _wrap_ImportanceSampling_nbrHardEvidence, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"  the number of hard evidence entered into the Bayesian network\n"
		"\n"
		""},
	 { "ImportanceSampling_nbrSoftEvidence", _wrap_ImportanceSampling_nbrSoftEvidence, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"  the number of soft evidence entered into the Bayesian network\n"
		"\n"
		""},
	 { "ImportanceSampling_eraseAllTargets", _wrap_ImportanceSampling_eraseAllTargets, METH_O, "\n"
		"\n"
		"Clear all previously defined targets (marginal and joint targets).\n"
		"\n"
		"As a result, no posterior can be computed (since we can only compute the posteriors of the marginal or joint targets that have been added by the user).\n"
		"\n"
		""},
	 { "ImportanceSampling_addAllTargets", _wrap_ImportanceSampling_addAllTargets, METH_O, "\n"
		"\n"
		"Add all the nodes as targets.\n"
		"\n"
		""},
	 { "ImportanceSampling_addTarget", _wrap_ImportanceSampling_addTarget, METH_VARARGS, "\n"
		"\n"
		"Add a marginal target to the list of targets.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"target : int\n"
		"  a node Id\n"
		"nodeName : str\n"
		"  a node name\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.UndefinedElement\n"
		"  If target is not a NodeId in the Bayes net\n"
		"\n"
		""},
	 { "ImportanceSampling_eraseTarget", _wrap_ImportanceSampling_eraseTarget, METH_VARARGS, "\n"
		"\n"
		"Remove, if existing, the marginal target.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"target : int\n"
		"  a node Id\n"
		"nodeName : int\n"
		"  a node name\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.IndexError\n"
		"  If one of the node does not belong to the Bayesian network\n"
		"pyagrum.UndefinedElement\n"
		"  If node Id is not in the Bayesian network\n"
		"\n"
		""},
	 { "ImportanceSampling_isTarget", _wrap_ImportanceSampling_isTarget, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"variable : int\n"
		" a node Id\n"
		"nodeName : str\n"
		"  a node name\n"
		"\n"
		"Returns\n"
		"-------\n"
		"bool\n"
		"  True if variable is a (marginal) target\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.IndexError\n"
		"  If the node does not belong to the Bayesian network\n"
		"pyagrum.UndefinedElement\n"
		"  If node Id is not in the Bayesian network\n"
		"\n"
		""},
	 { "ImportanceSampling_nbrTargets", _wrap_ImportanceSampling_nbrTargets, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"  the number of marginal targets\n"
		"\n"
		""},
	 { "ImportanceSampling_H", _wrap_ImportanceSampling_H, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"X : int\n"
		"  a node Id\n"
		"nodeName : str\n"
		"  a node name\n"
		"\n"
		"Returns\n"
		"-------\n"
		"float\n"
		"  the computed Shanon's entropy of a node given the observation\n"
		"\n"
		""},
	 { "ImportanceSampling_BN", _wrap_ImportanceSampling_BN, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"pyagrum.IBayesNet\n"
		"  A constant reference over the IBayesNet referenced by this class.\n"
		"\n"
		"Raises\n"
		"------\n"
		"  pyagrum.UndefinedElement\n"
		"    If no Bayes net has been assigned to the inference.\n"
		"\n"
		""},
	 { "ImportanceSampling_currentPosterior", _wrap_ImportanceSampling_currentPosterior, METH_VARARGS, "\n"
		"\n"
		"Computes and returns the current posterior of a node.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"var : int\n"
		"  the node Id of the node for which we need a posterior probability\n"
		"nodeName : str\n"
		"  the node name of the node for which we need a posterior probability\n"
		"\n"
		"Returns\n"
		"-------\n"
		"pyagrum.Tensor\n"
		"  a const ref to the current posterior probability of the node\n"
		"\n"
		"Raises\n"
		"------\n"
		"UndefinedElement\n"
		"  If an element of nodes is not in targets\n"
		"\n"
		""},
	 { "ImportanceSampling_setEvidence", _wrap_ImportanceSampling_setEvidence, METH_VARARGS, NULL},
	 { "ImportanceSampling_updateEvidence", _wrap_ImportanceSampling_updateEvidence, METH_VARARGS, NULL},
	 { "ImportanceSampling_setTargets", _wrap_ImportanceSampling_setTargets, METH_VARARGS, NULL},
	 { "ImportanceSampling_hardEvidenceNodes", _wrap_ImportanceSampling_hardEvidenceNodes, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"set\n"
		"  the set of nodes with hard evidence\n"
		"\n"
		""},
	 { "ImportanceSampling_softEvidenceNodes", _wrap_ImportanceSampling_softEvidenceNodes, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"set\n"
		"  the set of nodes with soft evidence\n"
		"\n"
		""},
	 { "ImportanceSampling_targets", _wrap_ImportanceSampling_targets, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"list\n"
		"  the list of marginal targets\n"
		"\n"
		""},
	 { "ImportanceSampling_evidenceImpact", _wrap_ImportanceSampling_evidenceImpact, METH_VARARGS, "\n"
		"\n"
		"Create a pyagrum.Tensor for P(target|evs) (for all instanciation of target and evs)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"target : set\n"
		"  a set of targets ids or names.\n"
		"evs : set\n"
		"  a set of nodes ids or names.\n"
		"\n"
		"Warnings\n"
		"--------\n"
		"if some evs are d-separated, they are not included in the Tensor.\n"
		"\n"
		"Returns\n"
		"-------\n"
		"pyagrum.Tensor\n"
		"  a Tensor for P(targets|evs)\n"
		"\n"
		""},
	 { "ImportanceSampling_swigregister", ImportanceSampling_swigregister, METH_O, NULL},
	 { "ImportanceSampling_swiginit", ImportanceSampling_swiginit, METH_VARARGS, NULL},
	 { "new_WeightedSampling", _wrap_new_WeightedSampling, METH_O, NULL},
	 { "delete_WeightedSampling", _wrap_delete_WeightedSampling, METH_O, NULL},
	 { "WeightedSampling_setVerbosity", _wrap_WeightedSampling_setVerbosity, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"v : bool\n"
		"        verbosity\n"
		"\n"
		""},
	 { "WeightedSampling_setEpsilon", _wrap_WeightedSampling_setEpsilon, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"eps : float\n"
		"	the epsilon we want to use\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.OutOfBounds\n"
		"	If eps<0\n"
		"\n"
		""},
	 { "WeightedSampling_setMinEpsilonRate", _wrap_WeightedSampling_setMinEpsilonRate, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"rate : float\n"
		"	the minimal epsilon rate\n"
		"\n"
		""},
	 { "WeightedSampling_setMaxIter", _wrap_WeightedSampling_setMaxIter, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"max : int\n"
		"	the maximum number of iteration\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.OutOfBounds\n"
		"	If max <= 1\n"
		"\n"
		""},
	 { "WeightedSampling_setMaxTime", _wrap_WeightedSampling_setMaxTime, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"tiemout : float\n"
		"	stopping criterion on timeout (in seconds)\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.OutOfBounds\n"
		"	If timeout<=0.0\n"
		"\n"
		""},
	 { "WeightedSampling_setPeriodSize", _wrap_WeightedSampling_setPeriodSize, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"p : int\n"
		"	number of samples between 2 stopping\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.OutOfBounds\n"
		"	If p<1\n"
		"\n"
		""},
	 { "WeightedSampling_verbosity", _wrap_WeightedSampling_verbosity, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"bool\n"
		"	True if the verbosity is enabled\n"
		"\n"
		""},
	 { "WeightedSampling_epsilon", _wrap_WeightedSampling_epsilon, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"float\n"
		"	the value of epsilon\n"
		"\n"
		""},
	 { "WeightedSampling_minEpsilonRate", _wrap_WeightedSampling_minEpsilonRate, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"float\n"
		"	the value of the minimal epsilon rate\n"
		"\n"
		""},
	 { "WeightedSampling_maxIter", _wrap_WeightedSampling_maxIter, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"	the criterion on number of iterations\n"
		"\n"
		""},
	 { "WeightedSampling_maxTime", _wrap_WeightedSampling_maxTime, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"float\n"
		"	the timeout(in seconds)\n"
		"\n"
		""},
	 { "WeightedSampling_periodSize", _wrap_WeightedSampling_periodSize, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"	the number of samples between 2 stopping\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.OutOfBounds\n"
		"	If p<1\n"
		"\n"
		""},
	 { "WeightedSampling_nbrIterations", _wrap_WeightedSampling_nbrIterations, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"	the number of iterations\n"
		"\n"
		""},
	 { "WeightedSampling_currentTime", _wrap_WeightedSampling_currentTime, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"float\n"
		"	get the current running time in second (float)\n"
		"\n"
		""},
	 { "WeightedSampling_messageApproximationScheme", _wrap_WeightedSampling_messageApproximationScheme, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"str\n"
		"	the approximation scheme message\n"
		"\n"
		""},
	 { "WeightedSampling_history", _wrap_WeightedSampling_history, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"tuple\n"
		"	the scheme history\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.OperationNotAllowed\n"
		"	If the scheme did not performed or if verbosity is set to false\n"
		"\n"
		""},
	 { "WeightedSampling__asIApproximationSchemeConfiguration", _wrap_WeightedSampling__asIApproximationSchemeConfiguration, METH_O, NULL},
	 { "WeightedSampling_makeInference", _wrap_WeightedSampling_makeInference, METH_O, "\n"
		"\n"
		"Perform the heavy computations needed to compute the targets' posteriors\n"
		"\n"
		"In a Junction tree propagation scheme, for instance, the heavy computations are those of the messages sent in the JT.\n"
		"This is precisely what makeInference should compute. Later, the computations of the posteriors can be done 'lightly' by multiplying and projecting those messages.\n"
		"\n"
		""},
	 { "WeightedSampling_posterior", _wrap_WeightedSampling_posterior, METH_VARARGS, "\n"
		"\n"
		"Computes and returns the posterior of a node.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"var : int\n"
		"  the node Id of the node for which we need a posterior probability\n"
		"nodeName : str\n"
		"  the node name of the node for which we need a posterior probability\n"
		"\n"
		"Returns\n"
		"-------\n"
		"pyagrum.Tensor\n"
		"  a const ref to the posterior probability of the node\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.UndefinedElement\n"
		"  If an element of nodes is not in targets\n"
		"\n"
		""},
	 { "WeightedSampling_addEvidence", _wrap_WeightedSampling_addEvidence, METH_VARARGS, "\n"
		"\n"
		"Adds a new evidence on a node (might be soft or hard).\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id : int\n"
		"  a node Id\n"
		"nodeName : int\n"
		"  a node name\n"
		"val :\n"
		"  (int) a node value\n"
		"val :\n"
		"  (str) the label of the node value\n"
		"vals : list\n"
		"  a list of values\n"
		"\n"
		"Raises\n"
		"------\n"
		"  pyagrum.InvalidArgument\n"
		"    If the node already has an evidence\n"
		"  pyagrum.InvalidArgument\n"
		"    If val is not a value for the node\n"
		"  pyagrum.InvalidArgument\n"
		"    If the size of vals is different from the domain side of the node\n"
		"  pyagrum.FatalError\n"
		"    If vals is a vector of 0s\n"
		"  pyagrum.UndefinedElement\n"
		"    If the node does not belong to the Bayesian network\n"
		"\n"
		""},
	 { "WeightedSampling_chgEvidence", _wrap_WeightedSampling_chgEvidence, METH_VARARGS, "\n"
		"\n"
		"Change the value of an already existing evidence on a node (might be soft or hard).\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id : int\n"
		"  a node Id\n"
		"nodeName : int\n"
		"  a node name\n"
		"val : int|str\n"
		"  a node value or the label of the node value\n"
		"vals : List[float]\n"
		"  a list of values\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.InvalidArgument\n"
		"  If the node does not already have an evidence\n"
		"pyagrum.InvalidArgument\n"
		"  If val is not a value for the node\n"
		"pyagrum.InvalidArgument\n"
		"  If the size of vals is different from the domain side of the node\n"
		"pyagrum.FatalError\n"
		"  If vals is a vector of 0s\n"
		"pyagrum.UndefinedElement\n"
		"  If the node does not belong to the Bayesian network\n"
		"\n"
		""},
	 { "WeightedSampling_hasEvidence", _wrap_WeightedSampling_hasEvidence, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id : int\n"
		"  a node Id\n"
		"nodeName : str\n"
		"  a node name\n"
		"\n"
		"Returns\n"
		"-------\n"
		"bool\n"
		"  True if some node(s) (or the one in parameters) have received evidence\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.IndexError\n"
		"  If the node does not belong to the Bayesian network\n"
		"\n"
		""},
	 { "WeightedSampling_eraseAllEvidence", _wrap_WeightedSampling_eraseAllEvidence, METH_O, "\n"
		"\n"
		"Removes all the evidence entered into the network.\n"
		"\n"
		""},
	 { "WeightedSampling_eraseEvidence", _wrap_WeightedSampling_eraseEvidence, METH_VARARGS, "\n"
		"\n"
		"Remove the evidence, if any, corresponding to the node Id or name.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id : int\n"
		"  a node Id\n"
		"nodeName : int\n"
		"  a node name\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.IndexError\n"
		"  If the node does not belong to the Bayesian network\n"
		"\n"
		""},
	 { "WeightedSampling_hasHardEvidence", _wrap_WeightedSampling_hasHardEvidence, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id : int\n"
		"  a node Id\n"
		"nodeName : str\n"
		"  a node name\n"
		"\n"
		"Returns\n"
		"-------\n"
		"bool\n"
		"  True if node has received a hard evidence\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.IndexError\n"
		"  If the node does not belong to the Bayesian network\n"
		"\n"
		""},
	 { "WeightedSampling_hasSoftEvidence", _wrap_WeightedSampling_hasSoftEvidence, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id : int\n"
		"  a node Id\n"
		"nodeName : str\n"
		"  a node name\n"
		"\n"
		"Returns\n"
		"-------\n"
		"bool\n"
		"  True if node has received a soft evidence\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.IndexError\n"
		"  If the node does not belong to the Bayesian network\n"
		"\n"
		""},
	 { "WeightedSampling_nbrEvidence", _wrap_WeightedSampling_nbrEvidence, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"  the number of evidence entered into the Bayesian network\n"
		"\n"
		""},
	 { "WeightedSampling_nbrHardEvidence", _wrap_WeightedSampling_nbrHardEvidence, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"  the number of hard evidence entered into the Bayesian network\n"
		"\n"
		""},
	 { "WeightedSampling_nbrSoftEvidence", _wrap_WeightedSampling_nbrSoftEvidence, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"  the number of soft evidence entered into the Bayesian network\n"
		"\n"
		""},
	 { "WeightedSampling_eraseAllTargets", _wrap_WeightedSampling_eraseAllTargets, METH_O, "\n"
		"\n"
		"Clear all previously defined targets (marginal and joint targets).\n"
		"\n"
		"As a result, no posterior can be computed (since we can only compute the posteriors of the marginal or joint targets that have been added by the user).\n"
		"\n"
		""},
	 { "WeightedSampling_addAllTargets", _wrap_WeightedSampling_addAllTargets, METH_O, "\n"
		"\n"
		"Add all the nodes as targets.\n"
		"\n"
		""},
	 { "WeightedSampling_addTarget", _wrap_WeightedSampling_addTarget, METH_VARARGS, "\n"
		"\n"
		"Add a marginal target to the list of targets.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"target : int\n"
		"  a node Id\n"
		"nodeName : str\n"
		"  a node name\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.UndefinedElement\n"
		"  If target is not a NodeId in the Bayes net\n"
		"\n"
		""},
	 { "WeightedSampling_eraseTarget", _wrap_WeightedSampling_eraseTarget, METH_VARARGS, "\n"
		"\n"
		"Remove, if existing, the marginal target.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"target : int\n"
		"  a node Id\n"
		"nodeName : int\n"
		"  a node name\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.IndexError\n"
		"  If one of the node does not belong to the Bayesian network\n"
		"pyagrum.UndefinedElement\n"
		"  If node Id is not in the Bayesian network\n"
		"\n"
		""},
	 { "WeightedSampling_isTarget", _wrap_WeightedSampling_isTarget, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"variable : int\n"
		" a node Id\n"
		"nodeName : str\n"
		"  a node name\n"
		"\n"
		"Returns\n"
		"-------\n"
		"bool\n"
		"  True if variable is a (marginal) target\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.IndexError\n"
		"  If the node does not belong to the Bayesian network\n"
		"pyagrum.UndefinedElement\n"
		"  If node Id is not in the Bayesian network\n"
		"\n"
		""},
	 { "WeightedSampling_nbrTargets", _wrap_WeightedSampling_nbrTargets, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"  the number of marginal targets\n"
		"\n"
		""},
	 { "WeightedSampling_H", _wrap_WeightedSampling_H, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"X : int\n"
		"  a node Id\n"
		"nodeName : str\n"
		"  a node name\n"
		"\n"
		"Returns\n"
		"-------\n"
		"float\n"
		"  the computed Shanon's entropy of a node given the observation\n"
		"\n"
		""},
	 { "WeightedSampling_BN", _wrap_WeightedSampling_BN, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"pyagrum.IBayesNet\n"
		"  A constant reference over the IBayesNet referenced by this class.\n"
		"\n"
		"Raises\n"
		"------\n"
		"  pyagrum.UndefinedElement\n"
		"    If no Bayes net has been assigned to the inference.\n"
		"\n"
		""},
	 { "WeightedSampling_currentPosterior", _wrap_WeightedSampling_currentPosterior, METH_VARARGS, "\n"
		"\n"
		"Computes and returns the current posterior of a node.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"var : int\n"
		"  the node Id of the node for which we need a posterior probability\n"
		"nodeName : str\n"
		"  the node name of the node for which we need a posterior probability\n"
		"\n"
		"Returns\n"
		"-------\n"
		"pyagrum.Tensor\n"
		"  a const ref to the current posterior probability of the node\n"
		"\n"
		"Raises\n"
		"------\n"
		"UndefinedElement\n"
		"  If an element of nodes is not in targets\n"
		"\n"
		""},
	 { "WeightedSampling_setEvidence", _wrap_WeightedSampling_setEvidence, METH_VARARGS, NULL},
	 { "WeightedSampling_updateEvidence", _wrap_WeightedSampling_updateEvidence, METH_VARARGS, NULL},
	 { "WeightedSampling_setTargets", _wrap_WeightedSampling_setTargets, METH_VARARGS, NULL},
	 { "WeightedSampling_hardEvidenceNodes", _wrap_WeightedSampling_hardEvidenceNodes, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"set\n"
		"  the set of nodes with hard evidence\n"
		"\n"
		""},
	 { "WeightedSampling_softEvidenceNodes", _wrap_WeightedSampling_softEvidenceNodes, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"set\n"
		"  the set of nodes with soft evidence\n"
		"\n"
		""},
	 { "WeightedSampling_targets", _wrap_WeightedSampling_targets, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"list\n"
		"  the list of marginal targets\n"
		"\n"
		""},
	 { "WeightedSampling_evidenceImpact", _wrap_WeightedSampling_evidenceImpact, METH_VARARGS, "\n"
		"\n"
		"Create a pyagrum.Tensor for P(target|evs) (for all instanciation of target and evs)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"target : set\n"
		"  a set of targets ids or names.\n"
		"evs : set\n"
		"  a set of nodes ids or names.\n"
		"\n"
		"Warnings\n"
		"--------\n"
		"if some evs are d-separated, they are not included in the Tensor.\n"
		"\n"
		"Returns\n"
		"-------\n"
		"pyagrum.Tensor\n"
		"  a Tensor for P(targets|evs)\n"
		"\n"
		""},
	 { "WeightedSampling_swigregister", WeightedSampling_swigregister, METH_O, NULL},
	 { "WeightedSampling_swiginit", WeightedSampling_swiginit, METH_VARARGS, NULL},
	 { "new_MonteCarloSampling", _wrap_new_MonteCarloSampling, METH_O, NULL},
	 { "delete_MonteCarloSampling", _wrap_delete_MonteCarloSampling, METH_O, NULL},
	 { "MonteCarloSampling_setVerbosity", _wrap_MonteCarloSampling_setVerbosity, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"v : bool\n"
		"        verbosity\n"
		"\n"
		""},
	 { "MonteCarloSampling_setEpsilon", _wrap_MonteCarloSampling_setEpsilon, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"eps : float\n"
		"	the epsilon we want to use\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.OutOfBounds\n"
		"	If eps<0\n"
		"\n"
		""},
	 { "MonteCarloSampling_setMinEpsilonRate", _wrap_MonteCarloSampling_setMinEpsilonRate, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"rate : float\n"
		"	the minimal epsilon rate\n"
		"\n"
		""},
	 { "MonteCarloSampling_setMaxIter", _wrap_MonteCarloSampling_setMaxIter, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"max : int\n"
		"	the maximum number of iteration\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.OutOfBounds\n"
		"	If max <= 1\n"
		"\n"
		""},
	 { "MonteCarloSampling_setMaxTime", _wrap_MonteCarloSampling_setMaxTime, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"tiemout : float\n"
		"	stopping criterion on timeout (in seconds)\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.OutOfBounds\n"
		"	If timeout<=0.0\n"
		"\n"
		""},
	 { "MonteCarloSampling_setPeriodSize", _wrap_MonteCarloSampling_setPeriodSize, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"p : int\n"
		"	number of samples between 2 stopping\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.OutOfBounds\n"
		"	If p<1\n"
		"\n"
		""},
	 { "MonteCarloSampling_verbosity", _wrap_MonteCarloSampling_verbosity, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"bool\n"
		"	True if the verbosity is enabled\n"
		"\n"
		""},
	 { "MonteCarloSampling_epsilon", _wrap_MonteCarloSampling_epsilon, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"float\n"
		"	the value of epsilon\n"
		"\n"
		""},
	 { "MonteCarloSampling_minEpsilonRate", _wrap_MonteCarloSampling_minEpsilonRate, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"float\n"
		"	the value of the minimal epsilon rate\n"
		"\n"
		""},
	 { "MonteCarloSampling_maxIter", _wrap_MonteCarloSampling_maxIter, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"	the criterion on number of iterations\n"
		"\n"
		""},
	 { "MonteCarloSampling_maxTime", _wrap_MonteCarloSampling_maxTime, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"float\n"
		"	the timeout(in seconds)\n"
		"\n"
		""},
	 { "MonteCarloSampling_periodSize", _wrap_MonteCarloSampling_periodSize, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"	the number of samples between 2 stopping\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.OutOfBounds\n"
		"	If p<1\n"
		"\n"
		""},
	 { "MonteCarloSampling_nbrIterations", _wrap_MonteCarloSampling_nbrIterations, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"	the number of iterations\n"
		"\n"
		""},
	 { "MonteCarloSampling_currentTime", _wrap_MonteCarloSampling_currentTime, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"float\n"
		"	get the current running time in second (float)\n"
		"\n"
		""},
	 { "MonteCarloSampling_messageApproximationScheme", _wrap_MonteCarloSampling_messageApproximationScheme, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"str\n"
		"	the approximation scheme message\n"
		"\n"
		""},
	 { "MonteCarloSampling_history", _wrap_MonteCarloSampling_history, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"tuple\n"
		"	the scheme history\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.OperationNotAllowed\n"
		"	If the scheme did not performed or if verbosity is set to false\n"
		"\n"
		""},
	 { "MonteCarloSampling__asIApproximationSchemeConfiguration", _wrap_MonteCarloSampling__asIApproximationSchemeConfiguration, METH_O, NULL},
	 { "MonteCarloSampling_makeInference", _wrap_MonteCarloSampling_makeInference, METH_O, "\n"
		"\n"
		"Perform the heavy computations needed to compute the targets' posteriors\n"
		"\n"
		"In a Junction tree propagation scheme, for instance, the heavy computations are those of the messages sent in the JT.\n"
		"This is precisely what makeInference should compute. Later, the computations of the posteriors can be done 'lightly' by multiplying and projecting those messages.\n"
		"\n"
		""},
	 { "MonteCarloSampling_posterior", _wrap_MonteCarloSampling_posterior, METH_VARARGS, "\n"
		"\n"
		"Computes and returns the posterior of a node.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"var : int\n"
		"  the node Id of the node for which we need a posterior probability\n"
		"nodeName : str\n"
		"  the node name of the node for which we need a posterior probability\n"
		"\n"
		"Returns\n"
		"-------\n"
		"pyagrum.Tensor\n"
		"  a const ref to the posterior probability of the node\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.UndefinedElement\n"
		"  If an element of nodes is not in targets\n"
		"\n"
		""},
	 { "MonteCarloSampling_addEvidence", _wrap_MonteCarloSampling_addEvidence, METH_VARARGS, "\n"
		"\n"
		"Adds a new evidence on a node (might be soft or hard).\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id : int\n"
		"  a node Id\n"
		"nodeName : int\n"
		"  a node name\n"
		"val :\n"
		"  (int) a node value\n"
		"val :\n"
		"  (str) the label of the node value\n"
		"vals : list\n"
		"  a list of values\n"
		"\n"
		"Raises\n"
		"------\n"
		"  pyagrum.InvalidArgument\n"
		"    If the node already has an evidence\n"
		"  pyagrum.InvalidArgument\n"
		"    If val is not a value for the node\n"
		"  pyagrum.InvalidArgument\n"
		"    If the size of vals is different from the domain side of the node\n"
		"  pyagrum.FatalError\n"
		"    If vals is a vector of 0s\n"
		"  pyagrum.UndefinedElement\n"
		"    If the node does not belong to the Bayesian network\n"
		"\n"
		""},
	 { "MonteCarloSampling_chgEvidence", _wrap_MonteCarloSampling_chgEvidence, METH_VARARGS, "\n"
		"\n"
		"Change the value of an already existing evidence on a node (might be soft or hard).\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id : int\n"
		"  a node Id\n"
		"nodeName : int\n"
		"  a node name\n"
		"val : int|str\n"
		"  a node value or the label of the node value\n"
		"vals : List[float]\n"
		"  a list of values\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.InvalidArgument\n"
		"  If the node does not already have an evidence\n"
		"pyagrum.InvalidArgument\n"
		"  If val is not a value for the node\n"
		"pyagrum.InvalidArgument\n"
		"  If the size of vals is different from the domain side of the node\n"
		"pyagrum.FatalError\n"
		"  If vals is a vector of 0s\n"
		"pyagrum.UndefinedElement\n"
		"  If the node does not belong to the Bayesian network\n"
		"\n"
		""},
	 { "MonteCarloSampling_hasEvidence", _wrap_MonteCarloSampling_hasEvidence, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id : int\n"
		"  a node Id\n"
		"nodeName : str\n"
		"  a node name\n"
		"\n"
		"Returns\n"
		"-------\n"
		"bool\n"
		"  True if some node(s) (or the one in parameters) have received evidence\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.IndexError\n"
		"  If the node does not belong to the Bayesian network\n"
		"\n"
		""},
	 { "MonteCarloSampling_eraseAllEvidence", _wrap_MonteCarloSampling_eraseAllEvidence, METH_O, "\n"
		"\n"
		"Removes all the evidence entered into the network.\n"
		"\n"
		""},
	 { "MonteCarloSampling_eraseEvidence", _wrap_MonteCarloSampling_eraseEvidence, METH_VARARGS, "\n"
		"\n"
		"Remove the evidence, if any, corresponding to the node Id or name.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id : int\n"
		"  a node Id\n"
		"nodeName : int\n"
		"  a node name\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.IndexError\n"
		"  If the node does not belong to the Bayesian network\n"
		"\n"
		""},
	 { "MonteCarloSampling_hasHardEvidence", _wrap_MonteCarloSampling_hasHardEvidence, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id : int\n"
		"  a node Id\n"
		"nodeName : str\n"
		"  a node name\n"
		"\n"
		"Returns\n"
		"-------\n"
		"bool\n"
		"  True if node has received a hard evidence\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.IndexError\n"
		"  If the node does not belong to the Bayesian network\n"
		"\n"
		""},
	 { "MonteCarloSampling_hasSoftEvidence", _wrap_MonteCarloSampling_hasSoftEvidence, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id : int\n"
		"  a node Id\n"
		"nodeName : str\n"
		"  a node name\n"
		"\n"
		"Returns\n"
		"-------\n"
		"bool\n"
		"  True if node has received a soft evidence\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.IndexError\n"
		"  If the node does not belong to the Bayesian network\n"
		"\n"
		""},
	 { "MonteCarloSampling_nbrEvidence", _wrap_MonteCarloSampling_nbrEvidence, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"  the number of evidence entered into the Bayesian network\n"
		"\n"
		""},
	 { "MonteCarloSampling_nbrHardEvidence", _wrap_MonteCarloSampling_nbrHardEvidence, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"  the number of hard evidence entered into the Bayesian network\n"
		"\n"
		""},
	 { "MonteCarloSampling_nbrSoftEvidence", _wrap_MonteCarloSampling_nbrSoftEvidence, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"  the number of soft evidence entered into the Bayesian network\n"
		"\n"
		""},
	 { "MonteCarloSampling_eraseAllTargets", _wrap_MonteCarloSampling_eraseAllTargets, METH_O, "\n"
		"\n"
		"Clear all previously defined targets (marginal and joint targets).\n"
		"\n"
		"As a result, no posterior can be computed (since we can only compute the posteriors of the marginal or joint targets that have been added by the user).\n"
		"\n"
		""},
	 { "MonteCarloSampling_addAllTargets", _wrap_MonteCarloSampling_addAllTargets, METH_O, "\n"
		"\n"
		"Add all the nodes as targets.\n"
		"\n"
		""},
	 { "MonteCarloSampling_addTarget", _wrap_MonteCarloSampling_addTarget, METH_VARARGS, "\n"
		"\n"
		"Add a marginal target to the list of targets.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"target : int\n"
		"  a node Id\n"
		"nodeName : str\n"
		"  a node name\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.UndefinedElement\n"
		"  If target is not a NodeId in the Bayes net\n"
		"\n"
		""},
	 { "MonteCarloSampling_eraseTarget", _wrap_MonteCarloSampling_eraseTarget, METH_VARARGS, "\n"
		"\n"
		"Remove, if existing, the marginal target.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"target : int\n"
		"  a node Id\n"
		"nodeName : int\n"
		"  a node name\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.IndexError\n"
		"  If one of the node does not belong to the Bayesian network\n"
		"pyagrum.UndefinedElement\n"
		"  If node Id is not in the Bayesian network\n"
		"\n"
		""},
	 { "MonteCarloSampling_isTarget", _wrap_MonteCarloSampling_isTarget, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"variable : int\n"
		" a node Id\n"
		"nodeName : str\n"
		"  a node name\n"
		"\n"
		"Returns\n"
		"-------\n"
		"bool\n"
		"  True if variable is a (marginal) target\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.IndexError\n"
		"  If the node does not belong to the Bayesian network\n"
		"pyagrum.UndefinedElement\n"
		"  If node Id is not in the Bayesian network\n"
		"\n"
		""},
	 { "MonteCarloSampling_nbrTargets", _wrap_MonteCarloSampling_nbrTargets, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"  the number of marginal targets\n"
		"\n"
		""},
	 { "MonteCarloSampling_H", _wrap_MonteCarloSampling_H, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"X : int\n"
		"  a node Id\n"
		"nodeName : str\n"
		"  a node name\n"
		"\n"
		"Returns\n"
		"-------\n"
		"float\n"
		"  the computed Shanon's entropy of a node given the observation\n"
		"\n"
		""},
	 { "MonteCarloSampling_BN", _wrap_MonteCarloSampling_BN, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"pyagrum.IBayesNet\n"
		"  A constant reference over the IBayesNet referenced by this class.\n"
		"\n"
		"Raises\n"
		"------\n"
		"  pyagrum.UndefinedElement\n"
		"    If no Bayes net has been assigned to the inference.\n"
		"\n"
		""},
	 { "MonteCarloSampling_currentPosterior", _wrap_MonteCarloSampling_currentPosterior, METH_VARARGS, "\n"
		"\n"
		"Computes and returns the current posterior of a node.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"var : int\n"
		"  the node Id of the node for which we need a posterior probability\n"
		"nodeName : str\n"
		"  the node name of the node for which we need a posterior probability\n"
		"\n"
		"Returns\n"
		"-------\n"
		"pyagrum.Tensor\n"
		"  a const ref to the current posterior probability of the node\n"
		"\n"
		"Raises\n"
		"------\n"
		"UndefinedElement\n"
		"  If an element of nodes is not in targets\n"
		"\n"
		""},
	 { "MonteCarloSampling_setEvidence", _wrap_MonteCarloSampling_setEvidence, METH_VARARGS, NULL},
	 { "MonteCarloSampling_updateEvidence", _wrap_MonteCarloSampling_updateEvidence, METH_VARARGS, NULL},
	 { "MonteCarloSampling_setTargets", _wrap_MonteCarloSampling_setTargets, METH_VARARGS, NULL},
	 { "MonteCarloSampling_hardEvidenceNodes", _wrap_MonteCarloSampling_hardEvidenceNodes, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"set\n"
		"  the set of nodes with hard evidence\n"
		"\n"
		""},
	 { "MonteCarloSampling_softEvidenceNodes", _wrap_MonteCarloSampling_softEvidenceNodes, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"set\n"
		"  the set of nodes with soft evidence\n"
		"\n"
		""},
	 { "MonteCarloSampling_targets", _wrap_MonteCarloSampling_targets, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"list\n"
		"  the list of marginal targets\n"
		"\n"
		""},
	 { "MonteCarloSampling_evidenceImpact", _wrap_MonteCarloSampling_evidenceImpact, METH_VARARGS, "\n"
		"\n"
		"Create a pyagrum.Tensor for P(target|evs) (for all instanciation of target and evs)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"target : set\n"
		"  a set of targets ids or names.\n"
		"evs : set\n"
		"  a set of nodes ids or names.\n"
		"\n"
		"Warnings\n"
		"--------\n"
		"if some evs are d-separated, they are not included in the Tensor.\n"
		"\n"
		"Returns\n"
		"-------\n"
		"pyagrum.Tensor\n"
		"  a Tensor for P(targets|evs)\n"
		"\n"
		""},
	 { "MonteCarloSampling_swigregister", MonteCarloSampling_swigregister, METH_O, NULL},
	 { "MonteCarloSampling_swiginit", MonteCarloSampling_swiginit, METH_VARARGS, NULL},
	 { "new_LoopyImportanceSampling", _wrap_new_LoopyImportanceSampling, METH_O, NULL},
	 { "delete_LoopyImportanceSampling", _wrap_delete_LoopyImportanceSampling, METH_O, NULL},
	 { "LoopyImportanceSampling_makeInference_", _wrap_LoopyImportanceSampling_makeInference_, METH_O, NULL},
	 { "LoopyImportanceSampling_setVirtualLBPSize", _wrap_LoopyImportanceSampling_setVirtualLBPSize, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"vlbpsize : float\n"
		"  the size of the virtual LBP\n"
		"\n"
		""},
	 { "LoopyImportanceSampling_setVerbosity", _wrap_LoopyImportanceSampling_setVerbosity, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"v : bool\n"
		"        verbosity\n"
		"\n"
		""},
	 { "LoopyImportanceSampling_setEpsilon", _wrap_LoopyImportanceSampling_setEpsilon, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"eps : float\n"
		"	the epsilon we want to use\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.OutOfBounds\n"
		"	If eps<0\n"
		"\n"
		""},
	 { "LoopyImportanceSampling_setMinEpsilonRate", _wrap_LoopyImportanceSampling_setMinEpsilonRate, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"rate : float\n"
		"	the minimal epsilon rate\n"
		"\n"
		""},
	 { "LoopyImportanceSampling_setMaxIter", _wrap_LoopyImportanceSampling_setMaxIter, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"max : int\n"
		"	the maximum number of iteration\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.OutOfBounds\n"
		"	If max <= 1\n"
		"\n"
		""},
	 { "LoopyImportanceSampling_setMaxTime", _wrap_LoopyImportanceSampling_setMaxTime, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"tiemout : float\n"
		"	stopping criterion on timeout (in seconds)\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.OutOfBounds\n"
		"	If timeout<=0.0\n"
		"\n"
		""},
	 { "LoopyImportanceSampling_setPeriodSize", _wrap_LoopyImportanceSampling_setPeriodSize, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"p : int\n"
		"	number of samples between 2 stopping\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.OutOfBounds\n"
		"	If p<1\n"
		"\n"
		""},
	 { "LoopyImportanceSampling_verbosity", _wrap_LoopyImportanceSampling_verbosity, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"bool\n"
		"	True if the verbosity is enabled\n"
		"\n"
		""},
	 { "LoopyImportanceSampling_epsilon", _wrap_LoopyImportanceSampling_epsilon, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"float\n"
		"	the value of epsilon\n"
		"\n"
		""},
	 { "LoopyImportanceSampling_minEpsilonRate", _wrap_LoopyImportanceSampling_minEpsilonRate, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"float\n"
		"	the value of the minimal epsilon rate\n"
		"\n"
		""},
	 { "LoopyImportanceSampling_maxIter", _wrap_LoopyImportanceSampling_maxIter, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"	the criterion on number of iterations\n"
		"\n"
		""},
	 { "LoopyImportanceSampling_maxTime", _wrap_LoopyImportanceSampling_maxTime, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"float\n"
		"	the timeout(in seconds)\n"
		"\n"
		""},
	 { "LoopyImportanceSampling_periodSize", _wrap_LoopyImportanceSampling_periodSize, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"	the number of samples between 2 stopping\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.OutOfBounds\n"
		"	If p<1\n"
		"\n"
		""},
	 { "LoopyImportanceSampling_nbrIterations", _wrap_LoopyImportanceSampling_nbrIterations, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"	the number of iterations\n"
		"\n"
		""},
	 { "LoopyImportanceSampling_currentTime", _wrap_LoopyImportanceSampling_currentTime, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"float\n"
		"	get the current running time in second (float)\n"
		"\n"
		""},
	 { "LoopyImportanceSampling_messageApproximationScheme", _wrap_LoopyImportanceSampling_messageApproximationScheme, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"str\n"
		"	the approximation scheme message\n"
		"\n"
		""},
	 { "LoopyImportanceSampling_history", _wrap_LoopyImportanceSampling_history, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"tuple\n"
		"	the scheme history\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.OperationNotAllowed\n"
		"	If the scheme did not performed or if verbosity is set to false\n"
		"\n"
		""},
	 { "LoopyImportanceSampling__asIApproximationSchemeConfiguration", _wrap_LoopyImportanceSampling__asIApproximationSchemeConfiguration, METH_O, NULL},
	 { "LoopyImportanceSampling_makeInference", _wrap_LoopyImportanceSampling_makeInference, METH_O, "\n"
		"\n"
		"Perform the heavy computations needed to compute the targets' posteriors\n"
		"\n"
		"In a Junction tree propagation scheme, for instance, the heavy computations are those of the messages sent in the JT.\n"
		"This is precisely what makeInference should compute. Later, the computations of the posteriors can be done 'lightly' by multiplying and projecting those messages.\n"
		"\n"
		""},
	 { "LoopyImportanceSampling_posterior", _wrap_LoopyImportanceSampling_posterior, METH_VARARGS, "\n"
		"\n"
		"Computes and returns the posterior of a node.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"var : int\n"
		"  the node Id of the node for which we need a posterior probability\n"
		"nodeName : str\n"
		"  the node name of the node for which we need a posterior probability\n"
		"\n"
		"Returns\n"
		"-------\n"
		"pyagrum.Tensor\n"
		"  a const ref to the posterior probability of the node\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.UndefinedElement\n"
		"  If an element of nodes is not in targets\n"
		"\n"
		""},
	 { "LoopyImportanceSampling_addEvidence", _wrap_LoopyImportanceSampling_addEvidence, METH_VARARGS, "\n"
		"\n"
		"Adds a new evidence on a node (might be soft or hard).\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id : int\n"
		"  a node Id\n"
		"nodeName : int\n"
		"  a node name\n"
		"val :\n"
		"  (int) a node value\n"
		"val :\n"
		"  (str) the label of the node value\n"
		"vals : list\n"
		"  a list of values\n"
		"\n"
		"Raises\n"
		"------\n"
		"  pyagrum.InvalidArgument\n"
		"    If the node already has an evidence\n"
		"  pyagrum.InvalidArgument\n"
		"    If val is not a value for the node\n"
		"  pyagrum.InvalidArgument\n"
		"    If the size of vals is different from the domain side of the node\n"
		"  pyagrum.FatalError\n"
		"    If vals is a vector of 0s\n"
		"  pyagrum.UndefinedElement\n"
		"    If the node does not belong to the Bayesian network\n"
		"\n"
		""},
	 { "LoopyImportanceSampling_chgEvidence", _wrap_LoopyImportanceSampling_chgEvidence, METH_VARARGS, "\n"
		"\n"
		"Change the value of an already existing evidence on a node (might be soft or hard).\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id : int\n"
		"  a node Id\n"
		"nodeName : int\n"
		"  a node name\n"
		"val : int|str\n"
		"  a node value or the label of the node value\n"
		"vals : List[float]\n"
		"  a list of values\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.InvalidArgument\n"
		"  If the node does not already have an evidence\n"
		"pyagrum.InvalidArgument\n"
		"  If val is not a value for the node\n"
		"pyagrum.InvalidArgument\n"
		"  If the size of vals is different from the domain side of the node\n"
		"pyagrum.FatalError\n"
		"  If vals is a vector of 0s\n"
		"pyagrum.UndefinedElement\n"
		"  If the node does not belong to the Bayesian network\n"
		"\n"
		""},
	 { "LoopyImportanceSampling_hasEvidence", _wrap_LoopyImportanceSampling_hasEvidence, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id : int\n"
		"  a node Id\n"
		"nodeName : str\n"
		"  a node name\n"
		"\n"
		"Returns\n"
		"-------\n"
		"bool\n"
		"  True if some node(s) (or the one in parameters) have received evidence\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.IndexError\n"
		"  If the node does not belong to the Bayesian network\n"
		"\n"
		""},
	 { "LoopyImportanceSampling_eraseAllEvidence", _wrap_LoopyImportanceSampling_eraseAllEvidence, METH_O, "\n"
		"\n"
		"Removes all the evidence entered into the network.\n"
		"\n"
		""},
	 { "LoopyImportanceSampling_eraseEvidence", _wrap_LoopyImportanceSampling_eraseEvidence, METH_VARARGS, "\n"
		"\n"
		"Remove the evidence, if any, corresponding to the node Id or name.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id : int\n"
		"  a node Id\n"
		"nodeName : int\n"
		"  a node name\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.IndexError\n"
		"  If the node does not belong to the Bayesian network\n"
		"\n"
		""},
	 { "LoopyImportanceSampling_hasHardEvidence", _wrap_LoopyImportanceSampling_hasHardEvidence, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id : int\n"
		"  a node Id\n"
		"nodeName : str\n"
		"  a node name\n"
		"\n"
		"Returns\n"
		"-------\n"
		"bool\n"
		"  True if node has received a hard evidence\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.IndexError\n"
		"  If the node does not belong to the Bayesian network\n"
		"\n"
		""},
	 { "LoopyImportanceSampling_hasSoftEvidence", _wrap_LoopyImportanceSampling_hasSoftEvidence, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id : int\n"
		"  a node Id\n"
		"nodeName : str\n"
		"  a node name\n"
		"\n"
		"Returns\n"
		"-------\n"
		"bool\n"
		"  True if node has received a soft evidence\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.IndexError\n"
		"  If the node does not belong to the Bayesian network\n"
		"\n"
		""},
	 { "LoopyImportanceSampling_nbrEvidence", _wrap_LoopyImportanceSampling_nbrEvidence, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"  the number of evidence entered into the Bayesian network\n"
		"\n"
		""},
	 { "LoopyImportanceSampling_nbrHardEvidence", _wrap_LoopyImportanceSampling_nbrHardEvidence, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"  the number of hard evidence entered into the Bayesian network\n"
		"\n"
		""},
	 { "LoopyImportanceSampling_nbrSoftEvidence", _wrap_LoopyImportanceSampling_nbrSoftEvidence, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"  the number of soft evidence entered into the Bayesian network\n"
		"\n"
		""},
	 { "LoopyImportanceSampling_eraseAllTargets", _wrap_LoopyImportanceSampling_eraseAllTargets, METH_O, "\n"
		"\n"
		"Clear all previously defined targets (marginal and joint targets).\n"
		"\n"
		"As a result, no posterior can be computed (since we can only compute the posteriors of the marginal or joint targets that have been added by the user).\n"
		"\n"
		""},
	 { "LoopyImportanceSampling_addAllTargets", _wrap_LoopyImportanceSampling_addAllTargets, METH_O, "\n"
		"\n"
		"Add all the nodes as targets.\n"
		"\n"
		""},
	 { "LoopyImportanceSampling_addTarget", _wrap_LoopyImportanceSampling_addTarget, METH_VARARGS, "\n"
		"\n"
		"Add a marginal target to the list of targets.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"target : int\n"
		"  a node Id\n"
		"nodeName : str\n"
		"  a node name\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.UndefinedElement\n"
		"  If target is not a NodeId in the Bayes net\n"
		"\n"
		""},
	 { "LoopyImportanceSampling_eraseTarget", _wrap_LoopyImportanceSampling_eraseTarget, METH_VARARGS, "\n"
		"\n"
		"Remove, if existing, the marginal target.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"target : int\n"
		"  a node Id\n"
		"nodeName : int\n"
		"  a node name\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.IndexError\n"
		"  If one of the node does not belong to the Bayesian network\n"
		"pyagrum.UndefinedElement\n"
		"  If node Id is not in the Bayesian network\n"
		"\n"
		""},
	 { "LoopyImportanceSampling_isTarget", _wrap_LoopyImportanceSampling_isTarget, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"variable : int\n"
		" a node Id\n"
		"nodeName : str\n"
		"  a node name\n"
		"\n"
		"Returns\n"
		"-------\n"
		"bool\n"
		"  True if variable is a (marginal) target\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.IndexError\n"
		"  If the node does not belong to the Bayesian network\n"
		"pyagrum.UndefinedElement\n"
		"  If node Id is not in the Bayesian network\n"
		"\n"
		""},
	 { "LoopyImportanceSampling_nbrTargets", _wrap_LoopyImportanceSampling_nbrTargets, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"  the number of marginal targets\n"
		"\n"
		""},
	 { "LoopyImportanceSampling_H", _wrap_LoopyImportanceSampling_H, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"X : int\n"
		"  a node Id\n"
		"nodeName : str\n"
		"  a node name\n"
		"\n"
		"Returns\n"
		"-------\n"
		"float\n"
		"  the computed Shanon's entropy of a node given the observation\n"
		"\n"
		""},
	 { "LoopyImportanceSampling_BN", _wrap_LoopyImportanceSampling_BN, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"pyagrum.IBayesNet\n"
		"  A constant reference over the IBayesNet referenced by this class.\n"
		"\n"
		"Raises\n"
		"------\n"
		"  pyagrum.UndefinedElement\n"
		"    If no Bayes net has been assigned to the inference.\n"
		"\n"
		""},
	 { "LoopyImportanceSampling_currentPosterior", _wrap_LoopyImportanceSampling_currentPosterior, METH_VARARGS, "\n"
		"\n"
		"Computes and returns the current posterior of a node.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"var : int\n"
		"  the node Id of the node for which we need a posterior probability\n"
		"nodeName : str\n"
		"  the node name of the node for which we need a posterior probability\n"
		"\n"
		"Returns\n"
		"-------\n"
		"pyagrum.Tensor\n"
		"  a const ref to the current posterior probability of the node\n"
		"\n"
		"Raises\n"
		"------\n"
		"UndefinedElement\n"
		"  If an element of nodes is not in targets\n"
		"\n"
		""},
	 { "LoopyImportanceSampling_setEvidence", _wrap_LoopyImportanceSampling_setEvidence, METH_VARARGS, NULL},
	 { "LoopyImportanceSampling_updateEvidence", _wrap_LoopyImportanceSampling_updateEvidence, METH_VARARGS, NULL},
	 { "LoopyImportanceSampling_setTargets", _wrap_LoopyImportanceSampling_setTargets, METH_VARARGS, NULL},
	 { "LoopyImportanceSampling_hardEvidenceNodes", _wrap_LoopyImportanceSampling_hardEvidenceNodes, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"set\n"
		"  the set of nodes with hard evidence\n"
		"\n"
		""},
	 { "LoopyImportanceSampling_softEvidenceNodes", _wrap_LoopyImportanceSampling_softEvidenceNodes, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"set\n"
		"  the set of nodes with soft evidence\n"
		"\n"
		""},
	 { "LoopyImportanceSampling_targets", _wrap_LoopyImportanceSampling_targets, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"list\n"
		"  the list of marginal targets\n"
		"\n"
		""},
	 { "LoopyImportanceSampling_evidenceImpact", _wrap_LoopyImportanceSampling_evidenceImpact, METH_VARARGS, "\n"
		"\n"
		"Create a pyagrum.Tensor for P(target|evs) (for all instanciation of target and evs)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"target : set\n"
		"  a set of targets ids or names.\n"
		"evs : set\n"
		"  a set of nodes ids or names.\n"
		"\n"
		"Warnings\n"
		"--------\n"
		"if some evs are d-separated, they are not included in the Tensor.\n"
		"\n"
		"Returns\n"
		"-------\n"
		"pyagrum.Tensor\n"
		"  a Tensor for P(targets|evs)\n"
		"\n"
		""},
	 { "LoopyImportanceSampling_swigregister", LoopyImportanceSampling_swigregister, METH_O, NULL},
	 { "LoopyImportanceSampling_swiginit", LoopyImportanceSampling_swiginit, METH_VARARGS, NULL},
	 { "new_LoopyWeightedSampling", _wrap_new_LoopyWeightedSampling, METH_O, NULL},
	 { "delete_LoopyWeightedSampling", _wrap_delete_LoopyWeightedSampling, METH_O, NULL},
	 { "LoopyWeightedSampling_makeInference_", _wrap_LoopyWeightedSampling_makeInference_, METH_O, NULL},
	 { "LoopyWeightedSampling_setVirtualLBPSize", _wrap_LoopyWeightedSampling_setVirtualLBPSize, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"vlbpsize : float\n"
		"  the size of the virtual LBP\n"
		"\n"
		""},
	 { "LoopyWeightedSampling_setVerbosity", _wrap_LoopyWeightedSampling_setVerbosity, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"v : bool\n"
		"        verbosity\n"
		"\n"
		""},
	 { "LoopyWeightedSampling_setEpsilon", _wrap_LoopyWeightedSampling_setEpsilon, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"eps : float\n"
		"	the epsilon we want to use\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.OutOfBounds\n"
		"	If eps<0\n"
		"\n"
		""},
	 { "LoopyWeightedSampling_setMinEpsilonRate", _wrap_LoopyWeightedSampling_setMinEpsilonRate, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"rate : float\n"
		"	the minimal epsilon rate\n"
		"\n"
		""},
	 { "LoopyWeightedSampling_setMaxIter", _wrap_LoopyWeightedSampling_setMaxIter, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"max : int\n"
		"	the maximum number of iteration\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.OutOfBounds\n"
		"	If max <= 1\n"
		"\n"
		""},
	 { "LoopyWeightedSampling_setMaxTime", _wrap_LoopyWeightedSampling_setMaxTime, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"tiemout : float\n"
		"	stopping criterion on timeout (in seconds)\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.OutOfBounds\n"
		"	If timeout<=0.0\n"
		"\n"
		""},
	 { "LoopyWeightedSampling_setPeriodSize", _wrap_LoopyWeightedSampling_setPeriodSize, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"p : int\n"
		"	number of samples between 2 stopping\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.OutOfBounds\n"
		"	If p<1\n"
		"\n"
		""},
	 { "LoopyWeightedSampling_verbosity", _wrap_LoopyWeightedSampling_verbosity, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"bool\n"
		"	True if the verbosity is enabled\n"
		"\n"
		""},
	 { "LoopyWeightedSampling_epsilon", _wrap_LoopyWeightedSampling_epsilon, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"float\n"
		"	the value of epsilon\n"
		"\n"
		""},
	 { "LoopyWeightedSampling_minEpsilonRate", _wrap_LoopyWeightedSampling_minEpsilonRate, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"float\n"
		"	the value of the minimal epsilon rate\n"
		"\n"
		""},
	 { "LoopyWeightedSampling_maxIter", _wrap_LoopyWeightedSampling_maxIter, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"	the criterion on number of iterations\n"
		"\n"
		""},
	 { "LoopyWeightedSampling_maxTime", _wrap_LoopyWeightedSampling_maxTime, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"float\n"
		"	the timeout(in seconds)\n"
		"\n"
		""},
	 { "LoopyWeightedSampling_periodSize", _wrap_LoopyWeightedSampling_periodSize, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"	the number of samples between 2 stopping\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.OutOfBounds\n"
		"	If p<1\n"
		"\n"
		""},
	 { "LoopyWeightedSampling_nbrIterations", _wrap_LoopyWeightedSampling_nbrIterations, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"	the number of iterations\n"
		"\n"
		""},
	 { "LoopyWeightedSampling_currentTime", _wrap_LoopyWeightedSampling_currentTime, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"float\n"
		"	get the current running time in second (float)\n"
		"\n"
		""},
	 { "LoopyWeightedSampling_messageApproximationScheme", _wrap_LoopyWeightedSampling_messageApproximationScheme, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"str\n"
		"	the approximation scheme message\n"
		"\n"
		""},
	 { "LoopyWeightedSampling_history", _wrap_LoopyWeightedSampling_history, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"tuple\n"
		"	the scheme history\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.OperationNotAllowed\n"
		"	If the scheme did not performed or if verbosity is set to false\n"
		"\n"
		""},
	 { "LoopyWeightedSampling__asIApproximationSchemeConfiguration", _wrap_LoopyWeightedSampling__asIApproximationSchemeConfiguration, METH_O, NULL},
	 { "LoopyWeightedSampling_makeInference", _wrap_LoopyWeightedSampling_makeInference, METH_O, "\n"
		"\n"
		"Perform the heavy computations needed to compute the targets' posteriors\n"
		"\n"
		"In a Junction tree propagation scheme, for instance, the heavy computations are those of the messages sent in the JT.\n"
		"This is precisely what makeInference should compute. Later, the computations of the posteriors can be done 'lightly' by multiplying and projecting those messages.\n"
		"\n"
		""},
	 { "LoopyWeightedSampling_posterior", _wrap_LoopyWeightedSampling_posterior, METH_VARARGS, "\n"
		"\n"
		"Computes and returns the posterior of a node.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"var : int\n"
		"  the node Id of the node for which we need a posterior probability\n"
		"nodeName : str\n"
		"  the node name of the node for which we need a posterior probability\n"
		"\n"
		"Returns\n"
		"-------\n"
		"pyagrum.Tensor\n"
		"  a const ref to the posterior probability of the node\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.UndefinedElement\n"
		"  If an element of nodes is not in targets\n"
		"\n"
		""},
	 { "LoopyWeightedSampling_addEvidence", _wrap_LoopyWeightedSampling_addEvidence, METH_VARARGS, "\n"
		"\n"
		"Adds a new evidence on a node (might be soft or hard).\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id : int\n"
		"  a node Id\n"
		"nodeName : int\n"
		"  a node name\n"
		"val :\n"
		"  (int) a node value\n"
		"val :\n"
		"  (str) the label of the node value\n"
		"vals : list\n"
		"  a list of values\n"
		"\n"
		"Raises\n"
		"------\n"
		"  pyagrum.InvalidArgument\n"
		"    If the node already has an evidence\n"
		"  pyagrum.InvalidArgument\n"
		"    If val is not a value for the node\n"
		"  pyagrum.InvalidArgument\n"
		"    If the size of vals is different from the domain side of the node\n"
		"  pyagrum.FatalError\n"
		"    If vals is a vector of 0s\n"
		"  pyagrum.UndefinedElement\n"
		"    If the node does not belong to the Bayesian network\n"
		"\n"
		""},
	 { "LoopyWeightedSampling_chgEvidence", _wrap_LoopyWeightedSampling_chgEvidence, METH_VARARGS, "\n"
		"\n"
		"Change the value of an already existing evidence on a node (might be soft or hard).\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id : int\n"
		"  a node Id\n"
		"nodeName : int\n"
		"  a node name\n"
		"val : int|str\n"
		"  a node value or the label of the node value\n"
		"vals : List[float]\n"
		"  a list of values\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.InvalidArgument\n"
		"  If the node does not already have an evidence\n"
		"pyagrum.InvalidArgument\n"
		"  If val is not a value for the node\n"
		"pyagrum.InvalidArgument\n"
		"  If the size of vals is different from the domain side of the node\n"
		"pyagrum.FatalError\n"
		"  If vals is a vector of 0s\n"
		"pyagrum.UndefinedElement\n"
		"  If the node does not belong to the Bayesian network\n"
		"\n"
		""},
	 { "LoopyWeightedSampling_hasEvidence", _wrap_LoopyWeightedSampling_hasEvidence, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id : int\n"
		"  a node Id\n"
		"nodeName : str\n"
		"  a node name\n"
		"\n"
		"Returns\n"
		"-------\n"
		"bool\n"
		"  True if some node(s) (or the one in parameters) have received evidence\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.IndexError\n"
		"  If the node does not belong to the Bayesian network\n"
		"\n"
		""},
	 { "LoopyWeightedSampling_eraseAllEvidence", _wrap_LoopyWeightedSampling_eraseAllEvidence, METH_O, "\n"
		"\n"
		"Removes all the evidence entered into the network.\n"
		"\n"
		""},
	 { "LoopyWeightedSampling_eraseEvidence", _wrap_LoopyWeightedSampling_eraseEvidence, METH_VARARGS, "\n"
		"\n"
		"Remove the evidence, if any, corresponding to the node Id or name.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id : int\n"
		"  a node Id\n"
		"nodeName : int\n"
		"  a node name\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.IndexError\n"
		"  If the node does not belong to the Bayesian network\n"
		"\n"
		""},
	 { "LoopyWeightedSampling_hasHardEvidence", _wrap_LoopyWeightedSampling_hasHardEvidence, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id : int\n"
		"  a node Id\n"
		"nodeName : str\n"
		"  a node name\n"
		"\n"
		"Returns\n"
		"-------\n"
		"bool\n"
		"  True if node has received a hard evidence\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.IndexError\n"
		"  If the node does not belong to the Bayesian network\n"
		"\n"
		""},
	 { "LoopyWeightedSampling_hasSoftEvidence", _wrap_LoopyWeightedSampling_hasSoftEvidence, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id : int\n"
		"  a node Id\n"
		"nodeName : str\n"
		"  a node name\n"
		"\n"
		"Returns\n"
		"-------\n"
		"bool\n"
		"  True if node has received a soft evidence\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.IndexError\n"
		"  If the node does not belong to the Bayesian network\n"
		"\n"
		""},
	 { "LoopyWeightedSampling_nbrEvidence", _wrap_LoopyWeightedSampling_nbrEvidence, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"  the number of evidence entered into the Bayesian network\n"
		"\n"
		""},
	 { "LoopyWeightedSampling_nbrHardEvidence", _wrap_LoopyWeightedSampling_nbrHardEvidence, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"  the number of hard evidence entered into the Bayesian network\n"
		"\n"
		""},
	 { "LoopyWeightedSampling_nbrSoftEvidence", _wrap_LoopyWeightedSampling_nbrSoftEvidence, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"  the number of soft evidence entered into the Bayesian network\n"
		"\n"
		""},
	 { "LoopyWeightedSampling_eraseAllTargets", _wrap_LoopyWeightedSampling_eraseAllTargets, METH_O, "\n"
		"\n"
		"Clear all previously defined targets (marginal and joint targets).\n"
		"\n"
		"As a result, no posterior can be computed (since we can only compute the posteriors of the marginal or joint targets that have been added by the user).\n"
		"\n"
		""},
	 { "LoopyWeightedSampling_addAllTargets", _wrap_LoopyWeightedSampling_addAllTargets, METH_O, "\n"
		"\n"
		"Add all the nodes as targets.\n"
		"\n"
		""},
	 { "LoopyWeightedSampling_addTarget", _wrap_LoopyWeightedSampling_addTarget, METH_VARARGS, "\n"
		"\n"
		"Add a marginal target to the list of targets.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"target : int\n"
		"  a node Id\n"
		"nodeName : str\n"
		"  a node name\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.UndefinedElement\n"
		"  If target is not a NodeId in the Bayes net\n"
		"\n"
		""},
	 { "LoopyWeightedSampling_eraseTarget", _wrap_LoopyWeightedSampling_eraseTarget, METH_VARARGS, "\n"
		"\n"
		"Remove, if existing, the marginal target.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"target : int\n"
		"  a node Id\n"
		"nodeName : int\n"
		"  a node name\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.IndexError\n"
		"  If one of the node does not belong to the Bayesian network\n"
		"pyagrum.UndefinedElement\n"
		"  If node Id is not in the Bayesian network\n"
		"\n"
		""},
	 { "LoopyWeightedSampling_isTarget", _wrap_LoopyWeightedSampling_isTarget, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"variable : int\n"
		" a node Id\n"
		"nodeName : str\n"
		"  a node name\n"
		"\n"
		"Returns\n"
		"-------\n"
		"bool\n"
		"  True if variable is a (marginal) target\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.IndexError\n"
		"  If the node does not belong to the Bayesian network\n"
		"pyagrum.UndefinedElement\n"
		"  If node Id is not in the Bayesian network\n"
		"\n"
		""},
	 { "LoopyWeightedSampling_nbrTargets", _wrap_LoopyWeightedSampling_nbrTargets, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"  the number of marginal targets\n"
		"\n"
		""},
	 { "LoopyWeightedSampling_H", _wrap_LoopyWeightedSampling_H, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"X : int\n"
		"  a node Id\n"
		"nodeName : str\n"
		"  a node name\n"
		"\n"
		"Returns\n"
		"-------\n"
		"float\n"
		"  the computed Shanon's entropy of a node given the observation\n"
		"\n"
		""},
	 { "LoopyWeightedSampling_BN", _wrap_LoopyWeightedSampling_BN, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"pyagrum.IBayesNet\n"
		"  A constant reference over the IBayesNet referenced by this class.\n"
		"\n"
		"Raises\n"
		"------\n"
		"  pyagrum.UndefinedElement\n"
		"    If no Bayes net has been assigned to the inference.\n"
		"\n"
		""},
	 { "LoopyWeightedSampling_currentPosterior", _wrap_LoopyWeightedSampling_currentPosterior, METH_VARARGS, "\n"
		"\n"
		"Computes and returns the current posterior of a node.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"var : int\n"
		"  the node Id of the node for which we need a posterior probability\n"
		"nodeName : str\n"
		"  the node name of the node for which we need a posterior probability\n"
		"\n"
		"Returns\n"
		"-------\n"
		"pyagrum.Tensor\n"
		"  a const ref to the current posterior probability of the node\n"
		"\n"
		"Raises\n"
		"------\n"
		"UndefinedElement\n"
		"  If an element of nodes is not in targets\n"
		"\n"
		""},
	 { "LoopyWeightedSampling_setEvidence", _wrap_LoopyWeightedSampling_setEvidence, METH_VARARGS, NULL},
	 { "LoopyWeightedSampling_updateEvidence", _wrap_LoopyWeightedSampling_updateEvidence, METH_VARARGS, NULL},
	 { "LoopyWeightedSampling_setTargets", _wrap_LoopyWeightedSampling_setTargets, METH_VARARGS, NULL},
	 { "LoopyWeightedSampling_hardEvidenceNodes", _wrap_LoopyWeightedSampling_hardEvidenceNodes, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"set\n"
		"  the set of nodes with hard evidence\n"
		"\n"
		""},
	 { "LoopyWeightedSampling_softEvidenceNodes", _wrap_LoopyWeightedSampling_softEvidenceNodes, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"set\n"
		"  the set of nodes with soft evidence\n"
		"\n"
		""},
	 { "LoopyWeightedSampling_targets", _wrap_LoopyWeightedSampling_targets, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"list\n"
		"  the list of marginal targets\n"
		"\n"
		""},
	 { "LoopyWeightedSampling_evidenceImpact", _wrap_LoopyWeightedSampling_evidenceImpact, METH_VARARGS, "\n"
		"\n"
		"Create a pyagrum.Tensor for P(target|evs) (for all instanciation of target and evs)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"target : set\n"
		"  a set of targets ids or names.\n"
		"evs : set\n"
		"  a set of nodes ids or names.\n"
		"\n"
		"Warnings\n"
		"--------\n"
		"if some evs are d-separated, they are not included in the Tensor.\n"
		"\n"
		"Returns\n"
		"-------\n"
		"pyagrum.Tensor\n"
		"  a Tensor for P(targets|evs)\n"
		"\n"
		""},
	 { "LoopyWeightedSampling_swigregister", LoopyWeightedSampling_swigregister, METH_O, NULL},
	 { "LoopyWeightedSampling_swiginit", LoopyWeightedSampling_swiginit, METH_VARARGS, NULL},
	 { "new_LoopyGibbsSampling", _wrap_new_LoopyGibbsSampling, METH_O, NULL},
	 { "delete_LoopyGibbsSampling", _wrap_delete_LoopyGibbsSampling, METH_O, NULL},
	 { "LoopyGibbsSampling_makeInference_", _wrap_LoopyGibbsSampling_makeInference_, METH_O, NULL},
	 { "LoopyGibbsSampling_setVirtualLBPSize", _wrap_LoopyGibbsSampling_setVirtualLBPSize, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"vlbpsize : float\n"
		"  the size of the virtual LBP\n"
		"\n"
		""},
	 { "LoopyGibbsSampling_setVerbosity", _wrap_LoopyGibbsSampling_setVerbosity, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"v : bool\n"
		"        verbosity\n"
		"\n"
		""},
	 { "LoopyGibbsSampling_setEpsilon", _wrap_LoopyGibbsSampling_setEpsilon, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"eps : float\n"
		"	the epsilon we want to use\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.OutOfBounds\n"
		"	If eps<0\n"
		"\n"
		""},
	 { "LoopyGibbsSampling_setMinEpsilonRate", _wrap_LoopyGibbsSampling_setMinEpsilonRate, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"rate : float\n"
		"	the minimal epsilon rate\n"
		"\n"
		""},
	 { "LoopyGibbsSampling_setMaxIter", _wrap_LoopyGibbsSampling_setMaxIter, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"max : int\n"
		"	the maximum number of iteration\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.OutOfBounds\n"
		"	If max <= 1\n"
		"\n"
		""},
	 { "LoopyGibbsSampling_setMaxTime", _wrap_LoopyGibbsSampling_setMaxTime, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"tiemout : float\n"
		"	stopping criterion on timeout (in seconds)\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.OutOfBounds\n"
		"	If timeout<=0.0\n"
		"\n"
		""},
	 { "LoopyGibbsSampling_setPeriodSize", _wrap_LoopyGibbsSampling_setPeriodSize, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"p : int\n"
		"	number of samples between 2 stopping\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.OutOfBounds\n"
		"	If p<1\n"
		"\n"
		""},
	 { "LoopyGibbsSampling_verbosity", _wrap_LoopyGibbsSampling_verbosity, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"bool\n"
		"	True if the verbosity is enabled\n"
		"\n"
		""},
	 { "LoopyGibbsSampling_epsilon", _wrap_LoopyGibbsSampling_epsilon, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"float\n"
		"	the value of epsilon\n"
		"\n"
		""},
	 { "LoopyGibbsSampling_minEpsilonRate", _wrap_LoopyGibbsSampling_minEpsilonRate, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"float\n"
		"	the value of the minimal epsilon rate\n"
		"\n"
		""},
	 { "LoopyGibbsSampling_maxIter", _wrap_LoopyGibbsSampling_maxIter, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"	the criterion on number of iterations\n"
		"\n"
		""},
	 { "LoopyGibbsSampling_maxTime", _wrap_LoopyGibbsSampling_maxTime, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"float\n"
		"	the timeout(in seconds)\n"
		"\n"
		""},
	 { "LoopyGibbsSampling_periodSize", _wrap_LoopyGibbsSampling_periodSize, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"	the number of samples between 2 stopping\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.OutOfBounds\n"
		"	If p<1\n"
		"\n"
		""},
	 { "LoopyGibbsSampling_nbrIterations", _wrap_LoopyGibbsSampling_nbrIterations, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"	the number of iterations\n"
		"\n"
		""},
	 { "LoopyGibbsSampling_currentTime", _wrap_LoopyGibbsSampling_currentTime, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"float\n"
		"	get the current running time in second (float)\n"
		"\n"
		""},
	 { "LoopyGibbsSampling_messageApproximationScheme", _wrap_LoopyGibbsSampling_messageApproximationScheme, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"str\n"
		"	the approximation scheme message\n"
		"\n"
		""},
	 { "LoopyGibbsSampling_history", _wrap_LoopyGibbsSampling_history, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"tuple\n"
		"	the scheme history\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.OperationNotAllowed\n"
		"	If the scheme did not performed or if verbosity is set to false\n"
		"\n"
		""},
	 { "LoopyGibbsSampling__asIApproximationSchemeConfiguration", _wrap_LoopyGibbsSampling__asIApproximationSchemeConfiguration, METH_O, NULL},
	 { "LoopyGibbsSampling_makeInference", _wrap_LoopyGibbsSampling_makeInference, METH_O, "\n"
		"\n"
		"Perform the heavy computations needed to compute the targets' posteriors\n"
		"\n"
		"In a Junction tree propagation scheme, for instance, the heavy computations are those of the messages sent in the JT.\n"
		"This is precisely what makeInference should compute. Later, the computations of the posteriors can be done 'lightly' by multiplying and projecting those messages.\n"
		"\n"
		""},
	 { "LoopyGibbsSampling_posterior", _wrap_LoopyGibbsSampling_posterior, METH_VARARGS, "\n"
		"\n"
		"Computes and returns the posterior of a node.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"var : int\n"
		"  the node Id of the node for which we need a posterior probability\n"
		"nodeName : str\n"
		"  the node name of the node for which we need a posterior probability\n"
		"\n"
		"Returns\n"
		"-------\n"
		"pyagrum.Tensor\n"
		"  a const ref to the posterior probability of the node\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.UndefinedElement\n"
		"  If an element of nodes is not in targets\n"
		"\n"
		""},
	 { "LoopyGibbsSampling_addEvidence", _wrap_LoopyGibbsSampling_addEvidence, METH_VARARGS, "\n"
		"\n"
		"Adds a new evidence on a node (might be soft or hard).\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id : int\n"
		"  a node Id\n"
		"nodeName : int\n"
		"  a node name\n"
		"val :\n"
		"  (int) a node value\n"
		"val :\n"
		"  (str) the label of the node value\n"
		"vals : list\n"
		"  a list of values\n"
		"\n"
		"Raises\n"
		"------\n"
		"  pyagrum.InvalidArgument\n"
		"    If the node already has an evidence\n"
		"  pyagrum.InvalidArgument\n"
		"    If val is not a value for the node\n"
		"  pyagrum.InvalidArgument\n"
		"    If the size of vals is different from the domain side of the node\n"
		"  pyagrum.FatalError\n"
		"    If vals is a vector of 0s\n"
		"  pyagrum.UndefinedElement\n"
		"    If the node does not belong to the Bayesian network\n"
		"\n"
		""},
	 { "LoopyGibbsSampling_chgEvidence", _wrap_LoopyGibbsSampling_chgEvidence, METH_VARARGS, "\n"
		"\n"
		"Change the value of an already existing evidence on a node (might be soft or hard).\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id : int\n"
		"  a node Id\n"
		"nodeName : int\n"
		"  a node name\n"
		"val : int|str\n"
		"  a node value or the label of the node value\n"
		"vals : List[float]\n"
		"  a list of values\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.InvalidArgument\n"
		"  If the node does not already have an evidence\n"
		"pyagrum.InvalidArgument\n"
		"  If val is not a value for the node\n"
		"pyagrum.InvalidArgument\n"
		"  If the size of vals is different from the domain side of the node\n"
		"pyagrum.FatalError\n"
		"  If vals is a vector of 0s\n"
		"pyagrum.UndefinedElement\n"
		"  If the node does not belong to the Bayesian network\n"
		"\n"
		""},
	 { "LoopyGibbsSampling_hasEvidence", _wrap_LoopyGibbsSampling_hasEvidence, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id : int\n"
		"  a node Id\n"
		"nodeName : str\n"
		"  a node name\n"
		"\n"
		"Returns\n"
		"-------\n"
		"bool\n"
		"  True if some node(s) (or the one in parameters) have received evidence\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.IndexError\n"
		"  If the node does not belong to the Bayesian network\n"
		"\n"
		""},
	 { "LoopyGibbsSampling_eraseAllEvidence", _wrap_LoopyGibbsSampling_eraseAllEvidence, METH_O, "\n"
		"\n"
		"Removes all the evidence entered into the network.\n"
		"\n"
		""},
	 { "LoopyGibbsSampling_eraseEvidence", _wrap_LoopyGibbsSampling_eraseEvidence, METH_VARARGS, "\n"
		"\n"
		"Remove the evidence, if any, corresponding to the node Id or name.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id : int\n"
		"  a node Id\n"
		"nodeName : int\n"
		"  a node name\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.IndexError\n"
		"  If the node does not belong to the Bayesian network\n"
		"\n"
		""},
	 { "LoopyGibbsSampling_hasHardEvidence", _wrap_LoopyGibbsSampling_hasHardEvidence, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id : int\n"
		"  a node Id\n"
		"nodeName : str\n"
		"  a node name\n"
		"\n"
		"Returns\n"
		"-------\n"
		"bool\n"
		"  True if node has received a hard evidence\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.IndexError\n"
		"  If the node does not belong to the Bayesian network\n"
		"\n"
		""},
	 { "LoopyGibbsSampling_hasSoftEvidence", _wrap_LoopyGibbsSampling_hasSoftEvidence, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id : int\n"
		"  a node Id\n"
		"nodeName : str\n"
		"  a node name\n"
		"\n"
		"Returns\n"
		"-------\n"
		"bool\n"
		"  True if node has received a soft evidence\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.IndexError\n"
		"  If the node does not belong to the Bayesian network\n"
		"\n"
		""},
	 { "LoopyGibbsSampling_nbrEvidence", _wrap_LoopyGibbsSampling_nbrEvidence, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"  the number of evidence entered into the Bayesian network\n"
		"\n"
		""},
	 { "LoopyGibbsSampling_nbrHardEvidence", _wrap_LoopyGibbsSampling_nbrHardEvidence, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"  the number of hard evidence entered into the Bayesian network\n"
		"\n"
		""},
	 { "LoopyGibbsSampling_nbrSoftEvidence", _wrap_LoopyGibbsSampling_nbrSoftEvidence, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"  the number of soft evidence entered into the Bayesian network\n"
		"\n"
		""},
	 { "LoopyGibbsSampling_eraseAllTargets", _wrap_LoopyGibbsSampling_eraseAllTargets, METH_O, "\n"
		"\n"
		"Clear all previously defined targets (marginal and joint targets).\n"
		"\n"
		"As a result, no posterior can be computed (since we can only compute the posteriors of the marginal or joint targets that have been added by the user).\n"
		"\n"
		""},
	 { "LoopyGibbsSampling_addAllTargets", _wrap_LoopyGibbsSampling_addAllTargets, METH_O, "\n"
		"\n"
		"Add all the nodes as targets.\n"
		"\n"
		""},
	 { "LoopyGibbsSampling_addTarget", _wrap_LoopyGibbsSampling_addTarget, METH_VARARGS, "\n"
		"\n"
		"Add a marginal target to the list of targets.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"target : int\n"
		"  a node Id\n"
		"nodeName : str\n"
		"  a node name\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.UndefinedElement\n"
		"  If target is not a NodeId in the Bayes net\n"
		"\n"
		""},
	 { "LoopyGibbsSampling_eraseTarget", _wrap_LoopyGibbsSampling_eraseTarget, METH_VARARGS, "\n"
		"\n"
		"Remove, if existing, the marginal target.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"target : int\n"
		"  a node Id\n"
		"nodeName : int\n"
		"  a node name\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.IndexError\n"
		"  If one of the node does not belong to the Bayesian network\n"
		"pyagrum.UndefinedElement\n"
		"  If node Id is not in the Bayesian network\n"
		"\n"
		""},
	 { "LoopyGibbsSampling_isTarget", _wrap_LoopyGibbsSampling_isTarget, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"variable : int\n"
		" a node Id\n"
		"nodeName : str\n"
		"  a node name\n"
		"\n"
		"Returns\n"
		"-------\n"
		"bool\n"
		"  True if variable is a (marginal) target\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.IndexError\n"
		"  If the node does not belong to the Bayesian network\n"
		"pyagrum.UndefinedElement\n"
		"  If node Id is not in the Bayesian network\n"
		"\n"
		""},
	 { "LoopyGibbsSampling_nbrTargets", _wrap_LoopyGibbsSampling_nbrTargets, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"  the number of marginal targets\n"
		"\n"
		""},
	 { "LoopyGibbsSampling_H", _wrap_LoopyGibbsSampling_H, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"X : int\n"
		"  a node Id\n"
		"nodeName : str\n"
		"  a node name\n"
		"\n"
		"Returns\n"
		"-------\n"
		"float\n"
		"  the computed Shanon's entropy of a node given the observation\n"
		"\n"
		""},
	 { "LoopyGibbsSampling_BN", _wrap_LoopyGibbsSampling_BN, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"pyagrum.IBayesNet\n"
		"  A constant reference over the IBayesNet referenced by this class.\n"
		"\n"
		"Raises\n"
		"------\n"
		"  pyagrum.UndefinedElement\n"
		"    If no Bayes net has been assigned to the inference.\n"
		"\n"
		""},
	 { "LoopyGibbsSampling_currentPosterior", _wrap_LoopyGibbsSampling_currentPosterior, METH_VARARGS, "\n"
		"\n"
		"Computes and returns the current posterior of a node.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"var : int\n"
		"  the node Id of the node for which we need a posterior probability\n"
		"nodeName : str\n"
		"  the node name of the node for which we need a posterior probability\n"
		"\n"
		"Returns\n"
		"-------\n"
		"pyagrum.Tensor\n"
		"  a const ref to the current posterior probability of the node\n"
		"\n"
		"Raises\n"
		"------\n"
		"UndefinedElement\n"
		"  If an element of nodes is not in targets\n"
		"\n"
		""},
	 { "LoopyGibbsSampling_nbrDrawnVar", _wrap_LoopyGibbsSampling_nbrDrawnVar, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"  the number of variable drawn at each iteration\n"
		"\n"
		""},
	 { "LoopyGibbsSampling_setNbrDrawnVar", _wrap_LoopyGibbsSampling_setNbrDrawnVar, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"_nbr : int\n"
		"  the number of variables to be drawn at each iteration\n"
		"\n"
		""},
	 { "LoopyGibbsSampling_isDrawnAtRandom", _wrap_LoopyGibbsSampling_isDrawnAtRandom, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"bool\n"
		"  True if variables are drawn at random\n"
		"\n"
		""},
	 { "LoopyGibbsSampling_setDrawnAtRandom", _wrap_LoopyGibbsSampling_setDrawnAtRandom, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"_atRandom : bool\n"
		"  indicates if variables should be drawn at random\n"
		"\n"
		""},
	 { "LoopyGibbsSampling_burnIn", _wrap_LoopyGibbsSampling_burnIn, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"  size of burn in on number of iteration\n"
		"\n"
		""},
	 { "LoopyGibbsSampling_setBurnIn", _wrap_LoopyGibbsSampling_setBurnIn, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"b : int\n"
		"  size of burn in on number of iteration\n"
		"\n"
		""},
	 { "LoopyGibbsSampling_setEvidence", _wrap_LoopyGibbsSampling_setEvidence, METH_VARARGS, NULL},
	 { "LoopyGibbsSampling_updateEvidence", _wrap_LoopyGibbsSampling_updateEvidence, METH_VARARGS, NULL},
	 { "LoopyGibbsSampling_setTargets", _wrap_LoopyGibbsSampling_setTargets, METH_VARARGS, NULL},
	 { "LoopyGibbsSampling_hardEvidenceNodes", _wrap_LoopyGibbsSampling_hardEvidenceNodes, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"set\n"
		"  the set of nodes with hard evidence\n"
		"\n"
		""},
	 { "LoopyGibbsSampling_softEvidenceNodes", _wrap_LoopyGibbsSampling_softEvidenceNodes, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"set\n"
		"  the set of nodes with soft evidence\n"
		"\n"
		""},
	 { "LoopyGibbsSampling_targets", _wrap_LoopyGibbsSampling_targets, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"list\n"
		"  the list of marginal targets\n"
		"\n"
		""},
	 { "LoopyGibbsSampling_evidenceImpact", _wrap_LoopyGibbsSampling_evidenceImpact, METH_VARARGS, "\n"
		"\n"
		"Create a pyagrum.Tensor for P(target|evs) (for all instanciation of target and evs)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"target : set\n"
		"  a set of targets ids or names.\n"
		"evs : set\n"
		"  a set of nodes ids or names.\n"
		"\n"
		"Warnings\n"
		"--------\n"
		"if some evs are d-separated, they are not included in the Tensor.\n"
		"\n"
		"Returns\n"
		"-------\n"
		"pyagrum.Tensor\n"
		"  a Tensor for P(targets|evs)\n"
		"\n"
		""},
	 { "LoopyGibbsSampling_swigregister", LoopyGibbsSampling_swigregister, METH_O, NULL},
	 { "LoopyGibbsSampling_swiginit", LoopyGibbsSampling_swiginit, METH_VARARGS, NULL},
	 { "new_LoopyMonteCarloSampling", _wrap_new_LoopyMonteCarloSampling, METH_O, NULL},
	 { "delete_LoopyMonteCarloSampling", _wrap_delete_LoopyMonteCarloSampling, METH_O, NULL},
	 { "LoopyMonteCarloSampling_makeInference_", _wrap_LoopyMonteCarloSampling_makeInference_, METH_O, NULL},
	 { "LoopyMonteCarloSampling_setVirtualLBPSize", _wrap_LoopyMonteCarloSampling_setVirtualLBPSize, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"vlbpsize : float\n"
		"  the size of the virtual LBP\n"
		"\n"
		""},
	 { "LoopyMonteCarloSampling_setVerbosity", _wrap_LoopyMonteCarloSampling_setVerbosity, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"v : bool\n"
		"        verbosity\n"
		"\n"
		""},
	 { "LoopyMonteCarloSampling_setEpsilon", _wrap_LoopyMonteCarloSampling_setEpsilon, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"eps : float\n"
		"	the epsilon we want to use\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.OutOfBounds\n"
		"	If eps<0\n"
		"\n"
		""},
	 { "LoopyMonteCarloSampling_setMinEpsilonRate", _wrap_LoopyMonteCarloSampling_setMinEpsilonRate, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"rate : float\n"
		"	the minimal epsilon rate\n"
		"\n"
		""},
	 { "LoopyMonteCarloSampling_setMaxIter", _wrap_LoopyMonteCarloSampling_setMaxIter, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"max : int\n"
		"	the maximum number of iteration\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.OutOfBounds\n"
		"	If max <= 1\n"
		"\n"
		""},
	 { "LoopyMonteCarloSampling_setMaxTime", _wrap_LoopyMonteCarloSampling_setMaxTime, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"tiemout : float\n"
		"	stopping criterion on timeout (in seconds)\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.OutOfBounds\n"
		"	If timeout<=0.0\n"
		"\n"
		""},
	 { "LoopyMonteCarloSampling_setPeriodSize", _wrap_LoopyMonteCarloSampling_setPeriodSize, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"p : int\n"
		"	number of samples between 2 stopping\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.OutOfBounds\n"
		"	If p<1\n"
		"\n"
		""},
	 { "LoopyMonteCarloSampling_verbosity", _wrap_LoopyMonteCarloSampling_verbosity, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"bool\n"
		"	True if the verbosity is enabled\n"
		"\n"
		""},
	 { "LoopyMonteCarloSampling_epsilon", _wrap_LoopyMonteCarloSampling_epsilon, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"float\n"
		"	the value of epsilon\n"
		"\n"
		""},
	 { "LoopyMonteCarloSampling_minEpsilonRate", _wrap_LoopyMonteCarloSampling_minEpsilonRate, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"float\n"
		"	the value of the minimal epsilon rate\n"
		"\n"
		""},
	 { "LoopyMonteCarloSampling_maxIter", _wrap_LoopyMonteCarloSampling_maxIter, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"	the criterion on number of iterations\n"
		"\n"
		""},
	 { "LoopyMonteCarloSampling_maxTime", _wrap_LoopyMonteCarloSampling_maxTime, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"float\n"
		"	the timeout(in seconds)\n"
		"\n"
		""},
	 { "LoopyMonteCarloSampling_periodSize", _wrap_LoopyMonteCarloSampling_periodSize, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"	the number of samples between 2 stopping\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.OutOfBounds\n"
		"	If p<1\n"
		"\n"
		""},
	 { "LoopyMonteCarloSampling_nbrIterations", _wrap_LoopyMonteCarloSampling_nbrIterations, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"	the number of iterations\n"
		"\n"
		""},
	 { "LoopyMonteCarloSampling_currentTime", _wrap_LoopyMonteCarloSampling_currentTime, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"float\n"
		"	get the current running time in second (float)\n"
		"\n"
		""},
	 { "LoopyMonteCarloSampling_messageApproximationScheme", _wrap_LoopyMonteCarloSampling_messageApproximationScheme, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"str\n"
		"	the approximation scheme message\n"
		"\n"
		""},
	 { "LoopyMonteCarloSampling_history", _wrap_LoopyMonteCarloSampling_history, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"tuple\n"
		"	the scheme history\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.OperationNotAllowed\n"
		"	If the scheme did not performed or if verbosity is set to false\n"
		"\n"
		""},
	 { "LoopyMonteCarloSampling__asIApproximationSchemeConfiguration", _wrap_LoopyMonteCarloSampling__asIApproximationSchemeConfiguration, METH_O, NULL},
	 { "LoopyMonteCarloSampling_makeInference", _wrap_LoopyMonteCarloSampling_makeInference, METH_O, "\n"
		"\n"
		"Perform the heavy computations needed to compute the targets' posteriors\n"
		"\n"
		"In a Junction tree propagation scheme, for instance, the heavy computations are those of the messages sent in the JT.\n"
		"This is precisely what makeInference should compute. Later, the computations of the posteriors can be done 'lightly' by multiplying and projecting those messages.\n"
		"\n"
		""},
	 { "LoopyMonteCarloSampling_posterior", _wrap_LoopyMonteCarloSampling_posterior, METH_VARARGS, "\n"
		"\n"
		"Computes and returns the posterior of a node.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"var : int\n"
		"  the node Id of the node for which we need a posterior probability\n"
		"nodeName : str\n"
		"  the node name of the node for which we need a posterior probability\n"
		"\n"
		"Returns\n"
		"-------\n"
		"pyagrum.Tensor\n"
		"  a const ref to the posterior probability of the node\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.UndefinedElement\n"
		"  If an element of nodes is not in targets\n"
		"\n"
		""},
	 { "LoopyMonteCarloSampling_addEvidence", _wrap_LoopyMonteCarloSampling_addEvidence, METH_VARARGS, "\n"
		"\n"
		"Adds a new evidence on a node (might be soft or hard).\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id : int\n"
		"  a node Id\n"
		"nodeName : int\n"
		"  a node name\n"
		"val :\n"
		"  (int) a node value\n"
		"val :\n"
		"  (str) the label of the node value\n"
		"vals : list\n"
		"  a list of values\n"
		"\n"
		"Raises\n"
		"------\n"
		"  pyagrum.InvalidArgument\n"
		"    If the node already has an evidence\n"
		"  pyagrum.InvalidArgument\n"
		"    If val is not a value for the node\n"
		"  pyagrum.InvalidArgument\n"
		"    If the size of vals is different from the domain side of the node\n"
		"  pyagrum.FatalError\n"
		"    If vals is a vector of 0s\n"
		"  pyagrum.UndefinedElement\n"
		"    If the node does not belong to the Bayesian network\n"
		"\n"
		""},
	 { "LoopyMonteCarloSampling_chgEvidence", _wrap_LoopyMonteCarloSampling_chgEvidence, METH_VARARGS, "\n"
		"\n"
		"Change the value of an already existing evidence on a node (might be soft or hard).\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id : int\n"
		"  a node Id\n"
		"nodeName : int\n"
		"  a node name\n"
		"val : int|str\n"
		"  a node value or the label of the node value\n"
		"vals : List[float]\n"
		"  a list of values\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.InvalidArgument\n"
		"  If the node does not already have an evidence\n"
		"pyagrum.InvalidArgument\n"
		"  If val is not a value for the node\n"
		"pyagrum.InvalidArgument\n"
		"  If the size of vals is different from the domain side of the node\n"
		"pyagrum.FatalError\n"
		"  If vals is a vector of 0s\n"
		"pyagrum.UndefinedElement\n"
		"  If the node does not belong to the Bayesian network\n"
		"\n"
		""},
	 { "LoopyMonteCarloSampling_hasEvidence", _wrap_LoopyMonteCarloSampling_hasEvidence, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id : int\n"
		"  a node Id\n"
		"nodeName : str\n"
		"  a node name\n"
		"\n"
		"Returns\n"
		"-------\n"
		"bool\n"
		"  True if some node(s) (or the one in parameters) have received evidence\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.IndexError\n"
		"  If the node does not belong to the Bayesian network\n"
		"\n"
		""},
	 { "LoopyMonteCarloSampling_eraseAllEvidence", _wrap_LoopyMonteCarloSampling_eraseAllEvidence, METH_O, "\n"
		"\n"
		"Removes all the evidence entered into the network.\n"
		"\n"
		""},
	 { "LoopyMonteCarloSampling_eraseEvidence", _wrap_LoopyMonteCarloSampling_eraseEvidence, METH_VARARGS, "\n"
		"\n"
		"Remove the evidence, if any, corresponding to the node Id or name.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id : int\n"
		"  a node Id\n"
		"nodeName : int\n"
		"  a node name\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.IndexError\n"
		"  If the node does not belong to the Bayesian network\n"
		"\n"
		""},
	 { "LoopyMonteCarloSampling_hasHardEvidence", _wrap_LoopyMonteCarloSampling_hasHardEvidence, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id : int\n"
		"  a node Id\n"
		"nodeName : str\n"
		"  a node name\n"
		"\n"
		"Returns\n"
		"-------\n"
		"bool\n"
		"  True if node has received a hard evidence\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.IndexError\n"
		"  If the node does not belong to the Bayesian network\n"
		"\n"
		""},
	 { "LoopyMonteCarloSampling_hasSoftEvidence", _wrap_LoopyMonteCarloSampling_hasSoftEvidence, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id : int\n"
		"  a node Id\n"
		"nodeName : str\n"
		"  a node name\n"
		"\n"
		"Returns\n"
		"-------\n"
		"bool\n"
		"  True if node has received a soft evidence\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.IndexError\n"
		"  If the node does not belong to the Bayesian network\n"
		"\n"
		""},
	 { "LoopyMonteCarloSampling_nbrEvidence", _wrap_LoopyMonteCarloSampling_nbrEvidence, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"  the number of evidence entered into the Bayesian network\n"
		"\n"
		""},
	 { "LoopyMonteCarloSampling_nbrHardEvidence", _wrap_LoopyMonteCarloSampling_nbrHardEvidence, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"  the number of hard evidence entered into the Bayesian network\n"
		"\n"
		""},
	 { "LoopyMonteCarloSampling_nbrSoftEvidence", _wrap_LoopyMonteCarloSampling_nbrSoftEvidence, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"  the number of soft evidence entered into the Bayesian network\n"
		"\n"
		""},
	 { "LoopyMonteCarloSampling_eraseAllTargets", _wrap_LoopyMonteCarloSampling_eraseAllTargets, METH_O, "\n"
		"\n"
		"Clear all previously defined targets (marginal and joint targets).\n"
		"\n"
		"As a result, no posterior can be computed (since we can only compute the posteriors of the marginal or joint targets that have been added by the user).\n"
		"\n"
		""},
	 { "LoopyMonteCarloSampling_addAllTargets", _wrap_LoopyMonteCarloSampling_addAllTargets, METH_O, "\n"
		"\n"
		"Add all the nodes as targets.\n"
		"\n"
		""},
	 { "LoopyMonteCarloSampling_addTarget", _wrap_LoopyMonteCarloSampling_addTarget, METH_VARARGS, "\n"
		"\n"
		"Add a marginal target to the list of targets.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"target : int\n"
		"  a node Id\n"
		"nodeName : str\n"
		"  a node name\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.UndefinedElement\n"
		"  If target is not a NodeId in the Bayes net\n"
		"\n"
		""},
	 { "LoopyMonteCarloSampling_eraseTarget", _wrap_LoopyMonteCarloSampling_eraseTarget, METH_VARARGS, "\n"
		"\n"
		"Remove, if existing, the marginal target.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"target : int\n"
		"  a node Id\n"
		"nodeName : int\n"
		"  a node name\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.IndexError\n"
		"  If one of the node does not belong to the Bayesian network\n"
		"pyagrum.UndefinedElement\n"
		"  If node Id is not in the Bayesian network\n"
		"\n"
		""},
	 { "LoopyMonteCarloSampling_isTarget", _wrap_LoopyMonteCarloSampling_isTarget, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"variable : int\n"
		" a node Id\n"
		"nodeName : str\n"
		"  a node name\n"
		"\n"
		"Returns\n"
		"-------\n"
		"bool\n"
		"  True if variable is a (marginal) target\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.IndexError\n"
		"  If the node does not belong to the Bayesian network\n"
		"pyagrum.UndefinedElement\n"
		"  If node Id is not in the Bayesian network\n"
		"\n"
		""},
	 { "LoopyMonteCarloSampling_nbrTargets", _wrap_LoopyMonteCarloSampling_nbrTargets, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"  the number of marginal targets\n"
		"\n"
		""},
	 { "LoopyMonteCarloSampling_H", _wrap_LoopyMonteCarloSampling_H, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"X : int\n"
		"  a node Id\n"
		"nodeName : str\n"
		"  a node name\n"
		"\n"
		"Returns\n"
		"-------\n"
		"float\n"
		"  the computed Shanon's entropy of a node given the observation\n"
		"\n"
		""},
	 { "LoopyMonteCarloSampling_BN", _wrap_LoopyMonteCarloSampling_BN, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"pyagrum.IBayesNet\n"
		"  A constant reference over the IBayesNet referenced by this class.\n"
		"\n"
		"Raises\n"
		"------\n"
		"  pyagrum.UndefinedElement\n"
		"    If no Bayes net has been assigned to the inference.\n"
		"\n"
		""},
	 { "LoopyMonteCarloSampling_currentPosterior", _wrap_LoopyMonteCarloSampling_currentPosterior, METH_VARARGS, "\n"
		"\n"
		"Computes and returns the current posterior of a node.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"var : int\n"
		"  the node Id of the node for which we need a posterior probability\n"
		"nodeName : str\n"
		"  the node name of the node for which we need a posterior probability\n"
		"\n"
		"Returns\n"
		"-------\n"
		"pyagrum.Tensor\n"
		"  a const ref to the current posterior probability of the node\n"
		"\n"
		"Raises\n"
		"------\n"
		"UndefinedElement\n"
		"  If an element of nodes is not in targets\n"
		"\n"
		""},
	 { "LoopyMonteCarloSampling_setEvidence", _wrap_LoopyMonteCarloSampling_setEvidence, METH_VARARGS, NULL},
	 { "LoopyMonteCarloSampling_updateEvidence", _wrap_LoopyMonteCarloSampling_updateEvidence, METH_VARARGS, NULL},
	 { "LoopyMonteCarloSampling_setTargets", _wrap_LoopyMonteCarloSampling_setTargets, METH_VARARGS, NULL},
	 { "LoopyMonteCarloSampling_hardEvidenceNodes", _wrap_LoopyMonteCarloSampling_hardEvidenceNodes, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"set\n"
		"  the set of nodes with hard evidence\n"
		"\n"
		""},
	 { "LoopyMonteCarloSampling_softEvidenceNodes", _wrap_LoopyMonteCarloSampling_softEvidenceNodes, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"set\n"
		"  the set of nodes with soft evidence\n"
		"\n"
		""},
	 { "LoopyMonteCarloSampling_targets", _wrap_LoopyMonteCarloSampling_targets, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"list\n"
		"  the list of marginal targets\n"
		"\n"
		""},
	 { "LoopyMonteCarloSampling_evidenceImpact", _wrap_LoopyMonteCarloSampling_evidenceImpact, METH_VARARGS, "\n"
		"\n"
		"Create a pyagrum.Tensor for P(target|evs) (for all instanciation of target and evs)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"target : set\n"
		"  a set of targets ids or names.\n"
		"evs : set\n"
		"  a set of nodes ids or names.\n"
		"\n"
		"Warnings\n"
		"--------\n"
		"if some evs are d-separated, they are not included in the Tensor.\n"
		"\n"
		"Returns\n"
		"-------\n"
		"pyagrum.Tensor\n"
		"  a Tensor for P(targets|evs)\n"
		"\n"
		""},
	 { "LoopyMonteCarloSampling_swigregister", LoopyMonteCarloSampling_swigregister, METH_O, NULL},
	 { "LoopyMonteCarloSampling_swiginit", LoopyMonteCarloSampling_swiginit, METH_VARARGS, NULL},
	 { "new_LoopyBeliefPropagation", _wrap_new_LoopyBeliefPropagation, METH_O, NULL},
	 { "delete_LoopyBeliefPropagation", _wrap_delete_LoopyBeliefPropagation, METH_O, NULL},
	 { "LoopyBeliefPropagation_setVerbosity", _wrap_LoopyBeliefPropagation_setVerbosity, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"v : bool\n"
		"        verbosity\n"
		"\n"
		""},
	 { "LoopyBeliefPropagation_setEpsilon", _wrap_LoopyBeliefPropagation_setEpsilon, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"eps : float\n"
		"	the epsilon we want to use\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.OutOfBounds\n"
		"	If eps<0\n"
		"\n"
		""},
	 { "LoopyBeliefPropagation_setMinEpsilonRate", _wrap_LoopyBeliefPropagation_setMinEpsilonRate, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"rate : float\n"
		"	the minimal epsilon rate\n"
		"\n"
		""},
	 { "LoopyBeliefPropagation_setMaxIter", _wrap_LoopyBeliefPropagation_setMaxIter, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"max : int\n"
		"	the maximum number of iteration\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.OutOfBounds\n"
		"	If max <= 1\n"
		"\n"
		""},
	 { "LoopyBeliefPropagation_setMaxTime", _wrap_LoopyBeliefPropagation_setMaxTime, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"tiemout : float\n"
		"	stopping criterion on timeout (in seconds)\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.OutOfBounds\n"
		"	If timeout<=0.0\n"
		"\n"
		""},
	 { "LoopyBeliefPropagation_setPeriodSize", _wrap_LoopyBeliefPropagation_setPeriodSize, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"p : int\n"
		"	number of samples between 2 stopping\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.OutOfBounds\n"
		"	If p<1\n"
		"\n"
		""},
	 { "LoopyBeliefPropagation_verbosity", _wrap_LoopyBeliefPropagation_verbosity, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"bool\n"
		"	True if the verbosity is enabled\n"
		"\n"
		""},
	 { "LoopyBeliefPropagation_epsilon", _wrap_LoopyBeliefPropagation_epsilon, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"float\n"
		"	the value of epsilon\n"
		"\n"
		""},
	 { "LoopyBeliefPropagation_minEpsilonRate", _wrap_LoopyBeliefPropagation_minEpsilonRate, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"float\n"
		"	the value of the minimal epsilon rate\n"
		"\n"
		""},
	 { "LoopyBeliefPropagation_maxIter", _wrap_LoopyBeliefPropagation_maxIter, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"	the criterion on number of iterations\n"
		"\n"
		""},
	 { "LoopyBeliefPropagation_maxTime", _wrap_LoopyBeliefPropagation_maxTime, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"float\n"
		"	the timeout(in seconds)\n"
		"\n"
		""},
	 { "LoopyBeliefPropagation_periodSize", _wrap_LoopyBeliefPropagation_periodSize, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"	the number of samples between 2 stopping\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.OutOfBounds\n"
		"	If p<1\n"
		"\n"
		""},
	 { "LoopyBeliefPropagation_nbrIterations", _wrap_LoopyBeliefPropagation_nbrIterations, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"	the number of iterations\n"
		"\n"
		""},
	 { "LoopyBeliefPropagation_currentTime", _wrap_LoopyBeliefPropagation_currentTime, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"float\n"
		"	get the current running time in second (float)\n"
		"\n"
		""},
	 { "LoopyBeliefPropagation_messageApproximationScheme", _wrap_LoopyBeliefPropagation_messageApproximationScheme, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"str\n"
		"	the approximation scheme message\n"
		"\n"
		""},
	 { "LoopyBeliefPropagation_history", _wrap_LoopyBeliefPropagation_history, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"tuple\n"
		"	the scheme history\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.OperationNotAllowed\n"
		"	If the scheme did not performed or if verbosity is set to false\n"
		"\n"
		""},
	 { "LoopyBeliefPropagation__asIApproximationSchemeConfiguration", _wrap_LoopyBeliefPropagation__asIApproximationSchemeConfiguration, METH_O, NULL},
	 { "LoopyBeliefPropagation_makeInference", _wrap_LoopyBeliefPropagation_makeInference, METH_O, "\n"
		"\n"
		"Perform the heavy computations needed to compute the targets' posteriors\n"
		"\n"
		"In a Junction tree propagation scheme, for instance, the heavy computations are those of the messages sent in the JT.\n"
		"This is precisely what makeInference should compute. Later, the computations of the posteriors can be done 'lightly' by multiplying and projecting those messages.\n"
		"\n"
		""},
	 { "LoopyBeliefPropagation_posterior", _wrap_LoopyBeliefPropagation_posterior, METH_VARARGS, "\n"
		"\n"
		"Computes and returns the posterior of a node.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"var : int\n"
		"  the node Id of the node for which we need a posterior probability\n"
		"nodeName : str\n"
		"  the node name of the node for which we need a posterior probability\n"
		"\n"
		"Returns\n"
		"-------\n"
		"pyagrum.Tensor\n"
		"  a const ref to the posterior probability of the node\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.UndefinedElement\n"
		"  If an element of nodes is not in targets\n"
		"\n"
		""},
	 { "LoopyBeliefPropagation_addEvidence", _wrap_LoopyBeliefPropagation_addEvidence, METH_VARARGS, "\n"
		"\n"
		"Adds a new evidence on a node (might be soft or hard).\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id : int\n"
		"  a node Id\n"
		"nodeName : int\n"
		"  a node name\n"
		"val :\n"
		"  (int) a node value\n"
		"val :\n"
		"  (str) the label of the node value\n"
		"vals : list\n"
		"  a list of values\n"
		"\n"
		"Raises\n"
		"------\n"
		"  pyagrum.InvalidArgument\n"
		"    If the node already has an evidence\n"
		"  pyagrum.InvalidArgument\n"
		"    If val is not a value for the node\n"
		"  pyagrum.InvalidArgument\n"
		"    If the size of vals is different from the domain side of the node\n"
		"  pyagrum.FatalError\n"
		"    If vals is a vector of 0s\n"
		"  pyagrum.UndefinedElement\n"
		"    If the node does not belong to the Bayesian network\n"
		"\n"
		""},
	 { "LoopyBeliefPropagation_chgEvidence", _wrap_LoopyBeliefPropagation_chgEvidence, METH_VARARGS, "\n"
		"\n"
		"Change the value of an already existing evidence on a node (might be soft or hard).\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id : int\n"
		"  a node Id\n"
		"nodeName : int\n"
		"  a node name\n"
		"val : int|str\n"
		"  a node value or the label of the node value\n"
		"vals : List[float]\n"
		"  a list of values\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.InvalidArgument\n"
		"  If the node does not already have an evidence\n"
		"pyagrum.InvalidArgument\n"
		"  If val is not a value for the node\n"
		"pyagrum.InvalidArgument\n"
		"  If the size of vals is different from the domain side of the node\n"
		"pyagrum.FatalError\n"
		"  If vals is a vector of 0s\n"
		"pyagrum.UndefinedElement\n"
		"  If the node does not belong to the Bayesian network\n"
		"\n"
		""},
	 { "LoopyBeliefPropagation_hasEvidence", _wrap_LoopyBeliefPropagation_hasEvidence, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id : int\n"
		"  a node Id\n"
		"nodeName : str\n"
		"  a node name\n"
		"\n"
		"Returns\n"
		"-------\n"
		"bool\n"
		"  True if some node(s) (or the one in parameters) have received evidence\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.IndexError\n"
		"  If the node does not belong to the Bayesian network\n"
		"\n"
		""},
	 { "LoopyBeliefPropagation_eraseAllEvidence", _wrap_LoopyBeliefPropagation_eraseAllEvidence, METH_O, "\n"
		"\n"
		"Removes all the evidence entered into the network.\n"
		"\n"
		""},
	 { "LoopyBeliefPropagation_eraseEvidence", _wrap_LoopyBeliefPropagation_eraseEvidence, METH_VARARGS, "\n"
		"\n"
		"Remove the evidence, if any, corresponding to the node Id or name.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id : int\n"
		"  a node Id\n"
		"nodeName : int\n"
		"  a node name\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.IndexError\n"
		"  If the node does not belong to the Bayesian network\n"
		"\n"
		""},
	 { "LoopyBeliefPropagation_hasHardEvidence", _wrap_LoopyBeliefPropagation_hasHardEvidence, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id : int\n"
		"  a node Id\n"
		"nodeName : str\n"
		"  a node name\n"
		"\n"
		"Returns\n"
		"-------\n"
		"bool\n"
		"  True if node has received a hard evidence\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.IndexError\n"
		"  If the node does not belong to the Bayesian network\n"
		"\n"
		""},
	 { "LoopyBeliefPropagation_hasSoftEvidence", _wrap_LoopyBeliefPropagation_hasSoftEvidence, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id : int\n"
		"  a node Id\n"
		"nodeName : str\n"
		"  a node name\n"
		"\n"
		"Returns\n"
		"-------\n"
		"bool\n"
		"  True if node has received a soft evidence\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.IndexError\n"
		"  If the node does not belong to the Bayesian network\n"
		"\n"
		""},
	 { "LoopyBeliefPropagation_nbrEvidence", _wrap_LoopyBeliefPropagation_nbrEvidence, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"  the number of evidence entered into the Bayesian network\n"
		"\n"
		""},
	 { "LoopyBeliefPropagation_nbrHardEvidence", _wrap_LoopyBeliefPropagation_nbrHardEvidence, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"  the number of hard evidence entered into the Bayesian network\n"
		"\n"
		""},
	 { "LoopyBeliefPropagation_nbrSoftEvidence", _wrap_LoopyBeliefPropagation_nbrSoftEvidence, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"  the number of soft evidence entered into the Bayesian network\n"
		"\n"
		""},
	 { "LoopyBeliefPropagation_eraseAllTargets", _wrap_LoopyBeliefPropagation_eraseAllTargets, METH_O, "\n"
		"\n"
		"Clear all previously defined targets (marginal and joint targets).\n"
		"\n"
		"As a result, no posterior can be computed (since we can only compute the posteriors of the marginal or joint targets that have been added by the user).\n"
		"\n"
		""},
	 { "LoopyBeliefPropagation_addAllTargets", _wrap_LoopyBeliefPropagation_addAllTargets, METH_O, "\n"
		"\n"
		"Add all the nodes as targets.\n"
		"\n"
		""},
	 { "LoopyBeliefPropagation_addTarget", _wrap_LoopyBeliefPropagation_addTarget, METH_VARARGS, "\n"
		"\n"
		"Add a marginal target to the list of targets.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"target : int\n"
		"  a node Id\n"
		"nodeName : str\n"
		"  a node name\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.UndefinedElement\n"
		"  If target is not a NodeId in the Bayes net\n"
		"\n"
		""},
	 { "LoopyBeliefPropagation_eraseTarget", _wrap_LoopyBeliefPropagation_eraseTarget, METH_VARARGS, "\n"
		"\n"
		"Remove, if existing, the marginal target.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"target : int\n"
		"  a node Id\n"
		"nodeName : int\n"
		"  a node name\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.IndexError\n"
		"  If one of the node does not belong to the Bayesian network\n"
		"pyagrum.UndefinedElement\n"
		"  If node Id is not in the Bayesian network\n"
		"\n"
		""},
	 { "LoopyBeliefPropagation_isTarget", _wrap_LoopyBeliefPropagation_isTarget, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"variable : int\n"
		" a node Id\n"
		"nodeName : str\n"
		"  a node name\n"
		"\n"
		"Returns\n"
		"-------\n"
		"bool\n"
		"  True if variable is a (marginal) target\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.IndexError\n"
		"  If the node does not belong to the Bayesian network\n"
		"pyagrum.UndefinedElement\n"
		"  If node Id is not in the Bayesian network\n"
		"\n"
		""},
	 { "LoopyBeliefPropagation_nbrTargets", _wrap_LoopyBeliefPropagation_nbrTargets, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"  the number of marginal targets\n"
		"\n"
		""},
	 { "LoopyBeliefPropagation_H", _wrap_LoopyBeliefPropagation_H, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"X : int\n"
		"  a node Id\n"
		"nodeName : str\n"
		"  a node name\n"
		"\n"
		"Returns\n"
		"-------\n"
		"float\n"
		"  the computed Shanon's entropy of a node given the observation\n"
		"\n"
		""},
	 { "LoopyBeliefPropagation_BN", _wrap_LoopyBeliefPropagation_BN, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"pyagrum.IBayesNet\n"
		"  A constant reference over the IBayesNet referenced by this class.\n"
		"\n"
		"Raises\n"
		"------\n"
		"  pyagrum.UndefinedElement\n"
		"    If no Bayes net has been assigned to the inference.\n"
		"\n"
		""},
	 { "LoopyBeliefPropagation_setEvidence", _wrap_LoopyBeliefPropagation_setEvidence, METH_VARARGS, NULL},
	 { "LoopyBeliefPropagation_updateEvidence", _wrap_LoopyBeliefPropagation_updateEvidence, METH_VARARGS, NULL},
	 { "LoopyBeliefPropagation_setTargets", _wrap_LoopyBeliefPropagation_setTargets, METH_VARARGS, NULL},
	 { "LoopyBeliefPropagation_hardEvidenceNodes", _wrap_LoopyBeliefPropagation_hardEvidenceNodes, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"set\n"
		"  the set of nodes with hard evidence\n"
		"\n"
		""},
	 { "LoopyBeliefPropagation_softEvidenceNodes", _wrap_LoopyBeliefPropagation_softEvidenceNodes, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"set\n"
		"  the set of nodes with soft evidence\n"
		"\n"
		""},
	 { "LoopyBeliefPropagation_targets", _wrap_LoopyBeliefPropagation_targets, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"list\n"
		"  the list of marginal targets\n"
		"\n"
		""},
	 { "LoopyBeliefPropagation_evidenceImpact", _wrap_LoopyBeliefPropagation_evidenceImpact, METH_VARARGS, "\n"
		"\n"
		"Create a pyagrum.Tensor for P(target|evs) (for all instanciation of target and evs)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"target : set\n"
		"  a set of targets ids or names.\n"
		"evs : set\n"
		"  a set of nodes ids or names.\n"
		"\n"
		"Warnings\n"
		"--------\n"
		"if some evs are d-separated, they are not included in the Tensor.\n"
		"\n"
		"Returns\n"
		"-------\n"
		"pyagrum.Tensor\n"
		"  a Tensor for P(targets|evs)\n"
		"\n"
		""},
	 { "LoopyBeliefPropagation_swigregister", LoopyBeliefPropagation_swigregister, METH_O, NULL},
	 { "LoopyBeliefPropagation_swiginit", LoopyBeliefPropagation_swiginit, METH_VARARGS, NULL},
	 { "new_ExactBNdistance", _wrap_new_ExactBNdistance, METH_VARARGS, NULL},
	 { "delete_ExactBNdistance", _wrap_delete_ExactBNdistance, METH_O, NULL},
	 { "ExactBNdistance_compute", _wrap_ExactBNdistance_compute, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"Dict[str,float]\n"
		"	a dictionnary containing the different values after the computation.\n"
		"\n"
		""},
	 { "ExactBNdistance_swigregister", ExactBNdistance_swigregister, METH_O, NULL},
	 { "ExactBNdistance_swiginit", ExactBNdistance_swiginit, METH_VARARGS, NULL},
	 { "new_GibbsBNdistance", _wrap_new_GibbsBNdistance, METH_VARARGS, NULL},
	 { "delete_GibbsBNdistance", _wrap_delete_GibbsBNdistance, METH_O, NULL},
	 { "GibbsBNdistance_setBurnIn", _wrap_GibbsBNdistance_setBurnIn, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"b : int\n"
		"	size of burn in on number of iteration\n"
		"\n"
		""},
	 { "GibbsBNdistance_burnIn", _wrap_GibbsBNdistance_burnIn, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"	size of burn in on number of iteration\n"
		"\n"
		""},
	 { "GibbsBNdistance_compute", _wrap_GibbsBNdistance_compute, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"Dict[str,float]\n"
		"	a dictionnary containing the different values after the computation.\n"
		"\n"
		""},
	 { "GibbsBNdistance_setVerbosity", _wrap_GibbsBNdistance_setVerbosity, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"v : bool\n"
		"        verbosity\n"
		"\n"
		""},
	 { "GibbsBNdistance_setEpsilon", _wrap_GibbsBNdistance_setEpsilon, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"eps : float\n"
		"	the epsilon we want to use\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.OutOfBounds\n"
		"	If eps<0\n"
		"\n"
		""},
	 { "GibbsBNdistance_setMinEpsilonRate", _wrap_GibbsBNdistance_setMinEpsilonRate, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"rate : float\n"
		"	the minimal epsilon rate\n"
		"\n"
		""},
	 { "GibbsBNdistance_setMaxIter", _wrap_GibbsBNdistance_setMaxIter, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"max : int\n"
		"	the maximum number of iteration\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.OutOfBounds\n"
		"	If max <= 1\n"
		"\n"
		""},
	 { "GibbsBNdistance_setMaxTime", _wrap_GibbsBNdistance_setMaxTime, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"tiemout : float\n"
		"	stopping criterion on timeout (in seconds)\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.OutOfBounds\n"
		"	If timeout<=0.0\n"
		"\n"
		""},
	 { "GibbsBNdistance_setPeriodSize", _wrap_GibbsBNdistance_setPeriodSize, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"p : int\n"
		"	number of samples between 2 stopping\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.OutOfBounds\n"
		"	If p<1\n"
		"\n"
		""},
	 { "GibbsBNdistance_verbosity", _wrap_GibbsBNdistance_verbosity, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"bool\n"
		"	True if the verbosity is enabled\n"
		"\n"
		""},
	 { "GibbsBNdistance_epsilon", _wrap_GibbsBNdistance_epsilon, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"float\n"
		"	the value of epsilon\n"
		"\n"
		""},
	 { "GibbsBNdistance_minEpsilonRate", _wrap_GibbsBNdistance_minEpsilonRate, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"float\n"
		"	the value of the minimal epsilon rate\n"
		"\n"
		""},
	 { "GibbsBNdistance_maxIter", _wrap_GibbsBNdistance_maxIter, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"	the criterion on number of iterations\n"
		"\n"
		""},
	 { "GibbsBNdistance_maxTime", _wrap_GibbsBNdistance_maxTime, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"float\n"
		"	the timeout(in seconds)\n"
		"\n"
		""},
	 { "GibbsBNdistance_periodSize", _wrap_GibbsBNdistance_periodSize, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"	the number of samples between 2 stopping\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.OutOfBounds\n"
		"	If p<1\n"
		"\n"
		""},
	 { "GibbsBNdistance_nbrIterations", _wrap_GibbsBNdistance_nbrIterations, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"	the number of iterations\n"
		"\n"
		""},
	 { "GibbsBNdistance_currentTime", _wrap_GibbsBNdistance_currentTime, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"float\n"
		"	get the current running time in second (float)\n"
		"\n"
		""},
	 { "GibbsBNdistance_messageApproximationScheme", _wrap_GibbsBNdistance_messageApproximationScheme, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"str\n"
		"	the approximation scheme message\n"
		"\n"
		""},
	 { "GibbsBNdistance_history", _wrap_GibbsBNdistance_history, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"tuple\n"
		"	the scheme history\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.OperationNotAllowed\n"
		"	If the scheme did not performed or if verbosity is set to false\n"
		"\n"
		""},
	 { "GibbsBNdistance__asIApproximationSchemeConfiguration", _wrap_GibbsBNdistance__asIApproximationSchemeConfiguration, METH_O, NULL},
	 { "GibbsBNdistance_nbrDrawnVar", _wrap_GibbsBNdistance_nbrDrawnVar, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"  the number of variable drawn at each iteration\n"
		"\n"
		""},
	 { "GibbsBNdistance_setNbrDrawnVar", _wrap_GibbsBNdistance_setNbrDrawnVar, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"_nbr : int\n"
		"  the number of variables to be drawn at each iteration\n"
		"\n"
		""},
	 { "GibbsBNdistance_isDrawnAtRandom", _wrap_GibbsBNdistance_isDrawnAtRandom, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"bool\n"
		"  True if variables are drawn at random\n"
		"\n"
		""},
	 { "GibbsBNdistance_setDrawnAtRandom", _wrap_GibbsBNdistance_setDrawnAtRandom, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"_atRandom : bool\n"
		"  indicates if variables should be drawn at random\n"
		"\n"
		""},
	 { "GibbsBNdistance_swigregister", GibbsBNdistance_swigregister, METH_O, NULL},
	 { "GibbsBNdistance_swiginit", GibbsBNdistance_swiginit, METH_VARARGS, NULL},
	 { "new_BNDatabaseGenerator", _wrap_new_BNDatabaseGenerator, METH_O, NULL},
	 { "delete_BNDatabaseGenerator", _wrap_delete_BNDatabaseGenerator, METH_O, NULL},
	 { "BNDatabaseGenerator_setDiscretizedLabelModeRandom", _wrap_BNDatabaseGenerator_setDiscretizedLabelModeRandom, METH_O, "\n"
		"\n"
		"Set the discretized label mode to RANDOM (default mode) : sampling a `pyagrum.discretizedVariable` will give a random value from the uniform distribution on that interval.\n"
		"\n"
		"Examples\n"
		"--------\n"
		">>> import pyagrum as gum\n"
		">>> bn=gum.fastBN('A->B{yes|maybe|no}<-C->D->E<-F[1,1.5,3,10.2]<-B')\n"
		">>> g=gum.BNDatabaseGenerator(bn)\n"
		">>> g.setRandomVarOrder()\n"
		">>> g.drawSamples(5,\n"
		"...               {'B':'yes','E':'1'})\n"
		"-122.98754206579288\n"
		">>> g.setDiscretizedLabelModeRandom() # By default\n"
		">>> g.to_pandas()\n"
		"     B         F  A  C  E  D\n"
		"0  yes  2.802302  0  0  1  0\n"
		"1  yes  1.761605  0  0  1  0\n"
		"2  yes  2.507535  0  0  1  1\n"
		"3  yes  2.815282  0  1  1  0\n"
		"4  yes  5.548571  1  0  1  1\n"
		"\n"
		""},
	 { "BNDatabaseGenerator_setDiscretizedLabelModeMedian", _wrap_BNDatabaseGenerator_setDiscretizedLabelModeMedian, METH_O, "\n"
		"\n"
		"Set the discretized label mode to MEDIAN : sampling a `pyagrum.discretizedVariable` will give a deterministic value : the median of the uniform distribution on that interval.\n"
		"\n"
		"Examples\n"
		"--------\n"
		">>> import pyagrum as gum\n"
		">>> bn=gum.fastBN('A->B{yes|maybe|no}<-C->D->E<-F[1,1.5,3,10.2]<-B')\n"
		">>> g=gum.BNDatabaseGenerator(bn)\n"
		">>> g.setRandomVarOrder()\n"
		">>> g.drawSamples(5,\n"
		"...               {'B':'yes','E':'1'})\n"
		"-122.98754206579288\n"
		">>> g.setDiscretizedLabelModeMedian()\n"
		">>> g.to_pandas()\n"
		"     B         F  A  C  E  D\n"
		"0  yes  2.250000  0  0  1  0\n"
		"1  yes  2.250000  0  0  1  0\n"
		"2  yes  2.250000  0  0  1  1\n"
		"3  yes  2.250000  0  1  1  0\n"
		"4  yes  6.600000  1  0  1  1\n"
		"\n"
		""},
	 { "BNDatabaseGenerator_setDiscretizedLabelModeInterval", _wrap_BNDatabaseGenerator_setDiscretizedLabelModeInterval, METH_O, "\n"
		"\n"
		"Set the discretized label mode to INTERVAL : sampling a `pyagrum.discretizedVariable` will give a deterministic value : the string representation of the interval.\n"
		"\n"
		"Examples\n"
		"--------\n"
		">>> import pyagrum as gum\n"
		">>> bn=gum.fastBN('A->B{yes|maybe|no}<-C->D->E<-F[1,1.5,3,10.2]<-B')\n"
		">>> g=gum.BNDatabaseGenerator(bn)\n"
		">>> g.setRandomVarOrder()\n"
		">>> g.drawSamples(5,\n"
		"...               {'B':'yes','E':'1'})\n"
		"-122.98754206579288\n"
		">>> g.setDiscretizedLabelModeInterval()\n"
		">>> g.to_pandas()\n"
		"     B         F  A  C  E  D\n"
		"0  yes   [1.5;3[  0  0  1  0\n"
		"1  yes   [1.5;3[  0  0  1  0\n"
		"2  yes   [1.5;3[  0  0  1  1\n"
		"3  yes   [1.5;3[  0  1  1  0\n"
		"4  yes  [3;10.2]  1  0  1  1\n"
		"\n"
		""},
	 { "BNDatabaseGenerator_toCSV", _wrap_BNDatabaseGenerator_toCSV, METH_VARARGS, "\n"
		"\n"
		"generates csv representing the generated database.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"csvFilename: str\n"
		"  the name of the csv file\n"
		"useLabels: bool\n"
		"  whether label or id in the csv file (default true)\n"
		"append: bool\n"
		"  append in the file or rewrite the file (default false)\n"
		"csvSeparator: str\n"
		"  separator in the csv file (default ',')\n"
		"\n"
		""},
	 { "BNDatabaseGenerator_samplesNbRows", _wrap_BNDatabaseGenerator_samplesNbRows, METH_O, "\n"
		"\n"
		"return the number of rows in the samples\n"
		"\n"
		""},
	 { "BNDatabaseGenerator_samplesNbCols", _wrap_BNDatabaseGenerator_samplesNbCols, METH_O, "\n"
		"\n"
		"return the number of columns in the samples\n"
		"\n"
		""},
	 { "BNDatabaseGenerator_samplesAt", _wrap_BNDatabaseGenerator_samplesAt, METH_VARARGS, "\n"
		"\n"
		"Get the value of the database in (row,col)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"row : int\n"
		"  the row\n"
		"col : int\n"
		"  the column (using the ordered list of variables)\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"  the index of the modality of the variable in this position\n"
		"\n"
		""},
	 { "BNDatabaseGenerator_samplesLabelAt", _wrap_BNDatabaseGenerator_samplesLabelAt, METH_VARARGS, "\n"
		"\n"
		"Get the label of the database in (row,col)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"row : int\n"
		"  the row\n"
		"col : int\n"
		"  the column (using the ordered list of variables)\n"
		"\n"
		"Returns\n"
		"-------\n"
		"str\n"
		"  the label of the modality of the variable in this position\n"
		"\n"
		""},
	 { "BNDatabaseGenerator_setVarOrder", _wrap_BNDatabaseGenerator_setVarOrder, METH_VARARGS, "\n"
		"\n"
		"Set a specific order with a list of names\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"vars : List[str]\n"
		"  order specified by the list of variable names.\n"
		"\n"
		""},
	 { "BNDatabaseGenerator_setVarOrderFromCSV", _wrap_BNDatabaseGenerator_setVarOrderFromCSV, METH_VARARGS, "\n"
		"\n"
		"Set the same order than in a csv file\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"filename:str\n"
		"  the name of the CSV file\n"
		"\n"
		""},
	 { "BNDatabaseGenerator_setTopologicalVarOrder", _wrap_BNDatabaseGenerator_setTopologicalVarOrder, METH_O, "\n"
		"\n"
		"Select a topological order for the variables in the database.\n"
		"\n"
		""},
	 { "BNDatabaseGenerator_setAntiTopologicalVarOrder", _wrap_BNDatabaseGenerator_setAntiTopologicalVarOrder, METH_O, "\n"
		"\n"
		"Select an anti-topological order for the variables in the database.\n"
		"\n"
		""},
	 { "BNDatabaseGenerator_setRandomVarOrder", _wrap_BNDatabaseGenerator_setRandomVarOrder, METH_O, "\n"
		"\n"
		"Select an random order for the variables in the database.\n"
		"\n"
		""},
	 { "BNDatabaseGenerator_varOrderNames", _wrap_BNDatabaseGenerator_varOrderNames, METH_O, "\n"
		"\n"
		"The actual order for the variable (as a tuple of NodeId)\n"
		"\n"
		"Returns\n"
		"-------\n"
		"Tuple[str]\n"
		"  the tuple of names\n"
		"\n"
		""},
	 { "BNDatabaseGenerator_log2likelihood", _wrap_BNDatabaseGenerator_log2likelihood, METH_O, "\n"
		"\n"
		"Get the  log2likelihood of the generated database\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.OperationNotAllowed\n"
		"  if nothing has been sampled yet (using `gum.BNDatabaseGenerator.drawSamples()` for instance)\n"
		"\n"
		"Returns\n"
		"-------\n"
		"float\n"
		"  the log2likelihood\n"
		"\n"
		""},
	 { "BNDatabaseGenerator_bn", _wrap_BNDatabaseGenerator_bn, METH_O, "\n"
		"\n"
		"Get the Bayesian network used to generate the samples\n"
		"\n"
		"Returns\n"
		"-------\n"
		"pyagrum.BayesNet\n"
		"  The Bayesian network\n"
		"\n"
		"\n"
		""},
	 { "BNDatabaseGenerator_varOrder", _wrap_BNDatabaseGenerator_varOrder, METH_O, "\n"
		"\n"
		"The actual order for the variable (as a tuple of NodeId)\n"
		"\n"
		"Returns\n"
		"-------\n"
		"Tuple[int]\n"
		"  the tuple of NodeId\n"
		"\n"
		""},
	 { "BNDatabaseGenerator_drawSamples", _wrap_BNDatabaseGenerator_drawSamples, METH_VARARGS, "\n"
		"\n"
		"Generate and stock a database generated by sampling the Bayesian network.\n"
		"\n"
		"If `evs` is specified, the samples are stored only if there are compatible with these observations.\n"
		"\n"
		"Returns the log2likelihood of this database.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"nbSamples : int\n"
		"	the number of samples that will be generated\n"
		"evs : gum::Instantiation or Dict[int|str,int|str]\n"
		"  (optional) The evidence that will be observed by the resulting samples.\n"
		"timeout : int\n"
		"  (optional) The maximum time in seconds to generate the samples (default 600)\n"
		"\n"
		"Warning\n"
		"-------\n"
		"`nbSamples` is not the number of generated samples but the size of the database.It may happen that the evidence is very rare (or even impossible). In this case, the generation process may be *very* slow (it may even not stop). For this case a timeout is provided (default 600 seconds) and then the size of the database can be smaller than `nbSamples` (even equal to 0).\n"
		"\n"
		"Warning\n"
		"-------\n"
		"For discretized variable, aGrum/pyAgrum defines 3 behaviors when generating sample with labels :\n"
		"- RANDOM (default) : the value is chosen randomly in the interval\n"
		"- MEDIAN : the value is the median of the interval\n"
		"- INTERVAL : the value is the interval itself (for instance `« [0,1[ »`)\n"
		"\n"
		"The behavior can be set using `setDiscretizedLabelMode{Random|Median|Interval}`.\n"
		"\n"
		"Examples\n"
		"--------\n"
		">>> import pyagrum as gum\n"
		">>> bn=gum.fastBN('A->B{yes|maybe|no}<-C->D->E<-F[1,1.5,3,10.2]<-B')\n"
		">>> g=gum.BNDatabaseGenerator(bn)\n"
		">>> g.setRandomVarOrder()\n"
		">>> g.drawSamples(5,\n"
		"...               {'B':'yes','E':'1'})\n"
		"-122.98754206579288\n"
		">>> g.setDiscretizedLabelModeRandom() # By default\n"
		">>> g.to_pandas()\n"
		"     B         F  A  C  E  D\n"
		"0  yes  2.802302  0  0  1  0\n"
		"1  yes  1.761605  0  0  1  0\n"
		"2  yes  2.507535  0  0  1  1\n"
		"3  yes  2.815282  0  1  1  0\n"
		"4  yes  5.548571  1  0  1  1\n"
		">>> g.setDiscretizedLabelModeMedian()\n"
		">>> g.to_pandas()\n"
		"     B         F  A  C  E  D\n"
		"0  yes  2.250000  0  0  1  0\n"
		"1  yes  2.250000  0  0  1  0\n"
		"2  yes  2.250000  0  0  1  1\n"
		"3  yes  2.250000  0  1  1  0\n"
		"4  yes  6.600000  1  0  1  1\n"
		">>> g.setDiscretizedLabelModeInterval()\n"
		">>> g.to_pandas()\n"
		"     B         F  A  C  E  D\n"
		"0  yes   [1.5;3[  0  0  1  0\n"
		"1  yes   [1.5;3[  0  0  1  0\n"
		"2  yes   [1.5;3[  0  0  1  1\n"
		"3  yes   [1.5;3[  0  1  1  0\n"
		"4  yes  [3;10.2]  1  0  1  1\n"
		"\n"
		""},
	 { "BNDatabaseGenerator_swigregister", BNDatabaseGenerator_swigregister, METH_O, NULL},
	 { "BNDatabaseGenerator_swiginit", BNDatabaseGenerator_swiginit, METH_VARARGS, NULL},
	 { "new_BNLearner", _wrap_new_BNLearner, METH_VARARGS, NULL},
	 { "delete_BNLearner", _wrap_delete_BNLearner, METH_O, NULL},
	 { "BNLearner_learnBN", _wrap_BNLearner_learnBN, METH_O, "\n"
		"\n"
		"learn a BayesNet from a file (must have read the db before)\n"
		"\n"
		"Returns\n"
		"-------\n"
		"pyagrum.BayesNet\n"
		"	the learned BayesNet\n"
		"\n"
		""},
	 { "BNLearner_learnParameters", _wrap_BNLearner_learnParameters, METH_VARARGS, "\n"
		"\n"
		"Create a new BN copying its structure from the argument (dag or BN) and learning its parameters from the database w.r.t the BNLearner's state (priors, etc.).\n"
		"\n"
		"Warnings\n"
		"--------\n"
		"When using a `pyagrum.DAG` as input parameter, NodeIds in the dag and index of rows in the database must fit in order to coherently fix the structure of the BN.\n"
		"Generally, it is safer to use a `pyagrum.BayesianNet` as input or even to use `pyagrum.BNLearner.fitParameters`.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"dag : pyagrum.DAG\n"
		"bn : pyagrum.BayesNet\n"
		"take_into_account_score : bool\n"
		"	The dag passed in argument may have been learnt from a structure learning. In this case, if the score used to learn the structure has an implicit prior (like K2 which has a 1-smoothing prior), it is important to also take into account this implicit prior for parameter learning. By default (`take_into_account_score=True`), we will learn parameters by taking into account the prior specified by methods usePriorXXX () + the implicit prior of the score (if any). If `take_into_account_score=False`, we just take into account the prior specified by `usePriorXXX()`.\n"
		"\n"
		"Returns\n"
		"-------\n"
		"pyagrum.BayesNet\n"
		"	the learned BayesNet\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.MissingVariableInDatabase\n"
		"	If a variable of the BN is not found in the database\n"
		"pyagrum.UnknownLabelInDatabase\n"
		"	If a label is found in the database that do not correspond to the variable\n"
		"\n"
		""},
	 { "BNLearner_copyState", _wrap_BNLearner_copyState, METH_VARARGS, "\n"
		"\n"
		"Copy the state of the given pyagrum.BNLearner (as argument).\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"pyagrum.BNLearner\n"
		"    the learner whose state is copied.\n"
		"\n"
		""},
	 { "BNLearner_setInitialDAG", _wrap_BNLearner_setInitialDAG, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"dag : pyagrum.DAG\n"
		"	an initial pyagrum.DAG structure\n"
		"\n"
		""},
	 { "BNLearner_useEM", _wrap_BNLearner_useEM, METH_VARARGS, "\n"
		"\n"
		"Indicates if we use EM for parameter learning.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"epsilon : float\n"
		"	if epsilon=0.0 then EM is not used.\n"
		"	if epsilon>0 then EM is used and stops when the sum of the cumulative squared error on parameters is less than epsilon.\n"
		"\n"
		""},
	 { "BNLearner_useScoreAIC", _wrap_BNLearner_useScoreAIC, METH_O, "\n"
		"\n"
		"Indicate that we wish to use an AIC score.\n"
		"\n"
		""},
	 { "BNLearner_useScoreBD", _wrap_BNLearner_useScoreBD, METH_O, "\n"
		"\n"
		"Indicate that we wish to use a BD score.\n"
		"\n"
		""},
	 { "BNLearner_useScoreBDeu", _wrap_BNLearner_useScoreBDeu, METH_O, "\n"
		"\n"
		"Indicate that we wish to use a BDeu score.\n"
		"\n"
		""},
	 { "BNLearner_useScoreBIC", _wrap_BNLearner_useScoreBIC, METH_O, "\n"
		"\n"
		"Indicate that we wish to use a BIC score.\n"
		"\n"
		""},
	 { "BNLearner_useScoreK2", _wrap_BNLearner_useScoreK2, METH_O, "\n"
		"\n"
		"Indicate that we wish to use a K2 score.\n"
		"\n"
		""},
	 { "BNLearner_useScoreLog2Likelihood", _wrap_BNLearner_useScoreLog2Likelihood, METH_O, "\n"
		"\n"
		"Indicate that we wish to use a Log2Likelihood score.\n"
		"\n"
		""},
	 { "BNLearner_useNoPrior", _wrap_BNLearner_useNoPrior, METH_O, "\n"
		"\n"
		"Use no prior.\n"
		"\n"
		""},
	 { "BNLearner_useBDeuPrior", _wrap_BNLearner_useBDeuPrior, METH_VARARGS, "\n"
		"\n"
		"The BDeu prior adds weight to all the cells of the counting tables.\n"
		"In other words, it adds weight rows in the database with equally probable\n"
		"values.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"weight : float\n"
		"	the prior weight\n"
		"\n"
		""},
	 { "BNLearner_useSmoothingPrior", _wrap_BNLearner_useSmoothingPrior, METH_VARARGS, "\n"
		"\n"
		"Use the prior smoothing.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"weight : float\n"
		"        pass in argument a weight if you wish to assign a weight to the smoothing, otherwise the current weight of the learner will be used.\n"
		"\n"
		""},
	 { "BNLearner_useDirichletPrior", _wrap_BNLearner_useDirichletPrior, METH_VARARGS, "\n"
		"\n"
		"Use the Dirichlet prior.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"source : str|pyagrum.BayesNet\n"
		"        the Dirichlet related source (filename of a database or a Bayesian network)\n"
		"weight : float (optional)\n"
		"        the weight of the prior (the 'size' of the corresponding 'virtual database')\n"
		"\n"
		""},
	 { "BNLearner_useGreedyHillClimbing", _wrap_BNLearner_useGreedyHillClimbing, METH_O, "\n"
		"\n"
		"Indicate that we wish to use a greedy hill climbing algorithm.\n"
		"\n"
		""},
	 { "BNLearner_useLocalSearchWithTabuList", _wrap_BNLearner_useLocalSearchWithTabuList, METH_VARARGS, "\n"
		"\n"
		"Indicate that we wish to use a local search with tabu list\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"tabu_size : int\n"
		"        The size of the tabu list\n"
		"\n"
		"nb_decrease : int\n"
		"        The max number of changes decreasing the score consecutively that we allow to apply\n"
		"\n"
		""},
	 { "BNLearner_useMIIC", _wrap_BNLearner_useMIIC, METH_O, "\n"
		"\n"
		"Indicate that we wish to use MIIC.\n"
		"\n"
		""},
	 { "BNLearner_useNMLCorrection", _wrap_BNLearner_useNMLCorrection, METH_O, "\n"
		"\n"
		"Indicate that we wish to use the NML correction for MIIC\n"
		"\n"
		""},
	 { "BNLearner_useMDLCorrection", _wrap_BNLearner_useMDLCorrection, METH_O, "\n"
		"\n"
		"Indicate that we wish to use the MDL correction for MIIC\n"
		"\n"
		""},
	 { "BNLearner_useNoCorrection", _wrap_BNLearner_useNoCorrection, METH_O, "\n"
		"\n"
		"Indicate that we wish to use the NoCorr correction for MIIC\n"
		"\n"
		""},
	 { "BNLearner_setMaxIndegree", _wrap_BNLearner_setMaxIndegree, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"max_indegree : int\n"
		"	the limit number of parents\n"
		"\n"
		""},
	 { "BNLearner_addForbiddenArc", _wrap_BNLearner_addForbiddenArc, METH_VARARGS, "\n"
		"\n"
		"The arc in parameters won't be added.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"arc : pyagrum.Arc\n"
		"	an arc\n"
		"head : int | str\n"
		"	a variable's id or name\n"
		"tail : int | str\n"
		"	a variable's id or name\n"
		"\n"
		""},
	 { "BNLearner_eraseForbiddenArc", _wrap_BNLearner_eraseForbiddenArc, METH_VARARGS, "\n"
		"\n"
		"Allow the arc to be added if necessary.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"arc: pyagrum.Arc\n"
		"	an arc\n"
		"head : int | str\n"
		"	a variable's id or name\n"
		"tail : int | str\n"
		"	a variable's id or name\n"
		"\n"
		""},
	 { "BNLearner_addMandatoryArc", _wrap_BNLearner_addMandatoryArc, METH_VARARGS, "\n"
		"\n"
		"Allow to add prior structural knowledge.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"arc : pyagrum.Arc\n"
		"	an arc\n"
		"head : int | str\n"
		"	a variable's id or name\n"
		"tail : int | str\n"
		"	a variable's id or name\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.InvalidDirectedCycle\n"
		"	If the added arc creates a directed cycle in the DAG\n"
		"\n"
		""},
	 { "BNLearner_eraseMandatoryArc", _wrap_BNLearner_eraseMandatoryArc, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"arc: pyagrum.Arc\n"
		"	an arc\n"
		"head : int | str\n"
		"	a variable's id or name\n"
		"tail : int | str\n"
		"	a variable's id or name\n"
		"\n"
		""},
	 { "BNLearner_addPossibleEdge", _wrap_BNLearner_addPossibleEdge, METH_VARARGS, "\n"
		"\n"
		"assign a new possible edge\n"
		"\n"
		"Warnings\n"
		"--------\n"
		"  By default, all edge is possible. However, once at least one possible edge is defined, all other edges not declared possible\n"
		"  are considered as impossible.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"arc : pyagrum.Arc\n"
		"	an arc\n"
		"head : int | str\n"
		"	a variable's id or name\n"
		"tail : int | str\n"
		"	a variable's id or name\n"
		"\n"
		""},
	 { "BNLearner_erasePossibleEdge", _wrap_BNLearner_erasePossibleEdge, METH_VARARGS, "\n"
		"\n"
		"Allow the 2 arcs to be added if necessary.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"arc : pyagrum.Arc\n"
		"	an arc\n"
		"head : int | str\n"
		"	a variable's id or name\n"
		"tail : int | str\n"
		"	a variable's id or name\n"
		"\n"
		""},
	 { "BNLearner_setPossibleSkeleton", _wrap_BNLearner_setPossibleSkeleton, METH_VARARGS, "\n"
		"\n"
		"Add a constraint by fixing the set of possible edges as a pyagrum.UndiGraph.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"g : pyagrum.UndiGraph\n"
		"	the fixed skeleton\n"
		"\n"
		""},
	 { "BNLearner_addNoParentNode", _wrap_BNLearner_addNoParentNode, METH_VARARGS, NULL},
	 { "BNLearner_eraseNoParentNode", _wrap_BNLearner_eraseNoParentNode, METH_VARARGS, NULL},
	 { "BNLearner_addNoChildrenNode", _wrap_BNLearner_addNoChildrenNode, METH_VARARGS, NULL},
	 { "BNLearner_eraseNoChildrenNode", _wrap_BNLearner_eraseNoChildrenNode, METH_VARARGS, NULL},
	 { "BNLearner_isConstraintBased", _wrap_BNLearner_isConstraintBased, METH_O, NULL},
	 { "BNLearner_isScoreBased", _wrap_BNLearner_isScoreBased, METH_O, NULL},
	 { "BNLearner___repr__", _wrap_BNLearner___repr__, METH_O, NULL},
	 { "BNLearner___str__", _wrap_BNLearner___str__, METH_O, NULL},
	 { "BNLearner_setVerbosity", _wrap_BNLearner_setVerbosity, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"v : bool\n"
		"        verbosity\n"
		"\n"
		""},
	 { "BNLearner_setEpsilon", _wrap_BNLearner_setEpsilon, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"eps : float\n"
		"	the epsilon we want to use\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.OutOfBounds\n"
		"	If eps<0\n"
		"\n"
		""},
	 { "BNLearner_setMinEpsilonRate", _wrap_BNLearner_setMinEpsilonRate, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"rate : float\n"
		"	the minimal epsilon rate\n"
		"\n"
		""},
	 { "BNLearner_setMaxIter", _wrap_BNLearner_setMaxIter, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"max : int\n"
		"	the maximum number of iteration\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.OutOfBounds\n"
		"	If max <= 1\n"
		"\n"
		""},
	 { "BNLearner_setMaxTime", _wrap_BNLearner_setMaxTime, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"tiemout : float\n"
		"	stopping criterion on timeout (in seconds)\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.OutOfBounds\n"
		"	If timeout<=0.0\n"
		"\n"
		""},
	 { "BNLearner_setPeriodSize", _wrap_BNLearner_setPeriodSize, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"p : int\n"
		"	number of samples between 2 stopping\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.OutOfBounds\n"
		"	If p<1\n"
		"\n"
		""},
	 { "BNLearner_verbosity", _wrap_BNLearner_verbosity, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"bool\n"
		"	True if the verbosity is enabled\n"
		"\n"
		""},
	 { "BNLearner_epsilon", _wrap_BNLearner_epsilon, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"float\n"
		"	the value of epsilon\n"
		"\n"
		""},
	 { "BNLearner_minEpsilonRate", _wrap_BNLearner_minEpsilonRate, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"float\n"
		"	the value of the minimal epsilon rate\n"
		"\n"
		""},
	 { "BNLearner_maxIter", _wrap_BNLearner_maxIter, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"	the criterion on number of iterations\n"
		"\n"
		""},
	 { "BNLearner_maxTime", _wrap_BNLearner_maxTime, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"float\n"
		"	the timeout(in seconds)\n"
		"\n"
		""},
	 { "BNLearner_periodSize", _wrap_BNLearner_periodSize, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"	the number of samples between 2 stopping\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.OutOfBounds\n"
		"	If p<1\n"
		"\n"
		""},
	 { "BNLearner_nbrIterations", _wrap_BNLearner_nbrIterations, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"	the number of iterations\n"
		"\n"
		""},
	 { "BNLearner_currentTime", _wrap_BNLearner_currentTime, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"float\n"
		"	get the current running time in second (float)\n"
		"\n"
		""},
	 { "BNLearner_messageApproximationScheme", _wrap_BNLearner_messageApproximationScheme, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"str\n"
		"	the approximation scheme message\n"
		"\n"
		""},
	 { "BNLearner_history", _wrap_BNLearner_history, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"tuple\n"
		"	the scheme history\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.OperationNotAllowed\n"
		"	If the scheme did not performed or if verbosity is set to false\n"
		"\n"
		""},
	 { "BNLearner__asIApproximationSchemeConfiguration", _wrap_BNLearner__asIApproximationSchemeConfiguration, METH_O, NULL},
	 { "BNLearner_learnDAG", _wrap_BNLearner_learnDAG, METH_O, "\n"
		"\n"
		"learn a structure from a file\n"
		"\n"
		"Returns\n"
		"-------\n"
		"pyagrum.DAG\n"
		"	the learned DAG\n"
		"\n"
		""},
	 { "BNLearner_learnPDAG", _wrap_BNLearner_learnPDAG, METH_O, "\n"
		"\n"
		"learn a PDAG from a file\n"
		"\n"
		"Warnings\n"
		"--------\n"
		"  The learning method must be constraint-based (MIIC, etc.) and not score-based (K2, GreedyHillClimbing, etc.)\n"
		"\n"
		"Returns\n"
		"-------\n"
		"pyagrum.PDAG\n"
		"	the learned PDAG\n"
		"\n"
		""},
	 { "BNLearner_names", _wrap_BNLearner_names, METH_O, "\n"
		"\n"
		"Returns\n"
		"-------\n"
		"Tuple[str]\n"
		"	the names of the variables in the database\n"
		"\n"
		""},
	 { "BNLearner_idFromName", _wrap_BNLearner_idFromName, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"var_names : str\n"
		"	a variable's name\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"	the column id corresponding to a variable name\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.MissingVariableInDatabase\n"
		"	If a variable of the BN is not found in the database.\n"
		"\n"
		""},
	 { "BNLearner_nameFromId", _wrap_BNLearner_nameFromId, METH_VARARGS, "\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id\n"
		"	a node id\n"
		"\n"
		"Returns\n"
		"-------\n"
		"str\n"
		"	the variable's name\n"
		"\n"
		""},
	 { "BNLearner_setDatabaseWeight", _wrap_BNLearner_setDatabaseWeight, METH_VARARGS, "\n"
		"\n"
		"Set the database weight which is given as an equivalent sample size.\n"
		"\n"
		"Warnings\n"
		"--------\n"
		"The same weight is assigned to all the rows of the learning database so that the sum of their\n"
		"weights is equal to the value of the parameter `weight`.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"weight : float\n"
		"	the database weight\n"
		"\n"
		""},
	 { "BNLearner_setRecordWeight", _wrap_BNLearner_setRecordWeight, METH_VARARGS, "\n"
		"\n"
		"Set the weight of the ith record\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i : int\n"
		"  the position  of the record in the database\n"
		"weight : float\n"
		"  the weight assigned to this record\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.OutOfBounds\n"
		"  if i is outside the set of indices of the records\n"
		"\n"
		""},
	 { "BNLearner_databaseWeight", _wrap_BNLearner_databaseWeight, METH_O, "\n"
		"\n"
		"Get the database weight which is given as an equivalent sample size.\n"
		"\n"
		"Returns\n"
		"-------\n"
		"float\n"
		"  The weight of the database\n"
		"\n"
		""},
	 { "BNLearner_recordWeight", _wrap_BNLearner_recordWeight, METH_VARARGS, "\n"
		"\n"
		"Get the weight of the ith record\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i : int\n"
		"  the position  of the record in the database\n"
		"\n"
		"Raises\n"
		"------\n"
		"pyagrum.OutOfBounds\n"
		"  if i is outside the set of indices of the records\n"
		"\n"
		"Returns\n"
		"-------\n"
		"float\n"
		"  The weight of the ith record of the database\n"
		"\n"
		""},
	 { "BNLearner_hasMissingValues", _wrap_BNLearner_hasMissingValues, METH_O, "\n"
		"\n"
		"Indicates whether there are missing values in the database.\n"
		"\n"
		"Returns\n"
		"-------\n"
		"bool\n"
		"    True if there are some missing values in the database.\n"
		"\n"
		""},
	 { "BNLearner_logLikelihood", _wrap_BNLearner_logLikelihood, METH_VARARGS, "\n"
		"\n"
		"logLikelihood computes the log-likelihood for the columns in vars, given the columns in the list knowing (optional)\n"
		"\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"vars: List[str]\n"
		"	the name of the columns of interest\n"
		"\n"
		"knowing : List[str]\n"
		"	the (optional) list of names of conditioning columns\n"
		"\n"
		"Returns\n"
		"-------\n"
		"float\n"
		"	the log-likelihood (base 2)\n"
		"\n"
		""},
	 { "BNLearner_score", _wrap_BNLearner_score, METH_VARARGS, "\n"
		"\n"
		"Returns the value of the score currently in use by the BNLearner of a variable given a set of other variables\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"name1: str\n"
		"	the name of the variable at the LHS of the conditioning bar\n"
		"\n"
		"knowing : List[str]\n"
		"	the list of names of the conditioning variables\n"
		"\n"
		"Returns\n"
		"-------\n"
		"float\n"
		"	the value of the score\n"
		"\n"
		""},
	 { "BNLearner_mutualInformation", _wrap_BNLearner_mutualInformation, METH_VARARGS, "\n"
		"\n"
		"computes the (log2) mutual information between two columns, given a list of other columns.\n"
		"\n"
		"Warnings\n"
		"--------\n"
		"This function gives the 'raw' mutual information. If you want a version taking into account correction and prior, use\n"
		"gum.BNLearner.correctedMutualInformation\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"name1: str\n"
		"	the name of the first column\n"
		"\n"
		"name2 : str\n"
		"	the name of the second column\n"
		"\n"
		"knowing : List[str]\n"
		"	the list of names of conditioning columns\n"
		"\n"
		"Returns\n"
		"-------\n"
		"float\n"
		"  the log2 mutual information\n"
		"\n"
		""},
	 { "BNLearner_correctedMutualInformation", _wrap_BNLearner_correctedMutualInformation, METH_VARARGS, "\n"
		"\n"
		"computes the mutual information between two columns, given a list of other columns (log2).\n"
		"\n"
		"Warnings\n"
		"--------\n"
		"This function takes into account correction and prior. If you want the 'raw' mutual information, use\n"
		"gum.BNLearner.mutualInformation\n"
		"\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"name1: str\n"
		"	the name of the first column\n"
		"\n"
		"name2 : str\n"
		"	the name of the second column\n"
		"\n"
		"knowing : List[str]\n"
		"	the list of names of conditioning columns\n"
		"\n"
		"Returns\n"
		"-------\n"
		"Tuple[float,float]\n"
		"	the G2 statistic and the associated p-value as a Tuple\n"
		"\n"
		""},
	 { "BNLearner_rawPseudoCount", _wrap_BNLearner_rawPseudoCount, METH_VARARGS, "\n"
		"\n"
		"computes the pseudoCount (taking priors into account) of the list of variables as a list of floats.\n"
		"\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"vars: List[int|str]\n"
		"	the list of variables\n"
		"\n"
		"Returns\n"
		"-------\n"
		"List[float]\n"
		"	the pseudo-count as a list of float\n"
		"\n"
		""},
	 { "BNLearner_nbRows", _wrap_BNLearner_nbRows, METH_O, "\n"
		"\n"
		"Return the number of row in the database\n"
		"\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"	the number of rows in the database\n"
		"\n"
		""},
	 { "BNLearner_nbCols", _wrap_BNLearner_nbCols, METH_O, "\n"
		"\n"
		"Return the number of columns in the database\n"
		"\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"	the number of columns in the database\n"
		"\n"
		""},
	 { "BNLearner_domainSize", _wrap_BNLearner_domainSize, METH_VARARGS, "\n"
		"\n"
		"Return the domain size of the variable with the given name.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"n : str | int\n"
		"  the name of the id of the variable\n"
		"\n"
		""},
	 { "BNLearner_setNumberOfThreads", _wrap_BNLearner_setNumberOfThreads, METH_VARARGS, "\n"
		"\n"
		"If the parameter n passed in argument is different from 0, the BNLearner will use n threads during learning, hence overriding pyAgrum default number of threads.\n"
		"If, on the contrary, n is equal to 0, the BNLearner will comply with pyAgrum default number of threads.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"n : int\n"
		"	the number of threads to be used by the BNLearner\n"
		"\n"
		""},
	 { "BNLearner_getNumberOfThreads", _wrap_BNLearner_getNumberOfThreads, METH_O, "\n"
		"\n"
		"Return the number of threads used by the BNLearner during structure and parameter learning.\n"
		"\n"
		"Returns\n"
		"-------\n"
		"int\n"
		"	the number of threads used by the BNLearner during structure and parameter learning\n"
		"\n"
		""},
	 { "BNLearner_isGumNumberOfThreadsOverriden", _wrap_BNLearner_isGumNumberOfThreadsOverriden, METH_O, "\n"
		"\n"
		"Check if the number of threads use by the learner is the default one or not.\n"
		"\n"
		"Returns\n"
		"-------\n"
		"bool\n"
		"	True if the number of threads used by the BNLearner has been set.\n"
		"\n"
		""},
	 { "BNLearner_chi2", _wrap_BNLearner_chi2, METH_VARARGS, "\n"
		"\n"
		"chi2 computes the chi2 statistic and p-value for two columns, given a list of other columns.\n"
		"\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"name1: str\n"
		"	the name of the first column\n"
		"\n"
		"name2 : str\n"
		"	the name of the second column\n"
		"\n"
		"knowing : List[str]\n"
		"	the list of names of conditioning columns\n"
		"\n"
		"Returns\n"
		"-------\n"
		"Tuple[float,float]\n"
		"	the chi2 statistic and the associated p-value as a Tuple\n"
		"\n"
		""},
	 { "BNLearner_G2", _wrap_BNLearner_G2, METH_VARARGS, "\n"
		"\n"
		"G2 computes the G2 statistic and p-value for two columns, given a list of other columns.\n"
		"\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"name1: str\n"
		"	the name of the first column\n"
		"\n"
		"name2 : str\n"
		"	the name of the second column\n"
		"\n"
		"knowing : List[str]\n"
		"	the list of names of conditioning columns\n"
		"\n"
		"Returns\n"
		"-------\n"
		"Tuple[float,float]\n"
		"	the G2 statistic and the associated p-value as a Tuple\n"
		"\n"
		""},
	 { "BNLearner_setSliceOrder", _wrap_BNLearner_setSliceOrder, METH_VARARGS, "\n"
		"\n"
		"Set a partial order on the nodes.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"l : list\n"
		"        a list of sequences (composed of ids of rows or string)\n"
		"\n"
		""},
	 { "BNLearner_useK2", _wrap_BNLearner_useK2, METH_VARARGS, "\n"
		"\n"
		"Indicate to use the K2 algorithm (which needs a total ordering of the variables).\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"order : list[int or str]\n"
		"      sequences of (ids or name)\n"
		"\n"
		""},
	 { "BNLearner_latentVariables", _wrap_BNLearner_latentVariables, METH_O, "\n"
		"\n"
		"Warnings\n"
		"--------\n"
		"learner must be using MIIC algorithm\n"
		"\n"
		"Returns\n"
		"-------\n"
		"list\n"
		"	the list of latent variables\n"
		"\n"
		""},
	 { "BNLearner_state", _wrap_BNLearner_state, METH_O, "\n"
		"\n"
		"Returns a dictionary containing the current state of the BNLearner.\n"
		"\n"
		"Returns\n"
		"-------\n"
		"Dict[str,Any]\n"
		"    a dictionary containing the current state of the BNLearner.\n"
		"\n"
		""},
	 { "BNLearner_setPossibleEdges", _wrap_BNLearner_setPossibleEdges, METH_VARARGS, "\n"
		"\n"
		"Add a constraint by fixing the set of possible edges.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"edges : Set[Tuple[int]]\n"
		"	a set of edges as couples of nodeIds.\n"
		"\n"
		""},
	 { "BNLearner_swigregister", BNLearner_swigregister, METH_O, NULL},
	 { "BNLearner_swiginit", BNLearner_swiginit, METH_VARARGS, NULL},
	 { NULL, NULL, 0, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_gum__GibbsBNdistanceT_double_tTo_p_gum__ApproximationScheme(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::ApproximationScheme *)  ((gum::GibbsBNdistance< double > *) x));
}
static void *_p_gum__ExactBNdistanceT_double_tTo_p_gum__BNdistanceT_double_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::BNdistance< double > *)  ((gum::ExactBNdistance< double > *) x));
}
static void *_p_gum__GibbsBNdistanceT_double_tTo_p_gum__BNdistanceT_double_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::BNdistance< double > *)  ((gum::GibbsBNdistance< double > *) x));
}
static void *_p_gum__BayesNetT_double_tTo_p_gum__DAGmodel(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::DAGmodel *) (gum::IBayesNet< double > *) ((gum::BayesNet< double > *) x));
}
static void *_p_gum__BayesNetFragmentT_double_tTo_p_gum__DAGmodel(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::DAGmodel *) (gum::IBayesNet< double > *) ((gum::BayesNetFragment< double > *) x));
}
static void *_p_gum__IBayesNetT_double_tTo_p_gum__DAGmodel(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::DAGmodel *)  ((gum::IBayesNet< double > *) x));
}
static void *_p_gum__DAGTo_p_gum__DiGraph(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::DiGraph *)  ((gum::DAG *) x));
}
static void *_p_gum__MixedGraphTo_p_gum__DiGraph(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::DiGraph *)  ((gum::MixedGraph *) x));
}
static void *_p_gum__PDAGTo_p_gum__DiGraph(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::DiGraph *) (gum::MixedGraph *) ((gum::PDAG *) x));
}
static void *_p_PythonBNListenerTo_p_gum__DiGraphListener(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::DiGraphListener *)  ((PythonBNListener *) x));
}
static void *_p_gum__BayesNetFragmentT_double_tTo_p_gum__DiGraphListener(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::DiGraphListener *)  ((gum::BayesNetFragment< double > *) x));
}
static void *_p_gum__DiscretizedVariableT_double_tTo_p_gum__DiscreteVariable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::DiscreteVariable *) (gum::IDiscretizedVariable *) ((gum::DiscretizedVariable< double > *) x));
}
static void *_p_gum__IDiscretizedVariableTo_p_gum__DiscreteVariable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::DiscreteVariable *)  ((gum::IDiscretizedVariable *) x));
}
static void *_p_gum__IntegerVariableTo_p_gum__DiscreteVariable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::DiscreteVariable *)  ((gum::IntegerVariable *) x));
}
static void *_p_gum__LabelizedVariableTo_p_gum__DiscreteVariable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::DiscreteVariable *)  ((gum::LabelizedVariable *) x));
}
static void *_p_gum__NumericalDiscreteVariableTo_p_gum__DiscreteVariable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::DiscreteVariable *)  ((gum::NumericalDiscreteVariable *) x));
}
static void *_p_gum__RangeVariableTo_p_gum__DiscreteVariable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::DiscreteVariable *)  ((gum::RangeVariable *) x));
}
static void *_p_gum__LoopySamplingInferenceT_double_gum__GibbsSampling_tTo_p_gum__GibbsSamplingT_double_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::GibbsSampling< double > *)  ((gum::LoopySamplingInference< double,gum::GibbsSampling > *) x));
}
static void *_p_gum__BayesNetT_double_tTo_p_gum__GraphicalModel(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::GraphicalModel *) (gum::DAGmodel *)(gum::IBayesNet< double > *) ((gum::BayesNet< double > *) x));
}
static void *_p_gum__BayesNetFragmentT_double_tTo_p_gum__GraphicalModel(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::GraphicalModel *) (gum::DAGmodel *)(gum::IBayesNet< double > *) ((gum::BayesNetFragment< double > *) x));
}
static void *_p_gum__DAGmodelTo_p_gum__GraphicalModel(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::GraphicalModel *)  ((gum::DAGmodel *) x));
}
static void *_p_gum__IBayesNetT_double_tTo_p_gum__GraphicalModel(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::GraphicalModel *) (gum::DAGmodel *) ((gum::IBayesNet< double > *) x));
}
static void *_p_gum__UGmodelTo_p_gum__GraphicalModel(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::GraphicalModel *)  ((gum::UGmodel *) x));
}
static void *_p_gum__ApproximationSchemeTo_p_gum__IApproximationSchemeConfiguration(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::IApproximationSchemeConfiguration *)  ((gum::ApproximationScheme *) x));
}
static void *_p_gum__GibbsBNdistanceT_double_tTo_p_gum__IApproximationSchemeConfiguration(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::IApproximationSchemeConfiguration *) (gum::ApproximationScheme *) ((gum::GibbsBNdistance< double > *) x));
}
static void *_p_gum__learning__BNLearnerT_double_tTo_p_gum__IApproximationSchemeConfiguration(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::IApproximationSchemeConfiguration *) (gum::learning::IBNLearner *) ((gum::learning::BNLearner< double > *) x));
}
static void *_p_gum__learning__IBNLearnerTo_p_gum__IApproximationSchemeConfiguration(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::IApproximationSchemeConfiguration *)  ((gum::learning::IBNLearner *) x));
}
static void *_p_gum__BayesNetT_double_tTo_p_gum__IBayesNetT_double_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::IBayesNet< double > *)  ((gum::BayesNet< double > *) x));
}
static void *_p_gum__BayesNetFragmentT_double_tTo_p_gum__IBayesNetT_double_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::IBayesNet< double > *)  ((gum::BayesNetFragment< double > *) x));
}
static void *_p_gum__LoopySamplingInferenceT_double_gum__ImportanceSampling_tTo_p_gum__ImportanceSamplingT_double_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::ImportanceSampling< double > *)  ((gum::LoopySamplingInference< double,gum::ImportanceSampling > *) x));
}
static void *_p_PythonBNListenerTo_p_gum__Listener(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::Listener *) (gum::DiGraphListener *) ((PythonBNListener *) x));
}
static void *_p_PythonLoadListenerTo_p_gum__Listener(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::Listener *)  ((PythonLoadListener *) x));
}
static void *_p_gum__BayesNetFragmentT_double_tTo_p_gum__Listener(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::Listener *) (gum::DiGraphListener *) ((gum::BayesNetFragment< double > *) x));
}
static void *_p_gum__DiGraphListenerTo_p_gum__Listener(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::Listener *)  ((gum::DiGraphListener *) x));
}
static void *_p_gum__LoopySamplingInferenceT_double_gum__MonteCarloSampling_tTo_p_gum__MonteCarloSamplingT_double_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::MonteCarloSampling< double > *)  ((gum::LoopySamplingInference< double,gum::MonteCarloSampling > *) x));
}
static void *_p_gum__MultiDimArrayT_double_tTo_p_gum__MultiDimImplementationT_double_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::MultiDimImplementation< double > *) (gum::MultiDimWithOffset< double > *) ((gum::MultiDimArray< double > *) x));
}
static void *_p_gum__MultiDimWithOffsetT_double_tTo_p_gum__MultiDimImplementationT_double_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::MultiDimImplementation< double > *)  ((gum::MultiDimWithOffset< double > *) x));
}
static void *_p_gum__LazyPropagationT_double_tTo_p_gum__ScheduledInference(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::ScheduledInference *)  ((gum::LazyPropagation< double > *) x));
}
static void *_p_gum__ShaferShenoyInferenceT_double_tTo_p_gum__ScheduledInference(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::ScheduledInference *)  ((gum::ShaferShenoyInference< double > *) x));
}
static void *_p_gum__VariableEliminationT_double_tTo_p_gum__ScheduledInference(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::ScheduledInference *)  ((gum::VariableElimination< double > *) x));
}
static void *_p_gum__LazyPropagationT_double_tTo_p_gum__ThreadNumberManager(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::ThreadNumberManager *) (gum::ScheduledInference *) ((gum::LazyPropagation< double > *) x));
}
static void *_p_gum__ScheduledInferenceTo_p_gum__ThreadNumberManager(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::ThreadNumberManager *)  ((gum::ScheduledInference *) x));
}
static void *_p_gum__ShaferShenoyInferenceT_double_tTo_p_gum__ThreadNumberManager(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::ThreadNumberManager *) (gum::ScheduledInference *) ((gum::ShaferShenoyInference< double > *) x));
}
static void *_p_gum__VariableEliminationT_double_tTo_p_gum__ThreadNumberManager(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::ThreadNumberManager *) (gum::ScheduledInference *) ((gum::VariableElimination< double > *) x));
}
static void *_p_gum__learning__BNLearnerT_double_tTo_p_gum__ThreadNumberManager(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::ThreadNumberManager *) (gum::learning::IBNLearner *) ((gum::learning::BNLearner< double > *) x));
}
static void *_p_gum__learning__IBNLearnerTo_p_gum__ThreadNumberManager(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::ThreadNumberManager *)  ((gum::learning::IBNLearner *) x));
}
static void *_p_gum__CliqueGraphTo_p_gum__UndiGraph(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::UndiGraph *)  ((gum::CliqueGraph *) x));
}
static void *_p_gum__MixedGraphTo_p_gum__UndiGraph(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::UndiGraph *)  ((gum::MixedGraph *) x));
}
static void *_p_gum__PDAGTo_p_gum__UndiGraph(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::UndiGraph *) (gum::MixedGraph *) ((gum::PDAG *) x));
}
static void *_p_gum__LoopySamplingInferenceT_double_gum__WeightedSampling_tTo_p_gum__WeightedSamplingT_double_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::WeightedSampling< double > *)  ((gum::LoopySamplingInference< double,gum::WeightedSampling > *) x));
}
static void *_p_gum__learning__BNLearnerT_double_tTo_p_gum__learning__IBNLearner(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::learning::IBNLearner *)  ((gum::learning::BNLearner< double > *) x));
}
static swig_type_info _swigt__p_ArcIterator = {"_p_ArcIterator", "ArcIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BNGenerator = {"_p_BNGenerator", "BNGenerator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_EdgeIterator = {"_p_EdgeIterator", "EdgeIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Handler = {"_p_Handler", "Handler *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_HandlerSafe = {"_p_HandlerSafe", "HandlerSafe *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_InformationTheory = {"_p_InformationTheory", "InformationTheory *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_IsMissing = {"_p_IsMissing", "IsMissing *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MissingValType = {"_p_MissingValType", "MissingValType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NodeConstIterator = {"_p_NodeConstIterator", "NodeConstIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NodeConstIteratorSafe = {"_p_NodeConstIteratorSafe", "NodeConstIteratorSafe *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NodeIterator = {"_p_NodeIterator", "NodeIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NodeIteratorSafe = {"_p_NodeIteratorSafe", "NodeIteratorSafe *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PRMexplorer = {"_p_PRMexplorer", "PRMexplorer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PythonApproximationListener = {"_p_PythonApproximationListener", "PythonApproximationListener *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PythonBNListener = {"_p_PythonBNListener", "PythonBNListener *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PythonDatabaseGeneratorListener = {"_p_PythonDatabaseGeneratorListener", "PythonDatabaseGeneratorListener *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PythonLoadListener = {"_p_PythonLoadListener", "PythonLoadListener *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_allocator_type = {"_p_allocator_type", "allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_difference_type = {"_p_difference_type", "difference_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_first_type = {"_p_first_type", "first_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__ApproximationScheme = {"_p_gum__ApproximationScheme", "gum::ApproximationScheme *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__Arc = {"_p_gum__Arc", "gum::Arc *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__BNdistanceT_double_t = {"_p_gum__BNdistanceT_double_t", "gum::BNdistance< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__BayesNetFragmentT_double_t = {"_p_gum__BayesNetFragmentT_double_t", "gum::BayesNetFragment< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__BayesNetT_double_t = {"_p_gum__BayesNetT_double_t", "gum::BayesNet< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__CliqueGraph = {"_p_gum__CliqueGraph", "gum::JoinTree *|gum::JunctionTree *|gum::CliqueGraph *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__DAG = {"_p_gum__DAG", "gum::DAG *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__DAGmodel = {"_p_gum__DAGmodel", "gum::DAGmodel *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__DiGraph = {"_p_gum__DiGraph", "gum::DiGraph *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__MixedGraph = {"_p_gum__MixedGraph", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_gum__DiGraphListener = {"_p_gum__DiGraphListener", "gum::DiGraphListener *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__DiscreteVariable = {"_p_gum__DiscreteVariable", "gum::DiscreteVariable *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__DiscretizedVariableT_double_t = {"_p_gum__DiscretizedVariableT_double_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_gum__IDiscretizedVariable = {"_p_gum__IDiscretizedVariable", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_gum__IntegerVariable = {"_p_gum__IntegerVariable", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_gum__LabelizedVariable = {"_p_gum__LabelizedVariable", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_gum__NumericalDiscreteVariable = {"_p_gum__NumericalDiscreteVariable", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_gum__RangeVariable = {"_p_gum__RangeVariable", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_gum__Edge = {"_p_gum__Edge", "gum::Edge *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__EssentialGraph = {"_p_gum__EssentialGraph", "gum::EssentialGraph *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__ExactBNdistanceT_double_t = {"_p_gum__ExactBNdistanceT_double_t", "gum::ExactBNdistance< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__GibbsBNdistanceT_double_t = {"_p_gum__GibbsBNdistanceT_double_t", "gum::GibbsBNdistance< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__GibbsSamplingT_double_t = {"_p_gum__GibbsSamplingT_double_t", "gum::GibbsSampling< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__GraphicalModel = {"_p_gum__GraphicalModel", "gum::GraphicalModel *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__UGmodel = {"_p_gum__UGmodel", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_gum__IApproximationSchemeConfiguration = {"_p_gum__IApproximationSchemeConfiguration", "gum::IApproximationSchemeConfiguration *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__IBayesNetT_double_t = {"_p_gum__IBayesNetT_double_t", "gum::IBayesNet< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__ImportanceSamplingT_double_t = {"_p_gum__ImportanceSamplingT_double_t", "gum::ImportanceSampling< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__Instantiation = {"_p_gum__Instantiation", "gum::Instantiation *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__LazyPropagationT_double_t = {"_p_gum__LazyPropagationT_double_t", "gum::LazyPropagation< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__Listener = {"_p_gum__Listener", "gum::Listener *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__LoopyBeliefPropagationT_double_t = {"_p_gum__LoopyBeliefPropagationT_double_t", "gum::LoopyBeliefPropagation< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__LoopySamplingInferenceT_double_gum__GibbsSampling_t = {"_p_gum__LoopySamplingInferenceT_double_gum__GibbsSampling_t", "gum::LoopySamplingInference< double,gum::GibbsSampling > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__LoopySamplingInferenceT_double_gum__ImportanceSampling_t = {"_p_gum__LoopySamplingInferenceT_double_gum__ImportanceSampling_t", "gum::LoopySamplingInference< double,gum::ImportanceSampling > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__LoopySamplingInferenceT_double_gum__MonteCarloSampling_t = {"_p_gum__LoopySamplingInferenceT_double_gum__MonteCarloSampling_t", "gum::LoopySamplingInference< double,gum::MonteCarloSampling > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__LoopySamplingInferenceT_double_gum__WeightedSampling_t = {"_p_gum__LoopySamplingInferenceT_double_gum__WeightedSampling_t", "gum::LoopySamplingInference< double,gum::WeightedSampling > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__MarkovBlanket = {"_p_gum__MarkovBlanket", "gum::MarkovBlanket *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__MonteCarloSamplingT_double_t = {"_p_gum__MonteCarloSamplingT_double_t", "gum::MonteCarloSampling< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__MultiDimImplementationT_double_t = {"_p_gum__MultiDimImplementationT_double_t", "gum::MultiDimImplementation< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__MultiDimArrayT_double_t = {"_p_gum__MultiDimArrayT_double_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_gum__MultiDimWithOffsetT_double_t = {"_p_gum__MultiDimWithOffsetT_double_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_gum__NodePropertyT_std__size_t_t = {"_p_gum__NodePropertyT_std__size_t_t", "gum::NodeProperty< gum::NodeId > *|gum::NodeProperty< std::size_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__PDAG = {"_p_gum__PDAG", "gum::PDAG *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__ScheduledInference = {"_p_gum__ScheduledInference", "gum::ScheduledInference *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__SequenceT_std__size_t_t = {"_p_gum__SequenceT_std__size_t_t", "gum::Sequence< gum::NodeId > *|gum::Sequence< std::size_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__SetT_gum__Arc_t = {"_p_gum__SetT_gum__Arc_t", "gum::ArcSet *|gum::Set< gum::Arc > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__SetT_gum__Arc_t__const_iterator = {"_p_gum__SetT_gum__Arc_t__const_iterator", "gum::ArcSetIterator *|gum::Set< gum::Arc >::const_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__SetT_gum__DiscreteVariable_const_p_t = {"_p_gum__SetT_gum__DiscreteVariable_const_p_t", "gum::VariableSet *|gum::Set< gum::DiscreteVariable const * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__SetT_gum__Edge_t = {"_p_gum__SetT_gum__Edge_t", "gum::EdgeSet *|gum::Set< gum::Edge > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__SetT_gum__Edge_t__const_iterator = {"_p_gum__SetT_gum__Edge_t__const_iterator", "gum::EdgeSetIterator *|gum::Set< gum::Edge >::const_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__SetT_std__size_t_t = {"_p_gum__SetT_std__size_t_t", "gum::NodeSet *|gum::Set< std::size_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__SetT_std__size_t_t__const_iterator = {"_p_gum__SetT_std__size_t_t__const_iterator", "gum::NodeSetIterator *|gum::Set< std::size_t >::const_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__ShaferShenoyInferenceT_double_t = {"_p_gum__ShaferShenoyInferenceT_double_t", "gum::ShaferShenoyInference< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__ShaferShenoyMRFInferenceT_double_t = {"_p_gum__ShaferShenoyMRFInferenceT_double_t", "gum::ShaferShenoyMRFInference< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__StructuralComparator = {"_p_gum__StructuralComparator", "gum::StructuralComparator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__TensorT_double_t = {"_p_gum__TensorT_double_t", "gum::Tensor< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__ThreadNumberManager = {"_p_gum__ThreadNumberManager", "gum::ThreadNumberManager *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__Triangulation = {"_p_gum__Triangulation", "gum::Triangulation *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__UndiGraph = {"_p_gum__UndiGraph", "gum::UndiGraph *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__VariableEliminationT_double_t = {"_p_gum__VariableEliminationT_double_t", "gum::VariableElimination< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__VariableNodeMap = {"_p_gum__VariableNodeMap", "gum::VariableNodeMap *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__WeightedSamplingT_double_t = {"_p_gum__WeightedSamplingT_double_t", "gum::WeightedSampling< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__learning__BNDatabaseGeneratorT_double_t = {"_p_gum__learning__BNDatabaseGeneratorT_double_t", "gum::learning::BNDatabaseGenerator< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__learning__BNLearnerT_double_t = {"_p_gum__learning__BNLearnerT_double_t", "gum::learning::BNLearner< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__learning__DatabaseTable = {"_p_gum__learning__DatabaseTable", "gum::learning::DatabaseTable *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__learning__IBNLearner = {"_p_gum__learning__IBNLearner", "gum::learning::IBNLearner *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_iterator = {"_p_iterator", "iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_iterator_category = {"_p_iterator_category", "iterator_category *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_iterator_safe = {"_p_iterator_safe", "iterator_safe *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_node_const_iterator = {"_p_node_const_iterator", "node_const_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_node_const_iterator_safe = {"_p_node_const_iterator_safe", "node_const_iterator_safe *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_node_iterator = {"_p_node_iterator", "node_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_node_iterator_safe = {"_p_node_iterator_safe", "node_iterator_safe *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_second_type = {"_p_second_type", "second_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_type = {"_p_size_type", "size_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__invalid_argument = {"_p_std__invalid_argument", "std::invalid_argument *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__size_t = {"_p_std__size_t", "gum::Idx *|gum::NodeId *|gum::Size *|std::size_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__string = {"_p_std__string", "std::string *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_PythonLoadListener_std__allocatorT_PythonLoadListener_t_t = {"_p_std__vectorT_PythonLoadListener_std__allocatorT_PythonLoadListener_t_t", "std::vector< PythonLoadListener,std::allocator< PythonLoadListener > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__size_t_std__allocatorT_std__size_t_t_t = {"_p_std__vectorT_std__size_t_std__allocatorT_std__size_t_t_t", "std::vector< gum::Idx,std::allocator< gum::Idx > > *|std::vector< gum::NodeId,std::allocator< gum::NodeId > > *|std::vector< std::size_t,std::allocator< std::size_t > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__vectorT_std__string_t_std__allocatorT_std__vectorT_std__string_t_t_t = {"_p_std__vectorT_std__vectorT_std__string_t_std__allocatorT_std__vectorT_std__string_t_t_t", "std::vector< std::vector< std::string,std::allocator< std::string > >,std::allocator< std::vector< std::string,std::allocator< std::string > > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_swig__SwigPyIterator = {"_p_swig__SwigPyIterator", "swig::SwigPyIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_value_type = {"_p_value_type", "value_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_void = {"_p_void", "void *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_ArcIterator,
  &_swigt__p_BNGenerator,
  &_swigt__p_EdgeIterator,
  &_swigt__p_Handler,
  &_swigt__p_HandlerSafe,
  &_swigt__p_InformationTheory,
  &_swigt__p_IsMissing,
  &_swigt__p_MissingValType,
  &_swigt__p_NodeConstIterator,
  &_swigt__p_NodeConstIteratorSafe,
  &_swigt__p_NodeIterator,
  &_swigt__p_NodeIteratorSafe,
  &_swigt__p_PRMexplorer,
  &_swigt__p_PythonApproximationListener,
  &_swigt__p_PythonBNListener,
  &_swigt__p_PythonDatabaseGeneratorListener,
  &_swigt__p_PythonLoadListener,
  &_swigt__p_allocator_type,
  &_swigt__p_char,
  &_swigt__p_difference_type,
  &_swigt__p_first_type,
  &_swigt__p_gum__ApproximationScheme,
  &_swigt__p_gum__Arc,
  &_swigt__p_gum__BNdistanceT_double_t,
  &_swigt__p_gum__BayesNetFragmentT_double_t,
  &_swigt__p_gum__BayesNetT_double_t,
  &_swigt__p_gum__CliqueGraph,
  &_swigt__p_gum__DAG,
  &_swigt__p_gum__DAGmodel,
  &_swigt__p_gum__DiGraph,
  &_swigt__p_gum__DiGraphListener,
  &_swigt__p_gum__DiscreteVariable,
  &_swigt__p_gum__DiscretizedVariableT_double_t,
  &_swigt__p_gum__Edge,
  &_swigt__p_gum__EssentialGraph,
  &_swigt__p_gum__ExactBNdistanceT_double_t,
  &_swigt__p_gum__GibbsBNdistanceT_double_t,
  &_swigt__p_gum__GibbsSamplingT_double_t,
  &_swigt__p_gum__GraphicalModel,
  &_swigt__p_gum__IApproximationSchemeConfiguration,
  &_swigt__p_gum__IBayesNetT_double_t,
  &_swigt__p_gum__IDiscretizedVariable,
  &_swigt__p_gum__ImportanceSamplingT_double_t,
  &_swigt__p_gum__Instantiation,
  &_swigt__p_gum__IntegerVariable,
  &_swigt__p_gum__LabelizedVariable,
  &_swigt__p_gum__LazyPropagationT_double_t,
  &_swigt__p_gum__Listener,
  &_swigt__p_gum__LoopyBeliefPropagationT_double_t,
  &_swigt__p_gum__LoopySamplingInferenceT_double_gum__GibbsSampling_t,
  &_swigt__p_gum__LoopySamplingInferenceT_double_gum__ImportanceSampling_t,
  &_swigt__p_gum__LoopySamplingInferenceT_double_gum__MonteCarloSampling_t,
  &_swigt__p_gum__LoopySamplingInferenceT_double_gum__WeightedSampling_t,
  &_swigt__p_gum__MarkovBlanket,
  &_swigt__p_gum__MixedGraph,
  &_swigt__p_gum__MonteCarloSamplingT_double_t,
  &_swigt__p_gum__MultiDimArrayT_double_t,
  &_swigt__p_gum__MultiDimImplementationT_double_t,
  &_swigt__p_gum__MultiDimWithOffsetT_double_t,
  &_swigt__p_gum__NodePropertyT_std__size_t_t,
  &_swigt__p_gum__NumericalDiscreteVariable,
  &_swigt__p_gum__PDAG,
  &_swigt__p_gum__RangeVariable,
  &_swigt__p_gum__ScheduledInference,
  &_swigt__p_gum__SequenceT_std__size_t_t,
  &_swigt__p_gum__SetT_gum__Arc_t,
  &_swigt__p_gum__SetT_gum__Arc_t__const_iterator,
  &_swigt__p_gum__SetT_gum__DiscreteVariable_const_p_t,
  &_swigt__p_gum__SetT_gum__Edge_t,
  &_swigt__p_gum__SetT_gum__Edge_t__const_iterator,
  &_swigt__p_gum__SetT_std__size_t_t,
  &_swigt__p_gum__SetT_std__size_t_t__const_iterator,
  &_swigt__p_gum__ShaferShenoyInferenceT_double_t,
  &_swigt__p_gum__ShaferShenoyMRFInferenceT_double_t,
  &_swigt__p_gum__StructuralComparator,
  &_swigt__p_gum__TensorT_double_t,
  &_swigt__p_gum__ThreadNumberManager,
  &_swigt__p_gum__Triangulation,
  &_swigt__p_gum__UGmodel,
  &_swigt__p_gum__UndiGraph,
  &_swigt__p_gum__VariableEliminationT_double_t,
  &_swigt__p_gum__VariableNodeMap,
  &_swigt__p_gum__WeightedSamplingT_double_t,
  &_swigt__p_gum__learning__BNDatabaseGeneratorT_double_t,
  &_swigt__p_gum__learning__BNLearnerT_double_t,
  &_swigt__p_gum__learning__DatabaseTable,
  &_swigt__p_gum__learning__IBNLearner,
  &_swigt__p_iterator,
  &_swigt__p_iterator_category,
  &_swigt__p_iterator_safe,
  &_swigt__p_node_const_iterator,
  &_swigt__p_node_const_iterator_safe,
  &_swigt__p_node_iterator,
  &_swigt__p_node_iterator_safe,
  &_swigt__p_second_type,
  &_swigt__p_size_type,
  &_swigt__p_std__invalid_argument,
  &_swigt__p_std__size_t,
  &_swigt__p_std__string,
  &_swigt__p_std__vectorT_PythonLoadListener_std__allocatorT_PythonLoadListener_t_t,
  &_swigt__p_std__vectorT_std__size_t_std__allocatorT_std__size_t_t_t,
  &_swigt__p_std__vectorT_std__vectorT_std__string_t_std__allocatorT_std__vectorT_std__string_t_t_t,
  &_swigt__p_swig__SwigPyIterator,
  &_swigt__p_value_type,
  &_swigt__p_void,
};

static swig_cast_info _swigc__p_ArcIterator[] = {  {&_swigt__p_ArcIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BNGenerator[] = {  {&_swigt__p_BNGenerator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_EdgeIterator[] = {  {&_swigt__p_EdgeIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Handler[] = {  {&_swigt__p_Handler, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HandlerSafe[] = {  {&_swigt__p_HandlerSafe, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_InformationTheory[] = {  {&_swigt__p_InformationTheory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IsMissing[] = {  {&_swigt__p_IsMissing, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MissingValType[] = {  {&_swigt__p_MissingValType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NodeConstIterator[] = {  {&_swigt__p_NodeConstIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NodeConstIteratorSafe[] = {  {&_swigt__p_NodeConstIteratorSafe, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NodeIterator[] = {  {&_swigt__p_NodeIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NodeIteratorSafe[] = {  {&_swigt__p_NodeIteratorSafe, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PRMexplorer[] = {  {&_swigt__p_PRMexplorer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PythonApproximationListener[] = {  {&_swigt__p_PythonApproximationListener, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PythonBNListener[] = {  {&_swigt__p_PythonBNListener, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PythonDatabaseGeneratorListener[] = {  {&_swigt__p_PythonDatabaseGeneratorListener, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PythonLoadListener[] = {  {&_swigt__p_PythonLoadListener, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_allocator_type[] = {  {&_swigt__p_allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_difference_type[] = {  {&_swigt__p_difference_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_first_type[] = {  {&_swigt__p_first_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__ApproximationScheme[] = {  {&_swigt__p_gum__ApproximationScheme, 0, 0, 0},  {&_swigt__p_gum__GibbsBNdistanceT_double_t, _p_gum__GibbsBNdistanceT_double_tTo_p_gum__ApproximationScheme, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__Arc[] = {  {&_swigt__p_gum__Arc, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__BNdistanceT_double_t[] = {  {&_swigt__p_gum__BNdistanceT_double_t, 0, 0, 0},  {&_swigt__p_gum__ExactBNdistanceT_double_t, _p_gum__ExactBNdistanceT_double_tTo_p_gum__BNdistanceT_double_t, 0, 0},  {&_swigt__p_gum__GibbsBNdistanceT_double_t, _p_gum__GibbsBNdistanceT_double_tTo_p_gum__BNdistanceT_double_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__BayesNetFragmentT_double_t[] = {  {&_swigt__p_gum__BayesNetFragmentT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__BayesNetT_double_t[] = {  {&_swigt__p_gum__BayesNetT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__CliqueGraph[] = {  {&_swigt__p_gum__CliqueGraph, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__DAG[] = {  {&_swigt__p_gum__DAG, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__DAGmodel[] = {  {&_swigt__p_gum__DAGmodel, 0, 0, 0},  {&_swigt__p_gum__BayesNetFragmentT_double_t, _p_gum__BayesNetFragmentT_double_tTo_p_gum__DAGmodel, 0, 0},  {&_swigt__p_gum__BayesNetT_double_t, _p_gum__BayesNetT_double_tTo_p_gum__DAGmodel, 0, 0},  {&_swigt__p_gum__IBayesNetT_double_t, _p_gum__IBayesNetT_double_tTo_p_gum__DAGmodel, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__MixedGraph[] = {{&_swigt__p_gum__MixedGraph, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__DiGraph[] = {  {&_swigt__p_gum__DiGraph, 0, 0, 0},  {&_swigt__p_gum__DAG, _p_gum__DAGTo_p_gum__DiGraph, 0, 0},  {&_swigt__p_gum__MixedGraph, _p_gum__MixedGraphTo_p_gum__DiGraph, 0, 0},  {&_swigt__p_gum__PDAG, _p_gum__PDAGTo_p_gum__DiGraph, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__DiGraphListener[] = {  {&_swigt__p_gum__DiGraphListener, 0, 0, 0},  {&_swigt__p_PythonBNListener, _p_PythonBNListenerTo_p_gum__DiGraphListener, 0, 0},  {&_swigt__p_gum__BayesNetFragmentT_double_t, _p_gum__BayesNetFragmentT_double_tTo_p_gum__DiGraphListener, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__DiscretizedVariableT_double_t[] = {{&_swigt__p_gum__DiscretizedVariableT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__IDiscretizedVariable[] = {{&_swigt__p_gum__IDiscretizedVariable, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__IntegerVariable[] = {{&_swigt__p_gum__IntegerVariable, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__LabelizedVariable[] = {{&_swigt__p_gum__LabelizedVariable, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__NumericalDiscreteVariable[] = {{&_swigt__p_gum__NumericalDiscreteVariable, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__RangeVariable[] = {{&_swigt__p_gum__RangeVariable, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__DiscreteVariable[] = {  {&_swigt__p_gum__DiscreteVariable, 0, 0, 0},  {&_swigt__p_gum__DiscretizedVariableT_double_t, _p_gum__DiscretizedVariableT_double_tTo_p_gum__DiscreteVariable, 0, 0},  {&_swigt__p_gum__IDiscretizedVariable, _p_gum__IDiscretizedVariableTo_p_gum__DiscreteVariable, 0, 0},  {&_swigt__p_gum__IntegerVariable, _p_gum__IntegerVariableTo_p_gum__DiscreteVariable, 0, 0},  {&_swigt__p_gum__LabelizedVariable, _p_gum__LabelizedVariableTo_p_gum__DiscreteVariable, 0, 0},  {&_swigt__p_gum__NumericalDiscreteVariable, _p_gum__NumericalDiscreteVariableTo_p_gum__DiscreteVariable, 0, 0},  {&_swigt__p_gum__RangeVariable, _p_gum__RangeVariableTo_p_gum__DiscreteVariable, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__Edge[] = {  {&_swigt__p_gum__Edge, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__EssentialGraph[] = {  {&_swigt__p_gum__EssentialGraph, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__ExactBNdistanceT_double_t[] = {  {&_swigt__p_gum__ExactBNdistanceT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__GibbsBNdistanceT_double_t[] = {  {&_swigt__p_gum__GibbsBNdistanceT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__GibbsSamplingT_double_t[] = {  {&_swigt__p_gum__GibbsSamplingT_double_t, 0, 0, 0},  {&_swigt__p_gum__LoopySamplingInferenceT_double_gum__GibbsSampling_t, _p_gum__LoopySamplingInferenceT_double_gum__GibbsSampling_tTo_p_gum__GibbsSamplingT_double_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__UGmodel[] = {{&_swigt__p_gum__UGmodel, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__GraphicalModel[] = {  {&_swigt__p_gum__GraphicalModel, 0, 0, 0},  {&_swigt__p_gum__BayesNetFragmentT_double_t, _p_gum__BayesNetFragmentT_double_tTo_p_gum__GraphicalModel, 0, 0},  {&_swigt__p_gum__BayesNetT_double_t, _p_gum__BayesNetT_double_tTo_p_gum__GraphicalModel, 0, 0},  {&_swigt__p_gum__DAGmodel, _p_gum__DAGmodelTo_p_gum__GraphicalModel, 0, 0},  {&_swigt__p_gum__IBayesNetT_double_t, _p_gum__IBayesNetT_double_tTo_p_gum__GraphicalModel, 0, 0},  {&_swigt__p_gum__UGmodel, _p_gum__UGmodelTo_p_gum__GraphicalModel, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__IApproximationSchemeConfiguration[] = {  {&_swigt__p_gum__IApproximationSchemeConfiguration, 0, 0, 0},  {&_swigt__p_gum__ApproximationScheme, _p_gum__ApproximationSchemeTo_p_gum__IApproximationSchemeConfiguration, 0, 0},  {&_swigt__p_gum__GibbsBNdistanceT_double_t, _p_gum__GibbsBNdistanceT_double_tTo_p_gum__IApproximationSchemeConfiguration, 0, 0},  {&_swigt__p_gum__learning__BNLearnerT_double_t, _p_gum__learning__BNLearnerT_double_tTo_p_gum__IApproximationSchemeConfiguration, 0, 0},  {&_swigt__p_gum__learning__IBNLearner, _p_gum__learning__IBNLearnerTo_p_gum__IApproximationSchemeConfiguration, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__IBayesNetT_double_t[] = {  {&_swigt__p_gum__IBayesNetT_double_t, 0, 0, 0},  {&_swigt__p_gum__BayesNetFragmentT_double_t, _p_gum__BayesNetFragmentT_double_tTo_p_gum__IBayesNetT_double_t, 0, 0},  {&_swigt__p_gum__BayesNetT_double_t, _p_gum__BayesNetT_double_tTo_p_gum__IBayesNetT_double_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__ImportanceSamplingT_double_t[] = {  {&_swigt__p_gum__ImportanceSamplingT_double_t, 0, 0, 0},  {&_swigt__p_gum__LoopySamplingInferenceT_double_gum__ImportanceSampling_t, _p_gum__LoopySamplingInferenceT_double_gum__ImportanceSampling_tTo_p_gum__ImportanceSamplingT_double_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__Instantiation[] = {  {&_swigt__p_gum__Instantiation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__LazyPropagationT_double_t[] = {  {&_swigt__p_gum__LazyPropagationT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__Listener[] = {  {&_swigt__p_gum__Listener, 0, 0, 0},  {&_swigt__p_PythonBNListener, _p_PythonBNListenerTo_p_gum__Listener, 0, 0},  {&_swigt__p_PythonLoadListener, _p_PythonLoadListenerTo_p_gum__Listener, 0, 0},  {&_swigt__p_gum__BayesNetFragmentT_double_t, _p_gum__BayesNetFragmentT_double_tTo_p_gum__Listener, 0, 0},  {&_swigt__p_gum__DiGraphListener, _p_gum__DiGraphListenerTo_p_gum__Listener, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__LoopyBeliefPropagationT_double_t[] = {  {&_swigt__p_gum__LoopyBeliefPropagationT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__LoopySamplingInferenceT_double_gum__GibbsSampling_t[] = {  {&_swigt__p_gum__LoopySamplingInferenceT_double_gum__GibbsSampling_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__LoopySamplingInferenceT_double_gum__ImportanceSampling_t[] = {  {&_swigt__p_gum__LoopySamplingInferenceT_double_gum__ImportanceSampling_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__LoopySamplingInferenceT_double_gum__MonteCarloSampling_t[] = {  {&_swigt__p_gum__LoopySamplingInferenceT_double_gum__MonteCarloSampling_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__LoopySamplingInferenceT_double_gum__WeightedSampling_t[] = {  {&_swigt__p_gum__LoopySamplingInferenceT_double_gum__WeightedSampling_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__MarkovBlanket[] = {  {&_swigt__p_gum__MarkovBlanket, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__MonteCarloSamplingT_double_t[] = {  {&_swigt__p_gum__MonteCarloSamplingT_double_t, 0, 0, 0},  {&_swigt__p_gum__LoopySamplingInferenceT_double_gum__MonteCarloSampling_t, _p_gum__LoopySamplingInferenceT_double_gum__MonteCarloSampling_tTo_p_gum__MonteCarloSamplingT_double_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__MultiDimArrayT_double_t[] = {{&_swigt__p_gum__MultiDimArrayT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__MultiDimWithOffsetT_double_t[] = {{&_swigt__p_gum__MultiDimWithOffsetT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__MultiDimImplementationT_double_t[] = {  {&_swigt__p_gum__MultiDimImplementationT_double_t, 0, 0, 0},  {&_swigt__p_gum__MultiDimArrayT_double_t, _p_gum__MultiDimArrayT_double_tTo_p_gum__MultiDimImplementationT_double_t, 0, 0},  {&_swigt__p_gum__MultiDimWithOffsetT_double_t, _p_gum__MultiDimWithOffsetT_double_tTo_p_gum__MultiDimImplementationT_double_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__NodePropertyT_std__size_t_t[] = {  {&_swigt__p_gum__NodePropertyT_std__size_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__PDAG[] = {  {&_swigt__p_gum__PDAG, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__ScheduledInference[] = {  {&_swigt__p_gum__ScheduledInference, 0, 0, 0},  {&_swigt__p_gum__LazyPropagationT_double_t, _p_gum__LazyPropagationT_double_tTo_p_gum__ScheduledInference, 0, 0},  {&_swigt__p_gum__ShaferShenoyInferenceT_double_t, _p_gum__ShaferShenoyInferenceT_double_tTo_p_gum__ScheduledInference, 0, 0},  {&_swigt__p_gum__VariableEliminationT_double_t, _p_gum__VariableEliminationT_double_tTo_p_gum__ScheduledInference, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__SequenceT_std__size_t_t[] = {  {&_swigt__p_gum__SequenceT_std__size_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__SetT_gum__Arc_t[] = {  {&_swigt__p_gum__SetT_gum__Arc_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__SetT_gum__Arc_t__const_iterator[] = {  {&_swigt__p_gum__SetT_gum__Arc_t__const_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__SetT_gum__DiscreteVariable_const_p_t[] = {  {&_swigt__p_gum__SetT_gum__DiscreteVariable_const_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__SetT_gum__Edge_t[] = {  {&_swigt__p_gum__SetT_gum__Edge_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__SetT_gum__Edge_t__const_iterator[] = {  {&_swigt__p_gum__SetT_gum__Edge_t__const_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__SetT_std__size_t_t[] = {  {&_swigt__p_gum__SetT_std__size_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__SetT_std__size_t_t__const_iterator[] = {  {&_swigt__p_gum__SetT_std__size_t_t__const_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__ShaferShenoyInferenceT_double_t[] = {  {&_swigt__p_gum__ShaferShenoyInferenceT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__ShaferShenoyMRFInferenceT_double_t[] = {  {&_swigt__p_gum__ShaferShenoyMRFInferenceT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__StructuralComparator[] = {  {&_swigt__p_gum__StructuralComparator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__TensorT_double_t[] = {  {&_swigt__p_gum__TensorT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__ThreadNumberManager[] = {  {&_swigt__p_gum__ThreadNumberManager, 0, 0, 0},  {&_swigt__p_gum__LazyPropagationT_double_t, _p_gum__LazyPropagationT_double_tTo_p_gum__ThreadNumberManager, 0, 0},  {&_swigt__p_gum__ScheduledInference, _p_gum__ScheduledInferenceTo_p_gum__ThreadNumberManager, 0, 0},  {&_swigt__p_gum__ShaferShenoyInferenceT_double_t, _p_gum__ShaferShenoyInferenceT_double_tTo_p_gum__ThreadNumberManager, 0, 0},  {&_swigt__p_gum__VariableEliminationT_double_t, _p_gum__VariableEliminationT_double_tTo_p_gum__ThreadNumberManager, 0, 0},  {&_swigt__p_gum__learning__BNLearnerT_double_t, _p_gum__learning__BNLearnerT_double_tTo_p_gum__ThreadNumberManager, 0, 0},  {&_swigt__p_gum__learning__IBNLearner, _p_gum__learning__IBNLearnerTo_p_gum__ThreadNumberManager, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__Triangulation[] = {  {&_swigt__p_gum__Triangulation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__UndiGraph[] = {  {&_swigt__p_gum__UndiGraph, 0, 0, 0},  {&_swigt__p_gum__CliqueGraph, _p_gum__CliqueGraphTo_p_gum__UndiGraph, 0, 0},  {&_swigt__p_gum__MixedGraph, _p_gum__MixedGraphTo_p_gum__UndiGraph, 0, 0},  {&_swigt__p_gum__PDAG, _p_gum__PDAGTo_p_gum__UndiGraph, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__VariableEliminationT_double_t[] = {  {&_swigt__p_gum__VariableEliminationT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__VariableNodeMap[] = {  {&_swigt__p_gum__VariableNodeMap, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__WeightedSamplingT_double_t[] = {  {&_swigt__p_gum__WeightedSamplingT_double_t, 0, 0, 0},  {&_swigt__p_gum__LoopySamplingInferenceT_double_gum__WeightedSampling_t, _p_gum__LoopySamplingInferenceT_double_gum__WeightedSampling_tTo_p_gum__WeightedSamplingT_double_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__learning__BNDatabaseGeneratorT_double_t[] = {  {&_swigt__p_gum__learning__BNDatabaseGeneratorT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__learning__BNLearnerT_double_t[] = {  {&_swigt__p_gum__learning__BNLearnerT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__learning__DatabaseTable[] = {  {&_swigt__p_gum__learning__DatabaseTable, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__learning__IBNLearner[] = {  {&_swigt__p_gum__learning__IBNLearner, 0, 0, 0},  {&_swigt__p_gum__learning__BNLearnerT_double_t, _p_gum__learning__BNLearnerT_double_tTo_p_gum__learning__IBNLearner, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iterator[] = {  {&_swigt__p_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iterator_category[] = {  {&_swigt__p_iterator_category, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iterator_safe[] = {  {&_swigt__p_iterator_safe, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_node_const_iterator[] = {  {&_swigt__p_node_const_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_node_const_iterator_safe[] = {  {&_swigt__p_node_const_iterator_safe, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_node_iterator[] = {  {&_swigt__p_node_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_node_iterator_safe[] = {  {&_swigt__p_node_iterator_safe, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_second_type[] = {  {&_swigt__p_second_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_type[] = {  {&_swigt__p_size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__invalid_argument[] = {  {&_swigt__p_std__invalid_argument, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__size_t[] = {  {&_swigt__p_std__size_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string[] = {  {&_swigt__p_std__string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_PythonLoadListener_std__allocatorT_PythonLoadListener_t_t[] = {  {&_swigt__p_std__vectorT_PythonLoadListener_std__allocatorT_PythonLoadListener_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__size_t_std__allocatorT_std__size_t_t_t[] = {  {&_swigt__p_std__vectorT_std__size_t_std__allocatorT_std__size_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__vectorT_std__string_t_std__allocatorT_std__vectorT_std__string_t_t_t[] = {  {&_swigt__p_std__vectorT_std__vectorT_std__string_t_std__allocatorT_std__vectorT_std__string_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_swig__SwigPyIterator[] = {  {&_swigt__p_swig__SwigPyIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_value_type[] = {  {&_swigt__p_value_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_void[] = {  {&_swigt__p_void, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_ArcIterator,
  _swigc__p_BNGenerator,
  _swigc__p_EdgeIterator,
  _swigc__p_Handler,
  _swigc__p_HandlerSafe,
  _swigc__p_InformationTheory,
  _swigc__p_IsMissing,
  _swigc__p_MissingValType,
  _swigc__p_NodeConstIterator,
  _swigc__p_NodeConstIteratorSafe,
  _swigc__p_NodeIterator,
  _swigc__p_NodeIteratorSafe,
  _swigc__p_PRMexplorer,
  _swigc__p_PythonApproximationListener,
  _swigc__p_PythonBNListener,
  _swigc__p_PythonDatabaseGeneratorListener,
  _swigc__p_PythonLoadListener,
  _swigc__p_allocator_type,
  _swigc__p_char,
  _swigc__p_difference_type,
  _swigc__p_first_type,
  _swigc__p_gum__ApproximationScheme,
  _swigc__p_gum__Arc,
  _swigc__p_gum__BNdistanceT_double_t,
  _swigc__p_gum__BayesNetFragmentT_double_t,
  _swigc__p_gum__BayesNetT_double_t,
  _swigc__p_gum__CliqueGraph,
  _swigc__p_gum__DAG,
  _swigc__p_gum__DAGmodel,
  _swigc__p_gum__DiGraph,
  _swigc__p_gum__DiGraphListener,
  _swigc__p_gum__DiscreteVariable,
  _swigc__p_gum__DiscretizedVariableT_double_t,
  _swigc__p_gum__Edge,
  _swigc__p_gum__EssentialGraph,
  _swigc__p_gum__ExactBNdistanceT_double_t,
  _swigc__p_gum__GibbsBNdistanceT_double_t,
  _swigc__p_gum__GibbsSamplingT_double_t,
  _swigc__p_gum__GraphicalModel,
  _swigc__p_gum__IApproximationSchemeConfiguration,
  _swigc__p_gum__IBayesNetT_double_t,
  _swigc__p_gum__IDiscretizedVariable,
  _swigc__p_gum__ImportanceSamplingT_double_t,
  _swigc__p_gum__Instantiation,
  _swigc__p_gum__IntegerVariable,
  _swigc__p_gum__LabelizedVariable,
  _swigc__p_gum__LazyPropagationT_double_t,
  _swigc__p_gum__Listener,
  _swigc__p_gum__LoopyBeliefPropagationT_double_t,
  _swigc__p_gum__LoopySamplingInferenceT_double_gum__GibbsSampling_t,
  _swigc__p_gum__LoopySamplingInferenceT_double_gum__ImportanceSampling_t,
  _swigc__p_gum__LoopySamplingInferenceT_double_gum__MonteCarloSampling_t,
  _swigc__p_gum__LoopySamplingInferenceT_double_gum__WeightedSampling_t,
  _swigc__p_gum__MarkovBlanket,
  _swigc__p_gum__MixedGraph,
  _swigc__p_gum__MonteCarloSamplingT_double_t,
  _swigc__p_gum__MultiDimArrayT_double_t,
  _swigc__p_gum__MultiDimImplementationT_double_t,
  _swigc__p_gum__MultiDimWithOffsetT_double_t,
  _swigc__p_gum__NodePropertyT_std__size_t_t,
  _swigc__p_gum__NumericalDiscreteVariable,
  _swigc__p_gum__PDAG,
  _swigc__p_gum__RangeVariable,
  _swigc__p_gum__ScheduledInference,
  _swigc__p_gum__SequenceT_std__size_t_t,
  _swigc__p_gum__SetT_gum__Arc_t,
  _swigc__p_gum__SetT_gum__Arc_t__const_iterator,
  _swigc__p_gum__SetT_gum__DiscreteVariable_const_p_t,
  _swigc__p_gum__SetT_gum__Edge_t,
  _swigc__p_gum__SetT_gum__Edge_t__const_iterator,
  _swigc__p_gum__SetT_std__size_t_t,
  _swigc__p_gum__SetT_std__size_t_t__const_iterator,
  _swigc__p_gum__ShaferShenoyInferenceT_double_t,
  _swigc__p_gum__ShaferShenoyMRFInferenceT_double_t,
  _swigc__p_gum__StructuralComparator,
  _swigc__p_gum__TensorT_double_t,
  _swigc__p_gum__ThreadNumberManager,
  _swigc__p_gum__Triangulation,
  _swigc__p_gum__UGmodel,
  _swigc__p_gum__UndiGraph,
  _swigc__p_gum__VariableEliminationT_double_t,
  _swigc__p_gum__VariableNodeMap,
  _swigc__p_gum__WeightedSamplingT_double_t,
  _swigc__p_gum__learning__BNDatabaseGeneratorT_double_t,
  _swigc__p_gum__learning__BNLearnerT_double_t,
  _swigc__p_gum__learning__DatabaseTable,
  _swigc__p_gum__learning__IBNLearner,
  _swigc__p_iterator,
  _swigc__p_iterator_category,
  _swigc__p_iterator_safe,
  _swigc__p_node_const_iterator,
  _swigc__p_node_const_iterator_safe,
  _swigc__p_node_iterator,
  _swigc__p_node_iterator_safe,
  _swigc__p_second_type,
  _swigc__p_size_type,
  _swigc__p_std__invalid_argument,
  _swigc__p_std__size_t,
  _swigc__p_std__string,
  _swigc__p_std__vectorT_PythonLoadListener_std__allocatorT_PythonLoadListener_t_t,
  _swigc__p_std__vectorT_std__size_t_std__allocatorT_std__size_t_t_t,
  _swigc__p_std__vectorT_std__vectorT_std__string_t_std__allocatorT_std__vectorT_std__string_t_t_t,
  _swigc__p_swig__SwigPyIterator,
  _swigc__p_value_type,
  _swigc__p_void,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{0, 0, 0, 0.0, 0, 0}};

#ifdef __cplusplus
}
#endif
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif

#ifndef SWIG_INIT_CLIENT_DATA_TYPE
#define SWIG_INIT_CLIENT_DATA_TYPE void *
#endif

SWIGRUNTIME void
SWIG_InitializeModule(SWIG_INIT_CLIENT_DATA_TYPE clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;
  
  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);
    
    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }
  
  /* When multiple interpreters are used, a module could have already been initialized in
       a different interpreter, but not yet have a pointer in this interpreter.
       In this case, we do not want to continue adding types... everything should be
       set up already */
  if (init == 0) return;
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %lu\n", (unsigned long)swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif



#ifdef __cplusplus
extern "C" {
#endif
  
  /* -----------------------------------------------------------------------------
   * constants/methods manipulation
   * ----------------------------------------------------------------------------- */
  
  /* Install Constants */
  SWIGINTERN void
  SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
    PyObject *obj = 0;
    size_t i;
    for (i = 0; constants[i].type; ++i) {
      switch(constants[i].type) {
      case SWIG_PY_POINTER:
        obj = SWIG_InternalNewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
        break;
      case SWIG_PY_BINARY:
        obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
        break;
      default:
        obj = 0;
        break;
      }
      if (obj) {
        PyDict_SetItemString(d, constants[i].name, obj);
        SWIG_Py_DECREF(obj);
      }
    }
  }
  
  /* -----------------------------------------------------------------------------
   * Patch %callback methods' docstrings to hold the callback ptrs
   * -----------------------------------------------------------------------------*/
  
  SWIGINTERN void
  SWIG_Python_FixMethods(PyMethodDef *methods, const swig_const_info *const_table, swig_type_info **types, swig_type_info **types_initial) {
    size_t i;
    for (i = 0; methods[i].ml_name; ++i) {
      const char *c = methods[i].ml_doc;
      if (!c) continue;
      c = strstr(c, "swig_ptr: ");
      if (c) {
        int j;
        const swig_const_info *ci = 0;
        const char *name = c + 10;
        for (j = 0; const_table[j].type; ++j) {
          if (strncmp(const_table[j].name, name, 
              strlen(const_table[j].name)) == 0) {
            ci = &(const_table[j]);
            break;
          }
        }
        if (ci) {
          void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue : 0;
          if (ptr) {
            size_t shift = (ci->ptype) - types;
            swig_type_info *ty = types_initial[shift];
            size_t ldoc = (c - methods[i].ml_doc);
            size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
            char *ndoc = (char*)malloc(ldoc + lptr + 10);
            if (ndoc) {
              char *buff = ndoc;
              memcpy(buff, methods[i].ml_doc, ldoc);
              buff += ldoc;
              memcpy(buff, "swig_ptr: ", 10);
              buff += 10;
              SWIG_PackVoidPtr(buff, ptr, ty->name, lptr);
              methods[i].ml_doc = ndoc;
            }
          }
        }
      }
    }
  } 
  
#ifdef __cplusplus
}
#endif




/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

#ifdef __cplusplus
extern "C"
#endif

SWIGEXPORT 
#if PY_VERSION_HEX >= 0x03000000
PyObject*
#else
void
#endif
SWIG_init(void) {
  PyObject *m, *d, *md, *globals;
  
#if PY_VERSION_HEX >= 0x03000000
  static struct PyModuleDef SWIG_module = {
    PyModuleDef_HEAD_INIT,
    SWIG_name,
    NULL,
    -1,
    SwigMethods,
    NULL,
    NULL,
    NULL,
    NULL
  };
#endif
  
#if defined(SWIGPYTHON_BUILTIN)
  static SwigPyClientData SwigPyObject_clientdata = {
    0, 0, 0, 0, 0, 0, 0
  };
  static PyGetSetDef this_getset_def = {
    (char *)"this", &SwigPyBuiltin_ThisClosure, NULL, NULL, NULL
  };
  static SwigPyGetSet thisown_getset_closure = {
    SwigPyObject_own,
    SwigPyObject_own
  };
  static PyGetSetDef thisown_getset_def = {
    (char *)"thisown", SwigPyBuiltin_GetterClosure, SwigPyBuiltin_SetterClosure, NULL, &thisown_getset_closure
  };
  PyTypeObject *builtin_pytype;
  int builtin_base_count;
  swig_type_info *builtin_basetype;
  PyObject *tuple;
  PyGetSetDescrObject *static_getset;
  PyTypeObject *metatype;
  PyTypeObject *swigpyobject;
  SwigPyClientData *cd;
  PyObject *public_interface, *public_symbol;
  PyObject *this_descr;
  PyObject *thisown_descr;
  PyObject *self = 0;
  int i;
  
  (void)builtin_pytype;
  (void)builtin_base_count;
  (void)builtin_basetype;
  (void)tuple;
  (void)static_getset;
  (void)self;
  
  /* Metaclass is used to implement static member variables */
  metatype = SwigPyObjectType();
  assert(metatype);
#endif
  
  (void)globals;
  
  /* Create singletons now to avoid potential deadlocks with multi-threaded usage after module initialization */
  SWIG_This();
  SWIG_Python_TypeCache();
  SwigPyPacked_type();
#ifndef SWIGPYTHON_BUILTIN
  SwigPyObject_type();
#endif
  
  /* Fix SwigMethods to carry the callback ptrs when needed */
  SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_type_initial);
  
#if PY_VERSION_HEX >= 0x03000000
  m = PyModule_Create(&SWIG_module);
#else
  m = Py_InitModule(SWIG_name, SwigMethods);
#endif
  
  md = d = PyModule_GetDict(m);
  (void)md;
  
  SWIG_InitializeModule(0);
  
#ifdef SWIGPYTHON_BUILTIN
  swigpyobject = SwigPyObject_TypeOnce();
  
  SwigPyObject_stype = SWIG_MangledTypeQuery("_p_SwigPyObject");
  assert(SwigPyObject_stype);
  cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
  if (!cd) {
    SwigPyObject_stype->clientdata = &SwigPyObject_clientdata;
    SwigPyObject_clientdata.pytype = swigpyobject;
  } else if (swigpyobject->tp_basicsize != cd->pytype->tp_basicsize) {
    PyErr_SetString(PyExc_RuntimeError, "Import error: attempted to load two incompatible swig-generated modules.");
# if PY_VERSION_HEX >= 0x03000000
    return NULL;
# else
    return;
# endif
  }
  
  /* All objects have a 'this' attribute */
  this_descr = PyDescr_NewGetSet(SwigPyObject_type(), &this_getset_def);
  (void)this_descr;
  
  /* All objects have a 'thisown' attribute */
  thisown_descr = PyDescr_NewGetSet(SwigPyObject_type(), &thisown_getset_def);
  (void)thisown_descr;
  
  public_interface = PyList_New(0);
  public_symbol = 0;
  (void)public_symbol;
  
  PyDict_SetItemString(md, "__all__", public_interface);
  SWIG_Py_DECREF(public_interface);
  for (i = 0; SwigMethods[i].ml_name != NULL; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, SwigMethods[i].ml_name);
  for (i = 0; swig_const_table[i].name != 0; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, swig_const_table[i].name);
#endif
  
  SWIG_InstallConstants(d,swig_const_table);
  
  SWIG_Python_SetConstant(d, "FindBarrenNodesType_FIND_NO_BARREN_NODES",SWIG_From_int(static_cast< int >(gum::FindBarrenNodesType::FIND_NO_BARREN_NODES)));
  SWIG_Python_SetConstant(d, "FindBarrenNodesType_FIND_BARREN_NODES",SWIG_From_int(static_cast< int >(gum::FindBarrenNodesType::FIND_BARREN_NODES)));
#if PY_VERSION_HEX >= 0x03000000
  return m;
#else
  return;
#endif
}

