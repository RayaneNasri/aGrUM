/**
 *
 *  Copyright 2005-2022 Pierre-Henri WUILLEMIN (@LIP6) and Christophe GONZALES (@AMU)
 *   {prenom.nom}_at_lip6.fr
 *
 *  This library is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this library.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

%define DOCSTRING
"pyAgrum is a scientific C++ and Python library dedicated to Bayesian Networks and other Probabilistic Graphical Models.  It provides a high-level interface to the part of the C++ aGrUM library allowing to create, model, learn, use, calculate with and embed Bayesian Networks and other graphical models. Some specific (python and C++) codes are added in order to simplify and extend the aGrUM API. The module is mainly generated by the SWIG interface generator."
%enddef

%module(docstring=DOCSTRING, directors="1") pyAgrum
%include "docs.i"


// 317 : Specialization of non-template
// 320 : Explicit template instantiation ignored.
// 325 : Nested class not currently supported (Database ignored)
// 327 : extern template effectively ignored
// 401 : not wrapped class
// 503 : DAG is not a correct name (still correctly wrapped ... ???)
// 509 : Overloaded method effectively ignore
#pragma SWIG nowarn=317,320,325,327,401,503,509

%feature("python:annotations", "c");  // Turn on function annotations and variable annotations globally
%feature("python:annotations:novar"); // Turn off variable annotations globally

%begin %{
#include <cmath>
%}

%include "std_vector.i"
%include "std_string.i"

%{
#define SWIG_FILE_WITH_INIT

#include "extensions/helpers.h"
%}

%pythoncode %{
  import numpy
  import warnings
  from numbers import Number
%}

//////////////////////////////////////////////////////////////////
/* declaration of code modifiers for 'pythonification' of aGrUM */
//////////////////////////////////////////////////////////////////
%include "exceptions.i"
%include "pythonize.i"

%include "gum_typemaps.i"

//////////////////////////////////////////////////////////////////
/* declaration of code enhancers for pyAgrum */
//////////////////////////////////////////////////////////////////
%include "pgm.i"

%include "core.i"
%include "variables.i"
%include "instantiation.i"

%include "potential.i"

%include "graphs.i"

%include "pylisteners.i"

%include "bayesnet.i"
%include "inference.i"
%include "learning.i"
%include "bndistance.i"
%include "BNDatabaseGenerator.i"

%include "markovnet.i"
%include "MNinference.i"

%include "credalnet.i"
%include "CNinference.i"

%include "influenceDiagram.i"
%include "influenceDiagramInference.i"

%include "prm.i"


//////////////////////////////////////////////////////////////////
/* extraction of the API for all wrappers */
//////////////////////////////////////////////////////////////////
%include "aGrUM_wrap.i"
