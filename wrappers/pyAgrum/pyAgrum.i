%define DOCSTRING
"pyAgrum is a Python wrapper for the C++ aGrUM library. It provides a high-level
interface to the part of agrum allowing to create, handle and make computations
into Bayesian Networks. The module is mainly generated by the SWIG
interface generator."
%enddef
%module(docstring=DOCSTRING, directors="1") pyAgrum
%feature("autodoc", "0");
%include "docs.i"

//317 : Specialization of non-template
//320 : Explicit template instantiation ignored.
//325 : Nested class not currently supported (Database ignored)
#pragma SWIG nowarn=320,317,325

//#pragma SWIG nowarn=341,342 // The 'using' keyword in type aliasing is not fully supported yet.


%begin %{
#include <cmath>
%}

%include "std_vector.i"
%include "std_string.i"

%{
#define SWIG_FILE_WITH_INIT

#include "extensions/helpers.h"
%}

%pythoncode %{
  import numpy
%}

//////////////////////////////////////////////////////////////////
/* declaration of code modifiers for 'pythonification' of aGrUM */
//////////////////////////////////////////////////////////////////
%include "exceptions.i"
%include "pythonize.i"



//////////////////////////////////////////////////////////////////
/* declaration of code enhancers for pyAgrum */
//////////////////////////////////////////////////////////////////
%include "core.i"
%include "variables.i"
%include "instantiation.i"

%include "potential.i"

%include "graphs.i"

%include "pylisteners.i"

%include "bayesnet.i"
%include "inference.i"
%include "learning.i"
%include "kl.i"

%include "credalnet.i"

%include "influenceDiagram.i"
%include "influenceDiagramInference.i"

%include "prm.i"


//////////////////////////////////////////////////////////////////
/* extraction of the API for all wrappers */
//////////////////////////////////////////////////////////////////
%include "aGrUM_wrap.i"

%pythoncode %{
class Potential(Potential_double):
    pass

randomDistribution = randomDistribution_double

class SimpleBayesNet(IBayesNet_double):
    pass
class BayesNet(BayesNet_double):
    pass

class LazyPropagation(LazyPropagation_double):
    pass
class ShaferShenoyInference(ShaferShenoyInference_double):
    pass
class VariableElimination(VariableElimination_double):
    pass

class GibbsSampling(GibbsSampling_double):
    pass
class ImportanceSampling(ImportanceSampling_double):
    pass
class WeightedSampling(WeightedSampling_double):
    pass
class MonteCarloSampling(MonteCarloSampling_double):
    pass
class LoopyImportanceSampling(LoopyImportanceSampling_double):
    pass
class  LoopyGibbsSampling(LoopyGibbsSampling_double):
    pass
class LoopyWeightedSampling(LoopyWeightedSampling_double):
    pass
class LoopyMonteCarloSampling(LoopyMonteCarloSampling_double):
    pass

class LoopyBeliefPropagation(LoopyBeliefPropagation_double):
    pass

class BruteForceKL(BruteForceKL_double):
    pass
class GibbsKL(GibbsKL_double):
    pass

class CredalNet(CredalNet_double):
    pass
class CNMonteCarloSampling(CNMonteCarloSampling_double):
    pass
class CNLoopyPropagation(CNLoopyPropagation_double):
    pass

class DiscretizedVariable(DiscretizedVariable_double):
    pass

class InfluenceDiagram(InfluenceDiagram_double):
    pass
class InfluenceDiagramInference(InfluenceDiagramInference_double):
    pass

class BNLearner(BNLearner_double):
    pass
class BNDatabaseGenerator(BNDatabaseGenerator_double):
    pass
%}

 // Explicit template instantiation ignored.
