/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.11
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGPYTHON
#define SWIGPYTHON
#endif

#define SWIG_DIRECTORS
#define SWIG_PYTHON_DIRECTOR_NO_VTABLE


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#if defined(_DEBUG) && defined(SWIG_PYTHON_INTERPRETER_NO_DEBUG)
/* Use debug wrappers with the Python release dll */
# undef _DEBUG
#include <cmath>
#include <Python.h>
# define _DEBUG
#else
#include <cmath>
#include <Python.h>
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   gum::Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* Compatibility macros for Python 3 */
#if PY_VERSION_HEX >= 0x03000000

#define PyClass_Check(obj) PyObject_IsInstance(obj, (PyObject *)&PyType_Type)
#define PyInt_Check(x) PyLong_Check(x)
#define PyInt_AsLong(x) PyLong_AsLong(x)
#define PyInt_FromLong(x) PyLong_FromLong(x)
#define PyInt_FromSize_t(x) PyLong_FromSize_t(x)
#define PyString_Check(name) PyBytes_Check(name)
#define PyString_FromString(x) PyUnicode_FromString(x)
#define PyString_Format(fmt, args)  PyUnicode_Format(fmt, args)
#define PyString_AsString(str) PyBytes_AsString(str)
#define PyString_Size(str) PyBytes_Size(str)	
#define PyString_InternFromString(key) PyUnicode_InternFromString(key)
#define Py_TPFLAGS_HAVE_CLASS Py_TPFLAGS_BASETYPE
#define PyString_AS_STRING(x) PyUnicode_AS_STRING(x)
#define _PyLong_FromSsize_t(x) PyLong_FromSsize_t(x)

#endif

#ifndef Py_TYPE
#  define Py_TYPE(op) ((op)->ob_type)
#endif

/* SWIG APIs for compatibility of both Python 2 & 3 */

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_FromFormat PyUnicode_FromFormat
#else
#  define SWIG_Python_str_FromFormat PyString_FromFormat
#endif


/* Warning: This function will allocate a new string in Python 3,
 * so please call SWIG_Python_str_DelForPy3(x) to free the space.
 */
SWIGINTERN char*
SWIG_Python_str_AsChar(PyObject *str)
{
#if PY_VERSION_HEX >= 0x03000000
  char *cstr;
  char *newstr;
  Py_ssize_t len;
  str = PyUnicode_AsUTF8String(str);
  PyBytes_AsStringAndSize(str, &cstr, &len);
  newstr = (char *) malloc(len+1);
  memcpy(newstr, cstr, len+1);
  Py_XDECREF(str);
  return newstr;
#else
  return PyString_AsString(str);
#endif
}

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_DelForPy3(x) free( (void*) (x) )
#else
#  define SWIG_Python_str_DelForPy3(x) 
#endif


SWIGINTERN PyObject*
SWIG_Python_str_FromChar(const char *c)
{
#if PY_VERSION_HEX >= 0x03000000
  return PyUnicode_FromString(c); 
#else
  return PyString_FromString(c);
#endif
}

/* Add PyOS_snprintf for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# if defined(_MSC_VER) || defined(__BORLANDC__) || defined(_WATCOM)
#  define PyOS_snprintf _snprintf
# else
#  define PyOS_snprintf snprintf
# endif
#endif

/* A crude PyString_FromFormat implementation for old Pythons */
#if PY_VERSION_HEX < 0x02020000

#ifndef SWIG_PYBUFFER_SIZE
# define SWIG_PYBUFFER_SIZE 1024
#endif

static PyObject *
PyString_FromFormat(const char *fmt, ...) {
  va_list ap;
  char buf[SWIG_PYBUFFER_SIZE * 2];
  int res;
  va_start(ap, fmt);
  res = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return (res < 0 || res >= (int)sizeof(buf)) ? 0 : PyString_FromString(buf);
}
#endif

#ifndef PyObject_DEL
# define PyObject_DEL PyObject_Del
#endif

/* A crude PyExc_StopIteration exception for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# ifndef PyExc_StopIteration
#  define PyExc_StopIteration PyExc_RuntimeError
# endif
# ifndef PyObject_GenericGetAttr
#  define PyObject_GenericGetAttr 0
# endif
#endif

/* Py_NotImplemented is defined in 2.1 and up. */
#if PY_VERSION_HEX < 0x02010000
# ifndef Py_NotImplemented
#  define Py_NotImplemented PyExc_RuntimeError
# endif
#endif

/* A crude PyString_AsStringAndSize implementation for old Pythons */
#if PY_VERSION_HEX < 0x02010000
# ifndef PyString_AsStringAndSize
#  define PyString_AsStringAndSize(obj, s, len) {*s = PyString_AsString(obj); *len = *s ? strlen(*s) : 0;}
# endif
#endif

/* PySequence_Size for old Pythons */
#if PY_VERSION_HEX < 0x02000000
# ifndef PySequence_Size
#  define PySequence_Size PySequence_Length
# endif
#endif

/* PyBool_FromLong for old Pythons */
#if PY_VERSION_HEX < 0x02030000
static
PyObject *PyBool_FromLong(long ok)
{
  PyObject *result = ok ? Py_True : Py_False;
  Py_INCREF(result);
  return result;
}
#endif

/* Py_ssize_t for old Pythons */
/* This code is as recommended by: */
/* http://www.python.org/dev/peps/pep-0353/#conversion-guidelines */
#if PY_VERSION_HEX < 0x02050000 && !defined(PY_SSIZE_T_MIN)
typedef int Py_ssize_t;
# define PY_SSIZE_T_MAX INT_MAX
# define PY_SSIZE_T_MIN INT_MIN
typedef inquiry lenfunc;
typedef intargfunc ssizeargfunc;
typedef intintargfunc ssizessizeargfunc;
typedef intobjargproc ssizeobjargproc;
typedef intintobjargproc ssizessizeobjargproc;
typedef getreadbufferproc readbufferproc;
typedef getwritebufferproc writebufferproc;
typedef getsegcountproc segcountproc;
typedef getcharbufferproc charbufferproc;
static long PyNumber_AsSsize_t (PyObject *x, void *SWIGUNUSEDPARM(exc))
{
  long result = 0;
  PyObject *i = PyNumber_Int(x);
  if (i) {
    result = PyInt_AsLong(i);
    Py_DECREF(i);
  }
  return result;
}
#endif

#if PY_VERSION_HEX < 0x02050000
#define PyInt_FromSize_t(x) PyInt_FromLong((long)x)
#endif

#if PY_VERSION_HEX < 0x02040000
#define Py_VISIT(op)				\
  do { 						\
    if (op) {					\
      int vret = visit((op), arg);		\
      if (vret)					\
        return vret;				\
    }						\
  } while (0)
#endif

#if PY_VERSION_HEX < 0x02030000
typedef struct {
  PyTypeObject type;
  PyNumberMethods as_number;
  PyMappingMethods as_mapping;
  PySequenceMethods as_sequence;
  PyBufferProcs as_buffer;
  PyObject *name, *slots;
} PyHeapTypeObject;
#endif

#if PY_VERSION_HEX < 0x02030000
typedef destructor freefunc;
#endif

#if ((PY_MAJOR_VERSION == 2 && PY_MINOR_VERSION > 6) || \
     (PY_MAJOR_VERSION == 3 && PY_MINOR_VERSION > 0) || \
     (PY_MAJOR_VERSION > 3))
# define SWIGPY_USE_CAPSULE
# define SWIGPY_CAPSULE_NAME ((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION ".type_pointer_capsule" SWIG_TYPE_TABLE_NAME)
#endif

#if PY_VERSION_HEX < 0x03020000
#define PyDescr_TYPE(x) (((PyDescrObject *)(x))->d_type)
#define PyDescr_NAME(x) (((PyDescrObject *)(x))->d_name)
#define Py_hash_t long
#endif

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIME PyObject*
SWIG_Python_ErrorType(int code) {
  PyObject* type = 0;
  switch(code) {
  case SWIG_MemoryError:
    type = PyExc_MemoryError;
    break;
  case SWIG_IOError:
    type = PyExc_IOError;
    break;
  case SWIG_RuntimeError:
    type = PyExc_RuntimeError;
    break;
  case SWIG_IndexError:
    type = PyExc_IndexError;
    break;
  case SWIG_TypeError:
    type = PyExc_TypeError;
    break;
  case SWIG_DivisionByZero:
    type = PyExc_ZeroDivisionError;
    break;
  case SWIG_OverflowError:
    type = PyExc_OverflowError;
    break;
  case SWIG_SyntaxError:
    type = PyExc_SyntaxError;
    break;
  case SWIG_ValueError:
    type = PyExc_ValueError;
    break;
  case SWIG_SystemError:
    type = PyExc_SystemError;
    break;
  case SWIG_AttributeError:
    type = PyExc_AttributeError;
    break;
  default:
    type = PyExc_RuntimeError;
  }
  return type;
}


SWIGRUNTIME void
SWIG_Python_AddErrorMsg(const char* mesg)
{
  PyObject *type = 0;
  PyObject *value = 0;
  PyObject *traceback = 0;

  if (PyErr_Occurred()) PyErr_Fetch(&type, &value, &traceback);
  if (value) {
    char *tmp;
    PyObject *old_str = PyObject_Str(value);
    PyErr_Clear();
    Py_XINCREF(type);

    PyErr_Format(type, "%s %s", tmp = SWIG_Python_str_AsChar(old_str), mesg);
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(old_str);
    Py_DECREF(value);
  } else {
    PyErr_SetString(PyExc_RuntimeError, mesg);
  }
}

#if defined(SWIG_PYTHON_NO_THREADS)
#  if defined(SWIG_PYTHON_THREADS)
#    undef SWIG_PYTHON_THREADS
#  endif
#endif
#if defined(SWIG_PYTHON_THREADS) /* Threading support is enabled */
#  if !defined(SWIG_PYTHON_USE_GIL) && !defined(SWIG_PYTHON_NO_USE_GIL)
#    if (PY_VERSION_HEX >= 0x02030000) /* For 2.3 or later, use the PyGILState calls */
#      define SWIG_PYTHON_USE_GIL
#    endif
#  endif
#  if defined(SWIG_PYTHON_USE_GIL) /* Use PyGILState threads calls */
#    ifndef SWIG_PYTHON_INITIALIZE_THREADS
#     define SWIG_PYTHON_INITIALIZE_THREADS  PyEval_InitThreads() 
#    endif
#    ifdef __cplusplus /* C++ code */
       class SWIG_Python_Thread_Block {
         bool status;
         PyGILState_STATE state;
       public:
         void end() { if (status) { PyGILState_Release(state); status = false;} }
         SWIG_Python_Thread_Block() : status(true), state(PyGILState_Ensure()) {}
         ~SWIG_Python_Thread_Block() { end(); }
       };
       class SWIG_Python_Thread_Allow {
         bool status;
         PyThreadState *save;
       public:
         void end() { if (status) { PyEval_RestoreThread(save); status = false; }}
         SWIG_Python_Thread_Allow() : status(true), save(PyEval_SaveThread()) {}
         ~SWIG_Python_Thread_Allow() { end(); }
       };
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   SWIG_Python_Thread_Block _swig_thread_block
#      define SWIG_PYTHON_THREAD_END_BLOCK     _swig_thread_block.end()
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   SWIG_Python_Thread_Allow _swig_thread_allow
#      define SWIG_PYTHON_THREAD_END_ALLOW     _swig_thread_allow.end()
#    else /* C code */
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   PyGILState_STATE _swig_thread_block = PyGILState_Ensure()
#      define SWIG_PYTHON_THREAD_END_BLOCK     PyGILState_Release(_swig_thread_block)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   PyThreadState *_swig_thread_allow = PyEval_SaveThread()
#      define SWIG_PYTHON_THREAD_END_ALLOW     PyEval_RestoreThread(_swig_thread_allow)
#    endif
#  else /* Old thread way, not implemented, user must provide it */
#    if !defined(SWIG_PYTHON_INITIALIZE_THREADS)
#      define SWIG_PYTHON_INITIALIZE_THREADS
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_BLOCK)
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_BLOCK)
#      define SWIG_PYTHON_THREAD_END_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_ALLOW)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_ALLOW)
#      define SWIG_PYTHON_THREAD_END_ALLOW
#    endif
#  endif
#else /* No thread support */
#  define SWIG_PYTHON_INITIALIZE_THREADS
#  define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#  define SWIG_PYTHON_THREAD_END_BLOCK
#  define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#  define SWIG_PYTHON_THREAD_END_ALLOW
#endif

/* -----------------------------------------------------------------------------
 * Python API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
  int type;
  char *name;
  long lvalue;
  double dvalue;
  void   *pvalue;
  swig_type_info **ptype;
} swig_const_info;


/* -----------------------------------------------------------------------------
 * Wrapper of PyInstanceMethod_New() used in Python 3
 * It is exported to the generated module, used for -fastproxy
 * ----------------------------------------------------------------------------- */
#if PY_VERSION_HEX >= 0x03000000
SWIGRUNTIME PyObject* SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func)
{
  return PyInstanceMethod_New(func);
}
#else
SWIGRUNTIME PyObject* SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(func))
{
  return NULL;
}
#endif

#ifdef __cplusplus
}
#endif


/* -----------------------------------------------------------------------------
 * pyrun.swg
 *
 * This file contains the runtime support for Python modules
 * and includes code for managing global variables and pointer
 * type checking.
 *
 * ----------------------------------------------------------------------------- */

/* Common SWIG API */

/* for raw pointers */
#define SWIG_Python_ConvertPtr(obj, pptr, type, flags)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Python_ConvertPtr(obj, pptr, type, flags)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, own)

#ifdef SWIGPYTHON_BUILTIN
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(self, ptr, type, flags)
#else
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(NULL, ptr, type, flags)
#endif

#define SWIG_InternalNewPointerObj(ptr, type, flags)	SWIG_Python_NewPointerObj(NULL, ptr, type, flags)

#define SWIG_CheckImplicit(ty)                          SWIG_Python_CheckImplicit(ty) 
#define SWIG_AcquirePtr(ptr, src)                       SWIG_Python_AcquirePtr(ptr, src)
#define swig_owntype                                    int

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_Python_ConvertFunctionPtr(obj, pptr, type)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Python_NewPointerObj(NULL, ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Python_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer)             SWIG_Python_SetModule(pointer)
#define SWIG_NewClientData(obj)                         SwigPyClientData_New(obj)

#define SWIG_SetErrorObj                                SWIG_Python_SetErrorObj                            
#define SWIG_SetErrorMsg                        	SWIG_Python_SetErrorMsg				   
#define SWIG_ErrorType(code)                    	SWIG_Python_ErrorType(code)                        
#define SWIG_Error(code, msg)            		SWIG_Python_SetErrorMsg(SWIG_ErrorType(code), msg) 
#define SWIG_fail                        		goto fail					   


/* Runtime API implementation */

/* Error manipulation */

SWIGINTERN void 
SWIG_Python_SetErrorObj(PyObject *errtype, PyObject *obj) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK; 
  PyErr_SetObject(errtype, obj);
  Py_DECREF(obj);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

SWIGINTERN void 
SWIG_Python_SetErrorMsg(PyObject *errtype, const char *msg) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  PyErr_SetString(errtype, msg);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

#define SWIG_Python_Raise(obj, type, desc)  SWIG_Python_SetErrorObj(SWIG_Python_ExceptionType(desc), obj)

/* gum::Set a constant value */

#if defined(SWIGPYTHON_BUILTIN)

SWIGINTERN void
SwigPyBuiltin_AddPublicSymbol(PyObject *seq, const char *key) {
  PyObject *s = PyString_InternFromString(key);
  PyList_Append(seq, s);
  Py_DECREF(s);
}

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, PyObject *public_interface, const char *name, PyObject *obj) {   
#if PY_VERSION_HEX < 0x02030000
  PyDict_SetItemString(d, (char *)name, obj);
#else
  PyDict_SetItemString(d, name, obj);
#endif
  Py_DECREF(obj);
  if (public_interface)
    SwigPyBuiltin_AddPublicSymbol(public_interface, name);
}

#else

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, const char *name, PyObject *obj) {   
#if PY_VERSION_HEX < 0x02030000
  PyDict_SetItemString(d, (char *)name, obj);
#else
  PyDict_SetItemString(d, name, obj);
#endif
  Py_DECREF(obj);                            
}

#endif

/* Append a value to the result obj */

SWIGINTERN PyObject*
SWIG_Python_AppendOutput(PyObject* result, PyObject* obj) {
#if !defined(SWIG_PYTHON_OUTPUT_TUPLE)
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyList_Check(result)) {
      PyObject *o2 = result;
      result = PyList_New(1);
      PyList_SetItem(result, 0, o2);
    }
    PyList_Append(result,obj);
    Py_DECREF(obj);
  }
  return result;
#else
  PyObject*   o2;
  PyObject*   o3;
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyTuple_Check(result)) {
      o2 = result;
      result = PyTuple_New(1);
      PyTuple_SET_ITEM(result, 0, o2);
    }
    o3 = PyTuple_New(1);
    PyTuple_SET_ITEM(o3, 0, obj);
    o2 = result;
    result = PySequence_Concat(o2, o3);
    Py_DECREF(o2);
    Py_DECREF(o3);
  }
  return result;
#endif
}

/* Unpack the argument tuple */

SWIGINTERN Py_ssize_t
SWIG_Python_UnpackTuple(PyObject *args, const char *name, Py_ssize_t min, Py_ssize_t max, PyObject **objs)
{
  if (!args) {
    if (!min && !max) {
      return 1;
    } else {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got none", 
		   name, (min == max ? "" : "at least "), (int)min);
      return 0;
    }
  }  
  if (!PyTuple_Check(args)) {
    if (min <= 1 && max >= 1) {
      Py_ssize_t i;
      objs[0] = args;
      for (i = 1; i < max; ++i) {
	objs[i] = 0;
      }
      return 2;
    }
    PyErr_SetString(PyExc_SystemError, "UnpackTuple() argument list is not a tuple");
    return 0;
  } else {
    Py_ssize_t l = PyTuple_GET_SIZE(args);
    if (l < min) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at least "), (int)min, (int)l);
      return 0;
    } else if (l > max) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at most "), (int)max, (int)l);
      return 0;
    } else {
      Py_ssize_t i;
      for (i = 0; i < l; ++i) {
	objs[i] = PyTuple_GET_ITEM(args, i);
      }
      for (; l < max; ++l) {
	objs[l] = 0;
      }
      return i + 1;
    }    
  }
}

/* A functor is a function object with one single object argument */
#if PY_VERSION_HEX >= 0x02020000
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunctionObjArgs(functor, obj, NULL);
#else
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunction(functor, "O", obj);
#endif

/*
  Helper for static pointer initialization for both C and C++ code, for example
  static PyObject *SWIG_STATIC_POINTER(MyVar) = NewSomething(...);
*/
#ifdef __cplusplus
#define SWIG_STATIC_POINTER(var)  var
#else
#define SWIG_STATIC_POINTER(var)  var = 0; if (!var) var
#endif

/* -----------------------------------------------------------------------------
 * Pointer declarations
 * ----------------------------------------------------------------------------- */

/* Flags for new pointer objects */
#define SWIG_POINTER_NOSHADOW       (SWIG_POINTER_OWN      << 1)
#define SWIG_POINTER_NEW            (SWIG_POINTER_NOSHADOW | SWIG_POINTER_OWN)

#define SWIG_POINTER_IMPLICIT_CONV  (SWIG_POINTER_DISOWN   << 1)

#define SWIG_BUILTIN_TP_INIT	    (SWIG_POINTER_OWN << 2)
#define SWIG_BUILTIN_INIT	    (SWIG_BUILTIN_TP_INIT | SWIG_POINTER_OWN)

#ifdef __cplusplus
extern "C" {
#endif

/*  How to access Py_None */
#if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#  ifndef SWIG_PYTHON_NO_BUILD_NONE
#    ifndef SWIG_PYTHON_BUILD_NONE
#      define SWIG_PYTHON_BUILD_NONE
#    endif
#  endif
#endif

#ifdef SWIG_PYTHON_BUILD_NONE
#  ifdef Py_None
#   undef Py_None
#   define Py_None SWIG_Py_None()
#  endif
SWIGRUNTIMEINLINE PyObject * 
_SWIG_Py_None(void)
{
  PyObject *none = Py_BuildValue((char*)"");
  Py_DECREF(none);
  return none;
}
SWIGRUNTIME PyObject * 
SWIG_Py_None(void)
{
  static PyObject *SWIG_STATIC_POINTER(none) = _SWIG_Py_None();
  return none;
}
#endif

/* The python void return value */

SWIGRUNTIMEINLINE PyObject * 
SWIG_Py_Void(void)
{
  PyObject *none = Py_None;
  Py_INCREF(none);
  return none;
}

/* SwigPyClientData */

typedef struct {
  PyObject *klass;
  PyObject *newraw;
  PyObject *newargs;
  PyObject *destroy;
  int delargs;
  int implicitconv;
  PyTypeObject *pytype;
} SwigPyClientData;

SWIGRUNTIMEINLINE int 
SWIG_Python_CheckImplicit(swig_type_info *ty)
{
  SwigPyClientData *data = (SwigPyClientData *)ty->clientdata;
  return data ? data->implicitconv : 0;
}

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_ExceptionType(swig_type_info *desc) {
  SwigPyClientData *data = desc ? (SwigPyClientData *) desc->clientdata : 0;
  PyObject *klass = data ? data->klass : 0;
  return (klass ? klass : PyExc_RuntimeError);
}


SWIGRUNTIME SwigPyClientData * 
SwigPyClientData_New(PyObject* obj)
{
  if (!obj) {
    return 0;
  } else {
    SwigPyClientData *data = (SwigPyClientData *)malloc(sizeof(SwigPyClientData));
    /* the klass element */
    data->klass = obj;
    Py_INCREF(data->klass);
    /* the newraw method and newargs arguments used to create a new raw instance */
    if (PyClass_Check(obj)) {
      data->newraw = 0;
      data->newargs = obj;
      Py_INCREF(obj);
    } else {
#if (PY_VERSION_HEX < 0x02020000)
      data->newraw = 0;
#else
      data->newraw = PyObject_GetAttrString(data->klass, (char *)"__new__");
#endif
      if (data->newraw) {
	Py_INCREF(data->newraw);
	data->newargs = PyTuple_New(1);
	PyTuple_SetItem(data->newargs, 0, obj);
      } else {
	data->newargs = obj;
      }
      Py_INCREF(data->newargs);
    }
    /* the destroy method, aka as the C++ delete method */
    data->destroy = PyObject_GetAttrString(data->klass, (char *)"__swig_destroy__");
    if (PyErr_Occurred()) {
      PyErr_Clear();
      data->destroy = 0;
    }
    if (data->destroy) {
      int flags;
      Py_INCREF(data->destroy);
      flags = PyCFunction_GET_FLAGS(data->destroy);
#ifdef METH_O
      data->delargs = !(flags & (METH_O));
#else
      data->delargs = 0;
#endif
    } else {
      data->delargs = 0;
    }
    data->implicitconv = 0;
    data->pytype = 0;
    return data;
  }
}

SWIGRUNTIME void 
SwigPyClientData_Del(SwigPyClientData *data) {
  Py_XDECREF(data->newraw);
  Py_XDECREF(data->newargs);
  Py_XDECREF(data->destroy);
}

/* =============== SwigPyObject =====================*/

typedef struct {
  PyObject_HEAD
  void *ptr;
  swig_type_info *ty;
  int own;
  PyObject *next;
#ifdef SWIGPYTHON_BUILTIN
  PyObject *dict;
#endif
} SwigPyObject;


#ifdef SWIGPYTHON_BUILTIN

SWIGRUNTIME PyObject *
SwigPyObject_get___dict__(PyObject *v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *)v;

  if (!sobj->dict)
    sobj->dict = PyDict_New();

  Py_INCREF(sobj->dict);
  return sobj->dict;
}

#endif

SWIGRUNTIME PyObject *
SwigPyObject_long(SwigPyObject *v)
{
  return PyLong_FromVoidPtr(v->ptr);
}

SWIGRUNTIME PyObject *
SwigPyObject_format(const char* fmt, SwigPyObject *v)
{
  PyObject *res = NULL;
  PyObject *args = PyTuple_New(1);
  if (args) {
    if (PyTuple_SetItem(args, 0, SwigPyObject_long(v)) == 0) {
      PyObject *ofmt = SWIG_Python_str_FromChar(fmt);
      if (ofmt) {
#if PY_VERSION_HEX >= 0x03000000
	res = PyUnicode_Format(ofmt,args);
#else
	res = PyString_Format(ofmt,args);
#endif
	Py_DECREF(ofmt);
      }
      Py_DECREF(args);
    }
  }
  return res;
}

SWIGRUNTIME PyObject *
SwigPyObject_oct(SwigPyObject *v)
{
  return SwigPyObject_format("%o",v);
}

SWIGRUNTIME PyObject *
SwigPyObject_hex(SwigPyObject *v)
{
  return SwigPyObject_format("%x",v);
}

SWIGRUNTIME PyObject *
#ifdef METH_NOARGS
SwigPyObject_repr(SwigPyObject *v)
#else
SwigPyObject_repr(SwigPyObject *v, PyObject *args)
#endif
{
  const char *name = SWIG_TypePrettyName(v->ty);
  PyObject *repr = SWIG_Python_str_FromFormat("<Swig Object of type '%s' at %p>", (name ? name : "unknown"), (void *)v);
  if (v->next) {
# ifdef METH_NOARGS
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next);
# else
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next, args);
# endif
# if PY_VERSION_HEX >= 0x03000000
    PyObject *joined = PyUnicode_Concat(repr, nrep);
    Py_DecRef(repr);
    Py_DecRef(nrep);
    repr = joined;
# else
    PyString_ConcatAndDel(&repr,nrep);
# endif
  }
  return repr;  
}

SWIGRUNTIME int
SwigPyObject_compare(SwigPyObject *v, SwigPyObject *w)
{
  void *i = v->ptr;
  void *j = w->ptr;
  return (i < j) ? -1 : ((i > j) ? 1 : 0);
}

/* Added for Python 3.x, would it also be useful for Python 2.x? */
SWIGRUNTIME PyObject*
SwigPyObject_richcompare(SwigPyObject *v, SwigPyObject *w, int op)
{
  PyObject* res;
  if( op != Py_EQ && op != Py_NE ) {
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
  }
  res = PyBool_FromLong( (SwigPyObject_compare(v, w)==0) == (op == Py_EQ) ? 1 : 0);
  return res;  
}


SWIGRUNTIME PyTypeObject* SwigPyObject_TypeOnce(void);

#ifdef SWIGPYTHON_BUILTIN
static swig_type_info *SwigPyObject_stype = 0;
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
    SwigPyClientData *cd;
    assert(SwigPyObject_stype);
    cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
    assert(cd);
    assert(cd->pytype);
    return cd->pytype;
}
#else
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyObject_TypeOnce();
  return type;
}
#endif

SWIGRUNTIMEINLINE int
SwigPyObject_Check(PyObject *op) {
#ifdef SWIGPYTHON_BUILTIN
  PyTypeObject *target_tp = SwigPyObject_type();
  if (PyType_IsSubtype(op->ob_type, target_tp))
    return 1;
  return (strcmp(op->ob_type->tp_name, "SwigPyObject") == 0);
#else
  return (Py_TYPE(op) == SwigPyObject_type())
    || (strcmp(Py_TYPE(op)->tp_name,"SwigPyObject") == 0);
#endif
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own);

SWIGRUNTIME void
SwigPyObject_dealloc(PyObject *v)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  PyObject *next = sobj->next;
  if (sobj->own == SWIG_POINTER_OWN) {
    swig_type_info *ty = sobj->ty;
    SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
    PyObject *destroy = data ? data->destroy : 0;
    if (destroy) {
      /* destroy is always a VARARGS method */
      PyObject *res;

      /* PyObject_CallFunction() has the potential to silently drop
         the active active exception.  In cases of unnamed temporary
         variable or where we just finished iterating over a generator
         StopIteration will be active right now, and this needs to
         remain true upon return from SwigPyObject_dealloc.  So save
         and restore. */
      
      PyObject *val = NULL, *type = NULL, *tb = NULL;
      PyErr_Fetch(&val, &type, &tb);

      if (data->delargs) {
        /* we need to create a temporary object to carry the destroy operation */
        PyObject *tmp = SwigPyObject_New(sobj->ptr, ty, 0);
        res = SWIG_Python_CallFunctor(destroy, tmp);
        Py_DECREF(tmp);
      } else {
        PyCFunction meth = PyCFunction_GET_FUNCTION(destroy);
        PyObject *mself = PyCFunction_GET_SELF(destroy);
        res = ((*meth)(mself, v));
      }
      if (!res)
        PyErr_WriteUnraisable(destroy);

      PyErr_Restore(val, type, tb);

      Py_XDECREF(res);
    } 
#if !defined(SWIG_PYTHON_SILENT_MEMLEAK)
    else {
      const char *name = SWIG_TypePrettyName(ty);
      printf("swig/python detected a memory leak of type '%s', no destructor found.\n", (name ? name : "unknown"));
    }
#endif
  } 
  Py_XDECREF(next);
  PyObject_DEL(v);
}

SWIGRUNTIME PyObject* 
SwigPyObject_append(PyObject* v, PyObject* next)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
#ifndef METH_O
  PyObject *tmp = 0;
  if (!PyArg_ParseTuple(next,(char *)"O:append", &tmp)) return NULL;
  next = tmp;
#endif
  if (!SwigPyObject_Check(next)) {
    PyErr_SetString(PyExc_TypeError, "Attempt to append a non SwigPyObject");
    return NULL;
  }
  sobj->next = next;
  Py_INCREF(next);
  return SWIG_Py_Void();
}

SWIGRUNTIME PyObject* 
#ifdef METH_NOARGS
SwigPyObject_next(PyObject* v)
#else
SwigPyObject_next(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  if (sobj->next) {    
    Py_INCREF(sobj->next);
    return sobj->next;
  } else {
    return SWIG_Py_Void();
  }
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
SwigPyObject_disown(PyObject *v)
#else
SwigPyObject_disown(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = 0;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
SwigPyObject_acquire(PyObject *v)
#else
SwigPyObject_acquire(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = SWIG_POINTER_OWN;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
SwigPyObject_own(PyObject *v, PyObject *args)
{
  PyObject *val = 0;
#if (PY_VERSION_HEX < 0x02020000)
  if (!PyArg_ParseTuple(args,(char *)"|O:own",&val))
#elif (PY_VERSION_HEX < 0x02050000)
  if (!PyArg_UnpackTuple(args, (char *)"own", 0, 1, &val)) 
#else
  if (!PyArg_UnpackTuple(args, "own", 0, 1, &val)) 
#endif
    {
      return NULL;
    } 
  else
    {
      SwigPyObject *sobj = (SwigPyObject *)v;
      PyObject *obj = PyBool_FromLong(sobj->own);
      if (val) {
#ifdef METH_NOARGS
	if (PyObject_IsTrue(val)) {
	  SwigPyObject_acquire(v);
	} else {
	  SwigPyObject_disown(v);
	}
#else
	if (PyObject_IsTrue(val)) {
	  SwigPyObject_acquire(v,args);
	} else {
	  SwigPyObject_disown(v,args);
	}
#endif
      } 
      return obj;
    }
}

#ifdef METH_O
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)SwigPyObject_disown,  METH_NOARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)SwigPyObject_acquire, METH_NOARGS,  (char *)"acquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)SwigPyObject_own,     METH_VARARGS, (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)SwigPyObject_append,  METH_O,       (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)SwigPyObject_next,    METH_NOARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)SwigPyObject_repr,    METH_NOARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#else
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)SwigPyObject_disown,  METH_VARARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)SwigPyObject_acquire, METH_VARARGS,  (char *)"acquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)SwigPyObject_own,     METH_VARARGS,  (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)SwigPyObject_append,  METH_VARARGS,  (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)SwigPyObject_next,    METH_VARARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)SwigPyObject_repr,   METH_VARARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#endif

#if PY_VERSION_HEX < 0x02020000
SWIGINTERN PyObject *
SwigPyObject_getattr(SwigPyObject *sobj,char *name)
{
  return Py_FindMethod(swigobject_methods, (PyObject *)sobj, name);
}
#endif

SWIGRUNTIME PyTypeObject*
SwigPyObject_TypeOnce(void) {
  static char swigobject_doc[] = "Swig object carries a C/C++ instance pointer";

  static PyNumberMethods SwigPyObject_as_number = {
    (binaryfunc)0, /*nb_add*/
    (binaryfunc)0, /*nb_subtract*/
    (binaryfunc)0, /*nb_multiply*/
    /* nb_divide removed in Python 3 */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc)0, /*nb_divide*/
#endif
    (binaryfunc)0, /*nb_remainder*/
    (binaryfunc)0, /*nb_divmod*/
    (ternaryfunc)0,/*nb_power*/
    (unaryfunc)0,  /*nb_negative*/
    (unaryfunc)0,  /*nb_positive*/
    (unaryfunc)0,  /*nb_absolute*/
    (inquiry)0,    /*nb_nonzero*/
    0,		   /*nb_invert*/
    0,		   /*nb_lshift*/
    0,		   /*nb_rshift*/
    0,		   /*nb_and*/
    0,		   /*nb_xor*/
    0,		   /*nb_or*/
#if PY_VERSION_HEX < 0x03000000
    0,   /*nb_coerce*/
#endif
    (unaryfunc)SwigPyObject_long, /*nb_int*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_long, /*nb_long*/
#else
    0, /*nb_reserved*/
#endif
    (unaryfunc)0,                 /*nb_float*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_oct,  /*nb_oct*/
    (unaryfunc)SwigPyObject_hex,  /*nb_hex*/
#endif
#if PY_VERSION_HEX >= 0x03050000 /* 3.5 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_matrix_multiply */
#elif PY_VERSION_HEX >= 0x03000000 /* 3.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index, nb_inplace_divide removed */
#elif PY_VERSION_HEX >= 0x02050000 /* 2.5.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index */
#elif PY_VERSION_HEX >= 0x02020000 /* 2.2.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_true_divide */
#elif PY_VERSION_HEX >= 0x02000000 /* 2.0.0 */
    0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_or */
#endif
  };

  static PyTypeObject swigpyobject_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX >= 0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      (char *)"SwigPyObject",               /* tp_name */
      sizeof(SwigPyObject),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyObject_dealloc,     /* tp_dealloc */
      0,                                    /* tp_print */
#if PY_VERSION_HEX < 0x02020000
      (getattrfunc)SwigPyObject_getattr,    /* tp_getattr */
#else
      (getattrfunc)0,                       /* tp_getattr */
#endif
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
      0, /* tp_reserved in 3.0.1, tp_compare in 3.0.0 but not used */
#else
      (cmpfunc)SwigPyObject_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyObject_repr,          /* tp_repr */
      &SwigPyObject_as_number,              /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      0,                                    /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigobject_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      (richcmpfunc)SwigPyObject_richcompare,/* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      swigobject_methods,                   /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
      0,                                    /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
      0,                                    /* tp_version_tag */
#endif
#if PY_VERSION_HEX >= 0x03040000
      0,                                    /* tp_finalize */
#endif
#ifdef COUNT_ALLOCS
      0,                                    /* tp_allocs */
      0,                                    /* tp_frees */
      0,                                    /* tp_maxalloc */
#if PY_VERSION_HEX >= 0x02050000
      0,                                    /* tp_prev */
#endif
      0                                     /* tp_next */
#endif
    };
    swigpyobject_type = tmp;
    type_init = 1;
#if PY_VERSION_HEX < 0x02020000
    swigpyobject_type.ob_type = &PyType_Type;
#else
    if (PyType_Ready(&swigpyobject_type) < 0)
      return NULL;
#endif
  }
  return &swigpyobject_type;
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own)
{
  SwigPyObject *sobj = PyObject_NEW(SwigPyObject, SwigPyObject_type());
  if (sobj) {
    sobj->ptr  = ptr;
    sobj->ty   = ty;
    sobj->own  = own;
    sobj->next = 0;
  }
  return (PyObject *)sobj;
}

/* -----------------------------------------------------------------------------
 * Implements a simple Swig Packed type, and use it instead of string
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *pack;
  swig_type_info *ty;
  size_t size;
} SwigPyPacked;

SWIGRUNTIME int
SwigPyPacked_print(SwigPyPacked *v, FILE *fp, int SWIGUNUSEDPARM(flags))
{
  char result[SWIG_BUFFER_SIZE];
  fputs("<Swig Packed ", fp); 
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    fputs("at ", fp); 
    fputs(result, fp); 
  }
  fputs(v->ty->name,fp); 
  fputs(">", fp);
  return 0; 
}
  
SWIGRUNTIME PyObject *
SwigPyPacked_repr(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    return SWIG_Python_str_FromFormat("<Swig Packed at %s%s>", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromFormat("<Swig Packed %s>", v->ty->name);
  }  
}

SWIGRUNTIME PyObject *
SwigPyPacked_str(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))){
    return SWIG_Python_str_FromFormat("%s%s", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromChar(v->ty->name);
  }  
}

SWIGRUNTIME int
SwigPyPacked_compare(SwigPyPacked *v, SwigPyPacked *w)
{
  size_t i = v->size;
  size_t j = w->size;
  int s = (i < j) ? -1 : ((i > j) ? 1 : 0);
  return s ? s : strncmp((char *)v->pack, (char *)w->pack, 2*v->size);
}

SWIGRUNTIME PyTypeObject* SwigPyPacked_TypeOnce(void);

SWIGRUNTIME PyTypeObject*
SwigPyPacked_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyPacked_TypeOnce();
  return type;
}

SWIGRUNTIMEINLINE int
SwigPyPacked_Check(PyObject *op) {
  return ((op)->ob_type == SwigPyPacked_TypeOnce()) 
    || (strcmp((op)->ob_type->tp_name,"SwigPyPacked") == 0);
}

SWIGRUNTIME void
SwigPyPacked_dealloc(PyObject *v)
{
  if (SwigPyPacked_Check(v)) {
    SwigPyPacked *sobj = (SwigPyPacked *) v;
    free(sobj->pack);
  }
  PyObject_DEL(v);
}

SWIGRUNTIME PyTypeObject*
SwigPyPacked_TypeOnce(void) {
  static char swigpacked_doc[] = "Swig object carries a C/C++ instance pointer";
  static PyTypeObject swigpypacked_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX>=0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      (char *)"SwigPyPacked",               /* tp_name */
      sizeof(SwigPyPacked),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyPacked_dealloc,     /* tp_dealloc */
      (printfunc)SwigPyPacked_print,        /* tp_print */
      (getattrfunc)0,                       /* tp_getattr */
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX>=0x03000000
      0, /* tp_reserved in 3.0.1 */
#else
      (cmpfunc)SwigPyPacked_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyPacked_repr,          /* tp_repr */
      0,                                    /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      (reprfunc)SwigPyPacked_str,           /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigpacked_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      0,                                    /* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      0,                                    /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
      0,                                    /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
      0,                                    /* tp_version_tag */
#endif
#if PY_VERSION_HEX >= 0x03040000
      0,                                    /* tp_finalize */
#endif
#ifdef COUNT_ALLOCS
      0,                                    /* tp_allocs */
      0,                                    /* tp_frees */
      0,                                    /* tp_maxalloc */
#if PY_VERSION_HEX >= 0x02050000
      0,                                    /* tp_prev */
#endif
      0                                     /* tp_next */
#endif
    };
    swigpypacked_type = tmp;
    type_init = 1;
#if PY_VERSION_HEX < 0x02020000
    swigpypacked_type.ob_type = &PyType_Type;
#else
    if (PyType_Ready(&swigpypacked_type) < 0)
      return NULL;
#endif
  }
  return &swigpypacked_type;
}

SWIGRUNTIME PyObject *
SwigPyPacked_New(void *ptr, size_t size, swig_type_info *ty)
{
  SwigPyPacked *sobj = PyObject_NEW(SwigPyPacked, SwigPyPacked_type());
  if (sobj) {
    void *pack = malloc(size);
    if (pack) {
      memcpy(pack, ptr, size);
      sobj->pack = pack;
      sobj->ty   = ty;
      sobj->size = size;
    } else {
      PyObject_DEL((PyObject *) sobj);
      sobj = 0;
    }
  }
  return (PyObject *) sobj;
}

SWIGRUNTIME swig_type_info *
SwigPyPacked_UnpackData(PyObject *obj, void *ptr, size_t size)
{
  if (SwigPyPacked_Check(obj)) {
    SwigPyPacked *sobj = (SwigPyPacked *)obj;
    if (sobj->size != size) return 0;
    memcpy(ptr, sobj->pack, size);
    return sobj->ty;
  } else {
    return 0;
  }
}

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIMEINLINE PyObject *
_SWIG_This(void)
{
    return SWIG_Python_str_FromChar("this");
}

static PyObject *swig_this = NULL;

SWIGRUNTIME PyObject *
SWIG_This(void)
{
  if (swig_this == NULL)
    swig_this = _SWIG_This();
  return swig_this;
}

/* #define SWIG_PYTHON_SLOW_GETSET_THIS */

/* TODO: I don't know how to implement the fast getset in Python 3 right now */
#if PY_VERSION_HEX>=0x03000000
#define SWIG_PYTHON_SLOW_GETSET_THIS 
#endif

SWIGRUNTIME SwigPyObject *
SWIG_Python_GetSwigThis(PyObject *pyobj) 
{
  PyObject *obj;

  if (SwigPyObject_Check(pyobj))
    return (SwigPyObject *) pyobj;

#ifdef SWIGPYTHON_BUILTIN
  (void)obj;
# ifdef PyWeakref_CheckProxy
  if (PyWeakref_CheckProxy(pyobj)) {
    pyobj = PyWeakref_GET_OBJECT(pyobj);
    if (pyobj && SwigPyObject_Check(pyobj))
      return (SwigPyObject*) pyobj;
  }
# endif
  return NULL;
#else

  obj = 0;

#if (!defined(SWIG_PYTHON_SLOW_GETSET_THIS) && (PY_VERSION_HEX >= 0x02030000))
  if (PyInstance_Check(pyobj)) {
    obj = _PyInstance_Lookup(pyobj, SWIG_This());      
  } else {
    PyObject **dictptr = _PyObject_GetDictPtr(pyobj);
    if (dictptr != NULL) {
      PyObject *dict = *dictptr;
      obj = dict ? PyDict_GetItem(dict, SWIG_This()) : 0;
    } else {
#ifdef PyWeakref_CheckProxy
      if (PyWeakref_CheckProxy(pyobj)) {
	PyObject *wobj = PyWeakref_GET_OBJECT(pyobj);
	return wobj ? SWIG_Python_GetSwigThis(wobj) : 0;
      }
#endif
      obj = PyObject_GetAttr(pyobj,SWIG_This());
      if (obj) {
	Py_DECREF(obj);
      } else {
	if (PyErr_Occurred()) PyErr_Clear();
	return 0;
      }
    }
  }
#else
  obj = PyObject_GetAttr(pyobj,SWIG_This());
  if (obj) {
    Py_DECREF(obj);
  } else {
    if (PyErr_Occurred()) PyErr_Clear();
    return 0;
  }
#endif
  if (obj && !SwigPyObject_Check(obj)) {
    /* a PyObject is called 'this', try to get the 'real this'
       SwigPyObject from it */ 
    return SWIG_Python_GetSwigThis(obj);
  }
  return (SwigPyObject *)obj;
#endif
}

/* Acquire a pointer value */

SWIGRUNTIME int
SWIG_Python_AcquirePtr(PyObject *obj, int own) {
  if (own == SWIG_POINTER_OWN) {
    SwigPyObject *sobj = SWIG_Python_GetSwigThis(obj);
    if (sobj) {
      int oldown = sobj->own;
      sobj->own = own;
      return oldown;
    }
  }
  return 0;
}

/* Convert a pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPtrAndOwn(PyObject *obj, void **ptr, swig_type_info *ty, int flags, int *own) {
  int res;
  SwigPyObject *sobj;
  int implicit_conv = (flags & SWIG_POINTER_IMPLICIT_CONV) != 0;

  if (!obj)
    return SWIG_ERROR;
  if (obj == Py_None && !implicit_conv) {
    if (ptr)
      *ptr = 0;
    return SWIG_OK;
  }

  res = SWIG_ERROR;

  sobj = SWIG_Python_GetSwigThis(obj);
  if (own)
    *own = 0;
  while (sobj) {
    void *vptr = sobj->ptr;
    if (ty) {
      swig_type_info *to = sobj->ty;
      if (to == ty) {
        /* no type cast needed */
        if (ptr) *ptr = vptr;
        break;
      } else {
        swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
        if (!tc) {
          sobj = (SwigPyObject *)sobj->next;
        } else {
          if (ptr) {
            int newmemory = 0;
            *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
            if (newmemory == SWIG_CAST_NEW_MEMORY) {
              assert(own); /* badly formed typemap which will lead to a memory leak - it must set and use own to delete *ptr */
              if (own)
                *own = *own | SWIG_CAST_NEW_MEMORY;
            }
          }
          break;
        }
      }
    } else {
      if (ptr) *ptr = vptr;
      break;
    }
  }
  if (sobj) {
    if (own)
      *own = *own | sobj->own;
    if (flags & SWIG_POINTER_DISOWN) {
      sobj->own = 0;
    }
    res = SWIG_OK;
  } else {
    if (implicit_conv) {
      SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
      if (data && !data->implicitconv) {
        PyObject *klass = data->klass;
        if (klass) {
          PyObject *impconv;
          data->implicitconv = 1; /* avoid recursion and call 'explicit' constructors*/
          impconv = SWIG_Python_CallFunctor(klass, obj);
          data->implicitconv = 0;
          if (PyErr_Occurred()) {
            PyErr_Clear();
            impconv = 0;
          }
          if (impconv) {
            SwigPyObject *iobj = SWIG_Python_GetSwigThis(impconv);
            if (iobj) {
              void *vptr;
              res = SWIG_Python_ConvertPtrAndOwn((PyObject*)iobj, &vptr, ty, 0, 0);
              if (SWIG_IsOK(res)) {
                if (ptr) {
                  *ptr = vptr;
                  /* transfer the ownership to 'ptr' */
                  iobj->own = 0;
                  res = SWIG_AddCast(res);
                  res = SWIG_AddNewMask(res);
                } else {
                  res = SWIG_AddCast(res);		    
                }
              }
            }
            Py_DECREF(impconv);
          }
        }
      }
    }
    if (!SWIG_IsOK(res) && obj == Py_None) {
      if (ptr)
        *ptr = 0;
      if (PyErr_Occurred())
        PyErr_Clear();
      res = SWIG_OK;
    }
  }
  return res;
}

/* Convert a function ptr value */

SWIGRUNTIME int
SWIG_Python_ConvertFunctionPtr(PyObject *obj, void **ptr, swig_type_info *ty) {
  if (!PyCFunction_Check(obj)) {
    return SWIG_ConvertPtr(obj, ptr, ty, 0);
  } else {
    void *vptr = 0;
    
    /* here we get the method pointer for callbacks */
    const char *doc = (((PyCFunctionObject *)obj) -> m_ml -> ml_doc);
    const char *desc = doc ? strstr(doc, "swig_ptr: ") : 0;
    if (desc)
      desc = ty ? SWIG_UnpackVoidPtr(desc + 10, &vptr, ty->name) : 0;
    if (!desc) 
      return SWIG_ERROR;
    if (ty) {
      swig_cast_info *tc = SWIG_TypeCheck(desc,ty);
      if (tc) {
        int newmemory = 0;
        *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
        assert(!newmemory); /* newmemory handling not yet implemented */
      } else {
        return SWIG_ERROR;
      }
    } else {
      *ptr = vptr;
    }
    return SWIG_OK;
  }
}

/* Convert a packed value value */

SWIGRUNTIME int
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty) {
  swig_type_info *to = SwigPyPacked_UnpackData(obj, ptr, sz);
  if (!to) return SWIG_ERROR;
  if (ty) {
    if (to != ty) {
      /* check type cast? */
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      if (!tc) return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}  

/* -----------------------------------------------------------------------------
 * Create a new pointer object
 * ----------------------------------------------------------------------------- */

/*
  Create a new instance object, without calling __init__, and set the
  'this' attribute.
*/

SWIGRUNTIME PyObject* 
SWIG_Python_NewShadowInstance(SwigPyClientData *data, PyObject *swig_this)
{
#if (PY_VERSION_HEX >= 0x02020000)
  PyObject *inst = 0;
  PyObject *newraw = data->newraw;
  if (newraw) {
    inst = PyObject_Call(newraw, data->newargs, NULL);
    if (inst) {
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
      PyObject **dictptr = _PyObject_GetDictPtr(inst);
      if (dictptr != NULL) {
	PyObject *dict = *dictptr;
	if (dict == NULL) {
	  dict = PyDict_New();
	  *dictptr = dict;
	  PyDict_SetItem(dict, SWIG_This(), swig_this);
	}
      }
#else
      PyObject *key = SWIG_This();
      PyObject_SetAttr(inst, key, swig_this);
#endif
    }
  } else {
#if PY_VERSION_HEX >= 0x03000000
    inst = ((PyTypeObject*) data->newargs)->tp_new((PyTypeObject*) data->newargs, Py_None, Py_None);
    if (inst) {
      PyObject_SetAttr(inst, SWIG_This(), swig_this);
      Py_TYPE(inst)->tp_flags &= ~Py_TPFLAGS_VALID_VERSION_TAG;
    }
#else
    PyObject *dict = PyDict_New();
    if (dict) {
      PyDict_SetItem(dict, SWIG_This(), swig_this);
      inst = PyInstance_NewRaw(data->newargs, dict);
      Py_DECREF(dict);
    }
#endif
  }
  return inst;
#else
#if (PY_VERSION_HEX >= 0x02010000)
  PyObject *inst = 0;
  PyObject *dict = PyDict_New();
  if (dict) {
    PyDict_SetItem(dict, SWIG_This(), swig_this);
    inst = PyInstance_NewRaw(data->newargs, dict);
    Py_DECREF(dict);
  }
  return (PyObject *) inst;
#else
  PyInstanceObject *inst = PyObject_NEW(PyInstanceObject, &PyInstance_Type);
  if (inst == NULL) {
    return NULL;
  }
  inst->in_class = (PyClassObject *)data->newargs;
  Py_INCREF(inst->in_class);
  inst->in_dict = PyDict_New();
  if (inst->in_dict == NULL) {
    Py_DECREF(inst);
    return NULL;
  }
#ifdef Py_TPFLAGS_HAVE_WEAKREFS
  inst->in_weakreflist = NULL;
#endif
#ifdef Py_TPFLAGS_GC
  PyObject_GC_Init(inst);
#endif
  PyDict_SetItem(inst->in_dict, SWIG_This(), swig_this);
  return (PyObject *) inst;
#endif
#endif
}

SWIGRUNTIME void
SWIG_Python_SetSwigThis(PyObject *inst, PyObject *swig_this)
{
 PyObject *dict;
#if (PY_VERSION_HEX >= 0x02020000) && !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
 PyObject **dictptr = _PyObject_GetDictPtr(inst);
 if (dictptr != NULL) {
   dict = *dictptr;
   if (dict == NULL) {
     dict = PyDict_New();
     *dictptr = dict;
   }
   PyDict_SetItem(dict, SWIG_This(), swig_this);
   return;
 }
#endif
 dict = PyObject_GetAttrString(inst, (char*)"__dict__");
 PyDict_SetItem(dict, SWIG_This(), swig_this);
 Py_DECREF(dict);
} 


SWIGINTERN PyObject *
SWIG_Python_InitShadowInstance(PyObject *args) {
  PyObject *obj[2];
  if (!SWIG_Python_UnpackTuple(args, "swiginit", 2, 2, obj)) {
    return NULL;
  } else {
    SwigPyObject *sthis = SWIG_Python_GetSwigThis(obj[0]);
    if (sthis) {
      SwigPyObject_append((PyObject*) sthis, obj[1]);
    } else {
      SWIG_Python_SetSwigThis(obj[0], obj[1]);
    }
    return SWIG_Py_Void();
  }
}

/* Create a new pointer object */

SWIGRUNTIME PyObject *
SWIG_Python_NewPointerObj(PyObject *self, void *ptr, swig_type_info *type, int flags) {
  SwigPyClientData *clientdata;
  PyObject * robj;
  int own;

  if (!ptr)
    return SWIG_Py_Void();

  clientdata = type ? (SwigPyClientData *)(type->clientdata) : 0;
  own = (flags & SWIG_POINTER_OWN) ? SWIG_POINTER_OWN : 0;
  if (clientdata && clientdata->pytype) {
    SwigPyObject *newobj;
    if (flags & SWIG_BUILTIN_TP_INIT) {
      newobj = (SwigPyObject*) self;
      if (newobj->ptr) {
        PyObject *next_self = clientdata->pytype->tp_alloc(clientdata->pytype, 0);
        while (newobj->next)
	  newobj = (SwigPyObject *) newobj->next;
        newobj->next = next_self;
        newobj = (SwigPyObject *)next_self;
#ifdef SWIGPYTHON_BUILTIN
        newobj->dict = 0;
#endif
      }
    } else {
      newobj = PyObject_New(SwigPyObject, clientdata->pytype);
#ifdef SWIGPYTHON_BUILTIN
      newobj->dict = 0;
#endif
    }
    if (newobj) {
      newobj->ptr = ptr;
      newobj->ty = type;
      newobj->own = own;
      newobj->next = 0;
      return (PyObject*) newobj;
    }
    return SWIG_Py_Void();
  }

  assert(!(flags & SWIG_BUILTIN_TP_INIT));

  robj = SwigPyObject_New(ptr, type, own);
  if (robj && clientdata && !(flags & SWIG_POINTER_NOSHADOW)) {
    PyObject *inst = SWIG_Python_NewShadowInstance(clientdata, robj);
    Py_DECREF(robj);
    robj = inst;
  }
  return robj;
}

/* Create a new packed object */

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  return ptr ? SwigPyPacked_New((void *) ptr, sz, type) : SWIG_Py_Void();
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
void *SWIG_ReturnGlobalTypeList(void *);
#endif

SWIGRUNTIME swig_module_info *
SWIG_Python_GetModule(void *SWIGUNUSEDPARM(clientdata)) {
  static void *type_pointer = (void *)0;
  /* first check if module already created */
  if (!type_pointer) {
#ifdef SWIG_LINK_RUNTIME
    type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
#else
# ifdef SWIGPY_USE_CAPSULE
    type_pointer = PyCapsule_Import(SWIGPY_CAPSULE_NAME, 0);
# else
    type_pointer = PyCObject_Import((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
				    (char*)"type_pointer" SWIG_TYPE_TABLE_NAME);
# endif
    if (PyErr_Occurred()) {
      PyErr_Clear();
      type_pointer = (void *)0;
    }
#endif
  }
  return (swig_module_info *) type_pointer;
}

#if PY_MAJOR_VERSION < 2
/* PyModule_AddObject function was introduced in Python 2.0.  The following function
   is copied out of Python/modsupport.c in python version 2.3.4 */
SWIGINTERN int
PyModule_AddObject(PyObject *m, char *name, PyObject *o)
{
  PyObject *dict;
  if (!PyModule_Check(m)) {
    PyErr_SetString(PyExc_TypeError, "PyModule_AddObject() needs module as first arg");
    return SWIG_ERROR;
  }
  if (!o) {
    PyErr_SetString(PyExc_TypeError, "PyModule_AddObject() needs non-NULL value");
    return SWIG_ERROR;
  }
  
  dict = PyModule_GetDict(m);
  if (dict == NULL) {
    /* Internal error -- modules must have a dict! */
    PyErr_Format(PyExc_SystemError, "module '%s' has no __dict__",
		 PyModule_GetName(m));
    return SWIG_ERROR;
  }
  if (PyDict_SetItemString(dict, name, o))
    return SWIG_ERROR;
  Py_DECREF(o);
  return SWIG_OK;
}
#endif

SWIGRUNTIME void
#ifdef SWIGPY_USE_CAPSULE
SWIG_Python_DestroyModule(PyObject *obj)
#else
SWIG_Python_DestroyModule(void *vptr)
#endif
{
#ifdef SWIGPY_USE_CAPSULE
  swig_module_info *swig_module = (swig_module_info *) PyCapsule_GetPointer(obj, SWIGPY_CAPSULE_NAME);
#else
  swig_module_info *swig_module = (swig_module_info *) vptr;
#endif
  swig_type_info **types = swig_module->types;
  size_t i;
  for (i =0; i < swig_module->size; ++i) {
    swig_type_info *ty = types[i];
    if (ty->owndata) {
      SwigPyClientData *data = (SwigPyClientData *) ty->clientdata;
      if (data) SwigPyClientData_Del(data);
    }
  }
  Py_DECREF(SWIG_This());
  swig_this = NULL;
}

SWIGRUNTIME void
SWIG_Python_SetModule(swig_module_info *swig_module) {
#if PY_VERSION_HEX >= 0x03000000
 /* Add a dummy module object into sys.modules */
  PyObject *module = PyImport_AddModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION);
#else
  static PyMethodDef swig_empty_runtime_method_table[] = { {NULL, NULL, 0, NULL} }; /* Sentinel */
  PyObject *module = Py_InitModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION, swig_empty_runtime_method_table);
#endif
#ifdef SWIGPY_USE_CAPSULE
  PyObject *pointer = PyCapsule_New((void *) swig_module, SWIGPY_CAPSULE_NAME, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, (char*)"type_pointer_capsule" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
#else
  PyObject *pointer = PyCObject_FromVoidPtr((void *) swig_module, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, (char*)"type_pointer" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
#endif
}

/* The python cached type query */
SWIGRUNTIME PyObject *
SWIG_Python_TypeCache(void) {
  static PyObject *SWIG_STATIC_POINTER(cache) = PyDict_New();
  return cache;
}

SWIGRUNTIME swig_type_info *
SWIG_Python_TypeQuery(const char *type)
{
  PyObject *cache = SWIG_Python_TypeCache();
  PyObject *key = SWIG_Python_str_FromChar(type); 
  PyObject *obj = PyDict_GetItem(cache, key);
  swig_type_info *descriptor;
  if (obj) {
#ifdef SWIGPY_USE_CAPSULE
    descriptor = (swig_type_info *) PyCapsule_GetPointer(obj, NULL);
#else
    descriptor = (swig_type_info *) PyCObject_AsVoidPtr(obj);
#endif
  } else {
    swig_module_info *swig_module = SWIG_GetModule(0);
    descriptor = SWIG_TypeQueryModule(swig_module, swig_module, type);
    if (descriptor) {
#ifdef SWIGPY_USE_CAPSULE
      obj = PyCapsule_New((void*) descriptor, NULL, NULL);
#else
      obj = PyCObject_FromVoidPtr(descriptor, NULL);
#endif
      PyDict_SetItem(cache, key, obj);
      Py_DECREF(obj);
    }
  }
  Py_DECREF(key);
  return descriptor;
}

/* 
   For backward compatibility only
*/
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_arg_fail(arg)      SWIG_Python_ArgFail(arg)
#define SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)

SWIGRUNTIME int
SWIG_Python_AddErrMesg(const char* mesg, int infront)
{  
  if (PyErr_Occurred()) {
    PyObject *type = 0;
    PyObject *value = 0;
    PyObject *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    if (value) {
      char *tmp;
      PyObject *old_str = PyObject_Str(value);
      Py_XINCREF(type);
      PyErr_Clear();
      if (infront) {
	PyErr_Format(type, "%s %s", mesg, tmp = SWIG_Python_str_AsChar(old_str));
      } else {
	PyErr_Format(type, "%s %s", tmp = SWIG_Python_str_AsChar(old_str), mesg);
      }
      SWIG_Python_str_DelForPy3(tmp);
      Py_DECREF(old_str);
    }
    return 1;
  } else {
    return 0;
  }
}
  
SWIGRUNTIME int
SWIG_Python_ArgFail(int argnum)
{
  if (PyErr_Occurred()) {
    /* add information about failing argument */
    char mesg[256];
    PyOS_snprintf(mesg, sizeof(mesg), "argument number %d:", argnum);
    return SWIG_Python_AddErrMesg(mesg, 1);
  } else {
    return 0;
  }
}

SWIGRUNTIMEINLINE const char *
SwigPyObject_GetDesc(PyObject *self)
{
  SwigPyObject *v = (SwigPyObject *)self;
  swig_type_info *ty = v ? v->ty : 0;
  return ty ? ty->str : "";
}

SWIGRUNTIME void
SWIG_Python_TypeError(const char *type, PyObject *obj)
{
  if (type) {
#if defined(SWIG_COBJECT_TYPES)
    if (obj && SwigPyObject_Check(obj)) {
      const char *otype = (const char *) SwigPyObject_GetDesc(obj);
      if (otype) {
	PyErr_Format(PyExc_TypeError, "a '%s' is expected, 'SwigPyObject(%s)' is received",
		     type, otype);
	return;
      }
    } else 
#endif      
    {
      const char *otype = (obj ? obj->ob_type->tp_name : 0); 
      if (otype) {
	PyObject *str = PyObject_Str(obj);
	const char *cstr = str ? SWIG_Python_str_AsChar(str) : 0;
	if (cstr) {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s(%s)' is received",
		       type, otype, cstr);
          SWIG_Python_str_DelForPy3(cstr);
	} else {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s' is received",
		       type, otype);
	}
	Py_XDECREF(str);
	return;
      }
    }   
    PyErr_Format(PyExc_TypeError, "a '%s' is expected", type);
  } else {
    PyErr_Format(PyExc_TypeError, "unexpected type is received");
  }
}


/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME void *
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int SWIGUNUSEDPARM(argnum), int flags) {
  void *result;
  if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
    PyErr_Clear();
#if SWIG_POINTER_EXCEPTION
    if (flags) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
      SWIG_Python_ArgFail(argnum);
    }
#endif
  }
  return result;
}

#ifdef SWIGPYTHON_BUILTIN
SWIGRUNTIME int
SWIG_Python_NonDynamicSetAttr(PyObject *obj, PyObject *name, PyObject *value) {
  PyTypeObject *tp = obj->ob_type;
  PyObject *descr;
  PyObject *encoded_name;
  descrsetfunc f;
  int res = -1;

# ifdef Py_USING_UNICODE
  if (PyString_Check(name)) {
    name = PyUnicode_Decode(PyString_AsString(name), PyString_Size(name), NULL, NULL);
    if (!name)
      return -1;
  } else if (!PyUnicode_Check(name))
# else
  if (!PyString_Check(name))
# endif
  {
    PyErr_Format(PyExc_TypeError, "attribute name must be string, not '%.200s'", name->ob_type->tp_name);
    return -1;
  } else {
    Py_INCREF(name);
  }

  if (!tp->tp_dict) {
    if (PyType_Ready(tp) < 0)
      goto done;
  }

  descr = _PyType_Lookup(tp, name);
  f = NULL;
  if (descr != NULL)
    f = descr->ob_type->tp_descr_set;
  if (!f) {
    if (PyString_Check(name)) {
      encoded_name = name;
      Py_INCREF(name);
    } else {
      encoded_name = PyUnicode_AsUTF8String(name);
    }
    PyErr_Format(PyExc_AttributeError, "'%.100s' object has no attribute '%.200s'", tp->tp_name, PyString_AsString(encoded_name));
    Py_DECREF(encoded_name);
  } else {
    res = f(descr, obj, value);
  }
  
  done:
  Py_DECREF(name);
  return res;
}
#endif


#ifdef __cplusplus
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



  #define SWIG_exception(code, msg) do { SWIG_Error(code, msg); SWIG_fail;; } while(0) 

/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that Python proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DIRECTOR_PYTHON_HEADER_
#define SWIG_DIRECTOR_PYTHON_HEADER_

#include <string>
#include <iostream>
#include <exception>
#include <vector>
#include <map>


/*
  Use -DSWIG_PYTHON_DIRECTOR_NO_VTABLE if you don't want to generate a 'virtual
  table', and avoid multiple GetAttr calls to retrieve the python
  methods.
*/

#ifndef SWIG_PYTHON_DIRECTOR_NO_VTABLE
#ifndef SWIG_PYTHON_DIRECTOR_VTABLE
#define SWIG_PYTHON_DIRECTOR_VTABLE
#endif
#endif



/*
  Use -DSWIG_DIRECTOR_NO_UEH if you prefer to avoid the use of the
  Undefined Exception Handler provided by swig.
*/
#ifndef SWIG_DIRECTOR_NO_UEH
#ifndef SWIG_DIRECTOR_UEH
#define SWIG_DIRECTOR_UEH
#endif
#endif


/*
  Use -DSWIG_DIRECTOR_NORTTI if you prefer to avoid the use of the
  native C++ RTTI and dynamic_cast<>. But be aware that directors
  could stop working when using this option.
*/
#ifdef SWIG_DIRECTOR_NORTTI
/*
   When we don't use the native C++ RTTI, we implement a minimal one
   only for Directors.
*/
# ifndef SWIG_DIRECTOR_RTDIR
# define SWIG_DIRECTOR_RTDIR

namespace Swig {
  class Director;
  SWIGINTERN std::map<void *, Director *>& get_rtdir_map() {
    static std::map<void *, Director *> rtdir_map;
    return rtdir_map;
  }

  SWIGINTERNINLINE void set_rtdir(void *vptr, Director *rtdir) {
    get_rtdir_map()[vptr] = rtdir;
  }

  SWIGINTERNINLINE Director *get_rtdir(void *vptr) {
    std::map<void *, Director *>::const_iterator pos = get_rtdir_map().find(vptr);
    Director *rtdir = (pos != get_rtdir_map().end()) ? pos->second : 0;
    return rtdir;
  }
}
# endif /* SWIG_DIRECTOR_RTDIR */

# define SWIG_DIRECTOR_CAST(ARG) Swig::get_rtdir(static_cast<void *>(ARG))
# define SWIG_DIRECTOR_RGTR(ARG1, ARG2) Swig::set_rtdir(static_cast<void *>(ARG1), ARG2)

#else

# define SWIG_DIRECTOR_CAST(ARG) dynamic_cast<Swig::Director *>(ARG)
# define SWIG_DIRECTOR_RGTR(ARG1, ARG2)

#endif /* SWIG_DIRECTOR_NORTTI */

extern "C" {
  struct swig_type_info;
}

namespace Swig {

  /* memory handler */
  struct GCItem {
    virtual ~GCItem() {}

    virtual int get_own() const {
      return 0;
    }
  };

  struct GCItem_var {
    GCItem_var(GCItem *item = 0) : _item(item) {
    }

    GCItem_var& operator=(GCItem *item) {
      GCItem *tmp = _item;
      _item = item;
      delete tmp;
      return *this;
    }

    ~GCItem_var() {
      delete _item;
    }

    GCItem * operator->() const {
      return _item;
    }

  private:
    GCItem *_item;
  };

  struct GCItem_Object : GCItem {
    GCItem_Object(int own) : _own(own) {
    }

    virtual ~GCItem_Object() {
    }

    int get_own() const {
      return _own;
    }

  private:
    int _own;
  };

  template <typename Type>
  struct GCItem_T : GCItem {
    GCItem_T(Type *ptr) : _ptr(ptr) {
    }

    virtual ~GCItem_T() {
      delete _ptr;
    }

  private:
    Type *_ptr;
  };

  template <typename Type>
  struct GCArray_T : GCItem {
    GCArray_T(Type *ptr) : _ptr(ptr) {
    }

    virtual ~GCArray_T() {
      delete[] _ptr;
    }

  private:
    Type *_ptr;
  };

  /* base class for director exceptions */
  class DirectorException : public std::exception {
  protected:
    std::string swig_msg;
  public:
    DirectorException(PyObject *error, const char *hdr ="", const char *msg ="") : swig_msg(hdr) {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      if (msg[0]) {
        swig_msg += " ";
        swig_msg += msg;
      }
      if (!PyErr_Occurred()) {
        PyErr_SetString(error, what());
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
    }

    virtual ~DirectorException() throw() {
    }

    /* Deprecated, use what() instead */
    const char *getMessage() const {
      return what();
    }

    const char *what() const throw() {
      return swig_msg.c_str();
    }

    static void raise(PyObject *error, const char *msg) {
      throw DirectorException(error, msg);
    }

    static void raise(const char *msg) {
      raise(PyExc_RuntimeError, msg);
    }
  };

  /* unknown exception handler  */
  class UnknownExceptionHandler {
#ifdef SWIG_DIRECTOR_UEH
    static void handler() {
      try {
        throw;
      } catch (DirectorException& e) {
        std::cerr << "SWIG Director exception caught:" << std::endl
                  << e.what() << std::endl;
      } catch (std::exception& e) {
        std::cerr << "std::exception caught: "<< e.what() << std::endl;
      } catch (...) {
        std::cerr << "Unknown exception caught." << std::endl;
      }

      std::cerr << std::endl
                << "Python interpreter traceback:" << std::endl;
      PyErr_Print();
      std::cerr << std::endl;

      std::cerr << "This exception was caught by the SWIG unexpected exception handler." << std::endl
                << "Try using %feature(\"director:except\") to avoid reaching this point." << std::endl
                << std::endl
                << "Exception is being re-thrown, program will likely abort/terminate." << std::endl;
      throw;
    }

  public:

    std::unexpected_handler old;
    UnknownExceptionHandler(std::unexpected_handler nh = handler) {
      old = std::set_unexpected(nh);
    }

    ~UnknownExceptionHandler() {
      std::set_unexpected(old);
    }
#endif
  };

  /* type mismatch in the return value from a python method call */
  class DirectorTypeMismatchException : public DirectorException {
  public:
    DirectorTypeMismatchException(PyObject *error, const char *msg="")
      : DirectorException(error, "SWIG director type mismatch", msg) {
    }

    DirectorTypeMismatchException(const char *msg="")
      : DirectorException(PyExc_TypeError, "SWIG director type mismatch", msg) {
    }

    static void raise(PyObject *error, const char *msg) {
      throw DirectorTypeMismatchException(error, msg);
    }

    static void raise(const char *msg) {
      throw DirectorTypeMismatchException(msg);
    }
  };

  /* any python exception that occurs during a director method call */
  class DirectorMethodException : public DirectorException {
  public:
    DirectorMethodException(const char *msg = "")
      : DirectorException(PyExc_RuntimeError, "SWIG director method error.", msg) {
    }

    static void raise(const char *msg) {
      throw DirectorMethodException(msg);
    }
  };

  /* attempt to call a pure virtual method via a director method */
  class DirectorPureVirtualException : public DirectorException {
  public:
    DirectorPureVirtualException(const char *msg = "")
      : DirectorException(PyExc_RuntimeError, "SWIG director pure virtual method called", msg) {
    }

    static void raise(const char *msg) {
      throw DirectorPureVirtualException(msg);
    }
  };


#if defined(SWIG_PYTHON_THREADS)
/*  __THREAD__ is the old macro to activate some thread support */
# if !defined(__THREAD__)
#   define __THREAD__ 1
# endif
#endif

#ifdef __THREAD__
# include "pythread.h"
  class Guard {
    PyThread_type_lock &mutex_;

  public:
    Guard(PyThread_type_lock & mutex) : mutex_(mutex) {
      PyThread_acquire_lock(mutex_, WAIT_LOCK);
    }

    ~Guard() {
      PyThread_release_lock(mutex_);
    }
  };
# define SWIG_GUARD(mutex) Guard _guard(mutex)
#else
# define SWIG_GUARD(mutex)
#endif

  /* director base class */
  class Director {
  private:
    /* pointer to the wrapped python object */
    PyObject *swig_self;
    /* flag indicating whether the object is owned by python or c++ */
    mutable bool swig_disown_flag;

    /* decrement the reference count of the wrapped python object */
    void swig_decref() const {
      if (swig_disown_flag) {
        SWIG_PYTHON_THREAD_BEGIN_BLOCK;
        Py_DECREF(swig_self);
        SWIG_PYTHON_THREAD_END_BLOCK;
      }
    }

  public:
    /* wrap a python object. */
    Director(PyObject *self) : swig_self(self), swig_disown_flag(false) {
    }

    /* discard our reference at destruction */
    virtual ~Director() {
      swig_decref();
    }

    /* return a pointer to the wrapped python object */
    PyObject *swig_get_self() const {
      return swig_self;
    }

    /* acquire ownership of the wrapped python object (the sense of "disown" is from python) */
    void swig_disown() const {
      if (!swig_disown_flag) {
        swig_disown_flag=true;
        swig_incref();
      }
    }

    /* increase the reference count of the wrapped python object */
    void swig_incref() const {
      if (swig_disown_flag) {
        Py_INCREF(swig_self);
      }
    }

    /* methods to implement pseudo protected director members */
    virtual bool swig_get_inner(const char * /* swig_protected_method_name */) const {
      return true;
    }

    virtual void swig_set_inner(const char * /* swig_protected_method_name */, bool /* swig_val */) const {
    }

  /* ownership management */
  private:
    typedef std::map<void *, GCItem_var> swig_ownership_map;
    mutable swig_ownership_map swig_owner;
#ifdef __THREAD__
    static PyThread_type_lock swig_mutex_own;
#endif

  public:
    template <typename Type>
    void swig_acquire_ownership_array(Type *vptr) const {
      if (vptr) {
        SWIG_GUARD(swig_mutex_own);
        swig_owner[vptr] = new GCArray_T<Type>(vptr);
      }
    }

    template <typename Type>
    void swig_acquire_ownership(Type *vptr) const {
      if (vptr) {
        SWIG_GUARD(swig_mutex_own);
        swig_owner[vptr] = new GCItem_T<Type>(vptr);
      }
    }

    void swig_acquire_ownership_obj(void *vptr, int own) const {
      if (vptr && own) {
        SWIG_GUARD(swig_mutex_own);
        swig_owner[vptr] = new GCItem_Object(own);
      }
    }

    int swig_release_ownership(void *vptr) const {
      int own = 0;
      if (vptr) {
        SWIG_GUARD(swig_mutex_own);
        swig_ownership_map::iterator iter = swig_owner.find(vptr);
        if (iter != swig_owner.end()) {
          own = iter->second->get_own();
          swig_owner.erase(iter);
        }
      }
      return own;
    }

    template <typename Type>
    static PyObject *swig_pyobj_disown(PyObject *pyobj, PyObject *SWIGUNUSEDPARM(args)) {
      SwigPyObject *sobj = (SwigPyObject *)pyobj;
      sobj->own = 0;
      Director *d = SWIG_DIRECTOR_CAST(reinterpret_cast<Type *>(sobj->ptr));
      if (d)
        d->swig_disown();
      return PyWeakref_NewProxy(pyobj, NULL);
    }
  };

#ifdef __THREAD__
  PyThread_type_lock Director::swig_mutex_own = PyThread_allocate_lock();
#endif
}

#endif

/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_ArcIterator swig_types[0]
#define SWIGTYPE_p_BNGenerator swig_types[1]
#define SWIGTYPE_p_EdgeIterator swig_types[2]
#define SWIGTYPE_p_IDGenerator swig_types[3]
#define SWIGTYPE_p_JTGenerator swig_types[4]
#define SWIGTYPE_p_NodeConstIterator swig_types[5]
#define SWIGTYPE_p_NodeConstIteratorSafe swig_types[6]
#define SWIGTYPE_p_NodeIterator swig_types[7]
#define SWIGTYPE_p_NodeIteratorSafe swig_types[8]
#define SWIGTYPE_p_NodePropertyT_gum__PotentialT_double_t_const_p_t swig_types[9]
#define SWIGTYPE_p_NodePropertyT_gum__SequenceT_std__string_t_t swig_types[10]
#define SWIGTYPE_p_NodePropertyT_std__vectorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_t_t_t swig_types[11]
#define SWIGTYPE_p_NodePropertyT_unsigned_int_t swig_types[12]
#define SWIGTYPE_p_NodePropertyT_unsigned_long_t swig_types[13]
#define SWIGTYPE_p_PRMexplorer swig_types[14]
#define SWIGTYPE_p_PythonApproximationListener swig_types[15]
#define SWIGTYPE_p_PythonBNListener swig_types[16]
#define SWIGTYPE_p_PythonLoadListener swig_types[17]
#define SWIGTYPE_p_RelevantPotentialsFinderType swig_types[18]
#define SWIGTYPE_p_SetT_gum__Arc_t swig_types[19]
#define SWIGTYPE_p_SetT_gum__Arc_t__const_iterator swig_types[20]
#define SWIGTYPE_p_SetT_gum__Edge_t swig_types[21]
#define SWIGTYPE_p_SetT_gum__Edge_t__const_iterator swig_types[22]
#define SWIGTYPE_p_SetT_gum__PotentialT_double_t_const_p_t swig_types[23]
#define SWIGTYPE_p_SetT_unsigned_int_t swig_types[24]
#define SWIGTYPE_p_SetT_unsigned_int_t__const_iterator swig_types[25]
#define SWIGTYPE_p_Triangulation swig_types[26]
#define SWIGTYPE_p_allocator_type swig_types[27]
#define SWIGTYPE_p_cArcP swig_types[28]
#define SWIGTYPE_p_char swig_types[29]
#define SWIGTYPE_p_const_pointer swig_types[30]
#define SWIGTYPE_p_const_reference swig_types[31]
#define SWIGTYPE_p_difference_type swig_types[32]
#define SWIGTYPE_p_gum__ApproximationScheme swig_types[33]
#define SWIGTYPE_p_gum__Arc swig_types[34]
#define SWIGTYPE_p_gum__ArcGraphPart swig_types[35]
#define SWIGTYPE_p_gum__BayesNetInferenceT_double_t swig_types[36]
#define SWIGTYPE_p_gum__BayesNetT_double_t swig_types[37]
#define SWIGTYPE_p_gum__BruteForceKLT_double_t swig_types[38]
#define SWIGTYPE_p_gum__CPTError swig_types[39]
#define SWIGTYPE_p_gum__CPTNoSumTo1 swig_types[40]
#define SWIGTYPE_p_gum__CliqueGraph swig_types[41]
#define SWIGTYPE_p_gum__DAG swig_types[42]
#define SWIGTYPE_p_gum__DAGmodel swig_types[43]
#define SWIGTYPE_p_gum__DatabaseError swig_types[44]
#define SWIGTYPE_p_gum__DefaultInLabel swig_types[45]
#define SWIGTYPE_p_gum__DiGraph swig_types[46]
#define SWIGTYPE_p_gum__DiscreteVariable swig_types[47]
#define SWIGTYPE_p_gum__DiscretizedVariableT_double_t swig_types[48]
#define SWIGTYPE_p_gum__DuplicateElement swig_types[49]
#define SWIGTYPE_p_gum__DuplicateLabel swig_types[50]
#define SWIGTYPE_p_gum__Edge swig_types[51]
#define SWIGTYPE_p_gum__EdgeGraphPart swig_types[52]
#define SWIGTYPE_p_gum__EmptyBSTree swig_types[53]
#define SWIGTYPE_p_gum__EmptySet swig_types[54]
#define SWIGTYPE_p_gum__Exception swig_types[55]
#define SWIGTYPE_p_gum__FactoryError swig_types[56]
#define SWIGTYPE_p_gum__FactoryInvalidState swig_types[57]
#define SWIGTYPE_p_gum__FatalError swig_types[58]
#define SWIGTYPE_p_gum__FormatNotFound swig_types[59]
#define SWIGTYPE_p_gum__GibbsInferenceT_double_t swig_types[60]
#define SWIGTYPE_p_gum__GibbsKLT_double_t swig_types[61]
#define SWIGTYPE_p_gum__GraphError swig_types[62]
#define SWIGTYPE_p_gum__IApproximationSchemeConfiguration swig_types[63]
#define SWIGTYPE_p_gum__IBayesNetT_double_t swig_types[64]
#define SWIGTYPE_p_gum__IOError swig_types[65]
#define SWIGTYPE_p_gum__IdError swig_types[66]
#define SWIGTYPE_p_gum__IncompatibleEvidence swig_types[67]
#define SWIGTYPE_p_gum__IncompatibleScoreApriori swig_types[68]
#define SWIGTYPE_p_gum__InfluenceDiagramInferenceT_double_t swig_types[69]
#define SWIGTYPE_p_gum__InfluenceDiagramT_double_t swig_types[70]
#define SWIGTYPE_p_gum__Instantiation swig_types[71]
#define SWIGTYPE_p_gum__InvalidArc swig_types[72]
#define SWIGTYPE_p_gum__InvalidArgument swig_types[73]
#define SWIGTYPE_p_gum__InvalidArgumentsNumber swig_types[74]
#define SWIGTYPE_p_gum__InvalidDirectedCycle swig_types[75]
#define SWIGTYPE_p_gum__InvalidEdge swig_types[76]
#define SWIGTYPE_p_gum__InvalidNode swig_types[77]
#define SWIGTYPE_p_gum__KLT_double_t swig_types[78]
#define SWIGTYPE_p_gum__LabelizedVariable swig_types[79]
#define SWIGTYPE_p_gum__LazyPropagationT_double_t swig_types[80]
#define SWIGTYPE_p_gum__LearningError swig_types[81]
#define SWIGTYPE_p_gum__ListT_gum__PotentialT_double_t_const_p_t swig_types[82]
#define SWIGTYPE_p_gum__MissingVariableInDatabase swig_types[83]
#define SWIGTYPE_p_gum__MixedGraph swig_types[84]
#define SWIGTYPE_p_gum__MultiDimAdressable swig_types[85]
#define SWIGTYPE_p_gum__MultiDimArrayT_double_t swig_types[86]
#define SWIGTYPE_p_gum__MultiDimContainerT_double_t swig_types[87]
#define SWIGTYPE_p_gum__MultiDimDecoratorT_double_t swig_types[88]
#define SWIGTYPE_p_gum__MultiDimImplementationT_double_t swig_types[89]
#define SWIGTYPE_p_gum__MultiDimInterface swig_types[90]
#define SWIGTYPE_p_gum__MultiDimWithOffsetT_double_t swig_types[91]
#define SWIGTYPE_p_gum__NoChild swig_types[92]
#define SWIGTYPE_p_gum__NoNeighbour swig_types[93]
#define SWIGTYPE_p_gum__NoParent swig_types[94]
#define SWIGTYPE_p_gum__NodeGraphPart swig_types[95]
#define SWIGTYPE_p_gum__NotFound swig_types[96]
#define SWIGTYPE_p_gum__NullElement swig_types[97]
#define SWIGTYPE_p_gum__OperationNotAllowed swig_types[98]
#define SWIGTYPE_p_gum__OutOfBounds swig_types[99]
#define SWIGTYPE_p_gum__OutOfLowerBound swig_types[100]
#define SWIGTYPE_p_gum__OutOfUpperBound swig_types[101]
#define SWIGTYPE_p_gum__PossiblyIncompatibleScoreApriori swig_types[102]
#define SWIGTYPE_p_gum__PotentialT_double_t swig_types[103]
#define SWIGTYPE_p_gum__RangeVariable swig_types[104]
#define SWIGTYPE_p_gum__ReferenceError swig_types[105]
#define SWIGTYPE_p_gum__SequenceT_gum__DiscreteVariable_const_p_t swig_types[106]
#define SWIGTYPE_p_gum__SequenceT_unsigned_int_t swig_types[107]
#define SWIGTYPE_p_gum__SizeError swig_types[108]
#define SWIGTYPE_p_gum__SyntaxError swig_types[109]
#define SWIGTYPE_p_gum__TypeError swig_types[110]
#define SWIGTYPE_p_gum__UndefinedElement swig_types[111]
#define SWIGTYPE_p_gum__UndefinedIteratorKey swig_types[112]
#define SWIGTYPE_p_gum__UndefinedIteratorValue swig_types[113]
#define SWIGTYPE_p_gum__UndiGraph swig_types[114]
#define SWIGTYPE_p_gum__UnknownLabelInDatabase swig_types[115]
#define SWIGTYPE_p_gum__UtilityTableT_double_t swig_types[116]
#define SWIGTYPE_p_gum__Variable swig_types[117]
#define SWIGTYPE_p_gum__VariableNodeMap swig_types[118]
#define SWIGTYPE_p_gum__WrongClassElement swig_types[119]
#define SWIGTYPE_p_gum__WrongType swig_types[120]
#define SWIGTYPE_p_gum__credal__CNLoopyPropagationT_double_t swig_types[121]
#define SWIGTYPE_p_gum__credal__CNMonteCarloSamplingT_double_gum__LazyPropagationT_double_t_t swig_types[122]
#define SWIGTYPE_p_gum__credal__CredalNetT_double_t swig_types[123]
#define SWIGTYPE_p_gum__learning__BNLearnerT_double_t swig_types[124]
#define SWIGTYPE_p_gum__learning__DatabaseVectInRAM swig_types[125]
#define SWIGTYPE_p_gum__learning__genericBNLearner swig_types[126]
#define SWIGTYPE_p_iterator_category swig_types[127]
#define SWIGTYPE_p_msg swig_types[128]
#define SWIGTYPE_p_node_const_iterator swig_types[129]
#define SWIGTYPE_p_node_const_iterator_safe swig_types[130]
#define SWIGTYPE_p_node_iterator swig_types[131]
#define SWIGTYPE_p_node_iterator_safe swig_types[132]
#define SWIGTYPE_p_p_PyObject swig_types[133]
#define SWIGTYPE_p_pointer swig_types[134]
#define SWIGTYPE_p_reference swig_types[135]
#define SWIGTYPE_p_size_type swig_types[136]
#define SWIGTYPE_p_std__allocatorT_double_t swig_types[137]
#define SWIGTYPE_p_std__allocatorT_std__string_t swig_types[138]
#define SWIGTYPE_p_std__default_random_engine swig_types[139]
#define SWIGTYPE_p_std__functionT_double_fdoubleF_t swig_types[140]
#define SWIGTYPE_p_std__functionT_double_fdouble_doubleF_t swig_types[141]
#define SWIGTYPE_p_std__invalid_argument swig_types[142]
#define SWIGTYPE_p_std__ostream swig_types[143]
#define SWIGTYPE_p_std__string swig_types[144]
#define SWIGTYPE_p_std__vectorT_PythonLoadListener_std__allocatorT_PythonLoadListener_t_t swig_types[145]
#define SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t swig_types[146]
#define SWIGTYPE_p_std__vectorT_gum__DiscreteVariable_const_p_std__allocatorT_gum__DiscreteVariable_const_p_t_t swig_types[147]
#define SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t swig_types[148]
#define SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t swig_types[149]
#define SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_t_t swig_types[150]
#define SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t swig_types[151]
#define SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t swig_types[152]
#define SWIGTYPE_p_swig__SwigPyIterator swig_types[153]
#define SWIGTYPE_p_unsigned_int swig_types[154]
#define SWIGTYPE_p_unsigned_long swig_types[155]
#define SWIGTYPE_p_value_type swig_types[156]
#define SWIGTYPE_p_void swig_types[157]
static swig_type_info *swig_types[159];
static swig_module_info swig_module = {swig_types, 158, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#if (PY_VERSION_HEX <= 0x02000000)
# if !defined(SWIG_PYTHON_CLASSIC)
#  error "This python version requires swig to be run with the '-classic' option"
# endif
#endif

/*-----------------------------------------------
              @(target):= _pyAgrum.so
  ------------------------------------------------*/
#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_init    PyInit__pyAgrum

#else
#  define SWIG_init    init_pyAgrum

#endif
#define SWIG_name    "_pyAgrum"

#define SWIGVERSION 0x030011 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


namespace swig {
  class SwigPtr_PyObject {
  protected:
    PyObject *_obj;

  public:
    SwigPtr_PyObject() :_obj(0)
    {
    }

    SwigPtr_PyObject(const SwigPtr_PyObject& item) : _obj(item._obj)
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XINCREF(_obj);      
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    SwigPtr_PyObject(PyObject *obj, bool initial_ref = true) :_obj(obj)
    {
      if (initial_ref) {
        SWIG_PYTHON_THREAD_BEGIN_BLOCK;
        Py_XINCREF(_obj);
        SWIG_PYTHON_THREAD_END_BLOCK;
      }
    }
    
    SwigPtr_PyObject & operator=(const SwigPtr_PyObject& item) 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XINCREF(item._obj);
      Py_XDECREF(_obj);
      _obj = item._obj;
      SWIG_PYTHON_THREAD_END_BLOCK;
      return *this;      
    }
    
    ~SwigPtr_PyObject() 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XDECREF(_obj);
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    operator PyObject *() const
    {
      return _obj;
    }

    PyObject *operator->() const
    {
      return _obj;
    }
  };
}


namespace swig {
  struct SwigVar_PyObject : SwigPtr_PyObject {
    SwigVar_PyObject(PyObject* obj = 0) : SwigPtr_PyObject(obj, false) { }
    
    SwigVar_PyObject & operator = (PyObject* obj)
    {
      Py_XDECREF(_obj);
      _obj = obj;
      return *this;      
    }
  };
}


#include <iostream>

#if PY_VERSION_HEX >= 0x03020000
# define SWIGPY_SLICE_ARG(obj) ((PyObject*) (obj))
#else
# define SWIGPY_SLICE_ARG(obj) ((PySliceObject*) (obj))
#endif


#include <typeinfo>
#include <stdexcept>


#if defined(__GNUC__)
#  if __GNUC__ == 2 && __GNUC_MINOR <= 96
#     define SWIG_STD_NOMODERN_STL
#  endif
#endif


#include <string>


#include <stddef.h>


namespace swig {
  struct stop_iteration {
  };

  struct SwigPyIterator {
  private:
    SwigPtr_PyObject _seq;

  protected:
    SwigPyIterator(PyObject *seq) : _seq(seq)
    {
    }
      
  public:
    virtual ~SwigPyIterator() {}

    // Access iterator method, required by Python
    virtual PyObject *value() const = 0;

    // Forward iterator method, required by Python
    virtual SwigPyIterator *incr(size_t n = 1) = 0;
    
    // Backward iterator method, very common in C++, but not required in Python
    virtual SwigPyIterator *decr(size_t /*n*/ = 1)
    {
      throw stop_iteration();
    }

    // Random access iterator methods, but not required in Python
    virtual ptrdiff_t distance(const SwigPyIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }

    virtual bool equal (const SwigPyIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }
    
    // C++ common/needed methods
    virtual SwigPyIterator *copy() const = 0;

    PyObject *next()     
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      PyObject *obj = value();
      incr();       
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads
      return obj;     
    }

    /* Make an alias for Python 3.x */
    PyObject *__next__()
    {
      return next();
    }

    PyObject *previous()
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      decr();
      PyObject *obj = value();
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads       
      return obj;
    }

    SwigPyIterator *advance(ptrdiff_t n)
    {
      return  (n > 0) ?  incr(n) : decr(-n);
    }
      
    bool operator == (const SwigPyIterator& x)  const
    {
      return equal(x);
    }
      
    bool operator != (const SwigPyIterator& x) const
    {
      return ! operator==(x);
    }
      
    SwigPyIterator& operator += (ptrdiff_t n)
    {
      return *advance(n);
    }

    SwigPyIterator& operator -= (ptrdiff_t n)
    {
      return *advance(-n);
    }
      
    SwigPyIterator* operator + (ptrdiff_t n) const
    {
      return copy()->advance(n);
    }

    SwigPyIterator* operator - (ptrdiff_t n) const
    {
      return copy()->advance(-n);
    }
      
    ptrdiff_t operator - (const SwigPyIterator& x) const
    {
      return x.distance(*this);
    }
      
    static swig_type_info* descriptor() {
      static int init = 0;
      static swig_type_info* desc = 0;
      if (!init) {
	desc = SWIG_TypeQuery("swig::SwigPyIterator *");
	init = 1;
      }	
      return desc;
    }    
  };

#if defined(SWIGPYTHON_BUILTIN)
  inline PyObject* make_output_iterator_builtin (PyObject *pyself)
  {
    Py_INCREF(pyself);
    return pyself;
  }
#endif
}


SWIGINTERN int
SWIG_AsVal_double (PyObject *obj, double *val)
{
  int res = SWIG_TypeError;
  if (PyFloat_Check(obj)) {
    if (val) *val = PyFloat_AsDouble(obj);
    return SWIG_OK;
#if PY_VERSION_HEX < 0x03000000
  } else if (PyInt_Check(obj)) {
    if (val) *val = (double) PyInt_AsLong(obj);
    return SWIG_OK;
#endif
  } else if (PyLong_Check(obj)) {
    double v = PyLong_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    double d = PyFloat_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = d;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      long v = PyLong_AsLong(obj);
      if (!PyErr_Occurred()) {
	if (val) *val = v;
	return SWIG_AddCast(SWIG_AddCast(SWIG_OK));
      } else {
	PyErr_Clear();
      }
    }
  }
#endif
  return res;
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx = floor(x);
   double cx = ceil(x);
   double rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_long (PyObject *obj, unsigned long *val) 
{
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(obj)) {
    long v = PyInt_AsLong(obj);
    if (v >= 0) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      return SWIG_OverflowError;
    }
  } else
#endif
  if (PyLong_Check(obj)) {
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      return SWIG_OverflowError;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, ULONG_MAX)) {
	if (val) *val = (unsigned long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


#if defined(LLONG_MAX) && !defined(SWIG_LONG_LONG_AVAILABLE)
#  define SWIG_LONG_LONG_AVAILABLE
#endif


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERN int
SWIG_AsVal_unsigned_SS_long_SS_long (PyObject *obj, unsigned long long *val)
{
  int res = SWIG_TypeError;
  if (PyLong_Check(obj)) {
    unsigned long long v = PyLong_AsUnsignedLongLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      res = SWIG_OverflowError;
    }
  } else {
    unsigned long v;
    res = SWIG_AsVal_unsigned_SS_long (obj,&v);
    if (SWIG_IsOK(res)) {
      if (val) *val = v;
      return res;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    const double mant_max = 1LL << DBL_MANT_DIG;
    double d;
    res = SWIG_AsVal_double (obj,&d);
    if (SWIG_IsOK(res) && !SWIG_CanCastAsInteger(&d, 0, mant_max))
      return SWIG_OverflowError;
    if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, mant_max)) {
      if (val) *val = (unsigned long long)(d);
      return SWIG_AddCast(res);
    }
    res = SWIG_TypeError;
  }
#endif
  return res;
}
#endif


SWIGINTERNINLINE int
SWIG_AsVal_size_t (PyObject * obj, size_t *val)
{
  int res = SWIG_TypeError;
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(size_t) <= sizeof(unsigned long)) {
#endif
    unsigned long v;
    res = SWIG_AsVal_unsigned_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else if (sizeof(size_t) <= sizeof(unsigned long long)) {
    unsigned long long v;
    res = SWIG_AsVal_unsigned_SS_long_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
  }
#endif
  return res;
}


  #define SWIG_From_long   PyInt_FromLong 


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERNINLINE PyObject* 
SWIG_From_long_SS_long  (long long value)
{
  return ((value < LONG_MIN) || (value > LONG_MAX)) ?
    PyLong_FromLongLong(value) : PyInt_FromLong(static_cast< long >(value));
}
#endif


SWIGINTERNINLINE PyObject *
SWIG_From_ptrdiff_t  (ptrdiff_t value)
{    
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(ptrdiff_t) <= sizeof(long)) {
#endif
    return SWIG_From_long  (static_cast< long >(value));
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else {
    /* assume sizeof(ptrdiff_t) <= sizeof(long long) */
    return SWIG_From_long_SS_long  (static_cast< long long >(value));
  }
#endif
}


SWIGINTERNINLINE PyObject*
  SWIG_From_bool  (bool value)
{
  return PyBool_FromLong(value ? 1 : 0);
}


SWIGINTERN int
SWIG_AsVal_long (PyObject *obj, long* val)
{
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else
#endif
  if (PyLong_Check(obj)) {
    long v = PyLong_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      return SWIG_OverflowError;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    long v = PyInt_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, LONG_MIN, LONG_MAX)) {
	if (val) *val = (long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERN int
SWIG_AsVal_long_SS_long (PyObject *obj, long long *val)
{
  int res = SWIG_TypeError;
  if (PyLong_Check(obj)) {
    long long v = PyLong_AsLongLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      res = SWIG_OverflowError;
    }
  } else {
    long v;
    res = SWIG_AsVal_long (obj,&v);
    if (SWIG_IsOK(res)) {
      if (val) *val = v;
      return res;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    const double mant_max = 1LL << DBL_MANT_DIG;
    const double mant_min = -mant_max;
    double d;
    res = SWIG_AsVal_double (obj,&d);
    if (SWIG_IsOK(res) && !SWIG_CanCastAsInteger(&d, mant_min, mant_max))
      return SWIG_OverflowError;
    if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, mant_min, mant_max)) {
      if (val) *val = (long long)(d);
      return SWIG_AddCast(res);
    }
    res = SWIG_TypeError;
  }
#endif
  return res;
}
#endif


SWIGINTERNINLINE int
SWIG_AsVal_ptrdiff_t (PyObject * obj, ptrdiff_t *val)
{
  int res = SWIG_TypeError;
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(ptrdiff_t) <= sizeof(long)) {
#endif
    long v;
    res = SWIG_AsVal_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< ptrdiff_t >(v);
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else if (sizeof(ptrdiff_t) <= sizeof(long long)) {
    long long v;
    res = SWIG_AsVal_long_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< ptrdiff_t >(v);
  }
#endif
  return res;
}


#include <algorithm>


#include <vector>


#define SWIG_FILE_WITH_INIT

// this should be removed at some point with a new version of SWIG
using namespace std;

#include <cmath>

#include "extensions/helpers.h"


static void SetPythonizeAgrumException() {
  try {
    throw;
  } catch ( std::bad_cast& e ) {
    PyErr_SetString ( PyExc_RuntimeError, "C++ Bad Cast" );
  } catch ( gum::NotFound& e ) {
    PyErr_SetString ( PyExc_IndexError, e.errorContent().c_str() );
  } catch ( gum::DefaultInLabel& e ) {
    gum::DefaultInLabel* ecopy = new gum::DefaultInLabel ( e );
    PyObject* err = SWIG_NewPointerObj ( ecopy,
    SWIGTYPE_p_gum__DefaultInLabel,
    1 );
    PyErr_SetObject (
      SWIG_Python_ExceptionType ( SWIGTYPE_p_gum__DefaultInLabel ), err );
  } catch ( gum::IdError& e ) {
    gum::IdError* ecopy = new gum::IdError ( e );
    PyObject* err = SWIG_NewPointerObj ( ecopy,
    SWIGTYPE_p_gum__IdError,
    1 );
    PyErr_SetObject (
      SWIG_Python_ExceptionType ( SWIGTYPE_p_gum__IdError ), err );
  } catch ( gum::IOError& e ) {
    gum::IOError* ecopy = new gum::IOError ( e );
    PyObject* err = SWIG_NewPointerObj ( ecopy,
    SWIGTYPE_p_gum__IOError,
    1 );
    PyErr_SetObject (
      SWIG_Python_ExceptionType ( SWIGTYPE_p_gum__IOError ),
      err );
  } catch ( gum::OperationNotAllowed& e ) {
    gum::OperationNotAllowed* ecopy = new gum::OperationNotAllowed ( e );
    PyObject* err = SWIG_NewPointerObj ( ecopy,
    SWIGTYPE_p_gum__OperationNotAllowed,
    1 );
    PyErr_SetObject (
      SWIG_Python_ExceptionType ( SWIGTYPE_p_gum__OperationNotAllowed ),
      err );
  } catch ( gum::InvalidDirectedCycle& e ) {
    gum::InvalidDirectedCycle* ecopy = new gum::InvalidDirectedCycle ( e );
    PyObject* err = SWIG_NewPointerObj ( ecopy,
    SWIGTYPE_p_gum__InvalidDirectedCycle,
    1 );
    PyErr_SetObject (
      SWIG_Python_ExceptionType ( SWIGTYPE_p_gum__InvalidDirectedCycle ), err );
  } catch ( gum::InvalidNode& e ) {
    gum::InvalidNode* ecopy = new gum::InvalidNode ( e );
    PyObject* err = SWIG_NewPointerObj ( ecopy,
    SWIGTYPE_p_gum__InvalidNode,
    1 );
    PyErr_SetObject (
      SWIG_Python_ExceptionType ( SWIGTYPE_p_gum__InvalidNode ), err );
  } catch ( gum::InvalidArc& e ) {
    gum::InvalidArc* ecopy = new gum::InvalidArc ( e );
    PyObject* err = SWIG_NewPointerObj ( ecopy,
    SWIGTYPE_p_gum__InvalidArc,
    1 );
    PyErr_SetObject (
      SWIG_Python_ExceptionType ( SWIGTYPE_p_gum__InvalidArc ), err );
  } catch ( gum::InvalidEdge& e ) {
    gum::InvalidEdge* ecopy = new gum::InvalidEdge ( e );
    PyObject* err = SWIG_NewPointerObj ( ecopy,
    SWIGTYPE_p_gum__InvalidEdge,
    1 );
    PyErr_SetObject (
      SWIG_Python_ExceptionType ( SWIGTYPE_p_gum__InvalidEdge ), err );
  } catch ( gum::DuplicateLabel& e ) {
    gum::DuplicateLabel* ecopy = new gum::DuplicateLabel ( e );
    PyObject* err = SWIG_NewPointerObj ( ecopy,
    SWIGTYPE_p_gum__DuplicateLabel,
    1 );
    PyErr_SetObject (
      SWIG_Python_ExceptionType ( SWIGTYPE_p_gum__DuplicateLabel ), err );
  } catch ( gum::DuplicateElement& e ) {
    gum::DuplicateElement* ecopy = new gum::DuplicateElement ( e );
    PyObject* err = SWIG_NewPointerObj ( ecopy,
    SWIGTYPE_p_gum__DuplicateElement,
    1 );
    PyErr_SetObject (
      SWIG_Python_ExceptionType ( SWIGTYPE_p_gum__DuplicateElement ), err );
  } catch ( gum::OutOfLowerBound& e ) {
    gum::OutOfLowerBound* ecopy = new gum::OutOfLowerBound ( e );
    PyObject* err = SWIG_NewPointerObj ( ecopy,
    SWIGTYPE_p_gum__OutOfLowerBound,
    1 );
    PyErr_SetObject (
      SWIG_Python_ExceptionType ( SWIGTYPE_p_gum__OutOfLowerBound ), err );
  } catch ( gum::OutOfUpperBound& e ) {
    gum::OutOfUpperBound* ecopy = new gum::OutOfUpperBound ( e );
    PyObject* err = SWIG_NewPointerObj ( ecopy,
    SWIGTYPE_p_gum__OutOfUpperBound,
    1 );
    PyErr_SetObject (
      SWIG_Python_ExceptionType ( SWIGTYPE_p_gum__OutOfUpperBound ), err );
  } catch ( gum::OutOfBounds& e ) {
    gum::OutOfBounds* ecopy = new gum::OutOfBounds ( e );
    PyObject* err = SWIG_NewPointerObj ( ecopy,
    SWIGTYPE_p_gum__OutOfBounds,
    1 );
    PyErr_SetObject (
      SWIG_Python_ExceptionType ( SWIGTYPE_p_gum__OutOfBounds ), err );
  } catch ( gum::UnknownLabelInDatabase& e ) {
    gum::UnknownLabelInDatabase* ecopy = new gum::UnknownLabelInDatabase ( e );
    PyObject* err = SWIG_NewPointerObj ( ecopy,
    SWIGTYPE_p_gum__UnknownLabelInDatabase,
    1 );
    PyErr_SetObject (
      SWIG_Python_ExceptionType ( SWIGTYPE_p_gum__UnknownLabelInDatabase ), err );
  } catch ( gum::FatalError& e ) {
    gum::FatalError* ecopy = new gum::FatalError ( e );
    PyObject* err = SWIG_NewPointerObj ( ecopy,
    SWIGTYPE_p_gum__FatalError,
    1 );
    PyErr_SetObject (
      SWIG_Python_ExceptionType ( SWIGTYPE_p_gum__FatalError ), err );
  } catch ( gum::UndefinedElement& e ) {
    gum::UndefinedElement* ecopy = new gum::UndefinedElement ( e );
    PyObject* err = SWIG_NewPointerObj ( ecopy,
    SWIGTYPE_p_gum__UndefinedElement,
    1 );
    PyErr_SetObject (
      SWIG_Python_ExceptionType ( SWIGTYPE_p_gum__UndefinedElement ), err );
  } catch ( gum::InvalidArgument& e ) {
    gum::InvalidArgument* ecopy = new gum::InvalidArgument ( e );
    PyObject* err = SWIG_NewPointerObj ( ecopy,
    SWIGTYPE_p_gum__InvalidArgument,
    1 );
    PyErr_SetObject (
      SWIG_Python_ExceptionType ( SWIGTYPE_p_gum__InvalidArgument ), err );
  } catch ( gum::Exception& e ) {
    PyErr_SetString ( PyExc_Exception, e.errorContent().c_str() );
  } catch ( std::exception& e ) {
    PyErr_SetString ( PyExc_Exception, e.what() );
  }
}


#include "extensions/JTGenerator.h"


#include "extensions/PythonBNListener.h"
#include "extensions/PythonLoadListener.h"
#include "extensions/PythonApproximationListener.h"


SWIGINTERN int
SWIG_AsVal_unsigned_SS_int (PyObject * obj, unsigned int *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UINT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned int >(v);
    }
  }  
  return res;
}


SWIGINTERN int
SWIG_AsVal_int (PyObject * obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE PyObject*
  SWIG_From_int  (int value)
{
  return PyInt_FromLong((long) value);
}


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(PyObject *obj, char** cptr, size_t* psize, int *alloc)
{
#if PY_VERSION_HEX>=0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
  if (PyBytes_Check(obj))
#else
  if (PyUnicode_Check(obj))
#endif
#else  
  if (PyString_Check(obj))
#endif
  {
    char *cstr; Py_ssize_t len;
#if PY_VERSION_HEX>=0x03000000
#if !defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
    if (!alloc && cptr) {
        /* We can't allow converting without allocation, since the internal
           representation of string in Python 3 is UCS-2/UCS-4 but we require
           a UTF-8 representation.
           TODO(bhy) More detailed explanation */
        return SWIG_RuntimeError;
    }
    obj = PyUnicode_AsUTF8String(obj);
    if(alloc) *alloc = SWIG_NEWOBJ;
#endif
    PyBytes_AsStringAndSize(obj, &cstr, &len);
#else
    PyString_AsStringAndSize(obj, &cstr, &len);
#endif
    if (cptr) {
      if (alloc) {
	/* 
	   In python the user should not be able to modify the inner
	   string representation. To warranty that, if you define
	   SWIG_PYTHON_SAFE_CSTRINGS, a new/copy of the python string
	   buffer is always returned.

	   The default behavior is just to return the pointer value,
	   so, be careful.
	*/ 
#if defined(SWIG_PYTHON_SAFE_CSTRINGS)
	if (*alloc != SWIG_OLDOBJ) 
#else
	if (*alloc == SWIG_NEWOBJ) 
#endif
	{
	  *cptr = reinterpret_cast< char* >(memcpy((new char[len + 1]), cstr, sizeof(char)*(len + 1)));
	  *alloc = SWIG_NEWOBJ;
	} else {
	  *cptr = cstr;
	  *alloc = SWIG_OLDOBJ;
	}
      } else {
#if PY_VERSION_HEX>=0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
	*cptr = PyBytes_AsString(obj);
#else
	assert(0); /* Should never reach here with Unicode strings in Python 3 */
#endif
#else
	*cptr = SWIG_Python_str_AsChar(obj);
#endif
      }
    }
    if (psize) *psize = len + 1;
#if PY_VERSION_HEX>=0x03000000 && !defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
    Py_XDECREF(obj);
#endif
    return SWIG_OK;
  } else {
#if defined(SWIG_PYTHON_2_UNICODE)
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
#error "Cannot use both SWIG_PYTHON_2_UNICODE and SWIG_PYTHON_STRICT_BYTE_CHAR at once"
#endif
#if PY_VERSION_HEX<0x03000000
    if (PyUnicode_Check(obj)) {
      char *cstr; Py_ssize_t len;
      if (!alloc && cptr) {
        return SWIG_RuntimeError;
      }
      obj = PyUnicode_AsUTF8String(obj);
      if (PyString_AsStringAndSize(obj, &cstr, &len) != -1) {
        if (cptr) {
          if (alloc) *alloc = SWIG_NEWOBJ;
          *cptr = reinterpret_cast< char* >(memcpy((new char[len + 1]), cstr, sizeof(char)*(len + 1)));
        }
        if (psize) *psize = len + 1;

        Py_XDECREF(obj);
        return SWIG_OK;
      } else {
        Py_XDECREF(obj);
      }
    }
#endif
#endif

    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      void* vptr = 0;
      if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = (char *) vptr;
	if (psize) *psize = vptr ? (strlen((char *)vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsPtr_std_string (PyObject * obj, std::string **val) 
{
  char* buf = 0 ; size_t size = 0; int alloc = SWIG_OLDOBJ;
  if (SWIG_IsOK((SWIG_AsCharPtrAndSize(obj, &buf, &size, &alloc)))) {
    if (buf) {
      if (val) *val = new std::string(buf, size - 1);
      if (alloc == SWIG_NEWOBJ) delete[] buf;
      return SWIG_NEWOBJ;
    } else {
      if (val) *val = 0;
      return SWIG_OLDOBJ;
    }
  } else {
    static int init = 0;
    static swig_type_info* descriptor = 0;
    if (!init) {
      descriptor = SWIG_TypeQuery("std::string" " *");
      init = 1;
    }
    if (descriptor) {
      std::string *vptr;
      int res = SWIG_ConvertPtr(obj, (void**)&vptr, descriptor, 0);
      if (SWIG_IsOK(res) && val) *val = vptr;
      return res;
    }
  }
  return SWIG_ERROR;
}


#include "extensions/BNGenerator.h"


#include "extensions/IDGenerator.h"


SWIGINTERN int
SWIG_AsVal_bool (PyObject *obj, bool *val)
{
  int r;
  if (!PyBool_Check(obj))
    return SWIG_ERROR;
  r = PyObject_IsTrue(obj);
  if (r == -1)
    return SWIG_ERROR;
  if (val) *val = r ? true : false;
  return SWIG_OK;
}


#include "extensions/PRMexplorer.h"


#include <iostream>
#include <iomanip>
#include <string>
#include <ostream>
#include <sstream>
#include <vector>
#include <limits>
#include <utility>
#include <new>
#include <exception>
#include <typeinfo>

#include <agrum/core/types.h>
#include <agrum/core/utils.h>
#include <agrum/core/hashFunc.h>
#include <agrum/core/bijection.h>
#include <agrum/core/set.h>
#include <agrum/core/debug.h>
#include <agrum/core/exceptions.h>
#include <agrum/core/hashTable.h>
#include <agrum/core/refPtr.h>
#include <agrum/core/list.h>
#include <agrum/core/OMPThreads.h>

#include <agrum/graphs/edgeGraphPart.h>
#include <agrum/graphs/arcGraphPart.h>
#include <agrum/graphs/nodeGraphPart.h>

#include <agrum/graphs/diGraph.h>
#include <agrum/graphs/DAG.h>
#include <agrum/graphs/undiGraph.h>
#include <agrum/graphs/mixedGraph.h>
#include <agrum/graphs/cliqueGraph.h>
#include <agrum/graphs/triangulations/defaultTriangulation.h>
#include <agrum/variables/discreteVariable.h>
#include <agrum/multidim/multiDimInterface.h>
#include <agrum/multidim/multiDimAdressable.h>
#include <agrum/multidim/instantiation.h>
#include <agrum/multidim/multiDimContainer.h>
#include <agrum/multidim/multiDimDecorator.h>
#include <agrum/multidim/multiDimImplementation.h>
#include <agrum/multidim/multiDimWithOffset.h>
#include <agrum/multidim/multiDimReadOnly.h>
#include <agrum/multidim/ICIModels/multiDimNoisyORCompound.h>
#include <agrum/multidim/ICIModels/multiDimNoisyAND.h>
#include <agrum/graphicalModels/variableNodeMap.h>

#include <agrum/core/sequence.h>
#include <agrum/variables/variable.h>
#include <agrum/variables/discreteVariable.h>
#include <agrum/variables/labelizedVariable.h>
#include <agrum/variables/rangeVariable.h>
#include <agrum/variables/discretizedVariable.h>
#include <agrum/graphs/graphElements.h>
#include <agrum/multidim/potential.h>
#include <agrum/multidim/utilityTable.h>
#include <agrum/multidim/multiDimArray.h>

#include <agrum/BN/IBayesNet.h>
#include <agrum/BN/BayesNet.h>

#include <agrum/BN/io/BIF/BIFReader.h>
#include <agrum/BN/io/BIF/BIFWriter.h>
#include <agrum/BN/io/DSL/DSLReader.h>
#include <agrum/BN/io/DSL/DSLWriter.h>
#include <agrum/BN/io/net/netReader.h>
#include <agrum/BN/io/net/netWriter.h>
#include <agrum/BN/io/BIFXML/BIFXMLBNReader.h>
#include <agrum/BN/io/BIFXML/BIFXMLBNWriter.h>
#include <agrum/PRM/o3prm/O3prmBNReader.h>
#include <agrum/BN/io/UAI/UAIReader.h>
#include <agrum/BN/io/UAI/UAIWriter.h>

#include <agrum/core/approximations/IApproximationSchemeConfiguration.h>
#include <agrum/core/approximations/approximationScheme.h>

#include <agrum/BN/inference/BayesNetInference.h>
#include <agrum/BN/inference/lazyPropagation.h>
#include <agrum/BN/inference/GibbsInference.h>

#include <agrum/BN/algorithms/divergence/KL.h>
#include <agrum/BN/algorithms/divergence/bruteForceKL.h>
#include <agrum/BN/algorithms/divergence/GibbsKL.h>

#include <agrum/core/signal/listener.h>
#include <agrum/graphs/listeners/diGraphListener.h>

#include <agrum/CN/credalNet.h>
#include <agrum/CN/varMod2BNsMap.h>
#include <agrum/CN/inferenceEngine.h>
#include <agrum/CN/multipleInferenceEngine.h>
#include <agrum/CN/CNMonteCarloSampling.h>
#include <agrum/CN/CNLoopyPropagation.h>

#include <agrum/learning/database/databaseVectInRAM.h>
#include <agrum/learning/BNLearner.h>

#include <agrum/ID/influenceDiagram.h>
#include <agrum/ID/inference/IInfluenceDiagramInference.h>
#include <agrum/ID/inference/influenceDiagramInference.h>
#include <agrum/ID/io/BIFXML/BIFXMLIDReader.h>
#include <agrum/ID/io/BIFXML/BIFXMLIDWriter.h>
#include <agrum/ID/generator/influenceDiagramGenerator.h>


namespace swig {
  template <class Type>
  struct noconst_traits {
    typedef Type noconst_type;
  };

  template <class Type>
  struct noconst_traits<const Type> {
    typedef Type noconst_type;
  };

  /*
    type categories
  */
  struct pointer_category { };
  struct value_category { };

  /*
    General traits that provides type_name and type_info
  */
  template <class Type> struct traits { };

  template <class Type>
  inline const char* type_name() {
    return traits<typename noconst_traits<Type >::noconst_type >::type_name();
  }

  template <class Type> struct traits_info {
    static swig_type_info *type_query(std::string name) {
      name += " *";
      return SWIG_TypeQuery(name.c_str());
    }
    static swig_type_info *type_info() {
      static swig_type_info *info = type_query(type_name<Type>());
      return info;
    }
  };

  /*
    Partial specialization for pointers (traits_info)
  */
  template <class Type> struct traits_info<Type *> {
    static swig_type_info *type_query(std::string name) {
      name += " *";
      return SWIG_TypeQuery(name.c_str());
    }
    static swig_type_info *type_info() {
      static swig_type_info *info = type_query(type_name<Type>());
      return info;
    }
  };

  template <class Type>
  inline swig_type_info *type_info() {
    return traits_info<Type>::type_info();
  }

  /*
    Partial specialization for pointers (traits)
  */
  template <class Type> struct traits <Type *> {
    typedef pointer_category category;
    static std::string make_ptr_name(const char* name) {
      std::string ptrname = name;
      ptrname += " *";
      return ptrname;
    }
    static const char* type_name() {
      static std::string name = make_ptr_name(swig::type_name<Type>());
      return name.c_str();
    }
  };

  template <class Type, class Category>
  struct traits_as { };

  template <class Type, class Category>
  struct traits_check { };

}


namespace swig {  
  /*
    Traits that provides the from method
  */
  template <class Type> struct traits_from_ptr {
    static PyObject *from(Type *val, int owner = 0) {
      return SWIG_InternalNewPointerObj(val, type_info<Type>(), owner);
    }
  };

  template <class Type> struct traits_from {
    static PyObject *from(const Type& val) {
      return traits_from_ptr<Type>::from(new Type(val), 1);
    }
  };

  template <class Type> struct traits_from<Type *> {
    static PyObject *from(Type* val) {
      return traits_from_ptr<Type>::from(val, 0);
    }
  };

  template <class Type> struct traits_from<const Type *> {
    static PyObject *from(const Type* val) {
      return traits_from_ptr<Type>::from(const_cast<Type*>(val), 0);
    }
  };


  template <class Type>
  inline PyObject *from(const Type& val) {
    return traits_from<Type>::from(val);
  }

  template <class Type>
  inline PyObject *from_ptr(Type* val, int owner) {
    return traits_from_ptr<Type>::from(val, owner);
  }

  /*
    Traits that provides the asval/as/check method
  */
  template <class Type>
  struct traits_asptr {   
    static int asptr(PyObject *obj, Type **val) {
      Type *p;
      swig_type_info *descriptor = type_info<Type>();
      int res = descriptor ? SWIG_ConvertPtr(obj, (void **)&p, descriptor, 0) : SWIG_ERROR;
      if (SWIG_IsOK(res)) {
	if (val) *val = p;
      }
      return res;
    }
  }; 

  template <class Type>
  inline int asptr(PyObject *obj, Type **vptr) {
    return traits_asptr<Type>::asptr(obj, vptr);
  }

  template <class Type> 
  struct traits_asval {
    static int asval(PyObject *obj, Type *val) {
      if (val) {
	Type *p = 0;
	int res = traits_asptr<Type>::asptr(obj, &p);
	if (!SWIG_IsOK(res)) return res;	
	if (p) {
	  typedef typename noconst_traits<Type>::noconst_type noconst_type;
	  *(const_cast<noconst_type*>(val)) = *p;
	  if (SWIG_IsNewObj(res)){
	    delete p;
	    res = SWIG_DelNewMask(res);
	  }
	  return res;
	} else {
	  return SWIG_ERROR;
	}
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };

  template <class Type> struct traits_asval<Type*> {
    static int asval(PyObject *obj, Type **val) {
      if (val) {
        typedef typename noconst_traits<Type>::noconst_type noconst_type;
        noconst_type *p = 0;
        int res = traits_asptr<noconst_type>::asptr(obj,  &p);
        if (SWIG_IsOK(res)) {
          *(const_cast<noconst_type**>(val)) = p;
	}
	return res;
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };
  
  template <class Type>
  inline int asval(PyObject *obj, Type *val) {
    return traits_asval<Type>::asval(obj, val);
  }

  template <class Type> 
  struct traits_as<Type, value_category> {
    static Type as(PyObject *obj, bool throw_error) {
      Type v;
      int res = asval(obj, &v);
      if (!obj || !SWIG_IsOK(res)) {
	if (!PyErr_Occurred()) {
	  ::SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
      }
      return v;
    }
  };

  template <class Type> 
  struct traits_as<Type, pointer_category> {
    static Type as(PyObject *obj, bool throw_error) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res) && v) {
	if (SWIG_IsNewObj(res)) {
	  Type r(*v);
	  delete v;
	  return r;
	} else {
	  return *v;
	}
      } else {
	// Uninitialized return value, no Type() constructor required.
	static Type *v_def = (Type*) malloc(sizeof(Type));
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
	memset(v_def,0,sizeof(Type));
	return *v_def;
      }
    }
  };

  template <class Type> 
  struct traits_as<Type*, pointer_category> {
    static Type* as(PyObject *obj, bool throw_error) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res)) {
	return v;
      } else {
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
	return 0;
      }
    }
  };
    
  template <class Type>
  inline Type as(PyObject *obj, bool te = false) {
    return traits_as<Type, typename traits<Type>::category>::as(obj, te);
  }

  template <class Type> 
  struct traits_check<Type, value_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asval(obj, (Type *)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type> 
  struct traits_check<Type, pointer_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asptr(obj, (Type **)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type>
  inline bool check(PyObject *obj) {
    return traits_check<Type, typename traits<Type>::category>::check(obj);
  }
}


#include <functional>

namespace std {
  template <>
  struct less <PyObject *>: public binary_function<PyObject *, PyObject *, bool>
  {
    bool
    operator()(PyObject * v, PyObject *w) const
    { 
      bool res;
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      res = PyObject_RichCompareBool(v, w, Py_LT) ? true : false;
      /* This may fall into a case of inconsistent
               eg. ObjA > ObjX > ObjB
               but ObjA < ObjB
      */
      if( PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError) )
      {
        /* Objects can't be compared, this mostly occurred in Python 3.0 */
        /* Compare their ptr directly for a workaround */
        res = (v < w);
        PyErr_Clear();
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
      return res;
    }
  };

  template <>
  struct less <swig::SwigPtr_PyObject>: public binary_function<swig::SwigPtr_PyObject, swig::SwigPtr_PyObject, bool>
  {
    bool
    operator()(const swig::SwigPtr_PyObject& v, const swig::SwigPtr_PyObject& w) const
    {
      return std::less<PyObject *>()(v, w);
    }
  };

  template <>
  struct less <swig::SwigVar_PyObject>: public binary_function<swig::SwigVar_PyObject, swig::SwigVar_PyObject, bool>
  {
    bool
    operator()(const swig::SwigVar_PyObject& v, const swig::SwigVar_PyObject& w) const
    {
      return std::less<PyObject *>()(v, w);
    }
  };

}

namespace swig {
  template <> struct traits<PyObject *> {
    typedef value_category category;
    static const char* type_name() { return "PyObject *"; }
  };  

  template <>  struct traits_asval<PyObject * > {   
    typedef PyObject * value_type;
    static int asval(PyObject *obj, value_type *val) {
      if (val) *val = obj;
      return SWIG_OK;
    }
  };

  template <> 
  struct traits_check<PyObject *, value_category> {
    static bool check(PyObject *) {
      return true;
    }
  };

  template <>  struct traits_from<PyObject *> {
    typedef PyObject * value_type;
    static PyObject *from(const value_type& val) {
      Py_XINCREF(val);
      return val;
    }
  };
  
}

namespace swig {
  template <class Difference>
  inline size_t
  check_index(Difference i, size_t size, bool insert = false) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size)
	return (size_t) (i + size);
    } else if ( (size_t) i < size ) {
      return (size_t) i;
    } else if (insert && ((size_t) i == size)) {
      return size;
    }
    throw std::out_of_range("index out of range");
  }

  template <class Difference>
  void
  slice_adjust(Difference i, Difference j, Py_ssize_t step, size_t size, Difference &ii, Difference &jj, bool insert = false) {
    if (step == 0) {
      throw std::invalid_argument("slice step cannot be zero");
    } else if (step > 0) {
      // Required range: 0 <= i < size, 0 <= j < size, i <= j
      if (i < 0) {
        ii = 0;
      } else if (i < (Difference)size) {
        ii = i;
      } else if (insert && (i >= (Difference)size)) {
        ii = (Difference)size;
      }
      if (j < 0) {
        jj = 0;
      } else {
        jj = (j < (Difference)size) ? j : (Difference)size;
      }
      if (jj < ii)
        jj = ii;
    } else {
      // Required range: -1 <= i < size-1, -1 <= j < size-1, i >= j
      if (i < -1) {
        ii = -1;
      } else if (i < (Difference) size) {
        ii = i;
      } else if (i >= (Difference)(size-1)) {
        ii = (Difference)(size-1);
      }
      if (j < -1) {
        jj = -1;
      } else {
        jj = (j < (Difference)size ) ? j : (Difference)(size-1);
      }
      if (ii < jj)
        ii = jj;
    }
  }

  template <class Sequence, class Difference>
  inline typename Sequence::iterator
  getpos(Sequence* self, Difference i)  {
    typename Sequence::iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline typename Sequence::const_iterator
  cgetpos(const Sequence* self, Difference i)  {
    typename Sequence::const_iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence>
  inline void
  erase(Sequence* seq, const typename Sequence::iterator& position) {
    seq->erase(position);
  }

  template <class Sequence>
  struct traits_reserve {
    static void reserve(Sequence & /*seq*/, typename Sequence::size_type /*n*/) {
      // This should be specialized for types that support reserve
    }
  };

  template <class Sequence, class Difference>
  inline Sequence*
  getslice(const Sequence* self, Difference i, Difference j, Py_ssize_t step) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj);

    if (step > 0) {
      typename Sequence::const_iterator sb = self->begin();
      typename Sequence::const_iterator se = self->begin();
      std::advance(sb,ii);
      std::advance(se,jj);
      if (step == 1) {
        return new Sequence(sb, se);
      } else {
        Sequence *sequence = new Sequence();
        swig::traits_reserve<Sequence>::reserve(*sequence, (jj - ii + step - 1) / step);
        typename Sequence::const_iterator it = sb;
        while (it!=se) {
          sequence->push_back(*it);
          for (Py_ssize_t c=0; c<step && it!=se; ++c)
            it++;
        }
        return sequence;
      } 
    } else {
      Sequence *sequence = new Sequence();
      swig::traits_reserve<Sequence>::reserve(*sequence, (ii - jj - step - 1) / -step);
      typename Sequence::const_reverse_iterator sb = self->rbegin();
      typename Sequence::const_reverse_iterator se = self->rbegin();
      std::advance(sb,size-ii-1);
      std::advance(se,size-jj-1);
      typename Sequence::const_reverse_iterator it = sb;
      while (it!=se) {
        sequence->push_back(*it);
        for (Py_ssize_t c=0; c<-step && it!=se; ++c)
          it++;
      }
      return sequence;
    }
  }

  template <class Sequence, class Difference, class InputSeq>
  inline void
  setslice(Sequence* self, Difference i, Difference j, Py_ssize_t step, const InputSeq& is = InputSeq()) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj, true);
    if (step > 0) {
      if (step == 1) {
        size_t ssize = jj - ii;
        if (ssize <= is.size()) {
          // expanding/staying the same size
          swig::traits_reserve<Sequence>::reserve(*self, self->size() - ssize + is.size());
          typename Sequence::iterator sb = self->begin();
          typename InputSeq::const_iterator isit = is.begin();
          std::advance(sb,ii);
          std::advance(isit, jj - ii);
          self->insert(std::copy(is.begin(), isit, sb), isit, is.end());
        } else {
          // shrinking
          typename Sequence::iterator sb = self->begin();
          typename Sequence::iterator se = self->begin();
          std::advance(sb,ii);
          std::advance(se,jj);
          self->erase(sb,se);
          sb = self->begin();
          std::advance(sb,ii);
          self->insert(sb, is.begin(), is.end());
        }
      } else {
        size_t replacecount = (jj - ii + step - 1) / step;
        if (is.size() != replacecount) {
          char msg[1024];
          sprintf(msg, "attempt to assign sequence of size %lu to extended slice of size %lu", (unsigned long)is.size(), (unsigned long)replacecount);
          throw std::invalid_argument(msg);
        }
        typename Sequence::const_iterator isit = is.begin();
        typename Sequence::iterator it = self->begin();
        std::advance(it,ii);
        for (size_t rc=0; rc<replacecount; ++rc) {
          *it++ = *isit++;
          for (Py_ssize_t c=0; c<(step-1) && it != self->end(); ++c)
            it++;
        }
      }
    } else {
      size_t replacecount = (ii - jj - step - 1) / -step;
      if (is.size() != replacecount) {
        char msg[1024];
        sprintf(msg, "attempt to assign sequence of size %lu to extended slice of size %lu", (unsigned long)is.size(), (unsigned long)replacecount);
        throw std::invalid_argument(msg);
      }
      typename Sequence::const_iterator isit = is.begin();
      typename Sequence::reverse_iterator it = self->rbegin();
      std::advance(it,size-ii-1);
      for (size_t rc=0; rc<replacecount; ++rc) {
        *it++ = *isit++;
        for (Py_ssize_t c=0; c<(-step-1) && it != self->rend(); ++c)
          it++;
      }
    }
  }

  template <class Sequence, class Difference>
  inline void
  delslice(Sequence* self, Difference i, Difference j, Py_ssize_t step) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj, true);
    if (step > 0) {
      typename Sequence::iterator sb = self->begin();
      std::advance(sb,ii);
      if (step == 1) {
        typename Sequence::iterator se = self->begin();
        std::advance(se,jj);
        self->erase(sb,se);
      } else {
        typename Sequence::iterator it = sb;
        size_t delcount = (jj - ii + step - 1) / step;
        while (delcount) {
          it = self->erase(it);
          for (Py_ssize_t c=0; c<(step-1) && it != self->end(); ++c)
            it++;
          delcount--;
        }
      }
    } else {
      typename Sequence::reverse_iterator sb = self->rbegin();
      std::advance(sb,size-ii-1);
      typename Sequence::reverse_iterator it = sb;
      size_t delcount = (ii - jj - step - 1) / -step;
      while (delcount) {
        it = typename Sequence::reverse_iterator(self->erase((++it).base()));
        for (Py_ssize_t c=0; c<(-step-1) && it != self->rend(); ++c)
          it++;
        delcount--;
      }
    }
  }
}


#if defined(__SUNPRO_CC) && defined(_RWSTD_VER)
#  if !defined(SWIG_NO_STD_NOITERATOR_TRAITS_STL)
#    define SWIG_STD_NOITERATOR_TRAITS_STL
#  endif
#endif

#if !defined(SWIG_STD_NOITERATOR_TRAITS_STL)
#include <iterator>
#else
namespace std {
  template <class Iterator>
  struct iterator_traits {
    typedef ptrdiff_t difference_type;
    typedef typename Iterator::value_type value_type;
  };

  template <class Iterator, class Category,class T, class Reference, class Pointer, class Distance>
  struct iterator_traits<__reverse_bi_iterator<Iterator,Category,T,Reference,Pointer,Distance> > {
    typedef Distance difference_type;
    typedef T value_type;
  };

  template <class T>
  struct iterator_traits<T*> {
    typedef T value_type;
    typedef ptrdiff_t difference_type;
  };

  template<typename _InputIterator>
  inline typename iterator_traits<_InputIterator>::difference_type
  distance(_InputIterator __first, _InputIterator __last)
  {
    typename iterator_traits<_InputIterator>::difference_type __n = 0;
    while (__first != __last) {
      ++__first; ++__n;
    }
    return __n;
  }
}
#endif


namespace swig {
  template<typename OutIterator>
  class SwigPyIterator_T :  public SwigPyIterator
  {
  public:
    typedef OutIterator out_iterator;
    typedef typename std::iterator_traits<out_iterator>::value_type value_type;    
    typedef SwigPyIterator_T<out_iterator> self_type;

    SwigPyIterator_T(out_iterator curr, PyObject *seq)
      : SwigPyIterator(seq), current(curr)
    {
    }

    const out_iterator& get_current() const
    {
      return current;
    }

    
    bool equal (const SwigPyIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return (current == iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }
    
    ptrdiff_t distance(const SwigPyIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return std::distance(current, iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }    
    
  protected:
    out_iterator current;
  };
  
  template <class ValueType>
  struct from_oper 
  {
    typedef const ValueType& argument_type;
    typedef PyObject *result_type;
    result_type operator()(argument_type v) const
    {
      return swig::from(v);
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyIteratorOpen_T :  public SwigPyIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;
    typedef SwigPyIteratorOpen_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyIteratorOpen_T(out_iterator curr, PyObject *seq)
      : SwigPyIterator_T<OutIterator>(curr, seq)
    {
    }
    
    PyObject *value() const {
      return from(static_cast<const value_type&>(*(base::current)));
    }
    
    SwigPyIterator *copy() const
    {
      return new self_type(*this);
    }

    SwigPyIterator *incr(size_t n = 1)
    {
      while (n--) {
	++base::current;
      }
      return this;
    }

    SwigPyIterator *decr(size_t n = 1)
    {
      while (n--) {
	--base::current;
      }
      return this;
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyIteratorClosed_T :  public SwigPyIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;    
    typedef SwigPyIteratorClosed_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyIteratorClosed_T(out_iterator curr, out_iterator first, out_iterator last, PyObject *seq)
      : SwigPyIterator_T<OutIterator>(curr, seq), begin(first), end(last)
    {
    }
    
    PyObject *value() const {
      if (base::current == end) {
	throw stop_iteration();
      } else {
	return from(static_cast<const value_type&>(*(base::current)));
      }
    }
    
    SwigPyIterator *copy() const
    {
      return new self_type(*this);
    }

    SwigPyIterator *incr(size_t n = 1)
    {
      while (n--) {
	if (base::current == end) {
	  throw stop_iteration();
	} else {
	  ++base::current;
	}
      }
      return this;
    }

    SwigPyIterator *decr(size_t n = 1)
    {
      while (n--) {
	if (base::current == begin) {
	  throw stop_iteration();
	} else {
	  --base::current;
	}
      }
      return this;
    }

  private:
    out_iterator begin;
    out_iterator end;
  };

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_iterator(const OutIter& current, const OutIter& begin,const OutIter& end, PyObject *seq = 0)
  {
    return new SwigPyIteratorClosed_T<OutIter>(current, begin, end, seq);
  }

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_iterator(const OutIter& current, PyObject *seq = 0)
  {
    return new SwigPyIteratorOpen_T<OutIter>(current, seq);
  }

}


namespace swig
{
  template <class T>
  struct SwigPySequence_Ref
  {
    SwigPySequence_Ref(PyObject* seq, Py_ssize_t index)
      : _seq(seq), _index(index)
    {
    }
    
    operator T () const
    {
      swig::SwigVar_PyObject item = PySequence_GetItem(_seq, _index);
      try {
	return swig::as<T>(item, true);
      } catch (std::exception& e) {
	char msg[1024];
	sprintf(msg, "in sequence element %d ", (int)_index);
	if (!PyErr_Occurred()) {
	  ::SWIG_Error(SWIG_TypeError,  swig::type_name<T>());
	}
	SWIG_Python_AddErrorMsg(msg);
	SWIG_Python_AddErrorMsg(e.what());
	throw;
      }
    }

    SwigPySequence_Ref& operator=(const T& v)
    {
      PySequence_SetItem(_seq, _index, swig::from<T>(v));
      return *this;
    }

  private:
    PyObject* _seq;
    Py_ssize_t _index;
  };

  template <class T>
  struct SwigPySequence_ArrowProxy
  {
    SwigPySequence_ArrowProxy(const T& x): m_value(x) {}
    const T* operator->() const { return &m_value; }
    operator const T*() const { return &m_value; }
    T m_value;
  };

  template <class T, class Reference >
  struct SwigPySequence_InputIterator
  {
    typedef SwigPySequence_InputIterator<T, Reference > self;

    typedef std::random_access_iterator_tag iterator_category;
    typedef Reference reference;
    typedef T value_type;
    typedef T* pointer;
    typedef Py_ssize_t difference_type;

    SwigPySequence_InputIterator()
    {
    }

    SwigPySequence_InputIterator(PyObject* seq, Py_ssize_t index)
      : _seq(seq), _index(index)
    {
    }

    reference operator*() const
    {
      return reference(_seq, _index);
    }

    SwigPySequence_ArrowProxy<T>
    operator->() const {
      return SwigPySequence_ArrowProxy<T>(operator*());
    }

    bool operator==(const self& ri) const
    {
      return (_index == ri._index) && (_seq == ri._seq);
    }

    bool operator!=(const self& ri) const
    {
      return !(operator==(ri));
    }

    self& operator ++ ()
    {
      ++_index;
      return *this;
    }

    self& operator -- ()
    {
      --_index;
      return *this;
    }

    self& operator += (difference_type n)
    {
      _index += n;
      return *this;
    }

    self operator +(difference_type n) const
    {
      return self(_seq, _index + n);
    }

    self& operator -= (difference_type n)
    {
      _index -= n;
      return *this;
    }

    self operator -(difference_type n) const
    {
      return self(_seq, _index - n);
    }

    difference_type operator - (const self& ri) const
    {
      return _index - ri._index;
    }

    bool operator < (const self& ri) const
    {
      return _index < ri._index;
    }

    reference
    operator[](difference_type n) const
    {
      return reference(_seq, _index + n);
    }

  private:
    PyObject* _seq;
    difference_type _index;
  };

  // STL container wrapper around a Python sequence
  template <class T>
  struct SwigPySequence_Cont
  {
    typedef SwigPySequence_Ref<T> reference;
    typedef const SwigPySequence_Ref<T> const_reference;
    typedef T value_type;
    typedef T* pointer;
    typedef Py_ssize_t difference_type;
    typedef size_t size_type;
    typedef const pointer const_pointer;
    typedef SwigPySequence_InputIterator<T, reference> iterator;
    typedef SwigPySequence_InputIterator<T, const_reference> const_iterator;

    SwigPySequence_Cont(PyObject* seq) : _seq(0)
    {
      if (!PySequence_Check(seq)) {
	throw std::invalid_argument("a sequence is expected");
      }
      _seq = seq;
      Py_INCREF(_seq);
    }

    ~SwigPySequence_Cont()
    {
      Py_XDECREF(_seq);
    }

    size_type size() const
    {
      return static_cast<size_type>(PySequence_Size(_seq));
    }

    bool empty() const
    {
      return size() == 0;
    }

    iterator begin()
    {
      return iterator(_seq, 0);
    }

    const_iterator begin() const
    {
      return const_iterator(_seq, 0);
    }

    iterator end()
    {
      return iterator(_seq, size());
    }

    const_iterator end() const
    {
      return const_iterator(_seq, size());
    }

    reference operator[](difference_type n)
    {
      return reference(_seq, n);
    }

    const_reference operator[](difference_type n)  const
    {
      return const_reference(_seq, n);
    }

    bool check(bool set_err = true) const
    {
      Py_ssize_t s = size();
      for (Py_ssize_t i = 0; i < s; ++i) {
	swig::SwigVar_PyObject item = PySequence_GetItem(_seq, i);
	if (!swig::check<value_type>(item)) {
	  if (set_err) {
	    char msg[1024];
	    sprintf(msg, "in sequence element %d", (int)i);
	    SWIG_Error(SWIG_RuntimeError, msg);
	  }
	  return false;
	}
      }
      return true;
    }

  private:
    PyObject* _seq;
  };

}


  #define SWIG_From_double   PyFloat_FromDouble 


namespace swig {
  template <> struct traits< double > {
    typedef value_category category;
    static const char* type_name() { return"double"; }
  };
  template <>  struct traits_asval< double > {
    typedef double value_type;
    static int asval(PyObject *obj, value_type *val) {
      return SWIG_AsVal_double (obj, val);
    }
  };
  template <>  struct traits_from< double > {
    typedef double value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_double  (val);
    }
  };
}


namespace swig {
  template <class SwigPySeq, class Seq>
  inline void
  assign(const SwigPySeq& swigpyseq, Seq* seq) {
    // seq->assign(swigpyseq.begin(), swigpyseq.end()); // not used as not always implemented
    typedef typename SwigPySeq::value_type value_type;
    typename SwigPySeq::const_iterator it = swigpyseq.begin();
    for (;it != swigpyseq.end(); ++it) {
      seq->insert(seq->end(),(value_type)(*it));
    }
  }

  template <class Seq, class T = typename Seq::value_type >
  struct traits_asptr_stdseq {
    typedef Seq sequence;
    typedef T value_type;

    static int asptr(PyObject *obj, sequence **seq) {
      if (obj == Py_None || SWIG_Python_GetSwigThis(obj)) {
	sequence *p;
	swig_type_info *descriptor = swig::type_info<sequence>();
	if (descriptor && SWIG_IsOK(::SWIG_ConvertPtr(obj, (void **)&p, descriptor, 0))) {
	  if (seq) *seq = p;
	  return SWIG_OLDOBJ;
	}
      } else if (PySequence_Check(obj)) {
	try {
	  SwigPySequence_Cont<value_type> swigpyseq(obj);
	  if (seq) {
	    sequence *pseq = new sequence();
	    assign(swigpyseq, pseq);
	    *seq = pseq;
	    return SWIG_NEWOBJ;
	  } else {
	    return swigpyseq.check() ? SWIG_OK : SWIG_ERROR;
	  }
	} catch (std::exception& e) {
	  if (seq) {
	    if (!PyErr_Occurred()) {
	      PyErr_SetString(PyExc_TypeError, e.what());
	    }
	  }
	  return SWIG_ERROR;
	}
      }
      return SWIG_ERROR;
    }
  };

  template <class Seq, class T = typename Seq::value_type >
  struct traits_from_stdseq {
    typedef Seq sequence;
    typedef T value_type;
    typedef typename Seq::size_type size_type;
    typedef typename sequence::const_iterator const_iterator;

    static PyObject *from(const sequence& seq) {
#ifdef SWIG_PYTHON_EXTRA_NATIVE_CONTAINERS
      swig_type_info *desc = swig::type_info<sequence>();
      if (desc && desc->clientdata) {
	return SWIG_NewPointerObj(new sequence(seq), desc, SWIG_POINTER_OWN);
      }
#endif
      size_type size = seq.size();
      if (size <= (size_type)INT_MAX) {
	PyObject *obj = PyTuple_New((Py_ssize_t)size);
	Py_ssize_t i = 0;
	for (const_iterator it = seq.begin(); it != seq.end(); ++it, ++i) {
	  PyTuple_SetItem(obj,i,swig::from<value_type>(*it));
	}
	return obj;
      } else {
	PyErr_SetString(PyExc_OverflowError,"sequence size not valid in python");
	return NULL;
      }
    }
  };
}


  namespace swig {
    template <class T>
    struct traits_reserve<std::vector<T> > {
      static void reserve(std::vector<T> &seq, typename std::vector<T>::size_type n) {
        seq.reserve(n);
      }
    };

    template <class T>
    struct traits_asptr<std::vector<T> >  {
      static int asptr(PyObject *obj, std::vector<T> **vec) {
	return traits_asptr_stdseq<std::vector<T> >::asptr(obj, vec);
      }
    };
    
    template <class T>
    struct traits_from<std::vector<T> > {
      static PyObject *from(const std::vector<T>& vec) {
	return traits_from_stdseq<std::vector<T> >::from(vec);
      }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector< double, std::allocator< double > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "double" "," "std::allocator< double >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_double_Sg__iterator(std::vector< double > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_double_Sg____nonzero__(std::vector< double > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_double_Sg____bool__(std::vector< double > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< double >::size_type std_vector_Sl_double_Sg____len__(std::vector< double > const *self){
      return self->size();
    }

SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long  (unsigned long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLong(value) : PyInt_FromLong(static_cast< long >(value));
}


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long_SS_long  (unsigned long long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLongLong(value) : PyInt_FromLong(static_cast< long >(value));
}
#endif


SWIGINTERNINLINE PyObject *
SWIG_From_size_t  (size_t value)
{    
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(size_t) <= sizeof(unsigned long)) {
#endif
    return SWIG_From_unsigned_SS_long  (static_cast< unsigned long >(value));
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else {
    /* assume sizeof(size_t) <= sizeof(unsigned long long) */
    return SWIG_From_unsigned_SS_long_SS_long  (static_cast< unsigned long long >(value));
  }
#endif
}

SWIGINTERN std::vector< double,std::allocator< double > > *std_vector_Sl_double_Sg____getslice__(std::vector< double > *self,std::vector< double >::difference_type i,std::vector< double >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_double_Sg____setslice____SWIG_0(std::vector< double > *self,std::vector< double >::difference_type i,std::vector< double >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< double,std::allocator< double > >());
    }
SWIGINTERN void std_vector_Sl_double_Sg____setslice____SWIG_1(std::vector< double > *self,std::vector< double >::difference_type i,std::vector< double >::difference_type j,std::vector< double,std::allocator< double > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_double_Sg____delslice__(std::vector< double > *self,std::vector< double >::difference_type i,std::vector< double >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_double_Sg____delitem____SWIG_0(std::vector< double > *self,std::vector< double >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< double,std::allocator< double > > *std_vector_Sl_double_Sg____getitem____SWIG_0(std::vector< double > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< double,std::allocator< double > >::difference_type id = i;
      std::vector< double,std::allocator< double > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_double_Sg____setitem____SWIG_0(std::vector< double > *self,PySliceObject *slice,std::vector< double,std::allocator< double > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< double,std::allocator< double > >::difference_type id = i;
      std::vector< double,std::allocator< double > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_double_Sg____setitem____SWIG_1(std::vector< double > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< double,std::allocator< double > >::difference_type id = i;
      std::vector< double,std::allocator< double > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_double_Sg____delitem____SWIG_1(std::vector< double > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< double,std::allocator< double > >::difference_type id = i;
      std::vector< double,std::allocator< double > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< double >::value_type const &std_vector_Sl_double_Sg____getitem____SWIG_1(std::vector< double > const *self,std::vector< double >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_double_Sg____setitem____SWIG_2(std::vector< double > *self,std::vector< double >::difference_type i,std::vector< double >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< double >::value_type std_vector_Sl_double_Sg__pop(std::vector< double > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< double,std::allocator< double > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_double_Sg__append(std::vector< double > *self,std::vector< double >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< double >::iterator std_vector_Sl_double_Sg__erase__SWIG_0(std::vector< double > *self,std::vector< double >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< double >::iterator std_vector_Sl_double_Sg__erase__SWIG_1(std::vector< double > *self,std::vector< double >::iterator first,std::vector< double >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< double >::iterator std_vector_Sl_double_Sg__insert__SWIG_0(std::vector< double > *self,std::vector< double >::iterator pos,std::vector< double >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_double_Sg__insert__SWIG_1(std::vector< double > *self,std::vector< double >::iterator pos,std::vector< double >::size_type n,std::vector< double >::value_type const &x){ self->insert(pos, n, x); }

SWIGINTERN int
SWIG_AsVal_std_string (PyObject * obj, std::string *val)
{
  std::string* v = (std::string *) 0;
  int res = SWIG_AsPtr_std_string (obj, &v);
  if (!SWIG_IsOK(res)) return res;
  if (v) {
    if (val) *val = *v;
    if (SWIG_IsNewObj(res)) {
      delete v;
      res = SWIG_DelNewMask(res);
    }
    return res;
  }
  return SWIG_ERROR;
}


SWIGINTERNINLINE PyObject *
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > INT_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      return pchar_descriptor ? 
	SWIG_InternalNewPointerObj(const_cast< char * >(carray), pchar_descriptor, 0) : SWIG_Py_Void();
    } else {
#if PY_VERSION_HEX >= 0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
      return PyBytes_FromStringAndSize(carray, static_cast< Py_ssize_t >(size));
#else
#if PY_VERSION_HEX >= 0x03010000
      return PyUnicode_DecodeUTF8(carray, static_cast< Py_ssize_t >(size), "surrogateescape");
#else
      return PyUnicode_FromStringAndSize(carray, static_cast< Py_ssize_t >(size));
#endif
#endif
#else
      return PyString_FromStringAndSize(carray, static_cast< Py_ssize_t >(size));
#endif
    }
  } else {
    return SWIG_Py_Void();
  }
}


SWIGINTERNINLINE PyObject *
SWIG_From_std_string  (const std::string& s)
{
  return SWIG_FromCharPtrAndSize(s.data(), s.size());
}


namespace swig {
  template <> struct traits< std::string > {
    typedef value_category category;
    static const char* type_name() { return"std::string"; }
  };
  template <>  struct traits_asval< std::string > {
    typedef std::string value_type;
    static int asval(PyObject *obj, value_type *val) {
      return SWIG_AsVal_std_string (obj, val);
    }
  };
  template <>  struct traits_from< std::string > {
    typedef std::string value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_std_string  (val);
    }
  };
}


      namespace swig {
	template <>  struct traits<std::vector< std::string, std::allocator< std::string > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "std::string" "," "std::allocator< std::string >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_std_string_Sg__iterator(std::vector< std::string > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_std_string_Sg____nonzero__(std::vector< std::string > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_std_string_Sg____bool__(std::vector< std::string > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< std::string >::size_type std_vector_Sl_std_string_Sg____len__(std::vector< std::string > const *self){
      return self->size();
    }
SWIGINTERN std::vector< std::string,std::allocator< std::string > > *std_vector_Sl_std_string_Sg____getslice__(std::vector< std::string > *self,std::vector< std::string >::difference_type i,std::vector< std::string >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____setslice____SWIG_0(std::vector< std::string > *self,std::vector< std::string >::difference_type i,std::vector< std::string >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< std::string,std::allocator< std::string > >());
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____setslice____SWIG_1(std::vector< std::string > *self,std::vector< std::string >::difference_type i,std::vector< std::string >::difference_type j,std::vector< std::string,std::allocator< std::string > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____delslice__(std::vector< std::string > *self,std::vector< std::string >::difference_type i,std::vector< std::string >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____delitem____SWIG_0(std::vector< std::string > *self,std::vector< std::string >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< std::string,std::allocator< std::string > > *std_vector_Sl_std_string_Sg____getitem____SWIG_0(std::vector< std::string > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::string,std::allocator< std::string > >::difference_type id = i;
      std::vector< std::string,std::allocator< std::string > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____setitem____SWIG_0(std::vector< std::string > *self,PySliceObject *slice,std::vector< std::string,std::allocator< std::string > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::string,std::allocator< std::string > >::difference_type id = i;
      std::vector< std::string,std::allocator< std::string > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____setitem____SWIG_1(std::vector< std::string > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::string,std::allocator< std::string > >::difference_type id = i;
      std::vector< std::string,std::allocator< std::string > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____delitem____SWIG_1(std::vector< std::string > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::string,std::allocator< std::string > >::difference_type id = i;
      std::vector< std::string,std::allocator< std::string > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< std::string >::value_type const &std_vector_Sl_std_string_Sg____getitem____SWIG_1(std::vector< std::string > const *self,std::vector< std::string >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____setitem____SWIG_2(std::vector< std::string > *self,std::vector< std::string >::difference_type i,std::vector< std::string >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< std::string >::value_type std_vector_Sl_std_string_Sg__pop(std::vector< std::string > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< std::string,std::allocator< std::string > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_std_string_Sg__append(std::vector< std::string > *self,std::vector< std::string >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< std::string >::iterator std_vector_Sl_std_string_Sg__erase__SWIG_0(std::vector< std::string > *self,std::vector< std::string >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< std::string >::iterator std_vector_Sl_std_string_Sg__erase__SWIG_1(std::vector< std::string > *self,std::vector< std::string >::iterator first,std::vector< std::string >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< std::string >::iterator std_vector_Sl_std_string_Sg__insert__SWIG_0(std::vector< std::string > *self,std::vector< std::string >::iterator pos,std::vector< std::string >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_std_string_Sg__insert__SWIG_1(std::vector< std::string > *self,std::vector< std::string >::iterator pos,std::vector< std::string >::size_type n,std::vector< std::string >::value_type const &x){ self->insert(pos, n, x); }

SWIGINTERNINLINE PyObject*
  SWIG_From_unsigned_SS_int  (unsigned int value)
{
  return PyInt_FromSize_t((size_t) value);
}

SWIGINTERN gum::LabelizedVariable &gum_DiscreteVariable_toLabelizedVar(gum::DiscreteVariable *self){
    return dynamic_cast<gum::LabelizedVariable&> ( * ( self ) );
  }
SWIGINTERN gum::RangeVariable &gum_DiscreteVariable_toRangeVar(gum::DiscreteVariable *self){
    return dynamic_cast<gum::RangeVariable&> ( * ( self ) );
  }
SWIGINTERN gum::DiscretizedVariable< double > &gum_DiscreteVariable_toDiscretizedVar(gum::DiscreteVariable *self){
    return dynamic_cast<gum::DiscretizedVariable<double> &> ( * ( self ) );
  }
SWIGINTERN PyObject *gum_DiGraph_ids(gum::DiGraph *self){
    PyObject* q=PyList_New(0);

    for ( auto node : self->nodes()) {
      PyList_Append(q,PyInt_FromLong(node));
    }

    return q;
  }
SWIGINTERN PyObject *gum_DiGraph_arcs(gum::DiGraph *self){ // add for the sub-classes (including MixedGraph)
    PyObject* q=PyList_New(0);

    for ( auto arc : self->arcs()) {
      PyList_Append(q,Py_BuildValue("(i,i)", arc.tail(), arc.head()));
    }

    return q;
  }
SWIGINTERN PyObject *gum_DiGraph_parents(gum::DiGraph *self,gum::NodeId id){
    PyObject* q=PySet_New(0);

    for ( auto node : self->parents(id)) {
      PySet_Add(q,PyInt_FromLong(node));
    }

    return q;
  }
SWIGINTERN PyObject *gum_DiGraph_children(gum::DiGraph *self,gum::NodeId id){
    PyObject* q=PySet_New(0);

    for ( auto node : self->children(id)) {
      PySet_Add(q,PyInt_FromLong(node));
    }

    return q;
  }
SWIGINTERN gum::NodeId gum_DiGraph_addNode_SWIG_0_0(gum::DiGraph *self){ return self->gum::NodeGraphPart::addNode(); }
SWIGINTERN void gum_DiGraph_addNode_SWIG_0_1(gum::DiGraph *self,gum::NodeId const id){ self->gum::NodeGraphPart::addNode(id); }
SWIGINTERN bool gum_DiGraph_existsNode(gum::DiGraph const *self,gum::NodeId const id){ return self->gum::NodeGraphPart::existsNode(id); }
SWIGINTERN gum::Size gum_DiGraph_size(gum::DiGraph const *self){ return self->gum::NodeGraphPart::size(); }
SWIGINTERN bool gum_DiGraph_empty(gum::DiGraph const *self){ return self->gum::NodeGraphPart::empty(); }
SWIGINTERN void gum_DiGraph_eraseArc(gum::DiGraph *self,gum::Arc const &arc){ self->gum::ArcGraphPart::eraseArc(arc); }
SWIGINTERN bool gum_DiGraph_existsArc_SWIG_0_0(gum::DiGraph const *self,gum::Arc const &arc){ return self->gum::ArcGraphPart::existsArc(arc); }
SWIGINTERN bool gum_DiGraph_existsArc_SWIG_0_1(gum::DiGraph const *self,gum::NodeId const tail,gum::NodeId const head){ return self->gum::ArcGraphPart::existsArc(tail,head); }
SWIGINTERN void gum_DiGraph_eraseParents(gum::DiGraph *self,gum::NodeId const id){ self->gum::ArcGraphPart::eraseParents(id); }
SWIGINTERN void gum_DiGraph_eraseChildren(gum::DiGraph *self,gum::NodeId const id){ self->gum::ArcGraphPart::eraseChildren(id); }
SWIGINTERN gum::Size gum_DiGraph_sizeArcs(gum::DiGraph const *self){ return self->gum::ArcGraphPart::sizeArcs(); }
SWIGINTERN bool gum_DiGraph_emptyArcs(gum::DiGraph const *self){ return self->gum::ArcGraphPart::emptyArcs(); }
SWIGINTERN PyObject *gum_UndiGraph_ids(gum::UndiGraph *self){
    PyObject* q=PyList_New(0);

    for ( auto node : self->nodes()) {
      PyList_Append(q,PyInt_FromLong(node));
    }

    return q;
  }
SWIGINTERN PyObject *gum_UndiGraph_edges(gum::UndiGraph *self){ // add for the sub-classes (including MixedGraph)
    PyObject* q=PyList_New(0);

    for ( auto edge :  self->edges()) {
      PyList_Append(q,Py_BuildValue("(i,i)", edge.first(), edge.second()));
    }

    return q;
  }
SWIGINTERN PyObject *gum_UndiGraph_neighbours(gum::UndiGraph *self,gum::NodeId id){
    PyObject* q=PySet_New(0);

    for ( auto node : self->neighbours(id)) {
      PySet_Add(q,PyInt_FromLong(node));
    }

    return q;
  }
SWIGINTERN gum::NodeId gum_UndiGraph_addNode_SWIG_0_0(gum::UndiGraph *self){ return self->gum::NodeGraphPart::addNode(); }
SWIGINTERN void gum_UndiGraph_addNode_SWIG_0_1(gum::UndiGraph *self,gum::NodeId const id){ self->gum::NodeGraphPart::addNode(id); }
SWIGINTERN bool gum_UndiGraph_existsNode(gum::UndiGraph const *self,gum::NodeId const id){ return self->gum::NodeGraphPart::existsNode(id); }
SWIGINTERN gum::Size gum_UndiGraph_size(gum::UndiGraph const *self){ return self->gum::NodeGraphPart::size(); }
SWIGINTERN bool gum_UndiGraph_empty(gum::UndiGraph const *self){ return self->gum::NodeGraphPart::empty(); }
SWIGINTERN void gum_UndiGraph_eraseEdge(gum::UndiGraph *self,gum::Edge const &edge){ self->gum::EdgeGraphPart::eraseEdge(edge); }
SWIGINTERN bool gum_UndiGraph_existsEdge_SWIG_0_0(gum::UndiGraph const *self,gum::Edge const &edge){ return self->gum::EdgeGraphPart::existsEdge(edge); }
SWIGINTERN bool gum_UndiGraph_existsEdge_SWIG_0_1(gum::UndiGraph const *self,gum::NodeId const n1,gum::NodeId const n2){ return self->gum::EdgeGraphPart::existsEdge(n1,n2); }
SWIGINTERN gum::Size gum_UndiGraph_sizeEdges(gum::UndiGraph const *self){ return self->gum::EdgeGraphPart::sizeEdges(); }
SWIGINTERN bool gum_UndiGraph_emptyEdges(gum::UndiGraph const *self){ return self->gum::EdgeGraphPart::emptyEdges(); }
SWIGINTERN void gum_UndiGraph_eraseNeighbours(gum::UndiGraph *self,gum::NodeId const id){ self->gum::EdgeGraphPart::eraseNeighbours(id); }
SWIGINTERN gum::NodeId gum_MixedGraph_addNode_SWIG_0_0(gum::MixedGraph *self){ return self->gum::NodeGraphPart::addNode(); }
SWIGINTERN void gum_MixedGraph_addNode_SWIG_0_1(gum::MixedGraph *self,gum::NodeId const id){ self->gum::NodeGraphPart::addNode(id); }
SWIGINTERN bool gum_MixedGraph_existsNode(gum::MixedGraph const *self,gum::NodeId const id){ return self->gum::NodeGraphPart::existsNode(id); }
SWIGINTERN gum::Size gum_MixedGraph_size(gum::MixedGraph const *self){ return self->gum::NodeGraphPart::size(); }
SWIGINTERN bool gum_MixedGraph_empty(gum::MixedGraph const *self){ return self->gum::NodeGraphPart::empty(); }
SWIGINTERN void gum_MixedGraph_addEdge(gum::MixedGraph *self,gum::NodeId const n1,gum::NodeId const n2){ self->gum::EdgeGraphPart::addEdge(n1,n2); }
SWIGINTERN void gum_MixedGraph_eraseEdge(gum::MixedGraph *self,gum::Edge const &edge){ self->gum::EdgeGraphPart::eraseEdge(edge); }
SWIGINTERN bool gum_MixedGraph_existsEdge_SWIG_0_0(gum::MixedGraph const *self,gum::Edge const &edge){ return self->gum::EdgeGraphPart::existsEdge(edge); }
SWIGINTERN bool gum_MixedGraph_existsEdge_SWIG_0_1(gum::MixedGraph const *self,gum::NodeId const n1,gum::NodeId const n2){ return self->gum::EdgeGraphPart::existsEdge(n1,n2); }
SWIGINTERN gum::Size gum_MixedGraph_sizeEdges(gum::MixedGraph const *self){ return self->gum::EdgeGraphPart::sizeEdges(); }
SWIGINTERN bool gum_MixedGraph_emptyEdges(gum::MixedGraph const *self){ return self->gum::EdgeGraphPart::emptyEdges(); }
SWIGINTERN void gum_MixedGraph_eraseNeighbours(gum::MixedGraph *self,gum::NodeId const id){ self->gum::EdgeGraphPart::eraseNeighbours(id); }
SWIGINTERN void gum_MixedGraph_addArc(gum::MixedGraph *self,gum::NodeId const tail,gum::NodeId const head){ self->gum::ArcGraphPart::addArc(tail,head); }
SWIGINTERN void gum_MixedGraph_eraseArc(gum::MixedGraph *self,gum::Arc const &arc){ self->gum::ArcGraphPart::eraseArc(arc); }
SWIGINTERN bool gum_MixedGraph_existsArc_SWIG_0_0(gum::MixedGraph const *self,gum::Arc const &arc){ return self->gum::ArcGraphPart::existsArc(arc); }
SWIGINTERN bool gum_MixedGraph_existsArc_SWIG_0_1(gum::MixedGraph const *self,gum::NodeId const tail,gum::NodeId const head){ return self->gum::ArcGraphPart::existsArc(tail,head); }
SWIGINTERN void gum_MixedGraph_eraseParents__SWIG_1_0(gum::MixedGraph *self,gum::NodeId const id){ self->gum::ArcGraphPart::eraseParents(id); }
SWIGINTERN void gum_MixedGraph_eraseChildren__SWIG_1_0(gum::MixedGraph *self,gum::NodeId const id){ self->gum::ArcGraphPart::eraseChildren(id); }
SWIGINTERN gum::Size gum_MixedGraph_sizeArcs(gum::MixedGraph const *self){ return self->gum::ArcGraphPart::sizeArcs(); }
SWIGINTERN bool gum_MixedGraph_emptyArcs(gum::MixedGraph const *self){ return self->gum::ArcGraphPart::emptyArcs(); }
SWIGINTERN PyObject *gum_CliqueGraph_clique(gum::CliqueGraph const *self,gum::NodeId const clique){
    PyObject* q=PySet_New(0);

    for(auto node : self->clique(clique)) {
          PySet_Add(q,PyInt_FromLong(node));
        }

    return q;
  }
SWIGINTERN gum::Potential< double > gum_Potential_Sl_double_Sg__extract__SWIG_1(gum::Potential< double > *self,PyObject *dict){
      gum::Instantiation inst;
      PyAgrumHelper::fillInstantiationFromPyObject(self,inst,dict);
      return self->extract(inst);
    }
SWIGINTERN gum::Potential< double > gum_Potential_Sl_double_Sg__reorganize__SWIG_1(gum::Potential< double > const *self,PyObject *varnames){
      std::vector<const gum::DiscreteVariable*> v;
      PyAgrumHelper::fillDVVectorFromPyObject(self,v,varnames); //from helpers.h
      return self->reorganize(v);
    }
SWIGINTERN gum::Potential< double > gum_Potential_Sl_double_Sg__putFirst(gum::Potential< double > const *self,PyObject *varname){
      const gum::DiscreteVariable* v;
      PyAgrumHelper::fillDVFromPyObject(self,v,varname); //from helpers.h
      return self->putFirst(v);
    }
SWIGINTERN gum::Potential< double > gum_Potential_Sl_double_Sg__margSumOut(gum::Potential< double > const *self,PyObject *varnames){
      gum::Set<const gum::DiscreteVariable*> s;
      PyAgrumHelper::fillDVSetFromPyObject(self,s,varnames); //from helpers.h
      return self->margSumOut(s);
    }
SWIGINTERN gum::Potential< double > gum_Potential_Sl_double_Sg__margProdOut(gum::Potential< double > const *self,PyObject *varnames){
      gum::Set<const gum::DiscreteVariable*> s;
      PyAgrumHelper::fillDVSetFromPyObject(self,s,varnames); //from helpers.h
      return self->margProdOut(s);
    }
SWIGINTERN gum::Potential< double > gum_Potential_Sl_double_Sg__margMaxOut(gum::Potential< double > const *self,PyObject *varnames){
      gum::Set<const gum::DiscreteVariable*> s;
      PyAgrumHelper::fillDVSetFromPyObject(self,s,varnames); //from helpers.h
      return self->margMaxOut(s);
    }
SWIGINTERN gum::Potential< double > gum_Potential_Sl_double_Sg__margMinOut(gum::Potential< double > const *self,PyObject *varnames){
      gum::Set<const gum::DiscreteVariable*> s;
      PyAgrumHelper::fillDVSetFromPyObject(self,s,varnames); //from helpers.h
      return self->margMinOut(s);
    }
SWIGINTERN gum::Potential< double > gum_Potential_Sl_double_Sg__margSumIn(gum::Potential< double > const *self,PyObject *varnames){
      gum::Set<const gum::DiscreteVariable*> s;
      PyAgrumHelper::fillDVSetFromPyObject(self,s,varnames); //from helpers.h
      return self->margSumIn(s);
    }
SWIGINTERN gum::Potential< double > gum_Potential_Sl_double_Sg__margProdIn(gum::Potential< double > const *self,PyObject *varnames){
      gum::Set<const gum::DiscreteVariable*> s;
      PyAgrumHelper::fillDVSetFromPyObject(self,s,varnames); //from helpers.h
      return self->margProdIn(s);
    }
SWIGINTERN gum::Potential< double > gum_Potential_Sl_double_Sg__margMaxIn(gum::Potential< double > const *self,PyObject *varnames){
      gum::Set<const gum::DiscreteVariable*> s;
      PyAgrumHelper::fillDVSetFromPyObject(self,s,varnames); //from helpers.h
      return self->margMaxIn(s);
    }
SWIGINTERN gum::Potential< double > gum_Potential_Sl_double_Sg__margMinIn(gum::Potential< double > const *self,PyObject *varnames){
      gum::Set<const gum::DiscreteVariable*> s;
      PyAgrumHelper::fillDVSetFromPyObject(self,s,varnames); //from helpers.h
      return self->margMinIn(s);
    }
SWIGINTERN gum::Potential< double > gum_Potential_Sl_double_Sg____truediv____SWIG_1(gum::Potential< double > *self,gum::Potential< double > const &b){
      return *self /b;
    }
SWIGINTERN gum::Potential< double > gum_Potential_Sl_double_Sg____div__(gum::Potential< double > *self,gum::Potential< double > const &b){
      return *self/b;
    }
SWIGINTERN bool gum_Potential_Sl_double_Sg____eq____SWIG_1(gum::Potential< double > *self,gum::Potential< double > const &b){
      return *self==b;
    }
SWIGINTERN bool gum_Potential_Sl_double_Sg____ne____SWIG_1(gum::Potential< double > *self,gum::Potential< double > const &b){
      return *self!=b;
    }
SWIGINTERN void gum_Potential_Sl_double_Sg____fill_distrib__(gum::Potential< double > *self){}
SWIGINTERN PyObject *gum_Potential_Sl_double_Sg____indexfromdict__(gum::Potential< double > *self,PyObject *id_dict){ return NULL; }
SWIGINTERN char const *gum_Potential_Sl_double_Sg____str____SWIG_1(gum::Potential< double > *self){ return NULL; }

SWIGINTERNINLINE PyObject * 
SWIG_FromCharPtr(const char *cptr)
{ 
  return SWIG_FromCharPtrAndSize(cptr, (cptr ? strlen(cptr) : 0));
}

SWIGINTERN PyObject *gum_Potential_Sl_double_Sg__tolist(gum::Potential< double > *self){ return NULL; }
SWIGINTERN PyObject *gum_Potential_Sl_double_Sg__toarray(gum::Potential< double > *self){ return NULL; }
SWIGINTERN void gum_Potential_Sl_double_Sg____getitem__(gum::Potential< double > *self,PyObject *id){}
SWIGINTERN void gum_Potential_Sl_double_Sg____setitem__(gum::Potential< double > *self,PyObject *id,PyObject *value){}
SWIGINTERN void gum_Potential_Sl_double_Sg__var_names(gum::Potential< double > *self){}
SWIGINTERN void gum_Potential_Sl_double_Sg__var_dims(gum::Potential< double > *self){}
SWIGINTERN double gum_Potential_Sl_double_Sg__get(gum::Potential< double > const *self,gum::Instantiation const &i){
    return self->gum::MultiDimDecorator<double>::get(i);
  }
SWIGINTERN void gum_Potential_Sl_double_Sg__set(gum::Potential< double > const *self,gum::Instantiation const &i,double const &value){
    self->gum::MultiDimDecorator<double>::set(i,value);
  }
SWIGINTERN bool gum_Potential_Sl_double_Sg__empty(gum::Potential< double > const *self){
    return self->gum::MultiDimDecorator<double>::empty();
  }
SWIGINTERN gum::Idx gum_Potential_Sl_double_Sg__pos(gum::Potential< double > const *self,gum::DiscreteVariable const &v){
    return self->gum::MultiDimDecorator<double>::pos(v);
  }
SWIGINTERN bool gum_Potential_Sl_double_Sg__contains(gum::Potential< double > const *self,gum::DiscreteVariable const &v){
    return self->gum::MultiDimDecorator<double>::contains(v);
  }
SWIGINTERN gum::Idx gum_Potential_Sl_double_Sg__nbrDim(gum::Potential< double > const *self){
    return self->gum::MultiDimDecorator<double>::nbrDim();
  }
SWIGINTERN gum::DiscreteVariable const &gum_Potential_Sl_double_Sg__variable(gum::Potential< double > const *self,gum::Idx i){
    return self->gum::MultiDimDecorator<double>::variable(i);
  }
SWIGINTERN void gum_Potential_Sl_double_Sg__populate(gum::Potential< double > const *self,std::vector< double,std::allocator< double > > const &v){
    self->gum::MultiDimDecorator<double>::populate(v);
  }
SWIGINTERN void gum_Potential_Sl_double_Sg__fill(gum::Potential< double > const *self,double const &d){
    self->gum::MultiDimDecorator<double>::fill(d);
  }
SWIGINTERN void gum_Potential_Sl_double_Sg__remove(gum::Potential< double > *self,gum::DiscreteVariable const &var){
    self->erase(var);
  }
SWIGINTERN void gum_Potential_Sl_double_Sg__add(gum::Potential< double > *self,gum::DiscreteVariable const &v){
    self->gum::MultiDimDecorator<double>::add(v);
  }
SWIGINTERN void gum_UtilityTable_Sl_double_Sg____fill_distrib__(gum::UtilityTable< double > *self){}
SWIGINTERN PyObject *gum_UtilityTable_Sl_double_Sg____indexfromdict__(gum::UtilityTable< double > *self,PyObject *id_dict){ return NULL; }
SWIGINTERN char const *gum_UtilityTable_Sl_double_Sg____str__(gum::UtilityTable< double > *self){ return NULL; }
SWIGINTERN PyObject *gum_UtilityTable_Sl_double_Sg__tolist(gum::UtilityTable< double > *self){ return NULL; }
SWIGINTERN PyObject *gum_UtilityTable_Sl_double_Sg__toarray(gum::UtilityTable< double > *self){ return NULL; }
SWIGINTERN void gum_UtilityTable_Sl_double_Sg____getitem__(gum::UtilityTable< double > *self,PyObject *id){}
SWIGINTERN void gum_UtilityTable_Sl_double_Sg____setitem__(gum::UtilityTable< double > *self,PyObject *id,PyObject *value){}
SWIGINTERN void gum_UtilityTable_Sl_double_Sg__var_names(gum::UtilityTable< double > *self){}
SWIGINTERN void gum_UtilityTable_Sl_double_Sg__var_dims(gum::UtilityTable< double > *self){}
SWIGINTERN double gum_UtilityTable_Sl_double_Sg__get(gum::UtilityTable< double > const *self,gum::Instantiation const &i){
    return self->gum::MultiDimDecorator<double>::get(i);
  }
SWIGINTERN void gum_UtilityTable_Sl_double_Sg__set(gum::UtilityTable< double > const *self,gum::Instantiation const &i,double const &value){
    self->gum::MultiDimDecorator<double>::set(i,value);
  }
SWIGINTERN bool gum_UtilityTable_Sl_double_Sg__empty(gum::UtilityTable< double > const *self){
    return self->gum::MultiDimDecorator<double>::empty();
  }
SWIGINTERN gum::Idx gum_UtilityTable_Sl_double_Sg__pos(gum::UtilityTable< double > const *self,gum::DiscreteVariable const &v){
    return self->gum::MultiDimDecorator<double>::pos(v);
  }
SWIGINTERN bool gum_UtilityTable_Sl_double_Sg__contains(gum::UtilityTable< double > const *self,gum::DiscreteVariable const &v){
    return self->gum::MultiDimDecorator<double>::contains(v);
  }
SWIGINTERN gum::Idx gum_UtilityTable_Sl_double_Sg__nbrDim(gum::UtilityTable< double > const *self){
    return self->gum::MultiDimDecorator<double>::nbrDim();
  }
SWIGINTERN gum::DiscreteVariable const &gum_UtilityTable_Sl_double_Sg__variable(gum::UtilityTable< double > const *self,gum::Idx i){
    return self->gum::MultiDimDecorator<double>::variable(i);
  }
SWIGINTERN void gum_UtilityTable_Sl_double_Sg__populate(gum::UtilityTable< double > const *self,std::vector< double,std::allocator< double > > const &v){
    self->gum::MultiDimDecorator<double>::populate(v);
  }
SWIGINTERN void gum_UtilityTable_Sl_double_Sg__fill(gum::UtilityTable< double > const *self,double const &d){
    self->gum::MultiDimDecorator<double>::fill(d);
  }
SWIGINTERN void gum_UtilityTable_Sl_double_Sg__remove(gum::UtilityTable< double > *self,gum::DiscreteVariable const &var){
    self->erase(var);
  }
SWIGINTERN void gum_UtilityTable_Sl_double_Sg__add(gum::UtilityTable< double > *self,gum::DiscreteVariable const &v){
    self->gum::MultiDimDecorator<double>::add(v);
  }
SWIGINTERN PyObject *gum_BayesNet_Sl_double_Sg__names(gum::BayesNet< double > const *self){
      PyObject* q=PyList_New(0);

      const gum::DAG& dag=self->dag();
      for ( gum::NodeGraphPartIterator node_iter = dag.nodes().begin();node_iter != dag.nodes().end(); ++node_iter ) {
        PyList_Append(q,PyString_FromString(self->variable(*node_iter).name().c_str()));
      }
      return q;
    }
SWIGINTERN PyObject *gum_BayesNet_Sl_double_Sg__ids(gum::BayesNet< double > *self){
      PyObject* q=PyList_New(0);

      const gum::DAG& dag=self->dag();
      for ( gum::NodeGraphPartIterator  node_iter = dag.nodes().begin();node_iter != dag.nodes().end(); ++node_iter ) {
        PyList_Append(q,PyInt_FromLong(*node_iter));
      }

      return q;
    }
SWIGINTERN PyObject *gum_BayesNet_Sl_double_Sg__arcs(gum::BayesNet< double > *self){
      PyObject* q=PyList_New(0);

      const gum::DAG& dag=self->dag();
      for ( auto arc_iter = dag.arcs().begin();arc_iter != dag.arcs().end(); ++arc_iter ) {
        PyList_Append(q,Py_BuildValue("(i,i)", arc_iter->tail(), arc_iter->head()));
      }

      return q;
    }
SWIGINTERN PyObject *gum_BayesNet_Sl_double_Sg__parents(gum::BayesNet< double > const *self,gum::NodeId const id){
    PyObject* q=PyList_New(0);

    const gum::NodeSet& p=self->dag().parents(id);
    for(gum::NodeSet::const_iterator it=p.begin();it!=p.end();++it) {
      PyList_Append(q,PyInt_FromLong(*it));
    }

    return q;
  }
SWIGINTERN PyObject *gum_BayesNet_Sl_double_Sg__children(gum::BayesNet< double > const *self,gum::NodeId const id){
    PyObject* q=PyList_New(0);

    const gum::NodeSet& p=self->dag().children(id);
    for(gum::NodeSet::const_iterator it=p.begin();it!=p.end();++it) {
      PyList_Append(q,PyInt_FromLong(*it));
    }

    return q;
  }
SWIGINTERN std::string gum_BayesNet_Sl_double_Sg__loadBIF__SWIG_0(gum::BayesNet< double > *self,std::string name,PyObject *l=(PyObject *) 0){
      std::stringstream stream;
      std::vector<PythonLoadListener> py_listener;

      try {
          gum::BIFReader<double> reader(self,name);
          int l_size=__fillLoadListeners(py_listener,l);
          for(int i=0 ; i<l_size ; i++) {
              GUM_CONNECT(reader.scanner(), onLoad, py_listener[i], PythonLoadListener::whenLoading);
          }

          auto nbErr=reader.proceed();
          reader.showElegantErrorsAndWarnings(stream);
          if (nbErr>0) {
              reader.showErrorCounts(stream);
              GUM_ERROR(gum::FatalError,stream.str());
          } else {
              return stream.str();
          }
      } catch (gum::IOError& e) {
        throw(e);
      }
      return "";
  }
SWIGINTERN void gum_BayesNet_Sl_double_Sg__saveBIF(gum::BayesNet< double > *self,std::string name){
      gum::BIFWriter<double> writer;
      writer.write( name, *self );
  }
SWIGINTERN std::string gum_BayesNet_Sl_double_Sg__loadDSL__SWIG_0(gum::BayesNet< double > *self,std::string name,PyObject *l=(PyObject *) 0){
      std::stringstream stream;
      std::vector<PythonLoadListener> py_listener;

      try {
          gum::DSLReader<double> reader(self,name);
          int l_size=__fillLoadListeners(py_listener,l);
          for(int i=0 ; i<l_size ; i++) {
              GUM_CONNECT(reader.scanner(), onLoad, py_listener[i], PythonLoadListener::whenLoading);
          }

          auto nbErr=reader.proceed();
          reader.showElegantErrorsAndWarnings(stream);
          if (nbErr>0) {
              reader.showErrorCounts(stream);
              GUM_ERROR(gum::FatalError,stream.str());
          } else {
              return stream.str();
          }
      } catch (gum::IOError& e) {
        throw(e);
      }
      return "";
  }
SWIGINTERN void gum_BayesNet_Sl_double_Sg__saveDSL(gum::BayesNet< double > *self,std::string name){
      gum::DSLWriter<double> writer;
      writer.write( name, *self );
  }
SWIGINTERN std::string gum_BayesNet_Sl_double_Sg__loadNET__SWIG_0(gum::BayesNet< double > *self,std::string name,PyObject *l=(PyObject *) 0){
      std::stringstream stream;
      std::vector<PythonLoadListener> py_listener;

      try {
          gum::NetReader<double> reader(self,name);
          int l_size=__fillLoadListeners(py_listener,l);
          for(int i=0 ; i<l_size ; i++) {
              GUM_CONNECT(reader.scanner(), onLoad, py_listener[i], PythonLoadListener::whenLoading);
          }

          auto nbErr=reader.proceed();
          reader.showElegantErrorsAndWarnings(stream);
          if (nbErr>0) {
              reader.showErrorCounts(stream);
              GUM_ERROR(gum::FatalError,stream.str());
          } else {
              return stream.str();
          }
      } catch (gum::IOError& e) {
        throw(e);
      }
      return "";
  }
SWIGINTERN void gum_BayesNet_Sl_double_Sg__saveNET(gum::BayesNet< double > *self,std::string name){
      gum::NetWriter<double> writer;
      writer.write( name, *self );
  }
SWIGINTERN std::string gum_BayesNet_Sl_double_Sg__loadPRM__SWIG_0(gum::BayesNet< double > *self,std::string name,std::string system="",std::string classpath="",PyObject *l=(PyObject *) 0){
      std::stringstream stream;
      std::vector<PythonLoadListener> py_listener;

      try {
          gum::O3prmBNReader<double> reader(self,name,system,classpath);

          auto nbErr=reader.proceed();
          reader.showElegantErrorsAndWarnings(stream);
          if (nbErr>0) {
              reader.showErrorCounts(stream);
              GUM_ERROR(gum::FatalError,stream.str());
          } else {
              return stream.str();
          }
      } catch (gum::IOError& e) {
        throw(e);
      }
      return "";
  }
SWIGINTERN std::string gum_BayesNet_Sl_double_Sg__loadBIFXML__SWIG_0(gum::BayesNet< double > *self,std::string name,PyObject *l=(PyObject *) 0){
      std::stringstream stream;
      std::vector<PythonLoadListener> py_listener;

      try {
          gum::BIFXMLBNReader<double> reader(self,name);

          int isOK=reader.proceed();// for BIFXML, proceed() returns 0 or 1
          if (isOK==1) {
              GUM_ERROR(gum::FatalError,"Errors found in XML file");
          } else {
              return "";
          }
      } catch (gum::IOError& e) {
        throw(e);
      }
      return "";
  }
SWIGINTERN void gum_BayesNet_Sl_double_Sg__saveBIFXML(gum::BayesNet< double > *self,std::string name){
      gum::BIFXMLBNWriter<double> writer;
      writer.write( name, *self );
  }
SWIGINTERN std::string gum_BayesNet_Sl_double_Sg__loadUAI__SWIG_0(gum::BayesNet< double > *self,std::string name,PyObject *l=(PyObject *) 0){
      std::stringstream stream;
      std::vector<PythonLoadListener> py_listener;

      try {
          gum::UAIReader<double> reader(self,name);
          int l_size=__fillLoadListeners(py_listener,l);
          for(int i=0 ; i<l_size ; i++) {
              GUM_CONNECT(reader.scanner(), onLoad, py_listener[i], PythonLoadListener::whenLoading);
          }

          auto nbErr=reader.proceed();
          reader.showElegantErrorsAndWarnings(stream);
          if (nbErr>0) {
              reader.showErrorCounts(stream);
              GUM_ERROR(gum::FatalError,stream.str());
          } else {
              return stream.str();
          }
      } catch (gum::IOError& e) {
        throw(e);
      }
      return "";
  }
SWIGINTERN void gum_BayesNet_Sl_double_Sg__saveUAI(gum::BayesNet< double > *self,std::string name){
      gum::UAIWriter<double> writer;
      writer.write( name, *self );
  }
SWIGINTERN gum::Potential< double > gum_LazyPropagation_Sl_double_Sg__jointPosterior(gum::LazyPropagation< double > *self,PyObject *seq_of_ids){
      if (PySequence_Check(seq_of_ids)==0) {
        PyErr_SetString(PyExc_TypeError, "arg must be a sequence");
        return 0;
      }

      gum::NodeSet s;
      for(Py_ssize_t i=0;i<PySequence_Size(seq_of_ids);i++) {
        PyObject* o=PyList_GetItem(seq_of_ids, i);
        /*if (PyNumber_Check(o)==0) {
          PyErr_SetString(PyExc_TypeError, "arg must be a sequence of ids");
          return 0;
        }*/
        std::cout<<"   "<<i<<" : "<<PyInt_AsLong(o)<<std::endl;
        s<<gum::NodeId( PyInt_AsLong(o));
      }
      std::cout<<s<<std::endl;
      return self->jointPosterior(s);
    }
SWIGINTERN void gum_LazyPropagation_Sl_double_Sg__setEvidence(gum::LazyPropagation< double > *self,PyObject *evidces){}
SWIGINTERN void gum_LazyPropagation_Sl_double_Sg__updateEvidence(gum::LazyPropagation< double > *self,PyObject *evidces){}
SWIGINTERN void gum_LazyPropagation_Sl_double_Sg__setTargets(gum::LazyPropagation< double > *self,PyObject *targets){}
SWIGINTERN void gum_LazyPropagation_Sl_double_Sg__makeInference(gum::LazyPropagation< double > *self){
    self->gum::BayesNetInference<double>::makeInference();
  }
SWIGINTERN gum::Potential< double > const &gum_LazyPropagation_Sl_double_Sg__posterior__SWIG_0(gum::LazyPropagation< double > *self,gum::NodeId const var){
    return self->MarginalTargetedInference<double>::posterior(var);
  }
SWIGINTERN gum::Potential< double > const &gum_LazyPropagation_Sl_double_Sg__posterior__SWIG_1(gum::LazyPropagation< double > *self,std::string const nodeName){
    return self->MarginalTargetedInference<double>::posterior(nodeName);
  }
SWIGINTERN gum::IBayesNet< double > const &gum_LazyPropagation_Sl_double_Sg__BayesNet(gum::LazyPropagation< double > const *self){
    return self->BayesNetInference<double>::BayesNet();
  }
SWIGINTERN void gum_LazyPropagation_Sl_double_Sg__addEvidence__SWIG_0(gum::LazyPropagation< double > *self,gum::NodeId const id,gum::Idx const val){
    self->gum::BayesNetInference<double>::addEvidence(id,val);
  }
SWIGINTERN void gum_LazyPropagation_Sl_double_Sg__addEvidence__SWIG_1(gum::LazyPropagation< double > *self,std::string const &nodeName,gum::Idx const val){
    self->gum::BayesNetInference<double>::addEvidence(nodeName,val);
  }
SWIGINTERN void gum_LazyPropagation_Sl_double_Sg__addEvidence__SWIG_2(gum::LazyPropagation< double > *self,gum::NodeId const id,std::string const &val){
    self->gum::BayesNetInference<double>::addEvidence(id,val);
  }
SWIGINTERN void gum_LazyPropagation_Sl_double_Sg__addEvidence__SWIG_3(gum::LazyPropagation< double > *self,std::string const &nodeName,std::string const &val){
    self->gum::BayesNetInference<double>::addEvidence(nodeName,val);
  }
SWIGINTERN void gum_LazyPropagation_Sl_double_Sg__addEvidence__SWIG_4(gum::LazyPropagation< double > *self,gum::NodeId const id,std::vector< double,std::allocator< double > > const &vals){
   self->gum::BayesNetInference<double>::addEvidence(id,vals);
  }
SWIGINTERN void gum_LazyPropagation_Sl_double_Sg__addEvidence__SWIG_5(gum::LazyPropagation< double > *self,std::string const &nodeName,std::vector< double,std::allocator< double > > const &vals){
    self->gum::BayesNetInference<double>::addEvidence(nodeName,vals);
  }
SWIGINTERN void gum_LazyPropagation_Sl_double_Sg__chgEvidence__SWIG_0(gum::LazyPropagation< double > *self,gum::NodeId const id,gum::Idx const val){
    self->gum::BayesNetInference<double>::chgEvidence(id,val);
  }
SWIGINTERN void gum_LazyPropagation_Sl_double_Sg__chgEvidence__SWIG_1(gum::LazyPropagation< double > *self,std::string const &nodeName,gum::Idx const val){
    self->gum::BayesNetInference<double>::chgEvidence(nodeName,val);
  }
SWIGINTERN void gum_LazyPropagation_Sl_double_Sg__chgEvidence__SWIG_2(gum::LazyPropagation< double > *self,gum::NodeId const id,std::string const &val){
    self->gum::BayesNetInference<double>::chgEvidence(id,val);
  }
SWIGINTERN void gum_LazyPropagation_Sl_double_Sg__chgEvidence__SWIG_3(gum::LazyPropagation< double > *self,std::string const &nodeName,std::string const &val){
    self->gum::BayesNetInference<double>::chgEvidence(nodeName,val);
  }
SWIGINTERN void gum_LazyPropagation_Sl_double_Sg__chgEvidence__SWIG_4(gum::LazyPropagation< double > *self,gum::NodeId const id,std::vector< double,std::allocator< double > > const &vals){
   self->gum::BayesNetInference<double>::chgEvidence(id,vals);
  }
SWIGINTERN void gum_LazyPropagation_Sl_double_Sg__chgEvidence__SWIG_5(gum::LazyPropagation< double > *self,std::string const &nodeName,std::vector< double,std::allocator< double > > const &vals){
    self->gum::BayesNetInference<double>::chgEvidence(nodeName,vals);
  }
SWIGINTERN bool gum_LazyPropagation_Sl_double_Sg__hasEvidence__SWIG_0(gum::LazyPropagation< double > const *self,gum::NodeId const id){
    return self->gum::BayesNetInference<double>::hasEvidence(id);
  }
SWIGINTERN bool gum_LazyPropagation_Sl_double_Sg__hasEvidence__SWIG_1(gum::LazyPropagation< double > const *self,std::string const &nodeName){
    return self->gum::BayesNetInference<double>::hasEvidence(nodeName);
  }
SWIGINTERN void gum_LazyPropagation_Sl_double_Sg__eraseAllEvidence(gum::LazyPropagation< double > *self){
    self->gum::BayesNetInference<double>::eraseAllEvidence();
  }
SWIGINTERN bool gum_LazyPropagation_Sl_double_Sg__hasHardEvidence__SWIG_0(gum::LazyPropagation< double > const *self,gum::NodeId const id){
    return self->gum::BayesNetInference<double>::hasHardEvidence(id);
  }
SWIGINTERN bool gum_LazyPropagation_Sl_double_Sg__hasSoftEvidence__SWIG_0(gum::LazyPropagation< double > const *self,gum::NodeId const id){
    return self->gum::BayesNetInference<double>::hasSoftEvidence(id);
  }
SWIGINTERN bool gum_LazyPropagation_Sl_double_Sg__hasHardEvidence__SWIG_1(gum::LazyPropagation< double > const *self,std::string const &nodeName){
    return self->gum::BayesNetInference<double>::hasHardEvidence(nodeName);
  }
SWIGINTERN bool gum_LazyPropagation_Sl_double_Sg__hasSoftEvidence__SWIG_1(gum::LazyPropagation< double > const *self,std::string const &nodeName){
    return self->gum::BayesNetInference<double>::hasSoftEvidence(nodeName);
  }
SWIGINTERN gum::Size gum_LazyPropagation_Sl_double_Sg__nbrEvidence(gum::LazyPropagation< double > const *self){
    return self->gum::BayesNetInference<double>::nbrEvidence();
  }
SWIGINTERN gum::Size gum_LazyPropagation_Sl_double_Sg__nbrHardEvidence(gum::LazyPropagation< double > const *self){
    return self->gum::BayesNetInference<double>::nbrHardEvidence();
  }
SWIGINTERN gum::Size gum_LazyPropagation_Sl_double_Sg__nbrSoftEvidence(gum::LazyPropagation< double > const *self){
    return self->gum::BayesNetInference<double>::nbrSoftEvidence();
  }
SWIGINTERN void gum_LazyPropagation_Sl_double_Sg__eraseAllTargets(gum::LazyPropagation< double > *self){
      self->gum::MarginalTargetedInference<double>::eraseAllTargets();
    }
SWIGINTERN void gum_LazyPropagation_Sl_double_Sg__addAllTargets(gum::LazyPropagation< double > *self){
      self->gum::MarginalTargetedInference<double>::addAllTargets();
    }
SWIGINTERN void gum_LazyPropagation_Sl_double_Sg__addTarget__SWIG_0(gum::LazyPropagation< double > *self,gum::NodeId const target){
      self->gum::MarginalTargetedInference<double>::addTarget(target);
    }
SWIGINTERN void gum_LazyPropagation_Sl_double_Sg__addTarget__SWIG_1(gum::LazyPropagation< double > *self,std::string const &nodeName){
      self->gum::MarginalTargetedInference<double>::addTarget(nodeName);
    }
SWIGINTERN void gum_LazyPropagation_Sl_double_Sg__eraseTarget__SWIG_0(gum::LazyPropagation< double > *self,gum::NodeId const target){
      self->gum::MarginalTargetedInference<double>::eraseTarget(target);
    }
SWIGINTERN void gum_LazyPropagation_Sl_double_Sg__eraseTarget__SWIG_1(gum::LazyPropagation< double > *self,std::string const &nodeName){
      self->gum::MarginalTargetedInference<double>::eraseTarget(nodeName);
    }
SWIGINTERN bool gum_LazyPropagation_Sl_double_Sg__isTarget__SWIG_0(gum::LazyPropagation< double > const *self,gum::NodeId const variable){
      return self->gum::MarginalTargetedInference<double>::isTarget(variable);
    }
SWIGINTERN bool gum_LazyPropagation_Sl_double_Sg__isTarget__SWIG_1(gum::LazyPropagation< double > const *self,std::string const &nodeName){
      return self->gum::MarginalTargetedInference<double>::isTarget(nodeName);
    }
SWIGINTERN gum::Size gum_LazyPropagation_Sl_double_Sg__nbrTargets(gum::LazyPropagation< double > const *self){
      return self->gum::MarginalTargetedInference<double>::nbrTargets();
    }
SWIGINTERN double gum_LazyPropagation_Sl_double_Sg__H__SWIG_0(gum::LazyPropagation< double > *self,gum::NodeId const X){
     return self->gum::MarginalTargetedInference<double>::H(X);
   }
SWIGINTERN double gum_LazyPropagation_Sl_double_Sg__H__SWIG_1(gum::LazyPropagation< double > *self,std::string const &nodeName){
     return self->gum::MarginalTargetedInference<double>::H(nodeName);
   }
SWIGINTERN void gum_GibbsInference_Sl_double_Sg__setEvidence(gum::GibbsInference< double > *self,PyObject *evidces){}
SWIGINTERN void gum_GibbsInference_Sl_double_Sg__updateEvidence(gum::GibbsInference< double > *self,PyObject *evidces){}
SWIGINTERN void gum_GibbsInference_Sl_double_Sg__setTargets(gum::GibbsInference< double > *self,PyObject *targets){}
SWIGINTERN void gum_GibbsInference_Sl_double_Sg__setVerbosity(gum::GibbsInference< double > *self,bool v){ self->gum::ApproximationScheme::setVerbosity(v); }
SWIGINTERN void gum_GibbsInference_Sl_double_Sg__setEpsilon(gum::GibbsInference< double > *self,double eps){ self->gum::ApproximationScheme::setEpsilon(eps); }
SWIGINTERN void gum_GibbsInference_Sl_double_Sg__setMinEpsilonRate(gum::GibbsInference< double > *self,double rate){ self->gum::ApproximationScheme::setMinEpsilonRate(rate); }
SWIGINTERN void gum_GibbsInference_Sl_double_Sg__setMaxIter(gum::GibbsInference< double > *self,gum::Size max){ self->gum::ApproximationScheme::setMaxIter(max); }
SWIGINTERN void gum_GibbsInference_Sl_double_Sg__setMaxTime(gum::GibbsInference< double > *self,double timeout){ self->gum::ApproximationScheme::setMaxTime(timeout); }
SWIGINTERN void gum_GibbsInference_Sl_double_Sg__setPeriodSize(gum::GibbsInference< double > *self,gum::Size p){ self->gum::ApproximationScheme::setPeriodSize(p); }
SWIGINTERN void gum_GibbsInference_Sl_double_Sg__setBurnIn(gum::GibbsInference< double > *self,gum::Size b){ self->gum::ApproximationScheme::setBurnIn(b); }
SWIGINTERN bool gum_GibbsInference_Sl_double_Sg__verbosity(gum::GibbsInference< double > const *self){ return self->gum::ApproximationScheme::verbosity(); }
SWIGINTERN double gum_GibbsInference_Sl_double_Sg__epsilon(gum::GibbsInference< double > const *self){ return self->gum::ApproximationScheme::epsilon(); }
SWIGINTERN double gum_GibbsInference_Sl_double_Sg__minEpsilonRate(gum::GibbsInference< double > const *self){ return self->gum::ApproximationScheme::minEpsilonRate(); }
SWIGINTERN gum::Size gum_GibbsInference_Sl_double_Sg__maxIter(gum::GibbsInference< double > const *self){ return self->gum::ApproximationScheme::maxIter(); }
SWIGINTERN double gum_GibbsInference_Sl_double_Sg__maxTime(gum::GibbsInference< double > const *self){ return self->gum::ApproximationScheme::maxTime(); }
SWIGINTERN gum::Size gum_GibbsInference_Sl_double_Sg__periodSize(gum::GibbsInference< double > const *self){ return self->gum::ApproximationScheme::periodSize(); }
SWIGINTERN gum::Size gum_GibbsInference_Sl_double_Sg__burnIn(gum::GibbsInference< double > const *self){ return self->gum::ApproximationScheme::burnIn(); }
SWIGINTERN gum::Size gum_GibbsInference_Sl_double_Sg__nbrIterations(gum::GibbsInference< double > const *self){ return self->gum::ApproximationScheme::nbrIterations(); }
SWIGINTERN double gum_GibbsInference_Sl_double_Sg__currentTime(gum::GibbsInference< double > const *self){ return self->gum::ApproximationScheme::currentTime(); }
SWIGINTERN std::string gum_GibbsInference_Sl_double_Sg__messageApproximationScheme(gum::GibbsInference< double > const *self){ return self->gum::ApproximationScheme::messageApproximationScheme(); }
SWIGINTERN std::vector< double,std::allocator< double > > const &gum_GibbsInference_Sl_double_Sg__history(gum::GibbsInference< double > const *self){ return self->gum::ApproximationScheme::history(); }
SWIGINTERN void gum_GibbsInference_Sl_double_Sg__makeInference(gum::GibbsInference< double > *self){
    self->gum::BayesNetInference<double>::makeInference();
  }
SWIGINTERN gum::Potential< double > const &gum_GibbsInference_Sl_double_Sg__posterior__SWIG_0(gum::GibbsInference< double > *self,gum::NodeId const var){
    return self->MarginalTargetedInference<double>::posterior(var);
  }
SWIGINTERN gum::Potential< double > const &gum_GibbsInference_Sl_double_Sg__posterior__SWIG_1(gum::GibbsInference< double > *self,std::string const nodeName){
    return self->MarginalTargetedInference<double>::posterior(nodeName);
  }
SWIGINTERN gum::IBayesNet< double > const &gum_GibbsInference_Sl_double_Sg__BayesNet(gum::GibbsInference< double > const *self){
    return self->BayesNetInference<double>::BayesNet();
  }
SWIGINTERN void gum_GibbsInference_Sl_double_Sg__addEvidence__SWIG_0(gum::GibbsInference< double > *self,gum::NodeId const id,gum::Idx const val){
    self->gum::BayesNetInference<double>::addEvidence(id,val);
  }
SWIGINTERN void gum_GibbsInference_Sl_double_Sg__addEvidence__SWIG_1(gum::GibbsInference< double > *self,std::string const &nodeName,gum::Idx const val){
    self->gum::BayesNetInference<double>::addEvidence(nodeName,val);
  }
SWIGINTERN void gum_GibbsInference_Sl_double_Sg__addEvidence__SWIG_2(gum::GibbsInference< double > *self,gum::NodeId const id,std::string const &val){
    self->gum::BayesNetInference<double>::addEvidence(id,val);
  }
SWIGINTERN void gum_GibbsInference_Sl_double_Sg__addEvidence__SWIG_3(gum::GibbsInference< double > *self,std::string const &nodeName,std::string const &val){
    self->gum::BayesNetInference<double>::addEvidence(nodeName,val);
  }
SWIGINTERN void gum_GibbsInference_Sl_double_Sg__addEvidence__SWIG_4(gum::GibbsInference< double > *self,gum::NodeId const id,std::vector< double,std::allocator< double > > const &vals){
   self->gum::BayesNetInference<double>::addEvidence(id,vals);
  }
SWIGINTERN void gum_GibbsInference_Sl_double_Sg__addEvidence__SWIG_5(gum::GibbsInference< double > *self,std::string const &nodeName,std::vector< double,std::allocator< double > > const &vals){
    self->gum::BayesNetInference<double>::addEvidence(nodeName,vals);
  }
SWIGINTERN void gum_GibbsInference_Sl_double_Sg__chgEvidence__SWIG_0(gum::GibbsInference< double > *self,gum::NodeId const id,gum::Idx const val){
    self->gum::BayesNetInference<double>::chgEvidence(id,val);
  }
SWIGINTERN void gum_GibbsInference_Sl_double_Sg__chgEvidence__SWIG_1(gum::GibbsInference< double > *self,std::string const &nodeName,gum::Idx const val){
    self->gum::BayesNetInference<double>::chgEvidence(nodeName,val);
  }
SWIGINTERN void gum_GibbsInference_Sl_double_Sg__chgEvidence__SWIG_2(gum::GibbsInference< double > *self,gum::NodeId const id,std::string const &val){
    self->gum::BayesNetInference<double>::chgEvidence(id,val);
  }
SWIGINTERN void gum_GibbsInference_Sl_double_Sg__chgEvidence__SWIG_3(gum::GibbsInference< double > *self,std::string const &nodeName,std::string const &val){
    self->gum::BayesNetInference<double>::chgEvidence(nodeName,val);
  }
SWIGINTERN void gum_GibbsInference_Sl_double_Sg__chgEvidence__SWIG_4(gum::GibbsInference< double > *self,gum::NodeId const id,std::vector< double,std::allocator< double > > const &vals){
   self->gum::BayesNetInference<double>::chgEvidence(id,vals);
  }
SWIGINTERN void gum_GibbsInference_Sl_double_Sg__chgEvidence__SWIG_5(gum::GibbsInference< double > *self,std::string const &nodeName,std::vector< double,std::allocator< double > > const &vals){
    self->gum::BayesNetInference<double>::chgEvidence(nodeName,vals);
  }
SWIGINTERN bool gum_GibbsInference_Sl_double_Sg__hasEvidence__SWIG_0(gum::GibbsInference< double > const *self,gum::NodeId const id){
    return self->gum::BayesNetInference<double>::hasEvidence(id);
  }
SWIGINTERN bool gum_GibbsInference_Sl_double_Sg__hasEvidence__SWIG_1(gum::GibbsInference< double > const *self,std::string const &nodeName){
    return self->gum::BayesNetInference<double>::hasEvidence(nodeName);
  }
SWIGINTERN void gum_GibbsInference_Sl_double_Sg__eraseAllEvidence(gum::GibbsInference< double > *self){
    self->gum::BayesNetInference<double>::eraseAllEvidence();
  }
SWIGINTERN bool gum_GibbsInference_Sl_double_Sg__hasHardEvidence__SWIG_0(gum::GibbsInference< double > const *self,gum::NodeId const id){
    return self->gum::BayesNetInference<double>::hasHardEvidence(id);
  }
SWIGINTERN bool gum_GibbsInference_Sl_double_Sg__hasSoftEvidence__SWIG_0(gum::GibbsInference< double > const *self,gum::NodeId const id){
    return self->gum::BayesNetInference<double>::hasSoftEvidence(id);
  }
SWIGINTERN bool gum_GibbsInference_Sl_double_Sg__hasHardEvidence__SWIG_1(gum::GibbsInference< double > const *self,std::string const &nodeName){
    return self->gum::BayesNetInference<double>::hasHardEvidence(nodeName);
  }
SWIGINTERN bool gum_GibbsInference_Sl_double_Sg__hasSoftEvidence__SWIG_1(gum::GibbsInference< double > const *self,std::string const &nodeName){
    return self->gum::BayesNetInference<double>::hasSoftEvidence(nodeName);
  }
SWIGINTERN gum::Size gum_GibbsInference_Sl_double_Sg__nbrEvidence(gum::GibbsInference< double > const *self){
    return self->gum::BayesNetInference<double>::nbrEvidence();
  }
SWIGINTERN gum::Size gum_GibbsInference_Sl_double_Sg__nbrHardEvidence(gum::GibbsInference< double > const *self){
    return self->gum::BayesNetInference<double>::nbrHardEvidence();
  }
SWIGINTERN gum::Size gum_GibbsInference_Sl_double_Sg__nbrSoftEvidence(gum::GibbsInference< double > const *self){
    return self->gum::BayesNetInference<double>::nbrSoftEvidence();
  }
SWIGINTERN void gum_GibbsInference_Sl_double_Sg__eraseAllTargets(gum::GibbsInference< double > *self){
      self->gum::MarginalTargetedInference<double>::eraseAllTargets();
    }
SWIGINTERN void gum_GibbsInference_Sl_double_Sg__addAllTargets(gum::GibbsInference< double > *self){
      self->gum::MarginalTargetedInference<double>::addAllTargets();
    }
SWIGINTERN void gum_GibbsInference_Sl_double_Sg__addTarget__SWIG_0(gum::GibbsInference< double > *self,gum::NodeId const target){
      self->gum::MarginalTargetedInference<double>::addTarget(target);
    }
SWIGINTERN void gum_GibbsInference_Sl_double_Sg__addTarget__SWIG_1(gum::GibbsInference< double > *self,std::string const &nodeName){
      self->gum::MarginalTargetedInference<double>::addTarget(nodeName);
    }
SWIGINTERN void gum_GibbsInference_Sl_double_Sg__eraseTarget__SWIG_0(gum::GibbsInference< double > *self,gum::NodeId const target){
      self->gum::MarginalTargetedInference<double>::eraseTarget(target);
    }
SWIGINTERN void gum_GibbsInference_Sl_double_Sg__eraseTarget__SWIG_1(gum::GibbsInference< double > *self,std::string const &nodeName){
      self->gum::MarginalTargetedInference<double>::eraseTarget(nodeName);
    }
SWIGINTERN bool gum_GibbsInference_Sl_double_Sg__isTarget__SWIG_0(gum::GibbsInference< double > const *self,gum::NodeId const variable){
      return self->gum::MarginalTargetedInference<double>::isTarget(variable);
    }
SWIGINTERN bool gum_GibbsInference_Sl_double_Sg__isTarget__SWIG_1(gum::GibbsInference< double > const *self,std::string const &nodeName){
      return self->gum::MarginalTargetedInference<double>::isTarget(nodeName);
    }
SWIGINTERN gum::Size gum_GibbsInference_Sl_double_Sg__nbrTargets(gum::GibbsInference< double > const *self){
      return self->gum::MarginalTargetedInference<double>::nbrTargets();
    }
SWIGINTERN double gum_GibbsInference_Sl_double_Sg__H__SWIG_0(gum::GibbsInference< double > *self,gum::NodeId const X){
     return self->gum::MarginalTargetedInference<double>::H(X);
   }
SWIGINTERN double gum_GibbsInference_Sl_double_Sg__H__SWIG_1(gum::GibbsInference< double > *self,std::string const &nodeName){
     return self->gum::MarginalTargetedInference<double>::H(nodeName);
   }
SWIGINTERN PyObject *gum_BruteForceKL_Sl_double_Sg__compute(gum::BruteForceKL< double > *self){
  PyObject* q=PyDict_New();

  PyDict_SetItemString(q,"klPQ",PyFloat_FromDouble(self->klPQ()));
  PyDict_SetItemString(q,"errorPQ",PyInt_FromLong(self->errorPQ()));
  PyDict_SetItemString(q,"klQP",PyFloat_FromDouble(self->klQP()));
  PyDict_SetItemString(q,"errorQP",PyInt_FromLong(self->errorQP()));
  PyDict_SetItemString(q,"hellinger",PyFloat_FromDouble(self->hellinger()));
  PyDict_SetItemString(q,"bhattacharya",PyFloat_FromDouble(self->bhattacharya()));

  return q;
}
SWIGINTERN PyObject *gum_GibbsKL_Sl_double_Sg__compute(gum::GibbsKL< double > *self){
  PyObject* q=PyDict_New();

  PyDict_SetItemString(q,"klPQ",PyFloat_FromDouble(self->klPQ()));
  PyDict_SetItemString(q,"errorPQ",PyInt_FromLong(self->errorPQ()));
  PyDict_SetItemString(q,"klQP",PyFloat_FromDouble(self->klQP()));
  PyDict_SetItemString(q,"errorQP",PyInt_FromLong(self->errorQP()));
  PyDict_SetItemString(q,"hellinger",PyFloat_FromDouble(self->hellinger()));
  PyDict_SetItemString(q,"bhattacharya",PyFloat_FromDouble(self->bhattacharya()));

  return q;
}
SWIGINTERN void gum_GibbsKL_Sl_double_Sg__setVerbosity(gum::GibbsKL< double > *self,bool v){ self->gum::ApproximationScheme::setVerbosity(v); }
SWIGINTERN void gum_GibbsKL_Sl_double_Sg__setEpsilon(gum::GibbsKL< double > *self,double eps){ self->gum::ApproximationScheme::setEpsilon(eps); }
SWIGINTERN void gum_GibbsKL_Sl_double_Sg__setMinEpsilonRate(gum::GibbsKL< double > *self,double rate){ self->gum::ApproximationScheme::setMinEpsilonRate(rate); }
SWIGINTERN void gum_GibbsKL_Sl_double_Sg__setMaxIter(gum::GibbsKL< double > *self,gum::Size max){ self->gum::ApproximationScheme::setMaxIter(max); }
SWIGINTERN void gum_GibbsKL_Sl_double_Sg__setMaxTime(gum::GibbsKL< double > *self,double timeout){ self->gum::ApproximationScheme::setMaxTime(timeout); }
SWIGINTERN void gum_GibbsKL_Sl_double_Sg__setPeriodSize(gum::GibbsKL< double > *self,gum::Size p){ self->gum::ApproximationScheme::setPeriodSize(p); }
SWIGINTERN void gum_GibbsKL_Sl_double_Sg__setBurnIn(gum::GibbsKL< double > *self,gum::Size b){ self->gum::ApproximationScheme::setBurnIn(b); }
SWIGINTERN bool gum_GibbsKL_Sl_double_Sg__verbosity(gum::GibbsKL< double > const *self){ return self->gum::ApproximationScheme::verbosity(); }
SWIGINTERN double gum_GibbsKL_Sl_double_Sg__epsilon(gum::GibbsKL< double > const *self){ return self->gum::ApproximationScheme::epsilon(); }
SWIGINTERN double gum_GibbsKL_Sl_double_Sg__minEpsilonRate(gum::GibbsKL< double > const *self){ return self->gum::ApproximationScheme::minEpsilonRate(); }
SWIGINTERN gum::Size gum_GibbsKL_Sl_double_Sg__maxIter(gum::GibbsKL< double > const *self){ return self->gum::ApproximationScheme::maxIter(); }
SWIGINTERN double gum_GibbsKL_Sl_double_Sg__maxTime(gum::GibbsKL< double > const *self){ return self->gum::ApproximationScheme::maxTime(); }
SWIGINTERN gum::Size gum_GibbsKL_Sl_double_Sg__periodSize(gum::GibbsKL< double > const *self){ return self->gum::ApproximationScheme::periodSize(); }
SWIGINTERN gum::Size gum_GibbsKL_Sl_double_Sg__burnIn(gum::GibbsKL< double > const *self){ return self->gum::ApproximationScheme::burnIn(); }
SWIGINTERN gum::Size gum_GibbsKL_Sl_double_Sg__nbrIterations(gum::GibbsKL< double > const *self){ return self->gum::ApproximationScheme::nbrIterations(); }
SWIGINTERN double gum_GibbsKL_Sl_double_Sg__currentTime(gum::GibbsKL< double > const *self){ return self->gum::ApproximationScheme::currentTime(); }
SWIGINTERN std::string gum_GibbsKL_Sl_double_Sg__messageApproximationScheme(gum::GibbsKL< double > const *self){ return self->gum::ApproximationScheme::messageApproximationScheme(); }
SWIGINTERN std::vector< double,std::allocator< double > > const &gum_GibbsKL_Sl_double_Sg__history(gum::GibbsKL< double > const *self){ return self->gum::ApproximationScheme::history(); }
SWIGINTERN void gum_credal_CNMonteCarloSampling_Sl_double_Sc_gum_LazyPropagation_Sl_double_Sg__Sg__setVerbosity(gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > *self,bool v){ self->gum::ApproximationScheme::setVerbosity(v); }
SWIGINTERN void gum_credal_CNMonteCarloSampling_Sl_double_Sc_gum_LazyPropagation_Sl_double_Sg__Sg__setEpsilon(gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > *self,double eps){ self->gum::ApproximationScheme::setEpsilon(eps); }
SWIGINTERN void gum_credal_CNMonteCarloSampling_Sl_double_Sc_gum_LazyPropagation_Sl_double_Sg__Sg__setMinEpsilonRate(gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > *self,double rate){ self->gum::ApproximationScheme::setMinEpsilonRate(rate); }
SWIGINTERN void gum_credal_CNMonteCarloSampling_Sl_double_Sc_gum_LazyPropagation_Sl_double_Sg__Sg__setMaxIter(gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > *self,gum::Size max){ self->gum::ApproximationScheme::setMaxIter(max); }
SWIGINTERN void gum_credal_CNMonteCarloSampling_Sl_double_Sc_gum_LazyPropagation_Sl_double_Sg__Sg__setMaxTime(gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > *self,double timeout){ self->gum::ApproximationScheme::setMaxTime(timeout); }
SWIGINTERN void gum_credal_CNMonteCarloSampling_Sl_double_Sc_gum_LazyPropagation_Sl_double_Sg__Sg__setPeriodSize(gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > *self,gum::Size p){ self->gum::ApproximationScheme::setPeriodSize(p); }
SWIGINTERN void gum_credal_CNMonteCarloSampling_Sl_double_Sc_gum_LazyPropagation_Sl_double_Sg__Sg__setBurnIn(gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > *self,gum::Size b){ self->gum::ApproximationScheme::setBurnIn(b); }
SWIGINTERN bool gum_credal_CNMonteCarloSampling_Sl_double_Sc_gum_LazyPropagation_Sl_double_Sg__Sg__verbosity(gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > const *self){ return self->gum::ApproximationScheme::verbosity(); }
SWIGINTERN double gum_credal_CNMonteCarloSampling_Sl_double_Sc_gum_LazyPropagation_Sl_double_Sg__Sg__epsilon(gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > const *self){ return self->gum::ApproximationScheme::epsilon(); }
SWIGINTERN double gum_credal_CNMonteCarloSampling_Sl_double_Sc_gum_LazyPropagation_Sl_double_Sg__Sg__minEpsilonRate(gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > const *self){ return self->gum::ApproximationScheme::minEpsilonRate(); }
SWIGINTERN gum::Size gum_credal_CNMonteCarloSampling_Sl_double_Sc_gum_LazyPropagation_Sl_double_Sg__Sg__maxIter(gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > const *self){ return self->gum::ApproximationScheme::maxIter(); }
SWIGINTERN double gum_credal_CNMonteCarloSampling_Sl_double_Sc_gum_LazyPropagation_Sl_double_Sg__Sg__maxTime(gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > const *self){ return self->gum::ApproximationScheme::maxTime(); }
SWIGINTERN gum::Size gum_credal_CNMonteCarloSampling_Sl_double_Sc_gum_LazyPropagation_Sl_double_Sg__Sg__periodSize(gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > const *self){ return self->gum::ApproximationScheme::periodSize(); }
SWIGINTERN gum::Size gum_credal_CNMonteCarloSampling_Sl_double_Sc_gum_LazyPropagation_Sl_double_Sg__Sg__burnIn(gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > const *self){ return self->gum::ApproximationScheme::burnIn(); }
SWIGINTERN gum::Size gum_credal_CNMonteCarloSampling_Sl_double_Sc_gum_LazyPropagation_Sl_double_Sg__Sg__nbrIterations(gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > const *self){ return self->gum::ApproximationScheme::nbrIterations(); }
SWIGINTERN double gum_credal_CNMonteCarloSampling_Sl_double_Sc_gum_LazyPropagation_Sl_double_Sg__Sg__currentTime(gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > const *self){ return self->gum::ApproximationScheme::currentTime(); }
SWIGINTERN std::string gum_credal_CNMonteCarloSampling_Sl_double_Sc_gum_LazyPropagation_Sl_double_Sg__Sg__messageApproximationScheme(gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > const *self){ return self->gum::ApproximationScheme::messageApproximationScheme(); }
SWIGINTERN std::vector< double,std::allocator< double > > const &gum_credal_CNMonteCarloSampling_Sl_double_Sc_gum_LazyPropagation_Sl_double_Sg__Sg__history(gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > const *self){ return self->gum::ApproximationScheme::history(); }
SWIGINTERN void gum_credal_CNMonteCarloSampling_Sl_double_Sc_gum_LazyPropagation_Sl_double_Sg__Sg__setRepetitiveInd(gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > *self,bool const flag){
    self->gum::credal::InferenceEngine<double>::setRepetitiveInd(flag);
  }
SWIGINTERN std::vector< double,std::allocator< double > > const &gum_credal_CNMonteCarloSampling_Sl_double_Sc_gum_LazyPropagation_Sl_double_Sg__Sg__marginalMax__SWIG_0(gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > const *self,gum::NodeId const id){
    return self->gum::credal::InferenceEngine<double>::marginalMax(id);
  }
SWIGINTERN std::vector< double,std::allocator< double > > const &gum_credal_CNMonteCarloSampling_Sl_double_Sc_gum_LazyPropagation_Sl_double_Sg__Sg__marginalMin__SWIG_0(gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > const *self,gum::NodeId const id){
    return self->gum::credal::InferenceEngine<double>::marginalMin(id);
  }
SWIGINTERN std::vector< double,std::allocator< double > > const &gum_credal_CNMonteCarloSampling_Sl_double_Sc_gum_LazyPropagation_Sl_double_Sg__Sg__marginalMax__SWIG_1(gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > const *self,std::string const name){
    return self->gum::credal::InferenceEngine<double>::marginalMax(name);
  }
SWIGINTERN std::vector< double,std::allocator< double > > const &gum_credal_CNMonteCarloSampling_Sl_double_Sc_gum_LazyPropagation_Sl_double_Sg__Sg__marginalMin__SWIG_1(gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > const *self,std::string const name){
    return self->gum::credal::InferenceEngine<double>::marginalMin(name);
  }
SWIGINTERN void gum_credal_CNMonteCarloSampling_Sl_double_Sc_gum_LazyPropagation_Sl_double_Sg__Sg__insertModalsFile(gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > *self,std::string const &path){
    self->gum::credal::InferenceEngine<double>::insertModalsFile(path);
  }
SWIGINTERN std::vector< double,std::allocator< double > > const &gum_credal_CNMonteCarloSampling_Sl_double_Sc_gum_LazyPropagation_Sl_double_Sg__Sg__dynamicExpMax(gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > const *self,std::string const &varName){
    return self->gum::credal::InferenceEngine<double>::dynamicExpMax(varName);
  }
SWIGINTERN std::vector< double,std::allocator< double > > const &gum_credal_CNMonteCarloSampling_Sl_double_Sc_gum_LazyPropagation_Sl_double_Sg__Sg__dynamicExpMin(gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > const *self,std::string const &varName){
    return self->gum::credal::InferenceEngine<double>::dynamicExpMin(varName);
  }
SWIGINTERN void gum_credal_CNLoopyPropagation_Sl_double_Sg__setVerbosity(gum::credal::CNLoopyPropagation< double > *self,bool v){ self->gum::ApproximationScheme::setVerbosity(v); }
SWIGINTERN void gum_credal_CNLoopyPropagation_Sl_double_Sg__setEpsilon(gum::credal::CNLoopyPropagation< double > *self,double eps){ self->gum::ApproximationScheme::setEpsilon(eps); }
SWIGINTERN void gum_credal_CNLoopyPropagation_Sl_double_Sg__setMinEpsilonRate(gum::credal::CNLoopyPropagation< double > *self,double rate){ self->gum::ApproximationScheme::setMinEpsilonRate(rate); }
SWIGINTERN void gum_credal_CNLoopyPropagation_Sl_double_Sg__setMaxIter(gum::credal::CNLoopyPropagation< double > *self,gum::Size max){ self->gum::ApproximationScheme::setMaxIter(max); }
SWIGINTERN void gum_credal_CNLoopyPropagation_Sl_double_Sg__setMaxTime(gum::credal::CNLoopyPropagation< double > *self,double timeout){ self->gum::ApproximationScheme::setMaxTime(timeout); }
SWIGINTERN void gum_credal_CNLoopyPropagation_Sl_double_Sg__setPeriodSize(gum::credal::CNLoopyPropagation< double > *self,gum::Size p){ self->gum::ApproximationScheme::setPeriodSize(p); }
SWIGINTERN void gum_credal_CNLoopyPropagation_Sl_double_Sg__setBurnIn(gum::credal::CNLoopyPropagation< double > *self,gum::Size b){ self->gum::ApproximationScheme::setBurnIn(b); }
SWIGINTERN bool gum_credal_CNLoopyPropagation_Sl_double_Sg__verbosity(gum::credal::CNLoopyPropagation< double > const *self){ return self->gum::ApproximationScheme::verbosity(); }
SWIGINTERN double gum_credal_CNLoopyPropagation_Sl_double_Sg__epsilon(gum::credal::CNLoopyPropagation< double > const *self){ return self->gum::ApproximationScheme::epsilon(); }
SWIGINTERN double gum_credal_CNLoopyPropagation_Sl_double_Sg__minEpsilonRate(gum::credal::CNLoopyPropagation< double > const *self){ return self->gum::ApproximationScheme::minEpsilonRate(); }
SWIGINTERN gum::Size gum_credal_CNLoopyPropagation_Sl_double_Sg__maxIter(gum::credal::CNLoopyPropagation< double > const *self){ return self->gum::ApproximationScheme::maxIter(); }
SWIGINTERN double gum_credal_CNLoopyPropagation_Sl_double_Sg__maxTime(gum::credal::CNLoopyPropagation< double > const *self){ return self->gum::ApproximationScheme::maxTime(); }
SWIGINTERN gum::Size gum_credal_CNLoopyPropagation_Sl_double_Sg__periodSize(gum::credal::CNLoopyPropagation< double > const *self){ return self->gum::ApproximationScheme::periodSize(); }
SWIGINTERN gum::Size gum_credal_CNLoopyPropagation_Sl_double_Sg__burnIn(gum::credal::CNLoopyPropagation< double > const *self){ return self->gum::ApproximationScheme::burnIn(); }
SWIGINTERN gum::Size gum_credal_CNLoopyPropagation_Sl_double_Sg__nbrIterations(gum::credal::CNLoopyPropagation< double > const *self){ return self->gum::ApproximationScheme::nbrIterations(); }
SWIGINTERN double gum_credal_CNLoopyPropagation_Sl_double_Sg__currentTime(gum::credal::CNLoopyPropagation< double > const *self){ return self->gum::ApproximationScheme::currentTime(); }
SWIGINTERN std::string gum_credal_CNLoopyPropagation_Sl_double_Sg__messageApproximationScheme(gum::credal::CNLoopyPropagation< double > const *self){ return self->gum::ApproximationScheme::messageApproximationScheme(); }
SWIGINTERN std::vector< double,std::allocator< double > > const &gum_credal_CNLoopyPropagation_Sl_double_Sg__history(gum::credal::CNLoopyPropagation< double > const *self){ return self->gum::ApproximationScheme::history(); }
SWIGINTERN void gum_credal_CNLoopyPropagation_Sl_double_Sg__setRepetitiveInd(gum::credal::CNLoopyPropagation< double > *self,bool const flag){
    self->gum::credal::InferenceEngine<double>::setRepetitiveInd(flag);
  }
SWIGINTERN std::vector< double,std::allocator< double > > const &gum_credal_CNLoopyPropagation_Sl_double_Sg__marginalMax__SWIG_0(gum::credal::CNLoopyPropagation< double > const *self,gum::NodeId const id){
    return self->gum::credal::InferenceEngine<double>::marginalMax(id);
  }
SWIGINTERN std::vector< double,std::allocator< double > > const &gum_credal_CNLoopyPropagation_Sl_double_Sg__marginalMin__SWIG_0(gum::credal::CNLoopyPropagation< double > const *self,gum::NodeId const id){
    return self->gum::credal::InferenceEngine<double>::marginalMin(id);
  }
SWIGINTERN std::vector< double,std::allocator< double > > const &gum_credal_CNLoopyPropagation_Sl_double_Sg__marginalMax__SWIG_1(gum::credal::CNLoopyPropagation< double > const *self,std::string const name){
    return self->gum::credal::InferenceEngine<double>::marginalMax(name);
  }
SWIGINTERN std::vector< double,std::allocator< double > > const &gum_credal_CNLoopyPropagation_Sl_double_Sg__marginalMin__SWIG_1(gum::credal::CNLoopyPropagation< double > const *self,std::string const name){
    return self->gum::credal::InferenceEngine<double>::marginalMin(name);
  }
SWIGINTERN void gum_credal_CNLoopyPropagation_Sl_double_Sg__insertModalsFile(gum::credal::CNLoopyPropagation< double > *self,std::string const &path){
    self->gum::credal::InferenceEngine<double>::insertModalsFile(path);
  }
SWIGINTERN std::vector< double,std::allocator< double > > const &gum_credal_CNLoopyPropagation_Sl_double_Sg__dynamicExpMax(gum::credal::CNLoopyPropagation< double > const *self,std::string const &varName){
    return self->gum::credal::InferenceEngine<double>::dynamicExpMax(varName);
  }
SWIGINTERN std::vector< double,std::allocator< double > > const &gum_credal_CNLoopyPropagation_Sl_double_Sg__dynamicExpMin(gum::credal::CNLoopyPropagation< double > const *self,std::string const &varName){
    return self->gum::credal::InferenceEngine<double>::dynamicExpMin(varName);
  }
SWIGINTERN PyObject *gum_InfluenceDiagram_Sl_double_Sg__names(gum::InfluenceDiagram< double > const *self){
      PyObject* q=PyList_New(0);

      const gum::DAG& dag=self->dag();
      for ( gum::NodeGraphPartIterator node_iter = dag.nodes().begin();node_iter != dag.nodes().end(); ++node_iter ) {
        PyList_Append(q,PyString_FromString(self->variable(*node_iter).name().c_str()));
      }
      return q;
    }
SWIGINTERN PyObject *gum_InfluenceDiagram_Sl_double_Sg__ids(gum::InfluenceDiagram< double > *self){
      PyObject* q=PyList_New(0);

      const gum::DAG& dag=self->dag();
      for ( gum::NodeGraphPartIterator  node_iter = dag.nodes().begin();node_iter != dag.nodes().end(); ++node_iter ) {
        PyList_Append(q,PyInt_FromLong(*node_iter));
      }

      return q;
    }
SWIGINTERN PyObject *gum_InfluenceDiagram_Sl_double_Sg__arcs(gum::InfluenceDiagram< double > *self){
      PyObject* q=PyList_New(0);

      const gum::DAG& dag=self->dag();
      for ( auto arc_iter = dag.arcs().begin();arc_iter != dag.arcs().end(); ++arc_iter ) {
        PyList_Append(q,Py_BuildValue("(i,i)", arc_iter->tail(), arc_iter->head()));
      }

      return q;
    }
SWIGINTERN PyObject *gum_InfluenceDiagram_Sl_double_Sg__parents(gum::InfluenceDiagram< double > const *self,gum::NodeId const id){
    PyObject* q=PyList_New(0);

    const gum::NodeSet& p=self->dag().parents(id);
    for(gum::NodeSet::const_iterator it=p.begin();it!=p.end();++it) {
      PyList_Append(q,PyInt_FromLong(*it));
    }

    return q;
  }
SWIGINTERN PyObject *gum_InfluenceDiagram_Sl_double_Sg__children(gum::InfluenceDiagram< double > const *self,gum::NodeId const id){
    PyObject* q=PyList_New(0);

    const gum::NodeSet& p=self->dag().children(id);
    for(gum::NodeSet::const_iterator it=p.begin();it!=p.end();++it) {
      PyList_Append(q,PyInt_FromLong(*it));
    }

    return q;
  }
SWIGINTERN bool gum_InfluenceDiagram_Sl_double_Sg__loadBIFXML__SWIG_0(gum::InfluenceDiagram< double > *self,std::string name,PyObject *l=(PyObject *) 0){
    try {
        gum::BIFXMLIDReader<double> reader(self,name);
        reader.proceed(); 
        return true;
    } catch (gum::IOError& e) {
        throw(e);
    }

    return false;
  }
SWIGINTERN void gum_InfluenceDiagram_Sl_double_Sg__saveBIFXML(gum::InfluenceDiagram< double > *self,std::string name){
      gum::BIFXMLIDWriter<double> writer;
      writer.write( name, *self );
  }
SWIGINTERN gum::InfluenceDiagram< double > const &gum_InfluenceDiagramInference_Sl_double_Sg__influenceDiagram(gum::InfluenceDiagramInference< double > const *self){
      return static_cast<const gum::IInfluenceDiagramInference<double> *>(self)->influenceDiagram();
    }
SWIGINTERN void gum_InfluenceDiagramInference_Sl_double_Sg__setEvidence(gum::InfluenceDiagramInference< double > *self,PyObject *evidces){}
SWIGINTERN void gum_InfluenceDiagramInference_Sl_double_Sg___setEvidence(gum::InfluenceDiagramInference< double > *self,PyObject *evidences){
      if (PySequence_Check(evidences)==0) {
        PyErr_SetString(PyExc_TypeError, "arg must be a sequence");
        return;
      }
      gum::List<const gum::Potential<double>* > l;

      for(Py_ssize_t i=0;i<PySequence_Size(evidences);i++) {
        PyObject* pot=PyList_GetItem(evidences, i);

	void *argp1 = 0 ;
	int res1 = 0 ;
	res1 = SWIG_ConvertPtr(pot, &argp1,SWIGTYPE_p_gum__PotentialT_double_t, 0 |  0 );
	if (!SWIG_IsOK(res1)) {
	  PyErr_SetString(PyExc_TypeError,"Elements of arg must be Potentials");
	  return;
	}
	gum::Potential< double > *arg1 =  reinterpret_cast< gum::Potential< double > * >(argp1);
	l.push_front(arg1);
      }
      self->insertEvidence(l);
    }
SWIGINTERN std::string const gum_InfluenceDiagramInference_Sl_double_Sg__junctionTreeToDot(gum::InfluenceDiagramInference< double > *self){
      std::stringstream stream;
      self->displayStrongJunctionTree(stream);
      return stream.str();
    }
SWIGINTERN void gum_learning_BNLearner_Sl_double_Sg__setSliceOrder__SWIG_0(gum::learning::BNLearner< double > *self,PyObject *l){
    gum::NodeProperty<unsigned int> ranks; // gum should be added by SED in cmake/GUM-UseSWIG.cmake

    if (PyList_Check(l)==0) {
      PyErr_SetString(PyExc_TypeError, "arg must be a sequence (of sequences of int)");
      return;
    }

    for(Py_ssize_t i=0;i<PySequence_Size(l);i++) {
      PyObject* rows=PyList_GetItem(l, i);
      if (PyList_Check(rows)==0) {
        PyErr_SetString(PyExc_TypeError, "arg must be a sequence of sequences (of int)");
        return;
      }

      for(Py_ssize_t j=0;j<PySequence_Size(rows);j++) {
        PyObject* row=PyList_GetItem(rows, j);
        if (PyInt_Check(row)==0) {
          PyErr_SetString(PyExc_TypeError, "arg must be a sequence of sequence of int");
          return;
        }
        ranks.insert(PyInt_AsLong(row),i);
      }
    }
    self->setSliceOrder(ranks);
  }
SWIGINTERN void gum_learning_BNLearner_Sl_double_Sg__useK2__SWIG_0(gum::learning::BNLearner< double > *self,PyObject *l){
    std::vector<unsigned int> v;

    if (PyList_Check(l)==0) {
      PyErr_SetString(PyExc_TypeError, "arg must be a sequence");
      return;
    }

    for(Py_ssize_t i=0;i<PySequence_Size(l);i++) {
      PyObject* row=PyList_GetItem(l, i);
      if (PyInt_Check(row)==0) {
        PyErr_SetString(PyExc_TypeError, "arg must be a sequence of int");
        return;
      }
      v.push_back((unsigned int)PyInt_AsLong(row));
    }

    self->useK2(v);
  }
SWIGINTERN void gum_learning_BNLearner_Sl_double_Sg__setVerbosity(gum::learning::BNLearner< double > *self,bool v){ self->gum::learning::genericBNLearner::setVerbosity(v); }
SWIGINTERN void gum_learning_BNLearner_Sl_double_Sg__setEpsilon(gum::learning::BNLearner< double > *self,double eps){ self->gum::learning::genericBNLearner::setEpsilon(eps); }
SWIGINTERN void gum_learning_BNLearner_Sl_double_Sg__setMinEpsilonRate(gum::learning::BNLearner< double > *self,double rate){ self->gum::learning::genericBNLearner::setMinEpsilonRate(rate); }
SWIGINTERN void gum_learning_BNLearner_Sl_double_Sg__setMaxIter(gum::learning::BNLearner< double > *self,gum::Size max){ self->gum::learning::genericBNLearner::setMaxIter(max); }
SWIGINTERN void gum_learning_BNLearner_Sl_double_Sg__setMaxTime__SWIG_0_0(gum::learning::BNLearner< double > *self,double timeout){ self->gum::learning::genericBNLearner::setMaxTime(timeout); }
SWIGINTERN void gum_learning_BNLearner_Sl_double_Sg__setPeriodSize(gum::learning::BNLearner< double > *self,gum::Size p){ self->gum::learning::genericBNLearner::setPeriodSize(p); }
SWIGINTERN void gum_learning_BNLearner_Sl_double_Sg__setBurnIn(gum::learning::BNLearner< double > *self,gum::Size b){ self->gum::learning::genericBNLearner::setBurnIn(b); }
SWIGINTERN bool gum_learning_BNLearner_Sl_double_Sg__verbosity(gum::learning::BNLearner< double > const *self){ return self->gum::learning::genericBNLearner::verbosity(); }
SWIGINTERN double gum_learning_BNLearner_Sl_double_Sg__epsilon(gum::learning::BNLearner< double > const *self){ return self->gum::learning::genericBNLearner::epsilon(); }
SWIGINTERN double gum_learning_BNLearner_Sl_double_Sg__minEpsilonRate(gum::learning::BNLearner< double > const *self){ return self->gum::learning::genericBNLearner::minEpsilonRate(); }
SWIGINTERN gum::Size gum_learning_BNLearner_Sl_double_Sg__maxIter(gum::learning::BNLearner< double > const *self){ return self->gum::learning::genericBNLearner::maxIter(); }
SWIGINTERN double gum_learning_BNLearner_Sl_double_Sg__maxTime__SWIG_0_0(gum::learning::BNLearner< double > const *self){ return self->gum::learning::genericBNLearner::maxTime(); }
SWIGINTERN gum::Size gum_learning_BNLearner_Sl_double_Sg__periodSize(gum::learning::BNLearner< double > const *self){ return self->gum::learning::genericBNLearner::periodSize(); }
SWIGINTERN gum::Size gum_learning_BNLearner_Sl_double_Sg__burnIn(gum::learning::BNLearner< double > const *self){ return self->gum::learning::genericBNLearner::burnIn(); }
SWIGINTERN gum::Size gum_learning_BNLearner_Sl_double_Sg__nbrIterations(gum::learning::BNLearner< double > const *self){ return self->gum::learning::genericBNLearner::nbrIterations(); }
SWIGINTERN double gum_learning_BNLearner_Sl_double_Sg__currentTime__SWIG_0_0(gum::learning::BNLearner< double > const *self){ return self->gum::learning::genericBNLearner::currentTime(); }
SWIGINTERN std::string gum_learning_BNLearner_Sl_double_Sg__messageApproximationScheme(gum::learning::BNLearner< double > const *self){ return self->gum::learning::genericBNLearner::messageApproximationScheme(); }
SWIGINTERN std::vector< double,std::allocator< double > > const &gum_learning_BNLearner_Sl_double_Sg__history(gum::learning::BNLearner< double > const *self){ return self->gum::learning::genericBNLearner::history(); }
SWIGINTERN gum::DAG gum_learning_BNLearner_Sl_double_Sg__learnDAG(gum::learning::BNLearner< double > *self){ return self->gum::learning::genericBNLearner::learnDAG(); }
SWIGINTERN std::vector< std::string,std::allocator< std::string > > const &gum_learning_BNLearner_Sl_double_Sg__names(gum::learning::BNLearner< double > const *self){ return self->gum::learning::genericBNLearner::names(); }
SWIGINTERN std::vector< gum::Size,std::allocator< gum::Size > > const &gum_learning_BNLearner_Sl_double_Sg__modalities(gum::learning::BNLearner< double > *self){ return self->gum::learning::genericBNLearner::modalities(); }
SWIGINTERN gum::NodeId gum_learning_BNLearner_Sl_double_Sg__idFromName(gum::learning::BNLearner< double > const *self,std::string const &var_name){ return self->gum::learning::genericBNLearner::idFromName(var_name); }
SWIGINTERN std::string const &gum_learning_BNLearner_Sl_double_Sg__nameFromId(gum::learning::BNLearner< double > const *self,gum::NodeId id){ return self->gum::learning::genericBNLearner::nameFromId(id); }
SWIGINTERN void gum_learning_BNLearner_Sl_double_Sg__useScoreAIC(gum::learning::BNLearner< double > *self){ self->gum::learning::genericBNLearner::useScoreAIC(); }
SWIGINTERN void gum_learning_BNLearner_Sl_double_Sg__useScoreBD(gum::learning::BNLearner< double > *self){ self->gum::learning::genericBNLearner::useScoreBD(); }
SWIGINTERN void gum_learning_BNLearner_Sl_double_Sg__useScoreBDeu(gum::learning::BNLearner< double > *self){ self->gum::learning::genericBNLearner::useScoreBDeu(); }
SWIGINTERN void gum_learning_BNLearner_Sl_double_Sg__useScoreBIC(gum::learning::BNLearner< double > *self){ self->gum::learning::genericBNLearner::useScoreBIC(); }
SWIGINTERN void gum_learning_BNLearner_Sl_double_Sg__useScoreK2(gum::learning::BNLearner< double > *self){ self->gum::learning::genericBNLearner::useScoreK2(); }
SWIGINTERN void gum_learning_BNLearner_Sl_double_Sg__useScoreLog2Likelihood(gum::learning::BNLearner< double > *self){ self->gum::learning::genericBNLearner::useScoreLog2Likelihood(); }
SWIGINTERN void gum_learning_BNLearner_Sl_double_Sg__setAprioriWeight(gum::learning::BNLearner< double > *self,double weight){ self->gum::learning::genericBNLearner::setAprioriWeight(weight); }
SWIGINTERN void gum_learning_BNLearner_Sl_double_Sg__useNoApriori(gum::learning::BNLearner< double > *self){ self->gum::learning::genericBNLearner::useNoApriori(); }
SWIGINTERN void gum_learning_BNLearner_Sl_double_Sg__useAprioriSmoothing_SWIG_0_0(gum::learning::BNLearner< double > *self,double weight=-1){ self->gum::learning::genericBNLearner::useAprioriSmoothing(weight); }
SWIGINTERN void gum_learning_BNLearner_Sl_double_Sg__useAprioriSmoothing_SWIG_0_1(gum::learning::BNLearner< double > *self){ self->gum::learning::genericBNLearner::useAprioriSmoothing(); }
SWIGINTERN void gum_learning_BNLearner_Sl_double_Sg__useAprioriDirichlet(gum::learning::BNLearner< double > *self,std::string const &filename){ self->gum::learning::genericBNLearner::useAprioriDirichlet(filename); }
SWIGINTERN void gum_learning_BNLearner_Sl_double_Sg__useGreedyHillClimbing(gum::learning::BNLearner< double > *self){ self->gum::learning::genericBNLearner::useGreedyHillClimbing(); }
SWIGINTERN void gum_learning_BNLearner_Sl_double_Sg__useLocalSearchWithTabuList_SWIG_0_0(gum::learning::BNLearner< double > *self,gum::Size tabu_size=100,gum::Size nb_decrease=2){ self->gum::learning::genericBNLearner::useLocalSearchWithTabuList(tabu_size,nb_decrease); }
SWIGINTERN void gum_learning_BNLearner_Sl_double_Sg__useLocalSearchWithTabuList_SWIG_0_1(gum::learning::BNLearner< double > *self,gum::Size tabu_size=100){ self->gum::learning::genericBNLearner::useLocalSearchWithTabuList(tabu_size); }
SWIGINTERN void gum_learning_BNLearner_Sl_double_Sg__useLocalSearchWithTabuList_SWIG_0_2(gum::learning::BNLearner< double > *self){ self->gum::learning::genericBNLearner::useLocalSearchWithTabuList(); }
SWIGINTERN void gum_learning_BNLearner_Sl_double_Sg__useK2__SWIG_1_0(gum::learning::BNLearner< double > *self,gum::Sequence< gum::NodeId > const &order){ self->gum::learning::genericBNLearner::useK2(order); }
SWIGINTERN void gum_learning_BNLearner_Sl_double_Sg__useK2__SWIG_1_1(gum::learning::BNLearner< double > *self,std::vector< gum::NodeId,std::allocator< gum::NodeId > > const &order){ self->gum::learning::genericBNLearner::useK2(order); }
SWIGINTERN void gum_learning_BNLearner_Sl_double_Sg__setMaxIndegree(gum::learning::BNLearner< double > *self,gum::Size max_indegree){ self->gum::learning::genericBNLearner::setMaxIndegree(max_indegree); }
SWIGINTERN void gum_learning_BNLearner_Sl_double_Sg__setSliceOrder__SWIG_1_0(gum::learning::BNLearner< double > *self,gum::NodeProperty< gum::NodeId > const &slice_order){ self->gum::learning::genericBNLearner::setSliceOrder(slice_order); }
SWIGINTERN void gum_learning_BNLearner_Sl_double_Sg__addForbiddenArc_SWIG_0_0(gum::learning::BNLearner< double > *self,gum::Arc const &arc){ self->gum::learning::genericBNLearner::addForbiddenArc(arc); }
SWIGINTERN void gum_learning_BNLearner_Sl_double_Sg__addForbiddenArc_SWIG_0_1(gum::learning::BNLearner< double > *self,gum::NodeId const tail,gum::NodeId const head){ self->gum::learning::genericBNLearner::addForbiddenArc(tail,head); }
SWIGINTERN void gum_learning_BNLearner_Sl_double_Sg__addForbiddenArc_SWIG_0_2(gum::learning::BNLearner< double > *self,std::string const &tail,std::string const &head){ self->gum::learning::genericBNLearner::addForbiddenArc(tail,head); }
SWIGINTERN void gum_learning_BNLearner_Sl_double_Sg__eraseForbiddenArc_SWIG_0_0(gum::learning::BNLearner< double > *self,gum::Arc const &arc){ self->gum::learning::genericBNLearner::eraseForbiddenArc(arc); }
SWIGINTERN void gum_learning_BNLearner_Sl_double_Sg__eraseForbiddenArc_SWIG_0_1(gum::learning::BNLearner< double > *self,gum::NodeId const tail,gum::NodeId const head){ self->gum::learning::genericBNLearner::eraseForbiddenArc(tail,head); }
SWIGINTERN void gum_learning_BNLearner_Sl_double_Sg__eraseForbiddenArc_SWIG_0_2(gum::learning::BNLearner< double > *self,std::string const &tail,std::string const &head){ self->gum::learning::genericBNLearner::eraseForbiddenArc(tail,head); }
SWIGINTERN void gum_learning_BNLearner_Sl_double_Sg__addMandatoryArc__SWIG_0_0(gum::learning::BNLearner< double > *self,gum::Arc const &arc){ self->gum::learning::genericBNLearner::addMandatoryArc(arc); }
SWIGINTERN void gum_learning_BNLearner_Sl_double_Sg__addMandatoryArc__SWIG_0_1(gum::learning::BNLearner< double > *self,gum::NodeId const tail,gum::NodeId const head){ self->gum::learning::genericBNLearner::addMandatoryArc(tail,head); }
SWIGINTERN void gum_learning_BNLearner_Sl_double_Sg__addMandatoryArc__SWIG_0_2(gum::learning::BNLearner< double > *self,std::string const &tail,std::string const &head){ self->gum::learning::genericBNLearner::addMandatoryArc(tail,head); }
SWIGINTERN void gum_learning_BNLearner_Sl_double_Sg__eraseMandatoryArc_SWIG_0_0(gum::learning::BNLearner< double > *self,gum::Arc const &arc){ self->gum::learning::genericBNLearner::eraseMandatoryArc(arc); }
SWIGINTERN void gum_learning_BNLearner_Sl_double_Sg__eraseMandatoryArc_SWIG_0_1(gum::learning::BNLearner< double > *self,gum::NodeId const tail,gum::NodeId const head){ self->gum::learning::genericBNLearner::eraseMandatoryArc(tail,head); }
SWIGINTERN void gum_learning_BNLearner_Sl_double_Sg__eraseMandatoryArc_SWIG_0_2(gum::learning::BNLearner< double > *self,std::string const &tail,std::string const &head){ self->gum::learning::genericBNLearner::eraseMandatoryArc(tail,head); }
SWIGINTERN void gum_learning_BNLearner_Sl_double_Sg__setInitialDAG(gum::learning::BNLearner< double > *self,gum::DAG const &g){
    self->gum::learning::genericBNLearner::setInitialDAG(g);
  }

namespace gum {
  void statsObj(void) {
#ifndef NDEBUG
    gum::__debug__::__atexit();
#else
    //std::cout<<"Stats on aGrUM objects only available in debug mode"<<std::endl;
#endif //NDEBUG
  }
}



/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "pyAgrumPYTHON_wrap.h"

#ifdef __cplusplus
extern "C" {
#endif
SWIGINTERN PyObject *_wrap_delete_SwigPyIterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SwigPyIterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SwigPyIterator" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_value(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_value",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_value" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)((swig::SwigPyIterator const *)arg1)->value();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_incr",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_incr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_incr" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  try {
    result = (swig::SwigPyIterator *)(arg1)->incr(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_incr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_incr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (swig::SwigPyIterator *)(arg1)->incr();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SwigPyIterator_incr__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator_incr__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SwigPyIterator_incr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    swig::SwigPyIterator::incr(size_t)\n"
    "    swig::SwigPyIterator::incr()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_decr",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_decr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_decr" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  try {
    result = (swig::SwigPyIterator *)(arg1)->decr(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_decr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_decr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (swig::SwigPyIterator *)(arg1)->decr();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SwigPyIterator_decr__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator_decr__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SwigPyIterator_decr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    swig::SwigPyIterator::decr(size_t)\n"
    "    swig::SwigPyIterator::decr()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_distance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ptrdiff_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_distance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_distance" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator_distance" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator_distance" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  try {
    result = ((swig::SwigPyIterator const *)arg1)->distance((swig::SwigPyIterator const &)*arg2);
  }
  catch(std::invalid_argument &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument& >(_e))),SWIGTYPE_p_std__invalid_argument,SWIG_POINTER_OWN), "std::invalid_argument", SWIGTYPE_p_std__invalid_argument); SWIG_fail;
  }
  
  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_equal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_equal",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_equal" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator_equal" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator_equal" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  try {
    result = (bool)((swig::SwigPyIterator const *)arg1)->equal((swig::SwigPyIterator const &)*arg2);
  }
  catch(std::invalid_argument &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument& >(_e))),SWIGTYPE_p_std__invalid_argument,SWIG_POINTER_OWN), "std::invalid_argument", SWIGTYPE_p_std__invalid_argument); SWIG_fail;
  }
  
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_copy",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_copy" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->copy();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_next",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_next" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->next();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___next__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator___next__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___next__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->__next__();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_previous(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_previous",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_previous" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->previous();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_advance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_advance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_advance" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_advance" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)(arg1)->advance(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___eq__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___eq__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___eq__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = (bool)((swig::SwigPyIterator const *)arg1)->operator ==((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___ne__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___ne__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___ne__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = (bool)((swig::SwigPyIterator const *)arg1)->operator !=((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___iadd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___iadd__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___iadd__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___iadd__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *) &(arg1)->operator +=(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___isub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___isub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___isub__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___isub__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *) &(arg1)->operator -=(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___add__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___add__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___add__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___add__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->operator +(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___sub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___sub__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->operator -(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ptrdiff_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___sub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___sub__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = ((swig::SwigPyIterator const *)arg1)->operator -((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_swig__SwigPyIterator, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SwigPyIterator___sub____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator___sub____SWIG_0(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *SwigPyIterator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_swig__SwigPyIterator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_JTGenerator_junctionTree__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  JTGenerator *arg1 = (JTGenerator *) 0 ;
  gum::UndiGraph *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::JunctionTree result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:JTGenerator_junctionTree",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_JTGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JTGenerator_junctionTree" "', argument " "1"" of type '" "JTGenerator *""'"); 
  }
  arg1 = reinterpret_cast< JTGenerator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__UndiGraph,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "JTGenerator_junctionTree" "', argument " "2"" of type '" "gum::UndiGraph const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "JTGenerator_junctionTree" "', argument " "2"" of type '" "gum::UndiGraph const &""'"); 
  }
  arg2 = reinterpret_cast< gum::UndiGraph * >(argp2);
  {
    try {
      result = (arg1)->junctionTree((gum::UndiGraph const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::JunctionTree(static_cast< const gum::JunctionTree& >(result))), SWIGTYPE_p_gum__CliqueGraph, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JTGenerator_junctionTree__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  JTGenerator *arg1 = (JTGenerator *) 0 ;
  gum::BayesNet< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::JunctionTree result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:JTGenerator_junctionTree",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_JTGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JTGenerator_junctionTree" "', argument " "1"" of type '" "JTGenerator *""'"); 
  }
  arg1 = reinterpret_cast< JTGenerator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__BayesNetT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "JTGenerator_junctionTree" "', argument " "2"" of type '" "gum::BayesNet< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "JTGenerator_junctionTree" "', argument " "2"" of type '" "gum::BayesNet< double > const &""'"); 
  }
  arg2 = reinterpret_cast< gum::BayesNet< double > * >(argp2);
  {
    try {
      result = (arg1)->junctionTree((gum::BayesNet< double > const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::JunctionTree(static_cast< const gum::JunctionTree& >(result))), SWIGTYPE_p_gum__CliqueGraph, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JTGenerator_junctionTree(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_JTGenerator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_gum__UndiGraph, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_JTGenerator_junctionTree__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_JTGenerator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_gum__BayesNetT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_JTGenerator_junctionTree__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'JTGenerator_junctionTree'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    JTGenerator::junctionTree(gum::UndiGraph const &)\n"
    "    JTGenerator::junctionTree(gum::BayesNet< double > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_JTGenerator_binaryJoinTree__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  JTGenerator *arg1 = (JTGenerator *) 0 ;
  gum::UndiGraph *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::JunctionTree result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:JTGenerator_binaryJoinTree",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_JTGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JTGenerator_binaryJoinTree" "', argument " "1"" of type '" "JTGenerator *""'"); 
  }
  arg1 = reinterpret_cast< JTGenerator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__UndiGraph,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "JTGenerator_binaryJoinTree" "', argument " "2"" of type '" "gum::UndiGraph const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "JTGenerator_binaryJoinTree" "', argument " "2"" of type '" "gum::UndiGraph const &""'"); 
  }
  arg2 = reinterpret_cast< gum::UndiGraph * >(argp2);
  {
    try {
      result = (arg1)->binaryJoinTree((gum::UndiGraph const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::JunctionTree(static_cast< const gum::JunctionTree& >(result))), SWIGTYPE_p_gum__CliqueGraph, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JTGenerator_binaryJoinTree__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  JTGenerator *arg1 = (JTGenerator *) 0 ;
  gum::BayesNet< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::JunctionTree result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:JTGenerator_binaryJoinTree",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_JTGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JTGenerator_binaryJoinTree" "', argument " "1"" of type '" "JTGenerator *""'"); 
  }
  arg1 = reinterpret_cast< JTGenerator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__BayesNetT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "JTGenerator_binaryJoinTree" "', argument " "2"" of type '" "gum::BayesNet< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "JTGenerator_binaryJoinTree" "', argument " "2"" of type '" "gum::BayesNet< double > const &""'"); 
  }
  arg2 = reinterpret_cast< gum::BayesNet< double > * >(argp2);
  {
    try {
      result = (arg1)->binaryJoinTree((gum::BayesNet< double > const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::JunctionTree(static_cast< const gum::JunctionTree& >(result))), SWIGTYPE_p_gum__CliqueGraph, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JTGenerator_binaryJoinTree(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_JTGenerator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_gum__UndiGraph, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_JTGenerator_binaryJoinTree__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_JTGenerator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_gum__BayesNetT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_JTGenerator_binaryJoinTree__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'JTGenerator_binaryJoinTree'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    JTGenerator::binaryJoinTree(gum::UndiGraph const &)\n"
    "    JTGenerator::binaryJoinTree(gum::BayesNet< double > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_JTGenerator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  JTGenerator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_JTGenerator")) SWIG_fail;
  {
    try {
      result = (JTGenerator *)new JTGenerator();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_JTGenerator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_JTGenerator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  JTGenerator *arg1 = (JTGenerator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_JTGenerator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_JTGenerator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_JTGenerator" "', argument " "1"" of type '" "JTGenerator *""'"); 
  }
  arg1 = reinterpret_cast< JTGenerator * >(argp1);
  {
    try {
      delete arg1;
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *JTGenerator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_JTGenerator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_PythonBNListener(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::DiGraph *arg1 = (gum::DiGraph *) 0 ;
  gum::VariableNodeMap *arg2 = (gum::VariableNodeMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PythonBNListener *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_PythonBNListener",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__DiGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PythonBNListener" "', argument " "1"" of type '" "gum::DiGraph *""'"); 
  }
  arg1 = reinterpret_cast< gum::DiGraph * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_gum__VariableNodeMap, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_PythonBNListener" "', argument " "2"" of type '" "gum::VariableNodeMap const *""'"); 
  }
  arg2 = reinterpret_cast< gum::VariableNodeMap * >(argp2);
  {
    try {
      result = (PythonBNListener *)new PythonBNListener(arg1,(gum::VariableNodeMap const *)arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PythonBNListener, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_PythonBNListener(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PythonBNListener *arg1 = (PythonBNListener *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_PythonBNListener",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PythonBNListener, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PythonBNListener" "', argument " "1"" of type '" "PythonBNListener *""'"); 
  }
  arg1 = reinterpret_cast< PythonBNListener * >(argp1);
  {
    try {
      delete arg1;
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PythonBNListener_whenNodeAdded(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PythonBNListener *arg1 = (PythonBNListener *) 0 ;
  void *arg2 = (void *) 0 ;
  gum::NodeId arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:PythonBNListener_whenNodeAdded",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PythonBNListener, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PythonBNListener_whenNodeAdded" "', argument " "1"" of type '" "PythonBNListener *""'"); 
  }
  arg1 = reinterpret_cast< PythonBNListener * >(argp1);
  res2 = SWIG_ConvertPtr(obj1,SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PythonBNListener_whenNodeAdded" "', argument " "2"" of type '" "void const *""'"); 
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PythonBNListener_whenNodeAdded" "', argument " "3"" of type '" "gum::NodeId""'");
  } 
  arg3 = static_cast< gum::NodeId >(val3);
  {
    try {
      (arg1)->whenNodeAdded((void const *)arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PythonBNListener_whenNodeDeleted(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PythonBNListener *arg1 = (PythonBNListener *) 0 ;
  void *arg2 = (void *) 0 ;
  gum::NodeId arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:PythonBNListener_whenNodeDeleted",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PythonBNListener, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PythonBNListener_whenNodeDeleted" "', argument " "1"" of type '" "PythonBNListener *""'"); 
  }
  arg1 = reinterpret_cast< PythonBNListener * >(argp1);
  res2 = SWIG_ConvertPtr(obj1,SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PythonBNListener_whenNodeDeleted" "', argument " "2"" of type '" "void const *""'"); 
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PythonBNListener_whenNodeDeleted" "', argument " "3"" of type '" "gum::NodeId""'");
  } 
  arg3 = static_cast< gum::NodeId >(val3);
  {
    try {
      (arg1)->whenNodeDeleted((void const *)arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PythonBNListener_whenArcAdded(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PythonBNListener *arg1 = (PythonBNListener *) 0 ;
  void *arg2 = (void *) 0 ;
  gum::NodeId arg3 ;
  gum::NodeId arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:PythonBNListener_whenArcAdded",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PythonBNListener, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PythonBNListener_whenArcAdded" "', argument " "1"" of type '" "PythonBNListener *""'"); 
  }
  arg1 = reinterpret_cast< PythonBNListener * >(argp1);
  res2 = SWIG_ConvertPtr(obj1,SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PythonBNListener_whenArcAdded" "', argument " "2"" of type '" "void const *""'"); 
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PythonBNListener_whenArcAdded" "', argument " "3"" of type '" "gum::NodeId""'");
  } 
  arg3 = static_cast< gum::NodeId >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "PythonBNListener_whenArcAdded" "', argument " "4"" of type '" "gum::NodeId""'");
  } 
  arg4 = static_cast< gum::NodeId >(val4);
  {
    try {
      (arg1)->whenArcAdded((void const *)arg2,arg3,arg4);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PythonBNListener_whenArcDeleted(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PythonBNListener *arg1 = (PythonBNListener *) 0 ;
  void *arg2 = (void *) 0 ;
  gum::NodeId arg3 ;
  gum::NodeId arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:PythonBNListener_whenArcDeleted",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PythonBNListener, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PythonBNListener_whenArcDeleted" "', argument " "1"" of type '" "PythonBNListener *""'"); 
  }
  arg1 = reinterpret_cast< PythonBNListener * >(argp1);
  res2 = SWIG_ConvertPtr(obj1,SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PythonBNListener_whenArcDeleted" "', argument " "2"" of type '" "void const *""'"); 
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PythonBNListener_whenArcDeleted" "', argument " "3"" of type '" "gum::NodeId""'");
  } 
  arg3 = static_cast< gum::NodeId >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "PythonBNListener_whenArcDeleted" "', argument " "4"" of type '" "gum::NodeId""'");
  } 
  arg4 = static_cast< gum::NodeId >(val4);
  {
    try {
      (arg1)->whenArcDeleted((void const *)arg2,arg3,arg4);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PythonBNListener_setWhenArcAdded(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PythonBNListener *arg1 = (PythonBNListener *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PythonBNListener_setWhenArcAdded",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PythonBNListener, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PythonBNListener_setWhenArcAdded" "', argument " "1"" of type '" "PythonBNListener *""'"); 
  }
  arg1 = reinterpret_cast< PythonBNListener * >(argp1);
  arg2 = obj1;
  {
    try {
      (arg1)->setWhenArcAdded(arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PythonBNListener_setWhenArcDeleted(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PythonBNListener *arg1 = (PythonBNListener *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PythonBNListener_setWhenArcDeleted",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PythonBNListener, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PythonBNListener_setWhenArcDeleted" "', argument " "1"" of type '" "PythonBNListener *""'"); 
  }
  arg1 = reinterpret_cast< PythonBNListener * >(argp1);
  arg2 = obj1;
  {
    try {
      (arg1)->setWhenArcDeleted(arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PythonBNListener_setWhenNodeAdded(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PythonBNListener *arg1 = (PythonBNListener *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PythonBNListener_setWhenNodeAdded",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PythonBNListener, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PythonBNListener_setWhenNodeAdded" "', argument " "1"" of type '" "PythonBNListener *""'"); 
  }
  arg1 = reinterpret_cast< PythonBNListener * >(argp1);
  arg2 = obj1;
  {
    try {
      (arg1)->setWhenNodeAdded(arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PythonBNListener_setWhenNodeDeleted(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PythonBNListener *arg1 = (PythonBNListener *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PythonBNListener_setWhenNodeDeleted",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PythonBNListener, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PythonBNListener_setWhenNodeDeleted" "', argument " "1"" of type '" "PythonBNListener *""'"); 
  }
  arg1 = reinterpret_cast< PythonBNListener * >(argp1);
  arg2 = obj1;
  {
    try {
      (arg1)->setWhenNodeDeleted(arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *PythonBNListener_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_PythonBNListener, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_PythonLoadListener_whenLoading(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PythonLoadListener *arg1 = (PythonLoadListener *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:PythonLoadListener_whenLoading",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PythonLoadListener, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PythonLoadListener_whenLoading" "', argument " "1"" of type '" "PythonLoadListener *""'"); 
  }
  arg1 = reinterpret_cast< PythonLoadListener * >(argp1);
  res2 = SWIG_ConvertPtr(obj1,SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PythonLoadListener_whenLoading" "', argument " "2"" of type '" "void const *""'"); 
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PythonLoadListener_whenLoading" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (arg1)->whenLoading((void const *)arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PythonLoadListener_setPythonListener(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PythonLoadListener *arg1 = (PythonLoadListener *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PythonLoadListener_setPythonListener",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PythonLoadListener, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PythonLoadListener_setPythonListener" "', argument " "1"" of type '" "PythonLoadListener *""'"); 
  }
  arg1 = reinterpret_cast< PythonLoadListener * >(argp1);
  arg2 = obj1;
  {
    try {
      result = (bool)(arg1)->setPythonListener(arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PythonLoadListener(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PythonLoadListener *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_PythonLoadListener")) SWIG_fail;
  {
    try {
      result = (PythonLoadListener *)new PythonLoadListener();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PythonLoadListener, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_PythonLoadListener(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PythonLoadListener *arg1 = (PythonLoadListener *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_PythonLoadListener",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PythonLoadListener, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PythonLoadListener" "', argument " "1"" of type '" "PythonLoadListener *""'"); 
  }
  arg1 = reinterpret_cast< PythonLoadListener * >(argp1);
  {
    try {
      delete arg1;
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *PythonLoadListener_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_PythonLoadListener, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap___fillLoadListeners(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< PythonLoadListener,std::allocator< PythonLoadListener > > *arg1 = 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__fillLoadListeners",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_PythonLoadListener_std__allocatorT_PythonLoadListener_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__fillLoadListeners" "', argument " "1"" of type '" "std::vector< PythonLoadListener,std::allocator< PythonLoadListener > > &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__fillLoadListeners" "', argument " "1"" of type '" "std::vector< PythonLoadListener,std::allocator< PythonLoadListener > > &""'"); 
  }
  arg1 = reinterpret_cast< std::vector< PythonLoadListener,std::allocator< PythonLoadListener > > * >(argp1);
  arg2 = obj1;
  {
    try {
      result = (int)__fillLoadListeners(*arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PythonApproximationListener(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::IApproximationSchemeConfiguration *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PythonApproximationListener *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_PythonApproximationListener",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_gum__IApproximationSchemeConfiguration,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PythonApproximationListener" "', argument " "1"" of type '" "gum::IApproximationSchemeConfiguration &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PythonApproximationListener" "', argument " "1"" of type '" "gum::IApproximationSchemeConfiguration &""'"); 
  }
  arg1 = reinterpret_cast< gum::IApproximationSchemeConfiguration * >(argp1);
  {
    try {
      result = (PythonApproximationListener *)new PythonApproximationListener(*arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PythonApproximationListener, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_PythonApproximationListener(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PythonApproximationListener *arg1 = (PythonApproximationListener *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_PythonApproximationListener",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PythonApproximationListener, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PythonApproximationListener" "', argument " "1"" of type '" "PythonApproximationListener *""'"); 
  }
  arg1 = reinterpret_cast< PythonApproximationListener * >(argp1);
  {
    try {
      delete arg1;
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PythonApproximationListener_whenProgress(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PythonApproximationListener *arg1 = (PythonApproximationListener *) 0 ;
  void *arg2 = (void *) 0 ;
  gum::Size arg3 ;
  double arg4 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:PythonApproximationListener_whenProgress",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PythonApproximationListener, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PythonApproximationListener_whenProgress" "', argument " "1"" of type '" "PythonApproximationListener *""'"); 
  }
  arg1 = reinterpret_cast< PythonApproximationListener * >(argp1);
  res2 = SWIG_ConvertPtr(obj1,SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PythonApproximationListener_whenProgress" "', argument " "2"" of type '" "void const *""'"); 
  }
  ecode3 = SWIG_AsVal_unsigned_SS_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PythonApproximationListener_whenProgress" "', argument " "3"" of type '" "gum::Size""'");
  } 
  arg3 = static_cast< gum::Size >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "PythonApproximationListener_whenProgress" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "PythonApproximationListener_whenProgress" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    try {
      (arg1)->whenProgress((void const *)arg2,arg3,arg4,arg5);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PythonApproximationListener_whenStop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PythonApproximationListener *arg1 = (PythonApproximationListener *) 0 ;
  void *arg2 = (void *) 0 ;
  std::string arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:PythonApproximationListener_whenStop",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PythonApproximationListener, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PythonApproximationListener_whenStop" "', argument " "1"" of type '" "PythonApproximationListener *""'"); 
  }
  arg1 = reinterpret_cast< PythonApproximationListener * >(argp1);
  res2 = SWIG_ConvertPtr(obj1,SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PythonApproximationListener_whenStop" "', argument " "2"" of type '" "void const *""'"); 
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PythonApproximationListener_whenStop" "', argument " "3"" of type '" "std::string const""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (arg1)->whenStop((void const *)arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PythonApproximationListener_setWhenProgress(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PythonApproximationListener *arg1 = (PythonApproximationListener *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PythonApproximationListener_setWhenProgress",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PythonApproximationListener, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PythonApproximationListener_setWhenProgress" "', argument " "1"" of type '" "PythonApproximationListener *""'"); 
  }
  arg1 = reinterpret_cast< PythonApproximationListener * >(argp1);
  arg2 = obj1;
  {
    try {
      (arg1)->setWhenProgress(arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PythonApproximationListener_setWhenStop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PythonApproximationListener *arg1 = (PythonApproximationListener *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PythonApproximationListener_setWhenStop",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PythonApproximationListener, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PythonApproximationListener_setWhenStop" "', argument " "1"" of type '" "PythonApproximationListener *""'"); 
  }
  arg1 = reinterpret_cast< PythonApproximationListener * >(argp1);
  arg2 = obj1;
  {
    try {
      (arg1)->setWhenStop(arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *PythonApproximationListener_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_PythonApproximationListener, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_BNGenerator_generate__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BNGenerator *arg1 = (BNGenerator *) 0 ;
  gum::Size arg2 ;
  gum::Size arg3 ;
  gum::Size arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  unsigned long val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  gum::BayesNet< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:BNGenerator_generate",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BNGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNGenerator_generate" "', argument " "1"" of type '" "BNGenerator *""'"); 
  }
  arg1 = reinterpret_cast< BNGenerator * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BNGenerator_generate" "', argument " "2"" of type '" "gum::Size""'");
  } 
  arg2 = static_cast< gum::Size >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BNGenerator_generate" "', argument " "3"" of type '" "gum::Size""'");
  } 
  arg3 = static_cast< gum::Size >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "BNGenerator_generate" "', argument " "4"" of type '" "gum::Size""'");
  } 
  arg4 = static_cast< gum::Size >(val4);
  {
    try {
      result = (arg1)->generate(arg2,arg3,arg4);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::BayesNet< double >(static_cast< const gum::BayesNet< double >& >(result))), SWIGTYPE_p_gum__BayesNetT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNGenerator_generate__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BNGenerator *arg1 = (BNGenerator *) 0 ;
  gum::Size arg2 ;
  gum::Size arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  gum::BayesNet< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BNGenerator_generate",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BNGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNGenerator_generate" "', argument " "1"" of type '" "BNGenerator *""'"); 
  }
  arg1 = reinterpret_cast< BNGenerator * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BNGenerator_generate" "', argument " "2"" of type '" "gum::Size""'");
  } 
  arg2 = static_cast< gum::Size >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BNGenerator_generate" "', argument " "3"" of type '" "gum::Size""'");
  } 
  arg3 = static_cast< gum::Size >(val3);
  {
    try {
      result = (arg1)->generate(arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::BayesNet< double >(static_cast< const gum::BayesNet< double >& >(result))), SWIGTYPE_p_gum__BayesNetT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNGenerator_generate__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BNGenerator *arg1 = (BNGenerator *) 0 ;
  gum::Size arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::BayesNet< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BNGenerator_generate",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BNGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNGenerator_generate" "', argument " "1"" of type '" "BNGenerator *""'"); 
  }
  arg1 = reinterpret_cast< BNGenerator * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BNGenerator_generate" "', argument " "2"" of type '" "gum::Size""'");
  } 
  arg2 = static_cast< gum::Size >(val2);
  {
    try {
      result = (arg1)->generate(arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::BayesNet< double >(static_cast< const gum::BayesNet< double >& >(result))), SWIGTYPE_p_gum__BayesNetT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNGenerator_generate__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BNGenerator *arg1 = (BNGenerator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::BayesNet< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BNGenerator_generate",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BNGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNGenerator_generate" "', argument " "1"" of type '" "BNGenerator *""'"); 
  }
  arg1 = reinterpret_cast< BNGenerator * >(argp1);
  {
    try {
      result = (arg1)->generate();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::BayesNet< double >(static_cast< const gum::BayesNet< double >& >(result))), SWIGTYPE_p_gum__BayesNetT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNGenerator_generate(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BNGenerator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_BNGenerator_generate__SWIG_3(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BNGenerator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_BNGenerator_generate__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BNGenerator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_BNGenerator_generate__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BNGenerator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_BNGenerator_generate__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'BNGenerator_generate'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BNGenerator::generate(gum::Size,gum::Size,gum::Size)\n"
    "    BNGenerator::generate(gum::Size,gum::Size)\n"
    "    BNGenerator::generate(gum::Size)\n"
    "    BNGenerator::generate()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_BNGenerator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BNGenerator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_BNGenerator")) SWIG_fail;
  {
    try {
      result = (BNGenerator *)new BNGenerator();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BNGenerator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_BNGenerator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BNGenerator *arg1 = (BNGenerator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_BNGenerator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BNGenerator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_BNGenerator" "', argument " "1"" of type '" "BNGenerator *""'"); 
  }
  arg1 = reinterpret_cast< BNGenerator * >(argp1);
  {
    try {
      delete arg1;
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *BNGenerator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BNGenerator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_IDGenerator_generate__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDGenerator *arg1 = (IDGenerator *) 0 ;
  gum::Size arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  int arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  gum::InfluenceDiagram< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:IDGenerator_generate",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDGenerator_generate" "', argument " "1"" of type '" "IDGenerator *""'"); 
  }
  arg1 = reinterpret_cast< IDGenerator * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IDGenerator_generate" "', argument " "2"" of type '" "gum::Size""'");
  } 
  arg2 = static_cast< gum::Size >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IDGenerator_generate" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IDGenerator_generate" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "IDGenerator_generate" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "IDGenerator_generate" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  {
    try {
      result = (arg1)->generate(arg2,arg3,arg4,arg5,arg6);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::InfluenceDiagram< double >(static_cast< const gum::InfluenceDiagram< double >& >(result))), SWIGTYPE_p_gum__InfluenceDiagramT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDGenerator_generate__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDGenerator *arg1 = (IDGenerator *) 0 ;
  gum::Size arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  gum::InfluenceDiagram< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:IDGenerator_generate",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDGenerator_generate" "', argument " "1"" of type '" "IDGenerator *""'"); 
  }
  arg1 = reinterpret_cast< IDGenerator * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IDGenerator_generate" "', argument " "2"" of type '" "gum::Size""'");
  } 
  arg2 = static_cast< gum::Size >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IDGenerator_generate" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IDGenerator_generate" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "IDGenerator_generate" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    try {
      result = (arg1)->generate(arg2,arg3,arg4,arg5);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::InfluenceDiagram< double >(static_cast< const gum::InfluenceDiagram< double >& >(result))), SWIGTYPE_p_gum__InfluenceDiagramT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDGenerator_generate__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDGenerator *arg1 = (IDGenerator *) 0 ;
  gum::Size arg2 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  gum::InfluenceDiagram< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:IDGenerator_generate",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDGenerator_generate" "', argument " "1"" of type '" "IDGenerator *""'"); 
  }
  arg1 = reinterpret_cast< IDGenerator * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IDGenerator_generate" "', argument " "2"" of type '" "gum::Size""'");
  } 
  arg2 = static_cast< gum::Size >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IDGenerator_generate" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IDGenerator_generate" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      result = (arg1)->generate(arg2,arg3,arg4);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::InfluenceDiagram< double >(static_cast< const gum::InfluenceDiagram< double >& >(result))), SWIGTYPE_p_gum__InfluenceDiagramT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDGenerator_generate__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDGenerator *arg1 = (IDGenerator *) 0 ;
  gum::Size arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  gum::InfluenceDiagram< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IDGenerator_generate",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDGenerator_generate" "', argument " "1"" of type '" "IDGenerator *""'"); 
  }
  arg1 = reinterpret_cast< IDGenerator * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IDGenerator_generate" "', argument " "2"" of type '" "gum::Size""'");
  } 
  arg2 = static_cast< gum::Size >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IDGenerator_generate" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (arg1)->generate(arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::InfluenceDiagram< double >(static_cast< const gum::InfluenceDiagram< double >& >(result))), SWIGTYPE_p_gum__InfluenceDiagramT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDGenerator_generate__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDGenerator *arg1 = (IDGenerator *) 0 ;
  gum::Size arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::InfluenceDiagram< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IDGenerator_generate",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDGenerator_generate" "', argument " "1"" of type '" "IDGenerator *""'"); 
  }
  arg1 = reinterpret_cast< IDGenerator * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IDGenerator_generate" "', argument " "2"" of type '" "gum::Size""'");
  } 
  arg2 = static_cast< gum::Size >(val2);
  {
    try {
      result = (arg1)->generate(arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::InfluenceDiagram< double >(static_cast< const gum::InfluenceDiagram< double >& >(result))), SWIGTYPE_p_gum__InfluenceDiagramT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDGenerator_generate__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDGenerator *arg1 = (IDGenerator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::InfluenceDiagram< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IDGenerator_generate",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDGenerator_generate" "', argument " "1"" of type '" "IDGenerator *""'"); 
  }
  arg1 = reinterpret_cast< IDGenerator * >(argp1);
  {
    try {
      result = (arg1)->generate();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::InfluenceDiagram< double >(static_cast< const gum::InfluenceDiagram< double >& >(result))), SWIGTYPE_p_gum__InfluenceDiagramT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDGenerator_generate(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[7] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 6) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IDGenerator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_IDGenerator_generate__SWIG_5(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IDGenerator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_IDGenerator_generate__SWIG_4(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IDGenerator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_IDGenerator_generate__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IDGenerator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_IDGenerator_generate__SWIG_2(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IDGenerator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_IDGenerator_generate__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IDGenerator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_IDGenerator_generate__SWIG_0(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'IDGenerator_generate'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    IDGenerator::generate(gum::Size,double,double,double,int)\n"
    "    IDGenerator::generate(gum::Size,double,double,double)\n"
    "    IDGenerator::generate(gum::Size,double,double)\n"
    "    IDGenerator::generate(gum::Size,double)\n"
    "    IDGenerator::generate(gum::Size)\n"
    "    IDGenerator::generate()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_IDGenerator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDGenerator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_IDGenerator")) SWIG_fail;
  {
    try {
      result = (IDGenerator *)new IDGenerator();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IDGenerator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_IDGenerator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDGenerator *arg1 = (IDGenerator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_IDGenerator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDGenerator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IDGenerator" "', argument " "1"" of type '" "IDGenerator *""'"); 
  }
  arg1 = reinterpret_cast< IDGenerator * >(argp1);
  {
    try {
      delete arg1;
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *IDGenerator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_IDGenerator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_PRMexplorer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PRMexplorer *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_PRMexplorer")) SWIG_fail;
  {
    try {
      result = (PRMexplorer *)new PRMexplorer();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PRMexplorer, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_PRMexplorer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PRMexplorer *arg1 = (PRMexplorer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_PRMexplorer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PRMexplorer, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PRMexplorer" "', argument " "1"" of type '" "PRMexplorer *""'"); 
  }
  arg1 = reinterpret_cast< PRMexplorer * >(argp1);
  {
    try {
      delete arg1;
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRMexplorer_load__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PRMexplorer *arg1 = (PRMexplorer *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:PRMexplorer_load",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PRMexplorer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PRMexplorer_load" "', argument " "1"" of type '" "PRMexplorer *""'"); 
  }
  arg1 = reinterpret_cast< PRMexplorer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PRMexplorer_load" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PRMexplorer_load" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "PRMexplorer_load" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  {
    try {
      (arg1)->load(arg2,arg3,arg4);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRMexplorer_load__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PRMexplorer *arg1 = (PRMexplorer *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:PRMexplorer_load",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PRMexplorer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PRMexplorer_load" "', argument " "1"" of type '" "PRMexplorer *""'"); 
  }
  arg1 = reinterpret_cast< PRMexplorer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PRMexplorer_load" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PRMexplorer_load" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (arg1)->load(arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRMexplorer_load__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PRMexplorer *arg1 = (PRMexplorer *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PRMexplorer_load",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PRMexplorer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PRMexplorer_load" "', argument " "1"" of type '" "PRMexplorer *""'"); 
  }
  arg1 = reinterpret_cast< PRMexplorer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PRMexplorer_load" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (arg1)->load(arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRMexplorer_load(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PRMexplorer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_PRMexplorer_load__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PRMexplorer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_PRMexplorer_load__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PRMexplorer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_PRMexplorer_load__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'PRMexplorer_load'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    PRMexplorer::load(std::string,std::string,bool)\n"
    "    PRMexplorer::load(std::string,std::string)\n"
    "    PRMexplorer::load(std::string)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PRMexplorer_isType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PRMexplorer *arg1 = (PRMexplorer *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PRMexplorer_isType",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PRMexplorer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PRMexplorer_isType" "', argument " "1"" of type '" "PRMexplorer *""'"); 
  }
  arg1 = reinterpret_cast< PRMexplorer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PRMexplorer_isType" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (PyObject *)(arg1)->isType(arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRMexplorer_isClass(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PRMexplorer *arg1 = (PRMexplorer *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PRMexplorer_isClass",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PRMexplorer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PRMexplorer_isClass" "', argument " "1"" of type '" "PRMexplorer *""'"); 
  }
  arg1 = reinterpret_cast< PRMexplorer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PRMexplorer_isClass" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (PyObject *)(arg1)->isClass(arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRMexplorer_isInterface(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PRMexplorer *arg1 = (PRMexplorer *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PRMexplorer_isInterface",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PRMexplorer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PRMexplorer_isInterface" "', argument " "1"" of type '" "PRMexplorer *""'"); 
  }
  arg1 = reinterpret_cast< PRMexplorer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PRMexplorer_isInterface" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (PyObject *)(arg1)->isInterface(arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRMexplorer_classes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PRMexplorer *arg1 = (PRMexplorer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PRMexplorer_classes",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PRMexplorer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PRMexplorer_classes" "', argument " "1"" of type '" "PRMexplorer *""'"); 
  }
  arg1 = reinterpret_cast< PRMexplorer * >(argp1);
  {
    try {
      result = (PyObject *)(arg1)->classes();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRMexplorer_classAttributes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PRMexplorer *arg1 = (PRMexplorer *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PRMexplorer_classAttributes",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PRMexplorer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PRMexplorer_classAttributes" "', argument " "1"" of type '" "PRMexplorer *""'"); 
  }
  arg1 = reinterpret_cast< PRMexplorer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PRMexplorer_classAttributes" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (PyObject *)(arg1)->classAttributes(arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRMexplorer_isAttribute(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PRMexplorer *arg1 = (PRMexplorer *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:PRMexplorer_isAttribute",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PRMexplorer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PRMexplorer_isAttribute" "', argument " "1"" of type '" "PRMexplorer *""'"); 
  }
  arg1 = reinterpret_cast< PRMexplorer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PRMexplorer_isAttribute" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PRMexplorer_isAttribute" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (PyObject *)(arg1)->isAttribute(arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRMexplorer_classReferences(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PRMexplorer *arg1 = (PRMexplorer *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PRMexplorer_classReferences",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PRMexplorer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PRMexplorer_classReferences" "', argument " "1"" of type '" "PRMexplorer *""'"); 
  }
  arg1 = reinterpret_cast< PRMexplorer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PRMexplorer_classReferences" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (PyObject *)(arg1)->classReferences(arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRMexplorer_classParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PRMexplorer *arg1 = (PRMexplorer *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PRMexplorer_classParameters",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PRMexplorer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PRMexplorer_classParameters" "', argument " "1"" of type '" "PRMexplorer *""'"); 
  }
  arg1 = reinterpret_cast< PRMexplorer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PRMexplorer_classParameters" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (PyObject *)(arg1)->classParameters(arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRMexplorer_classImplements(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PRMexplorer *arg1 = (PRMexplorer *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PRMexplorer_classImplements",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PRMexplorer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PRMexplorer_classImplements" "', argument " "1"" of type '" "PRMexplorer *""'"); 
  }
  arg1 = reinterpret_cast< PRMexplorer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PRMexplorer_classImplements" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (PyObject *)(arg1)->classImplements(arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRMexplorer_aggType_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PRMexplorer *arg1 = (PRMexplorer *) 0 ;
  std::string *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PRMexplorer_aggType_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PRMexplorer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PRMexplorer_aggType_set" "', argument " "1"" of type '" "PRMexplorer *""'"); 
  }
  arg1 = reinterpret_cast< PRMexplorer * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__string, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PRMexplorer_aggType_set" "', argument " "2"" of type '" "std::string [9]""'"); 
  } 
  arg2 = reinterpret_cast< std::string * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)9; ++ii) *(std::string *)&arg1->aggType[ii] = *((std::string *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""aggType""' of type '""std::string [9]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRMexplorer_aggType_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PRMexplorer *arg1 = (PRMexplorer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PRMexplorer_aggType_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PRMexplorer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PRMexplorer_aggType_get" "', argument " "1"" of type '" "PRMexplorer *""'"); 
  }
  arg1 = reinterpret_cast< PRMexplorer * >(argp1);
  result = (std::string *)(std::string *) ((arg1)->aggType);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRMexplorer_classAggregates(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PRMexplorer *arg1 = (PRMexplorer *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PRMexplorer_classAggregates",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PRMexplorer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PRMexplorer_classAggregates" "', argument " "1"" of type '" "PRMexplorer *""'"); 
  }
  arg1 = reinterpret_cast< PRMexplorer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PRMexplorer_classAggregates" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (PyObject *)(arg1)->classAggregates(arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRMexplorer_classSlotChains(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PRMexplorer *arg1 = (PRMexplorer *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PRMexplorer_classSlotChains",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PRMexplorer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PRMexplorer_classSlotChains" "', argument " "1"" of type '" "PRMexplorer *""'"); 
  }
  arg1 = reinterpret_cast< PRMexplorer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PRMexplorer_classSlotChains" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (PyObject *)(arg1)->classSlotChains(arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRMexplorer_classDag(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PRMexplorer *arg1 = (PRMexplorer *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PRMexplorer_classDag",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PRMexplorer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PRMexplorer_classDag" "', argument " "1"" of type '" "PRMexplorer *""'"); 
  }
  arg1 = reinterpret_cast< PRMexplorer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PRMexplorer_classDag" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (PyObject *)(arg1)->classDag(arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRMexplorer_getalltheSystems(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PRMexplorer *arg1 = (PRMexplorer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PRMexplorer_getalltheSystems",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PRMexplorer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PRMexplorer_getalltheSystems" "', argument " "1"" of type '" "PRMexplorer *""'"); 
  }
  arg1 = reinterpret_cast< PRMexplorer * >(argp1);
  {
    try {
      result = (PyObject *)(arg1)->getalltheSystems();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRMexplorer_getSuperClass(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PRMexplorer *arg1 = (PRMexplorer *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PRMexplorer_getSuperClass",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PRMexplorer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PRMexplorer_getSuperClass" "', argument " "1"" of type '" "PRMexplorer *""'"); 
  }
  arg1 = reinterpret_cast< PRMexplorer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PRMexplorer_getSuperClass" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (PyObject *)(arg1)->getSuperClass(arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRMexplorer_getDirectSubClass(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PRMexplorer *arg1 = (PRMexplorer *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PRMexplorer_getDirectSubClass",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PRMexplorer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PRMexplorer_getDirectSubClass" "', argument " "1"" of type '" "PRMexplorer *""'"); 
  }
  arg1 = reinterpret_cast< PRMexplorer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PRMexplorer_getDirectSubClass" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (PyObject *)(arg1)->getDirectSubClass(arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRMexplorer_cpf(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PRMexplorer *arg1 = (PRMexplorer *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  gum::Potential< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:PRMexplorer_cpf",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PRMexplorer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PRMexplorer_cpf" "', argument " "1"" of type '" "PRMexplorer *""'"); 
  }
  arg1 = reinterpret_cast< PRMexplorer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PRMexplorer_cpf" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PRMexplorer_cpf" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (gum::Potential< double > *) &(arg1)->cpf(arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__PotentialT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRMexplorer_types(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PRMexplorer *arg1 = (PRMexplorer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PRMexplorer_types",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PRMexplorer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PRMexplorer_types" "', argument " "1"" of type '" "PRMexplorer *""'"); 
  }
  arg1 = reinterpret_cast< PRMexplorer * >(argp1);
  {
    try {
      result = (PyObject *)(arg1)->types();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRMexplorer_getSuperType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PRMexplorer *arg1 = (PRMexplorer *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PRMexplorer_getSuperType",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PRMexplorer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PRMexplorer_getSuperType" "', argument " "1"" of type '" "PRMexplorer *""'"); 
  }
  arg1 = reinterpret_cast< PRMexplorer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PRMexplorer_getSuperType" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (PyObject *)(arg1)->getSuperType(arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRMexplorer_getDirectSubTypes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PRMexplorer *arg1 = (PRMexplorer *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PRMexplorer_getDirectSubTypes",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PRMexplorer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PRMexplorer_getDirectSubTypes" "', argument " "1"" of type '" "PRMexplorer *""'"); 
  }
  arg1 = reinterpret_cast< PRMexplorer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PRMexplorer_getDirectSubTypes" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (PyObject *)(arg1)->getDirectSubTypes(arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRMexplorer_getLabels(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PRMexplorer *arg1 = (PRMexplorer *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PRMexplorer_getLabels",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PRMexplorer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PRMexplorer_getLabels" "', argument " "1"" of type '" "PRMexplorer *""'"); 
  }
  arg1 = reinterpret_cast< PRMexplorer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PRMexplorer_getLabels" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (PyObject *)(arg1)->getLabels(arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRMexplorer_getLabelMap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PRMexplorer *arg1 = (PRMexplorer *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PRMexplorer_getLabelMap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PRMexplorer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PRMexplorer_getLabelMap" "', argument " "1"" of type '" "PRMexplorer *""'"); 
  }
  arg1 = reinterpret_cast< PRMexplorer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PRMexplorer_getLabelMap" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (PyObject *)(arg1)->getLabelMap(arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRMexplorer_interfaces(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PRMexplorer *arg1 = (PRMexplorer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PRMexplorer_interfaces",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PRMexplorer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PRMexplorer_interfaces" "', argument " "1"" of type '" "PRMexplorer *""'"); 
  }
  arg1 = reinterpret_cast< PRMexplorer * >(argp1);
  {
    try {
      result = (PyObject *)(arg1)->interfaces();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRMexplorer_interAttributes__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PRMexplorer *arg1 = (PRMexplorer *) 0 ;
  std::string arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:PRMexplorer_interAttributes",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PRMexplorer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PRMexplorer_interAttributes" "', argument " "1"" of type '" "PRMexplorer *""'"); 
  }
  arg1 = reinterpret_cast< PRMexplorer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PRMexplorer_interAttributes" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PRMexplorer_interAttributes" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      result = (PyObject *)(arg1)->interAttributes(arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRMexplorer_interAttributes__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PRMexplorer *arg1 = (PRMexplorer *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PRMexplorer_interAttributes",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PRMexplorer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PRMexplorer_interAttributes" "', argument " "1"" of type '" "PRMexplorer *""'"); 
  }
  arg1 = reinterpret_cast< PRMexplorer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PRMexplorer_interAttributes" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (PyObject *)(arg1)->interAttributes(arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRMexplorer_interAttributes(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PRMexplorer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_PRMexplorer_interAttributes__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PRMexplorer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_PRMexplorer_interAttributes__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'PRMexplorer_interAttributes'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    PRMexplorer::interAttributes(std::string,bool)\n"
    "    PRMexplorer::interAttributes(std::string)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PRMexplorer_interReferences(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PRMexplorer *arg1 = (PRMexplorer *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PRMexplorer_interReferences",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PRMexplorer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PRMexplorer_interReferences" "', argument " "1"" of type '" "PRMexplorer *""'"); 
  }
  arg1 = reinterpret_cast< PRMexplorer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PRMexplorer_interReferences" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (PyObject *)(arg1)->interReferences(arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRMexplorer_getSuperInterface(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PRMexplorer *arg1 = (PRMexplorer *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PRMexplorer_getSuperInterface",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PRMexplorer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PRMexplorer_getSuperInterface" "', argument " "1"" of type '" "PRMexplorer *""'"); 
  }
  arg1 = reinterpret_cast< PRMexplorer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PRMexplorer_getSuperInterface" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (PyObject *)(arg1)->getSuperInterface(arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRMexplorer_getDirectSubInterfaces(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PRMexplorer *arg1 = (PRMexplorer *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PRMexplorer_getDirectSubInterfaces",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PRMexplorer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PRMexplorer_getDirectSubInterfaces" "', argument " "1"" of type '" "PRMexplorer *""'"); 
  }
  arg1 = reinterpret_cast< PRMexplorer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PRMexplorer_getDirectSubInterfaces" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (PyObject *)(arg1)->getDirectSubInterfaces(arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRMexplorer_getImplementations(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PRMexplorer *arg1 = (PRMexplorer *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PRMexplorer_getImplementations",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PRMexplorer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PRMexplorer_getImplementations" "', argument " "1"" of type '" "PRMexplorer *""'"); 
  }
  arg1 = reinterpret_cast< PRMexplorer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PRMexplorer_getImplementations" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (PyObject *)(arg1)->getImplementations(arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *PRMexplorer_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_PRMexplorer, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_Vector_double_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:Vector_double_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_double_iterator" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = (swig::SwigPyIterator *)std_vector_Sl_double_Sg__iterator(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_double___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vector_double___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_double___nonzero__" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = (bool)std_vector_Sl_double_Sg____nonzero__((std::vector< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_double___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vector_double___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_double___bool__" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = (bool)std_vector_Sl_double_Sg____bool__((std::vector< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_double___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vector_double___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_double___len__" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = std_vector_Sl_double_Sg____len__((std::vector< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_double___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  std::vector< double >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< double,std::allocator< double > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Vector_double___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_double___getslice__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vector_double___getslice__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Vector_double___getslice__" "', argument " "3"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< double >::difference_type >(val3);
  {
    try {
      try {
        result = (std::vector< double,std::allocator< double > > *)std_vector_Sl_double_Sg____getslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_double___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  std::vector< double >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Vector_double___setslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_double___setslice__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vector_double___setslice__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Vector_double___setslice__" "', argument " "3"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< double >::difference_type >(val3);
  {
    try {
      try {
        std_vector_Sl_double_Sg____setslice____SWIG_0(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_double___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  std::vector< double >::difference_type arg3 ;
  std::vector< double,std::allocator< double > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Vector_double___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_double___setslice__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vector_double___setslice__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Vector_double___setslice__" "', argument " "3"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< double >::difference_type >(val3);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Vector_double___setslice__" "', argument " "4"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vector_double___setslice__" "', argument " "4"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      try {
        std_vector_Sl_double_Sg____setslice____SWIG_1(arg1,arg2,arg3,(std::vector< double,std::allocator< double > > const &)*arg4);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_double___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Vector_double___setslice____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< double,std::allocator< double > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_Vector_double___setslice____SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Vector_double___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::__setslice__(std::vector< double >::difference_type,std::vector< double >::difference_type)\n"
    "    std::vector< double >::__setslice__(std::vector< double >::difference_type,std::vector< double >::difference_type,std::vector< double,std::allocator< double > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Vector_double___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  std::vector< double >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Vector_double___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_double___delslice__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vector_double___delslice__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Vector_double___delslice__" "', argument " "3"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< double >::difference_type >(val3);
  {
    try {
      try {
        std_vector_Sl_double_Sg____delslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_double___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vector_double___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_double___delitem__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vector_double___delitem__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  {
    try {
      try {
        std_vector_Sl_double_Sg____delitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_double___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< double,std::allocator< double > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vector_double___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_double___getitem__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Vector_double___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try {
      try {
        result = (std::vector< double,std::allocator< double > > *)std_vector_Sl_double_Sg____getitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_double___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Vector_double___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_double___setitem__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Vector_double___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Vector_double___setitem__" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vector_double___setitem__" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      try {
        std_vector_Sl_double_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< double,std::allocator< double > > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_double___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vector_double___setitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_double___setitem__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Vector_double___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try {
      try {
        std_vector_Sl_double_Sg____setitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_double___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vector_double___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_double___delitem__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Vector_double___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try {
      try {
        std_vector_Sl_double_Sg____delitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_double___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_Vector_double___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Vector_double___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Vector_double___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::__delitem__(std::vector< double >::difference_type)\n"
    "    std::vector< double >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Vector_double___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< double >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vector_double___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_double___getitem__" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vector_double___getitem__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  {
    try {
      try {
        result = (std::vector< double >::value_type *) &std_vector_Sl_double_Sg____getitem____SWIG_1((std::vector< double > const *)arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_double___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_Vector_double___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Vector_double___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Vector_double___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::__getitem__(PySliceObject *)\n"
    "    std::vector< double >::__getitem__(std::vector< double >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Vector_double___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  std::vector< double >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< double >::value_type temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Vector_double___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_double___setitem__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vector_double___setitem__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Vector_double___setitem__" "', argument " "3"" of type '" "std::vector< double >::value_type""'");
  } 
  temp3 = static_cast< std::vector< double >::value_type >(val3);
  arg3 = &temp3;
  {
    try {
      try {
        std_vector_Sl_double_Sg____setitem____SWIG_2(arg1,arg2,(double const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_double___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_Vector_double___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< double,std::allocator< double > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Vector_double___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Vector_double___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Vector_double___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::__setitem__(PySliceObject *,std::vector< double,std::allocator< double > > const &)\n"
    "    std::vector< double >::__setitem__(PySliceObject *)\n"
    "    std::vector< double >::__setitem__(std::vector< double >::difference_type,std::vector< double >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Vector_double_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vector_double_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_double_pop" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      try {
        result = (std::vector< double >::value_type)std_vector_Sl_double_Sg__pop(arg1);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_double_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< double >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vector_double_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_double_append" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vector_double_append" "', argument " "2"" of type '" "std::vector< double >::value_type""'");
  } 
  temp2 = static_cast< std::vector< double >::value_type >(val2);
  arg2 = &temp2;
  {
    try {
      std_vector_Sl_double_Sg__append(arg1,(double const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Vector_double__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Vector_double")) SWIG_fail;
  {
    try {
      result = (std::vector< double > *)new std::vector< double >();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Vector_double__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Vector_double",&obj0)) SWIG_fail;
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Vector_double" "', argument " "1"" of type '" "std::vector< double > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Vector_double" "', argument " "1"" of type '" "std::vector< double > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (std::vector< double > *)new std::vector< double >((std::vector< double > const &)*arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_double_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vector_double_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_double_empty" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = (bool)((std::vector< double > const *)arg1)->empty();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_double_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vector_double_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_double_size" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = ((std::vector< double > const *)arg1)->size();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_double_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vector_double_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_double_swap" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vector_double_swap" "', argument " "2"" of type '" "std::vector< double > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vector_double_swap" "', argument " "2"" of type '" "std::vector< double > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< double > * >(argp2);
  {
    try {
      (arg1)->swap(*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_double_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vector_double_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_double_begin" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = (arg1)->begin();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_double_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vector_double_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_double_end" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = (arg1)->end();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_double_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vector_double_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_double_rbegin" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = (arg1)->rbegin();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_double_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vector_double_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_double_rend" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = (arg1)->rend();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_double_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vector_double_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_double_clear" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      (arg1)->clear();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_double_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< double > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vector_double_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_double_get_allocator" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = ((std::vector< double > const *)arg1)->get_allocator();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< double >::allocator_type(static_cast< const std::vector< double >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Vector_double__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Vector_double",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Vector_double" "', argument " "1"" of type '" "std::vector< double >::size_type""'");
  } 
  arg1 = static_cast< std::vector< double >::size_type >(val1);
  {
    try {
      result = (std::vector< double > *)new std::vector< double >(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_double_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vector_double_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_double_pop_back" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      (arg1)->pop_back();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_double_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vector_double_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_double_resize" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vector_double_resize" "', argument " "2"" of type '" "std::vector< double >::size_type""'");
  } 
  arg2 = static_cast< std::vector< double >::size_type >(val2);
  {
    try {
      (arg1)->resize(arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_double_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< double >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vector_double_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_double_erase" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Vector_double_erase" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< double >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Vector_double_erase" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
    }
  }
  {
    try {
      result = std_vector_Sl_double_Sg__erase__SWIG_0(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_double_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::iterator arg2 ;
  std::vector< double >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< double >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Vector_double_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_double_erase" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Vector_double_erase" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< double >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Vector_double_erase" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Vector_double_erase" "', argument " "3"" of type '" "std::vector< double >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< double >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Vector_double_erase" "', argument " "3"" of type '" "std::vector< double >::iterator""'");
    }
  }
  {
    try {
      result = std_vector_Sl_double_Sg__erase__SWIG_1(arg1,arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_double_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_Vector_double_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_Vector_double_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Vector_double_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::erase(std::vector< double >::iterator)\n"
    "    std::vector< double >::erase(std::vector< double >::iterator,std::vector< double >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_Vector_double__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double >::size_type arg1 ;
  std::vector< double >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< double >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Vector_double",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Vector_double" "', argument " "1"" of type '" "std::vector< double >::size_type""'");
  } 
  arg1 = static_cast< std::vector< double >::size_type >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Vector_double" "', argument " "2"" of type '" "std::vector< double >::value_type""'");
  } 
  temp2 = static_cast< std::vector< double >::value_type >(val2);
  arg2 = &temp2;
  {
    try {
      result = (std::vector< double > *)new std::vector< double >(arg1,(std::vector< double >::value_type const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Vector_double(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Vector_double__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Vector_double__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Vector_double__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Vector_double__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Vector_double'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::vector()\n"
    "    std::vector< double >::vector(std::vector< double > const &)\n"
    "    std::vector< double >::vector(std::vector< double >::size_type)\n"
    "    std::vector< double >::vector(std::vector< double >::size_type,std::vector< double >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Vector_double_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< double >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vector_double_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_double_push_back" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vector_double_push_back" "', argument " "2"" of type '" "std::vector< double >::value_type""'");
  } 
  temp2 = static_cast< std::vector< double >::value_type >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->push_back((std::vector< double >::value_type const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_double_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vector_double_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_double_front" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = (std::vector< double >::value_type *) &((std::vector< double > const *)arg1)->front();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_double_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vector_double_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_double_back" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = (std::vector< double >::value_type *) &((std::vector< double > const *)arg1)->back();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_double_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  std::vector< double >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< double >::value_type temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Vector_double_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_double_assign" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vector_double_assign" "', argument " "2"" of type '" "std::vector< double >::size_type""'");
  } 
  arg2 = static_cast< std::vector< double >::size_type >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Vector_double_assign" "', argument " "3"" of type '" "std::vector< double >::value_type""'");
  } 
  temp3 = static_cast< std::vector< double >::value_type >(val3);
  arg3 = &temp3;
  {
    try {
      (arg1)->assign(arg2,(std::vector< double >::value_type const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_double_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  std::vector< double >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< double >::value_type temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Vector_double_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_double_resize" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vector_double_resize" "', argument " "2"" of type '" "std::vector< double >::size_type""'");
  } 
  arg2 = static_cast< std::vector< double >::size_type >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Vector_double_resize" "', argument " "3"" of type '" "std::vector< double >::value_type""'");
  } 
  temp3 = static_cast< std::vector< double >::value_type >(val3);
  arg3 = &temp3;
  {
    try {
      (arg1)->resize(arg2,(std::vector< double >::value_type const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_double_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Vector_double_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Vector_double_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Vector_double_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::resize(std::vector< double >::size_type)\n"
    "    std::vector< double >::resize(std::vector< double >::size_type,std::vector< double >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Vector_double_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::iterator arg2 ;
  std::vector< double >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< double >::value_type temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< double >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Vector_double_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_double_insert" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Vector_double_insert" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< double >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Vector_double_insert" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Vector_double_insert" "', argument " "3"" of type '" "std::vector< double >::value_type""'");
  } 
  temp3 = static_cast< std::vector< double >::value_type >(val3);
  arg3 = &temp3;
  {
    try {
      result = std_vector_Sl_double_Sg__insert__SWIG_0(arg1,arg2,(double const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_double_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::iterator arg2 ;
  std::vector< double >::size_type arg3 ;
  std::vector< double >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  std::vector< double >::value_type temp4 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Vector_double_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_double_insert" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Vector_double_insert" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< double >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Vector_double_insert" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Vector_double_insert" "', argument " "3"" of type '" "std::vector< double >::size_type""'");
  } 
  arg3 = static_cast< std::vector< double >::size_type >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Vector_double_insert" "', argument " "4"" of type '" "std::vector< double >::value_type""'");
  } 
  temp4 = static_cast< std::vector< double >::value_type >(val4);
  arg4 = &temp4;
  {
    try {
      std_vector_Sl_double_Sg__insert__SWIG_1(arg1,arg2,arg3,(double const &)*arg4);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_double_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Vector_double_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Vector_double_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Vector_double_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::insert(std::vector< double >::iterator,std::vector< double >::value_type const &)\n"
    "    std::vector< double >::insert(std::vector< double >::iterator,std::vector< double >::size_type,std::vector< double >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Vector_double_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vector_double_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_double_reserve" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vector_double_reserve" "', argument " "2"" of type '" "std::vector< double >::size_type""'");
  } 
  arg2 = static_cast< std::vector< double >::size_type >(val2);
  {
    try {
      (arg1)->reserve(arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_double_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vector_double_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_double_capacity" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = ((std::vector< double > const *)arg1)->capacity();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Vector_double(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Vector_double",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Vector_double" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      delete arg1;
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Vector_double_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_Vector_string_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:Vector_string_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_string_iterator" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    try {
      result = (swig::SwigPyIterator *)std_vector_Sl_std_string_Sg__iterator(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_string___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vector_string___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_string___nonzero__" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    try {
      result = (bool)std_vector_Sl_std_string_Sg____nonzero__((std::vector< std::string > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_string___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vector_string___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_string___bool__" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    try {
      result = (bool)std_vector_Sl_std_string_Sg____bool__((std::vector< std::string > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_string___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vector_string___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_string___len__" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    try {
      result = std_vector_Sl_std_string_Sg____len__((std::vector< std::string > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_string___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  std::vector< std::string >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Vector_string___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_string___getslice__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vector_string___getslice__" "', argument " "2"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Vector_string___getslice__" "', argument " "3"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::string >::difference_type >(val3);
  {
    try {
      try {
        result = (std::vector< std::string,std::allocator< std::string > > *)std_vector_Sl_std_string_Sg____getslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_string___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  std::vector< std::string >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Vector_string___setslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_string___setslice__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vector_string___setslice__" "', argument " "2"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Vector_string___setslice__" "', argument " "3"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::string >::difference_type >(val3);
  {
    try {
      try {
        std_vector_Sl_std_string_Sg____setslice____SWIG_0(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_string___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  std::vector< std::string >::difference_type arg3 ;
  std::vector< std::string,std::allocator< std::string > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Vector_string___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_string___setslice__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vector_string___setslice__" "', argument " "2"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Vector_string___setslice__" "', argument " "3"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::string >::difference_type >(val3);
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Vector_string___setslice__" "', argument " "4"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vector_string___setslice__" "', argument " "4"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      try {
        std_vector_Sl_std_string_Sg____setslice____SWIG_1(arg1,arg2,arg3,(std::vector< std::string,std::allocator< std::string > > const &)*arg4);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_string___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Vector_string___setslice____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< std::string,std::allocator< std::string > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_Vector_string___setslice____SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Vector_string___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::string >::__setslice__(std::vector< std::string >::difference_type,std::vector< std::string >::difference_type)\n"
    "    std::vector< std::string >::__setslice__(std::vector< std::string >::difference_type,std::vector< std::string >::difference_type,std::vector< std::string,std::allocator< std::string > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Vector_string___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  std::vector< std::string >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Vector_string___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_string___delslice__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vector_string___delslice__" "', argument " "2"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Vector_string___delslice__" "', argument " "3"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::string >::difference_type >(val3);
  {
    try {
      try {
        std_vector_Sl_std_string_Sg____delslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_string___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vector_string___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_string___delitem__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vector_string___delitem__" "', argument " "2"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  {
    try {
      try {
        std_vector_Sl_std_string_Sg____delitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_string___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vector_string___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_string___getitem__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Vector_string___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try {
      try {
        result = (std::vector< std::string,std::allocator< std::string > > *)std_vector_Sl_std_string_Sg____getitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_string___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Vector_string___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_string___setitem__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Vector_string___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Vector_string___setitem__" "', argument " "3"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vector_string___setitem__" "', argument " "3"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      try {
        std_vector_Sl_std_string_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< std::string,std::allocator< std::string > > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_string___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vector_string___setitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_string___setitem__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Vector_string___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try {
      try {
        std_vector_Sl_std_string_Sg____setitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_string___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vector_string___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_string___delitem__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Vector_string___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try {
      try {
        std_vector_Sl_std_string_Sg____delitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_string___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_Vector_string___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Vector_string___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Vector_string___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::string >::__delitem__(std::vector< std::string >::difference_type)\n"
    "    std::vector< std::string >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Vector_string___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::string >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vector_string___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_string___getitem__" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vector_string___getitem__" "', argument " "2"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  {
    try {
      try {
        result = (std::vector< std::string >::value_type *) &std_vector_Sl_std_string_Sg____getitem____SWIG_1((std::vector< std::string > const *)arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_string___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_Vector_string___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Vector_string___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Vector_string___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::string >::__getitem__(PySliceObject *)\n"
    "    std::vector< std::string >::__getitem__(std::vector< std::string >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Vector_string___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Vector_string___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_string___setitem__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vector_string___setitem__" "', argument " "2"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Vector_string___setitem__" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vector_string___setitem__" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      try {
        std_vector_Sl_std_string_Sg____setitem____SWIG_2(arg1,arg2,(std::string const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_string___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_Vector_string___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< std::string,std::allocator< std::string > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Vector_string___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Vector_string___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Vector_string___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::string >::__setitem__(PySliceObject *,std::vector< std::string,std::allocator< std::string > > const &)\n"
    "    std::vector< std::string >::__setitem__(PySliceObject *)\n"
    "    std::vector< std::string >::__setitem__(std::vector< std::string >::difference_type,std::vector< std::string >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Vector_string_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vector_string_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_string_pop" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    try {
      try {
        result = std_vector_Sl_std_string_Sg__pop(arg1);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_string_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vector_string_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_string_append" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vector_string_append" "', argument " "2"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vector_string_append" "', argument " "2"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      std_vector_Sl_std_string_Sg__append(arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Vector_string__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Vector_string")) SWIG_fail;
  {
    try {
      result = (std::vector< std::string > *)new std::vector< std::string >();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Vector_string__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Vector_string",&obj0)) SWIG_fail;
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Vector_string" "', argument " "1"" of type '" "std::vector< std::string > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Vector_string" "', argument " "1"" of type '" "std::vector< std::string > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (std::vector< std::string > *)new std::vector< std::string >((std::vector< std::string > const &)*arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_string_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vector_string_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_string_empty" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    try {
      result = (bool)((std::vector< std::string > const *)arg1)->empty();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_string_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vector_string_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_string_size" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    try {
      result = ((std::vector< std::string > const *)arg1)->size();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_string_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vector_string_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_string_swap" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vector_string_swap" "', argument " "2"" of type '" "std::vector< std::string > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vector_string_swap" "', argument " "2"" of type '" "std::vector< std::string > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::string > * >(argp2);
  {
    try {
      (arg1)->swap(*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_string_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vector_string_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_string_begin" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    try {
      result = (arg1)->begin();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::string >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_string_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vector_string_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_string_end" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    try {
      result = (arg1)->end();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::string >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_string_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vector_string_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_string_rbegin" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    try {
      result = (arg1)->rbegin();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::string >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_string_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vector_string_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_string_rend" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    try {
      result = (arg1)->rend();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::string >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_string_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vector_string_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_string_clear" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    try {
      (arg1)->clear();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_string_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< std::string > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vector_string_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_string_get_allocator" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    try {
      result = ((std::vector< std::string > const *)arg1)->get_allocator();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< std::string >::allocator_type(static_cast< const std::vector< std::string >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_std__string_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Vector_string__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Vector_string",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Vector_string" "', argument " "1"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::string >::size_type >(val1);
  {
    try {
      result = (std::vector< std::string > *)new std::vector< std::string >(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_string_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vector_string_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_string_pop_back" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    try {
      (arg1)->pop_back();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_string_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vector_string_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_string_resize" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vector_string_resize" "', argument " "2"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::size_type >(val2);
  {
    try {
      (arg1)->resize(arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_string_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::string >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vector_string_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_string_erase" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Vector_string_erase" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::string >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Vector_string_erase" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
    }
  }
  {
    try {
      result = std_vector_Sl_std_string_Sg__erase__SWIG_0(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::string >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_string_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::iterator arg2 ;
  std::vector< std::string >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< std::string >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Vector_string_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_string_erase" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Vector_string_erase" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::string >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Vector_string_erase" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Vector_string_erase" "', argument " "3"" of type '" "std::vector< std::string >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::string >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Vector_string_erase" "', argument " "3"" of type '" "std::vector< std::string >::iterator""'");
    }
  }
  {
    try {
      result = std_vector_Sl_std_string_Sg__erase__SWIG_1(arg1,arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::string >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_string_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_Vector_string_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_Vector_string_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Vector_string_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::string >::erase(std::vector< std::string >::iterator)\n"
    "    std::vector< std::string >::erase(std::vector< std::string >::iterator,std::vector< std::string >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_Vector_string__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string >::size_type arg1 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Vector_string",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Vector_string" "', argument " "1"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::string >::size_type >(val1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Vector_string" "', argument " "2"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Vector_string" "', argument " "2"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (std::vector< std::string > *)new std::vector< std::string >(arg1,(std::vector< std::string >::value_type const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Vector_string(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Vector_string__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Vector_string__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Vector_string__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_Vector_string__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Vector_string'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::string >::vector()\n"
    "    std::vector< std::string >::vector(std::vector< std::string > const &)\n"
    "    std::vector< std::string >::vector(std::vector< std::string >::size_type)\n"
    "    std::vector< std::string >::vector(std::vector< std::string >::size_type,std::vector< std::string >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Vector_string_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vector_string_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_string_push_back" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vector_string_push_back" "', argument " "2"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vector_string_push_back" "', argument " "2"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->push_back((std::vector< std::string >::value_type const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_string_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vector_string_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_string_front" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    try {
      result = (std::vector< std::string >::value_type *) &((std::vector< std::string > const *)arg1)->front();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_string_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vector_string_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_string_back" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    try {
      result = (std::vector< std::string >::value_type *) &((std::vector< std::string > const *)arg1)->back();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_string_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Vector_string_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_string_assign" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vector_string_assign" "', argument " "2"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::size_type >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Vector_string_assign" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vector_string_assign" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->assign(arg2,(std::vector< std::string >::value_type const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_string_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Vector_string_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_string_resize" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vector_string_resize" "', argument " "2"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::size_type >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Vector_string_resize" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vector_string_resize" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->resize(arg2,(std::vector< std::string >::value_type const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_string_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Vector_string_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Vector_string_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Vector_string_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::string >::resize(std::vector< std::string >::size_type)\n"
    "    std::vector< std::string >::resize(std::vector< std::string >::size_type,std::vector< std::string >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Vector_string_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::iterator arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< std::string >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Vector_string_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_string_insert" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Vector_string_insert" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::string >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Vector_string_insert" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Vector_string_insert" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vector_string_insert" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      result = std_vector_Sl_std_string_Sg__insert__SWIG_0(arg1,arg2,(std::string const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::string >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_string_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::iterator arg2 ;
  std::vector< std::string >::size_type arg3 ;
  std::vector< std::string >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Vector_string_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_string_insert" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Vector_string_insert" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::string >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Vector_string_insert" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Vector_string_insert" "', argument " "3"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg3 = static_cast< std::vector< std::string >::size_type >(val3);
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Vector_string_insert" "', argument " "4"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vector_string_insert" "', argument " "4"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      std_vector_Sl_std_string_Sg__insert__SWIG_1(arg1,arg2,arg3,(std::string const &)*arg4);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_string_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Vector_string_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_Vector_string_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Vector_string_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::string >::insert(std::vector< std::string >::iterator,std::vector< std::string >::value_type const &)\n"
    "    std::vector< std::string >::insert(std::vector< std::string >::iterator,std::vector< std::string >::size_type,std::vector< std::string >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Vector_string_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vector_string_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_string_reserve" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vector_string_reserve" "', argument " "2"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::size_type >(val2);
  {
    try {
      (arg1)->reserve(arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_string_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vector_string_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_string_capacity" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    try {
      result = ((std::vector< std::string > const *)arg1)->capacity();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Vector_string(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Vector_string",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Vector_string" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    try {
      delete arg1;
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Vector_string_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_GumException__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::string arg2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::Exception *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_GumException",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_GumException" "', argument " "1"" of type '" "std::string const""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_GumException" "', argument " "2"" of type '" "std::string const""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (gum::Exception *)new gum::Exception(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__Exception, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GumException__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  gum::Exception *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_GumException",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_GumException" "', argument " "1"" of type '" "std::string const""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (gum::Exception *)new gum::Exception(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__Exception, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GumException__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Exception *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_GumException")) SWIG_fail;
  {
    try {
      result = (gum::Exception *)new gum::Exception();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__Exception, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GumException__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Exception *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::Exception *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_GumException",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_gum__Exception,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GumException" "', argument " "1"" of type '" "gum::Exception const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GumException" "', argument " "1"" of type '" "gum::Exception const &""'"); 
  }
  arg1 = reinterpret_cast< gum::Exception * >(argp1);
  {
    try {
      result = (gum::Exception *)new gum::Exception((gum::Exception const &)*arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__Exception, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GumException(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_GumException__SWIG_2(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_gum__Exception, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_GumException__SWIG_3(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_GumException__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_GumException__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_GumException'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::Exception::Exception(std::string const,std::string const)\n"
    "    gum::Exception::Exception(std::string const)\n"
    "    gum::Exception::Exception()\n"
    "    gum::Exception::Exception(gum::Exception const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_GumException(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Exception *arg1 = (gum::Exception *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_GumException",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__Exception, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GumException" "', argument " "1"" of type '" "gum::Exception *""'"); 
  }
  arg1 = reinterpret_cast< gum::Exception * >(argp1);
  {
    try {
      delete arg1;
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GumException___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Exception *arg1 = (gum::Exception *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GumException___str__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__Exception, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GumException___str__" "', argument " "1"" of type '" "gum::Exception const *""'"); 
  }
  arg1 = reinterpret_cast< gum::Exception * >(argp1);
  {
    try {
      result = ((gum::Exception const *)arg1)->toString();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GumException_errorContent(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Exception *arg1 = (gum::Exception *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GumException_errorContent",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__Exception, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GumException_errorContent" "', argument " "1"" of type '" "gum::Exception const *""'"); 
  }
  arg1 = reinterpret_cast< gum::Exception * >(argp1);
  {
    try {
      result = ((gum::Exception const *)arg1)->errorContent();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GumException_errorType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Exception *arg1 = (gum::Exception *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GumException_errorType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__Exception, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GumException_errorType" "', argument " "1"" of type '" "gum::Exception const *""'"); 
  }
  arg1 = reinterpret_cast< gum::Exception * >(argp1);
  {
    try {
      result = ((gum::Exception const *)arg1)->errorType();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GumException_errorCallStack(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Exception *arg1 = (gum::Exception *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GumException_errorCallStack",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__Exception, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GumException_errorCallStack" "', argument " "1"" of type '" "gum::Exception const *""'"); 
  }
  arg1 = reinterpret_cast< gum::Exception * >(argp1);
  {
    try {
      result = ((gum::Exception const *)arg1)->errorCallStack();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *GumException_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gum__Exception, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap___createMsg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  std::string *arg4 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  int val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:__createMsg",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__createMsg" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__createMsg" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__createMsg" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__createMsg" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "__createMsg" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "__createMsg" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__createMsg" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      result = gum::__createMsg((std::string const &)*arg1,(std::string const &)*arg2,arg3,(std::string const &)*arg4);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IdError__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::string arg2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::IdError *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_IdError",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_IdError" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_IdError" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (gum::IdError *)new gum::IdError(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__IdError, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IdError__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  gum::IdError *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_IdError",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_IdError" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (gum::IdError *)new gum::IdError(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__IdError, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IdError(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_IdError__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_IdError__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_IdError'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::IdError::IdError(std::string,std::string)\n"
    "    gum::IdError::IdError(std::string)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_IdError(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::IdError *arg1 = (gum::IdError *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_IdError",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__IdError, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IdError" "', argument " "1"" of type '" "gum::IdError *""'"); 
  }
  arg1 = reinterpret_cast< gum::IdError * >(argp1);
  {
    try {
      delete arg1;
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *IdError_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gum__IdError, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_FatalError__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::string arg2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::FatalError *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_FatalError",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_FatalError" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_FatalError" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (gum::FatalError *)new gum::FatalError(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__FatalError, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FatalError__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  gum::FatalError *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_FatalError",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_FatalError" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (gum::FatalError *)new gum::FatalError(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__FatalError, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FatalError(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_FatalError__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_FatalError__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_FatalError'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::FatalError::FatalError(std::string,std::string)\n"
    "    gum::FatalError::FatalError(std::string)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_FatalError(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::FatalError *arg1 = (gum::FatalError *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_FatalError",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__FatalError, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FatalError" "', argument " "1"" of type '" "gum::FatalError *""'"); 
  }
  arg1 = reinterpret_cast< gum::FatalError * >(argp1);
  {
    try {
      delete arg1;
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *FatalError_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gum__FatalError, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_UndefinedIteratorValue__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::string arg2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::UndefinedIteratorValue *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_UndefinedIteratorValue",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_UndefinedIteratorValue" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_UndefinedIteratorValue" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (gum::UndefinedIteratorValue *)new gum::UndefinedIteratorValue(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__UndefinedIteratorValue, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_UndefinedIteratorValue__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  gum::UndefinedIteratorValue *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_UndefinedIteratorValue",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_UndefinedIteratorValue" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (gum::UndefinedIteratorValue *)new gum::UndefinedIteratorValue(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__UndefinedIteratorValue, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_UndefinedIteratorValue(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_UndefinedIteratorValue__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_UndefinedIteratorValue__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_UndefinedIteratorValue'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::UndefinedIteratorValue::UndefinedIteratorValue(std::string,std::string)\n"
    "    gum::UndefinedIteratorValue::UndefinedIteratorValue(std::string)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_UndefinedIteratorValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::UndefinedIteratorValue *arg1 = (gum::UndefinedIteratorValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_UndefinedIteratorValue",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__UndefinedIteratorValue, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_UndefinedIteratorValue" "', argument " "1"" of type '" "gum::UndefinedIteratorValue *""'"); 
  }
  arg1 = reinterpret_cast< gum::UndefinedIteratorValue * >(argp1);
  {
    try {
      delete arg1;
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *UndefinedIteratorValue_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gum__UndefinedIteratorValue, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_UndefinedIteratorKey__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::string arg2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::UndefinedIteratorKey *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_UndefinedIteratorKey",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_UndefinedIteratorKey" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_UndefinedIteratorKey" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (gum::UndefinedIteratorKey *)new gum::UndefinedIteratorKey(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__UndefinedIteratorKey, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_UndefinedIteratorKey__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  gum::UndefinedIteratorKey *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_UndefinedIteratorKey",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_UndefinedIteratorKey" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (gum::UndefinedIteratorKey *)new gum::UndefinedIteratorKey(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__UndefinedIteratorKey, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_UndefinedIteratorKey(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_UndefinedIteratorKey__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_UndefinedIteratorKey__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_UndefinedIteratorKey'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::UndefinedIteratorKey::UndefinedIteratorKey(std::string,std::string)\n"
    "    gum::UndefinedIteratorKey::UndefinedIteratorKey(std::string)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_UndefinedIteratorKey(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::UndefinedIteratorKey *arg1 = (gum::UndefinedIteratorKey *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_UndefinedIteratorKey",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__UndefinedIteratorKey, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_UndefinedIteratorKey" "', argument " "1"" of type '" "gum::UndefinedIteratorKey *""'"); 
  }
  arg1 = reinterpret_cast< gum::UndefinedIteratorKey * >(argp1);
  {
    try {
      delete arg1;
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *UndefinedIteratorKey_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gum__UndefinedIteratorKey, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_NullElement__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::string arg2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::NullElement *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_NullElement",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_NullElement" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_NullElement" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (gum::NullElement *)new gum::NullElement(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__NullElement, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NullElement__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  gum::NullElement *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_NullElement",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_NullElement" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (gum::NullElement *)new gum::NullElement(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__NullElement, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NullElement(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_NullElement__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_NullElement__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_NullElement'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::NullElement::NullElement(std::string,std::string)\n"
    "    gum::NullElement::NullElement(std::string)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_NullElement(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::NullElement *arg1 = (gum::NullElement *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NullElement",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__NullElement, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NullElement" "', argument " "1"" of type '" "gum::NullElement *""'"); 
  }
  arg1 = reinterpret_cast< gum::NullElement * >(argp1);
  {
    try {
      delete arg1;
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NullElement_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gum__NullElement, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_UndefinedElement__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::string arg2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::UndefinedElement *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_UndefinedElement",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_UndefinedElement" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_UndefinedElement" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (gum::UndefinedElement *)new gum::UndefinedElement(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__UndefinedElement, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_UndefinedElement__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  gum::UndefinedElement *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_UndefinedElement",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_UndefinedElement" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (gum::UndefinedElement *)new gum::UndefinedElement(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__UndefinedElement, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_UndefinedElement(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_UndefinedElement__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_UndefinedElement__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_UndefinedElement'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::UndefinedElement::UndefinedElement(std::string,std::string)\n"
    "    gum::UndefinedElement::UndefinedElement(std::string)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_UndefinedElement(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::UndefinedElement *arg1 = (gum::UndefinedElement *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_UndefinedElement",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__UndefinedElement, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_UndefinedElement" "', argument " "1"" of type '" "gum::UndefinedElement *""'"); 
  }
  arg1 = reinterpret_cast< gum::UndefinedElement * >(argp1);
  {
    try {
      delete arg1;
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *UndefinedElement_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gum__UndefinedElement, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_SizeError__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::string arg2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::SizeError *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_SizeError",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_SizeError" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_SizeError" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (gum::SizeError *)new gum::SizeError(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__SizeError, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SizeError__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  gum::SizeError *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SizeError",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_SizeError" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (gum::SizeError *)new gum::SizeError(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__SizeError, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SizeError(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SizeError__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_SizeError__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_SizeError'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::SizeError::SizeError(std::string,std::string)\n"
    "    gum::SizeError::SizeError(std::string)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_SizeError(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::SizeError *arg1 = (gum::SizeError *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SizeError",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__SizeError, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SizeError" "', argument " "1"" of type '" "gum::SizeError *""'"); 
  }
  arg1 = reinterpret_cast< gum::SizeError * >(argp1);
  {
    try {
      delete arg1;
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SizeError_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gum__SizeError, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_EmptySet__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::string arg2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::EmptySet *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_EmptySet",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_EmptySet" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_EmptySet" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (gum::EmptySet *)new gum::EmptySet(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__EmptySet, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_EmptySet__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  gum::EmptySet *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_EmptySet",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_EmptySet" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (gum::EmptySet *)new gum::EmptySet(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__EmptySet, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_EmptySet(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_EmptySet__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_EmptySet__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_EmptySet'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::EmptySet::EmptySet(std::string,std::string)\n"
    "    gum::EmptySet::EmptySet(std::string)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_EmptySet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::EmptySet *arg1 = (gum::EmptySet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_EmptySet",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__EmptySet, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_EmptySet" "', argument " "1"" of type '" "gum::EmptySet *""'"); 
  }
  arg1 = reinterpret_cast< gum::EmptySet * >(argp1);
  {
    try {
      delete arg1;
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *EmptySet_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gum__EmptySet, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_InvalidArgumentsNumber__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::string arg2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::InvalidArgumentsNumber *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_InvalidArgumentsNumber",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_InvalidArgumentsNumber" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_InvalidArgumentsNumber" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (gum::InvalidArgumentsNumber *)new gum::InvalidArgumentsNumber(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__InvalidArgumentsNumber, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_InvalidArgumentsNumber__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  gum::InvalidArgumentsNumber *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_InvalidArgumentsNumber",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_InvalidArgumentsNumber" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (gum::InvalidArgumentsNumber *)new gum::InvalidArgumentsNumber(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__InvalidArgumentsNumber, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_InvalidArgumentsNumber(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_InvalidArgumentsNumber__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_InvalidArgumentsNumber__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_InvalidArgumentsNumber'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::InvalidArgumentsNumber::InvalidArgumentsNumber(std::string,std::string)\n"
    "    gum::InvalidArgumentsNumber::InvalidArgumentsNumber(std::string)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_InvalidArgumentsNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::InvalidArgumentsNumber *arg1 = (gum::InvalidArgumentsNumber *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_InvalidArgumentsNumber",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__InvalidArgumentsNumber, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_InvalidArgumentsNumber" "', argument " "1"" of type '" "gum::InvalidArgumentsNumber *""'"); 
  }
  arg1 = reinterpret_cast< gum::InvalidArgumentsNumber * >(argp1);
  {
    try {
      delete arg1;
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *InvalidArgumentsNumber_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gum__InvalidArgumentsNumber, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_InvalidArgument__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::string arg2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::InvalidArgument *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_InvalidArgument",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_InvalidArgument" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_InvalidArgument" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (gum::InvalidArgument *)new gum::InvalidArgument(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__InvalidArgument, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_InvalidArgument__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  gum::InvalidArgument *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_InvalidArgument",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_InvalidArgument" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (gum::InvalidArgument *)new gum::InvalidArgument(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__InvalidArgument, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_InvalidArgument(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_InvalidArgument__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_InvalidArgument__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_InvalidArgument'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::InvalidArgument::InvalidArgument(std::string,std::string)\n"
    "    gum::InvalidArgument::InvalidArgument(std::string)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_InvalidArgument(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::InvalidArgument *arg1 = (gum::InvalidArgument *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_InvalidArgument",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__InvalidArgument, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_InvalidArgument" "', argument " "1"" of type '" "gum::InvalidArgument *""'"); 
  }
  arg1 = reinterpret_cast< gum::InvalidArgument * >(argp1);
  {
    try {
      delete arg1;
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *InvalidArgument_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gum__InvalidArgument, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_IOError__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::string arg2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::IOError *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_IOError",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_IOError" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_IOError" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (gum::IOError *)new gum::IOError(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__IOError, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IOError__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  gum::IOError *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_IOError",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_IOError" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (gum::IOError *)new gum::IOError(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__IOError, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IOError(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_IOError__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_IOError__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_IOError'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::IOError::IOError(std::string,std::string)\n"
    "    gum::IOError::IOError(std::string)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_IOError(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::IOError *arg1 = (gum::IOError *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_IOError",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__IOError, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IOError" "', argument " "1"" of type '" "gum::IOError *""'"); 
  }
  arg1 = reinterpret_cast< gum::IOError * >(argp1);
  {
    try {
      delete arg1;
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *IOError_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gum__IOError, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_FormatNotFound__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::string arg2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::FormatNotFound *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_FormatNotFound",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_FormatNotFound" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_FormatNotFound" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (gum::FormatNotFound *)new gum::FormatNotFound(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__FormatNotFound, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FormatNotFound__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  gum::FormatNotFound *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_FormatNotFound",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_FormatNotFound" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (gum::FormatNotFound *)new gum::FormatNotFound(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__FormatNotFound, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FormatNotFound(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_FormatNotFound__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_FormatNotFound__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_FormatNotFound'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::FormatNotFound::FormatNotFound(std::string,std::string)\n"
    "    gum::FormatNotFound::FormatNotFound(std::string)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_FormatNotFound(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::FormatNotFound *arg1 = (gum::FormatNotFound *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_FormatNotFound",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__FormatNotFound, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FormatNotFound" "', argument " "1"" of type '" "gum::FormatNotFound *""'"); 
  }
  arg1 = reinterpret_cast< gum::FormatNotFound * >(argp1);
  {
    try {
      delete arg1;
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *FormatNotFound_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gum__FormatNotFound, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_OperationNotAllowed__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::string arg2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::OperationNotAllowed *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_OperationNotAllowed",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_OperationNotAllowed" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_OperationNotAllowed" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (gum::OperationNotAllowed *)new gum::OperationNotAllowed(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__OperationNotAllowed, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_OperationNotAllowed__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  gum::OperationNotAllowed *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_OperationNotAllowed",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_OperationNotAllowed" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (gum::OperationNotAllowed *)new gum::OperationNotAllowed(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__OperationNotAllowed, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_OperationNotAllowed(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_OperationNotAllowed__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_OperationNotAllowed__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_OperationNotAllowed'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::OperationNotAllowed::OperationNotAllowed(std::string,std::string)\n"
    "    gum::OperationNotAllowed::OperationNotAllowed(std::string)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_OperationNotAllowed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::OperationNotAllowed *arg1 = (gum::OperationNotAllowed *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_OperationNotAllowed",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__OperationNotAllowed, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_OperationNotAllowed" "', argument " "1"" of type '" "gum::OperationNotAllowed *""'"); 
  }
  arg1 = reinterpret_cast< gum::OperationNotAllowed * >(argp1);
  {
    try {
      delete arg1;
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *OperationNotAllowed_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gum__OperationNotAllowed, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_NotFound__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::string arg2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::NotFound *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_NotFound",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_NotFound" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_NotFound" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (gum::NotFound *)new gum::NotFound(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__NotFound, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NotFound__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  gum::NotFound *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_NotFound",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_NotFound" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (gum::NotFound *)new gum::NotFound(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__NotFound, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NotFound(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_NotFound__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_NotFound__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_NotFound'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::NotFound::NotFound(std::string,std::string)\n"
    "    gum::NotFound::NotFound(std::string)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_NotFound(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::NotFound *arg1 = (gum::NotFound *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NotFound",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__NotFound, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NotFound" "', argument " "1"" of type '" "gum::NotFound *""'"); 
  }
  arg1 = reinterpret_cast< gum::NotFound * >(argp1);
  {
    try {
      delete arg1;
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NotFound_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gum__NotFound, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ReferenceError__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::string arg2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::ReferenceError *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_ReferenceError",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_ReferenceError" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_ReferenceError" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (gum::ReferenceError *)new gum::ReferenceError(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__ReferenceError, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ReferenceError__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  gum::ReferenceError *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ReferenceError",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_ReferenceError" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (gum::ReferenceError *)new gum::ReferenceError(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__ReferenceError, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ReferenceError(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ReferenceError__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_ReferenceError__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ReferenceError'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::ReferenceError::ReferenceError(std::string,std::string)\n"
    "    gum::ReferenceError::ReferenceError(std::string)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_ReferenceError(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::ReferenceError *arg1 = (gum::ReferenceError *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ReferenceError",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__ReferenceError, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ReferenceError" "', argument " "1"" of type '" "gum::ReferenceError *""'"); 
  }
  arg1 = reinterpret_cast< gum::ReferenceError * >(argp1);
  {
    try {
      delete arg1;
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ReferenceError_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gum__ReferenceError, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_OutOfBounds__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::string arg2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::OutOfBounds *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_OutOfBounds",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_OutOfBounds" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_OutOfBounds" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (gum::OutOfBounds *)new gum::OutOfBounds(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__OutOfBounds, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_OutOfBounds__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  gum::OutOfBounds *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_OutOfBounds",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_OutOfBounds" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (gum::OutOfBounds *)new gum::OutOfBounds(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__OutOfBounds, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_OutOfBounds(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_OutOfBounds__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_OutOfBounds__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_OutOfBounds'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::OutOfBounds::OutOfBounds(std::string,std::string)\n"
    "    gum::OutOfBounds::OutOfBounds(std::string)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_OutOfBounds(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::OutOfBounds *arg1 = (gum::OutOfBounds *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_OutOfBounds",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__OutOfBounds, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_OutOfBounds" "', argument " "1"" of type '" "gum::OutOfBounds *""'"); 
  }
  arg1 = reinterpret_cast< gum::OutOfBounds * >(argp1);
  {
    try {
      delete arg1;
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *OutOfBounds_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gum__OutOfBounds, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_OutOfLowerBound__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::string arg2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::OutOfLowerBound *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_OutOfLowerBound",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_OutOfLowerBound" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_OutOfLowerBound" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (gum::OutOfLowerBound *)new gum::OutOfLowerBound(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__OutOfLowerBound, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_OutOfLowerBound__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  gum::OutOfLowerBound *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_OutOfLowerBound",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_OutOfLowerBound" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (gum::OutOfLowerBound *)new gum::OutOfLowerBound(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__OutOfLowerBound, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_OutOfLowerBound(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_OutOfLowerBound__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_OutOfLowerBound__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_OutOfLowerBound'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::OutOfLowerBound::OutOfLowerBound(std::string,std::string)\n"
    "    gum::OutOfLowerBound::OutOfLowerBound(std::string)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_OutOfLowerBound(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::OutOfLowerBound *arg1 = (gum::OutOfLowerBound *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_OutOfLowerBound",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__OutOfLowerBound, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_OutOfLowerBound" "', argument " "1"" of type '" "gum::OutOfLowerBound *""'"); 
  }
  arg1 = reinterpret_cast< gum::OutOfLowerBound * >(argp1);
  {
    try {
      delete arg1;
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *OutOfLowerBound_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gum__OutOfLowerBound, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_OutOfUpperBound__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::string arg2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::OutOfUpperBound *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_OutOfUpperBound",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_OutOfUpperBound" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_OutOfUpperBound" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (gum::OutOfUpperBound *)new gum::OutOfUpperBound(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__OutOfUpperBound, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_OutOfUpperBound__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  gum::OutOfUpperBound *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_OutOfUpperBound",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_OutOfUpperBound" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (gum::OutOfUpperBound *)new gum::OutOfUpperBound(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__OutOfUpperBound, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_OutOfUpperBound(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_OutOfUpperBound__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_OutOfUpperBound__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_OutOfUpperBound'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::OutOfUpperBound::OutOfUpperBound(std::string,std::string)\n"
    "    gum::OutOfUpperBound::OutOfUpperBound(std::string)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_OutOfUpperBound(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::OutOfUpperBound *arg1 = (gum::OutOfUpperBound *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_OutOfUpperBound",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__OutOfUpperBound, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_OutOfUpperBound" "', argument " "1"" of type '" "gum::OutOfUpperBound *""'"); 
  }
  arg1 = reinterpret_cast< gum::OutOfUpperBound * >(argp1);
  {
    try {
      delete arg1;
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *OutOfUpperBound_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gum__OutOfUpperBound, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_DuplicateElement__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::string arg2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::DuplicateElement *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_DuplicateElement",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_DuplicateElement" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_DuplicateElement" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (gum::DuplicateElement *)new gum::DuplicateElement(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__DuplicateElement, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DuplicateElement__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  gum::DuplicateElement *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DuplicateElement",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_DuplicateElement" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (gum::DuplicateElement *)new gum::DuplicateElement(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__DuplicateElement, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DuplicateElement(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_DuplicateElement__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_DuplicateElement__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_DuplicateElement'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::DuplicateElement::DuplicateElement(std::string,std::string)\n"
    "    gum::DuplicateElement::DuplicateElement(std::string)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_DuplicateElement(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::DuplicateElement *arg1 = (gum::DuplicateElement *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_DuplicateElement",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__DuplicateElement, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DuplicateElement" "', argument " "1"" of type '" "gum::DuplicateElement *""'"); 
  }
  arg1 = reinterpret_cast< gum::DuplicateElement * >(argp1);
  {
    try {
      delete arg1;
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DuplicateElement_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gum__DuplicateElement, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_DuplicateLabel__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::string arg2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::DuplicateLabel *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_DuplicateLabel",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_DuplicateLabel" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_DuplicateLabel" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (gum::DuplicateLabel *)new gum::DuplicateLabel(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__DuplicateLabel, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DuplicateLabel__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  gum::DuplicateLabel *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DuplicateLabel",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_DuplicateLabel" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (gum::DuplicateLabel *)new gum::DuplicateLabel(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__DuplicateLabel, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DuplicateLabel(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_DuplicateLabel__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_DuplicateLabel__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_DuplicateLabel'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::DuplicateLabel::DuplicateLabel(std::string,std::string)\n"
    "    gum::DuplicateLabel::DuplicateLabel(std::string)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_DuplicateLabel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::DuplicateLabel *arg1 = (gum::DuplicateLabel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_DuplicateLabel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__DuplicateLabel, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DuplicateLabel" "', argument " "1"" of type '" "gum::DuplicateLabel *""'"); 
  }
  arg1 = reinterpret_cast< gum::DuplicateLabel * >(argp1);
  {
    try {
      delete arg1;
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DuplicateLabel_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gum__DuplicateLabel, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_GraphError__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::string arg2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::GraphError *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_GraphError",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_GraphError" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_GraphError" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (gum::GraphError *)new gum::GraphError(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__GraphError, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GraphError__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  gum::GraphError *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_GraphError",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_GraphError" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (gum::GraphError *)new gum::GraphError(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__GraphError, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GraphError(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_GraphError__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_GraphError__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_GraphError'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::GraphError::GraphError(std::string,std::string)\n"
    "    gum::GraphError::GraphError(std::string)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_GraphError(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::GraphError *arg1 = (gum::GraphError *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_GraphError",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__GraphError, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GraphError" "', argument " "1"" of type '" "gum::GraphError *""'"); 
  }
  arg1 = reinterpret_cast< gum::GraphError * >(argp1);
  {
    try {
      delete arg1;
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *GraphError_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gum__GraphError, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_NoNeighbour__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::string arg2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::NoNeighbour *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_NoNeighbour",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_NoNeighbour" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_NoNeighbour" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (gum::NoNeighbour *)new gum::NoNeighbour(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__NoNeighbour, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NoNeighbour__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  gum::NoNeighbour *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_NoNeighbour",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_NoNeighbour" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (gum::NoNeighbour *)new gum::NoNeighbour(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__NoNeighbour, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NoNeighbour(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_NoNeighbour__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_NoNeighbour__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_NoNeighbour'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::NoNeighbour::NoNeighbour(std::string,std::string)\n"
    "    gum::NoNeighbour::NoNeighbour(std::string)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_NoNeighbour(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::NoNeighbour *arg1 = (gum::NoNeighbour *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NoNeighbour",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__NoNeighbour, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NoNeighbour" "', argument " "1"" of type '" "gum::NoNeighbour *""'"); 
  }
  arg1 = reinterpret_cast< gum::NoNeighbour * >(argp1);
  {
    try {
      delete arg1;
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NoNeighbour_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gum__NoNeighbour, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_NoParent__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::string arg2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::NoParent *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_NoParent",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_NoParent" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_NoParent" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (gum::NoParent *)new gum::NoParent(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__NoParent, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NoParent__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  gum::NoParent *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_NoParent",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_NoParent" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (gum::NoParent *)new gum::NoParent(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__NoParent, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NoParent(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_NoParent__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_NoParent__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_NoParent'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::NoParent::NoParent(std::string,std::string)\n"
    "    gum::NoParent::NoParent(std::string)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_NoParent(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::NoParent *arg1 = (gum::NoParent *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NoParent",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__NoParent, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NoParent" "', argument " "1"" of type '" "gum::NoParent *""'"); 
  }
  arg1 = reinterpret_cast< gum::NoParent * >(argp1);
  {
    try {
      delete arg1;
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NoParent_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gum__NoParent, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_NoChild__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::string arg2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::NoChild *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_NoChild",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_NoChild" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_NoChild" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (gum::NoChild *)new gum::NoChild(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__NoChild, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NoChild__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  gum::NoChild *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_NoChild",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_NoChild" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (gum::NoChild *)new gum::NoChild(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__NoChild, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NoChild(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_NoChild__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_NoChild__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_NoChild'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::NoChild::NoChild(std::string,std::string)\n"
    "    gum::NoChild::NoChild(std::string)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_NoChild(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::NoChild *arg1 = (gum::NoChild *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NoChild",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__NoChild, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NoChild" "', argument " "1"" of type '" "gum::NoChild *""'"); 
  }
  arg1 = reinterpret_cast< gum::NoChild * >(argp1);
  {
    try {
      delete arg1;
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NoChild_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gum__NoChild, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_InvalidEdge__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::string arg2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::InvalidEdge *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_InvalidEdge",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_InvalidEdge" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_InvalidEdge" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (gum::InvalidEdge *)new gum::InvalidEdge(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__InvalidEdge, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_InvalidEdge__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  gum::InvalidEdge *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_InvalidEdge",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_InvalidEdge" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (gum::InvalidEdge *)new gum::InvalidEdge(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__InvalidEdge, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_InvalidEdge(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_InvalidEdge__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_InvalidEdge__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_InvalidEdge'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::InvalidEdge::InvalidEdge(std::string,std::string)\n"
    "    gum::InvalidEdge::InvalidEdge(std::string)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_InvalidEdge(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::InvalidEdge *arg1 = (gum::InvalidEdge *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_InvalidEdge",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__InvalidEdge, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_InvalidEdge" "', argument " "1"" of type '" "gum::InvalidEdge *""'"); 
  }
  arg1 = reinterpret_cast< gum::InvalidEdge * >(argp1);
  {
    try {
      delete arg1;
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *InvalidEdge_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gum__InvalidEdge, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_InvalidArc__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::string arg2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::InvalidArc *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_InvalidArc",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_InvalidArc" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_InvalidArc" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (gum::InvalidArc *)new gum::InvalidArc(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__InvalidArc, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_InvalidArc__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  gum::InvalidArc *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_InvalidArc",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_InvalidArc" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (gum::InvalidArc *)new gum::InvalidArc(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__InvalidArc, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_InvalidArc(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_InvalidArc__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_InvalidArc__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_InvalidArc'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::InvalidArc::InvalidArc(std::string,std::string)\n"
    "    gum::InvalidArc::InvalidArc(std::string)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_InvalidArc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::InvalidArc *arg1 = (gum::InvalidArc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_InvalidArc",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__InvalidArc, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_InvalidArc" "', argument " "1"" of type '" "gum::InvalidArc *""'"); 
  }
  arg1 = reinterpret_cast< gum::InvalidArc * >(argp1);
  {
    try {
      delete arg1;
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *InvalidArc_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gum__InvalidArc, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_InvalidNode__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::string arg2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::InvalidNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_InvalidNode",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_InvalidNode" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_InvalidNode" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (gum::InvalidNode *)new gum::InvalidNode(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__InvalidNode, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_InvalidNode__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  gum::InvalidNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_InvalidNode",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_InvalidNode" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (gum::InvalidNode *)new gum::InvalidNode(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__InvalidNode, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_InvalidNode(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_InvalidNode__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_InvalidNode__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_InvalidNode'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::InvalidNode::InvalidNode(std::string,std::string)\n"
    "    gum::InvalidNode::InvalidNode(std::string)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_InvalidNode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::InvalidNode *arg1 = (gum::InvalidNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_InvalidNode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__InvalidNode, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_InvalidNode" "', argument " "1"" of type '" "gum::InvalidNode *""'"); 
  }
  arg1 = reinterpret_cast< gum::InvalidNode * >(argp1);
  {
    try {
      delete arg1;
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *InvalidNode_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gum__InvalidNode, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_EmptyBSTree__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::string arg2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::EmptyBSTree *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_EmptyBSTree",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_EmptyBSTree" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_EmptyBSTree" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (gum::EmptyBSTree *)new gum::EmptyBSTree(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__EmptyBSTree, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_EmptyBSTree__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  gum::EmptyBSTree *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_EmptyBSTree",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_EmptyBSTree" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (gum::EmptyBSTree *)new gum::EmptyBSTree(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__EmptyBSTree, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_EmptyBSTree(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_EmptyBSTree__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_EmptyBSTree__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_EmptyBSTree'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::EmptyBSTree::EmptyBSTree(std::string,std::string)\n"
    "    gum::EmptyBSTree::EmptyBSTree(std::string)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_EmptyBSTree(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::EmptyBSTree *arg1 = (gum::EmptyBSTree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_EmptyBSTree",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__EmptyBSTree, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_EmptyBSTree" "', argument " "1"" of type '" "gum::EmptyBSTree *""'"); 
  }
  arg1 = reinterpret_cast< gum::EmptyBSTree * >(argp1);
  {
    try {
      delete arg1;
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *EmptyBSTree_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gum__EmptyBSTree, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_DefaultInLabel__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::string arg2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::DefaultInLabel *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_DefaultInLabel",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_DefaultInLabel" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_DefaultInLabel" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (gum::DefaultInLabel *)new gum::DefaultInLabel(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__DefaultInLabel, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DefaultInLabel__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  gum::DefaultInLabel *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DefaultInLabel",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_DefaultInLabel" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (gum::DefaultInLabel *)new gum::DefaultInLabel(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__DefaultInLabel, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DefaultInLabel(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_DefaultInLabel__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_DefaultInLabel__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_DefaultInLabel'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::DefaultInLabel::DefaultInLabel(std::string,std::string)\n"
    "    gum::DefaultInLabel::DefaultInLabel(std::string)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_DefaultInLabel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::DefaultInLabel *arg1 = (gum::DefaultInLabel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_DefaultInLabel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__DefaultInLabel, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DefaultInLabel" "', argument " "1"" of type '" "gum::DefaultInLabel *""'"); 
  }
  arg1 = reinterpret_cast< gum::DefaultInLabel * >(argp1);
  {
    try {
      delete arg1;
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DefaultInLabel_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gum__DefaultInLabel, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_InvalidDirectedCycle__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::string arg2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::InvalidDirectedCycle *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_InvalidDirectedCycle",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_InvalidDirectedCycle" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_InvalidDirectedCycle" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (gum::InvalidDirectedCycle *)new gum::InvalidDirectedCycle(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__InvalidDirectedCycle, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_InvalidDirectedCycle__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  gum::InvalidDirectedCycle *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_InvalidDirectedCycle",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_InvalidDirectedCycle" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (gum::InvalidDirectedCycle *)new gum::InvalidDirectedCycle(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__InvalidDirectedCycle, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_InvalidDirectedCycle(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_InvalidDirectedCycle__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_InvalidDirectedCycle__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_InvalidDirectedCycle'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::InvalidDirectedCycle::InvalidDirectedCycle(std::string,std::string)\n"
    "    gum::InvalidDirectedCycle::InvalidDirectedCycle(std::string)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_InvalidDirectedCycle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::InvalidDirectedCycle *arg1 = (gum::InvalidDirectedCycle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_InvalidDirectedCycle",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__InvalidDirectedCycle, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_InvalidDirectedCycle" "', argument " "1"" of type '" "gum::InvalidDirectedCycle *""'"); 
  }
  arg1 = reinterpret_cast< gum::InvalidDirectedCycle * >(argp1);
  {
    try {
      delete arg1;
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *InvalidDirectedCycle_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gum__InvalidDirectedCycle, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_CPTError__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::string arg2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::CPTError *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_CPTError",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_CPTError" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_CPTError" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (gum::CPTError *)new gum::CPTError(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__CPTError, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CPTError__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  gum::CPTError *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_CPTError",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_CPTError" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (gum::CPTError *)new gum::CPTError(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__CPTError, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CPTError(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_CPTError__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_CPTError__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_CPTError'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::CPTError::CPTError(std::string,std::string)\n"
    "    gum::CPTError::CPTError(std::string)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_CPTError(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::CPTError *arg1 = (gum::CPTError *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_CPTError",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__CPTError, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CPTError" "', argument " "1"" of type '" "gum::CPTError *""'"); 
  }
  arg1 = reinterpret_cast< gum::CPTError * >(argp1);
  {
    try {
      delete arg1;
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *CPTError_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gum__CPTError, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_CPTNoSumTo1__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::string arg2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::CPTNoSumTo1 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_CPTNoSumTo1",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_CPTNoSumTo1" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_CPTNoSumTo1" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (gum::CPTNoSumTo1 *)new gum::CPTNoSumTo1(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__CPTNoSumTo1, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CPTNoSumTo1__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  gum::CPTNoSumTo1 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_CPTNoSumTo1",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_CPTNoSumTo1" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (gum::CPTNoSumTo1 *)new gum::CPTNoSumTo1(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__CPTNoSumTo1, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CPTNoSumTo1(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_CPTNoSumTo1__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_CPTNoSumTo1__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_CPTNoSumTo1'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::CPTNoSumTo1::CPTNoSumTo1(std::string,std::string)\n"
    "    gum::CPTNoSumTo1::CPTNoSumTo1(std::string)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_CPTNoSumTo1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::CPTNoSumTo1 *arg1 = (gum::CPTNoSumTo1 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_CPTNoSumTo1",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__CPTNoSumTo1, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CPTNoSumTo1" "', argument " "1"" of type '" "gum::CPTNoSumTo1 *""'"); 
  }
  arg1 = reinterpret_cast< gum::CPTNoSumTo1 * >(argp1);
  {
    try {
      delete arg1;
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *CPTNoSumTo1_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gum__CPTNoSumTo1, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_IncompatibleEvidence__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::string arg2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::IncompatibleEvidence *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_IncompatibleEvidence",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_IncompatibleEvidence" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_IncompatibleEvidence" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (gum::IncompatibleEvidence *)new gum::IncompatibleEvidence(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__IncompatibleEvidence, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IncompatibleEvidence__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  gum::IncompatibleEvidence *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_IncompatibleEvidence",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_IncompatibleEvidence" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (gum::IncompatibleEvidence *)new gum::IncompatibleEvidence(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__IncompatibleEvidence, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IncompatibleEvidence(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_IncompatibleEvidence__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_IncompatibleEvidence__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_IncompatibleEvidence'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::IncompatibleEvidence::IncompatibleEvidence(std::string,std::string)\n"
    "    gum::IncompatibleEvidence::IncompatibleEvidence(std::string)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_IncompatibleEvidence(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::IncompatibleEvidence *arg1 = (gum::IncompatibleEvidence *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_IncompatibleEvidence",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__IncompatibleEvidence, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IncompatibleEvidence" "', argument " "1"" of type '" "gum::IncompatibleEvidence *""'"); 
  }
  arg1 = reinterpret_cast< gum::IncompatibleEvidence * >(argp1);
  {
    try {
      delete arg1;
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *IncompatibleEvidence_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gum__IncompatibleEvidence, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_FactoryError__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::string arg2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::FactoryError *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_FactoryError",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_FactoryError" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_FactoryError" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (gum::FactoryError *)new gum::FactoryError(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__FactoryError, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FactoryError__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  gum::FactoryError *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_FactoryError",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_FactoryError" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (gum::FactoryError *)new gum::FactoryError(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__FactoryError, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FactoryError(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_FactoryError__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_FactoryError__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_FactoryError'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::FactoryError::FactoryError(std::string,std::string)\n"
    "    gum::FactoryError::FactoryError(std::string)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_FactoryError(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::FactoryError *arg1 = (gum::FactoryError *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_FactoryError",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__FactoryError, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FactoryError" "', argument " "1"" of type '" "gum::FactoryError *""'"); 
  }
  arg1 = reinterpret_cast< gum::FactoryError * >(argp1);
  {
    try {
      delete arg1;
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *FactoryError_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gum__FactoryError, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_FactoryInvalidState__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::string arg2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::FactoryInvalidState *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_FactoryInvalidState",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_FactoryInvalidState" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_FactoryInvalidState" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (gum::FactoryInvalidState *)new gum::FactoryInvalidState(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__FactoryInvalidState, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FactoryInvalidState__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  gum::FactoryInvalidState *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_FactoryInvalidState",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_FactoryInvalidState" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (gum::FactoryInvalidState *)new gum::FactoryInvalidState(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__FactoryInvalidState, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FactoryInvalidState(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_FactoryInvalidState__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_FactoryInvalidState__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_FactoryInvalidState'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::FactoryInvalidState::FactoryInvalidState(std::string,std::string)\n"
    "    gum::FactoryInvalidState::FactoryInvalidState(std::string)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_FactoryInvalidState(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::FactoryInvalidState *arg1 = (gum::FactoryInvalidState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_FactoryInvalidState",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__FactoryInvalidState, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FactoryInvalidState" "', argument " "1"" of type '" "gum::FactoryInvalidState *""'"); 
  }
  arg1 = reinterpret_cast< gum::FactoryInvalidState * >(argp1);
  {
    try {
      delete arg1;
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *FactoryInvalidState_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gum__FactoryInvalidState, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_WrongType__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::string arg2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::WrongType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_WrongType",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_WrongType" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_WrongType" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (gum::WrongType *)new gum::WrongType(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__WrongType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_WrongType__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  gum::WrongType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_WrongType",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_WrongType" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (gum::WrongType *)new gum::WrongType(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__WrongType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_WrongType(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_WrongType__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_WrongType__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_WrongType'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::WrongType::WrongType(std::string,std::string)\n"
    "    gum::WrongType::WrongType(std::string)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_WrongType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::WrongType *arg1 = (gum::WrongType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_WrongType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__WrongType, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_WrongType" "', argument " "1"" of type '" "gum::WrongType *""'"); 
  }
  arg1 = reinterpret_cast< gum::WrongType * >(argp1);
  {
    try {
      delete arg1;
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *WrongType_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gum__WrongType, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_WrongClassElement__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::string arg2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::WrongClassElement *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_WrongClassElement",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_WrongClassElement" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_WrongClassElement" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (gum::WrongClassElement *)new gum::WrongClassElement(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__WrongClassElement, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_WrongClassElement__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  gum::WrongClassElement *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_WrongClassElement",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_WrongClassElement" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (gum::WrongClassElement *)new gum::WrongClassElement(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__WrongClassElement, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_WrongClassElement(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_WrongClassElement__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_WrongClassElement__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_WrongClassElement'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::WrongClassElement::WrongClassElement(std::string,std::string)\n"
    "    gum::WrongClassElement::WrongClassElement(std::string)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_WrongClassElement(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::WrongClassElement *arg1 = (gum::WrongClassElement *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_WrongClassElement",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__WrongClassElement, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_WrongClassElement" "', argument " "1"" of type '" "gum::WrongClassElement *""'"); 
  }
  arg1 = reinterpret_cast< gum::WrongClassElement * >(argp1);
  {
    try {
      delete arg1;
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *WrongClassElement_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gum__WrongClassElement, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_TypeError__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::string arg2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::TypeError *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_TypeError",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_TypeError" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_TypeError" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (gum::TypeError *)new gum::TypeError(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__TypeError, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TypeError__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  gum::TypeError *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_TypeError",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_TypeError" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (gum::TypeError *)new gum::TypeError(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__TypeError, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TypeError(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_TypeError__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_TypeError__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_TypeError'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::TypeError::TypeError(std::string,std::string)\n"
    "    gum::TypeError::TypeError(std::string)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_TypeError(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::TypeError *arg1 = (gum::TypeError *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_TypeError",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__TypeError, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TypeError" "', argument " "1"" of type '" "gum::TypeError *""'"); 
  }
  arg1 = reinterpret_cast< gum::TypeError * >(argp1);
  {
    try {
      delete arg1;
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *TypeError_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gum__TypeError, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_LearningError__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::string arg2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::LearningError *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_LearningError",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_LearningError" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_LearningError" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (gum::LearningError *)new gum::LearningError(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__LearningError, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LearningError__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  gum::LearningError *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_LearningError",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_LearningError" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (gum::LearningError *)new gum::LearningError(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__LearningError, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LearningError(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_LearningError__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_LearningError__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_LearningError'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::LearningError::LearningError(std::string,std::string)\n"
    "    gum::LearningError::LearningError(std::string)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_LearningError(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::LearningError *arg1 = (gum::LearningError *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_LearningError",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__LearningError, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LearningError" "', argument " "1"" of type '" "gum::LearningError *""'"); 
  }
  arg1 = reinterpret_cast< gum::LearningError * >(argp1);
  {
    try {
      delete arg1;
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LearningError_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gum__LearningError, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_IncompatibleScoreApriori__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::string arg2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::IncompatibleScoreApriori *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_IncompatibleScoreApriori",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_IncompatibleScoreApriori" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_IncompatibleScoreApriori" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (gum::IncompatibleScoreApriori *)new gum::IncompatibleScoreApriori(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__IncompatibleScoreApriori, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IncompatibleScoreApriori__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  gum::IncompatibleScoreApriori *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_IncompatibleScoreApriori",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_IncompatibleScoreApriori" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (gum::IncompatibleScoreApriori *)new gum::IncompatibleScoreApriori(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__IncompatibleScoreApriori, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IncompatibleScoreApriori(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_IncompatibleScoreApriori__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_IncompatibleScoreApriori__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_IncompatibleScoreApriori'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::IncompatibleScoreApriori::IncompatibleScoreApriori(std::string,std::string)\n"
    "    gum::IncompatibleScoreApriori::IncompatibleScoreApriori(std::string)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_IncompatibleScoreApriori(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::IncompatibleScoreApriori *arg1 = (gum::IncompatibleScoreApriori *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_IncompatibleScoreApriori",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__IncompatibleScoreApriori, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IncompatibleScoreApriori" "', argument " "1"" of type '" "gum::IncompatibleScoreApriori *""'"); 
  }
  arg1 = reinterpret_cast< gum::IncompatibleScoreApriori * >(argp1);
  {
    try {
      delete arg1;
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *IncompatibleScoreApriori_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gum__IncompatibleScoreApriori, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_PossiblyIncompatibleScoreApriori__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::string arg2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::PossiblyIncompatibleScoreApriori *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_PossiblyIncompatibleScoreApriori",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_PossiblyIncompatibleScoreApriori" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_PossiblyIncompatibleScoreApriori" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (gum::PossiblyIncompatibleScoreApriori *)new gum::PossiblyIncompatibleScoreApriori(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__PossiblyIncompatibleScoreApriori, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PossiblyIncompatibleScoreApriori__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  gum::PossiblyIncompatibleScoreApriori *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_PossiblyIncompatibleScoreApriori",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_PossiblyIncompatibleScoreApriori" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (gum::PossiblyIncompatibleScoreApriori *)new gum::PossiblyIncompatibleScoreApriori(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__PossiblyIncompatibleScoreApriori, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PossiblyIncompatibleScoreApriori(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_PossiblyIncompatibleScoreApriori__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_PossiblyIncompatibleScoreApriori__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_PossiblyIncompatibleScoreApriori'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::PossiblyIncompatibleScoreApriori::PossiblyIncompatibleScoreApriori(std::string,std::string)\n"
    "    gum::PossiblyIncompatibleScoreApriori::PossiblyIncompatibleScoreApriori(std::string)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_PossiblyIncompatibleScoreApriori(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::PossiblyIncompatibleScoreApriori *arg1 = (gum::PossiblyIncompatibleScoreApriori *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_PossiblyIncompatibleScoreApriori",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__PossiblyIncompatibleScoreApriori, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PossiblyIncompatibleScoreApriori" "', argument " "1"" of type '" "gum::PossiblyIncompatibleScoreApriori *""'"); 
  }
  arg1 = reinterpret_cast< gum::PossiblyIncompatibleScoreApriori * >(argp1);
  {
    try {
      delete arg1;
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *PossiblyIncompatibleScoreApriori_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gum__PossiblyIncompatibleScoreApriori, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_DatabaseError__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::string arg2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::DatabaseError *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_DatabaseError",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_DatabaseError" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_DatabaseError" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (gum::DatabaseError *)new gum::DatabaseError(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__DatabaseError, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DatabaseError__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  gum::DatabaseError *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DatabaseError",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_DatabaseError" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (gum::DatabaseError *)new gum::DatabaseError(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__DatabaseError, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DatabaseError(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_DatabaseError__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_DatabaseError__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_DatabaseError'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::DatabaseError::DatabaseError(std::string,std::string)\n"
    "    gum::DatabaseError::DatabaseError(std::string)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_DatabaseError(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::DatabaseError *arg1 = (gum::DatabaseError *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_DatabaseError",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__DatabaseError, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DatabaseError" "', argument " "1"" of type '" "gum::DatabaseError *""'"); 
  }
  arg1 = reinterpret_cast< gum::DatabaseError * >(argp1);
  {
    try {
      delete arg1;
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DatabaseError_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gum__DatabaseError, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_MissingVariableInDatabase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::string arg2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::MissingVariableInDatabase *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_MissingVariableInDatabase",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_MissingVariableInDatabase" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_MissingVariableInDatabase" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (gum::MissingVariableInDatabase *)new gum::MissingVariableInDatabase(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__MissingVariableInDatabase, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MissingVariableInDatabase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  gum::MissingVariableInDatabase *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_MissingVariableInDatabase",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_MissingVariableInDatabase" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (gum::MissingVariableInDatabase *)new gum::MissingVariableInDatabase(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__MissingVariableInDatabase, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MissingVariableInDatabase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_MissingVariableInDatabase__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_MissingVariableInDatabase__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_MissingVariableInDatabase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::MissingVariableInDatabase::MissingVariableInDatabase(std::string,std::string)\n"
    "    gum::MissingVariableInDatabase::MissingVariableInDatabase(std::string)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_MissingVariableInDatabase(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::MissingVariableInDatabase *arg1 = (gum::MissingVariableInDatabase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_MissingVariableInDatabase",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__MissingVariableInDatabase, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MissingVariableInDatabase" "', argument " "1"" of type '" "gum::MissingVariableInDatabase *""'"); 
  }
  arg1 = reinterpret_cast< gum::MissingVariableInDatabase * >(argp1);
  {
    try {
      delete arg1;
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MissingVariableInDatabase_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gum__MissingVariableInDatabase, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_UnknownLabelInDatabase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::string arg2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::UnknownLabelInDatabase *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_UnknownLabelInDatabase",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_UnknownLabelInDatabase" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_UnknownLabelInDatabase" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (gum::UnknownLabelInDatabase *)new gum::UnknownLabelInDatabase(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__UnknownLabelInDatabase, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_UnknownLabelInDatabase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  gum::UnknownLabelInDatabase *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_UnknownLabelInDatabase",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_UnknownLabelInDatabase" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (gum::UnknownLabelInDatabase *)new gum::UnknownLabelInDatabase(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__UnknownLabelInDatabase, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_UnknownLabelInDatabase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_UnknownLabelInDatabase__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_UnknownLabelInDatabase__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_UnknownLabelInDatabase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::UnknownLabelInDatabase::UnknownLabelInDatabase(std::string,std::string)\n"
    "    gum::UnknownLabelInDatabase::UnknownLabelInDatabase(std::string)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_UnknownLabelInDatabase(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::UnknownLabelInDatabase *arg1 = (gum::UnknownLabelInDatabase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_UnknownLabelInDatabase",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__UnknownLabelInDatabase, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_UnknownLabelInDatabase" "', argument " "1"" of type '" "gum::UnknownLabelInDatabase *""'"); 
  }
  arg1 = reinterpret_cast< gum::UnknownLabelInDatabase * >(argp1);
  {
    try {
      delete arg1;
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *UnknownLabelInDatabase_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gum__UnknownLabelInDatabase, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_SyntaxError__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  gum::Size arg2 ;
  gum::Size arg3 ;
  std::string arg4 ;
  int res1 = SWIG_OLDOBJ ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  gum::SyntaxError *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_SyntaxError",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SyntaxError" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SyntaxError" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SyntaxError" "', argument " "2"" of type '" "gum::Size""'");
  } 
  arg2 = static_cast< gum::Size >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SyntaxError" "', argument " "3"" of type '" "gum::Size""'");
  } 
  arg3 = static_cast< gum::Size >(val3);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_SyntaxError" "', argument " "4"" of type '" "std::string""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (gum::SyntaxError *)new gum::SyntaxError((std::string const &)*arg1,arg2,arg3,arg4);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__SyntaxError, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SyntaxError__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  gum::Size arg2 ;
  gum::Size arg3 ;
  int res1 = SWIG_OLDOBJ ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  gum::SyntaxError *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_SyntaxError",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SyntaxError" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SyntaxError" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SyntaxError" "', argument " "2"" of type '" "gum::Size""'");
  } 
  arg2 = static_cast< gum::Size >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SyntaxError" "', argument " "3"" of type '" "gum::Size""'");
  } 
  arg3 = static_cast< gum::Size >(val3);
  {
    try {
      result = (gum::SyntaxError *)new gum::SyntaxError((std::string const &)*arg1,arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__SyntaxError, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SyntaxError(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_SyntaxError__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_new_SyntaxError__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_SyntaxError'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::SyntaxError::SyntaxError(std::string const &,gum::Size,gum::Size,std::string)\n"
    "    gum::SyntaxError::SyntaxError(std::string const &,gum::Size,gum::Size)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SyntaxError_col(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::SyntaxError *arg1 = (gum::SyntaxError *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::Size result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SyntaxError_col",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__SyntaxError, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SyntaxError_col" "', argument " "1"" of type '" "gum::SyntaxError const *""'"); 
  }
  arg1 = reinterpret_cast< gum::SyntaxError * >(argp1);
  {
    try {
      result = (gum::Size)((gum::SyntaxError const *)arg1)->col();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SyntaxError_line(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::SyntaxError *arg1 = (gum::SyntaxError *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::Size result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SyntaxError_line",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__SyntaxError, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SyntaxError_line" "', argument " "1"" of type '" "gum::SyntaxError const *""'"); 
  }
  arg1 = reinterpret_cast< gum::SyntaxError * >(argp1);
  {
    try {
      result = (gum::Size)((gum::SyntaxError const *)arg1)->line();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SyntaxError(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::SyntaxError *arg1 = (gum::SyntaxError *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SyntaxError",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__SyntaxError, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SyntaxError" "', argument " "1"" of type '" "gum::SyntaxError *""'"); 
  }
  arg1 = reinterpret_cast< gum::SyntaxError * >(argp1);
  {
    try {
      delete arg1;
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SyntaxError_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gum__SyntaxError, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_randomProba(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)":randomProba")) SWIG_fail;
  {
    try {
      result = (double)gum::randomProba();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_randomGeneratorSeed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)":randomGeneratorSeed")) SWIG_fail;
  {
    try {
      result = (unsigned int)gum::randomGeneratorSeed();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_initRandom__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  unsigned int arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:initRandom",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "initRandom" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  {
    try {
      gum::initRandom(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_initRandom__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":initRandom")) SWIG_fail;
  {
    try {
      gum::initRandom();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_initRandom(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_initRandom__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_initRandom__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'initRandom'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::initRandom(unsigned int)\n"
    "    gum::initRandom()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_getRandomGenerator__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  unsigned int arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::default_random_engine result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:getRandomGenerator",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "getRandomGenerator" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  {
    try {
      result = gum::getRandomGenerator(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new std::default_random_engine(static_cast< const std::default_random_engine& >(result))), SWIGTYPE_p_std__default_random_engine, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_getRandomGenerator__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::default_random_engine result;
  
  if (!PyArg_ParseTuple(args,(char *)":getRandomGenerator")) SWIG_fail;
  {
    try {
      result = gum::getRandomGenerator();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new std::default_random_engine(static_cast< const std::default_random_engine& >(result))), SWIGTYPE_p_std__default_random_engine, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_getRandomGenerator(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_getRandomGenerator__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_getRandomGenerator__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'getRandomGenerator'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::getRandomGenerator(unsigned int)\n"
    "    gum::getRandomGenerator()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_isOMP(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)":isOMP")) SWIG_fail;
  {
    try {
      result = (bool)gum::isOMP();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_setNumberOfThreads(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  unsigned int arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:setNumberOfThreads",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "setNumberOfThreads" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  {
    try {
      gum::setNumberOfThreads(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_getMaxNumberOfThreads(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)":getMaxNumberOfThreads")) SWIG_fail;
  {
    try {
      result = (unsigned int)gum::getMaxNumberOfThreads();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_getThreadNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)":getThreadNumber")) SWIG_fail;
  {
    try {
      result = (unsigned int)gum::getThreadNumber();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_getNumberOfRunningThreads(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)":getNumberOfRunningThreads")) SWIG_fail;
  {
    try {
      result = (unsigned int)gum::getNumberOfRunningThreads();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_getNumberOfLogicalProcessors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)":getNumberOfLogicalProcessors")) SWIG_fail;
  {
    try {
      result = (unsigned int)gum::getNumberOfLogicalProcessors();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_setNestedParallelism(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bool arg1 ;
  bool val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:setNestedParallelism",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_bool(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "setNestedParallelism" "', argument " "1"" of type '" "bool""'");
  } 
  arg1 = static_cast< bool >(val1);
  {
    try {
      gum::setNestedParallelism(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_getNestedParallelism(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)":getNestedParallelism")) SWIG_fail;
  {
    try {
      result = (bool)gum::getNestedParallelism();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_setDynamicThreadsNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bool arg1 ;
  bool val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:setDynamicThreadsNumber",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_bool(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "setDynamicThreadsNumber" "', argument " "1"" of type '" "bool""'");
  } 
  arg1 = static_cast< bool >(val1);
  {
    try {
      gum::setDynamicThreadsNumber(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_getDynamicThreadsNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)":getDynamicThreadsNumber")) SWIG_fail;
  {
    try {
      result = (bool)gum::getDynamicThreadsNumber();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Variable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Variable *arg1 = (gum::Variable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Variable",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__Variable, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Variable" "', argument " "1"" of type '" "gum::Variable *""'"); 
  }
  arg1 = reinterpret_cast< gum::Variable * >(argp1);
  {
    try {
      delete arg1;
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variable_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Variable *arg1 = (gum::Variable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::Variable *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Variable_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__Variable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Variable_clone" "', argument " "1"" of type '" "gum::Variable const *""'"); 
  }
  arg1 = reinterpret_cast< gum::Variable * >(argp1);
  {
    try {
      result = (gum::Variable *)((gum::Variable const *)arg1)->clone();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__Variable, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variable___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Variable *arg1 = (gum::Variable *) 0 ;
  gum::Variable *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Variable___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__Variable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Variable___eq__" "', argument " "1"" of type '" "gum::Variable const *""'"); 
  }
  arg1 = reinterpret_cast< gum::Variable * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__Variable,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Variable___eq__" "', argument " "2"" of type '" "gum::Variable const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Variable___eq__" "', argument " "2"" of type '" "gum::Variable const &""'"); 
  }
  arg2 = reinterpret_cast< gum::Variable * >(argp2);
  {
    try {
      result = (bool)((gum::Variable const *)arg1)->operator ==((gum::Variable const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variable___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Variable *arg1 = (gum::Variable *) 0 ;
  gum::Variable *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Variable___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__Variable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Variable___ne__" "', argument " "1"" of type '" "gum::Variable const *""'"); 
  }
  arg1 = reinterpret_cast< gum::Variable * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__Variable,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Variable___ne__" "', argument " "2"" of type '" "gum::Variable const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Variable___ne__" "', argument " "2"" of type '" "gum::Variable const &""'"); 
  }
  arg2 = reinterpret_cast< gum::Variable * >(argp2);
  {
    try {
      result = (bool)((gum::Variable const *)arg1)->operator !=((gum::Variable const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variable_setName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Variable *arg1 = (gum::Variable *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Variable_setName",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__Variable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Variable_setName" "', argument " "1"" of type '" "gum::Variable *""'"); 
  }
  arg1 = reinterpret_cast< gum::Variable * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Variable_setName" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Variable_setName" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->setName((std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variable_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Variable *arg1 = (gum::Variable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Variable_name",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__Variable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Variable_name" "', argument " "1"" of type '" "gum::Variable const *""'"); 
  }
  arg1 = reinterpret_cast< gum::Variable * >(argp1);
  {
    try {
      result = (std::string *) &((gum::Variable const *)arg1)->name();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variable_setDescription(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Variable *arg1 = (gum::Variable *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Variable_setDescription",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__Variable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Variable_setDescription" "', argument " "1"" of type '" "gum::Variable const *""'"); 
  }
  arg1 = reinterpret_cast< gum::Variable * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Variable_setDescription" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Variable_setDescription" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      ((gum::Variable const *)arg1)->setDescription((std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variable_description(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Variable *arg1 = (gum::Variable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Variable_description",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__Variable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Variable_description" "', argument " "1"" of type '" "gum::Variable const *""'"); 
  }
  arg1 = reinterpret_cast< gum::Variable * >(argp1);
  {
    try {
      result = (std::string *) &((gum::Variable const *)arg1)->description();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Variable_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gum__Variable, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_DiscreteVariable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::DiscreteVariable *arg1 = (gum::DiscreteVariable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_DiscreteVariable",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__DiscreteVariable, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DiscreteVariable" "', argument " "1"" of type '" "gum::DiscreteVariable *""'"); 
  }
  arg1 = reinterpret_cast< gum::DiscreteVariable * >(argp1);
  {
    try {
      delete arg1;
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DiscreteVariable_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::DiscreteVariable *arg1 = (gum::DiscreteVariable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::DiscreteVariable *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DiscreteVariable_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__DiscreteVariable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DiscreteVariable_clone" "', argument " "1"" of type '" "gum::DiscreteVariable const *""'"); 
  }
  arg1 = reinterpret_cast< gum::DiscreteVariable * >(argp1);
  {
    try {
      result = (gum::DiscreteVariable *)((gum::DiscreteVariable const *)arg1)->clone();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__DiscreteVariable, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DiscreteVariable_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::DiscreteVariable *arg1 = (gum::DiscreteVariable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DiscreteVariable_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__DiscreteVariable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DiscreteVariable_empty" "', argument " "1"" of type '" "gum::DiscreteVariable const *""'"); 
  }
  arg1 = reinterpret_cast< gum::DiscreteVariable * >(argp1);
  {
    try {
      result = (bool)((gum::DiscreteVariable const *)arg1)->empty();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DiscreteVariable_domainSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::DiscreteVariable *arg1 = (gum::DiscreteVariable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::Size result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DiscreteVariable_domainSize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__DiscreteVariable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DiscreteVariable_domainSize" "', argument " "1"" of type '" "gum::DiscreteVariable const *""'"); 
  }
  arg1 = reinterpret_cast< gum::DiscreteVariable * >(argp1);
  {
    try {
      result = (gum::Size)((gum::DiscreteVariable const *)arg1)->domainSize();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DiscreteVariable_labels(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::DiscreteVariable *arg1 = (gum::DiscreteVariable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string,std::allocator< std::string > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DiscreteVariable_labels",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__DiscreteVariable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DiscreteVariable_labels" "', argument " "1"" of type '" "gum::DiscreteVariable const *""'"); 
  }
  arg1 = reinterpret_cast< gum::DiscreteVariable * >(argp1);
  {
    try {
      result = ((gum::DiscreteVariable const *)arg1)->labels();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< std::string,std::allocator< std::string > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DiscreteVariable_numerical(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::DiscreteVariable *arg1 = (gum::DiscreteVariable *) 0 ;
  gum::Idx arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DiscreteVariable_numerical",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__DiscreteVariable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DiscreteVariable_numerical" "', argument " "1"" of type '" "gum::DiscreteVariable const *""'"); 
  }
  arg1 = reinterpret_cast< gum::DiscreteVariable * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DiscreteVariable_numerical" "', argument " "2"" of type '" "gum::Idx""'");
  } 
  arg2 = static_cast< gum::Idx >(val2);
  {
    try {
      result = (double)((gum::DiscreteVariable const *)arg1)->numerical(arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DiscreteVariable_varType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::DiscreteVariable *arg1 = (gum::DiscreteVariable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::DiscreteVariable::VarType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DiscreteVariable_varType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__DiscreteVariable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DiscreteVariable_varType" "', argument " "1"" of type '" "gum::DiscreteVariable const *""'"); 
  }
  arg1 = reinterpret_cast< gum::DiscreteVariable * >(argp1);
  {
    try {
      result = (gum::DiscreteVariable::VarType)((gum::DiscreteVariable const *)arg1)->varType();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DiscreteVariable___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::DiscreteVariable *arg1 = (gum::DiscreteVariable *) 0 ;
  gum::DiscreteVariable *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DiscreteVariable___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__DiscreteVariable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DiscreteVariable___eq__" "', argument " "1"" of type '" "gum::DiscreteVariable const *""'"); 
  }
  arg1 = reinterpret_cast< gum::DiscreteVariable * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__DiscreteVariable,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DiscreteVariable___eq__" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DiscreteVariable___eq__" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  arg2 = reinterpret_cast< gum::DiscreteVariable * >(argp2);
  {
    try {
      result = (bool)((gum::DiscreteVariable const *)arg1)->operator ==((gum::DiscreteVariable const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DiscreteVariable___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::DiscreteVariable *arg1 = (gum::DiscreteVariable *) 0 ;
  gum::DiscreteVariable *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DiscreteVariable___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__DiscreteVariable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DiscreteVariable___ne__" "', argument " "1"" of type '" "gum::DiscreteVariable const *""'"); 
  }
  arg1 = reinterpret_cast< gum::DiscreteVariable * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__DiscreteVariable,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DiscreteVariable___ne__" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DiscreteVariable___ne__" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  arg2 = reinterpret_cast< gum::DiscreteVariable * >(argp2);
  {
    try {
      result = (bool)((gum::DiscreteVariable const *)arg1)->operator !=((gum::DiscreteVariable const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DiscreteVariable_index(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::DiscreteVariable *arg1 = (gum::DiscreteVariable *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::Idx result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DiscreteVariable_index",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__DiscreteVariable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DiscreteVariable_index" "', argument " "1"" of type '" "gum::DiscreteVariable const *""'"); 
  }
  arg1 = reinterpret_cast< gum::DiscreteVariable * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DiscreteVariable_index" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DiscreteVariable_index" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (gum::Idx)((gum::DiscreteVariable const *)arg1)->index((std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DiscreteVariable_label(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::DiscreteVariable *arg1 = (gum::DiscreteVariable *) 0 ;
  gum::Idx arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DiscreteVariable_label",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__DiscreteVariable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DiscreteVariable_label" "', argument " "1"" of type '" "gum::DiscreteVariable const *""'"); 
  }
  arg1 = reinterpret_cast< gum::DiscreteVariable * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DiscreteVariable_label" "', argument " "2"" of type '" "gum::Idx""'");
  } 
  arg2 = static_cast< gum::Idx >(val2);
  {
    try {
      result = ((gum::DiscreteVariable const *)arg1)->label(arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DiscreteVariable___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::DiscreteVariable *arg1 = (gum::DiscreteVariable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DiscreteVariable___str__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__DiscreteVariable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DiscreteVariable___str__" "', argument " "1"" of type '" "gum::DiscreteVariable const *""'"); 
  }
  arg1 = reinterpret_cast< gum::DiscreteVariable * >(argp1);
  {
    try {
      result = ((gum::DiscreteVariable const *)arg1)->toString();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DiscreteVariable_toStringWithDescription(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::DiscreteVariable *arg1 = (gum::DiscreteVariable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DiscreteVariable_toStringWithDescription",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__DiscreteVariable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DiscreteVariable_toStringWithDescription" "', argument " "1"" of type '" "gum::DiscreteVariable const *""'"); 
  }
  arg1 = reinterpret_cast< gum::DiscreteVariable * >(argp1);
  {
    try {
      result = ((gum::DiscreteVariable const *)arg1)->toStringWithDescription();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DiscreteVariable_domain(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::DiscreteVariable *arg1 = (gum::DiscreteVariable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DiscreteVariable_domain",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__DiscreteVariable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DiscreteVariable_domain" "', argument " "1"" of type '" "gum::DiscreteVariable const *""'"); 
  }
  arg1 = reinterpret_cast< gum::DiscreteVariable * >(argp1);
  {
    try {
      result = ((gum::DiscreteVariable const *)arg1)->domain();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DiscreteVariable_toLabelizedVar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::DiscreteVariable *arg1 = (gum::DiscreteVariable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::LabelizedVariable *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DiscreteVariable_toLabelizedVar",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__DiscreteVariable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DiscreteVariable_toLabelizedVar" "', argument " "1"" of type '" "gum::DiscreteVariable *""'"); 
  }
  arg1 = reinterpret_cast< gum::DiscreteVariable * >(argp1);
  {
    try {
      result = (gum::LabelizedVariable *) &gum_DiscreteVariable_toLabelizedVar(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__LabelizedVariable, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DiscreteVariable_toRangeVar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::DiscreteVariable *arg1 = (gum::DiscreteVariable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::RangeVariable *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DiscreteVariable_toRangeVar",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__DiscreteVariable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DiscreteVariable_toRangeVar" "', argument " "1"" of type '" "gum::DiscreteVariable *""'"); 
  }
  arg1 = reinterpret_cast< gum::DiscreteVariable * >(argp1);
  {
    try {
      result = (gum::RangeVariable *) &gum_DiscreteVariable_toRangeVar(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__RangeVariable, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DiscreteVariable_toDiscretizedVar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::DiscreteVariable *arg1 = (gum::DiscreteVariable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::DiscretizedVariable< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DiscreteVariable_toDiscretizedVar",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__DiscreteVariable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DiscreteVariable_toDiscretizedVar" "', argument " "1"" of type '" "gum::DiscreteVariable *""'"); 
  }
  arg1 = reinterpret_cast< gum::DiscreteVariable * >(argp1);
  {
    try {
      result = (gum::DiscretizedVariable< double > *) &gum_DiscreteVariable_toDiscretizedVar(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__DiscretizedVariableT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DiscreteVariable_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gum__DiscreteVariable, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_LabelizedVariable__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  gum::LabelizedVariable *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_LabelizedVariable",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LabelizedVariable" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LabelizedVariable" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_LabelizedVariable" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LabelizedVariable" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_LabelizedVariable" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (gum::LabelizedVariable *)new gum::LabelizedVariable((std::string const &)*arg1,(std::string const &)*arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__LabelizedVariable, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LabelizedVariable__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::LabelizedVariable *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_LabelizedVariable",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LabelizedVariable" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LabelizedVariable" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_LabelizedVariable" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LabelizedVariable" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (gum::LabelizedVariable *)new gum::LabelizedVariable((std::string const &)*arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__LabelizedVariable, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LabelizedVariable__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  gum::LabelizedVariable *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_LabelizedVariable",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LabelizedVariable" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LabelizedVariable" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (gum::LabelizedVariable *)new gum::LabelizedVariable((std::string const &)*arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__LabelizedVariable, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LabelizedVariable__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::LabelizedVariable *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::LabelizedVariable *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_LabelizedVariable",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_gum__LabelizedVariable,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LabelizedVariable" "', argument " "1"" of type '" "gum::LabelizedVariable const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LabelizedVariable" "', argument " "1"" of type '" "gum::LabelizedVariable const &""'"); 
  }
  arg1 = reinterpret_cast< gum::LabelizedVariable * >(argp1);
  {
    try {
      result = (gum::LabelizedVariable *)new gum::LabelizedVariable((gum::LabelizedVariable const &)*arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__LabelizedVariable, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LabelizedVariable(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_gum__LabelizedVariable, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_LabelizedVariable__SWIG_3(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_LabelizedVariable__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_LabelizedVariable__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_LabelizedVariable__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_LabelizedVariable'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::LabelizedVariable::LabelizedVariable(std::string const &,std::string const &,int const)\n"
    "    gum::LabelizedVariable::LabelizedVariable(std::string const &,std::string const &)\n"
    "    gum::LabelizedVariable::LabelizedVariable(std::string const &)\n"
    "    gum::LabelizedVariable::LabelizedVariable(gum::LabelizedVariable const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_LabelizedVariable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::LabelizedVariable *arg1 = (gum::LabelizedVariable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_LabelizedVariable",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__LabelizedVariable, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LabelizedVariable" "', argument " "1"" of type '" "gum::LabelizedVariable *""'"); 
  }
  arg1 = reinterpret_cast< gum::LabelizedVariable * >(argp1);
  {
    try {
      delete arg1;
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LabelizedVariable_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::LabelizedVariable *arg1 = (gum::LabelizedVariable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::DiscreteVariable *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LabelizedVariable_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__LabelizedVariable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LabelizedVariable_clone" "', argument " "1"" of type '" "gum::LabelizedVariable const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LabelizedVariable * >(argp1);
  {
    try {
      result = (gum::DiscreteVariable *)((gum::LabelizedVariable const *)arg1)->clone();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__DiscreteVariable, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LabelizedVariable_index(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::LabelizedVariable *arg1 = (gum::LabelizedVariable *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::Idx result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LabelizedVariable_index",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__LabelizedVariable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LabelizedVariable_index" "', argument " "1"" of type '" "gum::LabelizedVariable const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LabelizedVariable * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LabelizedVariable_index" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LabelizedVariable_index" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (gum::Idx)((gum::LabelizedVariable const *)arg1)->index((std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LabelizedVariable_isLabel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::LabelizedVariable *arg1 = (gum::LabelizedVariable *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LabelizedVariable_isLabel",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__LabelizedVariable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LabelizedVariable_isLabel" "', argument " "1"" of type '" "gum::LabelizedVariable const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LabelizedVariable * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LabelizedVariable_isLabel" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LabelizedVariable_isLabel" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)((gum::LabelizedVariable const *)arg1)->isLabel((std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LabelizedVariable_addLabel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::LabelizedVariable *arg1 = (gum::LabelizedVariable *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::LabelizedVariable *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LabelizedVariable_addLabel",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__LabelizedVariable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LabelizedVariable_addLabel" "', argument " "1"" of type '" "gum::LabelizedVariable *""'"); 
  }
  arg1 = reinterpret_cast< gum::LabelizedVariable * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "LabelizedVariable_addLabel" "', argument " "2"" of type '" "std::string const""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (gum::LabelizedVariable *) &(arg1)->addLabel(arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__LabelizedVariable, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LabelizedVariable_changeLabel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::LabelizedVariable *arg1 = (gum::LabelizedVariable *) 0 ;
  gum::Idx arg2 ;
  std::string arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:LabelizedVariable_changeLabel",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__LabelizedVariable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LabelizedVariable_changeLabel" "', argument " "1"" of type '" "gum::LabelizedVariable const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LabelizedVariable * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LabelizedVariable_changeLabel" "', argument " "2"" of type '" "gum::Idx""'");
  } 
  arg2 = static_cast< gum::Idx >(val2);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "LabelizedVariable_changeLabel" "', argument " "3"" of type '" "std::string const""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      ((gum::LabelizedVariable const *)arg1)->changeLabel(arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LabelizedVariable_eraseLabels(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::LabelizedVariable *arg1 = (gum::LabelizedVariable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LabelizedVariable_eraseLabels",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__LabelizedVariable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LabelizedVariable_eraseLabels" "', argument " "1"" of type '" "gum::LabelizedVariable *""'"); 
  }
  arg1 = reinterpret_cast< gum::LabelizedVariable * >(argp1);
  {
    try {
      (arg1)->eraseLabels();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LabelizedVariable_label(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::LabelizedVariable *arg1 = (gum::LabelizedVariable *) 0 ;
  gum::Idx arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LabelizedVariable_label",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__LabelizedVariable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LabelizedVariable_label" "', argument " "1"" of type '" "gum::LabelizedVariable const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LabelizedVariable * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LabelizedVariable_label" "', argument " "2"" of type '" "gum::Idx""'");
  } 
  arg2 = static_cast< gum::Idx >(val2);
  {
    try {
      result = ((gum::LabelizedVariable const *)arg1)->label(arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LabelizedVariable_numerical(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::LabelizedVariable *arg1 = (gum::LabelizedVariable *) 0 ;
  gum::Idx arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LabelizedVariable_numerical",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__LabelizedVariable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LabelizedVariable_numerical" "', argument " "1"" of type '" "gum::LabelizedVariable const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LabelizedVariable * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LabelizedVariable_numerical" "', argument " "2"" of type '" "gum::Idx""'");
  } 
  arg2 = static_cast< gum::Idx >(val2);
  {
    try {
      result = (double)((gum::LabelizedVariable const *)arg1)->numerical(arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LabelizedVariable_domainSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::LabelizedVariable *arg1 = (gum::LabelizedVariable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::Size result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LabelizedVariable_domainSize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__LabelizedVariable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LabelizedVariable_domainSize" "', argument " "1"" of type '" "gum::LabelizedVariable const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LabelizedVariable * >(argp1);
  {
    try {
      result = (gum::Size)((gum::LabelizedVariable const *)arg1)->domainSize();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LabelizedVariable_varType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::LabelizedVariable *arg1 = (gum::LabelizedVariable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::DiscreteVariable::VarType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LabelizedVariable_varType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__LabelizedVariable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LabelizedVariable_varType" "', argument " "1"" of type '" "gum::LabelizedVariable const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LabelizedVariable * >(argp1);
  {
    try {
      result = (gum::DiscreteVariable::VarType)((gum::LabelizedVariable const *)arg1)->varType();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LabelizedVariable_domain(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::LabelizedVariable *arg1 = (gum::LabelizedVariable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LabelizedVariable_domain",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__LabelizedVariable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LabelizedVariable_domain" "', argument " "1"" of type '" "gum::LabelizedVariable const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LabelizedVariable * >(argp1);
  {
    try {
      result = ((gum::LabelizedVariable const *)arg1)->domain();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LabelizedVariable_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gum__LabelizedVariable, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_RangeVariable__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  long arg3 ;
  long arg4 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  long val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  gum::RangeVariable *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_RangeVariable",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_RangeVariable" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RangeVariable" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_RangeVariable" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RangeVariable" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_RangeVariable" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_RangeVariable" "', argument " "4"" of type '" "long""'");
  } 
  arg4 = static_cast< long >(val4);
  {
    try {
      result = (gum::RangeVariable *)new gum::RangeVariable((std::string const &)*arg1,(std::string const &)*arg2,arg3,arg4);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__RangeVariable, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RangeVariable__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  long arg3 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  gum::RangeVariable *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_RangeVariable",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_RangeVariable" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RangeVariable" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_RangeVariable" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RangeVariable" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_RangeVariable" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      result = (gum::RangeVariable *)new gum::RangeVariable((std::string const &)*arg1,(std::string const &)*arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__RangeVariable, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RangeVariable__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::RangeVariable *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_RangeVariable",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_RangeVariable" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RangeVariable" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_RangeVariable" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RangeVariable" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (gum::RangeVariable *)new gum::RangeVariable((std::string const &)*arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__RangeVariable, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RangeVariable__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::RangeVariable *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::RangeVariable *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_RangeVariable",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_gum__RangeVariable,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_RangeVariable" "', argument " "1"" of type '" "gum::RangeVariable const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RangeVariable" "', argument " "1"" of type '" "gum::RangeVariable const &""'"); 
  }
  arg1 = reinterpret_cast< gum::RangeVariable * >(argp1);
  {
    try {
      result = (gum::RangeVariable *)new gum::RangeVariable((gum::RangeVariable const &)*arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__RangeVariable, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RangeVariable(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_gum__RangeVariable, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_RangeVariable__SWIG_3(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_RangeVariable__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_RangeVariable__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_RangeVariable__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_RangeVariable'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::RangeVariable::RangeVariable(std::string const &,std::string const &,long,long)\n"
    "    gum::RangeVariable::RangeVariable(std::string const &,std::string const &,long)\n"
    "    gum::RangeVariable::RangeVariable(std::string const &,std::string const &)\n"
    "    gum::RangeVariable::RangeVariable(gum::RangeVariable const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_RangeVariable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::RangeVariable *arg1 = (gum::RangeVariable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_RangeVariable",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__RangeVariable, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RangeVariable" "', argument " "1"" of type '" "gum::RangeVariable *""'"); 
  }
  arg1 = reinterpret_cast< gum::RangeVariable * >(argp1);
  {
    try {
      delete arg1;
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RangeVariable_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::RangeVariable *arg1 = (gum::RangeVariable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::DiscreteVariable *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RangeVariable_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__RangeVariable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RangeVariable_clone" "', argument " "1"" of type '" "gum::RangeVariable const *""'"); 
  }
  arg1 = reinterpret_cast< gum::RangeVariable * >(argp1);
  {
    try {
      result = (gum::DiscreteVariable *)((gum::RangeVariable const *)arg1)->clone();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__DiscreteVariable, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RangeVariable_domainSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::RangeVariable *arg1 = (gum::RangeVariable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::Size result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RangeVariable_domainSize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__RangeVariable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RangeVariable_domainSize" "', argument " "1"" of type '" "gum::RangeVariable const *""'"); 
  }
  arg1 = reinterpret_cast< gum::RangeVariable * >(argp1);
  {
    try {
      result = (gum::Size)((gum::RangeVariable const *)arg1)->domainSize();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RangeVariable_varType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::RangeVariable *arg1 = (gum::RangeVariable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::DiscreteVariable::VarType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RangeVariable_varType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__RangeVariable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RangeVariable_varType" "', argument " "1"" of type '" "gum::RangeVariable const *""'"); 
  }
  arg1 = reinterpret_cast< gum::RangeVariable * >(argp1);
  {
    try {
      result = (gum::DiscreteVariable::VarType)((gum::RangeVariable const *)arg1)->varType();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RangeVariable_label(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::RangeVariable *arg1 = (gum::RangeVariable *) 0 ;
  gum::Idx arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RangeVariable_label",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__RangeVariable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RangeVariable_label" "', argument " "1"" of type '" "gum::RangeVariable const *""'"); 
  }
  arg1 = reinterpret_cast< gum::RangeVariable * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RangeVariable_label" "', argument " "2"" of type '" "gum::Idx""'");
  } 
  arg2 = static_cast< gum::Idx >(val2);
  {
    try {
      result = ((gum::RangeVariable const *)arg1)->label(arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RangeVariable_numerical(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::RangeVariable *arg1 = (gum::RangeVariable *) 0 ;
  gum::Idx arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RangeVariable_numerical",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__RangeVariable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RangeVariable_numerical" "', argument " "1"" of type '" "gum::RangeVariable const *""'"); 
  }
  arg1 = reinterpret_cast< gum::RangeVariable * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RangeVariable_numerical" "', argument " "2"" of type '" "gum::Idx""'");
  } 
  arg2 = static_cast< gum::Idx >(val2);
  {
    try {
      result = (double)((gum::RangeVariable const *)arg1)->numerical(arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RangeVariable_minVal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::RangeVariable *arg1 = (gum::RangeVariable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RangeVariable_minVal",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__RangeVariable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RangeVariable_minVal" "', argument " "1"" of type '" "gum::RangeVariable const *""'"); 
  }
  arg1 = reinterpret_cast< gum::RangeVariable * >(argp1);
  {
    try {
      result = (long)((gum::RangeVariable const *)arg1)->minVal();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RangeVariable_setMinVal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::RangeVariable *arg1 = (gum::RangeVariable *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RangeVariable_setMinVal",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__RangeVariable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RangeVariable_setMinVal" "', argument " "1"" of type '" "gum::RangeVariable *""'"); 
  }
  arg1 = reinterpret_cast< gum::RangeVariable * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RangeVariable_setMinVal" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (arg1)->setMinVal(arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RangeVariable_maxVal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::RangeVariable *arg1 = (gum::RangeVariable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RangeVariable_maxVal",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__RangeVariable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RangeVariable_maxVal" "', argument " "1"" of type '" "gum::RangeVariable const *""'"); 
  }
  arg1 = reinterpret_cast< gum::RangeVariable * >(argp1);
  {
    try {
      result = (long)((gum::RangeVariable const *)arg1)->maxVal();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RangeVariable_setMaxVal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::RangeVariable *arg1 = (gum::RangeVariable *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RangeVariable_setMaxVal",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__RangeVariable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RangeVariable_setMaxVal" "', argument " "1"" of type '" "gum::RangeVariable *""'"); 
  }
  arg1 = reinterpret_cast< gum::RangeVariable * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RangeVariable_setMaxVal" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (arg1)->setMaxVal(arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RangeVariable_belongs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::RangeVariable *arg1 = (gum::RangeVariable *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RangeVariable_belongs",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__RangeVariable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RangeVariable_belongs" "', argument " "1"" of type '" "gum::RangeVariable const *""'"); 
  }
  arg1 = reinterpret_cast< gum::RangeVariable * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RangeVariable_belongs" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      result = (bool)((gum::RangeVariable const *)arg1)->belongs(arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RangeVariable_index(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::RangeVariable *arg1 = (gum::RangeVariable *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::Idx result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RangeVariable_index",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__RangeVariable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RangeVariable_index" "', argument " "1"" of type '" "gum::RangeVariable const *""'"); 
  }
  arg1 = reinterpret_cast< gum::RangeVariable * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RangeVariable_index" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RangeVariable_index" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (gum::Idx)((gum::RangeVariable const *)arg1)->index((std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RangeVariable_domain(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::RangeVariable *arg1 = (gum::RangeVariable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RangeVariable_domain",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__RangeVariable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RangeVariable_domain" "', argument " "1"" of type '" "gum::RangeVariable const *""'"); 
  }
  arg1 = reinterpret_cast< gum::RangeVariable * >(argp1);
  {
    try {
      result = ((gum::RangeVariable const *)arg1)->domain();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *RangeVariable_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gum__RangeVariable, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Edge__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::NodeId arg1 ;
  gum::NodeId arg2 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::Edge *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Edge",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Edge" "', argument " "1"" of type '" "gum::NodeId""'");
  } 
  arg1 = static_cast< gum::NodeId >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Edge" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (gum::Edge *)new gum::Edge(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__Edge, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Edge__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Edge *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::Edge *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Edge",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_gum__Edge,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Edge" "', argument " "1"" of type '" "gum::Edge const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Edge" "', argument " "1"" of type '" "gum::Edge const &""'"); 
  }
  arg1 = reinterpret_cast< gum::Edge * >(argp1);
  {
    try {
      result = (gum::Edge *)new gum::Edge((gum::Edge const &)*arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__Edge, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Edge(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_gum__Edge, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Edge__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Edge__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Edge'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::Edge::Edge(gum::NodeId,gum::NodeId)\n"
    "    gum::Edge::Edge(gum::Edge const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_Edge(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Edge *arg1 = (gum::Edge *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Edge",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__Edge, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Edge" "', argument " "1"" of type '" "gum::Edge *""'"); 
  }
  arg1 = reinterpret_cast< gum::Edge * >(argp1);
  {
    try {
      delete arg1;
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Edge_other(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Edge *arg1 = (gum::Edge *) 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::NodeId result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Edge_other",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__Edge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Edge_other" "', argument " "1"" of type '" "gum::Edge const *""'"); 
  }
  arg1 = reinterpret_cast< gum::Edge * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Edge_other" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (gum::NodeId)((gum::Edge const *)arg1)->other(arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Edge_first(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Edge *arg1 = (gum::Edge *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::NodeId result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Edge_first",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__Edge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Edge_first" "', argument " "1"" of type '" "gum::Edge const *""'"); 
  }
  arg1 = reinterpret_cast< gum::Edge * >(argp1);
  {
    try {
      result = (gum::NodeId)((gum::Edge const *)arg1)->first();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Edge_second(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Edge *arg1 = (gum::Edge *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::NodeId result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Edge_second",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__Edge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Edge_second" "', argument " "1"" of type '" "gum::Edge const *""'"); 
  }
  arg1 = reinterpret_cast< gum::Edge * >(argp1);
  {
    try {
      result = (gum::NodeId)((gum::Edge const *)arg1)->second();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Edge___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Edge *arg1 = (gum::Edge *) 0 ;
  gum::Edge *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Edge___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__Edge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Edge___eq__" "', argument " "1"" of type '" "gum::Edge const *""'"); 
  }
  arg1 = reinterpret_cast< gum::Edge * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__Edge,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Edge___eq__" "', argument " "2"" of type '" "gum::Edge const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Edge___eq__" "', argument " "2"" of type '" "gum::Edge const &""'"); 
  }
  arg2 = reinterpret_cast< gum::Edge * >(argp2);
  {
    try {
      result = (bool)((gum::Edge const *)arg1)->operator ==((gum::Edge const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Edge___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Edge *arg1 = (gum::Edge *) 0 ;
  gum::Edge *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Edge___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__Edge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Edge___ne__" "', argument " "1"" of type '" "gum::Edge const *""'"); 
  }
  arg1 = reinterpret_cast< gum::Edge * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__Edge,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Edge___ne__" "', argument " "2"" of type '" "gum::Edge const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Edge___ne__" "', argument " "2"" of type '" "gum::Edge const &""'"); 
  }
  arg2 = reinterpret_cast< gum::Edge * >(argp2);
  {
    try {
      result = (bool)((gum::Edge const *)arg1)->operator !=((gum::Edge const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Edge_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gum__Edge, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Arc__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::NodeId arg1 ;
  gum::NodeId arg2 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::Arc *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Arc",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Arc" "', argument " "1"" of type '" "gum::NodeId""'");
  } 
  arg1 = static_cast< gum::NodeId >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Arc" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (gum::Arc *)new gum::Arc(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__Arc, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Arc__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Arc *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::Arc *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Arc",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_gum__Arc,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Arc" "', argument " "1"" of type '" "gum::Arc const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Arc" "', argument " "1"" of type '" "gum::Arc const &""'"); 
  }
  arg1 = reinterpret_cast< gum::Arc * >(argp1);
  {
    try {
      result = (gum::Arc *)new gum::Arc((gum::Arc const &)*arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__Arc, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Arc(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_gum__Arc, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Arc__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Arc__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Arc'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::Arc::Arc(gum::NodeId,gum::NodeId)\n"
    "    gum::Arc::Arc(gum::Arc const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_Arc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Arc *arg1 = (gum::Arc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Arc",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__Arc, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Arc" "', argument " "1"" of type '" "gum::Arc *""'"); 
  }
  arg1 = reinterpret_cast< gum::Arc * >(argp1);
  {
    try {
      delete arg1;
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Arc_tail(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Arc *arg1 = (gum::Arc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::NodeId result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Arc_tail",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__Arc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Arc_tail" "', argument " "1"" of type '" "gum::Arc const *""'"); 
  }
  arg1 = reinterpret_cast< gum::Arc * >(argp1);
  {
    try {
      result = (gum::NodeId)((gum::Arc const *)arg1)->tail();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Arc_head(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Arc *arg1 = (gum::Arc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::NodeId result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Arc_head",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__Arc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Arc_head" "', argument " "1"" of type '" "gum::Arc const *""'"); 
  }
  arg1 = reinterpret_cast< gum::Arc * >(argp1);
  {
    try {
      result = (gum::NodeId)((gum::Arc const *)arg1)->head();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Arc_other(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Arc *arg1 = (gum::Arc *) 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::NodeId result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Arc_other",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__Arc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Arc_other" "', argument " "1"" of type '" "gum::Arc const *""'"); 
  }
  arg1 = reinterpret_cast< gum::Arc * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Arc_other" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (gum::NodeId)((gum::Arc const *)arg1)->other(arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Arc_first(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Arc *arg1 = (gum::Arc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::NodeId result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Arc_first",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__Arc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Arc_first" "', argument " "1"" of type '" "gum::Arc const *""'"); 
  }
  arg1 = reinterpret_cast< gum::Arc * >(argp1);
  {
    try {
      result = (gum::NodeId)((gum::Arc const *)arg1)->first();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Arc_second(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Arc *arg1 = (gum::Arc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::NodeId result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Arc_second",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__Arc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Arc_second" "', argument " "1"" of type '" "gum::Arc const *""'"); 
  }
  arg1 = reinterpret_cast< gum::Arc * >(argp1);
  {
    try {
      result = (gum::NodeId)((gum::Arc const *)arg1)->second();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Arc___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Arc *arg1 = (gum::Arc *) 0 ;
  gum::Arc *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Arc___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__Arc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Arc___eq__" "', argument " "1"" of type '" "gum::Arc const *""'"); 
  }
  arg1 = reinterpret_cast< gum::Arc * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__Arc,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Arc___eq__" "', argument " "2"" of type '" "gum::Arc const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Arc___eq__" "', argument " "2"" of type '" "gum::Arc const &""'"); 
  }
  arg2 = reinterpret_cast< gum::Arc * >(argp2);
  {
    try {
      result = (bool)((gum::Arc const *)arg1)->operator ==((gum::Arc const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Arc___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Arc *arg1 = (gum::Arc *) 0 ;
  gum::Arc *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Arc___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__Arc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Arc___ne__" "', argument " "1"" of type '" "gum::Arc const *""'"); 
  }
  arg1 = reinterpret_cast< gum::Arc * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__Arc,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Arc___ne__" "', argument " "2"" of type '" "gum::Arc const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Arc___ne__" "', argument " "2"" of type '" "gum::Arc const &""'"); 
  }
  arg2 = reinterpret_cast< gum::Arc * >(argp2);
  {
    try {
      result = (bool)((gum::Arc const *)arg1)->operator !=((gum::Arc const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Arc_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gum__Arc, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_DiGraph__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Size arg1 ;
  bool arg2 ;
  gum::Size arg3 ;
  bool arg4 ;
  unsigned long val1 ;
  int ecode1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  gum::DiGraph *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_DiGraph",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DiGraph" "', argument " "1"" of type '" "gum::Size""'");
  } 
  arg1 = static_cast< gum::Size >(val1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_DiGraph" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_DiGraph" "', argument " "3"" of type '" "gum::Size""'");
  } 
  arg3 = static_cast< gum::Size >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_DiGraph" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  {
    try {
      result = (gum::DiGraph *)new gum::DiGraph(arg1,arg2,arg3,arg4);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__DiGraph, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DiGraph__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Size arg1 ;
  bool arg2 ;
  gum::Size arg3 ;
  unsigned long val1 ;
  int ecode1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  gum::DiGraph *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_DiGraph",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DiGraph" "', argument " "1"" of type '" "gum::Size""'");
  } 
  arg1 = static_cast< gum::Size >(val1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_DiGraph" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_DiGraph" "', argument " "3"" of type '" "gum::Size""'");
  } 
  arg3 = static_cast< gum::Size >(val3);
  {
    try {
      result = (gum::DiGraph *)new gum::DiGraph(arg1,arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__DiGraph, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DiGraph__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Size arg1 ;
  bool arg2 ;
  unsigned long val1 ;
  int ecode1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::DiGraph *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_DiGraph",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DiGraph" "', argument " "1"" of type '" "gum::Size""'");
  } 
  arg1 = static_cast< gum::Size >(val1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_DiGraph" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      result = (gum::DiGraph *)new gum::DiGraph(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__DiGraph, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DiGraph__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Size arg1 ;
  unsigned long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::DiGraph *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DiGraph",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DiGraph" "', argument " "1"" of type '" "gum::Size""'");
  } 
  arg1 = static_cast< gum::Size >(val1);
  {
    try {
      result = (gum::DiGraph *)new gum::DiGraph(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__DiGraph, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DiGraph__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::DiGraph *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_DiGraph")) SWIG_fail;
  {
    try {
      result = (gum::DiGraph *)new gum::DiGraph();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__DiGraph, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DiGraph__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::DiGraph *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::DiGraph *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DiGraph",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_gum__DiGraph,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DiGraph" "', argument " "1"" of type '" "gum::DiGraph const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DiGraph" "', argument " "1"" of type '" "gum::DiGraph const &""'"); 
  }
  arg1 = reinterpret_cast< gum::DiGraph * >(argp1);
  {
    try {
      result = (gum::DiGraph *)new gum::DiGraph((gum::DiGraph const &)*arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__DiGraph, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DiGraph(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_DiGraph__SWIG_4(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_gum__DiGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_DiGraph__SWIG_5(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_long(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_DiGraph__SWIG_3(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_long(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_DiGraph__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_long(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_DiGraph__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_long(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_DiGraph__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_DiGraph'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::DiGraph::DiGraph(gum::Size,bool,gum::Size,bool)\n"
    "    gum::DiGraph::DiGraph(gum::Size,bool,gum::Size)\n"
    "    gum::DiGraph::DiGraph(gum::Size,bool)\n"
    "    gum::DiGraph::DiGraph(gum::Size)\n"
    "    gum::DiGraph::DiGraph()\n"
    "    gum::DiGraph::DiGraph(gum::DiGraph const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_DiGraph(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::DiGraph *arg1 = (gum::DiGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_DiGraph",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__DiGraph, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DiGraph" "', argument " "1"" of type '" "gum::DiGraph *""'"); 
  }
  arg1 = reinterpret_cast< gum::DiGraph * >(argp1);
  {
    try {
      delete arg1;
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DiGraph___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::DiGraph *arg1 = (gum::DiGraph *) 0 ;
  gum::DiGraph *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DiGraph___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__DiGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DiGraph___eq__" "', argument " "1"" of type '" "gum::DiGraph const *""'"); 
  }
  arg1 = reinterpret_cast< gum::DiGraph * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__DiGraph,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DiGraph___eq__" "', argument " "2"" of type '" "gum::DiGraph const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DiGraph___eq__" "', argument " "2"" of type '" "gum::DiGraph const &""'"); 
  }
  arg2 = reinterpret_cast< gum::DiGraph * >(argp2);
  {
    try {
      result = (bool)((gum::DiGraph const *)arg1)->operator ==((gum::DiGraph const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DiGraph___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::DiGraph *arg1 = (gum::DiGraph *) 0 ;
  gum::DiGraph *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DiGraph___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__DiGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DiGraph___ne__" "', argument " "1"" of type '" "gum::DiGraph const *""'"); 
  }
  arg1 = reinterpret_cast< gum::DiGraph * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__DiGraph,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DiGraph___ne__" "', argument " "2"" of type '" "gum::DiGraph const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DiGraph___ne__" "', argument " "2"" of type '" "gum::DiGraph const &""'"); 
  }
  arg2 = reinterpret_cast< gum::DiGraph * >(argp2);
  {
    try {
      result = (bool)((gum::DiGraph const *)arg1)->operator !=((gum::DiGraph const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DiGraph_addArc__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::DiGraph *arg1 = (gum::DiGraph *) 0 ;
  gum::NodeId arg2 ;
  gum::NodeId arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DiGraph_addArc",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__DiGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DiGraph_addArc" "', argument " "1"" of type '" "gum::DiGraph *""'"); 
  }
  arg1 = reinterpret_cast< gum::DiGraph * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DiGraph_addArc" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DiGraph_addArc" "', argument " "3"" of type '" "gum::NodeId""'");
  } 
  arg3 = static_cast< gum::NodeId >(val3);
  {
    try {
      (arg1)->addArc(arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DiGraph_addArc(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__DiGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_DiGraph_addArc__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DiGraph_addArc'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::DiGraph::addArc(gum::NodeId const,gum::NodeId const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DiGraph_eraseNode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::DiGraph *arg1 = (gum::DiGraph *) 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DiGraph_eraseNode",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__DiGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DiGraph_eraseNode" "', argument " "1"" of type '" "gum::DiGraph *""'"); 
  }
  arg1 = reinterpret_cast< gum::DiGraph * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DiGraph_eraseNode" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      (arg1)->eraseNode(arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DiGraph_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::DiGraph *arg1 = (gum::DiGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DiGraph_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__DiGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DiGraph_clear" "', argument " "1"" of type '" "gum::DiGraph *""'"); 
  }
  arg1 = reinterpret_cast< gum::DiGraph * >(argp1);
  {
    try {
      (arg1)->clear();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DiGraph___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::DiGraph *arg1 = (gum::DiGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DiGraph___str__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__DiGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DiGraph___str__" "', argument " "1"" of type '" "gum::DiGraph const *""'"); 
  }
  arg1 = reinterpret_cast< gum::DiGraph * >(argp1);
  {
    try {
      result = ((gum::DiGraph const *)arg1)->toString();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DiGraph_toDot__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::DiGraph *arg1 = (gum::DiGraph *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DiGraph_toDot",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__DiGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DiGraph_toDot" "', argument " "1"" of type '" "gum::DiGraph const *""'"); 
  }
  arg1 = reinterpret_cast< gum::DiGraph * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DiGraph_toDot" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DiGraph_toDot" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = ((gum::DiGraph const *)arg1)->toDot((std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DiGraph_toDot__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::DiGraph *arg1 = (gum::DiGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DiGraph_toDot",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__DiGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DiGraph_toDot" "', argument " "1"" of type '" "gum::DiGraph const *""'"); 
  }
  arg1 = reinterpret_cast< gum::DiGraph * >(argp1);
  {
    try {
      result = ((gum::DiGraph const *)arg1)->toDot();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DiGraph_toDot(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__DiGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_DiGraph_toDot__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__DiGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DiGraph_toDot__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DiGraph_toDot'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::DiGraph::toDot(std::string const &) const\n"
    "    gum::DiGraph::toDot() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DiGraph_topologicalOrder__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::DiGraph *arg1 = (gum::DiGraph *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::Sequence< gum::NodeId > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DiGraph_topologicalOrder",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__DiGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DiGraph_topologicalOrder" "', argument " "1"" of type '" "gum::DiGraph const *""'"); 
  }
  arg1 = reinterpret_cast< gum::DiGraph * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DiGraph_topologicalOrder" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      result = (gum::Sequence< gum::NodeId > *) &((gum::DiGraph const *)arg1)->topologicalOrder(arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  {
    PyObject *q=PyList_New(0);
    for(auto i : *result) {
      PyList_Append(q,PyInt_FromLong(i));
    }
    resultobj=q;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DiGraph_topologicalOrder__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::DiGraph *arg1 = (gum::DiGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::Sequence< gum::NodeId > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DiGraph_topologicalOrder",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__DiGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DiGraph_topologicalOrder" "', argument " "1"" of type '" "gum::DiGraph const *""'"); 
  }
  arg1 = reinterpret_cast< gum::DiGraph * >(argp1);
  {
    try {
      result = (gum::Sequence< gum::NodeId > *) &((gum::DiGraph const *)arg1)->topologicalOrder();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  {
    PyObject *q=PyList_New(0);
    for(auto i : *result) {
      PyList_Append(q,PyInt_FromLong(i));
    }
    resultobj=q;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DiGraph_topologicalOrder(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__DiGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_DiGraph_topologicalOrder__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__DiGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_DiGraph_topologicalOrder__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DiGraph_topologicalOrder'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::DiGraph::topologicalOrder(bool) const\n"
    "    gum::DiGraph::topologicalOrder() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DiGraph_ids(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::DiGraph *arg1 = (gum::DiGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DiGraph_ids",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__DiGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DiGraph_ids" "', argument " "1"" of type '" "gum::DiGraph *""'"); 
  }
  arg1 = reinterpret_cast< gum::DiGraph * >(argp1);
  {
    try {
      result = (PyObject *)gum_DiGraph_ids(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DiGraph_arcs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::DiGraph *arg1 = (gum::DiGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DiGraph_arcs",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__DiGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DiGraph_arcs" "', argument " "1"" of type '" "gum::DiGraph *""'"); 
  }
  arg1 = reinterpret_cast< gum::DiGraph * >(argp1);
  {
    try {
      result = (PyObject *)gum_DiGraph_arcs(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DiGraph_parents(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::DiGraph *arg1 = (gum::DiGraph *) 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DiGraph_parents",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__DiGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DiGraph_parents" "', argument " "1"" of type '" "gum::DiGraph *""'"); 
  }
  arg1 = reinterpret_cast< gum::DiGraph * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DiGraph_parents" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (PyObject *)gum_DiGraph_parents(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DiGraph_children(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::DiGraph *arg1 = (gum::DiGraph *) 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DiGraph_children",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__DiGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DiGraph_children" "', argument " "1"" of type '" "gum::DiGraph *""'"); 
  }
  arg1 = reinterpret_cast< gum::DiGraph * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DiGraph_children" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (PyObject *)gum_DiGraph_children(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DiGraph_addNode_SWIG_0_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::DiGraph *arg1 = (gum::DiGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::NodeId result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DiGraph_addNode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__DiGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DiGraph_addNode" "', argument " "1"" of type '" "gum::DiGraph *""'"); 
  }
  arg1 = reinterpret_cast< gum::DiGraph * >(argp1);
  {
    try {
      result = (gum::NodeId)gum_DiGraph_addNode_SWIG_0_0(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DiGraph_addNode_SWIG_0_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::DiGraph *arg1 = (gum::DiGraph *) 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DiGraph_addNode",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__DiGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DiGraph_addNode" "', argument " "1"" of type '" "gum::DiGraph *""'"); 
  }
  arg1 = reinterpret_cast< gum::DiGraph * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DiGraph_addNode" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      gum_DiGraph_addNode_SWIG_0_1(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DiGraph_addNode(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__DiGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_DiGraph_addNode_SWIG_0_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__DiGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_DiGraph_addNode_SWIG_0_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DiGraph_addNode'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    addNode()\n"
    "    addNode(gum::NodeId const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DiGraph_existsNode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::DiGraph *arg1 = (gum::DiGraph *) 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DiGraph_existsNode",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__DiGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DiGraph_existsNode" "', argument " "1"" of type '" "gum::DiGraph const *""'"); 
  }
  arg1 = reinterpret_cast< gum::DiGraph * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DiGraph_existsNode" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (bool)gum_DiGraph_existsNode((gum::DiGraph const *)arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DiGraph_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::DiGraph *arg1 = (gum::DiGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::Size result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DiGraph_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__DiGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DiGraph_size" "', argument " "1"" of type '" "gum::DiGraph const *""'"); 
  }
  arg1 = reinterpret_cast< gum::DiGraph * >(argp1);
  {
    try {
      result = (gum::Size)gum_DiGraph_size((gum::DiGraph const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DiGraph_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::DiGraph *arg1 = (gum::DiGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DiGraph_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__DiGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DiGraph_empty" "', argument " "1"" of type '" "gum::DiGraph const *""'"); 
  }
  arg1 = reinterpret_cast< gum::DiGraph * >(argp1);
  {
    try {
      result = (bool)gum_DiGraph_empty((gum::DiGraph const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DiGraph_eraseArc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::DiGraph *arg1 = (gum::DiGraph *) 0 ;
  gum::Arc *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DiGraph_eraseArc",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__DiGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DiGraph_eraseArc" "', argument " "1"" of type '" "gum::DiGraph *""'"); 
  }
  arg1 = reinterpret_cast< gum::DiGraph * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__Arc,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DiGraph_eraseArc" "', argument " "2"" of type '" "gum::Arc const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DiGraph_eraseArc" "', argument " "2"" of type '" "gum::Arc const &""'"); 
  }
  arg2 = reinterpret_cast< gum::Arc * >(argp2);
  {
    try {
      gum_DiGraph_eraseArc(arg1,(gum::Arc const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DiGraph_existsArc_SWIG_0_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::DiGraph *arg1 = (gum::DiGraph *) 0 ;
  gum::Arc *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DiGraph_existsArc",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__DiGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DiGraph_existsArc" "', argument " "1"" of type '" "gum::DiGraph const *""'"); 
  }
  arg1 = reinterpret_cast< gum::DiGraph * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__Arc,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DiGraph_existsArc" "', argument " "2"" of type '" "gum::Arc const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DiGraph_existsArc" "', argument " "2"" of type '" "gum::Arc const &""'"); 
  }
  arg2 = reinterpret_cast< gum::Arc * >(argp2);
  {
    try {
      result = (bool)gum_DiGraph_existsArc_SWIG_0_0((gum::DiGraph const *)arg1,(gum::Arc const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DiGraph_existsArc_SWIG_0_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::DiGraph *arg1 = (gum::DiGraph *) 0 ;
  gum::NodeId arg2 ;
  gum::NodeId arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DiGraph_existsArc",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__DiGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DiGraph_existsArc" "', argument " "1"" of type '" "gum::DiGraph const *""'"); 
  }
  arg1 = reinterpret_cast< gum::DiGraph * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DiGraph_existsArc" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DiGraph_existsArc" "', argument " "3"" of type '" "gum::NodeId""'");
  } 
  arg3 = static_cast< gum::NodeId >(val3);
  {
    try {
      result = (bool)gum_DiGraph_existsArc_SWIG_0_1((gum::DiGraph const *)arg1,arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DiGraph_existsArc(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__DiGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_gum__Arc, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DiGraph_existsArc_SWIG_0_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__DiGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_DiGraph_existsArc_SWIG_0_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DiGraph_existsArc'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    existsArc(gum::Arc const &) const\n"
    "    existsArc(gum::NodeId const,gum::NodeId const) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DiGraph_eraseParents(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::DiGraph *arg1 = (gum::DiGraph *) 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DiGraph_eraseParents",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__DiGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DiGraph_eraseParents" "', argument " "1"" of type '" "gum::DiGraph *""'"); 
  }
  arg1 = reinterpret_cast< gum::DiGraph * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DiGraph_eraseParents" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      gum_DiGraph_eraseParents(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DiGraph_eraseChildren(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::DiGraph *arg1 = (gum::DiGraph *) 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DiGraph_eraseChildren",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__DiGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DiGraph_eraseChildren" "', argument " "1"" of type '" "gum::DiGraph *""'"); 
  }
  arg1 = reinterpret_cast< gum::DiGraph * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DiGraph_eraseChildren" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      gum_DiGraph_eraseChildren(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DiGraph_sizeArcs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::DiGraph *arg1 = (gum::DiGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::Size result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DiGraph_sizeArcs",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__DiGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DiGraph_sizeArcs" "', argument " "1"" of type '" "gum::DiGraph const *""'"); 
  }
  arg1 = reinterpret_cast< gum::DiGraph * >(argp1);
  {
    try {
      result = (gum::Size)gum_DiGraph_sizeArcs((gum::DiGraph const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DiGraph_emptyArcs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::DiGraph *arg1 = (gum::DiGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DiGraph_emptyArcs",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__DiGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DiGraph_emptyArcs" "', argument " "1"" of type '" "gum::DiGraph const *""'"); 
  }
  arg1 = reinterpret_cast< gum::DiGraph * >(argp1);
  {
    try {
      result = (bool)gum_DiGraph_emptyArcs((gum::DiGraph const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DiGraph_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gum__DiGraph, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_DAG__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Size arg1 ;
  bool arg2 ;
  gum::Size arg3 ;
  bool arg4 ;
  unsigned long val1 ;
  int ecode1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  gum::DAG *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_DAG",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DAG" "', argument " "1"" of type '" "gum::Size""'");
  } 
  arg1 = static_cast< gum::Size >(val1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_DAG" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_DAG" "', argument " "3"" of type '" "gum::Size""'");
  } 
  arg3 = static_cast< gum::Size >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_DAG" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  {
    try {
      result = (gum::DAG *)new gum::DAG(arg1,arg2,arg3,arg4);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__DAG, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DAG__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Size arg1 ;
  bool arg2 ;
  gum::Size arg3 ;
  unsigned long val1 ;
  int ecode1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  gum::DAG *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_DAG",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DAG" "', argument " "1"" of type '" "gum::Size""'");
  } 
  arg1 = static_cast< gum::Size >(val1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_DAG" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_DAG" "', argument " "3"" of type '" "gum::Size""'");
  } 
  arg3 = static_cast< gum::Size >(val3);
  {
    try {
      result = (gum::DAG *)new gum::DAG(arg1,arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__DAG, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DAG__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Size arg1 ;
  bool arg2 ;
  unsigned long val1 ;
  int ecode1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::DAG *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_DAG",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DAG" "', argument " "1"" of type '" "gum::Size""'");
  } 
  arg1 = static_cast< gum::Size >(val1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_DAG" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      result = (gum::DAG *)new gum::DAG(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__DAG, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DAG__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Size arg1 ;
  unsigned long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::DAG *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DAG",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DAG" "', argument " "1"" of type '" "gum::Size""'");
  } 
  arg1 = static_cast< gum::Size >(val1);
  {
    try {
      result = (gum::DAG *)new gum::DAG(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__DAG, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DAG__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::DAG *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_DAG")) SWIG_fail;
  {
    try {
      result = (gum::DAG *)new gum::DAG();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__DAG, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DAG__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::DAG *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::DAG *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DAG",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_gum__DAG,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DAG" "', argument " "1"" of type '" "gum::DAG const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DAG" "', argument " "1"" of type '" "gum::DAG const &""'"); 
  }
  arg1 = reinterpret_cast< gum::DAG * >(argp1);
  {
    try {
      result = (gum::DAG *)new gum::DAG((gum::DAG const &)*arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__DAG, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DAG(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_DAG__SWIG_4(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_gum__DAG, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_DAG__SWIG_5(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_long(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_DAG__SWIG_3(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_long(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_DAG__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_long(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_DAG__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_long(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_DAG__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_DAG'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::DAG::DAG(gum::Size,bool,gum::Size,bool)\n"
    "    gum::DAG::DAG(gum::Size,bool,gum::Size)\n"
    "    gum::DAG::DAG(gum::Size,bool)\n"
    "    gum::DAG::DAG(gum::Size)\n"
    "    gum::DAG::DAG()\n"
    "    gum::DAG::DAG(gum::DAG const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_DAG(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::DAG *arg1 = (gum::DAG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_DAG",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__DAG, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DAG" "', argument " "1"" of type '" "gum::DAG *""'"); 
  }
  arg1 = reinterpret_cast< gum::DAG * >(argp1);
  {
    try {
      delete arg1;
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DAG_addArc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::DAG *arg1 = (gum::DAG *) 0 ;
  gum::NodeId arg2 ;
  gum::NodeId arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DAG_addArc",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__DAG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DAG_addArc" "', argument " "1"" of type '" "gum::DAG *""'"); 
  }
  arg1 = reinterpret_cast< gum::DAG * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DAG_addArc" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DAG_addArc" "', argument " "3"" of type '" "gum::NodeId""'");
  } 
  arg3 = static_cast< gum::NodeId >(val3);
  {
    try {
      (arg1)->addArc(arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DAG_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gum__DAG, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_UndiGraph__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Size arg1 ;
  bool arg2 ;
  gum::Size arg3 ;
  bool arg4 ;
  unsigned long val1 ;
  int ecode1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  gum::UndiGraph *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_UndiGraph",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_UndiGraph" "', argument " "1"" of type '" "gum::Size""'");
  } 
  arg1 = static_cast< gum::Size >(val1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_UndiGraph" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_UndiGraph" "', argument " "3"" of type '" "gum::Size""'");
  } 
  arg3 = static_cast< gum::Size >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_UndiGraph" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  {
    try {
      result = (gum::UndiGraph *)new gum::UndiGraph(arg1,arg2,arg3,arg4);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__UndiGraph, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_UndiGraph__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Size arg1 ;
  bool arg2 ;
  gum::Size arg3 ;
  unsigned long val1 ;
  int ecode1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  gum::UndiGraph *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_UndiGraph",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_UndiGraph" "', argument " "1"" of type '" "gum::Size""'");
  } 
  arg1 = static_cast< gum::Size >(val1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_UndiGraph" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_UndiGraph" "', argument " "3"" of type '" "gum::Size""'");
  } 
  arg3 = static_cast< gum::Size >(val3);
  {
    try {
      result = (gum::UndiGraph *)new gum::UndiGraph(arg1,arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__UndiGraph, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_UndiGraph__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Size arg1 ;
  bool arg2 ;
  unsigned long val1 ;
  int ecode1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::UndiGraph *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_UndiGraph",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_UndiGraph" "', argument " "1"" of type '" "gum::Size""'");
  } 
  arg1 = static_cast< gum::Size >(val1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_UndiGraph" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      result = (gum::UndiGraph *)new gum::UndiGraph(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__UndiGraph, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_UndiGraph__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Size arg1 ;
  unsigned long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::UndiGraph *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_UndiGraph",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_UndiGraph" "', argument " "1"" of type '" "gum::Size""'");
  } 
  arg1 = static_cast< gum::Size >(val1);
  {
    try {
      result = (gum::UndiGraph *)new gum::UndiGraph(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__UndiGraph, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_UndiGraph__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::UndiGraph *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_UndiGraph")) SWIG_fail;
  {
    try {
      result = (gum::UndiGraph *)new gum::UndiGraph();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__UndiGraph, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_UndiGraph__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::UndiGraph *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::UndiGraph *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_UndiGraph",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_gum__UndiGraph,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_UndiGraph" "', argument " "1"" of type '" "gum::UndiGraph const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_UndiGraph" "', argument " "1"" of type '" "gum::UndiGraph const &""'"); 
  }
  arg1 = reinterpret_cast< gum::UndiGraph * >(argp1);
  {
    try {
      result = (gum::UndiGraph *)new gum::UndiGraph((gum::UndiGraph const &)*arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__UndiGraph, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_UndiGraph(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_UndiGraph__SWIG_4(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_gum__UndiGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_UndiGraph__SWIG_5(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_long(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_UndiGraph__SWIG_3(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_long(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_UndiGraph__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_long(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_UndiGraph__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_long(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_UndiGraph__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_UndiGraph'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::UndiGraph::UndiGraph(gum::Size,bool,gum::Size,bool)\n"
    "    gum::UndiGraph::UndiGraph(gum::Size,bool,gum::Size)\n"
    "    gum::UndiGraph::UndiGraph(gum::Size,bool)\n"
    "    gum::UndiGraph::UndiGraph(gum::Size)\n"
    "    gum::UndiGraph::UndiGraph()\n"
    "    gum::UndiGraph::UndiGraph(gum::UndiGraph const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_UndiGraph(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::UndiGraph *arg1 = (gum::UndiGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_UndiGraph",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__UndiGraph, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_UndiGraph" "', argument " "1"" of type '" "gum::UndiGraph *""'"); 
  }
  arg1 = reinterpret_cast< gum::UndiGraph * >(argp1);
  {
    try {
      delete arg1;
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UndiGraph___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::UndiGraph *arg1 = (gum::UndiGraph *) 0 ;
  gum::UndiGraph *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UndiGraph___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__UndiGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UndiGraph___eq__" "', argument " "1"" of type '" "gum::UndiGraph const *""'"); 
  }
  arg1 = reinterpret_cast< gum::UndiGraph * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__UndiGraph,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UndiGraph___eq__" "', argument " "2"" of type '" "gum::UndiGraph const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UndiGraph___eq__" "', argument " "2"" of type '" "gum::UndiGraph const &""'"); 
  }
  arg2 = reinterpret_cast< gum::UndiGraph * >(argp2);
  {
    try {
      result = (bool)((gum::UndiGraph const *)arg1)->operator ==((gum::UndiGraph const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UndiGraph___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::UndiGraph *arg1 = (gum::UndiGraph *) 0 ;
  gum::UndiGraph *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UndiGraph___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__UndiGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UndiGraph___ne__" "', argument " "1"" of type '" "gum::UndiGraph const *""'"); 
  }
  arg1 = reinterpret_cast< gum::UndiGraph * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__UndiGraph,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UndiGraph___ne__" "', argument " "2"" of type '" "gum::UndiGraph const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UndiGraph___ne__" "', argument " "2"" of type '" "gum::UndiGraph const &""'"); 
  }
  arg2 = reinterpret_cast< gum::UndiGraph * >(argp2);
  {
    try {
      result = (bool)((gum::UndiGraph const *)arg1)->operator !=((gum::UndiGraph const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UndiGraph_addEdge__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::UndiGraph *arg1 = (gum::UndiGraph *) 0 ;
  gum::NodeId arg2 ;
  gum::NodeId arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:UndiGraph_addEdge",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__UndiGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UndiGraph_addEdge" "', argument " "1"" of type '" "gum::UndiGraph *""'"); 
  }
  arg1 = reinterpret_cast< gum::UndiGraph * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UndiGraph_addEdge" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "UndiGraph_addEdge" "', argument " "3"" of type '" "gum::NodeId""'");
  } 
  arg3 = static_cast< gum::NodeId >(val3);
  {
    try {
      (arg1)->addEdge(arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UndiGraph_addEdge(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__UndiGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_UndiGraph_addEdge__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'UndiGraph_addEdge'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::UndiGraph::addEdge(gum::NodeId const,gum::NodeId const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_UndiGraph_eraseNode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::UndiGraph *arg1 = (gum::UndiGraph *) 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UndiGraph_eraseNode",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__UndiGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UndiGraph_eraseNode" "', argument " "1"" of type '" "gum::UndiGraph *""'"); 
  }
  arg1 = reinterpret_cast< gum::UndiGraph * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UndiGraph_eraseNode" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      (arg1)->eraseNode(arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UndiGraph_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::UndiGraph *arg1 = (gum::UndiGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UndiGraph_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__UndiGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UndiGraph_clear" "', argument " "1"" of type '" "gum::UndiGraph *""'"); 
  }
  arg1 = reinterpret_cast< gum::UndiGraph * >(argp1);
  {
    try {
      (arg1)->clear();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UndiGraph___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::UndiGraph *arg1 = (gum::UndiGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UndiGraph___str__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__UndiGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UndiGraph___str__" "', argument " "1"" of type '" "gum::UndiGraph const *""'"); 
  }
  arg1 = reinterpret_cast< gum::UndiGraph * >(argp1);
  {
    try {
      result = ((gum::UndiGraph const *)arg1)->toString();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UndiGraph_toDot(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::UndiGraph *arg1 = (gum::UndiGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UndiGraph_toDot",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__UndiGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UndiGraph_toDot" "', argument " "1"" of type '" "gum::UndiGraph const *""'"); 
  }
  arg1 = reinterpret_cast< gum::UndiGraph * >(argp1);
  {
    try {
      result = ((gum::UndiGraph const *)arg1)->toDot();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UndiGraph_hasUndirectedCycle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::UndiGraph *arg1 = (gum::UndiGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UndiGraph_hasUndirectedCycle",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__UndiGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UndiGraph_hasUndirectedCycle" "', argument " "1"" of type '" "gum::UndiGraph const *""'"); 
  }
  arg1 = reinterpret_cast< gum::UndiGraph * >(argp1);
  {
    try {
      result = (bool)((gum::UndiGraph const *)arg1)->hasUndirectedCycle();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UndiGraph_partialUndiGraph(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::UndiGraph *arg1 = (gum::UndiGraph *) 0 ;
  gum::NodeSet arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::UndiGraph result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UndiGraph_partialUndiGraph",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__UndiGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UndiGraph_partialUndiGraph" "', argument " "1"" of type '" "gum::UndiGraph *""'"); 
  }
  arg1 = reinterpret_cast< gum::UndiGraph * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_SetT_unsigned_int_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UndiGraph_partialUndiGraph" "', argument " "2"" of type '" "gum::NodeSet""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UndiGraph_partialUndiGraph" "', argument " "2"" of type '" "gum::NodeSet""'");
    } else {
      gum::NodeSet * temp = reinterpret_cast< gum::NodeSet * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (arg1)->partialUndiGraph(arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::UndiGraph(static_cast< const gum::UndiGraph& >(result))), SWIGTYPE_p_gum__UndiGraph, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UndiGraph_ids(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::UndiGraph *arg1 = (gum::UndiGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UndiGraph_ids",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__UndiGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UndiGraph_ids" "', argument " "1"" of type '" "gum::UndiGraph *""'"); 
  }
  arg1 = reinterpret_cast< gum::UndiGraph * >(argp1);
  {
    try {
      result = (PyObject *)gum_UndiGraph_ids(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UndiGraph_edges(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::UndiGraph *arg1 = (gum::UndiGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UndiGraph_edges",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__UndiGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UndiGraph_edges" "', argument " "1"" of type '" "gum::UndiGraph *""'"); 
  }
  arg1 = reinterpret_cast< gum::UndiGraph * >(argp1);
  {
    try {
      result = (PyObject *)gum_UndiGraph_edges(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UndiGraph_neighbours(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::UndiGraph *arg1 = (gum::UndiGraph *) 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UndiGraph_neighbours",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__UndiGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UndiGraph_neighbours" "', argument " "1"" of type '" "gum::UndiGraph *""'"); 
  }
  arg1 = reinterpret_cast< gum::UndiGraph * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UndiGraph_neighbours" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (PyObject *)gum_UndiGraph_neighbours(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UndiGraph_addNode_SWIG_0_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::UndiGraph *arg1 = (gum::UndiGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::NodeId result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UndiGraph_addNode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__UndiGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UndiGraph_addNode" "', argument " "1"" of type '" "gum::UndiGraph *""'"); 
  }
  arg1 = reinterpret_cast< gum::UndiGraph * >(argp1);
  {
    try {
      result = (gum::NodeId)gum_UndiGraph_addNode_SWIG_0_0(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UndiGraph_addNode_SWIG_0_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::UndiGraph *arg1 = (gum::UndiGraph *) 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UndiGraph_addNode",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__UndiGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UndiGraph_addNode" "', argument " "1"" of type '" "gum::UndiGraph *""'"); 
  }
  arg1 = reinterpret_cast< gum::UndiGraph * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UndiGraph_addNode" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      gum_UndiGraph_addNode_SWIG_0_1(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UndiGraph_addNode(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__UndiGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_UndiGraph_addNode_SWIG_0_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__UndiGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_UndiGraph_addNode_SWIG_0_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'UndiGraph_addNode'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    addNode()\n"
    "    addNode(gum::NodeId const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_UndiGraph_existsNode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::UndiGraph *arg1 = (gum::UndiGraph *) 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UndiGraph_existsNode",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__UndiGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UndiGraph_existsNode" "', argument " "1"" of type '" "gum::UndiGraph const *""'"); 
  }
  arg1 = reinterpret_cast< gum::UndiGraph * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UndiGraph_existsNode" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (bool)gum_UndiGraph_existsNode((gum::UndiGraph const *)arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UndiGraph_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::UndiGraph *arg1 = (gum::UndiGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::Size result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UndiGraph_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__UndiGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UndiGraph_size" "', argument " "1"" of type '" "gum::UndiGraph const *""'"); 
  }
  arg1 = reinterpret_cast< gum::UndiGraph * >(argp1);
  {
    try {
      result = (gum::Size)gum_UndiGraph_size((gum::UndiGraph const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UndiGraph_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::UndiGraph *arg1 = (gum::UndiGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UndiGraph_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__UndiGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UndiGraph_empty" "', argument " "1"" of type '" "gum::UndiGraph const *""'"); 
  }
  arg1 = reinterpret_cast< gum::UndiGraph * >(argp1);
  {
    try {
      result = (bool)gum_UndiGraph_empty((gum::UndiGraph const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UndiGraph_eraseEdge(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::UndiGraph *arg1 = (gum::UndiGraph *) 0 ;
  gum::Edge *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UndiGraph_eraseEdge",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__UndiGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UndiGraph_eraseEdge" "', argument " "1"" of type '" "gum::UndiGraph *""'"); 
  }
  arg1 = reinterpret_cast< gum::UndiGraph * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__Edge,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UndiGraph_eraseEdge" "', argument " "2"" of type '" "gum::Edge const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UndiGraph_eraseEdge" "', argument " "2"" of type '" "gum::Edge const &""'"); 
  }
  arg2 = reinterpret_cast< gum::Edge * >(argp2);
  {
    try {
      gum_UndiGraph_eraseEdge(arg1,(gum::Edge const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UndiGraph_existsEdge_SWIG_0_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::UndiGraph *arg1 = (gum::UndiGraph *) 0 ;
  gum::Edge *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UndiGraph_existsEdge",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__UndiGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UndiGraph_existsEdge" "', argument " "1"" of type '" "gum::UndiGraph const *""'"); 
  }
  arg1 = reinterpret_cast< gum::UndiGraph * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__Edge,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UndiGraph_existsEdge" "', argument " "2"" of type '" "gum::Edge const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UndiGraph_existsEdge" "', argument " "2"" of type '" "gum::Edge const &""'"); 
  }
  arg2 = reinterpret_cast< gum::Edge * >(argp2);
  {
    try {
      result = (bool)gum_UndiGraph_existsEdge_SWIG_0_0((gum::UndiGraph const *)arg1,(gum::Edge const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UndiGraph_existsEdge_SWIG_0_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::UndiGraph *arg1 = (gum::UndiGraph *) 0 ;
  gum::NodeId arg2 ;
  gum::NodeId arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:UndiGraph_existsEdge",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__UndiGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UndiGraph_existsEdge" "', argument " "1"" of type '" "gum::UndiGraph const *""'"); 
  }
  arg1 = reinterpret_cast< gum::UndiGraph * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UndiGraph_existsEdge" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "UndiGraph_existsEdge" "', argument " "3"" of type '" "gum::NodeId""'");
  } 
  arg3 = static_cast< gum::NodeId >(val3);
  {
    try {
      result = (bool)gum_UndiGraph_existsEdge_SWIG_0_1((gum::UndiGraph const *)arg1,arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UndiGraph_existsEdge(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__UndiGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_gum__Edge, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_UndiGraph_existsEdge_SWIG_0_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__UndiGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_UndiGraph_existsEdge_SWIG_0_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'UndiGraph_existsEdge'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    existsEdge(gum::Edge const &) const\n"
    "    existsEdge(gum::NodeId const,gum::NodeId const) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_UndiGraph_sizeEdges(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::UndiGraph *arg1 = (gum::UndiGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::Size result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UndiGraph_sizeEdges",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__UndiGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UndiGraph_sizeEdges" "', argument " "1"" of type '" "gum::UndiGraph const *""'"); 
  }
  arg1 = reinterpret_cast< gum::UndiGraph * >(argp1);
  {
    try {
      result = (gum::Size)gum_UndiGraph_sizeEdges((gum::UndiGraph const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UndiGraph_emptyEdges(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::UndiGraph *arg1 = (gum::UndiGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UndiGraph_emptyEdges",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__UndiGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UndiGraph_emptyEdges" "', argument " "1"" of type '" "gum::UndiGraph const *""'"); 
  }
  arg1 = reinterpret_cast< gum::UndiGraph * >(argp1);
  {
    try {
      result = (bool)gum_UndiGraph_emptyEdges((gum::UndiGraph const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UndiGraph_eraseNeighbours(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::UndiGraph *arg1 = (gum::UndiGraph *) 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UndiGraph_eraseNeighbours",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__UndiGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UndiGraph_eraseNeighbours" "', argument " "1"" of type '" "gum::UndiGraph *""'"); 
  }
  arg1 = reinterpret_cast< gum::UndiGraph * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UndiGraph_eraseNeighbours" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      gum_UndiGraph_eraseNeighbours(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *UndiGraph_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gum__UndiGraph, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_MixedGraph__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Size arg1 ;
  bool arg2 ;
  gum::Size arg3 ;
  bool arg4 ;
  gum::Size arg5 ;
  bool arg6 ;
  unsigned long val1 ;
  int ecode1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  unsigned long val5 ;
  int ecode5 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  gum::MixedGraph *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:new_MixedGraph",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_MixedGraph" "', argument " "1"" of type '" "gum::Size""'");
  } 
  arg1 = static_cast< gum::Size >(val1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_MixedGraph" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_MixedGraph" "', argument " "3"" of type '" "gum::Size""'");
  } 
  arg3 = static_cast< gum::Size >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_MixedGraph" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_long(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_MixedGraph" "', argument " "5"" of type '" "gum::Size""'");
  } 
  arg5 = static_cast< gum::Size >(val5);
  ecode6 = SWIG_AsVal_bool(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_MixedGraph" "', argument " "6"" of type '" "bool""'");
  } 
  arg6 = static_cast< bool >(val6);
  {
    try {
      result = (gum::MixedGraph *)new gum::MixedGraph(arg1,arg2,arg3,arg4,arg5,arg6);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__MixedGraph, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MixedGraph__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Size arg1 ;
  bool arg2 ;
  gum::Size arg3 ;
  bool arg4 ;
  gum::Size arg5 ;
  unsigned long val1 ;
  int ecode1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  unsigned long val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  gum::MixedGraph *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_MixedGraph",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_MixedGraph" "', argument " "1"" of type '" "gum::Size""'");
  } 
  arg1 = static_cast< gum::Size >(val1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_MixedGraph" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_MixedGraph" "', argument " "3"" of type '" "gum::Size""'");
  } 
  arg3 = static_cast< gum::Size >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_MixedGraph" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_long(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_MixedGraph" "', argument " "5"" of type '" "gum::Size""'");
  } 
  arg5 = static_cast< gum::Size >(val5);
  {
    try {
      result = (gum::MixedGraph *)new gum::MixedGraph(arg1,arg2,arg3,arg4,arg5);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__MixedGraph, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MixedGraph__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Size arg1 ;
  bool arg2 ;
  gum::Size arg3 ;
  bool arg4 ;
  unsigned long val1 ;
  int ecode1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  gum::MixedGraph *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_MixedGraph",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_MixedGraph" "', argument " "1"" of type '" "gum::Size""'");
  } 
  arg1 = static_cast< gum::Size >(val1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_MixedGraph" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_MixedGraph" "', argument " "3"" of type '" "gum::Size""'");
  } 
  arg3 = static_cast< gum::Size >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_MixedGraph" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  {
    try {
      result = (gum::MixedGraph *)new gum::MixedGraph(arg1,arg2,arg3,arg4);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__MixedGraph, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MixedGraph__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Size arg1 ;
  bool arg2 ;
  gum::Size arg3 ;
  unsigned long val1 ;
  int ecode1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  gum::MixedGraph *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_MixedGraph",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_MixedGraph" "', argument " "1"" of type '" "gum::Size""'");
  } 
  arg1 = static_cast< gum::Size >(val1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_MixedGraph" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_MixedGraph" "', argument " "3"" of type '" "gum::Size""'");
  } 
  arg3 = static_cast< gum::Size >(val3);
  {
    try {
      result = (gum::MixedGraph *)new gum::MixedGraph(arg1,arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__MixedGraph, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MixedGraph__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Size arg1 ;
  bool arg2 ;
  unsigned long val1 ;
  int ecode1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::MixedGraph *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_MixedGraph",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_MixedGraph" "', argument " "1"" of type '" "gum::Size""'");
  } 
  arg1 = static_cast< gum::Size >(val1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_MixedGraph" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      result = (gum::MixedGraph *)new gum::MixedGraph(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__MixedGraph, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MixedGraph__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Size arg1 ;
  unsigned long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::MixedGraph *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_MixedGraph",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_MixedGraph" "', argument " "1"" of type '" "gum::Size""'");
  } 
  arg1 = static_cast< gum::Size >(val1);
  {
    try {
      result = (gum::MixedGraph *)new gum::MixedGraph(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__MixedGraph, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MixedGraph__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::MixedGraph *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_MixedGraph")) SWIG_fail;
  {
    try {
      result = (gum::MixedGraph *)new gum::MixedGraph();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__MixedGraph, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MixedGraph__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::MixedGraph *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::MixedGraph *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_MixedGraph",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_gum__MixedGraph,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MixedGraph" "', argument " "1"" of type '" "gum::MixedGraph const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MixedGraph" "', argument " "1"" of type '" "gum::MixedGraph const &""'"); 
  }
  arg1 = reinterpret_cast< gum::MixedGraph * >(argp1);
  {
    try {
      result = (gum::MixedGraph *)new gum::MixedGraph((gum::MixedGraph const &)*arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__MixedGraph, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MixedGraph(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[7] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 6) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_MixedGraph__SWIG_6(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_gum__MixedGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_MixedGraph__SWIG_7(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_long(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_MixedGraph__SWIG_5(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_long(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_MixedGraph__SWIG_4(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_long(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_MixedGraph__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_long(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_MixedGraph__SWIG_2(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_long(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_long(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_MixedGraph__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_long(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_long(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_bool(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_new_MixedGraph__SWIG_0(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_MixedGraph'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::MixedGraph::MixedGraph(gum::Size,bool,gum::Size,bool,gum::Size,bool)\n"
    "    gum::MixedGraph::MixedGraph(gum::Size,bool,gum::Size,bool,gum::Size)\n"
    "    gum::MixedGraph::MixedGraph(gum::Size,bool,gum::Size,bool)\n"
    "    gum::MixedGraph::MixedGraph(gum::Size,bool,gum::Size)\n"
    "    gum::MixedGraph::MixedGraph(gum::Size,bool)\n"
    "    gum::MixedGraph::MixedGraph(gum::Size)\n"
    "    gum::MixedGraph::MixedGraph()\n"
    "    gum::MixedGraph::MixedGraph(gum::MixedGraph const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_MixedGraph(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::MixedGraph *arg1 = (gum::MixedGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_MixedGraph",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__MixedGraph, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MixedGraph" "', argument " "1"" of type '" "gum::MixedGraph *""'"); 
  }
  arg1 = reinterpret_cast< gum::MixedGraph * >(argp1);
  {
    try {
      delete arg1;
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedGraph___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::MixedGraph *arg1 = (gum::MixedGraph *) 0 ;
  gum::MixedGraph *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MixedGraph___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__MixedGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedGraph___eq__" "', argument " "1"" of type '" "gum::MixedGraph const *""'"); 
  }
  arg1 = reinterpret_cast< gum::MixedGraph * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__MixedGraph,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MixedGraph___eq__" "', argument " "2"" of type '" "gum::MixedGraph const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MixedGraph___eq__" "', argument " "2"" of type '" "gum::MixedGraph const &""'"); 
  }
  arg2 = reinterpret_cast< gum::MixedGraph * >(argp2);
  {
    try {
      result = (bool)((gum::MixedGraph const *)arg1)->operator ==((gum::MixedGraph const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedGraph___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::MixedGraph *arg1 = (gum::MixedGraph *) 0 ;
  gum::MixedGraph *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MixedGraph___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__MixedGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedGraph___ne__" "', argument " "1"" of type '" "gum::MixedGraph const *""'"); 
  }
  arg1 = reinterpret_cast< gum::MixedGraph * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__MixedGraph,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MixedGraph___ne__" "', argument " "2"" of type '" "gum::MixedGraph const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MixedGraph___ne__" "', argument " "2"" of type '" "gum::MixedGraph const &""'"); 
  }
  arg2 = reinterpret_cast< gum::MixedGraph * >(argp2);
  {
    try {
      result = (bool)((gum::MixedGraph const *)arg1)->operator !=((gum::MixedGraph const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedGraph_eraseNode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::MixedGraph *arg1 = (gum::MixedGraph *) 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MixedGraph_eraseNode",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__MixedGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedGraph_eraseNode" "', argument " "1"" of type '" "gum::MixedGraph *""'"); 
  }
  arg1 = reinterpret_cast< gum::MixedGraph * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MixedGraph_eraseNode" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      (arg1)->eraseNode(arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedGraph_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::MixedGraph *arg1 = (gum::MixedGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MixedGraph_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__MixedGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedGraph_clear" "', argument " "1"" of type '" "gum::MixedGraph *""'"); 
  }
  arg1 = reinterpret_cast< gum::MixedGraph * >(argp1);
  {
    try {
      (arg1)->clear();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedGraph_mixedOrientedPath(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::MixedGraph *arg1 = (gum::MixedGraph *) 0 ;
  gum::NodeId arg2 ;
  gum::NodeId arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< std::vector< unsigned int,std::allocator< unsigned int > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MixedGraph_mixedOrientedPath",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__MixedGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedGraph_mixedOrientedPath" "', argument " "1"" of type '" "gum::MixedGraph const *""'"); 
  }
  arg1 = reinterpret_cast< gum::MixedGraph * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MixedGraph_mixedOrientedPath" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MixedGraph_mixedOrientedPath" "', argument " "3"" of type '" "gum::NodeId""'");
  } 
  arg3 = static_cast< gum::NodeId >(val3);
  {
    try {
      result = ((gum::MixedGraph const *)arg1)->mixedOrientedPath(arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< gum::NodeId,std::allocator< gum::NodeId > >(static_cast< const std::vector< gum::NodeId,std::allocator< gum::NodeId > >& >(result))), SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedGraph_mixedUnorientedPath(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::MixedGraph *arg1 = (gum::MixedGraph *) 0 ;
  gum::NodeId arg2 ;
  gum::NodeId arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< std::vector< unsigned int,std::allocator< unsigned int > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MixedGraph_mixedUnorientedPath",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__MixedGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedGraph_mixedUnorientedPath" "', argument " "1"" of type '" "gum::MixedGraph const *""'"); 
  }
  arg1 = reinterpret_cast< gum::MixedGraph * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MixedGraph_mixedUnorientedPath" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MixedGraph_mixedUnorientedPath" "', argument " "3"" of type '" "gum::NodeId""'");
  } 
  arg3 = static_cast< gum::NodeId >(val3);
  {
    try {
      result = ((gum::MixedGraph const *)arg1)->mixedUnorientedPath(arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< gum::NodeId,std::allocator< gum::NodeId > >(static_cast< const std::vector< gum::NodeId,std::allocator< gum::NodeId > >& >(result))), SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedGraph___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::MixedGraph *arg1 = (gum::MixedGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MixedGraph___str__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__MixedGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedGraph___str__" "', argument " "1"" of type '" "gum::MixedGraph const *""'"); 
  }
  arg1 = reinterpret_cast< gum::MixedGraph * >(argp1);
  {
    try {
      result = ((gum::MixedGraph const *)arg1)->toString();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedGraph_addNode_SWIG_0_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::MixedGraph *arg1 = (gum::MixedGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::NodeId result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MixedGraph_addNode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__MixedGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedGraph_addNode" "', argument " "1"" of type '" "gum::MixedGraph *""'"); 
  }
  arg1 = reinterpret_cast< gum::MixedGraph * >(argp1);
  {
    try {
      result = (gum::NodeId)gum_MixedGraph_addNode_SWIG_0_0(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedGraph_addNode_SWIG_0_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::MixedGraph *arg1 = (gum::MixedGraph *) 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MixedGraph_addNode",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__MixedGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedGraph_addNode" "', argument " "1"" of type '" "gum::MixedGraph *""'"); 
  }
  arg1 = reinterpret_cast< gum::MixedGraph * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MixedGraph_addNode" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      gum_MixedGraph_addNode_SWIG_0_1(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedGraph_addNode(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__MixedGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_MixedGraph_addNode_SWIG_0_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__MixedGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MixedGraph_addNode_SWIG_0_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'MixedGraph_addNode'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    addNode()\n"
    "    addNode(gum::NodeId const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MixedGraph_existsNode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::MixedGraph *arg1 = (gum::MixedGraph *) 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MixedGraph_existsNode",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__MixedGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedGraph_existsNode" "', argument " "1"" of type '" "gum::MixedGraph const *""'"); 
  }
  arg1 = reinterpret_cast< gum::MixedGraph * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MixedGraph_existsNode" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (bool)gum_MixedGraph_existsNode((gum::MixedGraph const *)arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedGraph_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::MixedGraph *arg1 = (gum::MixedGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::Size result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MixedGraph_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__MixedGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedGraph_size" "', argument " "1"" of type '" "gum::MixedGraph const *""'"); 
  }
  arg1 = reinterpret_cast< gum::MixedGraph * >(argp1);
  {
    try {
      result = (gum::Size)gum_MixedGraph_size((gum::MixedGraph const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedGraph_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::MixedGraph *arg1 = (gum::MixedGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MixedGraph_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__MixedGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedGraph_empty" "', argument " "1"" of type '" "gum::MixedGraph const *""'"); 
  }
  arg1 = reinterpret_cast< gum::MixedGraph * >(argp1);
  {
    try {
      result = (bool)gum_MixedGraph_empty((gum::MixedGraph const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedGraph_addEdge(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::MixedGraph *arg1 = (gum::MixedGraph *) 0 ;
  gum::NodeId arg2 ;
  gum::NodeId arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MixedGraph_addEdge",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__MixedGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedGraph_addEdge" "', argument " "1"" of type '" "gum::MixedGraph *""'"); 
  }
  arg1 = reinterpret_cast< gum::MixedGraph * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MixedGraph_addEdge" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MixedGraph_addEdge" "', argument " "3"" of type '" "gum::NodeId""'");
  } 
  arg3 = static_cast< gum::NodeId >(val3);
  {
    try {
      gum_MixedGraph_addEdge(arg1,arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedGraph_eraseEdge(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::MixedGraph *arg1 = (gum::MixedGraph *) 0 ;
  gum::Edge *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MixedGraph_eraseEdge",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__MixedGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedGraph_eraseEdge" "', argument " "1"" of type '" "gum::MixedGraph *""'"); 
  }
  arg1 = reinterpret_cast< gum::MixedGraph * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__Edge,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MixedGraph_eraseEdge" "', argument " "2"" of type '" "gum::Edge const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MixedGraph_eraseEdge" "', argument " "2"" of type '" "gum::Edge const &""'"); 
  }
  arg2 = reinterpret_cast< gum::Edge * >(argp2);
  {
    try {
      gum_MixedGraph_eraseEdge(arg1,(gum::Edge const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedGraph_existsEdge_SWIG_0_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::MixedGraph *arg1 = (gum::MixedGraph *) 0 ;
  gum::Edge *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MixedGraph_existsEdge",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__MixedGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedGraph_existsEdge" "', argument " "1"" of type '" "gum::MixedGraph const *""'"); 
  }
  arg1 = reinterpret_cast< gum::MixedGraph * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__Edge,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MixedGraph_existsEdge" "', argument " "2"" of type '" "gum::Edge const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MixedGraph_existsEdge" "', argument " "2"" of type '" "gum::Edge const &""'"); 
  }
  arg2 = reinterpret_cast< gum::Edge * >(argp2);
  {
    try {
      result = (bool)gum_MixedGraph_existsEdge_SWIG_0_0((gum::MixedGraph const *)arg1,(gum::Edge const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedGraph_existsEdge_SWIG_0_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::MixedGraph *arg1 = (gum::MixedGraph *) 0 ;
  gum::NodeId arg2 ;
  gum::NodeId arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MixedGraph_existsEdge",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__MixedGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedGraph_existsEdge" "', argument " "1"" of type '" "gum::MixedGraph const *""'"); 
  }
  arg1 = reinterpret_cast< gum::MixedGraph * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MixedGraph_existsEdge" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MixedGraph_existsEdge" "', argument " "3"" of type '" "gum::NodeId""'");
  } 
  arg3 = static_cast< gum::NodeId >(val3);
  {
    try {
      result = (bool)gum_MixedGraph_existsEdge_SWIG_0_1((gum::MixedGraph const *)arg1,arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedGraph_existsEdge(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__MixedGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_gum__Edge, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MixedGraph_existsEdge_SWIG_0_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__MixedGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MixedGraph_existsEdge_SWIG_0_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'MixedGraph_existsEdge'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    existsEdge(gum::Edge const &) const\n"
    "    existsEdge(gum::NodeId const,gum::NodeId const) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MixedGraph_sizeEdges(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::MixedGraph *arg1 = (gum::MixedGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::Size result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MixedGraph_sizeEdges",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__MixedGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedGraph_sizeEdges" "', argument " "1"" of type '" "gum::MixedGraph const *""'"); 
  }
  arg1 = reinterpret_cast< gum::MixedGraph * >(argp1);
  {
    try {
      result = (gum::Size)gum_MixedGraph_sizeEdges((gum::MixedGraph const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedGraph_emptyEdges(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::MixedGraph *arg1 = (gum::MixedGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MixedGraph_emptyEdges",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__MixedGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedGraph_emptyEdges" "', argument " "1"" of type '" "gum::MixedGraph const *""'"); 
  }
  arg1 = reinterpret_cast< gum::MixedGraph * >(argp1);
  {
    try {
      result = (bool)gum_MixedGraph_emptyEdges((gum::MixedGraph const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedGraph_eraseNeighbours(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::MixedGraph *arg1 = (gum::MixedGraph *) 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MixedGraph_eraseNeighbours",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__MixedGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedGraph_eraseNeighbours" "', argument " "1"" of type '" "gum::MixedGraph *""'"); 
  }
  arg1 = reinterpret_cast< gum::MixedGraph * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MixedGraph_eraseNeighbours" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      gum_MixedGraph_eraseNeighbours(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedGraph_addArc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::MixedGraph *arg1 = (gum::MixedGraph *) 0 ;
  gum::NodeId arg2 ;
  gum::NodeId arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MixedGraph_addArc",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__MixedGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedGraph_addArc" "', argument " "1"" of type '" "gum::MixedGraph *""'"); 
  }
  arg1 = reinterpret_cast< gum::MixedGraph * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MixedGraph_addArc" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MixedGraph_addArc" "', argument " "3"" of type '" "gum::NodeId""'");
  } 
  arg3 = static_cast< gum::NodeId >(val3);
  {
    try {
      gum_MixedGraph_addArc(arg1,arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedGraph_eraseArc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::MixedGraph *arg1 = (gum::MixedGraph *) 0 ;
  gum::Arc *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MixedGraph_eraseArc",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__MixedGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedGraph_eraseArc" "', argument " "1"" of type '" "gum::MixedGraph *""'"); 
  }
  arg1 = reinterpret_cast< gum::MixedGraph * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__Arc,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MixedGraph_eraseArc" "', argument " "2"" of type '" "gum::Arc const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MixedGraph_eraseArc" "', argument " "2"" of type '" "gum::Arc const &""'"); 
  }
  arg2 = reinterpret_cast< gum::Arc * >(argp2);
  {
    try {
      gum_MixedGraph_eraseArc(arg1,(gum::Arc const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedGraph_existsArc_SWIG_0_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::MixedGraph *arg1 = (gum::MixedGraph *) 0 ;
  gum::Arc *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MixedGraph_existsArc",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__MixedGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedGraph_existsArc" "', argument " "1"" of type '" "gum::MixedGraph const *""'"); 
  }
  arg1 = reinterpret_cast< gum::MixedGraph * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__Arc,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MixedGraph_existsArc" "', argument " "2"" of type '" "gum::Arc const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MixedGraph_existsArc" "', argument " "2"" of type '" "gum::Arc const &""'"); 
  }
  arg2 = reinterpret_cast< gum::Arc * >(argp2);
  {
    try {
      result = (bool)gum_MixedGraph_existsArc_SWIG_0_0((gum::MixedGraph const *)arg1,(gum::Arc const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedGraph_existsArc_SWIG_0_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::MixedGraph *arg1 = (gum::MixedGraph *) 0 ;
  gum::NodeId arg2 ;
  gum::NodeId arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MixedGraph_existsArc",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__MixedGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedGraph_existsArc" "', argument " "1"" of type '" "gum::MixedGraph const *""'"); 
  }
  arg1 = reinterpret_cast< gum::MixedGraph * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MixedGraph_existsArc" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MixedGraph_existsArc" "', argument " "3"" of type '" "gum::NodeId""'");
  } 
  arg3 = static_cast< gum::NodeId >(val3);
  {
    try {
      result = (bool)gum_MixedGraph_existsArc_SWIG_0_1((gum::MixedGraph const *)arg1,arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedGraph_existsArc(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__MixedGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_gum__Arc, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MixedGraph_existsArc_SWIG_0_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__MixedGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MixedGraph_existsArc_SWIG_0_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'MixedGraph_existsArc'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    existsArc(gum::Arc const &) const\n"
    "    existsArc(gum::NodeId const,gum::NodeId const) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MixedGraph_eraseParents__SWIG_1_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::MixedGraph *arg1 = (gum::MixedGraph *) 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MixedGraph_eraseParents",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__MixedGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedGraph_eraseParents" "', argument " "1"" of type '" "gum::MixedGraph *""'"); 
  }
  arg1 = reinterpret_cast< gum::MixedGraph * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MixedGraph_eraseParents" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      gum_MixedGraph_eraseParents__SWIG_1_0(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedGraph_eraseParents(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__MixedGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MixedGraph_eraseParents__SWIG_1_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'MixedGraph_eraseParents'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::MixedGraph::eraseParents()\n"
    "    eraseParents(gum::NodeId const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MixedGraph_eraseChildren__SWIG_1_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::MixedGraph *arg1 = (gum::MixedGraph *) 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MixedGraph_eraseChildren",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__MixedGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedGraph_eraseChildren" "', argument " "1"" of type '" "gum::MixedGraph *""'"); 
  }
  arg1 = reinterpret_cast< gum::MixedGraph * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MixedGraph_eraseChildren" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      gum_MixedGraph_eraseChildren__SWIG_1_0(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedGraph_eraseChildren(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__MixedGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MixedGraph_eraseChildren__SWIG_1_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'MixedGraph_eraseChildren'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::MixedGraph::eraseChildren()\n"
    "    eraseChildren(gum::NodeId const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MixedGraph_sizeArcs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::MixedGraph *arg1 = (gum::MixedGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::Size result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MixedGraph_sizeArcs",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__MixedGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedGraph_sizeArcs" "', argument " "1"" of type '" "gum::MixedGraph const *""'"); 
  }
  arg1 = reinterpret_cast< gum::MixedGraph * >(argp1);
  {
    try {
      result = (gum::Size)gum_MixedGraph_sizeArcs((gum::MixedGraph const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedGraph_emptyArcs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::MixedGraph *arg1 = (gum::MixedGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MixedGraph_emptyArcs",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__MixedGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedGraph_emptyArcs" "', argument " "1"" of type '" "gum::MixedGraph const *""'"); 
  }
  arg1 = reinterpret_cast< gum::MixedGraph * >(argp1);
  {
    try {
      result = (bool)gum_MixedGraph_emptyArcs((gum::MixedGraph const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MixedGraph_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gum__MixedGraph, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_CliqueGraph__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Size arg1 ;
  bool arg2 ;
  gum::Size arg3 ;
  bool arg4 ;
  unsigned long val1 ;
  int ecode1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  gum::CliqueGraph *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_CliqueGraph",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_CliqueGraph" "', argument " "1"" of type '" "gum::Size""'");
  } 
  arg1 = static_cast< gum::Size >(val1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_CliqueGraph" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_CliqueGraph" "', argument " "3"" of type '" "gum::Size""'");
  } 
  arg3 = static_cast< gum::Size >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_CliqueGraph" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  {
    try {
      result = (gum::CliqueGraph *)new gum::CliqueGraph(arg1,arg2,arg3,arg4);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__CliqueGraph, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CliqueGraph__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Size arg1 ;
  bool arg2 ;
  gum::Size arg3 ;
  unsigned long val1 ;
  int ecode1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  gum::CliqueGraph *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_CliqueGraph",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_CliqueGraph" "', argument " "1"" of type '" "gum::Size""'");
  } 
  arg1 = static_cast< gum::Size >(val1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_CliqueGraph" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_CliqueGraph" "', argument " "3"" of type '" "gum::Size""'");
  } 
  arg3 = static_cast< gum::Size >(val3);
  {
    try {
      result = (gum::CliqueGraph *)new gum::CliqueGraph(arg1,arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__CliqueGraph, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CliqueGraph__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Size arg1 ;
  bool arg2 ;
  unsigned long val1 ;
  int ecode1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::CliqueGraph *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_CliqueGraph",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_CliqueGraph" "', argument " "1"" of type '" "gum::Size""'");
  } 
  arg1 = static_cast< gum::Size >(val1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_CliqueGraph" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      result = (gum::CliqueGraph *)new gum::CliqueGraph(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__CliqueGraph, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CliqueGraph__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Size arg1 ;
  unsigned long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::CliqueGraph *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_CliqueGraph",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_CliqueGraph" "', argument " "1"" of type '" "gum::Size""'");
  } 
  arg1 = static_cast< gum::Size >(val1);
  {
    try {
      result = (gum::CliqueGraph *)new gum::CliqueGraph(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__CliqueGraph, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CliqueGraph__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::CliqueGraph *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_CliqueGraph")) SWIG_fail;
  {
    try {
      result = (gum::CliqueGraph *)new gum::CliqueGraph();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__CliqueGraph, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CliqueGraph__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::CliqueGraph *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::CliqueGraph *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_CliqueGraph",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_gum__CliqueGraph,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CliqueGraph" "', argument " "1"" of type '" "gum::CliqueGraph const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CliqueGraph" "', argument " "1"" of type '" "gum::CliqueGraph const &""'"); 
  }
  arg1 = reinterpret_cast< gum::CliqueGraph * >(argp1);
  {
    try {
      result = (gum::CliqueGraph *)new gum::CliqueGraph((gum::CliqueGraph const &)*arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__CliqueGraph, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CliqueGraph(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_CliqueGraph__SWIG_4(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_gum__CliqueGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_CliqueGraph__SWIG_5(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_long(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_CliqueGraph__SWIG_3(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_long(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_CliqueGraph__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_long(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_CliqueGraph__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_long(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_CliqueGraph__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_CliqueGraph'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::CliqueGraph::CliqueGraph(gum::Size,bool,gum::Size,bool)\n"
    "    gum::CliqueGraph::CliqueGraph(gum::Size,bool,gum::Size)\n"
    "    gum::CliqueGraph::CliqueGraph(gum::Size,bool)\n"
    "    gum::CliqueGraph::CliqueGraph(gum::Size)\n"
    "    gum::CliqueGraph::CliqueGraph()\n"
    "    gum::CliqueGraph::CliqueGraph(gum::CliqueGraph const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_CliqueGraph(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::CliqueGraph *arg1 = (gum::CliqueGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_CliqueGraph",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__CliqueGraph, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CliqueGraph" "', argument " "1"" of type '" "gum::CliqueGraph *""'"); 
  }
  arg1 = reinterpret_cast< gum::CliqueGraph * >(argp1);
  {
    try {
      delete arg1;
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CliqueGraph_addEdge(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::CliqueGraph *arg1 = (gum::CliqueGraph *) 0 ;
  gum::NodeId arg2 ;
  gum::NodeId arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CliqueGraph_addEdge",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__CliqueGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CliqueGraph_addEdge" "', argument " "1"" of type '" "gum::CliqueGraph *""'"); 
  }
  arg1 = reinterpret_cast< gum::CliqueGraph * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CliqueGraph_addEdge" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CliqueGraph_addEdge" "', argument " "3"" of type '" "gum::NodeId""'");
  } 
  arg3 = static_cast< gum::NodeId >(val3);
  {
    try {
      (arg1)->addEdge(arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CliqueGraph_eraseEdge(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::CliqueGraph *arg1 = (gum::CliqueGraph *) 0 ;
  gum::Edge *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CliqueGraph_eraseEdge",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__CliqueGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CliqueGraph_eraseEdge" "', argument " "1"" of type '" "gum::CliqueGraph *""'"); 
  }
  arg1 = reinterpret_cast< gum::CliqueGraph * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__Edge,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CliqueGraph_eraseEdge" "', argument " "2"" of type '" "gum::Edge const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CliqueGraph_eraseEdge" "', argument " "2"" of type '" "gum::Edge const &""'"); 
  }
  arg2 = reinterpret_cast< gum::Edge * >(argp2);
  {
    try {
      (arg1)->eraseEdge((gum::Edge const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CliqueGraph_clearEdges(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::CliqueGraph *arg1 = (gum::CliqueGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CliqueGraph_clearEdges",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__CliqueGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CliqueGraph_clearEdges" "', argument " "1"" of type '" "gum::CliqueGraph *""'"); 
  }
  arg1 = reinterpret_cast< gum::CliqueGraph * >(argp1);
  {
    try {
      (arg1)->clearEdges();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CliqueGraph_eraseNode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::CliqueGraph *arg1 = (gum::CliqueGraph *) 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CliqueGraph_eraseNode",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__CliqueGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CliqueGraph_eraseNode" "', argument " "1"" of type '" "gum::CliqueGraph *""'"); 
  }
  arg1 = reinterpret_cast< gum::CliqueGraph * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CliqueGraph_eraseNode" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      (arg1)->eraseNode(arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CliqueGraph_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::CliqueGraph *arg1 = (gum::CliqueGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CliqueGraph_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__CliqueGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CliqueGraph_clear" "', argument " "1"" of type '" "gum::CliqueGraph *""'"); 
  }
  arg1 = reinterpret_cast< gum::CliqueGraph * >(argp1);
  {
    try {
      (arg1)->clear();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CliqueGraph_container(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::CliqueGraph *arg1 = (gum::CliqueGraph *) 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::NodeId result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CliqueGraph_container",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__CliqueGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CliqueGraph_container" "', argument " "1"" of type '" "gum::CliqueGraph const *""'"); 
  }
  arg1 = reinterpret_cast< gum::CliqueGraph * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CliqueGraph_container" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (gum::NodeId)((gum::CliqueGraph const *)arg1)->container(arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CliqueGraph_setClique(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::CliqueGraph *arg1 = (gum::CliqueGraph *) 0 ;
  gum::NodeId arg2 ;
  gum::NodeSet *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CliqueGraph_setClique",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__CliqueGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CliqueGraph_setClique" "', argument " "1"" of type '" "gum::CliqueGraph *""'"); 
  }
  arg1 = reinterpret_cast< gum::CliqueGraph * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CliqueGraph_setClique" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_SetT_unsigned_int_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CliqueGraph_setClique" "', argument " "3"" of type '" "gum::NodeSet const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CliqueGraph_setClique" "', argument " "3"" of type '" "gum::NodeSet const &""'"); 
  }
  arg3 = reinterpret_cast< gum::NodeSet * >(argp3);
  {
    try {
      (arg1)->setClique(arg2,(gum::NodeSet const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CliqueGraph_addToClique(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::CliqueGraph *arg1 = (gum::CliqueGraph *) 0 ;
  gum::NodeId arg2 ;
  gum::NodeId arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CliqueGraph_addToClique",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__CliqueGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CliqueGraph_addToClique" "', argument " "1"" of type '" "gum::CliqueGraph *""'"); 
  }
  arg1 = reinterpret_cast< gum::CliqueGraph * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CliqueGraph_addToClique" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CliqueGraph_addToClique" "', argument " "3"" of type '" "gum::NodeId""'");
  } 
  arg3 = static_cast< gum::NodeId >(val3);
  {
    try {
      (arg1)->addToClique(arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CliqueGraph_eraseFromClique(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::CliqueGraph *arg1 = (gum::CliqueGraph *) 0 ;
  gum::NodeId arg2 ;
  gum::NodeId arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CliqueGraph_eraseFromClique",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__CliqueGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CliqueGraph_eraseFromClique" "', argument " "1"" of type '" "gum::CliqueGraph *""'"); 
  }
  arg1 = reinterpret_cast< gum::CliqueGraph * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CliqueGraph_eraseFromClique" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CliqueGraph_eraseFromClique" "', argument " "3"" of type '" "gum::NodeId""'");
  } 
  arg3 = static_cast< gum::NodeId >(val3);
  {
    try {
      (arg1)->eraseFromClique(arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CliqueGraph_separator__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::CliqueGraph *arg1 = (gum::CliqueGraph *) 0 ;
  gum::Edge *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::NodeSet *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CliqueGraph_separator",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__CliqueGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CliqueGraph_separator" "', argument " "1"" of type '" "gum::CliqueGraph const *""'"); 
  }
  arg1 = reinterpret_cast< gum::CliqueGraph * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__Edge,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CliqueGraph_separator" "', argument " "2"" of type '" "gum::Edge const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CliqueGraph_separator" "', argument " "2"" of type '" "gum::Edge const &""'"); 
  }
  arg2 = reinterpret_cast< gum::Edge * >(argp2);
  {
    try {
      result = (gum::NodeSet *) &((gum::CliqueGraph const *)arg1)->separator((gum::Edge const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SetT_unsigned_int_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CliqueGraph_separator__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::CliqueGraph *arg1 = (gum::CliqueGraph *) 0 ;
  gum::NodeId arg2 ;
  gum::NodeId arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  gum::NodeSet *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CliqueGraph_separator",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__CliqueGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CliqueGraph_separator" "', argument " "1"" of type '" "gum::CliqueGraph const *""'"); 
  }
  arg1 = reinterpret_cast< gum::CliqueGraph * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CliqueGraph_separator" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CliqueGraph_separator" "', argument " "3"" of type '" "gum::NodeId""'");
  } 
  arg3 = static_cast< gum::NodeId >(val3);
  {
    try {
      result = (gum::NodeSet *) &((gum::CliqueGraph const *)arg1)->separator(arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SetT_unsigned_int_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CliqueGraph_separator(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__CliqueGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_gum__Edge, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_CliqueGraph_separator__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__CliqueGraph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_CliqueGraph_separator__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'CliqueGraph_separator'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::CliqueGraph::separator(gum::Edge const &) const\n"
    "    gum::CliqueGraph::separator(gum::NodeId const,gum::NodeId const) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_CliqueGraph_containerPath(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::CliqueGraph *arg1 = (gum::CliqueGraph *) 0 ;
  gum::NodeId arg2 ;
  gum::NodeId arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< std::vector< unsigned int,std::allocator< unsigned int > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CliqueGraph_containerPath",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__CliqueGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CliqueGraph_containerPath" "', argument " "1"" of type '" "gum::CliqueGraph const *""'"); 
  }
  arg1 = reinterpret_cast< gum::CliqueGraph * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CliqueGraph_containerPath" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CliqueGraph_containerPath" "', argument " "3"" of type '" "gum::NodeId""'");
  } 
  arg3 = static_cast< gum::NodeId >(val3);
  {
    try {
      result = ((gum::CliqueGraph const *)arg1)->containerPath(arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< gum::NodeId,std::allocator< gum::NodeId > >(static_cast< const std::vector< gum::NodeId,std::allocator< gum::NodeId > >& >(result))), SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CliqueGraph_hasRunningIntersection(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::CliqueGraph *arg1 = (gum::CliqueGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CliqueGraph_hasRunningIntersection",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__CliqueGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CliqueGraph_hasRunningIntersection" "', argument " "1"" of type '" "gum::CliqueGraph const *""'"); 
  }
  arg1 = reinterpret_cast< gum::CliqueGraph * >(argp1);
  {
    try {
      result = (bool)((gum::CliqueGraph const *)arg1)->hasRunningIntersection();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CliqueGraph_isJoinTree(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::CliqueGraph *arg1 = (gum::CliqueGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CliqueGraph_isJoinTree",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__CliqueGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CliqueGraph_isJoinTree" "', argument " "1"" of type '" "gum::CliqueGraph const *""'"); 
  }
  arg1 = reinterpret_cast< gum::CliqueGraph * >(argp1);
  {
    try {
      result = (bool)((gum::CliqueGraph const *)arg1)->isJoinTree();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CliqueGraph___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::CliqueGraph *arg1 = (gum::CliqueGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CliqueGraph___str__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__CliqueGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CliqueGraph___str__" "', argument " "1"" of type '" "gum::CliqueGraph const *""'"); 
  }
  arg1 = reinterpret_cast< gum::CliqueGraph * >(argp1);
  {
    try {
      result = ((gum::CliqueGraph const *)arg1)->toString();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CliqueGraph_toDot(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::CliqueGraph *arg1 = (gum::CliqueGraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CliqueGraph_toDot",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__CliqueGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CliqueGraph_toDot" "', argument " "1"" of type '" "gum::CliqueGraph const *""'"); 
  }
  arg1 = reinterpret_cast< gum::CliqueGraph * >(argp1);
  {
    try {
      result = ((gum::CliqueGraph const *)arg1)->toDot();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CliqueGraph___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::CliqueGraph *arg1 = (gum::CliqueGraph *) 0 ;
  gum::CliqueGraph *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CliqueGraph___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__CliqueGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CliqueGraph___ne__" "', argument " "1"" of type '" "gum::CliqueGraph const *""'"); 
  }
  arg1 = reinterpret_cast< gum::CliqueGraph * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__CliqueGraph,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CliqueGraph___ne__" "', argument " "2"" of type '" "gum::CliqueGraph const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CliqueGraph___ne__" "', argument " "2"" of type '" "gum::CliqueGraph const &""'"); 
  }
  arg2 = reinterpret_cast< gum::CliqueGraph * >(argp2);
  {
    try {
      result = (bool)((gum::CliqueGraph const *)arg1)->operator !=((gum::CliqueGraph const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CliqueGraph___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::CliqueGraph *arg1 = (gum::CliqueGraph *) 0 ;
  gum::CliqueGraph *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CliqueGraph___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__CliqueGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CliqueGraph___eq__" "', argument " "1"" of type '" "gum::CliqueGraph const *""'"); 
  }
  arg1 = reinterpret_cast< gum::CliqueGraph * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__CliqueGraph,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CliqueGraph___eq__" "', argument " "2"" of type '" "gum::CliqueGraph const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CliqueGraph___eq__" "', argument " "2"" of type '" "gum::CliqueGraph const &""'"); 
  }
  arg2 = reinterpret_cast< gum::CliqueGraph * >(argp2);
  {
    try {
      result = (bool)((gum::CliqueGraph const *)arg1)->operator ==((gum::CliqueGraph const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CliqueGraph_clique(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::CliqueGraph *arg1 = (gum::CliqueGraph *) 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CliqueGraph_clique",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__CliqueGraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CliqueGraph_clique" "', argument " "1"" of type '" "gum::CliqueGraph const *""'"); 
  }
  arg1 = reinterpret_cast< gum::CliqueGraph * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CliqueGraph_clique" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (PyObject *)gum_CliqueGraph_clique((gum::CliqueGraph const *)arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *CliqueGraph_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gum__CliqueGraph, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Instantiation__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Instantiation *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Instantiation")) SWIG_fail;
  {
    try {
      result = (gum::Instantiation *)new gum::Instantiation();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__Instantiation, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Instantiation__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Instantiation *arg1 = 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::Instantiation *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Instantiation",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_gum__Instantiation,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Instantiation" "', argument " "1"" of type '" "gum::Instantiation const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Instantiation" "', argument " "1"" of type '" "gum::Instantiation const &""'"); 
  }
  arg1 = reinterpret_cast< gum::Instantiation * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Instantiation" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      result = (gum::Instantiation *)new gum::Instantiation((gum::Instantiation const &)*arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__Instantiation, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Instantiation__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Instantiation *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::Instantiation *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Instantiation",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_gum__Instantiation,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Instantiation" "', argument " "1"" of type '" "gum::Instantiation const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Instantiation" "', argument " "1"" of type '" "gum::Instantiation const &""'"); 
  }
  arg1 = reinterpret_cast< gum::Instantiation * >(argp1);
  {
    try {
      result = (gum::Instantiation *)new gum::Instantiation((gum::Instantiation const &)*arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__Instantiation, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Instantiation__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::MultiDimAdressable *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::Instantiation *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Instantiation",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_gum__MultiDimAdressable,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Instantiation" "', argument " "1"" of type '" "gum::MultiDimAdressable &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Instantiation" "', argument " "1"" of type '" "gum::MultiDimAdressable &""'"); 
  }
  arg1 = reinterpret_cast< gum::MultiDimAdressable * >(argp1);
  {
    try {
      result = (gum::Instantiation *)new gum::Instantiation(*arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__Instantiation, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Instantiation__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::MultiDimAdressable *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::Instantiation *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Instantiation",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_gum__MultiDimAdressable,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Instantiation" "', argument " "1"" of type '" "gum::MultiDimAdressable const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Instantiation" "', argument " "1"" of type '" "gum::MultiDimAdressable const &""'"); 
  }
  arg1 = reinterpret_cast< gum::MultiDimAdressable * >(argp1);
  {
    try {
      result = (gum::Instantiation *)new gum::Instantiation((gum::MultiDimAdressable const &)*arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__Instantiation, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Instantiation__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::MultiDimAdressable *arg1 = (gum::MultiDimAdressable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::Instantiation *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Instantiation",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__MultiDimAdressable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Instantiation" "', argument " "1"" of type '" "gum::MultiDimAdressable *""'"); 
  }
  arg1 = reinterpret_cast< gum::MultiDimAdressable * >(argp1);
  {
    try {
      result = (gum::Instantiation *)new gum::Instantiation(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__Instantiation, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Instantiation__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::MultiDimAdressable *arg1 = (gum::MultiDimAdressable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::Instantiation *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Instantiation",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__MultiDimAdressable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Instantiation" "', argument " "1"" of type '" "gum::MultiDimAdressable const *""'"); 
  }
  arg1 = reinterpret_cast< gum::MultiDimAdressable * >(argp1);
  {
    try {
      result = (gum::Instantiation *)new gum::Instantiation((gum::MultiDimAdressable const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__Instantiation, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Instantiation(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Instantiation__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_gum__Instantiation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Instantiation__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__MultiDimAdressable, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Instantiation__SWIG_3(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_gum__MultiDimAdressable, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Instantiation__SWIG_4(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__MultiDimAdressable, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Instantiation__SWIG_5(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__MultiDimAdressable, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Instantiation__SWIG_6(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_gum__Instantiation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Instantiation__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Instantiation'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::Instantiation::Instantiation()\n"
    "    gum::Instantiation::Instantiation(gum::Instantiation const &,bool const)\n"
    "    gum::Instantiation::Instantiation(gum::Instantiation const &)\n"
    "    gum::Instantiation::Instantiation(gum::MultiDimAdressable &)\n"
    "    gum::Instantiation::Instantiation(gum::MultiDimAdressable const &)\n"
    "    gum::Instantiation::Instantiation(gum::MultiDimAdressable *)\n"
    "    gum::Instantiation::Instantiation(gum::MultiDimAdressable const *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_Instantiation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Instantiation *arg1 = (gum::Instantiation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Instantiation",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__Instantiation, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Instantiation" "', argument " "1"" of type '" "gum::Instantiation *""'"); 
  }
  arg1 = reinterpret_cast< gum::Instantiation * >(argp1);
  {
    try {
      delete arg1;
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instantiation_nbrDim(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Instantiation *arg1 = (gum::Instantiation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::Idx result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Instantiation_nbrDim",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__Instantiation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instantiation_nbrDim" "', argument " "1"" of type '" "gum::Instantiation const *""'"); 
  }
  arg1 = reinterpret_cast< gum::Instantiation * >(argp1);
  {
    try {
      result = (gum::Idx)((gum::Instantiation const *)arg1)->nbrDim();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instantiation_add(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Instantiation *arg1 = (gum::Instantiation *) 0 ;
  gum::DiscreteVariable *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Instantiation_add",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__Instantiation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instantiation_add" "', argument " "1"" of type '" "gum::Instantiation *""'"); 
  }
  arg1 = reinterpret_cast< gum::Instantiation * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__DiscreteVariable,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Instantiation_add" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Instantiation_add" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  arg2 = reinterpret_cast< gum::DiscreteVariable * >(argp2);
  {
    try {
      (arg1)->add((gum::DiscreteVariable const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instantiation_erase(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Instantiation *arg1 = (gum::Instantiation *) 0 ;
  gum::DiscreteVariable *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Instantiation_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__Instantiation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instantiation_erase" "', argument " "1"" of type '" "gum::Instantiation *""'"); 
  }
  arg1 = reinterpret_cast< gum::Instantiation * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__DiscreteVariable,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Instantiation_erase" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Instantiation_erase" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  arg2 = reinterpret_cast< gum::DiscreteVariable * >(argp2);
  {
    try {
      (arg1)->erase((gum::DiscreteVariable const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instantiation_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Instantiation *arg1 = (gum::Instantiation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Instantiation_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__Instantiation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instantiation_clear" "', argument " "1"" of type '" "gum::Instantiation *""'"); 
  }
  arg1 = reinterpret_cast< gum::Instantiation * >(argp1);
  {
    try {
      (arg1)->clear();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instantiation_domainSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Instantiation *arg1 = (gum::Instantiation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::Size result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Instantiation_domainSize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__Instantiation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instantiation_domainSize" "', argument " "1"" of type '" "gum::Instantiation const *""'"); 
  }
  arg1 = reinterpret_cast< gum::Instantiation * >(argp1);
  {
    try {
      result = (gum::Size)((gum::Instantiation const *)arg1)->domainSize();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instantiation_pos(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Instantiation *arg1 = (gum::Instantiation *) 0 ;
  gum::DiscreteVariable *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::Idx result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Instantiation_pos",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__Instantiation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instantiation_pos" "', argument " "1"" of type '" "gum::Instantiation const *""'"); 
  }
  arg1 = reinterpret_cast< gum::Instantiation * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__DiscreteVariable,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Instantiation_pos" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Instantiation_pos" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  arg2 = reinterpret_cast< gum::DiscreteVariable * >(argp2);
  {
    try {
      result = (gum::Idx)((gum::Instantiation const *)arg1)->pos((gum::DiscreteVariable const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instantiation_val__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Instantiation *arg1 = (gum::Instantiation *) 0 ;
  gum::Idx arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::Idx result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Instantiation_val",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__Instantiation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instantiation_val" "', argument " "1"" of type '" "gum::Instantiation const *""'"); 
  }
  arg1 = reinterpret_cast< gum::Instantiation * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Instantiation_val" "', argument " "2"" of type '" "gum::Idx""'");
  } 
  arg2 = static_cast< gum::Idx >(val2);
  {
    try {
      result = (gum::Idx)((gum::Instantiation const *)arg1)->val(arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instantiation_val__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Instantiation *arg1 = (gum::Instantiation *) 0 ;
  gum::DiscreteVariable *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::Idx result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Instantiation_val",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__Instantiation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instantiation_val" "', argument " "1"" of type '" "gum::Instantiation const *""'"); 
  }
  arg1 = reinterpret_cast< gum::Instantiation * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__DiscreteVariable,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Instantiation_val" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Instantiation_val" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  arg2 = reinterpret_cast< gum::DiscreteVariable * >(argp2);
  {
    try {
      result = (gum::Idx)((gum::Instantiation const *)arg1)->val((gum::DiscreteVariable const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instantiation_val(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__Instantiation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_gum__DiscreteVariable, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Instantiation_val__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__Instantiation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Instantiation_val__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Instantiation_val'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::Instantiation::val(gum::Idx) const\n"
    "    gum::Instantiation::val(gum::DiscreteVariable const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Instantiation_valFromPtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Instantiation *arg1 = (gum::Instantiation *) 0 ;
  gum::DiscreteVariable *arg2 = (gum::DiscreteVariable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::Idx result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Instantiation_valFromPtr",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__Instantiation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instantiation_valFromPtr" "', argument " "1"" of type '" "gum::Instantiation const *""'"); 
  }
  arg1 = reinterpret_cast< gum::Instantiation * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_gum__DiscreteVariable, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Instantiation_valFromPtr" "', argument " "2"" of type '" "gum::DiscreteVariable const *""'"); 
  }
  arg2 = reinterpret_cast< gum::DiscreteVariable * >(argp2);
  {
    try {
      result = (gum::Idx)((gum::Instantiation const *)arg1)->valFromPtr((gum::DiscreteVariable const *)arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instantiation_variable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Instantiation *arg1 = (gum::Instantiation *) 0 ;
  gum::Idx arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::DiscreteVariable *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Instantiation_variable",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__Instantiation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instantiation_variable" "', argument " "1"" of type '" "gum::Instantiation const *""'"); 
  }
  arg1 = reinterpret_cast< gum::Instantiation * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Instantiation_variable" "', argument " "2"" of type '" "gum::Idx""'");
  } 
  arg2 = static_cast< gum::Idx >(val2);
  {
    try {
      result = (gum::DiscreteVariable *) &((gum::Instantiation const *)arg1)->variable(arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__DiscreteVariable, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instantiation_chgVal__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Instantiation *arg1 = (gum::Instantiation *) 0 ;
  gum::DiscreteVariable *arg2 = 0 ;
  gum::Idx arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  gum::Instantiation *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Instantiation_chgVal",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__Instantiation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instantiation_chgVal" "', argument " "1"" of type '" "gum::Instantiation *""'"); 
  }
  arg1 = reinterpret_cast< gum::Instantiation * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__DiscreteVariable,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Instantiation_chgVal" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Instantiation_chgVal" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  arg2 = reinterpret_cast< gum::DiscreteVariable * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Instantiation_chgVal" "', argument " "3"" of type '" "gum::Idx""'");
  } 
  arg3 = static_cast< gum::Idx >(val3);
  {
    try {
      result = (gum::Instantiation *) &(arg1)->chgVal((gum::DiscreteVariable const &)*arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__Instantiation, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instantiation_chgVal__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Instantiation *arg1 = (gum::Instantiation *) 0 ;
  gum::DiscreteVariable *arg2 = (gum::DiscreteVariable *) 0 ;
  gum::Idx arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  gum::Instantiation *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Instantiation_chgVal",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__Instantiation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instantiation_chgVal" "', argument " "1"" of type '" "gum::Instantiation *""'"); 
  }
  arg1 = reinterpret_cast< gum::Instantiation * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_gum__DiscreteVariable, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Instantiation_chgVal" "', argument " "2"" of type '" "gum::DiscreteVariable const *""'"); 
  }
  arg2 = reinterpret_cast< gum::DiscreteVariable * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Instantiation_chgVal" "', argument " "3"" of type '" "gum::Idx""'");
  } 
  arg3 = static_cast< gum::Idx >(val3);
  {
    try {
      result = (gum::Instantiation *) &(arg1)->chgVal((gum::DiscreteVariable const *)arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__Instantiation, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instantiation_chgVal__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Instantiation *arg1 = (gum::Instantiation *) 0 ;
  gum::Idx arg2 ;
  gum::Idx arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  gum::Instantiation *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Instantiation_chgVal",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__Instantiation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instantiation_chgVal" "', argument " "1"" of type '" "gum::Instantiation *""'"); 
  }
  arg1 = reinterpret_cast< gum::Instantiation * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Instantiation_chgVal" "', argument " "2"" of type '" "gum::Idx""'");
  } 
  arg2 = static_cast< gum::Idx >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Instantiation_chgVal" "', argument " "3"" of type '" "gum::Idx""'");
  } 
  arg3 = static_cast< gum::Idx >(val3);
  {
    try {
      result = (gum::Instantiation *) &(arg1)->chgVal(arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__Instantiation, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instantiation_chgVal(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__Instantiation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_gum__DiscreteVariable, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Instantiation_chgVal__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__Instantiation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_gum__DiscreteVariable, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Instantiation_chgVal__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__Instantiation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Instantiation_chgVal__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Instantiation_chgVal'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::Instantiation::chgVal(gum::DiscreteVariable const &,gum::Idx)\n"
    "    gum::Instantiation::chgVal(gum::DiscreteVariable const *,gum::Idx)\n"
    "    gum::Instantiation::chgVal(gum::Idx,gum::Idx)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Instantiation_setVals(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Instantiation *arg1 = (gum::Instantiation *) 0 ;
  gum::Instantiation *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::Instantiation *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Instantiation_setVals",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__Instantiation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instantiation_setVals" "', argument " "1"" of type '" "gum::Instantiation *""'"); 
  }
  arg1 = reinterpret_cast< gum::Instantiation * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__Instantiation,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Instantiation_setVals" "', argument " "2"" of type '" "gum::Instantiation const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Instantiation_setVals" "', argument " "2"" of type '" "gum::Instantiation const &""'"); 
  }
  arg2 = reinterpret_cast< gum::Instantiation * >(argp2);
  {
    try {
      result = (gum::Instantiation *) &(arg1)->setVals((gum::Instantiation const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__Instantiation, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instantiation_contains__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Instantiation *arg1 = (gum::Instantiation *) 0 ;
  gum::DiscreteVariable *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Instantiation_contains",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__Instantiation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instantiation_contains" "', argument " "1"" of type '" "gum::Instantiation const *""'"); 
  }
  arg1 = reinterpret_cast< gum::Instantiation * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__DiscreteVariable,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Instantiation_contains" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Instantiation_contains" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  arg2 = reinterpret_cast< gum::DiscreteVariable * >(argp2);
  {
    try {
      result = (bool)((gum::Instantiation const *)arg1)->contains((gum::DiscreteVariable const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instantiation_contains__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Instantiation *arg1 = (gum::Instantiation *) 0 ;
  gum::DiscreteVariable *arg2 = (gum::DiscreteVariable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Instantiation_contains",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__Instantiation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instantiation_contains" "', argument " "1"" of type '" "gum::Instantiation const *""'"); 
  }
  arg1 = reinterpret_cast< gum::Instantiation * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_gum__DiscreteVariable, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Instantiation_contains" "', argument " "2"" of type '" "gum::DiscreteVariable const *""'"); 
  }
  arg2 = reinterpret_cast< gum::DiscreteVariable * >(argp2);
  {
    try {
      result = (bool)((gum::Instantiation const *)arg1)->contains((gum::DiscreteVariable const *)arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instantiation_contains(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__Instantiation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_gum__DiscreteVariable, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Instantiation_contains__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__Instantiation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_gum__DiscreteVariable, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Instantiation_contains__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Instantiation_contains'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::Instantiation::contains(gum::DiscreteVariable const &) const\n"
    "    gum::Instantiation::contains(gum::DiscreteVariable const *) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Instantiation_variablesSequence(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Instantiation *arg1 = (gum::Instantiation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::Sequence< gum::DiscreteVariable const * > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Instantiation_variablesSequence",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__Instantiation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instantiation_variablesSequence" "', argument " "1"" of type '" "gum::Instantiation const *""'"); 
  }
  arg1 = reinterpret_cast< gum::Instantiation * >(argp1);
  {
    try {
      result = (gum::Sequence< gum::DiscreteVariable const * > *) &((gum::Instantiation const *)arg1)->variablesSequence();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__SequenceT_gum__DiscreteVariable_const_p_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instantiation_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Instantiation *arg1 = (gum::Instantiation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Instantiation_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__Instantiation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instantiation_empty" "', argument " "1"" of type '" "gum::Instantiation const *""'"); 
  }
  arg1 = reinterpret_cast< gum::Instantiation * >(argp1);
  {
    try {
      result = (bool)((gum::Instantiation const *)arg1)->empty();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instantiation_inOverflow(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Instantiation *arg1 = (gum::Instantiation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Instantiation_inOverflow",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__Instantiation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instantiation_inOverflow" "', argument " "1"" of type '" "gum::Instantiation const *""'"); 
  }
  arg1 = reinterpret_cast< gum::Instantiation * >(argp1);
  {
    try {
      result = (bool)((gum::Instantiation const *)arg1)->inOverflow();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instantiation_unsetOverflow(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Instantiation *arg1 = (gum::Instantiation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Instantiation_unsetOverflow",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__Instantiation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instantiation_unsetOverflow" "', argument " "1"" of type '" "gum::Instantiation *""'"); 
  }
  arg1 = reinterpret_cast< gum::Instantiation * >(argp1);
  {
    try {
      (arg1)->unsetOverflow();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instantiation_unsetEnd(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Instantiation *arg1 = (gum::Instantiation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Instantiation_unsetEnd",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__Instantiation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instantiation_unsetEnd" "', argument " "1"" of type '" "gum::Instantiation *""'"); 
  }
  arg1 = reinterpret_cast< gum::Instantiation * >(argp1);
  {
    try {
      (arg1)->unsetEnd();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instantiation_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Instantiation *arg1 = (gum::Instantiation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Instantiation_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__Instantiation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instantiation_end" "', argument " "1"" of type '" "gum::Instantiation const *""'"); 
  }
  arg1 = reinterpret_cast< gum::Instantiation * >(argp1);
  {
    try {
      result = (bool)((gum::Instantiation const *)arg1)->end();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instantiation_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Instantiation *arg1 = (gum::Instantiation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Instantiation_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__Instantiation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instantiation_rend" "', argument " "1"" of type '" "gum::Instantiation const *""'"); 
  }
  arg1 = reinterpret_cast< gum::Instantiation * >(argp1);
  {
    try {
      result = (bool)((gum::Instantiation const *)arg1)->rend();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instantiation_inc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Instantiation *arg1 = (gum::Instantiation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Instantiation_inc",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__Instantiation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instantiation_inc" "', argument " "1"" of type '" "gum::Instantiation *""'"); 
  }
  arg1 = reinterpret_cast< gum::Instantiation * >(argp1);
  {
    try {
      (arg1)->inc();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instantiation_dec(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Instantiation *arg1 = (gum::Instantiation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Instantiation_dec",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__Instantiation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instantiation_dec" "', argument " "1"" of type '" "gum::Instantiation *""'"); 
  }
  arg1 = reinterpret_cast< gum::Instantiation * >(argp1);
  {
    try {
      (arg1)->dec();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instantiation_incIn(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Instantiation *arg1 = (gum::Instantiation *) 0 ;
  gum::Instantiation *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Instantiation_incIn",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__Instantiation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instantiation_incIn" "', argument " "1"" of type '" "gum::Instantiation *""'"); 
  }
  arg1 = reinterpret_cast< gum::Instantiation * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__Instantiation,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Instantiation_incIn" "', argument " "2"" of type '" "gum::Instantiation const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Instantiation_incIn" "', argument " "2"" of type '" "gum::Instantiation const &""'"); 
  }
  arg2 = reinterpret_cast< gum::Instantiation * >(argp2);
  {
    try {
      (arg1)->incIn((gum::Instantiation const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instantiation_decIn(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Instantiation *arg1 = (gum::Instantiation *) 0 ;
  gum::Instantiation *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Instantiation_decIn",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__Instantiation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instantiation_decIn" "', argument " "1"" of type '" "gum::Instantiation *""'"); 
  }
  arg1 = reinterpret_cast< gum::Instantiation * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__Instantiation,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Instantiation_decIn" "', argument " "2"" of type '" "gum::Instantiation const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Instantiation_decIn" "', argument " "2"" of type '" "gum::Instantiation const &""'"); 
  }
  arg2 = reinterpret_cast< gum::Instantiation * >(argp2);
  {
    try {
      (arg1)->decIn((gum::Instantiation const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instantiation_incOut(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Instantiation *arg1 = (gum::Instantiation *) 0 ;
  gum::Instantiation *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Instantiation_incOut",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__Instantiation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instantiation_incOut" "', argument " "1"" of type '" "gum::Instantiation *""'"); 
  }
  arg1 = reinterpret_cast< gum::Instantiation * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__Instantiation,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Instantiation_incOut" "', argument " "2"" of type '" "gum::Instantiation const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Instantiation_incOut" "', argument " "2"" of type '" "gum::Instantiation const &""'"); 
  }
  arg2 = reinterpret_cast< gum::Instantiation * >(argp2);
  {
    try {
      (arg1)->incOut((gum::Instantiation const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instantiation_decOut(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Instantiation *arg1 = (gum::Instantiation *) 0 ;
  gum::Instantiation *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Instantiation_decOut",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__Instantiation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instantiation_decOut" "', argument " "1"" of type '" "gum::Instantiation *""'"); 
  }
  arg1 = reinterpret_cast< gum::Instantiation * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__Instantiation,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Instantiation_decOut" "', argument " "2"" of type '" "gum::Instantiation const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Instantiation_decOut" "', argument " "2"" of type '" "gum::Instantiation const &""'"); 
  }
  arg2 = reinterpret_cast< gum::Instantiation * >(argp2);
  {
    try {
      (arg1)->decOut((gum::Instantiation const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instantiation_incNotVar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Instantiation *arg1 = (gum::Instantiation *) 0 ;
  gum::DiscreteVariable *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Instantiation_incNotVar",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__Instantiation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instantiation_incNotVar" "', argument " "1"" of type '" "gum::Instantiation *""'"); 
  }
  arg1 = reinterpret_cast< gum::Instantiation * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__DiscreteVariable,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Instantiation_incNotVar" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Instantiation_incNotVar" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  arg2 = reinterpret_cast< gum::DiscreteVariable * >(argp2);
  {
    try {
      (arg1)->incNotVar((gum::DiscreteVariable const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instantiation_decNotVar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Instantiation *arg1 = (gum::Instantiation *) 0 ;
  gum::DiscreteVariable *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Instantiation_decNotVar",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__Instantiation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instantiation_decNotVar" "', argument " "1"" of type '" "gum::Instantiation *""'"); 
  }
  arg1 = reinterpret_cast< gum::Instantiation * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__DiscreteVariable,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Instantiation_decNotVar" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Instantiation_decNotVar" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  arg2 = reinterpret_cast< gum::DiscreteVariable * >(argp2);
  {
    try {
      (arg1)->decNotVar((gum::DiscreteVariable const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instantiation_incVar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Instantiation *arg1 = (gum::Instantiation *) 0 ;
  gum::DiscreteVariable *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Instantiation_incVar",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__Instantiation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instantiation_incVar" "', argument " "1"" of type '" "gum::Instantiation *""'"); 
  }
  arg1 = reinterpret_cast< gum::Instantiation * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__DiscreteVariable,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Instantiation_incVar" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Instantiation_incVar" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  arg2 = reinterpret_cast< gum::DiscreteVariable * >(argp2);
  {
    try {
      (arg1)->incVar((gum::DiscreteVariable const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instantiation_decVar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Instantiation *arg1 = (gum::Instantiation *) 0 ;
  gum::DiscreteVariable *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Instantiation_decVar",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__Instantiation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instantiation_decVar" "', argument " "1"" of type '" "gum::Instantiation *""'"); 
  }
  arg1 = reinterpret_cast< gum::Instantiation * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__DiscreteVariable,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Instantiation_decVar" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Instantiation_decVar" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  arg2 = reinterpret_cast< gum::DiscreteVariable * >(argp2);
  {
    try {
      (arg1)->decVar((gum::DiscreteVariable const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instantiation_setFirst(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Instantiation *arg1 = (gum::Instantiation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Instantiation_setFirst",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__Instantiation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instantiation_setFirst" "', argument " "1"" of type '" "gum::Instantiation *""'"); 
  }
  arg1 = reinterpret_cast< gum::Instantiation * >(argp1);
  {
    try {
      (arg1)->setFirst();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instantiation_setLast(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Instantiation *arg1 = (gum::Instantiation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Instantiation_setLast",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__Instantiation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instantiation_setLast" "', argument " "1"" of type '" "gum::Instantiation *""'"); 
  }
  arg1 = reinterpret_cast< gum::Instantiation * >(argp1);
  {
    try {
      (arg1)->setLast();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instantiation_setFirstIn(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Instantiation *arg1 = (gum::Instantiation *) 0 ;
  gum::Instantiation *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Instantiation_setFirstIn",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__Instantiation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instantiation_setFirstIn" "', argument " "1"" of type '" "gum::Instantiation *""'"); 
  }
  arg1 = reinterpret_cast< gum::Instantiation * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__Instantiation,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Instantiation_setFirstIn" "', argument " "2"" of type '" "gum::Instantiation const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Instantiation_setFirstIn" "', argument " "2"" of type '" "gum::Instantiation const &""'"); 
  }
  arg2 = reinterpret_cast< gum::Instantiation * >(argp2);
  {
    try {
      (arg1)->setFirstIn((gum::Instantiation const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instantiation_setLastIn(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Instantiation *arg1 = (gum::Instantiation *) 0 ;
  gum::Instantiation *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Instantiation_setLastIn",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__Instantiation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instantiation_setLastIn" "', argument " "1"" of type '" "gum::Instantiation *""'"); 
  }
  arg1 = reinterpret_cast< gum::Instantiation * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__Instantiation,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Instantiation_setLastIn" "', argument " "2"" of type '" "gum::Instantiation const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Instantiation_setLastIn" "', argument " "2"" of type '" "gum::Instantiation const &""'"); 
  }
  arg2 = reinterpret_cast< gum::Instantiation * >(argp2);
  {
    try {
      (arg1)->setLastIn((gum::Instantiation const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instantiation_setFirstOut(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Instantiation *arg1 = (gum::Instantiation *) 0 ;
  gum::Instantiation *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Instantiation_setFirstOut",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__Instantiation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instantiation_setFirstOut" "', argument " "1"" of type '" "gum::Instantiation *""'"); 
  }
  arg1 = reinterpret_cast< gum::Instantiation * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__Instantiation,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Instantiation_setFirstOut" "', argument " "2"" of type '" "gum::Instantiation const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Instantiation_setFirstOut" "', argument " "2"" of type '" "gum::Instantiation const &""'"); 
  }
  arg2 = reinterpret_cast< gum::Instantiation * >(argp2);
  {
    try {
      (arg1)->setFirstOut((gum::Instantiation const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instantiation_setLastOut(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Instantiation *arg1 = (gum::Instantiation *) 0 ;
  gum::Instantiation *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Instantiation_setLastOut",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__Instantiation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instantiation_setLastOut" "', argument " "1"" of type '" "gum::Instantiation *""'"); 
  }
  arg1 = reinterpret_cast< gum::Instantiation * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__Instantiation,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Instantiation_setLastOut" "', argument " "2"" of type '" "gum::Instantiation const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Instantiation_setLastOut" "', argument " "2"" of type '" "gum::Instantiation const &""'"); 
  }
  arg2 = reinterpret_cast< gum::Instantiation * >(argp2);
  {
    try {
      (arg1)->setLastOut((gum::Instantiation const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instantiation_setFirstNotVar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Instantiation *arg1 = (gum::Instantiation *) 0 ;
  gum::DiscreteVariable *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Instantiation_setFirstNotVar",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__Instantiation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instantiation_setFirstNotVar" "', argument " "1"" of type '" "gum::Instantiation *""'"); 
  }
  arg1 = reinterpret_cast< gum::Instantiation * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__DiscreteVariable,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Instantiation_setFirstNotVar" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Instantiation_setFirstNotVar" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  arg2 = reinterpret_cast< gum::DiscreteVariable * >(argp2);
  {
    try {
      (arg1)->setFirstNotVar((gum::DiscreteVariable const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instantiation_setLastNotVar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Instantiation *arg1 = (gum::Instantiation *) 0 ;
  gum::DiscreteVariable *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Instantiation_setLastNotVar",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__Instantiation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instantiation_setLastNotVar" "', argument " "1"" of type '" "gum::Instantiation *""'"); 
  }
  arg1 = reinterpret_cast< gum::Instantiation * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__DiscreteVariable,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Instantiation_setLastNotVar" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Instantiation_setLastNotVar" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  arg2 = reinterpret_cast< gum::DiscreteVariable * >(argp2);
  {
    try {
      (arg1)->setLastNotVar((gum::DiscreteVariable const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instantiation_setFirstVar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Instantiation *arg1 = (gum::Instantiation *) 0 ;
  gum::DiscreteVariable *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Instantiation_setFirstVar",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__Instantiation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instantiation_setFirstVar" "', argument " "1"" of type '" "gum::Instantiation *""'"); 
  }
  arg1 = reinterpret_cast< gum::Instantiation * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__DiscreteVariable,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Instantiation_setFirstVar" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Instantiation_setFirstVar" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  arg2 = reinterpret_cast< gum::DiscreteVariable * >(argp2);
  {
    try {
      (arg1)->setFirstVar((gum::DiscreteVariable const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instantiation_setLastVar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Instantiation *arg1 = (gum::Instantiation *) 0 ;
  gum::DiscreteVariable *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Instantiation_setLastVar",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__Instantiation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instantiation_setLastVar" "', argument " "1"" of type '" "gum::Instantiation *""'"); 
  }
  arg1 = reinterpret_cast< gum::Instantiation * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__DiscreteVariable,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Instantiation_setLastVar" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Instantiation_setLastVar" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  arg2 = reinterpret_cast< gum::DiscreteVariable * >(argp2);
  {
    try {
      (arg1)->setLastVar((gum::DiscreteVariable const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instantiation_actAsSlave(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Instantiation *arg1 = (gum::Instantiation *) 0 ;
  gum::MultiDimAdressable *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Instantiation_actAsSlave",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__Instantiation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instantiation_actAsSlave" "', argument " "1"" of type '" "gum::Instantiation *""'"); 
  }
  arg1 = reinterpret_cast< gum::Instantiation * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__MultiDimAdressable,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Instantiation_actAsSlave" "', argument " "2"" of type '" "gum::MultiDimAdressable &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Instantiation_actAsSlave" "', argument " "2"" of type '" "gum::MultiDimAdressable &""'"); 
  }
  arg2 = reinterpret_cast< gum::MultiDimAdressable * >(argp2);
  {
    try {
      result = (bool)(arg1)->actAsSlave(*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instantiation_forgetMaster(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Instantiation *arg1 = (gum::Instantiation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Instantiation_forgetMaster",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__Instantiation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instantiation_forgetMaster" "', argument " "1"" of type '" "gum::Instantiation *""'"); 
  }
  arg1 = reinterpret_cast< gum::Instantiation * >(argp1);
  {
    try {
      result = (bool)(arg1)->forgetMaster();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instantiation_isSlave(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Instantiation *arg1 = (gum::Instantiation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Instantiation_isSlave",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__Instantiation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instantiation_isSlave" "', argument " "1"" of type '" "gum::Instantiation const *""'"); 
  }
  arg1 = reinterpret_cast< gum::Instantiation * >(argp1);
  {
    try {
      result = (bool)((gum::Instantiation const *)arg1)->isSlave();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instantiation_isMaster__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Instantiation *arg1 = (gum::Instantiation *) 0 ;
  gum::MultiDimAdressable *arg2 = (gum::MultiDimAdressable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Instantiation_isMaster",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__Instantiation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instantiation_isMaster" "', argument " "1"" of type '" "gum::Instantiation const *""'"); 
  }
  arg1 = reinterpret_cast< gum::Instantiation * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_gum__MultiDimAdressable, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Instantiation_isMaster" "', argument " "2"" of type '" "gum::MultiDimAdressable const *""'"); 
  }
  arg2 = reinterpret_cast< gum::MultiDimAdressable * >(argp2);
  {
    try {
      result = (bool)((gum::Instantiation const *)arg1)->isMaster((gum::MultiDimAdressable const *)arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instantiation_isMaster__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Instantiation *arg1 = (gum::Instantiation *) 0 ;
  gum::MultiDimAdressable *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Instantiation_isMaster",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__Instantiation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instantiation_isMaster" "', argument " "1"" of type '" "gum::Instantiation const *""'"); 
  }
  arg1 = reinterpret_cast< gum::Instantiation * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__MultiDimAdressable,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Instantiation_isMaster" "', argument " "2"" of type '" "gum::MultiDimAdressable const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Instantiation_isMaster" "', argument " "2"" of type '" "gum::MultiDimAdressable const &""'"); 
  }
  arg2 = reinterpret_cast< gum::MultiDimAdressable * >(argp2);
  {
    try {
      result = (bool)((gum::Instantiation const *)arg1)->isMaster((gum::MultiDimAdressable const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instantiation_isMaster(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__Instantiation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_gum__MultiDimAdressable, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Instantiation_isMaster__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__Instantiation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_gum__MultiDimAdressable, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Instantiation_isMaster__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Instantiation_isMaster'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::Instantiation::isMaster(gum::MultiDimAdressable const *) const\n"
    "    gum::Instantiation::isMaster(gum::MultiDimAdressable const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Instantiation_synchronizeWithMaster(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Instantiation *arg1 = (gum::Instantiation *) 0 ;
  gum::MultiDimAdressable *arg2 = (gum::MultiDimAdressable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Instantiation_synchronizeWithMaster",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__Instantiation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instantiation_synchronizeWithMaster" "', argument " "1"" of type '" "gum::Instantiation *""'"); 
  }
  arg1 = reinterpret_cast< gum::Instantiation * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_gum__MultiDimAdressable, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Instantiation_synchronizeWithMaster" "', argument " "2"" of type '" "gum::MultiDimAdressable const *""'"); 
  }
  arg2 = reinterpret_cast< gum::MultiDimAdressable * >(argp2);
  {
    try {
      (arg1)->synchronizeWithMaster((gum::MultiDimAdressable const *)arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instantiation_addWithMaster(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Instantiation *arg1 = (gum::Instantiation *) 0 ;
  gum::MultiDimAdressable *arg2 = (gum::MultiDimAdressable *) 0 ;
  gum::DiscreteVariable *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Instantiation_addWithMaster",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__Instantiation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instantiation_addWithMaster" "', argument " "1"" of type '" "gum::Instantiation *""'"); 
  }
  arg1 = reinterpret_cast< gum::Instantiation * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_gum__MultiDimAdressable, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Instantiation_addWithMaster" "', argument " "2"" of type '" "gum::MultiDimAdressable const *""'"); 
  }
  arg2 = reinterpret_cast< gum::MultiDimAdressable * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_gum__DiscreteVariable,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Instantiation_addWithMaster" "', argument " "3"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Instantiation_addWithMaster" "', argument " "3"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  arg3 = reinterpret_cast< gum::DiscreteVariable * >(argp3);
  {
    try {
      (arg1)->addWithMaster((gum::MultiDimAdressable const *)arg2,(gum::DiscreteVariable const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instantiation_eraseWithMaster(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Instantiation *arg1 = (gum::Instantiation *) 0 ;
  gum::MultiDimAdressable *arg2 = (gum::MultiDimAdressable *) 0 ;
  gum::DiscreteVariable *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Instantiation_eraseWithMaster",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__Instantiation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instantiation_eraseWithMaster" "', argument " "1"" of type '" "gum::Instantiation *""'"); 
  }
  arg1 = reinterpret_cast< gum::Instantiation * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_gum__MultiDimAdressable, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Instantiation_eraseWithMaster" "', argument " "2"" of type '" "gum::MultiDimAdressable const *""'"); 
  }
  arg2 = reinterpret_cast< gum::MultiDimAdressable * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_gum__DiscreteVariable,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Instantiation_eraseWithMaster" "', argument " "3"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Instantiation_eraseWithMaster" "', argument " "3"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  arg3 = reinterpret_cast< gum::DiscreteVariable * >(argp3);
  {
    try {
      (arg1)->eraseWithMaster((gum::MultiDimAdressable const *)arg2,(gum::DiscreteVariable const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instantiation___iadd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Instantiation *arg1 = (gum::Instantiation *) 0 ;
  gum::Size arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::Instantiation *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Instantiation___iadd__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__Instantiation, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instantiation___iadd__" "', argument " "1"" of type '" "gum::Instantiation *""'"); 
  }
  arg1 = reinterpret_cast< gum::Instantiation * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Instantiation___iadd__" "', argument " "2"" of type '" "gum::Size""'");
  } 
  arg2 = static_cast< gum::Size >(val2);
  {
    try {
      result = (gum::Instantiation *) &(arg1)->operator +=(arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__Instantiation, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instantiation___isub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Instantiation *arg1 = (gum::Instantiation *) 0 ;
  gum::Size arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::Instantiation *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Instantiation___isub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__Instantiation, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instantiation___isub__" "', argument " "1"" of type '" "gum::Instantiation *""'"); 
  }
  arg1 = reinterpret_cast< gum::Instantiation * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Instantiation___isub__" "', argument " "2"" of type '" "gum::Size""'");
  } 
  arg2 = static_cast< gum::Size >(val2);
  {
    try {
      result = (gum::Instantiation *) &(arg1)->operator -=(arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__Instantiation, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instantiation_hamming(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Instantiation *arg1 = (gum::Instantiation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::Idx result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Instantiation_hamming",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__Instantiation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instantiation_hamming" "', argument " "1"" of type '" "gum::Instantiation const *""'"); 
  }
  arg1 = reinterpret_cast< gum::Instantiation * >(argp1);
  {
    try {
      result = (gum::Idx)((gum::Instantiation const *)arg1)->hamming();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instantiation___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Instantiation *arg1 = (gum::Instantiation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Instantiation___str__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__Instantiation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instantiation___str__" "', argument " "1"" of type '" "gum::Instantiation const *""'"); 
  }
  arg1 = reinterpret_cast< gum::Instantiation * >(argp1);
  {
    try {
      result = ((gum::Instantiation const *)arg1)->toString();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instantiation_reorder__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Instantiation *arg1 = (gum::Instantiation *) 0 ;
  gum::Sequence< gum::DiscreteVariable const * > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Instantiation_reorder",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__Instantiation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instantiation_reorder" "', argument " "1"" of type '" "gum::Instantiation *""'"); 
  }
  arg1 = reinterpret_cast< gum::Instantiation * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__SequenceT_gum__DiscreteVariable_const_p_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Instantiation_reorder" "', argument " "2"" of type '" "gum::Sequence< gum::DiscreteVariable const * > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Instantiation_reorder" "', argument " "2"" of type '" "gum::Sequence< gum::DiscreteVariable const * > const &""'"); 
  }
  arg2 = reinterpret_cast< gum::Sequence< gum::DiscreteVariable const * > * >(argp2);
  {
    try {
      (arg1)->reorder((gum::Sequence< gum::DiscreteVariable const * > const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instantiation_reorder__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Instantiation *arg1 = (gum::Instantiation *) 0 ;
  gum::Instantiation *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Instantiation_reorder",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__Instantiation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instantiation_reorder" "', argument " "1"" of type '" "gum::Instantiation *""'"); 
  }
  arg1 = reinterpret_cast< gum::Instantiation * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__Instantiation,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Instantiation_reorder" "', argument " "2"" of type '" "gum::Instantiation const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Instantiation_reorder" "', argument " "2"" of type '" "gum::Instantiation const &""'"); 
  }
  arg2 = reinterpret_cast< gum::Instantiation * >(argp2);
  {
    try {
      (arg1)->reorder((gum::Instantiation const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Instantiation_reorder(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__Instantiation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_gum__SequenceT_gum__DiscreteVariable_const_p_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Instantiation_reorder__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__Instantiation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_gum__Instantiation, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Instantiation_reorder__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Instantiation_reorder'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::Instantiation::reorder(gum::Sequence< gum::DiscreteVariable const * > const &)\n"
    "    gum::Instantiation::reorder(gum::Instantiation const &)\n");
  return 0;
}


SWIGINTERN PyObject *Instantiation_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gum__Instantiation, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var___list_end_safe_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable __list_end_safe is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var___list_end_safe_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(gum::__list_end_safe), SWIGTYPE_p_void,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var___list_end_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable __list_end is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var___list_end_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(gum::__list_end), SWIGTYPE_p_void,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_delete_DAGmodel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::DAGmodel *arg1 = (gum::DAGmodel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_DAGmodel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__DAGmodel, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DAGmodel" "', argument " "1"" of type '" "gum::DAGmodel *""'"); 
  }
  arg1 = reinterpret_cast< gum::DAGmodel * >(argp1);
  {
    try {
      delete arg1;
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DAGmodel_property(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::DAGmodel *arg1 = (gum::DAGmodel *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DAGmodel_property",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__DAGmodel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DAGmodel_property" "', argument " "1"" of type '" "gum::DAGmodel const *""'"); 
  }
  arg1 = reinterpret_cast< gum::DAGmodel * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DAGmodel_property" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DAGmodel_property" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (std::string *) &((gum::DAGmodel const *)arg1)->property((std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DAGmodel_propertyWithDefault(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::DAGmodel *arg1 = (gum::DAGmodel *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DAGmodel_propertyWithDefault",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__DAGmodel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DAGmodel_propertyWithDefault" "', argument " "1"" of type '" "gum::DAGmodel const *""'"); 
  }
  arg1 = reinterpret_cast< gum::DAGmodel * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DAGmodel_propertyWithDefault" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DAGmodel_propertyWithDefault" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DAGmodel_propertyWithDefault" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DAGmodel_propertyWithDefault" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      result = (std::string *) &((gum::DAGmodel const *)arg1)->propertyWithDefault((std::string const &)*arg2,(std::string const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DAGmodel_setProperty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::DAGmodel *arg1 = (gum::DAGmodel *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DAGmodel_setProperty",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__DAGmodel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DAGmodel_setProperty" "', argument " "1"" of type '" "gum::DAGmodel *""'"); 
  }
  arg1 = reinterpret_cast< gum::DAGmodel * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DAGmodel_setProperty" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DAGmodel_setProperty" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DAGmodel_setProperty" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DAGmodel_setProperty" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->setProperty((std::string const &)*arg2,(std::string const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DAGmodel_dag(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::DAGmodel *arg1 = (gum::DAGmodel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::DAG *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DAGmodel_dag",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__DAGmodel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DAGmodel_dag" "', argument " "1"" of type '" "gum::DAGmodel const *""'"); 
  }
  arg1 = reinterpret_cast< gum::DAGmodel * >(argp1);
  {
    try {
      result = (gum::DAG *) &((gum::DAGmodel const *)arg1)->dag();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__DAG, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DAGmodel_variableNodeMap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::DAGmodel *arg1 = (gum::DAGmodel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::VariableNodeMap *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DAGmodel_variableNodeMap",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__DAGmodel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DAGmodel_variableNodeMap" "', argument " "1"" of type '" "gum::DAGmodel const *""'"); 
  }
  arg1 = reinterpret_cast< gum::DAGmodel * >(argp1);
  {
    try {
      result = (gum::VariableNodeMap *) &((gum::DAGmodel const *)arg1)->variableNodeMap();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__VariableNodeMap, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DAGmodel_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::DAGmodel *arg1 = (gum::DAGmodel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::Size result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DAGmodel_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__DAGmodel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DAGmodel_size" "', argument " "1"" of type '" "gum::DAGmodel const *""'"); 
  }
  arg1 = reinterpret_cast< gum::DAGmodel * >(argp1);
  {
    try {
      result = (gum::Size)((gum::DAGmodel const *)arg1)->size();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DAGmodel_sizeArcs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::DAGmodel *arg1 = (gum::DAGmodel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::Size result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DAGmodel_sizeArcs",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__DAGmodel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DAGmodel_sizeArcs" "', argument " "1"" of type '" "gum::DAGmodel const *""'"); 
  }
  arg1 = reinterpret_cast< gum::DAGmodel * >(argp1);
  {
    try {
      result = (gum::Size)((gum::DAGmodel const *)arg1)->sizeArcs();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DAGmodel_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::DAGmodel *arg1 = (gum::DAGmodel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DAGmodel_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__DAGmodel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DAGmodel_empty" "', argument " "1"" of type '" "gum::DAGmodel const *""'"); 
  }
  arg1 = reinterpret_cast< gum::DAGmodel * >(argp1);
  {
    try {
      result = (bool)((gum::DAGmodel const *)arg1)->empty();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DAGmodel_variable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::DAGmodel *arg1 = (gum::DAGmodel *) 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::DiscreteVariable *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DAGmodel_variable",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__DAGmodel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DAGmodel_variable" "', argument " "1"" of type '" "gum::DAGmodel const *""'"); 
  }
  arg1 = reinterpret_cast< gum::DAGmodel * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DAGmodel_variable" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (gum::DiscreteVariable *) &((gum::DAGmodel const *)arg1)->variable(arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__DiscreteVariable, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DAGmodel_nodeId(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::DAGmodel *arg1 = (gum::DAGmodel *) 0 ;
  gum::DiscreteVariable *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::NodeId result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DAGmodel_nodeId",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__DAGmodel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DAGmodel_nodeId" "', argument " "1"" of type '" "gum::DAGmodel const *""'"); 
  }
  arg1 = reinterpret_cast< gum::DAGmodel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__DiscreteVariable,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DAGmodel_nodeId" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DAGmodel_nodeId" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  arg2 = reinterpret_cast< gum::DiscreteVariable * >(argp2);
  {
    try {
      result = (gum::NodeId)((gum::DAGmodel const *)arg1)->nodeId((gum::DiscreteVariable const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DAGmodel_idFromName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::DAGmodel *arg1 = (gum::DAGmodel *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::NodeId result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DAGmodel_idFromName",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__DAGmodel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DAGmodel_idFromName" "', argument " "1"" of type '" "gum::DAGmodel const *""'"); 
  }
  arg1 = reinterpret_cast< gum::DAGmodel * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DAGmodel_idFromName" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DAGmodel_idFromName" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (gum::NodeId)((gum::DAGmodel const *)arg1)->idFromName((std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DAGmodel_variableFromName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::DAGmodel *arg1 = (gum::DAGmodel *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::DiscreteVariable *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DAGmodel_variableFromName",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__DAGmodel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DAGmodel_variableFromName" "', argument " "1"" of type '" "gum::DAGmodel const *""'"); 
  }
  arg1 = reinterpret_cast< gum::DAGmodel * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DAGmodel_variableFromName" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DAGmodel_variableFromName" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (gum::DiscreteVariable *) &((gum::DAGmodel const *)arg1)->variableFromName((std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__DiscreteVariable, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DAGmodel_completeInstantiation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::DAGmodel *arg1 = (gum::DAGmodel *) 0 ;
  gum::Instantiation *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DAGmodel_completeInstantiation",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__DAGmodel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DAGmodel_completeInstantiation" "', argument " "1"" of type '" "gum::DAGmodel const *""'"); 
  }
  arg1 = reinterpret_cast< gum::DAGmodel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__Instantiation,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DAGmodel_completeInstantiation" "', argument " "2"" of type '" "gum::Instantiation &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DAGmodel_completeInstantiation" "', argument " "2"" of type '" "gum::Instantiation &""'"); 
  }
  arg2 = reinterpret_cast< gum::Instantiation * >(argp2);
  {
    try {
      ((gum::DAGmodel const *)arg1)->completeInstantiation(*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DAGmodel_arcs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::DAGmodel *arg1 = (gum::DAGmodel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::ArcSet *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DAGmodel_arcs",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__DAGmodel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DAGmodel_arcs" "', argument " "1"" of type '" "gum::DAGmodel const *""'"); 
  }
  arg1 = reinterpret_cast< gum::DAGmodel * >(argp1);
  {
    try {
      result = (gum::ArcSet *) &((gum::DAGmodel const *)arg1)->arcs();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SetT_gum__Arc_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DAGmodel_moralGraph__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::DAGmodel *arg1 = (gum::DAGmodel *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::UndiGraph *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DAGmodel_moralGraph",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__DAGmodel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DAGmodel_moralGraph" "', argument " "1"" of type '" "gum::DAGmodel const *""'"); 
  }
  arg1 = reinterpret_cast< gum::DAGmodel * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DAGmodel_moralGraph" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      result = (gum::UndiGraph *) &((gum::DAGmodel const *)arg1)->moralGraph(arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__UndiGraph, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DAGmodel_moralGraph__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::DAGmodel *arg1 = (gum::DAGmodel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::UndiGraph *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DAGmodel_moralGraph",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__DAGmodel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DAGmodel_moralGraph" "', argument " "1"" of type '" "gum::DAGmodel const *""'"); 
  }
  arg1 = reinterpret_cast< gum::DAGmodel * >(argp1);
  {
    try {
      result = (gum::UndiGraph *) &((gum::DAGmodel const *)arg1)->moralGraph();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__UndiGraph, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DAGmodel_moralGraph(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__DAGmodel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_DAGmodel_moralGraph__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__DAGmodel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_DAGmodel_moralGraph__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DAGmodel_moralGraph'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::DAGmodel::moralGraph(bool) const\n"
    "    gum::DAGmodel::moralGraph() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DAGmodel_topologicalOrder__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::DAGmodel *arg1 = (gum::DAGmodel *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::Sequence< gum::NodeId > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DAGmodel_topologicalOrder",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__DAGmodel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DAGmodel_topologicalOrder" "', argument " "1"" of type '" "gum::DAGmodel const *""'"); 
  }
  arg1 = reinterpret_cast< gum::DAGmodel * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DAGmodel_topologicalOrder" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      result = (gum::Sequence< gum::NodeId > *) &((gum::DAGmodel const *)arg1)->topologicalOrder(arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  {
    PyObject *q=PyList_New(0);
    for(auto i : *result) {
      PyList_Append(q,PyInt_FromLong(i));
    }
    resultobj=q;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DAGmodel_topologicalOrder__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::DAGmodel *arg1 = (gum::DAGmodel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::Sequence< gum::NodeId > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DAGmodel_topologicalOrder",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__DAGmodel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DAGmodel_topologicalOrder" "', argument " "1"" of type '" "gum::DAGmodel const *""'"); 
  }
  arg1 = reinterpret_cast< gum::DAGmodel * >(argp1);
  {
    try {
      result = (gum::Sequence< gum::NodeId > *) &((gum::DAGmodel const *)arg1)->topologicalOrder();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  {
    PyObject *q=PyList_New(0);
    for(auto i : *result) {
      PyList_Append(q,PyInt_FromLong(i));
    }
    resultobj=q;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DAGmodel_topologicalOrder(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__DAGmodel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_DAGmodel_topologicalOrder__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__DAGmodel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_DAGmodel_topologicalOrder__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DAGmodel_topologicalOrder'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::DAGmodel::topologicalOrder(bool) const\n"
    "    gum::DAGmodel::topologicalOrder() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DAGmodel_log10DomainSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::DAGmodel *arg1 = (gum::DAGmodel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DAGmodel_log10DomainSize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__DAGmodel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DAGmodel_log10DomainSize" "', argument " "1"" of type '" "gum::DAGmodel const *""'"); 
  }
  arg1 = reinterpret_cast< gum::DAGmodel * >(argp1);
  {
    try {
      result = (double)((gum::DAGmodel const *)arg1)->log10DomainSize();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DAGmodel_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gum__DAGmodel, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_randomDistribution_double(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Size arg1 ;
  unsigned long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double,std::allocator< double > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:randomDistribution_double",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "randomDistribution_double" "', argument " "1"" of type '" "gum::Size""'");
  } 
  arg1 = static_cast< gum::Size >(val1);
  {
    try {
      result = gum::SWIGTEMPLATEDISAMBIGUATOR randomDistribution< double >(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< double,std::allocator< double > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DiscretizedVariable_double__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::DiscretizedVariable< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_DiscretizedVariable_double",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DiscretizedVariable_double" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DiscretizedVariable_double" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_DiscretizedVariable_double" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DiscretizedVariable_double" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (gum::DiscretizedVariable< double > *)new gum::DiscretizedVariable< double >((std::string const &)*arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__DiscretizedVariableT_double_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DiscretizedVariable_double__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::DiscretizedVariable< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::DiscretizedVariable< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DiscretizedVariable_double",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_gum__DiscretizedVariableT_double_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DiscretizedVariable_double" "', argument " "1"" of type '" "gum::DiscretizedVariable< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DiscretizedVariable_double" "', argument " "1"" of type '" "gum::DiscretizedVariable< double > const &""'"); 
  }
  arg1 = reinterpret_cast< gum::DiscretizedVariable< double > * >(argp1);
  {
    try {
      result = (gum::DiscretizedVariable< double > *)new gum::DiscretizedVariable< double >((gum::DiscretizedVariable< double > const &)*arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__DiscretizedVariableT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DiscretizedVariable_double(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_gum__DiscretizedVariableT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_DiscretizedVariable_double__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_DiscretizedVariable_double__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_DiscretizedVariable_double'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::DiscretizedVariable< double >::DiscretizedVariable(std::string const &,std::string const &)\n"
    "    gum::DiscretizedVariable< double >::DiscretizedVariable(gum::DiscretizedVariable< double > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_DiscretizedVariable_double(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::DiscretizedVariable< double > *arg1 = (gum::DiscretizedVariable< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_DiscretizedVariable_double",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__DiscretizedVariableT_double_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DiscretizedVariable_double" "', argument " "1"" of type '" "gum::DiscretizedVariable< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::DiscretizedVariable< double > * >(argp1);
  {
    try {
      delete arg1;
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DiscretizedVariable_double_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::DiscretizedVariable< double > *arg1 = (gum::DiscretizedVariable< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::DiscreteVariable *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DiscretizedVariable_double_clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__DiscretizedVariableT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DiscretizedVariable_double_clone" "', argument " "1"" of type '" "gum::DiscretizedVariable< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::DiscretizedVariable< double > * >(argp1);
  {
    try {
      result = (gum::DiscreteVariable *)((gum::DiscretizedVariable< double > const *)arg1)->clone();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__DiscreteVariable, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DiscretizedVariable_double_varType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::DiscretizedVariable< double > *arg1 = (gum::DiscretizedVariable< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::DiscreteVariable::VarType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DiscretizedVariable_double_varType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__DiscretizedVariableT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DiscretizedVariable_double_varType" "', argument " "1"" of type '" "gum::DiscretizedVariable< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::DiscretizedVariable< double > * >(argp1);
  {
    try {
      result = (gum::DiscreteVariable::VarType)((gum::DiscretizedVariable< double > const *)arg1)->varType();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DiscretizedVariable_double_isTick(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::DiscretizedVariable< double > *arg1 = (gum::DiscretizedVariable< double > *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DiscretizedVariable_double_isTick",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__DiscretizedVariableT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DiscretizedVariable_double_isTick" "', argument " "1"" of type '" "gum::DiscretizedVariable< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::DiscretizedVariable< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DiscretizedVariable_double_isTick" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  {
    try {
      result = (bool)((gum::DiscretizedVariable< double > const *)arg1)->isTick((double const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DiscretizedVariable_double_addTick(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::DiscretizedVariable< double > *arg1 = (gum::DiscretizedVariable< double > *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::DiscretizedVariable< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DiscretizedVariable_double_addTick",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__DiscretizedVariableT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DiscretizedVariable_double_addTick" "', argument " "1"" of type '" "gum::DiscretizedVariable< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::DiscretizedVariable< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DiscretizedVariable_double_addTick" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  {
    try {
      result = (gum::DiscretizedVariable< double > *) &(arg1)->addTick((double const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__DiscretizedVariableT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DiscretizedVariable_double_eraseTicks(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::DiscretizedVariable< double > *arg1 = (gum::DiscretizedVariable< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DiscretizedVariable_double_eraseTicks",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__DiscretizedVariableT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DiscretizedVariable_double_eraseTicks" "', argument " "1"" of type '" "gum::DiscretizedVariable< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::DiscretizedVariable< double > * >(argp1);
  {
    try {
      (arg1)->eraseTicks();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DiscretizedVariable_double_label(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::DiscretizedVariable< double > *arg1 = (gum::DiscretizedVariable< double > *) 0 ;
  gum::Idx arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DiscretizedVariable_double_label",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__DiscretizedVariableT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DiscretizedVariable_double_label" "', argument " "1"" of type '" "gum::DiscretizedVariable< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::DiscretizedVariable< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DiscretizedVariable_double_label" "', argument " "2"" of type '" "gum::Idx""'");
  } 
  arg2 = static_cast< gum::Idx >(val2);
  {
    try {
      result = ((gum::DiscretizedVariable< double > const *)arg1)->label(arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DiscretizedVariable_double_numerical(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::DiscretizedVariable< double > *arg1 = (gum::DiscretizedVariable< double > *) 0 ;
  gum::Idx arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DiscretizedVariable_double_numerical",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__DiscretizedVariableT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DiscretizedVariable_double_numerical" "', argument " "1"" of type '" "gum::DiscretizedVariable< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::DiscretizedVariable< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DiscretizedVariable_double_numerical" "', argument " "2"" of type '" "gum::Idx""'");
  } 
  arg2 = static_cast< gum::Idx >(val2);
  {
    try {
      result = (double)((gum::DiscretizedVariable< double > const *)arg1)->numerical(arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DiscretizedVariable_double_index(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::DiscretizedVariable< double > *arg1 = (gum::DiscretizedVariable< double > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::Idx result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DiscretizedVariable_double_index",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__DiscretizedVariableT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DiscretizedVariable_double_index" "', argument " "1"" of type '" "gum::DiscretizedVariable< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::DiscretizedVariable< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DiscretizedVariable_double_index" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DiscretizedVariable_double_index" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (gum::Idx)((gum::DiscretizedVariable< double > const *)arg1)->index((std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DiscretizedVariable_double_domainSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::DiscretizedVariable< double > *arg1 = (gum::DiscretizedVariable< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::Size result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DiscretizedVariable_double_domainSize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__DiscretizedVariableT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DiscretizedVariable_double_domainSize" "', argument " "1"" of type '" "gum::DiscretizedVariable< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::DiscretizedVariable< double > * >(argp1);
  {
    try {
      result = (gum::Size)((gum::DiscretizedVariable< double > const *)arg1)->domainSize();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DiscretizedVariable_double_domain(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::DiscretizedVariable< double > *arg1 = (gum::DiscretizedVariable< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DiscretizedVariable_double_domain",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__DiscretizedVariableT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DiscretizedVariable_double_domain" "', argument " "1"" of type '" "gum::DiscretizedVariable< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::DiscretizedVariable< double > * >(argp1);
  {
    try {
      result = ((gum::DiscretizedVariable< double > const *)arg1)->domain();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DiscretizedVariable_double_tick(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::DiscretizedVariable< double > *arg1 = (gum::DiscretizedVariable< double > *) 0 ;
  gum::Idx arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DiscretizedVariable_double_tick",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__DiscretizedVariableT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DiscretizedVariable_double_tick" "', argument " "1"" of type '" "gum::DiscretizedVariable< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::DiscretizedVariable< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DiscretizedVariable_double_tick" "', argument " "2"" of type '" "gum::Idx""'");
  } 
  arg2 = static_cast< gum::Idx >(val2);
  {
    try {
      result = (double *) &((gum::DiscretizedVariable< double > const *)arg1)->tick(arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DiscretizedVariable_double_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gum__DiscretizedVariableT_double_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_MultiDimContainer_double(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::MultiDimContainer< double > *arg1 = (gum::MultiDimContainer< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_MultiDimContainer_double",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__MultiDimContainerT_double_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MultiDimContainer_double" "', argument " "1"" of type '" "gum::MultiDimContainer< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::MultiDimContainer< double > * >(argp1);
  {
    try {
      delete arg1;
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MultiDimContainer_double_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::MultiDimContainer< double > *arg1 = (gum::MultiDimContainer< double > *) 0 ;
  gum::Instantiation *arg2 = 0 ;
  double *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MultiDimContainer_double_set",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__MultiDimContainerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultiDimContainer_double_set" "', argument " "1"" of type '" "gum::MultiDimContainer< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::MultiDimContainer< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__Instantiation,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MultiDimContainer_double_set" "', argument " "2"" of type '" "gum::Instantiation const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MultiDimContainer_double_set" "', argument " "2"" of type '" "gum::Instantiation const &""'"); 
  }
  arg2 = reinterpret_cast< gum::Instantiation * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MultiDimContainer_double_set" "', argument " "3"" of type '" "double""'");
  } 
  temp3 = static_cast< double >(val3);
  arg3 = &temp3;
  {
    try {
      ((gum::MultiDimContainer< double > const *)arg1)->set((gum::Instantiation const &)*arg2,(double const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MultiDimContainer_double_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::MultiDimContainer< double > *arg1 = (gum::MultiDimContainer< double > *) 0 ;
  gum::Instantiation *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MultiDimContainer_double_get",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__MultiDimContainerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultiDimContainer_double_get" "', argument " "1"" of type '" "gum::MultiDimContainer< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::MultiDimContainer< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__Instantiation,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MultiDimContainer_double_get" "', argument " "2"" of type '" "gum::Instantiation const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MultiDimContainer_double_get" "', argument " "2"" of type '" "gum::Instantiation const &""'"); 
  }
  arg2 = reinterpret_cast< gum::Instantiation * >(argp2);
  {
    try {
      result = (double)((gum::MultiDimContainer< double > const *)arg1)->get((gum::Instantiation const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MultiDimContainer_double_fill(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::MultiDimContainer< double > *arg1 = (gum::MultiDimContainer< double > *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MultiDimContainer_double_fill",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__MultiDimContainerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultiDimContainer_double_fill" "', argument " "1"" of type '" "gum::MultiDimContainer< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::MultiDimContainer< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MultiDimContainer_double_fill" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  {
    try {
      ((gum::MultiDimContainer< double > const *)arg1)->fill((double const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MultiDimContainer_double_populate__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::MultiDimContainer< double > *arg1 = (gum::MultiDimContainer< double > *) 0 ;
  std::vector< double,std::allocator< double > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MultiDimContainer_double_populate",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__MultiDimContainerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultiDimContainer_double_populate" "', argument " "1"" of type '" "gum::MultiDimContainer< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::MultiDimContainer< double > * >(argp1);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MultiDimContainer_double_populate" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MultiDimContainer_double_populate" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      ((gum::MultiDimContainer< double > const *)arg1)->populate((std::vector< double,std::allocator< double > > const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MultiDimContainer_double_populate__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::MultiDimContainer< double > *arg1 = (gum::MultiDimContainer< double > *) 0 ;
  SwigValueWrapper< std::initializer_list< double > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MultiDimContainer_double_populate",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__MultiDimContainerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultiDimContainer_double_populate" "', argument " "1"" of type '" "gum::MultiDimContainer< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::MultiDimContainer< double > * >(argp1);
  
  {
    try {
      ((gum::MultiDimContainer< double > const *)arg1)->populate(arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MultiDimContainer_double_populate(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__MultiDimContainerT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      if (_v) {
        return _wrap_MultiDimContainer_double_populate__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__MultiDimContainerT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< double,std::allocator< double > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MultiDimContainer_double_populate__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'MultiDimContainer_double_populate'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::MultiDimContainer< double >::populate(std::vector< double,std::allocator< double > > const &) const\n"
    "    gum::MultiDimContainer< double >::populate(std::initializer_list< double >) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MultiDimContainer_double_copyFrom__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::MultiDimContainer< double > *arg1 = (gum::MultiDimContainer< double > *) 0 ;
  gum::MultiDimContainer< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MultiDimContainer_double_copyFrom",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__MultiDimContainerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultiDimContainer_double_copyFrom" "', argument " "1"" of type '" "gum::MultiDimContainer< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::MultiDimContainer< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__MultiDimContainerT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MultiDimContainer_double_copyFrom" "', argument " "2"" of type '" "gum::MultiDimContainer< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MultiDimContainer_double_copyFrom" "', argument " "2"" of type '" "gum::MultiDimContainer< double > const &""'"); 
  }
  arg2 = reinterpret_cast< gum::MultiDimContainer< double > * >(argp2);
  {
    try {
      ((gum::MultiDimContainer< double > const *)arg1)->copyFrom((gum::MultiDimContainer< double > const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MultiDimContainer_double_copyFrom__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::MultiDimContainer< double > *arg1 = (gum::MultiDimContainer< double > *) 0 ;
  gum::MultiDimContainer< double > *arg2 = 0 ;
  gum::Instantiation *arg3 = (gum::Instantiation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MultiDimContainer_double_copyFrom",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__MultiDimContainerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultiDimContainer_double_copyFrom" "', argument " "1"" of type '" "gum::MultiDimContainer< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::MultiDimContainer< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__MultiDimContainerT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MultiDimContainer_double_copyFrom" "', argument " "2"" of type '" "gum::MultiDimContainer< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MultiDimContainer_double_copyFrom" "', argument " "2"" of type '" "gum::MultiDimContainer< double > const &""'"); 
  }
  arg2 = reinterpret_cast< gum::MultiDimContainer< double > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_gum__Instantiation, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MultiDimContainer_double_copyFrom" "', argument " "3"" of type '" "gum::Instantiation *""'"); 
  }
  arg3 = reinterpret_cast< gum::Instantiation * >(argp3);
  {
    try {
      ((gum::MultiDimContainer< double > const *)arg1)->copyFrom((gum::MultiDimContainer< double > const &)*arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MultiDimContainer_double_copyFrom(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__MultiDimContainerT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_gum__MultiDimContainerT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MultiDimContainer_double_copyFrom__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__MultiDimContainerT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_gum__MultiDimContainerT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_gum__Instantiation, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MultiDimContainer_double_copyFrom__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'MultiDimContainer_double_copyFrom'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::MultiDimContainer< double >::copyFrom(gum::MultiDimContainer< double > const &) const\n"
    "    gum::MultiDimContainer< double >::copyFrom(gum::MultiDimContainer< double > const &,gum::Instantiation *) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MultiDimContainer_double_extractFrom(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::MultiDimContainer< double > *arg1 = (gum::MultiDimContainer< double > *) 0 ;
  gum::MultiDimContainer< double > *arg2 = 0 ;
  gum::Instantiation *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MultiDimContainer_double_extractFrom",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__MultiDimContainerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultiDimContainer_double_extractFrom" "', argument " "1"" of type '" "gum::MultiDimContainer< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::MultiDimContainer< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__MultiDimContainerT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MultiDimContainer_double_extractFrom" "', argument " "2"" of type '" "gum::MultiDimContainer< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MultiDimContainer_double_extractFrom" "', argument " "2"" of type '" "gum::MultiDimContainer< double > const &""'"); 
  }
  arg2 = reinterpret_cast< gum::MultiDimContainer< double > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_gum__Instantiation,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MultiDimContainer_double_extractFrom" "', argument " "3"" of type '" "gum::Instantiation const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MultiDimContainer_double_extractFrom" "', argument " "3"" of type '" "gum::Instantiation const &""'"); 
  }
  arg3 = reinterpret_cast< gum::Instantiation * >(argp3);
  {
    try {
      (arg1)->extractFrom((gum::MultiDimContainer< double > const &)*arg2,(gum::Instantiation const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MultiDimContainer_double_content__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::MultiDimContainer< double > *arg1 = (gum::MultiDimContainer< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::MultiDimImplementation< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MultiDimContainer_double_content",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__MultiDimContainerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultiDimContainer_double_content" "', argument " "1"" of type '" "gum::MultiDimContainer< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::MultiDimContainer< double > * >(argp1);
  {
    try {
      result = (gum::MultiDimImplementation< double > *)((gum::MultiDimContainer< double > const *)arg1)->content();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__MultiDimImplementationT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MultiDimContainer_double_content__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::MultiDimContainer< double > *arg1 = (gum::MultiDimContainer< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::MultiDimImplementation< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MultiDimContainer_double_content",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__MultiDimContainerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultiDimContainer_double_content" "', argument " "1"" of type '" "gum::MultiDimContainer< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::MultiDimContainer< double > * >(argp1);
  {
    try {
      result = (gum::MultiDimImplementation< double > *)(arg1)->content();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__MultiDimImplementationT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MultiDimContainer_double_content(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__MultiDimContainerT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_MultiDimContainer_double_content__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__MultiDimContainerT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_MultiDimContainer_double_content__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'MultiDimContainer_double_content'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::MultiDimContainer< double >::content() const\n"
    "    gum::MultiDimContainer< double >::content()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MultiDimContainer_double_getMasterRef__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::MultiDimContainer< double > *arg1 = (gum::MultiDimContainer< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::MultiDimAdressable *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MultiDimContainer_double_getMasterRef",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__MultiDimContainerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultiDimContainer_double_getMasterRef" "', argument " "1"" of type '" "gum::MultiDimContainer< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::MultiDimContainer< double > * >(argp1);
  {
    try {
      result = (gum::MultiDimAdressable *) &(arg1)->getMasterRef();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__MultiDimAdressable, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MultiDimContainer_double_getMasterRef__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::MultiDimContainer< double > *arg1 = (gum::MultiDimContainer< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::MultiDimAdressable *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MultiDimContainer_double_getMasterRef",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__MultiDimContainerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultiDimContainer_double_getMasterRef" "', argument " "1"" of type '" "gum::MultiDimContainer< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::MultiDimContainer< double > * >(argp1);
  {
    try {
      result = (gum::MultiDimAdressable *) &((gum::MultiDimContainer< double > const *)arg1)->getMasterRef();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__MultiDimAdressable, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MultiDimContainer_double_getMasterRef(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__MultiDimContainerT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_MultiDimContainer_double_getMasterRef__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__MultiDimContainerT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_MultiDimContainer_double_getMasterRef__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'MultiDimContainer_double_getMasterRef'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::MultiDimContainer< double >::getMasterRef()\n"
    "    gum::MultiDimContainer< double >::getMasterRef() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MultiDimContainer_double_copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::MultiDimContainer< double > *arg1 = (gum::MultiDimContainer< double > *) 0 ;
  gum::MultiDimContainer< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MultiDimContainer_double_copy",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__MultiDimContainerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultiDimContainer_double_copy" "', argument " "1"" of type '" "gum::MultiDimContainer< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::MultiDimContainer< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__MultiDimContainerT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MultiDimContainer_double_copy" "', argument " "2"" of type '" "gum::MultiDimContainer< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MultiDimContainer_double_copy" "', argument " "2"" of type '" "gum::MultiDimContainer< double > const &""'"); 
  }
  arg2 = reinterpret_cast< gum::MultiDimContainer< double > * >(argp2);
  {
    try {
      (arg1)->copy((gum::MultiDimContainer< double > const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MultiDimContainer_double_newFactory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::MultiDimContainer< double > *arg1 = (gum::MultiDimContainer< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::MultiDimContainer< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MultiDimContainer_double_newFactory",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__MultiDimContainerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultiDimContainer_double_newFactory" "', argument " "1"" of type '" "gum::MultiDimContainer< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::MultiDimContainer< double > * >(argp1);
  {
    try {
      result = (gum::MultiDimContainer< double > *)((gum::MultiDimContainer< double > const *)arg1)->newFactory();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__MultiDimContainerT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MultiDimContainer_double___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::MultiDimContainer< double > *arg1 = (gum::MultiDimContainer< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MultiDimContainer_double___str__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__MultiDimContainerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultiDimContainer_double___str__" "', argument " "1"" of type '" "gum::MultiDimContainer< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::MultiDimContainer< double > * >(argp1);
  {
    try {
      result = ((gum::MultiDimContainer< double > const *)arg1)->toString();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MultiDimContainer_double_toString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::MultiDimContainer< double > *arg1 = (gum::MultiDimContainer< double > *) 0 ;
  gum::Instantiation *arg2 = (gum::Instantiation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MultiDimContainer_double_toString",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__MultiDimContainerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultiDimContainer_double_toString" "', argument " "1"" of type '" "gum::MultiDimContainer< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::MultiDimContainer< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_gum__Instantiation, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MultiDimContainer_double_toString" "', argument " "2"" of type '" "gum::Instantiation const *""'"); 
  }
  arg2 = reinterpret_cast< gum::Instantiation * >(argp2);
  {
    try {
      result = ((gum::MultiDimContainer< double > const *)arg1)->toString((gum::Instantiation const *)arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MultiDimContainer_double___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::MultiDimContainer< double > *arg1 = (gum::MultiDimContainer< double > *) 0 ;
  gum::MultiDimContainer< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MultiDimContainer_double___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__MultiDimContainerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultiDimContainer_double___eq__" "', argument " "1"" of type '" "gum::MultiDimContainer< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::MultiDimContainer< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__MultiDimContainerT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MultiDimContainer_double___eq__" "', argument " "2"" of type '" "gum::MultiDimContainer< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MultiDimContainer_double___eq__" "', argument " "2"" of type '" "gum::MultiDimContainer< double > const &""'"); 
  }
  arg2 = reinterpret_cast< gum::MultiDimContainer< double > * >(argp2);
  {
    try {
      result = (bool)((gum::MultiDimContainer< double > const *)arg1)->operator ==((gum::MultiDimContainer< double > const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MultiDimContainer_double___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::MultiDimContainer< double > *arg1 = (gum::MultiDimContainer< double > *) 0 ;
  gum::MultiDimContainer< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MultiDimContainer_double___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__MultiDimContainerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultiDimContainer_double___ne__" "', argument " "1"" of type '" "gum::MultiDimContainer< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::MultiDimContainer< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__MultiDimContainerT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MultiDimContainer_double___ne__" "', argument " "2"" of type '" "gum::MultiDimContainer< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MultiDimContainer_double___ne__" "', argument " "2"" of type '" "gum::MultiDimContainer< double > const &""'"); 
  }
  arg2 = reinterpret_cast< gum::MultiDimContainer< double > * >(argp2);
  {
    try {
      result = (bool)((gum::MultiDimContainer< double > const *)arg1)->operator !=((gum::MultiDimContainer< double > const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MultiDimContainer_double_apply(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::MultiDimContainer< double > *arg1 = (gum::MultiDimContainer< double > *) 0 ;
  std::function< double (double) > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MultiDimContainer_double_apply",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__MultiDimContainerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultiDimContainer_double_apply" "', argument " "1"" of type '" "gum::MultiDimContainer< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::MultiDimContainer< double > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__functionT_double_fdoubleF_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MultiDimContainer_double_apply" "', argument " "2"" of type '" "std::function< double (double) >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MultiDimContainer_double_apply" "', argument " "2"" of type '" "std::function< double (double) >""'");
    } else {
      std::function< double (double) > * temp = reinterpret_cast< std::function< double (double) > * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      ((gum::MultiDimContainer< double > const *)arg1)->apply(arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MultiDimContainer_double_reduce(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::MultiDimContainer< double > *arg1 = (gum::MultiDimContainer< double > *) 0 ;
  std::function< double (double,double) > arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MultiDimContainer_double_reduce",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__MultiDimContainerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultiDimContainer_double_reduce" "', argument " "1"" of type '" "gum::MultiDimContainer< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::MultiDimContainer< double > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__functionT_double_fdouble_doubleF_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MultiDimContainer_double_reduce" "', argument " "2"" of type '" "std::function< double (double,double) >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MultiDimContainer_double_reduce" "', argument " "2"" of type '" "std::function< double (double,double) >""'");
    } else {
      std::function< double (double,double) > * temp = reinterpret_cast< std::function< double (double,double) > * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MultiDimContainer_double_reduce" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (double)((gum::MultiDimContainer< double > const *)arg1)->reduce(arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MultiDimContainer_double_beginMultipleChanges(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::MultiDimContainer< double > *arg1 = (gum::MultiDimContainer< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MultiDimContainer_double_beginMultipleChanges",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__MultiDimContainerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultiDimContainer_double_beginMultipleChanges" "', argument " "1"" of type '" "gum::MultiDimContainer< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::MultiDimContainer< double > * >(argp1);
  {
    try {
      (arg1)->beginMultipleChanges();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MultiDimContainer_double_endMultipleChanges__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::MultiDimContainer< double > *arg1 = (gum::MultiDimContainer< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MultiDimContainer_double_endMultipleChanges",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__MultiDimContainerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultiDimContainer_double_endMultipleChanges" "', argument " "1"" of type '" "gum::MultiDimContainer< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::MultiDimContainer< double > * >(argp1);
  {
    try {
      (arg1)->endMultipleChanges();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MultiDimContainer_double_endMultipleChanges__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::MultiDimContainer< double > *arg1 = (gum::MultiDimContainer< double > *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MultiDimContainer_double_endMultipleChanges",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__MultiDimContainerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultiDimContainer_double_endMultipleChanges" "', argument " "1"" of type '" "gum::MultiDimContainer< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::MultiDimContainer< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MultiDimContainer_double_endMultipleChanges" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->endMultipleChanges((double const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MultiDimContainer_double_endMultipleChanges(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__MultiDimContainerT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_MultiDimContainer_double_endMultipleChanges__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__MultiDimContainerT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MultiDimContainer_double_endMultipleChanges__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'MultiDimContainer_double_endMultipleChanges'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::MultiDimContainer< double >::endMultipleChanges()\n"
    "    gum::MultiDimContainer< double >::endMultipleChanges(double const &)\n");
  return 0;
}


SWIGINTERN PyObject *MultiDimContainer_double_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gum__MultiDimContainerT_double_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Potential_double__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Potential< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Potential_double")) SWIG_fail;
  {
    try {
      result = (gum::Potential< double > *)new gum::Potential< double >();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__PotentialT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Potential_double__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::MultiDimImplementation< double > *arg1 = (gum::MultiDimImplementation< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::Potential< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Potential_double",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__MultiDimImplementationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Potential_double" "', argument " "1"" of type '" "gum::MultiDimImplementation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::MultiDimImplementation< double > * >(argp1);
  {
    try {
      result = (gum::Potential< double > *)new gum::Potential< double >(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__PotentialT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Potential_double__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::MultiDimImplementation< double > *arg1 = (gum::MultiDimImplementation< double > *) 0 ;
  gum::MultiDimContainer< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::Potential< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Potential_double",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__MultiDimImplementationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Potential_double" "', argument " "1"" of type '" "gum::MultiDimImplementation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::MultiDimImplementation< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__MultiDimContainerT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Potential_double" "', argument " "2"" of type '" "gum::MultiDimContainer< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Potential_double" "', argument " "2"" of type '" "gum::MultiDimContainer< double > const &""'"); 
  }
  arg2 = reinterpret_cast< gum::MultiDimContainer< double > * >(argp2);
  {
    try {
      result = (gum::Potential< double > *)new gum::Potential< double >(arg1,(gum::MultiDimContainer< double > const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__PotentialT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Potential_double__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Potential< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::Potential< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Potential_double",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_gum__PotentialT_double_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Potential_double" "', argument " "1"" of type '" "gum::Potential< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Potential_double" "', argument " "1"" of type '" "gum::Potential< double > const &""'"); 
  }
  arg1 = reinterpret_cast< gum::Potential< double > * >(argp1);
  {
    try {
      result = (gum::Potential< double > *)new gum::Potential< double >((gum::Potential< double > const &)*arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__PotentialT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Potential_double__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Potential< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::Potential< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Potential_double",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_gum__PotentialT_double_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Potential_double" "', argument " "1"" of type '" "gum::Potential< double > &&""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Potential_double" "', argument " "1"" of type '" "gum::Potential< double > &&""'"); 
  }
  arg1 = reinterpret_cast< gum::Potential< double > * >(argp1);
  {
    try {
      result = (gum::Potential< double > *)new gum::Potential< double >((gum::Potential< double > &&)*arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__PotentialT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Potential_double(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Potential_double__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__MultiDimImplementationT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Potential_double__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_gum__PotentialT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Potential_double__SWIG_3(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__PotentialT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Potential_double__SWIG_4(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__MultiDimImplementationT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_gum__MultiDimContainerT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_Potential_double__SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Potential_double'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::Potential< double >::Potential()\n"
    "    gum::Potential< double >::Potential(gum::MultiDimImplementation< double > *)\n"
    "    gum::Potential< double >::Potential(gum::MultiDimImplementation< double > *,gum::MultiDimContainer< double > const &)\n"
    "    gum::Potential< double >::Potential(gum::Potential< double > const &)\n"
    "    gum::Potential< double >::Potential(gum::Potential< double > &&)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_Potential_double(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Potential< double > *arg1 = (gum::Potential< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Potential_double",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__PotentialT_double_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Potential_double" "', argument " "1"" of type '" "gum::Potential< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::Potential< double > * >(argp1);
  {
    try {
      delete arg1;
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Potential_double_newFactory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Potential< double > *arg1 = (gum::Potential< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::Potential< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Potential_double_newFactory",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__PotentialT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Potential_double_newFactory" "', argument " "1"" of type '" "gum::Potential< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::Potential< double > * >(argp1);
  {
    try {
      result = (gum::Potential< double > *)((gum::Potential< double > const *)arg1)->newFactory();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__PotentialT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Potential_double___str____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Potential< double > *arg1 = (gum::Potential< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Potential_double___str__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__PotentialT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Potential_double___str__" "', argument " "1"" of type '" "gum::Potential< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::Potential< double > * >(argp1);
  {
    try {
      result = ((gum::Potential< double > const *)arg1)->toString();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Potential_double_isNonZeroMap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Potential< double > *arg1 = (gum::Potential< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::Potential< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Potential_double_isNonZeroMap",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__PotentialT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Potential_double_isNonZeroMap" "', argument " "1"" of type '" "gum::Potential< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::Potential< double > * >(argp1);
  {
    try {
      result = ((gum::Potential< double > const *)arg1)->isNonZeroMap();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::Potential< double >(static_cast< const gum::Potential< double >& >(result))), SWIGTYPE_p_gum__PotentialT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Potential_double_sum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Potential< double > *arg1 = (gum::Potential< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Potential_double_sum",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__PotentialT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Potential_double_sum" "', argument " "1"" of type '" "gum::Potential< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::Potential< double > * >(argp1);
  {
    try {
      result = (double)((gum::Potential< double > const *)arg1)->sum();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Potential_double_product(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Potential< double > *arg1 = (gum::Potential< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Potential_double_product",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__PotentialT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Potential_double_product" "', argument " "1"" of type '" "gum::Potential< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::Potential< double > * >(argp1);
  {
    try {
      result = (double)((gum::Potential< double > const *)arg1)->product();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Potential_double_max(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Potential< double > *arg1 = (gum::Potential< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Potential_double_max",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__PotentialT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Potential_double_max" "', argument " "1"" of type '" "gum::Potential< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::Potential< double > * >(argp1);
  {
    try {
      result = (double)((gum::Potential< double > const *)arg1)->max();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Potential_double_min(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Potential< double > *arg1 = (gum::Potential< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Potential_double_min",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__PotentialT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Potential_double_min" "', argument " "1"" of type '" "gum::Potential< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::Potential< double > * >(argp1);
  {
    try {
      result = (double)((gum::Potential< double > const *)arg1)->min();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Potential_double_maxNonOne(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Potential< double > *arg1 = (gum::Potential< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Potential_double_maxNonOne",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__PotentialT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Potential_double_maxNonOne" "', argument " "1"" of type '" "gum::Potential< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::Potential< double > * >(argp1);
  {
    try {
      result = (double)((gum::Potential< double > const *)arg1)->maxNonOne();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Potential_double_minNonZero(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Potential< double > *arg1 = (gum::Potential< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Potential_double_minNonZero",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__PotentialT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Potential_double_minNonZero" "', argument " "1"" of type '" "gum::Potential< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::Potential< double > * >(argp1);
  {
    try {
      result = (double)((gum::Potential< double > const *)arg1)->minNonZero();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Potential_double_entropy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Potential< double > *arg1 = (gum::Potential< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Potential_double_entropy",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__PotentialT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Potential_double_entropy" "', argument " "1"" of type '" "gum::Potential< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::Potential< double > * >(argp1);
  {
    try {
      result = (double)((gum::Potential< double > const *)arg1)->entropy();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Potential_double_reorganize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Potential< double > *arg1 = (gum::Potential< double > *) 0 ;
  std::vector< gum::DiscreteVariable const *,std::allocator< gum::DiscreteVariable const * > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::Potential< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Potential_double_reorganize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__PotentialT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Potential_double_reorganize" "', argument " "1"" of type '" "gum::Potential< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::Potential< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_gum__DiscreteVariable_const_p_std__allocatorT_gum__DiscreteVariable_const_p_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Potential_double_reorganize" "', argument " "2"" of type '" "std::vector< gum::DiscreteVariable const *,std::allocator< gum::DiscreteVariable const * > > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Potential_double_reorganize" "', argument " "2"" of type '" "std::vector< gum::DiscreteVariable const *,std::allocator< gum::DiscreteVariable const * > > const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< gum::DiscreteVariable const *,std::allocator< gum::DiscreteVariable const * > > * >(argp2);
  {
    try {
      result = ((gum::Potential< double > const *)arg1)->reorganize((std::vector< gum::DiscreteVariable const *,std::allocator< gum::DiscreteVariable const * > > const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::Potential< double >(static_cast< const gum::Potential< double >& >(result))), SWIGTYPE_p_gum__PotentialT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Potential_double_extract__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Potential< double > *arg1 = (gum::Potential< double > *) 0 ;
  gum::Instantiation *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::Potential< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Potential_double_extract",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__PotentialT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Potential_double_extract" "', argument " "1"" of type '" "gum::Potential< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::Potential< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__Instantiation,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Potential_double_extract" "', argument " "2"" of type '" "gum::Instantiation const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Potential_double_extract" "', argument " "2"" of type '" "gum::Instantiation const &""'"); 
  }
  arg2 = reinterpret_cast< gum::Instantiation * >(argp2);
  {
    try {
      result = ((gum::Potential< double > const *)arg1)->extract((gum::Instantiation const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::Potential< double >(static_cast< const gum::Potential< double >& >(result))), SWIGTYPE_p_gum__PotentialT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Potential_double_fillWith__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Potential< double > *arg1 = (gum::Potential< double > *) 0 ;
  std::vector< double,std::allocator< double > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::Potential< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Potential_double_fillWith",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__PotentialT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Potential_double_fillWith" "', argument " "1"" of type '" "gum::Potential< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::Potential< double > * >(argp1);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Potential_double_fillWith" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Potential_double_fillWith" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (gum::Potential< double > *) &((gum::Potential< double > const *)arg1)->fillWith((std::vector< double,std::allocator< double > > const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__PotentialT_double_t, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Potential_double_fillWith__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Potential< double > *arg1 = (gum::Potential< double > *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::Potential< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Potential_double_fillWith",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__PotentialT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Potential_double_fillWith" "', argument " "1"" of type '" "gum::Potential< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::Potential< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Potential_double_fillWith" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  {
    try {
      result = (gum::Potential< double > *) &((gum::Potential< double > const *)arg1)->fillWith((double const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__PotentialT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Potential_double_fillWith(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__PotentialT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Potential_double_fillWith__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__PotentialT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< double,std::allocator< double > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Potential_double_fillWith__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Potential_double_fillWith'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::Potential< double >::fillWith(std::vector< double,std::allocator< double > > const &) const\n"
    "    gum::Potential< double >::fillWith(double const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Potential_double_abs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Potential< double > *arg1 = (gum::Potential< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::Potential< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Potential_double_abs",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__PotentialT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Potential_double_abs" "', argument " "1"" of type '" "gum::Potential< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::Potential< double > * >(argp1);
  {
    try {
      result = (gum::Potential< double > *) &((gum::Potential< double > const *)arg1)->abs();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__PotentialT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Potential_double_normalize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Potential< double > *arg1 = (gum::Potential< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::Potential< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Potential_double_normalize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__PotentialT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Potential_double_normalize" "', argument " "1"" of type '" "gum::Potential< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::Potential< double > * >(argp1);
  {
    try {
      result = (gum::Potential< double > *) &((gum::Potential< double > const *)arg1)->normalize();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__PotentialT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Potential_double_sq(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Potential< double > *arg1 = (gum::Potential< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::Potential< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Potential_double_sq",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__PotentialT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Potential_double_sq" "', argument " "1"" of type '" "gum::Potential< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::Potential< double > * >(argp1);
  {
    try {
      result = (gum::Potential< double > *) &((gum::Potential< double > const *)arg1)->sq();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__PotentialT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Potential_double_normalizeAsCPT(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Potential< double > *arg1 = (gum::Potential< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Potential_double_normalizeAsCPT",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__PotentialT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Potential_double_normalizeAsCPT" "', argument " "1"" of type '" "gum::Potential< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::Potential< double > * >(argp1);
  {
    try {
      ((gum::Potential< double > const *)arg1)->normalizeAsCPT();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Potential_double_scale(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Potential< double > *arg1 = (gum::Potential< double > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::Potential< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Potential_double_scale",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__PotentialT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Potential_double_scale" "', argument " "1"" of type '" "gum::Potential< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::Potential< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Potential_double_scale" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (gum::Potential< double > *) &((gum::Potential< double > const *)arg1)->scale(arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__PotentialT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Potential_double_translate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Potential< double > *arg1 = (gum::Potential< double > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::Potential< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Potential_double_translate",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__PotentialT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Potential_double_translate" "', argument " "1"" of type '" "gum::Potential< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::Potential< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Potential_double_translate" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (gum::Potential< double > *) &((gum::Potential< double > const *)arg1)->translate(arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__PotentialT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Potential_double___add__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Potential< double > *arg1 = (gum::Potential< double > *) 0 ;
  gum::Potential< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::Potential< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Potential_double___add__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__PotentialT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Potential_double___add__" "', argument " "1"" of type '" "gum::Potential< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::Potential< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__PotentialT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Potential_double___add__" "', argument " "2"" of type '" "gum::Potential< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Potential_double___add__" "', argument " "2"" of type '" "gum::Potential< double > const &""'"); 
  }
  arg2 = reinterpret_cast< gum::Potential< double > * >(argp2);
  {
    try {
      result = ((gum::Potential< double > const *)arg1)->operator +((gum::Potential< double > const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::Potential< double >(static_cast< const gum::Potential< double >& >(result))), SWIGTYPE_p_gum__PotentialT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Potential_double___sub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Potential< double > *arg1 = (gum::Potential< double > *) 0 ;
  gum::Potential< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::Potential< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Potential_double___sub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__PotentialT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Potential_double___sub__" "', argument " "1"" of type '" "gum::Potential< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::Potential< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__PotentialT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Potential_double___sub__" "', argument " "2"" of type '" "gum::Potential< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Potential_double___sub__" "', argument " "2"" of type '" "gum::Potential< double > const &""'"); 
  }
  arg2 = reinterpret_cast< gum::Potential< double > * >(argp2);
  {
    try {
      result = ((gum::Potential< double > const *)arg1)->operator -((gum::Potential< double > const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::Potential< double >(static_cast< const gum::Potential< double >& >(result))), SWIGTYPE_p_gum__PotentialT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Potential_double___mul__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Potential< double > *arg1 = (gum::Potential< double > *) 0 ;
  gum::Potential< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::Potential< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Potential_double___mul__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__PotentialT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Potential_double___mul__" "', argument " "1"" of type '" "gum::Potential< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::Potential< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__PotentialT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Potential_double___mul__" "', argument " "2"" of type '" "gum::Potential< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Potential_double___mul__" "', argument " "2"" of type '" "gum::Potential< double > const &""'"); 
  }
  arg2 = reinterpret_cast< gum::Potential< double > * >(argp2);
  {
    try {
      result = ((gum::Potential< double > const *)arg1)->operator *((gum::Potential< double > const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::Potential< double >(static_cast< const gum::Potential< double >& >(result))), SWIGTYPE_p_gum__PotentialT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Potential_double___truediv____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Potential< double > *arg1 = (gum::Potential< double > *) 0 ;
  gum::Potential< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::Potential< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Potential_double___truediv__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__PotentialT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Potential_double___truediv__" "', argument " "1"" of type '" "gum::Potential< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::Potential< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__PotentialT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Potential_double___truediv__" "', argument " "2"" of type '" "gum::Potential< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Potential_double___truediv__" "', argument " "2"" of type '" "gum::Potential< double > const &""'"); 
  }
  arg2 = reinterpret_cast< gum::Potential< double > * >(argp2);
  {
    try {
      result = ((gum::Potential< double > const *)arg1)->operator /((gum::Potential< double > const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::Potential< double >(static_cast< const gum::Potential< double >& >(result))), SWIGTYPE_p_gum__PotentialT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Potential_double___iadd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Potential< double > *arg1 = (gum::Potential< double > *) 0 ;
  gum::Potential< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::Potential< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Potential_double___iadd__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__PotentialT_double_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Potential_double___iadd__" "', argument " "1"" of type '" "gum::Potential< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::Potential< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__PotentialT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Potential_double___iadd__" "', argument " "2"" of type '" "gum::Potential< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Potential_double___iadd__" "', argument " "2"" of type '" "gum::Potential< double > const &""'"); 
  }
  arg2 = reinterpret_cast< gum::Potential< double > * >(argp2);
  {
    try {
      result = (gum::Potential< double > *) &(arg1)->operator +=((gum::Potential< double > const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__PotentialT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Potential_double___imul__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Potential< double > *arg1 = (gum::Potential< double > *) 0 ;
  gum::Potential< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::Potential< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Potential_double___imul__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__PotentialT_double_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Potential_double___imul__" "', argument " "1"" of type '" "gum::Potential< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::Potential< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__PotentialT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Potential_double___imul__" "', argument " "2"" of type '" "gum::Potential< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Potential_double___imul__" "', argument " "2"" of type '" "gum::Potential< double > const &""'"); 
  }
  arg2 = reinterpret_cast< gum::Potential< double > * >(argp2);
  {
    try {
      result = (gum::Potential< double > *) &(arg1)->operator *=((gum::Potential< double > const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__PotentialT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Potential_double___isub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Potential< double > *arg1 = (gum::Potential< double > *) 0 ;
  gum::Potential< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::Potential< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Potential_double___isub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__PotentialT_double_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Potential_double___isub__" "', argument " "1"" of type '" "gum::Potential< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::Potential< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__PotentialT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Potential_double___isub__" "', argument " "2"" of type '" "gum::Potential< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Potential_double___isub__" "', argument " "2"" of type '" "gum::Potential< double > const &""'"); 
  }
  arg2 = reinterpret_cast< gum::Potential< double > * >(argp2);
  {
    try {
      result = (gum::Potential< double > *) &(arg1)->operator -=((gum::Potential< double > const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__PotentialT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Potential_double___itruediv__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Potential< double > *arg1 = (gum::Potential< double > *) 0 ;
  gum::Potential< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::Potential< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Potential_double___itruediv__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__PotentialT_double_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Potential_double___itruediv__" "', argument " "1"" of type '" "gum::Potential< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::Potential< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__PotentialT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Potential_double___itruediv__" "', argument " "2"" of type '" "gum::Potential< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Potential_double___itruediv__" "', argument " "2"" of type '" "gum::Potential< double > const &""'"); 
  }
  arg2 = reinterpret_cast< gum::Potential< double > * >(argp2);
  {
    try {
      result = (gum::Potential< double > *) &(arg1)->operator /=((gum::Potential< double > const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__PotentialT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Potential_double___eq____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Potential< double > *arg1 = (gum::Potential< double > *) 0 ;
  gum::Potential< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Potential_double___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__PotentialT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Potential_double___eq__" "', argument " "1"" of type '" "gum::Potential< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::Potential< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__PotentialT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Potential_double___eq__" "', argument " "2"" of type '" "gum::Potential< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Potential_double___eq__" "', argument " "2"" of type '" "gum::Potential< double > const &""'"); 
  }
  arg2 = reinterpret_cast< gum::Potential< double > * >(argp2);
  {
    try {
      result = (bool)((gum::Potential< double > const *)arg1)->operator ==((gum::Potential< double > const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Potential_double___ne____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Potential< double > *arg1 = (gum::Potential< double > *) 0 ;
  gum::Potential< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Potential_double___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__PotentialT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Potential_double___ne__" "', argument " "1"" of type '" "gum::Potential< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::Potential< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__PotentialT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Potential_double___ne__" "', argument " "2"" of type '" "gum::Potential< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Potential_double___ne__" "', argument " "2"" of type '" "gum::Potential< double > const &""'"); 
  }
  arg2 = reinterpret_cast< gum::Potential< double > * >(argp2);
  {
    try {
      result = (bool)((gum::Potential< double > const *)arg1)->operator !=((gum::Potential< double > const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Potential_double_extract__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Potential< double > *arg1 = (gum::Potential< double > *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::Potential< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Potential_double_extract",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__PotentialT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Potential_double_extract" "', argument " "1"" of type '" "gum::Potential< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::Potential< double > * >(argp1);
  arg2 = obj1;
  {
    try {
      result = gum_Potential_Sl_double_Sg__extract__SWIG_1(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::Potential< double >(static_cast< const gum::Potential< double >& >(result))), SWIGTYPE_p_gum__PotentialT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Potential_double_extract(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__PotentialT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_gum__Instantiation, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Potential_double_extract__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__PotentialT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = (argv[1] != 0);
      if (_v) {
        return _wrap_Potential_double_extract__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Potential_double_extract'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::Potential< double >::extract(gum::Instantiation const &) const\n"
    "    gum::Potential< double >::extract(PyObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Potential_double_reorganize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Potential< double > *arg1 = (gum::Potential< double > *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::Potential< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Potential_double_reorganize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__PotentialT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Potential_double_reorganize" "', argument " "1"" of type '" "gum::Potential< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::Potential< double > * >(argp1);
  arg2 = obj1;
  {
    try {
      result = gum_Potential_Sl_double_Sg__reorganize__SWIG_1((gum::Potential< double > const *)arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::Potential< double >(static_cast< const gum::Potential< double >& >(result))), SWIGTYPE_p_gum__PotentialT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Potential_double_reorganize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__PotentialT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__vectorT_gum__DiscreteVariable_const_p_std__allocatorT_gum__DiscreteVariable_const_p_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Potential_double_reorganize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__PotentialT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = (argv[1] != 0);
      if (_v) {
        return _wrap_Potential_double_reorganize__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Potential_double_reorganize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::Potential< double >::reorganize(std::vector< gum::DiscreteVariable const *,std::allocator< gum::DiscreteVariable const * > > const &) const\n"
    "    gum::Potential< double >::reorganize(PyObject *) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Potential_double_putFirst(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Potential< double > *arg1 = (gum::Potential< double > *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::Potential< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Potential_double_putFirst",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__PotentialT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Potential_double_putFirst" "', argument " "1"" of type '" "gum::Potential< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::Potential< double > * >(argp1);
  arg2 = obj1;
  {
    try {
      result = gum_Potential_Sl_double_Sg__putFirst((gum::Potential< double > const *)arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::Potential< double >(static_cast< const gum::Potential< double >& >(result))), SWIGTYPE_p_gum__PotentialT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Potential_double_margSumOut(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Potential< double > *arg1 = (gum::Potential< double > *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::Potential< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Potential_double_margSumOut",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__PotentialT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Potential_double_margSumOut" "', argument " "1"" of type '" "gum::Potential< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::Potential< double > * >(argp1);
  arg2 = obj1;
  {
    try {
      result = gum_Potential_Sl_double_Sg__margSumOut((gum::Potential< double > const *)arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::Potential< double >(static_cast< const gum::Potential< double >& >(result))), SWIGTYPE_p_gum__PotentialT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Potential_double_margProdOut(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Potential< double > *arg1 = (gum::Potential< double > *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::Potential< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Potential_double_margProdOut",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__PotentialT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Potential_double_margProdOut" "', argument " "1"" of type '" "gum::Potential< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::Potential< double > * >(argp1);
  arg2 = obj1;
  {
    try {
      result = gum_Potential_Sl_double_Sg__margProdOut((gum::Potential< double > const *)arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::Potential< double >(static_cast< const gum::Potential< double >& >(result))), SWIGTYPE_p_gum__PotentialT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Potential_double_margMaxOut(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Potential< double > *arg1 = (gum::Potential< double > *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::Potential< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Potential_double_margMaxOut",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__PotentialT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Potential_double_margMaxOut" "', argument " "1"" of type '" "gum::Potential< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::Potential< double > * >(argp1);
  arg2 = obj1;
  {
    try {
      result = gum_Potential_Sl_double_Sg__margMaxOut((gum::Potential< double > const *)arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::Potential< double >(static_cast< const gum::Potential< double >& >(result))), SWIGTYPE_p_gum__PotentialT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Potential_double_margMinOut(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Potential< double > *arg1 = (gum::Potential< double > *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::Potential< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Potential_double_margMinOut",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__PotentialT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Potential_double_margMinOut" "', argument " "1"" of type '" "gum::Potential< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::Potential< double > * >(argp1);
  arg2 = obj1;
  {
    try {
      result = gum_Potential_Sl_double_Sg__margMinOut((gum::Potential< double > const *)arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::Potential< double >(static_cast< const gum::Potential< double >& >(result))), SWIGTYPE_p_gum__PotentialT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Potential_double_margSumIn(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Potential< double > *arg1 = (gum::Potential< double > *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::Potential< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Potential_double_margSumIn",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__PotentialT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Potential_double_margSumIn" "', argument " "1"" of type '" "gum::Potential< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::Potential< double > * >(argp1);
  arg2 = obj1;
  {
    try {
      result = gum_Potential_Sl_double_Sg__margSumIn((gum::Potential< double > const *)arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::Potential< double >(static_cast< const gum::Potential< double >& >(result))), SWIGTYPE_p_gum__PotentialT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Potential_double_margProdIn(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Potential< double > *arg1 = (gum::Potential< double > *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::Potential< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Potential_double_margProdIn",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__PotentialT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Potential_double_margProdIn" "', argument " "1"" of type '" "gum::Potential< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::Potential< double > * >(argp1);
  arg2 = obj1;
  {
    try {
      result = gum_Potential_Sl_double_Sg__margProdIn((gum::Potential< double > const *)arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::Potential< double >(static_cast< const gum::Potential< double >& >(result))), SWIGTYPE_p_gum__PotentialT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Potential_double_margMaxIn(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Potential< double > *arg1 = (gum::Potential< double > *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::Potential< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Potential_double_margMaxIn",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__PotentialT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Potential_double_margMaxIn" "', argument " "1"" of type '" "gum::Potential< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::Potential< double > * >(argp1);
  arg2 = obj1;
  {
    try {
      result = gum_Potential_Sl_double_Sg__margMaxIn((gum::Potential< double > const *)arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::Potential< double >(static_cast< const gum::Potential< double >& >(result))), SWIGTYPE_p_gum__PotentialT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Potential_double_margMinIn(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Potential< double > *arg1 = (gum::Potential< double > *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::Potential< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Potential_double_margMinIn",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__PotentialT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Potential_double_margMinIn" "', argument " "1"" of type '" "gum::Potential< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::Potential< double > * >(argp1);
  arg2 = obj1;
  {
    try {
      result = gum_Potential_Sl_double_Sg__margMinIn((gum::Potential< double > const *)arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::Potential< double >(static_cast< const gum::Potential< double >& >(result))), SWIGTYPE_p_gum__PotentialT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Potential_double___truediv____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Potential< double > *arg1 = (gum::Potential< double > *) 0 ;
  gum::Potential< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::Potential< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Potential_double___truediv__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__PotentialT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Potential_double___truediv__" "', argument " "1"" of type '" "gum::Potential< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::Potential< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__PotentialT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Potential_double___truediv__" "', argument " "2"" of type '" "gum::Potential< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Potential_double___truediv__" "', argument " "2"" of type '" "gum::Potential< double > const &""'"); 
  }
  arg2 = reinterpret_cast< gum::Potential< double > * >(argp2);
  {
    try {
      result = gum_Potential_Sl_double_Sg____truediv____SWIG_1(arg1,(gum::Potential< double > const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::Potential< double >(static_cast< const gum::Potential< double >& >(result))), SWIGTYPE_p_gum__PotentialT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Potential_double___truediv__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__PotentialT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_gum__PotentialT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Potential_double___truediv____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__PotentialT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_gum__PotentialT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Potential_double___truediv____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Potential_double___truediv__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::Potential< double >::operator /(gum::Potential< double > const &) const\n"
    "    gum::Potential< double >::__truediv__(gum::Potential< double > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Potential_double___div__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Potential< double > *arg1 = (gum::Potential< double > *) 0 ;
  gum::Potential< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::Potential< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Potential_double___div__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__PotentialT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Potential_double___div__" "', argument " "1"" of type '" "gum::Potential< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::Potential< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__PotentialT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Potential_double___div__" "', argument " "2"" of type '" "gum::Potential< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Potential_double___div__" "', argument " "2"" of type '" "gum::Potential< double > const &""'"); 
  }
  arg2 = reinterpret_cast< gum::Potential< double > * >(argp2);
  {
    try {
      result = gum_Potential_Sl_double_Sg____div__(arg1,(gum::Potential< double > const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::Potential< double >(static_cast< const gum::Potential< double >& >(result))), SWIGTYPE_p_gum__PotentialT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Potential_double___eq____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Potential< double > *arg1 = (gum::Potential< double > *) 0 ;
  gum::Potential< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Potential_double___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__PotentialT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Potential_double___eq__" "', argument " "1"" of type '" "gum::Potential< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::Potential< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__PotentialT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Potential_double___eq__" "', argument " "2"" of type '" "gum::Potential< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Potential_double___eq__" "', argument " "2"" of type '" "gum::Potential< double > const &""'"); 
  }
  arg2 = reinterpret_cast< gum::Potential< double > * >(argp2);
  {
    try {
      result = (bool)gum_Potential_Sl_double_Sg____eq____SWIG_1(arg1,(gum::Potential< double > const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Potential_double___eq__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__PotentialT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_gum__PotentialT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Potential_double___eq____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__PotentialT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_gum__PotentialT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Potential_double___eq____SWIG_0(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Potential_double___ne____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Potential< double > *arg1 = (gum::Potential< double > *) 0 ;
  gum::Potential< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Potential_double___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__PotentialT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Potential_double___ne__" "', argument " "1"" of type '" "gum::Potential< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::Potential< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__PotentialT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Potential_double___ne__" "', argument " "2"" of type '" "gum::Potential< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Potential_double___ne__" "', argument " "2"" of type '" "gum::Potential< double > const &""'"); 
  }
  arg2 = reinterpret_cast< gum::Potential< double > * >(argp2);
  {
    try {
      result = (bool)gum_Potential_Sl_double_Sg____ne____SWIG_1(arg1,(gum::Potential< double > const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Potential_double___ne__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__PotentialT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_gum__PotentialT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Potential_double___ne____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__PotentialT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_gum__PotentialT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Potential_double___ne____SWIG_0(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Potential_double___fill_distrib__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Potential< double > *arg1 = (gum::Potential< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Potential_double___fill_distrib__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__PotentialT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Potential_double___fill_distrib__" "', argument " "1"" of type '" "gum::Potential< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::Potential< double > * >(argp1);
  {
    try {
      gum_Potential_Sl_double_Sg____fill_distrib__(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Potential_double___indexfromdict__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Potential< double > *arg1 = (gum::Potential< double > *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Potential_double___indexfromdict__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__PotentialT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Potential_double___indexfromdict__" "', argument " "1"" of type '" "gum::Potential< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::Potential< double > * >(argp1);
  arg2 = obj1;
  {
    try {
      result = (PyObject *)gum_Potential_Sl_double_Sg____indexfromdict__(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Potential_double___str____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Potential< double > *arg1 = (gum::Potential< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Potential_double___str__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__PotentialT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Potential_double___str__" "', argument " "1"" of type '" "gum::Potential< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::Potential< double > * >(argp1);
  {
    try {
      result = (char *)gum_Potential_Sl_double_Sg____str____SWIG_1(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Potential_double___str__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__PotentialT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Potential_double___str____SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__PotentialT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Potential_double___str____SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Potential_double___str__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::Potential< double >::toString() const\n"
    "    gum::Potential< double >::__str__()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Potential_double_tolist(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Potential< double > *arg1 = (gum::Potential< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Potential_double_tolist",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__PotentialT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Potential_double_tolist" "', argument " "1"" of type '" "gum::Potential< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::Potential< double > * >(argp1);
  {
    try {
      result = (PyObject *)gum_Potential_Sl_double_Sg__tolist(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Potential_double_toarray(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Potential< double > *arg1 = (gum::Potential< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Potential_double_toarray",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__PotentialT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Potential_double_toarray" "', argument " "1"" of type '" "gum::Potential< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::Potential< double > * >(argp1);
  {
    try {
      result = (PyObject *)gum_Potential_Sl_double_Sg__toarray(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Potential_double___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Potential< double > *arg1 = (gum::Potential< double > *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Potential_double___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__PotentialT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Potential_double___getitem__" "', argument " "1"" of type '" "gum::Potential< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::Potential< double > * >(argp1);
  arg2 = obj1;
  {
    try {
      gum_Potential_Sl_double_Sg____getitem__(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Potential_double___setitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Potential< double > *arg1 = (gum::Potential< double > *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  PyObject *arg3 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Potential_double___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__PotentialT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Potential_double___setitem__" "', argument " "1"" of type '" "gum::Potential< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::Potential< double > * >(argp1);
  arg2 = obj1;
  arg3 = obj2;
  {
    try {
      gum_Potential_Sl_double_Sg____setitem__(arg1,arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Potential_double_var_names(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Potential< double > *arg1 = (gum::Potential< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Potential_double_var_names",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__PotentialT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Potential_double_var_names" "', argument " "1"" of type '" "gum::Potential< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::Potential< double > * >(argp1);
  {
    try {
      gum_Potential_Sl_double_Sg__var_names(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Potential_double_var_dims(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Potential< double > *arg1 = (gum::Potential< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Potential_double_var_dims",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__PotentialT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Potential_double_var_dims" "', argument " "1"" of type '" "gum::Potential< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::Potential< double > * >(argp1);
  {
    try {
      gum_Potential_Sl_double_Sg__var_dims(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Potential_double_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Potential< double > *arg1 = (gum::Potential< double > *) 0 ;
  gum::Instantiation *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Potential_double_get",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__PotentialT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Potential_double_get" "', argument " "1"" of type '" "gum::Potential< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::Potential< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__Instantiation,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Potential_double_get" "', argument " "2"" of type '" "gum::Instantiation const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Potential_double_get" "', argument " "2"" of type '" "gum::Instantiation const &""'"); 
  }
  arg2 = reinterpret_cast< gum::Instantiation * >(argp2);
  {
    try {
      result = (double)gum_Potential_Sl_double_Sg__get((gum::Potential< double > const *)arg1,(gum::Instantiation const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Potential_double_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Potential< double > *arg1 = (gum::Potential< double > *) 0 ;
  gum::Instantiation *arg2 = 0 ;
  double *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Potential_double_set",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__PotentialT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Potential_double_set" "', argument " "1"" of type '" "gum::Potential< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::Potential< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__Instantiation,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Potential_double_set" "', argument " "2"" of type '" "gum::Instantiation const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Potential_double_set" "', argument " "2"" of type '" "gum::Instantiation const &""'"); 
  }
  arg2 = reinterpret_cast< gum::Instantiation * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Potential_double_set" "', argument " "3"" of type '" "double""'");
  } 
  temp3 = static_cast< double >(val3);
  arg3 = &temp3;
  {
    try {
      gum_Potential_Sl_double_Sg__set((gum::Potential< double > const *)arg1,(gum::Instantiation const &)*arg2,(double const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Potential_double_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Potential< double > *arg1 = (gum::Potential< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Potential_double_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__PotentialT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Potential_double_empty" "', argument " "1"" of type '" "gum::Potential< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::Potential< double > * >(argp1);
  {
    try {
      result = (bool)gum_Potential_Sl_double_Sg__empty((gum::Potential< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Potential_double_pos(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Potential< double > *arg1 = (gum::Potential< double > *) 0 ;
  gum::DiscreteVariable *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::Idx result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Potential_double_pos",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__PotentialT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Potential_double_pos" "', argument " "1"" of type '" "gum::Potential< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::Potential< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__DiscreteVariable,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Potential_double_pos" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Potential_double_pos" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  arg2 = reinterpret_cast< gum::DiscreteVariable * >(argp2);
  {
    try {
      result = (gum::Idx)gum_Potential_Sl_double_Sg__pos((gum::Potential< double > const *)arg1,(gum::DiscreteVariable const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Potential_double_contains(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Potential< double > *arg1 = (gum::Potential< double > *) 0 ;
  gum::DiscreteVariable *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Potential_double_contains",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__PotentialT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Potential_double_contains" "', argument " "1"" of type '" "gum::Potential< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::Potential< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__DiscreteVariable,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Potential_double_contains" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Potential_double_contains" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  arg2 = reinterpret_cast< gum::DiscreteVariable * >(argp2);
  {
    try {
      result = (bool)gum_Potential_Sl_double_Sg__contains((gum::Potential< double > const *)arg1,(gum::DiscreteVariable const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Potential_double_nbrDim(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Potential< double > *arg1 = (gum::Potential< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::Idx result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Potential_double_nbrDim",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__PotentialT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Potential_double_nbrDim" "', argument " "1"" of type '" "gum::Potential< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::Potential< double > * >(argp1);
  {
    try {
      result = (gum::Idx)gum_Potential_Sl_double_Sg__nbrDim((gum::Potential< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Potential_double_variable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Potential< double > *arg1 = (gum::Potential< double > *) 0 ;
  gum::Idx arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::DiscreteVariable *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Potential_double_variable",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__PotentialT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Potential_double_variable" "', argument " "1"" of type '" "gum::Potential< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::Potential< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Potential_double_variable" "', argument " "2"" of type '" "gum::Idx""'");
  } 
  arg2 = static_cast< gum::Idx >(val2);
  {
    try {
      result = (gum::DiscreteVariable *) &gum_Potential_Sl_double_Sg__variable((gum::Potential< double > const *)arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__DiscreteVariable, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Potential_double_populate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Potential< double > *arg1 = (gum::Potential< double > *) 0 ;
  std::vector< double,std::allocator< double > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Potential_double_populate",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__PotentialT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Potential_double_populate" "', argument " "1"" of type '" "gum::Potential< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::Potential< double > * >(argp1);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Potential_double_populate" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Potential_double_populate" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      gum_Potential_Sl_double_Sg__populate((gum::Potential< double > const *)arg1,(std::vector< double,std::allocator< double > > const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Potential_double_fill(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Potential< double > *arg1 = (gum::Potential< double > *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Potential_double_fill",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__PotentialT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Potential_double_fill" "', argument " "1"" of type '" "gum::Potential< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::Potential< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Potential_double_fill" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  {
    try {
      gum_Potential_Sl_double_Sg__fill((gum::Potential< double > const *)arg1,(double const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Potential_double_remove(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Potential< double > *arg1 = (gum::Potential< double > *) 0 ;
  gum::DiscreteVariable *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Potential_double_remove",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__PotentialT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Potential_double_remove" "', argument " "1"" of type '" "gum::Potential< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::Potential< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__DiscreteVariable,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Potential_double_remove" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Potential_double_remove" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  arg2 = reinterpret_cast< gum::DiscreteVariable * >(argp2);
  {
    try {
      gum_Potential_Sl_double_Sg__remove(arg1,(gum::DiscreteVariable const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Potential_double_add(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::Potential< double > *arg1 = (gum::Potential< double > *) 0 ;
  gum::DiscreteVariable *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Potential_double_add",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__PotentialT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Potential_double_add" "', argument " "1"" of type '" "gum::Potential< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::Potential< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__DiscreteVariable,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Potential_double_add" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Potential_double_add" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  arg2 = reinterpret_cast< gum::DiscreteVariable * >(argp2);
  {
    try {
      gum_Potential_Sl_double_Sg__add(arg1,(gum::DiscreteVariable const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Potential_double_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gum__PotentialT_double_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_UtilityTable_double__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::UtilityTable< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_UtilityTable_double")) SWIG_fail;
  {
    try {
      result = (gum::UtilityTable< double > *)new gum::UtilityTable< double >();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__UtilityTableT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_UtilityTable_double__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::MultiDimImplementation< double > *arg1 = (gum::MultiDimImplementation< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::UtilityTable< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_UtilityTable_double",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__MultiDimImplementationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_UtilityTable_double" "', argument " "1"" of type '" "gum::MultiDimImplementation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::MultiDimImplementation< double > * >(argp1);
  {
    try {
      result = (gum::UtilityTable< double > *)new gum::UtilityTable< double >(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__UtilityTableT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_UtilityTable_double(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::UtilityTable< double > *arg1 = (gum::UtilityTable< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_UtilityTable_double",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__UtilityTableT_double_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_UtilityTable_double" "', argument " "1"" of type '" "gum::UtilityTable< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::UtilityTable< double > * >(argp1);
  {
    try {
      delete arg1;
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_UtilityTable_double__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::UtilityTable< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::UtilityTable< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_UtilityTable_double",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_gum__UtilityTableT_double_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_UtilityTable_double" "', argument " "1"" of type '" "gum::UtilityTable< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_UtilityTable_double" "', argument " "1"" of type '" "gum::UtilityTable< double > const &""'"); 
  }
  arg1 = reinterpret_cast< gum::UtilityTable< double > * >(argp1);
  {
    try {
      result = (gum::UtilityTable< double > *)new gum::UtilityTable< double >((gum::UtilityTable< double > const &)*arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__UtilityTableT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_UtilityTable_double(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_UtilityTable_double__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__MultiDimImplementationT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_UtilityTable_double__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_gum__UtilityTableT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_UtilityTable_double__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_UtilityTable_double'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::UtilityTable< double >::UtilityTable()\n"
    "    gum::UtilityTable< double >::UtilityTable(gum::MultiDimImplementation< double > *)\n"
    "    gum::UtilityTable< double >::UtilityTable(gum::UtilityTable< double > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_UtilityTable_double_newFactory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::UtilityTable< double > *arg1 = (gum::UtilityTable< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::UtilityTable< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UtilityTable_double_newFactory",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__UtilityTableT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UtilityTable_double_newFactory" "', argument " "1"" of type '" "gum::UtilityTable< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::UtilityTable< double > * >(argp1);
  {
    try {
      result = (gum::UtilityTable< double > *)((gum::UtilityTable< double > const *)arg1)->newFactory();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__UtilityTableT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UtilityTable_double___fill_distrib__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::UtilityTable< double > *arg1 = (gum::UtilityTable< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UtilityTable_double___fill_distrib__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__UtilityTableT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UtilityTable_double___fill_distrib__" "', argument " "1"" of type '" "gum::UtilityTable< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::UtilityTable< double > * >(argp1);
  {
    try {
      gum_UtilityTable_Sl_double_Sg____fill_distrib__(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UtilityTable_double___indexfromdict__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::UtilityTable< double > *arg1 = (gum::UtilityTable< double > *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UtilityTable_double___indexfromdict__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__UtilityTableT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UtilityTable_double___indexfromdict__" "', argument " "1"" of type '" "gum::UtilityTable< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::UtilityTable< double > * >(argp1);
  arg2 = obj1;
  {
    try {
      result = (PyObject *)gum_UtilityTable_Sl_double_Sg____indexfromdict__(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UtilityTable_double___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::UtilityTable< double > *arg1 = (gum::UtilityTable< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UtilityTable_double___str__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__UtilityTableT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UtilityTable_double___str__" "', argument " "1"" of type '" "gum::UtilityTable< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::UtilityTable< double > * >(argp1);
  {
    try {
      result = (char *)gum_UtilityTable_Sl_double_Sg____str__(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UtilityTable_double_tolist(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::UtilityTable< double > *arg1 = (gum::UtilityTable< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UtilityTable_double_tolist",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__UtilityTableT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UtilityTable_double_tolist" "', argument " "1"" of type '" "gum::UtilityTable< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::UtilityTable< double > * >(argp1);
  {
    try {
      result = (PyObject *)gum_UtilityTable_Sl_double_Sg__tolist(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UtilityTable_double_toarray(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::UtilityTable< double > *arg1 = (gum::UtilityTable< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UtilityTable_double_toarray",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__UtilityTableT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UtilityTable_double_toarray" "', argument " "1"" of type '" "gum::UtilityTable< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::UtilityTable< double > * >(argp1);
  {
    try {
      result = (PyObject *)gum_UtilityTable_Sl_double_Sg__toarray(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UtilityTable_double___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::UtilityTable< double > *arg1 = (gum::UtilityTable< double > *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UtilityTable_double___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__UtilityTableT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UtilityTable_double___getitem__" "', argument " "1"" of type '" "gum::UtilityTable< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::UtilityTable< double > * >(argp1);
  arg2 = obj1;
  {
    try {
      gum_UtilityTable_Sl_double_Sg____getitem__(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UtilityTable_double___setitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::UtilityTable< double > *arg1 = (gum::UtilityTable< double > *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  PyObject *arg3 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:UtilityTable_double___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__UtilityTableT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UtilityTable_double___setitem__" "', argument " "1"" of type '" "gum::UtilityTable< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::UtilityTable< double > * >(argp1);
  arg2 = obj1;
  arg3 = obj2;
  {
    try {
      gum_UtilityTable_Sl_double_Sg____setitem__(arg1,arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UtilityTable_double_var_names(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::UtilityTable< double > *arg1 = (gum::UtilityTable< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UtilityTable_double_var_names",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__UtilityTableT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UtilityTable_double_var_names" "', argument " "1"" of type '" "gum::UtilityTable< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::UtilityTable< double > * >(argp1);
  {
    try {
      gum_UtilityTable_Sl_double_Sg__var_names(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UtilityTable_double_var_dims(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::UtilityTable< double > *arg1 = (gum::UtilityTable< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UtilityTable_double_var_dims",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__UtilityTableT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UtilityTable_double_var_dims" "', argument " "1"" of type '" "gum::UtilityTable< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::UtilityTable< double > * >(argp1);
  {
    try {
      gum_UtilityTable_Sl_double_Sg__var_dims(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UtilityTable_double_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::UtilityTable< double > *arg1 = (gum::UtilityTable< double > *) 0 ;
  gum::Instantiation *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UtilityTable_double_get",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__UtilityTableT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UtilityTable_double_get" "', argument " "1"" of type '" "gum::UtilityTable< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::UtilityTable< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__Instantiation,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UtilityTable_double_get" "', argument " "2"" of type '" "gum::Instantiation const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UtilityTable_double_get" "', argument " "2"" of type '" "gum::Instantiation const &""'"); 
  }
  arg2 = reinterpret_cast< gum::Instantiation * >(argp2);
  {
    try {
      result = (double)gum_UtilityTable_Sl_double_Sg__get((gum::UtilityTable< double > const *)arg1,(gum::Instantiation const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UtilityTable_double_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::UtilityTable< double > *arg1 = (gum::UtilityTable< double > *) 0 ;
  gum::Instantiation *arg2 = 0 ;
  double *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:UtilityTable_double_set",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__UtilityTableT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UtilityTable_double_set" "', argument " "1"" of type '" "gum::UtilityTable< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::UtilityTable< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__Instantiation,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UtilityTable_double_set" "', argument " "2"" of type '" "gum::Instantiation const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UtilityTable_double_set" "', argument " "2"" of type '" "gum::Instantiation const &""'"); 
  }
  arg2 = reinterpret_cast< gum::Instantiation * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "UtilityTable_double_set" "', argument " "3"" of type '" "double""'");
  } 
  temp3 = static_cast< double >(val3);
  arg3 = &temp3;
  {
    try {
      gum_UtilityTable_Sl_double_Sg__set((gum::UtilityTable< double > const *)arg1,(gum::Instantiation const &)*arg2,(double const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UtilityTable_double_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::UtilityTable< double > *arg1 = (gum::UtilityTable< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UtilityTable_double_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__UtilityTableT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UtilityTable_double_empty" "', argument " "1"" of type '" "gum::UtilityTable< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::UtilityTable< double > * >(argp1);
  {
    try {
      result = (bool)gum_UtilityTable_Sl_double_Sg__empty((gum::UtilityTable< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UtilityTable_double_pos(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::UtilityTable< double > *arg1 = (gum::UtilityTable< double > *) 0 ;
  gum::DiscreteVariable *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::Idx result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UtilityTable_double_pos",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__UtilityTableT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UtilityTable_double_pos" "', argument " "1"" of type '" "gum::UtilityTable< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::UtilityTable< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__DiscreteVariable,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UtilityTable_double_pos" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UtilityTable_double_pos" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  arg2 = reinterpret_cast< gum::DiscreteVariable * >(argp2);
  {
    try {
      result = (gum::Idx)gum_UtilityTable_Sl_double_Sg__pos((gum::UtilityTable< double > const *)arg1,(gum::DiscreteVariable const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UtilityTable_double_contains(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::UtilityTable< double > *arg1 = (gum::UtilityTable< double > *) 0 ;
  gum::DiscreteVariable *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UtilityTable_double_contains",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__UtilityTableT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UtilityTable_double_contains" "', argument " "1"" of type '" "gum::UtilityTable< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::UtilityTable< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__DiscreteVariable,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UtilityTable_double_contains" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UtilityTable_double_contains" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  arg2 = reinterpret_cast< gum::DiscreteVariable * >(argp2);
  {
    try {
      result = (bool)gum_UtilityTable_Sl_double_Sg__contains((gum::UtilityTable< double > const *)arg1,(gum::DiscreteVariable const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UtilityTable_double_nbrDim(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::UtilityTable< double > *arg1 = (gum::UtilityTable< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::Idx result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UtilityTable_double_nbrDim",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__UtilityTableT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UtilityTable_double_nbrDim" "', argument " "1"" of type '" "gum::UtilityTable< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::UtilityTable< double > * >(argp1);
  {
    try {
      result = (gum::Idx)gum_UtilityTable_Sl_double_Sg__nbrDim((gum::UtilityTable< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UtilityTable_double_variable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::UtilityTable< double > *arg1 = (gum::UtilityTable< double > *) 0 ;
  gum::Idx arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::DiscreteVariable *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UtilityTable_double_variable",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__UtilityTableT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UtilityTable_double_variable" "', argument " "1"" of type '" "gum::UtilityTable< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::UtilityTable< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UtilityTable_double_variable" "', argument " "2"" of type '" "gum::Idx""'");
  } 
  arg2 = static_cast< gum::Idx >(val2);
  {
    try {
      result = (gum::DiscreteVariable *) &gum_UtilityTable_Sl_double_Sg__variable((gum::UtilityTable< double > const *)arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__DiscreteVariable, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UtilityTable_double_populate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::UtilityTable< double > *arg1 = (gum::UtilityTable< double > *) 0 ;
  std::vector< double,std::allocator< double > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UtilityTable_double_populate",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__UtilityTableT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UtilityTable_double_populate" "', argument " "1"" of type '" "gum::UtilityTable< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::UtilityTable< double > * >(argp1);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UtilityTable_double_populate" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UtilityTable_double_populate" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      gum_UtilityTable_Sl_double_Sg__populate((gum::UtilityTable< double > const *)arg1,(std::vector< double,std::allocator< double > > const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_UtilityTable_double_fill(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::UtilityTable< double > *arg1 = (gum::UtilityTable< double > *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UtilityTable_double_fill",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__UtilityTableT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UtilityTable_double_fill" "', argument " "1"" of type '" "gum::UtilityTable< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::UtilityTable< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UtilityTable_double_fill" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  {
    try {
      gum_UtilityTable_Sl_double_Sg__fill((gum::UtilityTable< double > const *)arg1,(double const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UtilityTable_double_remove(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::UtilityTable< double > *arg1 = (gum::UtilityTable< double > *) 0 ;
  gum::DiscreteVariable *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UtilityTable_double_remove",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__UtilityTableT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UtilityTable_double_remove" "', argument " "1"" of type '" "gum::UtilityTable< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::UtilityTable< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__DiscreteVariable,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UtilityTable_double_remove" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UtilityTable_double_remove" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  arg2 = reinterpret_cast< gum::DiscreteVariable * >(argp2);
  {
    try {
      gum_UtilityTable_Sl_double_Sg__remove(arg1,(gum::DiscreteVariable const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UtilityTable_double_add(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::UtilityTable< double > *arg1 = (gum::UtilityTable< double > *) 0 ;
  gum::DiscreteVariable *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UtilityTable_double_add",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__UtilityTableT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UtilityTable_double_add" "', argument " "1"" of type '" "gum::UtilityTable< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::UtilityTable< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__DiscreteVariable,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UtilityTable_double_add" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UtilityTable_double_add" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  arg2 = reinterpret_cast< gum::DiscreteVariable * >(argp2);
  {
    try {
      gum_UtilityTable_Sl_double_Sg__add(arg1,(gum::DiscreteVariable const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *UtilityTable_double_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gum__UtilityTableT_double_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_IBayesNet_double(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::IBayesNet< double > *arg1 = (gum::IBayesNet< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_IBayesNet_double",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__IBayesNetT_double_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IBayesNet_double" "', argument " "1"" of type '" "gum::IBayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::IBayesNet< double > * >(argp1);
  {
    try {
      delete arg1;
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IBayesNet_double_cpt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::IBayesNet< double > *arg1 = (gum::IBayesNet< double > *) 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::Potential< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IBayesNet_double_cpt",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__IBayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IBayesNet_double_cpt" "', argument " "1"" of type '" "gum::IBayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::IBayesNet< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IBayesNet_double_cpt" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (gum::Potential< double > *) &((gum::IBayesNet< double > const *)arg1)->cpt(arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__PotentialT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IBayesNet_double_variableNodeMap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::IBayesNet< double > *arg1 = (gum::IBayesNet< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::VariableNodeMap *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IBayesNet_double_variableNodeMap",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__IBayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IBayesNet_double_variableNodeMap" "', argument " "1"" of type '" "gum::IBayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::IBayesNet< double > * >(argp1);
  {
    try {
      result = (gum::VariableNodeMap *) &((gum::IBayesNet< double > const *)arg1)->variableNodeMap();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__VariableNodeMap, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IBayesNet_double_variable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::IBayesNet< double > *arg1 = (gum::IBayesNet< double > *) 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::DiscreteVariable *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IBayesNet_double_variable",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__IBayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IBayesNet_double_variable" "', argument " "1"" of type '" "gum::IBayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::IBayesNet< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IBayesNet_double_variable" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (gum::DiscreteVariable *) &((gum::IBayesNet< double > const *)arg1)->variable(arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__DiscreteVariable, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IBayesNet_double_nodeId(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::IBayesNet< double > *arg1 = (gum::IBayesNet< double > *) 0 ;
  gum::DiscreteVariable *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::NodeId result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IBayesNet_double_nodeId",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__IBayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IBayesNet_double_nodeId" "', argument " "1"" of type '" "gum::IBayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::IBayesNet< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__DiscreteVariable,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IBayesNet_double_nodeId" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IBayesNet_double_nodeId" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  arg2 = reinterpret_cast< gum::DiscreteVariable * >(argp2);
  {
    try {
      result = (gum::NodeId)((gum::IBayesNet< double > const *)arg1)->nodeId((gum::DiscreteVariable const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IBayesNet_double_idFromName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::IBayesNet< double > *arg1 = (gum::IBayesNet< double > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::NodeId result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IBayesNet_double_idFromName",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__IBayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IBayesNet_double_idFromName" "', argument " "1"" of type '" "gum::IBayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::IBayesNet< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IBayesNet_double_idFromName" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IBayesNet_double_idFromName" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (gum::NodeId)((gum::IBayesNet< double > const *)arg1)->idFromName((std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IBayesNet_double_variableFromName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::IBayesNet< double > *arg1 = (gum::IBayesNet< double > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::DiscreteVariable *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IBayesNet_double_variableFromName",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__IBayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IBayesNet_double_variableFromName" "', argument " "1"" of type '" "gum::IBayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::IBayesNet< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IBayesNet_double_variableFromName" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IBayesNet_double_variableFromName" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (gum::DiscreteVariable *) &((gum::IBayesNet< double > const *)arg1)->variableFromName((std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__DiscreteVariable, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IBayesNet_double_jointProbability(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::IBayesNet< double > *arg1 = (gum::IBayesNet< double > *) 0 ;
  gum::Instantiation *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IBayesNet_double_jointProbability",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__IBayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IBayesNet_double_jointProbability" "', argument " "1"" of type '" "gum::IBayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::IBayesNet< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__Instantiation,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IBayesNet_double_jointProbability" "', argument " "2"" of type '" "gum::Instantiation const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IBayesNet_double_jointProbability" "', argument " "2"" of type '" "gum::Instantiation const &""'"); 
  }
  arg2 = reinterpret_cast< gum::Instantiation * >(argp2);
  {
    try {
      result = (double)((gum::IBayesNet< double > const *)arg1)->jointProbability((gum::Instantiation const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IBayesNet_double_log2JointProbability(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::IBayesNet< double > *arg1 = (gum::IBayesNet< double > *) 0 ;
  gum::Instantiation *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IBayesNet_double_log2JointProbability",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__IBayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IBayesNet_double_log2JointProbability" "', argument " "1"" of type '" "gum::IBayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::IBayesNet< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__Instantiation,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IBayesNet_double_log2JointProbability" "', argument " "2"" of type '" "gum::Instantiation const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IBayesNet_double_log2JointProbability" "', argument " "2"" of type '" "gum::Instantiation const &""'"); 
  }
  arg2 = reinterpret_cast< gum::Instantiation * >(argp2);
  {
    try {
      result = (double)((gum::IBayesNet< double > const *)arg1)->log2JointProbability((gum::Instantiation const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IBayesNet_double___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::IBayesNet< double > *arg1 = (gum::IBayesNet< double > *) 0 ;
  gum::IBayesNet< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IBayesNet_double___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__IBayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IBayesNet_double___eq__" "', argument " "1"" of type '" "gum::IBayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::IBayesNet< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__IBayesNetT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IBayesNet_double___eq__" "', argument " "2"" of type '" "gum::IBayesNet< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IBayesNet_double___eq__" "', argument " "2"" of type '" "gum::IBayesNet< double > const &""'"); 
  }
  arg2 = reinterpret_cast< gum::IBayesNet< double > * >(argp2);
  {
    try {
      result = (bool)((gum::IBayesNet< double > const *)arg1)->operator ==((gum::IBayesNet< double > const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IBayesNet_double___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::IBayesNet< double > *arg1 = (gum::IBayesNet< double > *) 0 ;
  gum::IBayesNet< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IBayesNet_double___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__IBayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IBayesNet_double___ne__" "', argument " "1"" of type '" "gum::IBayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::IBayesNet< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__IBayesNetT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IBayesNet_double___ne__" "', argument " "2"" of type '" "gum::IBayesNet< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IBayesNet_double___ne__" "', argument " "2"" of type '" "gum::IBayesNet< double > const &""'"); 
  }
  arg2 = reinterpret_cast< gum::IBayesNet< double > * >(argp2);
  {
    try {
      result = (bool)((gum::IBayesNet< double > const *)arg1)->operator !=((gum::IBayesNet< double > const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IBayesNet_double_dim(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::IBayesNet< double > *arg1 = (gum::IBayesNet< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::Size result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IBayesNet_double_dim",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__IBayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IBayesNet_double_dim" "', argument " "1"" of type '" "gum::IBayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::IBayesNet< double > * >(argp1);
  {
    try {
      result = (gum::Size)((gum::IBayesNet< double > const *)arg1)->dim();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IBayesNet_double_maxVarDomainSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::IBayesNet< double > *arg1 = (gum::IBayesNet< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::Size result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IBayesNet_double_maxVarDomainSize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__IBayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IBayesNet_double_maxVarDomainSize" "', argument " "1"" of type '" "gum::IBayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::IBayesNet< double > * >(argp1);
  {
    try {
      result = (gum::Size)((gum::IBayesNet< double > const *)arg1)->maxVarDomainSize();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IBayesNet_double_minParam(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::IBayesNet< double > *arg1 = (gum::IBayesNet< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IBayesNet_double_minParam",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__IBayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IBayesNet_double_minParam" "', argument " "1"" of type '" "gum::IBayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::IBayesNet< double > * >(argp1);
  {
    try {
      result = (double)((gum::IBayesNet< double > const *)arg1)->minParam();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IBayesNet_double_maxParam(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::IBayesNet< double > *arg1 = (gum::IBayesNet< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IBayesNet_double_maxParam",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__IBayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IBayesNet_double_maxParam" "', argument " "1"" of type '" "gum::IBayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::IBayesNet< double > * >(argp1);
  {
    try {
      result = (double)((gum::IBayesNet< double > const *)arg1)->maxParam();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IBayesNet_double_minNonZeroParam(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::IBayesNet< double > *arg1 = (gum::IBayesNet< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IBayesNet_double_minNonZeroParam",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__IBayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IBayesNet_double_minNonZeroParam" "', argument " "1"" of type '" "gum::IBayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::IBayesNet< double > * >(argp1);
  {
    try {
      result = (double)((gum::IBayesNet< double > const *)arg1)->minNonZeroParam();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IBayesNet_double_maxNonOneParam(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::IBayesNet< double > *arg1 = (gum::IBayesNet< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IBayesNet_double_maxNonOneParam",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__IBayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IBayesNet_double_maxNonOneParam" "', argument " "1"" of type '" "gum::IBayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::IBayesNet< double > * >(argp1);
  {
    try {
      result = (double)((gum::IBayesNet< double > const *)arg1)->maxNonOneParam();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IBayesNet_double_toDot(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::IBayesNet< double > *arg1 = (gum::IBayesNet< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IBayesNet_double_toDot",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__IBayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IBayesNet_double_toDot" "', argument " "1"" of type '" "gum::IBayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::IBayesNet< double > * >(argp1);
  {
    try {
      result = ((gum::IBayesNet< double > const *)arg1)->toDot();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IBayesNet_double___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::IBayesNet< double > *arg1 = (gum::IBayesNet< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IBayesNet_double___str__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__IBayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IBayesNet_double___str__" "', argument " "1"" of type '" "gum::IBayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::IBayesNet< double > * >(argp1);
  {
    try {
      result = ((gum::IBayesNet< double > const *)arg1)->toString();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *IBayesNet_double_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gum__IBayesNetT_double_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_BayesNet_double__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_BayesNet_double")) SWIG_fail;
  {
    try {
      result = (gum::BayesNet< double > *)new gum::BayesNet< double >();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__BayesNetT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BayesNet_double__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  gum::BayesNet< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_BayesNet_double",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_BayesNet_double" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (gum::BayesNet< double > *)new gum::BayesNet< double >(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__BayesNetT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_BayesNet_double(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = (gum::BayesNet< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_BayesNet_double",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_BayesNet_double" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  {
    try {
      delete arg1;
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BayesNet_double__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::BayesNet< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_BayesNet_double",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_gum__BayesNetT_double_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_BayesNet_double" "', argument " "1"" of type '" "gum::BayesNet< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_BayesNet_double" "', argument " "1"" of type '" "gum::BayesNet< double > const &""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  {
    try {
      result = (gum::BayesNet< double > *)new gum::BayesNet< double >((gum::BayesNet< double > const &)*arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__BayesNetT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BayesNet_double(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_BayesNet_double__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_gum__BayesNetT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_BayesNet_double__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_BayesNet_double__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_BayesNet_double'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::BayesNet< double >::BayesNet()\n"
    "    gum::BayesNet< double >::BayesNet(std::string)\n"
    "    gum::BayesNet< double >::BayesNet(gum::BayesNet< double > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BayesNet_double_cpt__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = (gum::BayesNet< double > *) 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::Potential< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BayesNet_double_cpt",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_double_cpt" "', argument " "1"" of type '" "gum::BayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BayesNet_double_cpt" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (gum::Potential< double > *) &((gum::BayesNet< double > const *)arg1)->cpt(arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__PotentialT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_double_cpt__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = (gum::BayesNet< double > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::Potential< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BayesNet_double_cpt",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_double_cpt" "', argument " "1"" of type '" "gum::BayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNet_double_cpt" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BayesNet_double_cpt" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (gum::Potential< double > *) &((gum::BayesNet< double > const *)arg1)->cpt((std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__PotentialT_double_t, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_double_cpt(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__BayesNetT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_BayesNet_double_cpt__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__BayesNetT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_BayesNet_double_cpt__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'BayesNet_double_cpt'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::BayesNet< double >::cpt(gum::NodeId) const\n"
    "    gum::BayesNet< double >::cpt(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BayesNet_double_variableNodeMap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = (gum::BayesNet< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::VariableNodeMap *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BayesNet_double_variableNodeMap",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_double_variableNodeMap" "', argument " "1"" of type '" "gum::BayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  {
    try {
      result = (gum::VariableNodeMap *) &((gum::BayesNet< double > const *)arg1)->variableNodeMap();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__VariableNodeMap, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_double_add__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = (gum::BayesNet< double > *) 0 ;
  gum::DiscreteVariable *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::NodeId result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BayesNet_double_add",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_double_add" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__DiscreteVariable,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNet_double_add" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BayesNet_double_add" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  arg2 = reinterpret_cast< gum::DiscreteVariable * >(argp2);
  {
    try {
      result = (gum::NodeId)(arg1)->add((gum::DiscreteVariable const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_double_add__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = (gum::BayesNet< double > *) 0 ;
  std::string *arg2 = 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  gum::NodeId result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BayesNet_double_add",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_double_add" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNet_double_add" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BayesNet_double_add" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BayesNet_double_add" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  {
    try {
      result = (gum::NodeId)(arg1)->add((std::string const &)*arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_double_add__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = (gum::BayesNet< double > *) 0 ;
  gum::DiscreteVariable *arg2 = 0 ;
  gum::MultiDimImplementation< double > *arg3 = (gum::MultiDimImplementation< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  gum::NodeId result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BayesNet_double_add",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_double_add" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__DiscreteVariable,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNet_double_add" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BayesNet_double_add" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  arg2 = reinterpret_cast< gum::DiscreteVariable * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_gum__MultiDimImplementationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BayesNet_double_add" "', argument " "3"" of type '" "gum::MultiDimImplementation< double > *""'"); 
  }
  arg3 = reinterpret_cast< gum::MultiDimImplementation< double > * >(argp3);
  {
    try {
      result = (gum::NodeId)(arg1)->add((gum::DiscreteVariable const &)*arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_double_add__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = (gum::BayesNet< double > *) 0 ;
  gum::DiscreteVariable *arg2 = 0 ;
  gum::NodeId arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  gum::NodeId result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BayesNet_double_add",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_double_add" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__DiscreteVariable,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNet_double_add" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BayesNet_double_add" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  arg2 = reinterpret_cast< gum::DiscreteVariable * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BayesNet_double_add" "', argument " "3"" of type '" "gum::NodeId""'");
  } 
  arg3 = static_cast< gum::NodeId >(val3);
  {
    try {
      result = (gum::NodeId)(arg1)->add((gum::DiscreteVariable const &)*arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_double_add__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = (gum::BayesNet< double > *) 0 ;
  gum::DiscreteVariable *arg2 = 0 ;
  gum::MultiDimImplementation< double > *arg3 = (gum::MultiDimImplementation< double > *) 0 ;
  gum::NodeId arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  gum::NodeId result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:BayesNet_double_add",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_double_add" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__DiscreteVariable,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNet_double_add" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BayesNet_double_add" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  arg2 = reinterpret_cast< gum::DiscreteVariable * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_gum__MultiDimImplementationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BayesNet_double_add" "', argument " "3"" of type '" "gum::MultiDimImplementation< double > *""'"); 
  }
  arg3 = reinterpret_cast< gum::MultiDimImplementation< double > * >(argp3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "BayesNet_double_add" "', argument " "4"" of type '" "gum::NodeId""'");
  } 
  arg4 = static_cast< gum::NodeId >(val4);
  {
    try {
      result = (gum::NodeId)(arg1)->add((gum::DiscreteVariable const &)*arg2,arg3,arg4);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_double_add(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__BayesNetT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_gum__DiscreteVariable, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_BayesNet_double_add__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__BayesNetT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_gum__DiscreteVariable, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_gum__MultiDimImplementationT_double_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_BayesNet_double_add__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__BayesNetT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_gum__DiscreteVariable, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_BayesNet_double_add__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__BayesNetT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_BayesNet_double_add__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__BayesNetT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_gum__DiscreteVariable, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_gum__MultiDimImplementationT_double_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_BayesNet_double_add__SWIG_4(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'BayesNet_double_add'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::BayesNet< double >::add(gum::DiscreteVariable const &)\n"
    "    gum::BayesNet< double >::add(std::string const &,unsigned int)\n"
    "    gum::BayesNet< double >::add(gum::DiscreteVariable const &,gum::MultiDimImplementation< double > *)\n"
    "    gum::BayesNet< double >::add(gum::DiscreteVariable const &,gum::NodeId)\n"
    "    gum::BayesNet< double >::add(gum::DiscreteVariable const &,gum::MultiDimImplementation< double > *,gum::NodeId)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BayesNet_double_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = (gum::BayesNet< double > *) 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BayesNet_double_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_double_erase" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BayesNet_double_erase" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      (arg1)->erase(arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_double_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = (gum::BayesNet< double > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BayesNet_double_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_double_erase" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNet_double_erase" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BayesNet_double_erase" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->erase((std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_double_erase__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = (gum::BayesNet< double > *) 0 ;
  gum::DiscreteVariable *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BayesNet_double_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_double_erase" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__DiscreteVariable,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNet_double_erase" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BayesNet_double_erase" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  arg2 = reinterpret_cast< gum::DiscreteVariable * >(argp2);
  {
    try {
      (arg1)->erase((gum::DiscreteVariable const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_double_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__BayesNetT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_gum__DiscreteVariable, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_BayesNet_double_erase__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__BayesNetT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_BayesNet_double_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__BayesNetT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_BayesNet_double_erase__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'BayesNet_double_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::BayesNet< double >::erase(gum::NodeId)\n"
    "    gum::BayesNet< double >::erase(std::string const &)\n"
    "    gum::BayesNet< double >::erase(gum::DiscreteVariable const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BayesNet_double_variable__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = (gum::BayesNet< double > *) 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::DiscreteVariable *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BayesNet_double_variable",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_double_variable" "', argument " "1"" of type '" "gum::BayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BayesNet_double_variable" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (gum::DiscreteVariable *) &((gum::BayesNet< double > const *)arg1)->variable(arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__DiscreteVariable, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_double_variable__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = (gum::BayesNet< double > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::DiscreteVariable *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BayesNet_double_variable",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_double_variable" "', argument " "1"" of type '" "gum::BayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNet_double_variable" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BayesNet_double_variable" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (gum::DiscreteVariable *) &((gum::BayesNet< double > const *)arg1)->variable((std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__DiscreteVariable, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_double_variable(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__BayesNetT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_BayesNet_double_variable__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__BayesNetT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_BayesNet_double_variable__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'BayesNet_double_variable'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::BayesNet< double >::variable(gum::NodeId) const\n"
    "    gum::BayesNet< double >::variable(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BayesNet_double_changeVariableName__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = (gum::BayesNet< double > *) 0 ;
  gum::NodeId arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BayesNet_double_changeVariableName",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_double_changeVariableName" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BayesNet_double_changeVariableName" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BayesNet_double_changeVariableName" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BayesNet_double_changeVariableName" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->changeVariableName(arg2,(std::string const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_double_changeVariableName__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = (gum::BayesNet< double > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BayesNet_double_changeVariableName",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_double_changeVariableName" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNet_double_changeVariableName" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BayesNet_double_changeVariableName" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BayesNet_double_changeVariableName" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BayesNet_double_changeVariableName" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->changeVariableName((std::string const &)*arg2,(std::string const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_double_changeVariableName(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__BayesNetT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_BayesNet_double_changeVariableName__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__BayesNetT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_BayesNet_double_changeVariableName__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'BayesNet_double_changeVariableName'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::BayesNet< double >::changeVariableName(gum::NodeId,std::string const &)\n"
    "    gum::BayesNet< double >::changeVariableName(std::string const &,std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BayesNet_double_nodeId(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = (gum::BayesNet< double > *) 0 ;
  gum::DiscreteVariable *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::NodeId result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BayesNet_double_nodeId",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_double_nodeId" "', argument " "1"" of type '" "gum::BayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__DiscreteVariable,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNet_double_nodeId" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BayesNet_double_nodeId" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  arg2 = reinterpret_cast< gum::DiscreteVariable * >(argp2);
  {
    try {
      result = (gum::NodeId)((gum::BayesNet< double > const *)arg1)->nodeId((gum::DiscreteVariable const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_double_idFromName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = (gum::BayesNet< double > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::NodeId result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BayesNet_double_idFromName",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_double_idFromName" "', argument " "1"" of type '" "gum::BayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNet_double_idFromName" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BayesNet_double_idFromName" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (gum::NodeId)((gum::BayesNet< double > const *)arg1)->idFromName((std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_double_variableFromName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = (gum::BayesNet< double > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::DiscreteVariable *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BayesNet_double_variableFromName",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_double_variableFromName" "', argument " "1"" of type '" "gum::BayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNet_double_variableFromName" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BayesNet_double_variableFromName" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (gum::DiscreteVariable *) &((gum::BayesNet< double > const *)arg1)->variableFromName((std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__DiscreteVariable, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_double_addArc__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = (gum::BayesNet< double > *) 0 ;
  gum::NodeId arg2 ;
  gum::NodeId arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BayesNet_double_addArc",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_double_addArc" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BayesNet_double_addArc" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BayesNet_double_addArc" "', argument " "3"" of type '" "gum::NodeId""'");
  } 
  arg3 = static_cast< gum::NodeId >(val3);
  {
    try {
      (arg1)->addArc(arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_double_addArc__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = (gum::BayesNet< double > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BayesNet_double_addArc",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_double_addArc" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNet_double_addArc" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BayesNet_double_addArc" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BayesNet_double_addArc" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BayesNet_double_addArc" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->addArc((std::string const &)*arg2,(std::string const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_double_addArc(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__BayesNetT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_BayesNet_double_addArc__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__BayesNetT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_BayesNet_double_addArc__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'BayesNet_double_addArc'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::BayesNet< double >::addArc(gum::NodeId,gum::NodeId)\n"
    "    gum::BayesNet< double >::addArc(std::string const &,std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BayesNet_double_eraseArc__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = (gum::BayesNet< double > *) 0 ;
  gum::Arc *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BayesNet_double_eraseArc",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_double_eraseArc" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__Arc,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNet_double_eraseArc" "', argument " "2"" of type '" "gum::Arc const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BayesNet_double_eraseArc" "', argument " "2"" of type '" "gum::Arc const &""'"); 
  }
  arg2 = reinterpret_cast< gum::Arc * >(argp2);
  {
    try {
      (arg1)->eraseArc((gum::Arc const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_double_eraseArc__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = (gum::BayesNet< double > *) 0 ;
  gum::NodeId arg2 ;
  gum::NodeId arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BayesNet_double_eraseArc",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_double_eraseArc" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BayesNet_double_eraseArc" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BayesNet_double_eraseArc" "', argument " "3"" of type '" "gum::NodeId""'");
  } 
  arg3 = static_cast< gum::NodeId >(val3);
  {
    try {
      (arg1)->eraseArc(arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_double_eraseArc__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = (gum::BayesNet< double > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BayesNet_double_eraseArc",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_double_eraseArc" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNet_double_eraseArc" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BayesNet_double_eraseArc" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BayesNet_double_eraseArc" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BayesNet_double_eraseArc" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->eraseArc((std::string const &)*arg2,(std::string const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_double_eraseArc(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__BayesNetT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_gum__Arc, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_BayesNet_double_eraseArc__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__BayesNetT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_BayesNet_double_eraseArc__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__BayesNetT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_BayesNet_double_eraseArc__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'BayesNet_double_eraseArc'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::BayesNet< double >::eraseArc(gum::Arc const &)\n"
    "    gum::BayesNet< double >::eraseArc(gum::NodeId,gum::NodeId)\n"
    "    gum::BayesNet< double >::eraseArc(std::string const &,std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BayesNet_double_beginTopologyTransformation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = (gum::BayesNet< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BayesNet_double_beginTopologyTransformation",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_double_beginTopologyTransformation" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  {
    try {
      (arg1)->beginTopologyTransformation();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_double_endTopologyTransformation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = (gum::BayesNet< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BayesNet_double_endTopologyTransformation",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_double_endTopologyTransformation" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  {
    try {
      (arg1)->endTopologyTransformation();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_double_reverseArc__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = (gum::BayesNet< double > *) 0 ;
  gum::NodeId arg2 ;
  gum::NodeId arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BayesNet_double_reverseArc",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_double_reverseArc" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BayesNet_double_reverseArc" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BayesNet_double_reverseArc" "', argument " "3"" of type '" "gum::NodeId""'");
  } 
  arg3 = static_cast< gum::NodeId >(val3);
  {
    try {
      (arg1)->reverseArc(arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_double_reverseArc__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = (gum::BayesNet< double > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BayesNet_double_reverseArc",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_double_reverseArc" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNet_double_reverseArc" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BayesNet_double_reverseArc" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BayesNet_double_reverseArc" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BayesNet_double_reverseArc" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->reverseArc((std::string const &)*arg2,(std::string const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_double_reverseArc__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = (gum::BayesNet< double > *) 0 ;
  gum::Arc *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BayesNet_double_reverseArc",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_double_reverseArc" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__Arc,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNet_double_reverseArc" "', argument " "2"" of type '" "gum::Arc const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BayesNet_double_reverseArc" "', argument " "2"" of type '" "gum::Arc const &""'"); 
  }
  arg2 = reinterpret_cast< gum::Arc * >(argp2);
  {
    try {
      (arg1)->reverseArc((gum::Arc const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_double_reverseArc(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__BayesNetT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_gum__Arc, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_BayesNet_double_reverseArc__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__BayesNetT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_BayesNet_double_reverseArc__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__BayesNetT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_BayesNet_double_reverseArc__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'BayesNet_double_reverseArc'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::BayesNet< double >::reverseArc(gum::NodeId,gum::NodeId)\n"
    "    gum::BayesNet< double >::reverseArc(std::string const &,std::string const &)\n"
    "    gum::BayesNet< double >::reverseArc(gum::Arc const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BayesNet_double_addNoisyOR__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = (gum::BayesNet< double > *) 0 ;
  gum::DiscreteVariable *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  gum::NodeId result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BayesNet_double_addNoisyOR",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_double_addNoisyOR" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__DiscreteVariable,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNet_double_addNoisyOR" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BayesNet_double_addNoisyOR" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  arg2 = reinterpret_cast< gum::DiscreteVariable * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BayesNet_double_addNoisyOR" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (gum::NodeId)(arg1)->addNoisyOR((gum::DiscreteVariable const &)*arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_double_addNoisyORNet__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = (gum::BayesNet< double > *) 0 ;
  gum::DiscreteVariable *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  gum::NodeId result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BayesNet_double_addNoisyORNet",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_double_addNoisyORNet" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__DiscreteVariable,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNet_double_addNoisyORNet" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BayesNet_double_addNoisyORNet" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  arg2 = reinterpret_cast< gum::DiscreteVariable * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BayesNet_double_addNoisyORNet" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (gum::NodeId)(arg1)->addNoisyORNet((gum::DiscreteVariable const &)*arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_double_addNoisyORCompound__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = (gum::BayesNet< double > *) 0 ;
  gum::DiscreteVariable *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  gum::NodeId result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BayesNet_double_addNoisyORCompound",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_double_addNoisyORCompound" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__DiscreteVariable,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNet_double_addNoisyORCompound" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BayesNet_double_addNoisyORCompound" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  arg2 = reinterpret_cast< gum::DiscreteVariable * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BayesNet_double_addNoisyORCompound" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (gum::NodeId)(arg1)->addNoisyORCompound((gum::DiscreteVariable const &)*arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_double_addNoisyOR__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = (gum::BayesNet< double > *) 0 ;
  gum::DiscreteVariable *arg2 = 0 ;
  double arg3 ;
  gum::NodeId arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  gum::NodeId result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:BayesNet_double_addNoisyOR",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_double_addNoisyOR" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__DiscreteVariable,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNet_double_addNoisyOR" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BayesNet_double_addNoisyOR" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  arg2 = reinterpret_cast< gum::DiscreteVariable * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BayesNet_double_addNoisyOR" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "BayesNet_double_addNoisyOR" "', argument " "4"" of type '" "gum::NodeId""'");
  } 
  arg4 = static_cast< gum::NodeId >(val4);
  {
    try {
      result = (gum::NodeId)(arg1)->addNoisyOR((gum::DiscreteVariable const &)*arg2,arg3,arg4);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_double_addNoisyOR(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__BayesNetT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_gum__DiscreteVariable, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_BayesNet_double_addNoisyOR__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__BayesNetT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_gum__DiscreteVariable, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_BayesNet_double_addNoisyOR__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'BayesNet_double_addNoisyOR'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::BayesNet< double >::addNoisyOR(gum::DiscreteVariable const &,double)\n"
    "    gum::BayesNet< double >::addNoisyOR(gum::DiscreteVariable const &,double,gum::NodeId)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BayesNet_double_addNoisyORNet__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = (gum::BayesNet< double > *) 0 ;
  gum::DiscreteVariable *arg2 = 0 ;
  double arg3 ;
  gum::NodeId arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  gum::NodeId result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:BayesNet_double_addNoisyORNet",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_double_addNoisyORNet" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__DiscreteVariable,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNet_double_addNoisyORNet" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BayesNet_double_addNoisyORNet" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  arg2 = reinterpret_cast< gum::DiscreteVariable * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BayesNet_double_addNoisyORNet" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "BayesNet_double_addNoisyORNet" "', argument " "4"" of type '" "gum::NodeId""'");
  } 
  arg4 = static_cast< gum::NodeId >(val4);
  {
    try {
      result = (gum::NodeId)(arg1)->addNoisyORNet((gum::DiscreteVariable const &)*arg2,arg3,arg4);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_double_addNoisyORNet(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__BayesNetT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_gum__DiscreteVariable, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_BayesNet_double_addNoisyORNet__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__BayesNetT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_gum__DiscreteVariable, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_BayesNet_double_addNoisyORNet__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'BayesNet_double_addNoisyORNet'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::BayesNet< double >::addNoisyORNet(gum::DiscreteVariable const &,double)\n"
    "    gum::BayesNet< double >::addNoisyORNet(gum::DiscreteVariable const &,double,gum::NodeId)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BayesNet_double_addNoisyORCompound__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = (gum::BayesNet< double > *) 0 ;
  gum::DiscreteVariable *arg2 = 0 ;
  double arg3 ;
  gum::NodeId arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  gum::NodeId result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:BayesNet_double_addNoisyORCompound",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_double_addNoisyORCompound" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__DiscreteVariable,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNet_double_addNoisyORCompound" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BayesNet_double_addNoisyORCompound" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  arg2 = reinterpret_cast< gum::DiscreteVariable * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BayesNet_double_addNoisyORCompound" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "BayesNet_double_addNoisyORCompound" "', argument " "4"" of type '" "gum::NodeId""'");
  } 
  arg4 = static_cast< gum::NodeId >(val4);
  {
    try {
      result = (gum::NodeId)(arg1)->addNoisyORCompound((gum::DiscreteVariable const &)*arg2,arg3,arg4);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_double_addNoisyORCompound(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__BayesNetT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_gum__DiscreteVariable, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_BayesNet_double_addNoisyORCompound__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__BayesNetT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_gum__DiscreteVariable, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_BayesNet_double_addNoisyORCompound__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'BayesNet_double_addNoisyORCompound'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::BayesNet< double >::addNoisyORCompound(gum::DiscreteVariable const &,double)\n"
    "    gum::BayesNet< double >::addNoisyORCompound(gum::DiscreteVariable const &,double,gum::NodeId)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BayesNet_double_addNoisyAND__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = (gum::BayesNet< double > *) 0 ;
  gum::DiscreteVariable *arg2 = 0 ;
  double arg3 ;
  gum::NodeId arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  gum::NodeId result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:BayesNet_double_addNoisyAND",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_double_addNoisyAND" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__DiscreteVariable,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNet_double_addNoisyAND" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BayesNet_double_addNoisyAND" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  arg2 = reinterpret_cast< gum::DiscreteVariable * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BayesNet_double_addNoisyAND" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "BayesNet_double_addNoisyAND" "', argument " "4"" of type '" "gum::NodeId""'");
  } 
  arg4 = static_cast< gum::NodeId >(val4);
  {
    try {
      result = (gum::NodeId)(arg1)->addNoisyAND((gum::DiscreteVariable const &)*arg2,arg3,arg4);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_double_addNoisyAND__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = (gum::BayesNet< double > *) 0 ;
  gum::DiscreteVariable *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  gum::NodeId result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BayesNet_double_addNoisyAND",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_double_addNoisyAND" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__DiscreteVariable,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNet_double_addNoisyAND" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BayesNet_double_addNoisyAND" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  arg2 = reinterpret_cast< gum::DiscreteVariable * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BayesNet_double_addNoisyAND" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (gum::NodeId)(arg1)->addNoisyAND((gum::DiscreteVariable const &)*arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_double_addNoisyAND(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__BayesNetT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_gum__DiscreteVariable, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_BayesNet_double_addNoisyAND__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__BayesNetT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_gum__DiscreteVariable, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_BayesNet_double_addNoisyAND__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'BayesNet_double_addNoisyAND'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::BayesNet< double >::addNoisyAND(gum::DiscreteVariable const &,double,gum::NodeId)\n"
    "    gum::BayesNet< double >::addNoisyAND(gum::DiscreteVariable const &,double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BayesNet_double_addLogit__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = (gum::BayesNet< double > *) 0 ;
  gum::DiscreteVariable *arg2 = 0 ;
  double arg3 ;
  gum::NodeId arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  gum::NodeId result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:BayesNet_double_addLogit",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_double_addLogit" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__DiscreteVariable,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNet_double_addLogit" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BayesNet_double_addLogit" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  arg2 = reinterpret_cast< gum::DiscreteVariable * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BayesNet_double_addLogit" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "BayesNet_double_addLogit" "', argument " "4"" of type '" "gum::NodeId""'");
  } 
  arg4 = static_cast< gum::NodeId >(val4);
  {
    try {
      result = (gum::NodeId)(arg1)->addLogit((gum::DiscreteVariable const &)*arg2,arg3,arg4);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_double_addLogit__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = (gum::BayesNet< double > *) 0 ;
  gum::DiscreteVariable *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  gum::NodeId result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BayesNet_double_addLogit",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_double_addLogit" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__DiscreteVariable,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNet_double_addLogit" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BayesNet_double_addLogit" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  arg2 = reinterpret_cast< gum::DiscreteVariable * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BayesNet_double_addLogit" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (gum::NodeId)(arg1)->addLogit((gum::DiscreteVariable const &)*arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_double_addLogit(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__BayesNetT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_gum__DiscreteVariable, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_BayesNet_double_addLogit__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__BayesNetT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_gum__DiscreteVariable, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_BayesNet_double_addLogit__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'BayesNet_double_addLogit'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::BayesNet< double >::addLogit(gum::DiscreteVariable const &,double,gum::NodeId)\n"
    "    gum::BayesNet< double >::addLogit(gum::DiscreteVariable const &,double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BayesNet_double_addOR(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = (gum::BayesNet< double > *) 0 ;
  gum::DiscreteVariable *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::NodeId result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BayesNet_double_addOR",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_double_addOR" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__DiscreteVariable,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNet_double_addOR" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BayesNet_double_addOR" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  arg2 = reinterpret_cast< gum::DiscreteVariable * >(argp2);
  {
    try {
      result = (gum::NodeId)(arg1)->addOR((gum::DiscreteVariable const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_double_addAND(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = (gum::BayesNet< double > *) 0 ;
  gum::DiscreteVariable *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::NodeId result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BayesNet_double_addAND",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_double_addAND" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__DiscreteVariable,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNet_double_addAND" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BayesNet_double_addAND" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  arg2 = reinterpret_cast< gum::DiscreteVariable * >(argp2);
  {
    try {
      result = (gum::NodeId)(arg1)->addAND((gum::DiscreteVariable const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_double_addAMPLITUDE(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = (gum::BayesNet< double > *) 0 ;
  gum::DiscreteVariable *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::NodeId result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BayesNet_double_addAMPLITUDE",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_double_addAMPLITUDE" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__DiscreteVariable,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNet_double_addAMPLITUDE" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BayesNet_double_addAMPLITUDE" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  arg2 = reinterpret_cast< gum::DiscreteVariable * >(argp2);
  {
    try {
      result = (gum::NodeId)(arg1)->addAMPLITUDE((gum::DiscreteVariable const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_double_addCOUNT__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = (gum::BayesNet< double > *) 0 ;
  gum::DiscreteVariable *arg2 = 0 ;
  gum::Idx arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  gum::NodeId result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BayesNet_double_addCOUNT",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_double_addCOUNT" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__DiscreteVariable,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNet_double_addCOUNT" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BayesNet_double_addCOUNT" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  arg2 = reinterpret_cast< gum::DiscreteVariable * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BayesNet_double_addCOUNT" "', argument " "3"" of type '" "gum::Idx""'");
  } 
  arg3 = static_cast< gum::Idx >(val3);
  {
    try {
      result = (gum::NodeId)(arg1)->addCOUNT((gum::DiscreteVariable const &)*arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_double_addCOUNT__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = (gum::BayesNet< double > *) 0 ;
  gum::DiscreteVariable *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::NodeId result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BayesNet_double_addCOUNT",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_double_addCOUNT" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__DiscreteVariable,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNet_double_addCOUNT" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BayesNet_double_addCOUNT" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  arg2 = reinterpret_cast< gum::DiscreteVariable * >(argp2);
  {
    try {
      result = (gum::NodeId)(arg1)->addCOUNT((gum::DiscreteVariable const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_double_addCOUNT(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__BayesNetT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_gum__DiscreteVariable, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_BayesNet_double_addCOUNT__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__BayesNetT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_gum__DiscreteVariable, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_BayesNet_double_addCOUNT__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'BayesNet_double_addCOUNT'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::BayesNet< double >::addCOUNT(gum::DiscreteVariable const &,gum::Idx)\n"
    "    gum::BayesNet< double >::addCOUNT(gum::DiscreteVariable const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BayesNet_double_addEXISTS__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = (gum::BayesNet< double > *) 0 ;
  gum::DiscreteVariable *arg2 = 0 ;
  gum::Idx arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  gum::NodeId result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BayesNet_double_addEXISTS",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_double_addEXISTS" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__DiscreteVariable,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNet_double_addEXISTS" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BayesNet_double_addEXISTS" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  arg2 = reinterpret_cast< gum::DiscreteVariable * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BayesNet_double_addEXISTS" "', argument " "3"" of type '" "gum::Idx""'");
  } 
  arg3 = static_cast< gum::Idx >(val3);
  {
    try {
      result = (gum::NodeId)(arg1)->addEXISTS((gum::DiscreteVariable const &)*arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_double_addEXISTS__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = (gum::BayesNet< double > *) 0 ;
  gum::DiscreteVariable *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::NodeId result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BayesNet_double_addEXISTS",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_double_addEXISTS" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__DiscreteVariable,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNet_double_addEXISTS" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BayesNet_double_addEXISTS" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  arg2 = reinterpret_cast< gum::DiscreteVariable * >(argp2);
  {
    try {
      result = (gum::NodeId)(arg1)->addEXISTS((gum::DiscreteVariable const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_double_addEXISTS(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__BayesNetT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_gum__DiscreteVariable, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_BayesNet_double_addEXISTS__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__BayesNetT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_gum__DiscreteVariable, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_BayesNet_double_addEXISTS__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'BayesNet_double_addEXISTS'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::BayesNet< double >::addEXISTS(gum::DiscreteVariable const &,gum::Idx)\n"
    "    gum::BayesNet< double >::addEXISTS(gum::DiscreteVariable const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BayesNet_double_addFORALL__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = (gum::BayesNet< double > *) 0 ;
  gum::DiscreteVariable *arg2 = 0 ;
  gum::Idx arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  gum::NodeId result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BayesNet_double_addFORALL",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_double_addFORALL" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__DiscreteVariable,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNet_double_addFORALL" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BayesNet_double_addFORALL" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  arg2 = reinterpret_cast< gum::DiscreteVariable * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BayesNet_double_addFORALL" "', argument " "3"" of type '" "gum::Idx""'");
  } 
  arg3 = static_cast< gum::Idx >(val3);
  {
    try {
      result = (gum::NodeId)(arg1)->addFORALL((gum::DiscreteVariable const &)*arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_double_addFORALL__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = (gum::BayesNet< double > *) 0 ;
  gum::DiscreteVariable *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::NodeId result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BayesNet_double_addFORALL",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_double_addFORALL" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__DiscreteVariable,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNet_double_addFORALL" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BayesNet_double_addFORALL" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  arg2 = reinterpret_cast< gum::DiscreteVariable * >(argp2);
  {
    try {
      result = (gum::NodeId)(arg1)->addFORALL((gum::DiscreteVariable const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_double_addFORALL(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__BayesNetT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_gum__DiscreteVariable, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_BayesNet_double_addFORALL__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__BayesNetT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_gum__DiscreteVariable, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_BayesNet_double_addFORALL__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'BayesNet_double_addFORALL'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::BayesNet< double >::addFORALL(gum::DiscreteVariable const &,gum::Idx)\n"
    "    gum::BayesNet< double >::addFORALL(gum::DiscreteVariable const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BayesNet_double_addMAX(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = (gum::BayesNet< double > *) 0 ;
  gum::DiscreteVariable *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::NodeId result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BayesNet_double_addMAX",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_double_addMAX" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__DiscreteVariable,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNet_double_addMAX" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BayesNet_double_addMAX" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  arg2 = reinterpret_cast< gum::DiscreteVariable * >(argp2);
  {
    try {
      result = (gum::NodeId)(arg1)->addMAX((gum::DiscreteVariable const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_double_addMEDIAN(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = (gum::BayesNet< double > *) 0 ;
  gum::DiscreteVariable *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::NodeId result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BayesNet_double_addMEDIAN",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_double_addMEDIAN" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__DiscreteVariable,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNet_double_addMEDIAN" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BayesNet_double_addMEDIAN" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  arg2 = reinterpret_cast< gum::DiscreteVariable * >(argp2);
  {
    try {
      result = (gum::NodeId)(arg1)->addMEDIAN((gum::DiscreteVariable const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_double_addMIN(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = (gum::BayesNet< double > *) 0 ;
  gum::DiscreteVariable *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::NodeId result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BayesNet_double_addMIN",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_double_addMIN" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__DiscreteVariable,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNet_double_addMIN" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BayesNet_double_addMIN" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  arg2 = reinterpret_cast< gum::DiscreteVariable * >(argp2);
  {
    try {
      result = (gum::NodeId)(arg1)->addMIN((gum::DiscreteVariable const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_double_addWeightedArc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = (gum::BayesNet< double > *) 0 ;
  gum::NodeId arg2 ;
  gum::NodeId arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:BayesNet_double_addWeightedArc",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_double_addWeightedArc" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BayesNet_double_addWeightedArc" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BayesNet_double_addWeightedArc" "', argument " "3"" of type '" "gum::NodeId""'");
  } 
  arg3 = static_cast< gum::NodeId >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "BayesNet_double_addWeightedArc" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      (arg1)->addWeightedArc(arg2,arg3,arg4);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_double_generateCPTs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = (gum::BayesNet< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BayesNet_double_generateCPTs",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_double_generateCPTs" "', argument " "1"" of type '" "gum::BayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  {
    try {
      ((gum::BayesNet< double > const *)arg1)->generateCPTs();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_double_generateCPT__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = (gum::BayesNet< double > *) 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BayesNet_double_generateCPT",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_double_generateCPT" "', argument " "1"" of type '" "gum::BayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BayesNet_double_generateCPT" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      ((gum::BayesNet< double > const *)arg1)->generateCPT(arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_double_generateCPT__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = (gum::BayesNet< double > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BayesNet_double_generateCPT",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_double_generateCPT" "', argument " "1"" of type '" "gum::BayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNet_double_generateCPT" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BayesNet_double_generateCPT" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      ((gum::BayesNet< double > const *)arg1)->generateCPT((std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_double_generateCPT(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__BayesNetT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_BayesNet_double_generateCPT__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__BayesNetT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_BayesNet_double_generateCPT__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'BayesNet_double_generateCPT'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::BayesNet< double >::generateCPT(gum::NodeId) const\n"
    "    gum::BayesNet< double >::generateCPT(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BayesNet_double_changePotential__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = (gum::BayesNet< double > *) 0 ;
  gum::NodeId arg2 ;
  gum::Potential< double > *arg3 = (gum::Potential< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BayesNet_double_changePotential",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_double_changePotential" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BayesNet_double_changePotential" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_gum__PotentialT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BayesNet_double_changePotential" "', argument " "3"" of type '" "gum::Potential< double > *""'"); 
  }
  arg3 = reinterpret_cast< gum::Potential< double > * >(argp3);
  {
    try {
      (arg1)->changePotential(arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_double_changePotential__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = (gum::BayesNet< double > *) 0 ;
  std::string *arg2 = 0 ;
  gum::Potential< double > *arg3 = (gum::Potential< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BayesNet_double_changePotential",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_double_changePotential" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNet_double_changePotential" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BayesNet_double_changePotential" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_gum__PotentialT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BayesNet_double_changePotential" "', argument " "3"" of type '" "gum::Potential< double > *""'"); 
  }
  arg3 = reinterpret_cast< gum::Potential< double > * >(argp3);
  {
    try {
      (arg1)->changePotential((std::string const &)*arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_double_changePotential(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__BayesNetT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_gum__PotentialT_double_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_BayesNet_double_changePotential__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__BayesNetT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_gum__PotentialT_double_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_BayesNet_double_changePotential__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'BayesNet_double_changePotential'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::BayesNet< double >::changePotential(gum::NodeId,gum::Potential< double > *)\n"
    "    gum::BayesNet< double >::changePotential(std::string const &,gum::Potential< double > *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BayesNet_double_dag(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = (gum::BayesNet< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::DAG *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BayesNet_double_dag",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_double_dag" "', argument " "1"" of type '" "gum::BayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  {
    try {
      result = (gum::DAG *) &((gum::BayesNet< double > const *)arg1)->dag();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__DAG, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_double_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = (gum::BayesNet< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::Size result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BayesNet_double_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_double_size" "', argument " "1"" of type '" "gum::BayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  {
    try {
      result = (gum::Size)((gum::BayesNet< double > const *)arg1)->size();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_double_log10DomainSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = (gum::BayesNet< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BayesNet_double_log10DomainSize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_double_log10DomainSize" "', argument " "1"" of type '" "gum::BayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  {
    try {
      result = (double)((gum::BayesNet< double > const *)arg1)->log10DomainSize();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_double_names(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = (gum::BayesNet< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BayesNet_double_names",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_double_names" "', argument " "1"" of type '" "gum::BayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  {
    try {
      result = (PyObject *)gum_BayesNet_Sl_double_Sg__names((gum::BayesNet< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_double_ids(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = (gum::BayesNet< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BayesNet_double_ids",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_double_ids" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  {
    try {
      result = (PyObject *)gum_BayesNet_Sl_double_Sg__ids(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_double_arcs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = (gum::BayesNet< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BayesNet_double_arcs",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_double_arcs" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  {
    try {
      result = (PyObject *)gum_BayesNet_Sl_double_Sg__arcs(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_double_parents(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = (gum::BayesNet< double > *) 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BayesNet_double_parents",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_double_parents" "', argument " "1"" of type '" "gum::BayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BayesNet_double_parents" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (PyObject *)gum_BayesNet_Sl_double_Sg__parents((gum::BayesNet< double > const *)arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_double_children(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = (gum::BayesNet< double > *) 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BayesNet_double_children",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_double_children" "', argument " "1"" of type '" "gum::BayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BayesNet_double_children" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (PyObject *)gum_BayesNet_Sl_double_Sg__children((gum::BayesNet< double > const *)arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_double_loadBIF__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = (gum::BayesNet< double > *) 0 ;
  std::string arg2 ;
  PyObject *arg3 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BayesNet_double_loadBIF",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_double_loadBIF" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "BayesNet_double_loadBIF" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  arg3 = obj2;
  {
    try {
      result = gum_BayesNet_Sl_double_Sg__loadBIF__SWIG_0(arg1,arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_double_loadBIF__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = (gum::BayesNet< double > *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BayesNet_double_loadBIF",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_double_loadBIF" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "BayesNet_double_loadBIF" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = gum_BayesNet_Sl_double_Sg__loadBIF__SWIG_0(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_double_loadBIF(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__BayesNetT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_BayesNet_double_loadBIF__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__BayesNetT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        _v = (argv[2] != 0);
        if (_v) {
          return _wrap_BayesNet_double_loadBIF__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'BayesNet_double_loadBIF'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::BayesNet< double >::loadBIF(std::string,PyObject *)\n"
    "    gum::BayesNet< double >::loadBIF(std::string)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BayesNet_double_saveBIF(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = (gum::BayesNet< double > *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BayesNet_double_saveBIF",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_double_saveBIF" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "BayesNet_double_saveBIF" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      gum_BayesNet_Sl_double_Sg__saveBIF(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_double_loadDSL__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = (gum::BayesNet< double > *) 0 ;
  std::string arg2 ;
  PyObject *arg3 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BayesNet_double_loadDSL",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_double_loadDSL" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "BayesNet_double_loadDSL" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  arg3 = obj2;
  {
    try {
      result = gum_BayesNet_Sl_double_Sg__loadDSL__SWIG_0(arg1,arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_double_loadDSL__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = (gum::BayesNet< double > *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BayesNet_double_loadDSL",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_double_loadDSL" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "BayesNet_double_loadDSL" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = gum_BayesNet_Sl_double_Sg__loadDSL__SWIG_0(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_double_loadDSL(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__BayesNetT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_BayesNet_double_loadDSL__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__BayesNetT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        _v = (argv[2] != 0);
        if (_v) {
          return _wrap_BayesNet_double_loadDSL__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'BayesNet_double_loadDSL'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::BayesNet< double >::loadDSL(std::string,PyObject *)\n"
    "    gum::BayesNet< double >::loadDSL(std::string)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BayesNet_double_saveDSL(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = (gum::BayesNet< double > *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BayesNet_double_saveDSL",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_double_saveDSL" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "BayesNet_double_saveDSL" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      gum_BayesNet_Sl_double_Sg__saveDSL(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_double_loadNET__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = (gum::BayesNet< double > *) 0 ;
  std::string arg2 ;
  PyObject *arg3 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BayesNet_double_loadNET",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_double_loadNET" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "BayesNet_double_loadNET" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  arg3 = obj2;
  {
    try {
      result = gum_BayesNet_Sl_double_Sg__loadNET__SWIG_0(arg1,arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_double_loadNET__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = (gum::BayesNet< double > *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BayesNet_double_loadNET",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_double_loadNET" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "BayesNet_double_loadNET" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = gum_BayesNet_Sl_double_Sg__loadNET__SWIG_0(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_double_loadNET(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__BayesNetT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_BayesNet_double_loadNET__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__BayesNetT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        _v = (argv[2] != 0);
        if (_v) {
          return _wrap_BayesNet_double_loadNET__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'BayesNet_double_loadNET'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::BayesNet< double >::loadNET(std::string,PyObject *)\n"
    "    gum::BayesNet< double >::loadNET(std::string)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BayesNet_double_saveNET(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = (gum::BayesNet< double > *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BayesNet_double_saveNET",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_double_saveNET" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "BayesNet_double_saveNET" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      gum_BayesNet_Sl_double_Sg__saveNET(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_double_loadPRM__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = (gum::BayesNet< double > *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  PyObject *arg5 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:BayesNet_double_loadPRM",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_double_loadPRM" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "BayesNet_double_loadPRM" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "BayesNet_double_loadPRM" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "BayesNet_double_loadPRM" "', argument " "4"" of type '" "std::string""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  arg5 = obj4;
  {
    try {
      result = gum_BayesNet_Sl_double_Sg__loadPRM__SWIG_0(arg1,arg2,arg3,arg4,arg5);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_double_loadPRM__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = (gum::BayesNet< double > *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:BayesNet_double_loadPRM",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_double_loadPRM" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "BayesNet_double_loadPRM" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "BayesNet_double_loadPRM" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "BayesNet_double_loadPRM" "', argument " "4"" of type '" "std::string""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = gum_BayesNet_Sl_double_Sg__loadPRM__SWIG_0(arg1,arg2,arg3,arg4);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_double_loadPRM__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = (gum::BayesNet< double > *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BayesNet_double_loadPRM",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_double_loadPRM" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "BayesNet_double_loadPRM" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "BayesNet_double_loadPRM" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = gum_BayesNet_Sl_double_Sg__loadPRM__SWIG_0(arg1,arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_double_loadPRM__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = (gum::BayesNet< double > *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BayesNet_double_loadPRM",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_double_loadPRM" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "BayesNet_double_loadPRM" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = gum_BayesNet_Sl_double_Sg__loadPRM__SWIG_0(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_double_loadPRM(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__BayesNetT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_BayesNet_double_loadPRM__SWIG_3(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__BayesNetT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_BayesNet_double_loadPRM__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__BayesNetT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_BayesNet_double_loadPRM__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__BayesNetT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            _v = (argv[4] != 0);
            if (_v) {
              return _wrap_BayesNet_double_loadPRM__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'BayesNet_double_loadPRM'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::BayesNet< double >::loadPRM(std::string,std::string,std::string,PyObject *)\n"
    "    gum::BayesNet< double >::loadPRM(std::string,std::string,std::string)\n"
    "    gum::BayesNet< double >::loadPRM(std::string,std::string)\n"
    "    gum::BayesNet< double >::loadPRM(std::string)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BayesNet_double_loadBIFXML__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = (gum::BayesNet< double > *) 0 ;
  std::string arg2 ;
  PyObject *arg3 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BayesNet_double_loadBIFXML",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_double_loadBIFXML" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "BayesNet_double_loadBIFXML" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  arg3 = obj2;
  {
    try {
      result = gum_BayesNet_Sl_double_Sg__loadBIFXML__SWIG_0(arg1,arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_double_loadBIFXML__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = (gum::BayesNet< double > *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BayesNet_double_loadBIFXML",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_double_loadBIFXML" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "BayesNet_double_loadBIFXML" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = gum_BayesNet_Sl_double_Sg__loadBIFXML__SWIG_0(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_double_loadBIFXML(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__BayesNetT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_BayesNet_double_loadBIFXML__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__BayesNetT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        _v = (argv[2] != 0);
        if (_v) {
          return _wrap_BayesNet_double_loadBIFXML__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'BayesNet_double_loadBIFXML'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::BayesNet< double >::loadBIFXML(std::string,PyObject *)\n"
    "    gum::BayesNet< double >::loadBIFXML(std::string)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BayesNet_double_saveBIFXML(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = (gum::BayesNet< double > *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BayesNet_double_saveBIFXML",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_double_saveBIFXML" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "BayesNet_double_saveBIFXML" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      gum_BayesNet_Sl_double_Sg__saveBIFXML(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_double_loadUAI__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = (gum::BayesNet< double > *) 0 ;
  std::string arg2 ;
  PyObject *arg3 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BayesNet_double_loadUAI",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_double_loadUAI" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "BayesNet_double_loadUAI" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  arg3 = obj2;
  {
    try {
      result = gum_BayesNet_Sl_double_Sg__loadUAI__SWIG_0(arg1,arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_double_loadUAI__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = (gum::BayesNet< double > *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BayesNet_double_loadUAI",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_double_loadUAI" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "BayesNet_double_loadUAI" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = gum_BayesNet_Sl_double_Sg__loadUAI__SWIG_0(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNet_double_loadUAI(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__BayesNetT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_BayesNet_double_loadUAI__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__BayesNetT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        _v = (argv[2] != 0);
        if (_v) {
          return _wrap_BayesNet_double_loadUAI__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'BayesNet_double_loadUAI'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::BayesNet< double >::loadUAI(std::string,PyObject *)\n"
    "    gum::BayesNet< double >::loadUAI(std::string)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BayesNet_double_saveUAI(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = (gum::BayesNet< double > *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BayesNet_double_saveUAI",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNet_double_saveUAI" "', argument " "1"" of type '" "gum::BayesNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "BayesNet_double_saveUAI" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      gum_BayesNet_Sl_double_Sg__saveUAI(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *BayesNet_double_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gum__BayesNetT_double_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_BayesNetInference_double(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNetInference< double > *arg1 = (gum::BayesNetInference< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_BayesNetInference_double",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetInferenceT_double_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_BayesNetInference_double" "', argument " "1"" of type '" "gum::BayesNetInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNetInference< double > * >(argp1);
  {
    try {
      delete arg1;
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNetInference_double_setBayesNet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNetInference< double > *arg1 = (gum::BayesNetInference< double > *) 0 ;
  gum::IBayesNet< double > *arg2 = (gum::IBayesNet< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BayesNetInference_double_setBayesNet",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNetInference_double_setBayesNet" "', argument " "1"" of type '" "gum::BayesNetInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNetInference< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_gum__IBayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNetInference_double_setBayesNet" "', argument " "2"" of type '" "gum::IBayesNet< double > const *""'"); 
  }
  arg2 = reinterpret_cast< gum::IBayesNet< double > * >(argp2);
  {
    try {
      (arg1)->setBayesNet((gum::IBayesNet< double > const *)arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNetInference_double_BayesNet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNetInference< double > *arg1 = (gum::BayesNetInference< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::IBayesNet< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BayesNetInference_double_BayesNet",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNetInference_double_BayesNet" "', argument " "1"" of type '" "gum::BayesNetInference< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNetInference< double > * >(argp1);
  {
    try {
      result = (gum::IBayesNet< double > *) &((gum::BayesNetInference< double > const *)arg1)->BayesNet();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__IBayesNetT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNetInference_double_domainSizes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNetInference< double > *arg1 = (gum::BayesNetInference< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::NodeProperty< gum::Size > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BayesNetInference_double_domainSizes",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNetInference_double_domainSizes" "', argument " "1"" of type '" "gum::BayesNetInference< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNetInference< double > * >(argp1);
  {
    try {
      result = (gum::NodeProperty< gum::Size > *) &((gum::BayesNetInference< double > const *)arg1)->domainSizes();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NodePropertyT_unsigned_long_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNetInference_double_isReady4Inference(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNetInference< double > *arg1 = (gum::BayesNetInference< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BayesNetInference_double_isReady4Inference",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNetInference_double_isReady4Inference" "', argument " "1"" of type '" "gum::BayesNetInference< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNetInference< double > * >(argp1);
  {
    try {
      result = (bool)((gum::BayesNetInference< double > const *)arg1)->isReady4Inference();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNetInference_double_isDone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNetInference< double > *arg1 = (gum::BayesNetInference< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BayesNetInference_double_isDone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNetInference_double_isDone" "', argument " "1"" of type '" "gum::BayesNetInference< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNetInference< double > * >(argp1);
  {
    try {
      result = (bool)((gum::BayesNetInference< double > const *)arg1)->isDone();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNetInference_double_prepareInference(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNetInference< double > *arg1 = (gum::BayesNetInference< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BayesNetInference_double_prepareInference",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNetInference_double_prepareInference" "', argument " "1"" of type '" "gum::BayesNetInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNetInference< double > * >(argp1);
  {
    try {
      (arg1)->prepareInference();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNetInference_double_makeInference(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNetInference< double > *arg1 = (gum::BayesNetInference< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BayesNetInference_double_makeInference",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNetInference_double_makeInference" "', argument " "1"" of type '" "gum::BayesNetInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNetInference< double > * >(argp1);
  {
    try {
      (arg1)->makeInference();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNetInference_double_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNetInference< double > *arg1 = (gum::BayesNetInference< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BayesNetInference_double_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNetInference_double_clear" "', argument " "1"" of type '" "gum::BayesNetInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNetInference< double > * >(argp1);
  {
    try {
      (arg1)->clear();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNetInference_double_state(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNetInference< double > *arg1 = (gum::BayesNetInference< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::BayesNetInference< double >::StateOfInference result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BayesNetInference_double_state",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNetInference_double_state" "', argument " "1"" of type '" "gum::BayesNetInference< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNetInference< double > * >(argp1);
  {
    try {
      result = (gum::BayesNetInference< double >::StateOfInference)((gum::BayesNetInference< double > const *)arg1)->state();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNetInference_double_addEvidence__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNetInference< double > *arg1 = (gum::BayesNetInference< double > *) 0 ;
  gum::NodeId arg2 ;
  gum::Idx arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BayesNetInference_double_addEvidence",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNetInference_double_addEvidence" "', argument " "1"" of type '" "gum::BayesNetInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNetInference< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BayesNetInference_double_addEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BayesNetInference_double_addEvidence" "', argument " "3"" of type '" "gum::Idx""'");
  } 
  arg3 = static_cast< gum::Idx >(val3);
  {
    try {
      (arg1)->addEvidence(arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNetInference_double_addEvidence__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNetInference< double > *arg1 = (gum::BayesNetInference< double > *) 0 ;
  std::string *arg2 = 0 ;
  gum::Idx arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BayesNetInference_double_addEvidence",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNetInference_double_addEvidence" "', argument " "1"" of type '" "gum::BayesNetInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNetInference< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNetInference_double_addEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BayesNetInference_double_addEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BayesNetInference_double_addEvidence" "', argument " "3"" of type '" "gum::Idx""'");
  } 
  arg3 = static_cast< gum::Idx >(val3);
  {
    try {
      (arg1)->addEvidence((std::string const &)*arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNetInference_double_addEvidence__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNetInference< double > *arg1 = (gum::BayesNetInference< double > *) 0 ;
  gum::NodeId arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BayesNetInference_double_addEvidence",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNetInference_double_addEvidence" "', argument " "1"" of type '" "gum::BayesNetInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNetInference< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BayesNetInference_double_addEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BayesNetInference_double_addEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BayesNetInference_double_addEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->addEvidence(arg2,(std::string const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNetInference_double_addEvidence__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNetInference< double > *arg1 = (gum::BayesNetInference< double > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BayesNetInference_double_addEvidence",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNetInference_double_addEvidence" "', argument " "1"" of type '" "gum::BayesNetInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNetInference< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNetInference_double_addEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BayesNetInference_double_addEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BayesNetInference_double_addEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BayesNetInference_double_addEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->addEvidence((std::string const &)*arg2,(std::string const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNetInference_double_addEvidence__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNetInference< double > *arg1 = (gum::BayesNetInference< double > *) 0 ;
  gum::NodeId arg2 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BayesNetInference_double_addEvidence",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNetInference_double_addEvidence" "', argument " "1"" of type '" "gum::BayesNetInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNetInference< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BayesNetInference_double_addEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BayesNetInference_double_addEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BayesNetInference_double_addEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->addEvidence(arg2,(std::vector< double,std::allocator< double > > const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNetInference_double_addEvidence__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNetInference< double > *arg1 = (gum::BayesNetInference< double > *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BayesNetInference_double_addEvidence",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNetInference_double_addEvidence" "', argument " "1"" of type '" "gum::BayesNetInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNetInference< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNetInference_double_addEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BayesNetInference_double_addEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BayesNetInference_double_addEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BayesNetInference_double_addEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->addEvidence((std::string const &)*arg2,(std::vector< double,std::allocator< double > > const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNetInference_double_addEvidence__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNetInference< double > *arg1 = (gum::BayesNetInference< double > *) 0 ;
  gum::Potential< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BayesNetInference_double_addEvidence",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNetInference_double_addEvidence" "', argument " "1"" of type '" "gum::BayesNetInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNetInference< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__PotentialT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNetInference_double_addEvidence" "', argument " "2"" of type '" "gum::Potential< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BayesNetInference_double_addEvidence" "', argument " "2"" of type '" "gum::Potential< double > const &""'"); 
  }
  arg2 = reinterpret_cast< gum::Potential< double > * >(argp2);
  {
    try {
      (arg1)->addEvidence((gum::Potential< double > const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNetInference_double_addEvidence__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNetInference< double > *arg1 = (gum::BayesNetInference< double > *) 0 ;
  gum::Potential< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BayesNetInference_double_addEvidence",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNetInference_double_addEvidence" "', argument " "1"" of type '" "gum::BayesNetInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNetInference< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__PotentialT_double_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNetInference_double_addEvidence" "', argument " "2"" of type '" "gum::Potential< double > &&""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BayesNetInference_double_addEvidence" "', argument " "2"" of type '" "gum::Potential< double > &&""'"); 
  }
  arg2 = reinterpret_cast< gum::Potential< double > * >(argp2);
  {
    try {
      (arg1)->addEvidence((gum::Potential< double > &&)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNetInference_double_addEvidence(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__BayesNetInferenceT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_gum__PotentialT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_BayesNetInference_double_addEvidence__SWIG_6(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__BayesNetInferenceT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_gum__PotentialT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_BayesNetInference_double_addEvidence__SWIG_7(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__BayesNetInferenceT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_BayesNetInference_double_addEvidence__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__BayesNetInferenceT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_BayesNetInference_double_addEvidence__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__BayesNetInferenceT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< double,std::allocator< double > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_BayesNetInference_double_addEvidence__SWIG_4(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__BayesNetInferenceT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_BayesNetInference_double_addEvidence__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__BayesNetInferenceT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_BayesNetInference_double_addEvidence__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__BayesNetInferenceT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< double,std::allocator< double > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_BayesNetInference_double_addEvidence__SWIG_5(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'BayesNetInference_double_addEvidence'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::BayesNetInference< double >::addEvidence(gum::NodeId const,gum::Idx const)\n"
    "    gum::BayesNetInference< double >::addEvidence(std::string const &,gum::Idx const)\n"
    "    gum::BayesNetInference< double >::addEvidence(gum::NodeId const,std::string const &)\n"
    "    gum::BayesNetInference< double >::addEvidence(std::string const &,std::string const &)\n"
    "    gum::BayesNetInference< double >::addEvidence(gum::NodeId const,std::vector< double,std::allocator< double > > const &)\n"
    "    gum::BayesNetInference< double >::addEvidence(std::string const &,std::vector< double,std::allocator< double > > const &)\n"
    "    gum::BayesNetInference< double >::addEvidence(gum::Potential< double > const &)\n"
    "    gum::BayesNetInference< double >::addEvidence(gum::Potential< double > &&)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BayesNetInference_double_addSetOfEvidence(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNetInference< double > *arg1 = (gum::BayesNetInference< double > *) 0 ;
  gum::Set< gum::Potential< double > const * > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BayesNetInference_double_addSetOfEvidence",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNetInference_double_addSetOfEvidence" "', argument " "1"" of type '" "gum::BayesNetInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNetInference< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_SetT_gum__PotentialT_double_t_const_p_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNetInference_double_addSetOfEvidence" "', argument " "2"" of type '" "gum::Set< gum::Potential< double > const * > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BayesNetInference_double_addSetOfEvidence" "', argument " "2"" of type '" "gum::Set< gum::Potential< double > const * > const &""'"); 
  }
  arg2 = reinterpret_cast< gum::Set< gum::Potential< double > const * > * >(argp2);
  {
    try {
      (arg1)->addSetOfEvidence((gum::Set< gum::Potential< double > const * > const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNetInference_double_addListOfEvidence(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNetInference< double > *arg1 = (gum::BayesNetInference< double > *) 0 ;
  gum::List< gum::Potential< double > const * > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BayesNetInference_double_addListOfEvidence",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNetInference_double_addListOfEvidence" "', argument " "1"" of type '" "gum::BayesNetInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNetInference< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__ListT_gum__PotentialT_double_t_const_p_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNetInference_double_addListOfEvidence" "', argument " "2"" of type '" "gum::List< gum::Potential< double > const * > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BayesNetInference_double_addListOfEvidence" "', argument " "2"" of type '" "gum::List< gum::Potential< double > const * > const &""'"); 
  }
  arg2 = reinterpret_cast< gum::List< gum::Potential< double > const * > * >(argp2);
  {
    try {
      (arg1)->addListOfEvidence((gum::List< gum::Potential< double > const * > const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNetInference_double_chgEvidence__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNetInference< double > *arg1 = (gum::BayesNetInference< double > *) 0 ;
  gum::NodeId arg2 ;
  gum::Idx arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BayesNetInference_double_chgEvidence",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNetInference_double_chgEvidence" "', argument " "1"" of type '" "gum::BayesNetInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNetInference< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BayesNetInference_double_chgEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BayesNetInference_double_chgEvidence" "', argument " "3"" of type '" "gum::Idx""'");
  } 
  arg3 = static_cast< gum::Idx >(val3);
  {
    try {
      (arg1)->chgEvidence(arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNetInference_double_chgEvidence__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNetInference< double > *arg1 = (gum::BayesNetInference< double > *) 0 ;
  std::string *arg2 = 0 ;
  gum::Idx arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BayesNetInference_double_chgEvidence",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNetInference_double_chgEvidence" "', argument " "1"" of type '" "gum::BayesNetInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNetInference< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNetInference_double_chgEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BayesNetInference_double_chgEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BayesNetInference_double_chgEvidence" "', argument " "3"" of type '" "gum::Idx""'");
  } 
  arg3 = static_cast< gum::Idx >(val3);
  {
    try {
      (arg1)->chgEvidence((std::string const &)*arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNetInference_double_chgEvidence__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNetInference< double > *arg1 = (gum::BayesNetInference< double > *) 0 ;
  gum::NodeId arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BayesNetInference_double_chgEvidence",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNetInference_double_chgEvidence" "', argument " "1"" of type '" "gum::BayesNetInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNetInference< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BayesNetInference_double_chgEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BayesNetInference_double_chgEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BayesNetInference_double_chgEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->chgEvidence(arg2,(std::string const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNetInference_double_chgEvidence__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNetInference< double > *arg1 = (gum::BayesNetInference< double > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BayesNetInference_double_chgEvidence",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNetInference_double_chgEvidence" "', argument " "1"" of type '" "gum::BayesNetInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNetInference< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNetInference_double_chgEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BayesNetInference_double_chgEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BayesNetInference_double_chgEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BayesNetInference_double_chgEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->chgEvidence((std::string const &)*arg2,(std::string const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNetInference_double_chgEvidence__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNetInference< double > *arg1 = (gum::BayesNetInference< double > *) 0 ;
  gum::NodeId arg2 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BayesNetInference_double_chgEvidence",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNetInference_double_chgEvidence" "', argument " "1"" of type '" "gum::BayesNetInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNetInference< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BayesNetInference_double_chgEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BayesNetInference_double_chgEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BayesNetInference_double_chgEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->chgEvidence(arg2,(std::vector< double,std::allocator< double > > const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNetInference_double_chgEvidence__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNetInference< double > *arg1 = (gum::BayesNetInference< double > *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BayesNetInference_double_chgEvidence",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNetInference_double_chgEvidence" "', argument " "1"" of type '" "gum::BayesNetInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNetInference< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNetInference_double_chgEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BayesNetInference_double_chgEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BayesNetInference_double_chgEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BayesNetInference_double_chgEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->chgEvidence((std::string const &)*arg2,(std::vector< double,std::allocator< double > > const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNetInference_double_chgEvidence__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNetInference< double > *arg1 = (gum::BayesNetInference< double > *) 0 ;
  gum::Potential< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BayesNetInference_double_chgEvidence",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNetInference_double_chgEvidence" "', argument " "1"" of type '" "gum::BayesNetInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNetInference< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__PotentialT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNetInference_double_chgEvidence" "', argument " "2"" of type '" "gum::Potential< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BayesNetInference_double_chgEvidence" "', argument " "2"" of type '" "gum::Potential< double > const &""'"); 
  }
  arg2 = reinterpret_cast< gum::Potential< double > * >(argp2);
  {
    try {
      (arg1)->chgEvidence((gum::Potential< double > const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNetInference_double_chgEvidence(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__BayesNetInferenceT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_gum__PotentialT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_BayesNetInference_double_chgEvidence__SWIG_6(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__BayesNetInferenceT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_BayesNetInference_double_chgEvidence__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__BayesNetInferenceT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_BayesNetInference_double_chgEvidence__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__BayesNetInferenceT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< double,std::allocator< double > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_BayesNetInference_double_chgEvidence__SWIG_4(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__BayesNetInferenceT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_BayesNetInference_double_chgEvidence__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__BayesNetInferenceT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_BayesNetInference_double_chgEvidence__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__BayesNetInferenceT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< double,std::allocator< double > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_BayesNetInference_double_chgEvidence__SWIG_5(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'BayesNetInference_double_chgEvidence'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::BayesNetInference< double >::chgEvidence(gum::NodeId const,gum::Idx const)\n"
    "    gum::BayesNetInference< double >::chgEvidence(std::string const &,gum::Idx const)\n"
    "    gum::BayesNetInference< double >::chgEvidence(gum::NodeId const,std::string const &)\n"
    "    gum::BayesNetInference< double >::chgEvidence(std::string const &,std::string const &)\n"
    "    gum::BayesNetInference< double >::chgEvidence(gum::NodeId const,std::vector< double,std::allocator< double > > const &)\n"
    "    gum::BayesNetInference< double >::chgEvidence(std::string const &,std::vector< double,std::allocator< double > > const &)\n"
    "    gum::BayesNetInference< double >::chgEvidence(gum::Potential< double > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BayesNetInference_double_eraseAllEvidence(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNetInference< double > *arg1 = (gum::BayesNetInference< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BayesNetInference_double_eraseAllEvidence",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNetInference_double_eraseAllEvidence" "', argument " "1"" of type '" "gum::BayesNetInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNetInference< double > * >(argp1);
  {
    try {
      (arg1)->eraseAllEvidence();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNetInference_double_eraseEvidence__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNetInference< double > *arg1 = (gum::BayesNetInference< double > *) 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BayesNetInference_double_eraseEvidence",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNetInference_double_eraseEvidence" "', argument " "1"" of type '" "gum::BayesNetInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNetInference< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BayesNetInference_double_eraseEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      (arg1)->eraseEvidence(arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNetInference_double_eraseEvidence__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNetInference< double > *arg1 = (gum::BayesNetInference< double > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BayesNetInference_double_eraseEvidence",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNetInference_double_eraseEvidence" "', argument " "1"" of type '" "gum::BayesNetInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNetInference< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNetInference_double_eraseEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BayesNetInference_double_eraseEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->eraseEvidence((std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNetInference_double_eraseEvidence(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__BayesNetInferenceT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_BayesNetInference_double_eraseEvidence__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__BayesNetInferenceT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_BayesNetInference_double_eraseEvidence__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'BayesNetInference_double_eraseEvidence'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::BayesNetInference< double >::eraseEvidence(gum::NodeId const)\n"
    "    gum::BayesNetInference< double >::eraseEvidence(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BayesNetInference_double_hasEvidence__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNetInference< double > *arg1 = (gum::BayesNetInference< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BayesNetInference_double_hasEvidence",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNetInference_double_hasEvidence" "', argument " "1"" of type '" "gum::BayesNetInference< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNetInference< double > * >(argp1);
  {
    try {
      result = (bool)((gum::BayesNetInference< double > const *)arg1)->hasEvidence();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNetInference_double_hasEvidence__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNetInference< double > *arg1 = (gum::BayesNetInference< double > *) 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BayesNetInference_double_hasEvidence",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNetInference_double_hasEvidence" "', argument " "1"" of type '" "gum::BayesNetInference< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNetInference< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BayesNetInference_double_hasEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (bool)((gum::BayesNetInference< double > const *)arg1)->hasEvidence(arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNetInference_double_hasHardEvidence__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNetInference< double > *arg1 = (gum::BayesNetInference< double > *) 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BayesNetInference_double_hasHardEvidence",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNetInference_double_hasHardEvidence" "', argument " "1"" of type '" "gum::BayesNetInference< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNetInference< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BayesNetInference_double_hasHardEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (bool)((gum::BayesNetInference< double > const *)arg1)->hasHardEvidence(arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNetInference_double_hasSoftEvidence__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNetInference< double > *arg1 = (gum::BayesNetInference< double > *) 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BayesNetInference_double_hasSoftEvidence",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNetInference_double_hasSoftEvidence" "', argument " "1"" of type '" "gum::BayesNetInference< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNetInference< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BayesNetInference_double_hasSoftEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (bool)((gum::BayesNetInference< double > const *)arg1)->hasSoftEvidence(arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNetInference_double_hasEvidence__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNetInference< double > *arg1 = (gum::BayesNetInference< double > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BayesNetInference_double_hasEvidence",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNetInference_double_hasEvidence" "', argument " "1"" of type '" "gum::BayesNetInference< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNetInference< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNetInference_double_hasEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BayesNetInference_double_hasEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)((gum::BayesNetInference< double > const *)arg1)->hasEvidence((std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNetInference_double_hasEvidence(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__BayesNetInferenceT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_BayesNetInference_double_hasEvidence__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__BayesNetInferenceT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_BayesNetInference_double_hasEvidence__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__BayesNetInferenceT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_BayesNetInference_double_hasEvidence__SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'BayesNetInference_double_hasEvidence'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::BayesNetInference< double >::hasEvidence() const\n"
    "    gum::BayesNetInference< double >::hasEvidence(gum::NodeId const) const\n"
    "    gum::BayesNetInference< double >::hasEvidence(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BayesNetInference_double_hasHardEvidence__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNetInference< double > *arg1 = (gum::BayesNetInference< double > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BayesNetInference_double_hasHardEvidence",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNetInference_double_hasHardEvidence" "', argument " "1"" of type '" "gum::BayesNetInference< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNetInference< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNetInference_double_hasHardEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BayesNetInference_double_hasHardEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)((gum::BayesNetInference< double > const *)arg1)->hasHardEvidence((std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNetInference_double_hasHardEvidence(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__BayesNetInferenceT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_BayesNetInference_double_hasHardEvidence__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__BayesNetInferenceT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_BayesNetInference_double_hasHardEvidence__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'BayesNetInference_double_hasHardEvidence'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::BayesNetInference< double >::hasHardEvidence(gum::NodeId const) const\n"
    "    gum::BayesNetInference< double >::hasHardEvidence(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BayesNetInference_double_hasSoftEvidence__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNetInference< double > *arg1 = (gum::BayesNetInference< double > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BayesNetInference_double_hasSoftEvidence",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNetInference_double_hasSoftEvidence" "', argument " "1"" of type '" "gum::BayesNetInference< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNetInference< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BayesNetInference_double_hasSoftEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BayesNetInference_double_hasSoftEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)((gum::BayesNetInference< double > const *)arg1)->hasSoftEvidence((std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNetInference_double_hasSoftEvidence(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__BayesNetInferenceT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_BayesNetInference_double_hasSoftEvidence__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__BayesNetInferenceT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_BayesNetInference_double_hasSoftEvidence__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'BayesNetInference_double_hasSoftEvidence'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::BayesNetInference< double >::hasSoftEvidence(gum::NodeId const) const\n"
    "    gum::BayesNetInference< double >::hasSoftEvidence(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BayesNetInference_double_nbrEvidence(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNetInference< double > *arg1 = (gum::BayesNetInference< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::Size result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BayesNetInference_double_nbrEvidence",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNetInference_double_nbrEvidence" "', argument " "1"" of type '" "gum::BayesNetInference< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNetInference< double > * >(argp1);
  {
    try {
      result = (gum::Size)((gum::BayesNetInference< double > const *)arg1)->nbrEvidence();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNetInference_double_nbrHardEvidence(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNetInference< double > *arg1 = (gum::BayesNetInference< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::Size result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BayesNetInference_double_nbrHardEvidence",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNetInference_double_nbrHardEvidence" "', argument " "1"" of type '" "gum::BayesNetInference< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNetInference< double > * >(argp1);
  {
    try {
      result = (gum::Size)((gum::BayesNetInference< double > const *)arg1)->nbrHardEvidence();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNetInference_double_nbrSoftEvidence(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNetInference< double > *arg1 = (gum::BayesNetInference< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::Size result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BayesNetInference_double_nbrSoftEvidence",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNetInference_double_nbrSoftEvidence" "', argument " "1"" of type '" "gum::BayesNetInference< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNetInference< double > * >(argp1);
  {
    try {
      result = (gum::Size)((gum::BayesNetInference< double > const *)arg1)->nbrSoftEvidence();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNetInference_double_evidence(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNetInference< double > *arg1 = (gum::BayesNetInference< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::NodeProperty< gum::Potential< double > const * > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BayesNetInference_double_evidence",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNetInference_double_evidence" "', argument " "1"" of type '" "gum::BayesNetInference< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNetInference< double > * >(argp1);
  {
    try {
      result = (gum::NodeProperty< gum::Potential< double > const * > *) &((gum::BayesNetInference< double > const *)arg1)->evidence();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NodePropertyT_gum__PotentialT_double_t_const_p_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNetInference_double_softEvidenceNodes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNetInference< double > *arg1 = (gum::BayesNetInference< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::NodeSet *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BayesNetInference_double_softEvidenceNodes",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNetInference_double_softEvidenceNodes" "', argument " "1"" of type '" "gum::BayesNetInference< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNetInference< double > * >(argp1);
  {
    try {
      result = (gum::NodeSet *) &((gum::BayesNetInference< double > const *)arg1)->softEvidenceNodes();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SetT_unsigned_int_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNetInference_double_hardEvidenceNodes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNetInference< double > *arg1 = (gum::BayesNetInference< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::NodeSet *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BayesNetInference_double_hardEvidenceNodes",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNetInference_double_hardEvidenceNodes" "', argument " "1"" of type '" "gum::BayesNetInference< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNetInference< double > * >(argp1);
  {
    try {
      result = (gum::NodeSet *) &((gum::BayesNetInference< double > const *)arg1)->hardEvidenceNodes();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SetT_unsigned_int_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BayesNetInference_double_hardEvidence(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNetInference< double > *arg1 = (gum::BayesNetInference< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::NodeProperty< gum::Idx > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BayesNetInference_double_hardEvidence",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BayesNetInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BayesNetInference_double_hardEvidence" "', argument " "1"" of type '" "gum::BayesNetInference< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNetInference< double > * >(argp1);
  {
    try {
      result = (gum::NodeProperty< gum::Idx > *) &((gum::BayesNetInference< double > const *)arg1)->hardEvidence();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NodePropertyT_unsigned_long_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *BayesNetInference_double_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gum__BayesNetInferenceT_double_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_LazyPropagation_double__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::IBayesNet< double > *arg1 = (gum::IBayesNet< double > *) 0 ;
  gum::RelevantPotentialsFinderType arg2 ;
  gum::FindBarrenNodesType arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  gum::LazyPropagation< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_LazyPropagation_double",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__IBayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LazyPropagation_double" "', argument " "1"" of type '" "gum::IBayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::IBayesNet< double > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_RelevantPotentialsFinderType,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_LazyPropagation_double" "', argument " "2"" of type '" "gum::RelevantPotentialsFinderType""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LazyPropagation_double" "', argument " "2"" of type '" "gum::RelevantPotentialsFinderType""'");
    } else {
      gum::RelevantPotentialsFinderType * temp = reinterpret_cast< gum::RelevantPotentialsFinderType * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_LazyPropagation_double" "', argument " "3"" of type '" "gum::FindBarrenNodesType""'");
  } 
  arg3 = static_cast< gum::FindBarrenNodesType >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_LazyPropagation_double" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  {
    try {
      result = (gum::LazyPropagation< double > *)new gum::LazyPropagation< double >((gum::IBayesNet< double > const *)arg1,arg2,arg3,arg4);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__LazyPropagationT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LazyPropagation_double__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::IBayesNet< double > *arg1 = (gum::IBayesNet< double > *) 0 ;
  gum::RelevantPotentialsFinderType arg2 ;
  gum::FindBarrenNodesType arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  gum::LazyPropagation< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_LazyPropagation_double",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__IBayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LazyPropagation_double" "', argument " "1"" of type '" "gum::IBayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::IBayesNet< double > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_RelevantPotentialsFinderType,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_LazyPropagation_double" "', argument " "2"" of type '" "gum::RelevantPotentialsFinderType""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LazyPropagation_double" "', argument " "2"" of type '" "gum::RelevantPotentialsFinderType""'");
    } else {
      gum::RelevantPotentialsFinderType * temp = reinterpret_cast< gum::RelevantPotentialsFinderType * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_LazyPropagation_double" "', argument " "3"" of type '" "gum::FindBarrenNodesType""'");
  } 
  arg3 = static_cast< gum::FindBarrenNodesType >(val3);
  {
    try {
      result = (gum::LazyPropagation< double > *)new gum::LazyPropagation< double >((gum::IBayesNet< double > const *)arg1,arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__LazyPropagationT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LazyPropagation_double__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::IBayesNet< double > *arg1 = (gum::IBayesNet< double > *) 0 ;
  gum::RelevantPotentialsFinderType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::LazyPropagation< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_LazyPropagation_double",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__IBayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LazyPropagation_double" "', argument " "1"" of type '" "gum::IBayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::IBayesNet< double > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_RelevantPotentialsFinderType,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_LazyPropagation_double" "', argument " "2"" of type '" "gum::RelevantPotentialsFinderType""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LazyPropagation_double" "', argument " "2"" of type '" "gum::RelevantPotentialsFinderType""'");
    } else {
      gum::RelevantPotentialsFinderType * temp = reinterpret_cast< gum::RelevantPotentialsFinderType * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (gum::LazyPropagation< double > *)new gum::LazyPropagation< double >((gum::IBayesNet< double > const *)arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__LazyPropagationT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LazyPropagation_double__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::IBayesNet< double > *arg1 = (gum::IBayesNet< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::LazyPropagation< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_LazyPropagation_double",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__IBayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LazyPropagation_double" "', argument " "1"" of type '" "gum::IBayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::IBayesNet< double > * >(argp1);
  {
    try {
      result = (gum::LazyPropagation< double > *)new gum::LazyPropagation< double >((gum::IBayesNet< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__LazyPropagationT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LazyPropagation_double(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__IBayesNetT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_LazyPropagation_double__SWIG_3(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__IBayesNetT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_RelevantPotentialsFinderType, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_LazyPropagation_double__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__IBayesNetT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_RelevantPotentialsFinderType, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_LazyPropagation_double__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__IBayesNetT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_RelevantPotentialsFinderType, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_LazyPropagation_double__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_LazyPropagation_double'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::LazyPropagation< double >::LazyPropagation(gum::IBayesNet< double > const *,gum::RelevantPotentialsFinderType,gum::FindBarrenNodesType,bool)\n"
    "    gum::LazyPropagation< double >::LazyPropagation(gum::IBayesNet< double > const *,gum::RelevantPotentialsFinderType,gum::FindBarrenNodesType)\n"
    "    gum::LazyPropagation< double >::LazyPropagation(gum::IBayesNet< double > const *,gum::RelevantPotentialsFinderType)\n"
    "    gum::LazyPropagation< double >::LazyPropagation(gum::IBayesNet< double > const *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_LazyPropagation_double(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = (gum::LazyPropagation< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_LazyPropagation_double",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LazyPropagation_double" "', argument " "1"" of type '" "gum::LazyPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  {
    try {
      delete arg1;
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_double_setTriangulation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = (gum::LazyPropagation< double > *) 0 ;
  gum::Triangulation *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LazyPropagation_double_setTriangulation",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_double_setTriangulation" "', argument " "1"" of type '" "gum::LazyPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Triangulation,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LazyPropagation_double_setTriangulation" "', argument " "2"" of type '" "gum::Triangulation const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LazyPropagation_double_setTriangulation" "', argument " "2"" of type '" "gum::Triangulation const &""'"); 
  }
  arg2 = reinterpret_cast< gum::Triangulation * >(argp2);
  {
    try {
      (arg1)->setTriangulation((gum::Triangulation const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_double_setRelevantPotentialsFinderType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = (gum::LazyPropagation< double > *) 0 ;
  gum::RelevantPotentialsFinderType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LazyPropagation_double_setRelevantPotentialsFinderType",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_double_setRelevantPotentialsFinderType" "', argument " "1"" of type '" "gum::LazyPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_RelevantPotentialsFinderType,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LazyPropagation_double_setRelevantPotentialsFinderType" "', argument " "2"" of type '" "gum::RelevantPotentialsFinderType""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LazyPropagation_double_setRelevantPotentialsFinderType" "', argument " "2"" of type '" "gum::RelevantPotentialsFinderType""'");
    } else {
      gum::RelevantPotentialsFinderType * temp = reinterpret_cast< gum::RelevantPotentialsFinderType * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      (arg1)->setRelevantPotentialsFinderType(arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_double_setFindBarrenNodesType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = (gum::LazyPropagation< double > *) 0 ;
  gum::FindBarrenNodesType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LazyPropagation_double_setFindBarrenNodesType",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_double_setFindBarrenNodesType" "', argument " "1"" of type '" "gum::LazyPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LazyPropagation_double_setFindBarrenNodesType" "', argument " "2"" of type '" "gum::FindBarrenNodesType""'");
  } 
  arg2 = static_cast< gum::FindBarrenNodesType >(val2);
  {
    try {
      (arg1)->setFindBarrenNodesType(arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_double_joinTree(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = (gum::LazyPropagation< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::JoinTree *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LazyPropagation_double_joinTree",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_double_joinTree" "', argument " "1"" of type '" "gum::LazyPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  {
    try {
      result = (gum::JoinTree *)(arg1)->joinTree();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__CliqueGraph, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_double_junctionTree(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = (gum::LazyPropagation< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::JunctionTree *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LazyPropagation_double_junctionTree",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_double_junctionTree" "', argument " "1"" of type '" "gum::LazyPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  {
    try {
      result = (gum::JunctionTree *)(arg1)->junctionTree();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__CliqueGraph, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_double_evidenceProbability(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = (gum::LazyPropagation< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LazyPropagation_double_evidenceProbability",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_double_evidenceProbability" "', argument " "1"" of type '" "gum::LazyPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  {
    try {
      result = (double)(arg1)->evidenceProbability();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_double_jointPosterior(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = (gum::LazyPropagation< double > *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::Potential< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LazyPropagation_double_jointPosterior",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_double_jointPosterior" "', argument " "1"" of type '" "gum::LazyPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  arg2 = obj1;
  {
    try {
      result = gum_LazyPropagation_Sl_double_Sg__jointPosterior(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::Potential< double >(static_cast< const gum::Potential< double >& >(result))), SWIGTYPE_p_gum__PotentialT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_double_setEvidence(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = (gum::LazyPropagation< double > *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LazyPropagation_double_setEvidence",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_double_setEvidence" "', argument " "1"" of type '" "gum::LazyPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  arg2 = obj1;
  {
    try {
      gum_LazyPropagation_Sl_double_Sg__setEvidence(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_double_updateEvidence(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = (gum::LazyPropagation< double > *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LazyPropagation_double_updateEvidence",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_double_updateEvidence" "', argument " "1"" of type '" "gum::LazyPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  arg2 = obj1;
  {
    try {
      gum_LazyPropagation_Sl_double_Sg__updateEvidence(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_double_setTargets(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = (gum::LazyPropagation< double > *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LazyPropagation_double_setTargets",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_double_setTargets" "', argument " "1"" of type '" "gum::LazyPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  arg2 = obj1;
  {
    try {
      gum_LazyPropagation_Sl_double_Sg__setTargets(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_double_makeInference(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = (gum::LazyPropagation< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LazyPropagation_double_makeInference",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_double_makeInference" "', argument " "1"" of type '" "gum::LazyPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  {
    try {
      gum_LazyPropagation_Sl_double_Sg__makeInference(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_double_posterior__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = (gum::LazyPropagation< double > *) 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::Potential< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LazyPropagation_double_posterior",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_double_posterior" "', argument " "1"" of type '" "gum::LazyPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LazyPropagation_double_posterior" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (gum::Potential< double > *) &gum_LazyPropagation_Sl_double_Sg__posterior__SWIG_0(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__PotentialT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_double_posterior__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = (gum::LazyPropagation< double > *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::Potential< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LazyPropagation_double_posterior",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_double_posterior" "', argument " "1"" of type '" "gum::LazyPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "LazyPropagation_double_posterior" "', argument " "2"" of type '" "std::string const""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (gum::Potential< double > *) &gum_LazyPropagation_Sl_double_Sg__posterior__SWIG_1(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__PotentialT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_double_posterior(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__LazyPropagationT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_LazyPropagation_double_posterior__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__LazyPropagationT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_LazyPropagation_double_posterior__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'LazyPropagation_double_posterior'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::LazyPropagation< double >::posterior(gum::NodeId const)\n"
    "    gum::LazyPropagation< double >::posterior(std::string const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_double_BayesNet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = (gum::LazyPropagation< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::IBayesNet< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LazyPropagation_double_BayesNet",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_double_BayesNet" "', argument " "1"" of type '" "gum::LazyPropagation< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  {
    try {
      result = (gum::IBayesNet< double > *) &gum_LazyPropagation_Sl_double_Sg__BayesNet((gum::LazyPropagation< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__IBayesNetT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_double_addEvidence__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = (gum::LazyPropagation< double > *) 0 ;
  gum::NodeId arg2 ;
  gum::Idx arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:LazyPropagation_double_addEvidence",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_double_addEvidence" "', argument " "1"" of type '" "gum::LazyPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LazyPropagation_double_addEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "LazyPropagation_double_addEvidence" "', argument " "3"" of type '" "gum::Idx""'");
  } 
  arg3 = static_cast< gum::Idx >(val3);
  {
    try {
      gum_LazyPropagation_Sl_double_Sg__addEvidence__SWIG_0(arg1,arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_double_addEvidence__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = (gum::LazyPropagation< double > *) 0 ;
  std::string *arg2 = 0 ;
  gum::Idx arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:LazyPropagation_double_addEvidence",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_double_addEvidence" "', argument " "1"" of type '" "gum::LazyPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LazyPropagation_double_addEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LazyPropagation_double_addEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "LazyPropagation_double_addEvidence" "', argument " "3"" of type '" "gum::Idx""'");
  } 
  arg3 = static_cast< gum::Idx >(val3);
  {
    try {
      gum_LazyPropagation_Sl_double_Sg__addEvidence__SWIG_1(arg1,(std::string const &)*arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_double_addEvidence__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = (gum::LazyPropagation< double > *) 0 ;
  gum::NodeId arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:LazyPropagation_double_addEvidence",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_double_addEvidence" "', argument " "1"" of type '" "gum::LazyPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LazyPropagation_double_addEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LazyPropagation_double_addEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LazyPropagation_double_addEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      gum_LazyPropagation_Sl_double_Sg__addEvidence__SWIG_2(arg1,arg2,(std::string const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_double_addEvidence__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = (gum::LazyPropagation< double > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:LazyPropagation_double_addEvidence",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_double_addEvidence" "', argument " "1"" of type '" "gum::LazyPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LazyPropagation_double_addEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LazyPropagation_double_addEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LazyPropagation_double_addEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LazyPropagation_double_addEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      gum_LazyPropagation_Sl_double_Sg__addEvidence__SWIG_3(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_double_addEvidence__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = (gum::LazyPropagation< double > *) 0 ;
  gum::NodeId arg2 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:LazyPropagation_double_addEvidence",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_double_addEvidence" "', argument " "1"" of type '" "gum::LazyPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LazyPropagation_double_addEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LazyPropagation_double_addEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LazyPropagation_double_addEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      gum_LazyPropagation_Sl_double_Sg__addEvidence__SWIG_4(arg1,arg2,(std::vector< double,std::allocator< double > > const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_double_addEvidence__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = (gum::LazyPropagation< double > *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:LazyPropagation_double_addEvidence",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_double_addEvidence" "', argument " "1"" of type '" "gum::LazyPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LazyPropagation_double_addEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LazyPropagation_double_addEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LazyPropagation_double_addEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LazyPropagation_double_addEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      gum_LazyPropagation_Sl_double_Sg__addEvidence__SWIG_5(arg1,(std::string const &)*arg2,(std::vector< double,std::allocator< double > > const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_double_addEvidence(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__LazyPropagationT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_LazyPropagation_double_addEvidence__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__LazyPropagationT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_LazyPropagation_double_addEvidence__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__LazyPropagationT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< double,std::allocator< double > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_LazyPropagation_double_addEvidence__SWIG_4(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__LazyPropagationT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_LazyPropagation_double_addEvidence__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__LazyPropagationT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_LazyPropagation_double_addEvidence__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__LazyPropagationT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< double,std::allocator< double > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_LazyPropagation_double_addEvidence__SWIG_5(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'LazyPropagation_double_addEvidence'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::LazyPropagation< double >::addEvidence(gum::NodeId const,gum::Idx const)\n"
    "    gum::LazyPropagation< double >::addEvidence(std::string const &,gum::Idx const)\n"
    "    gum::LazyPropagation< double >::addEvidence(gum::NodeId const,std::string const &)\n"
    "    gum::LazyPropagation< double >::addEvidence(std::string const &,std::string const &)\n"
    "    gum::LazyPropagation< double >::addEvidence(gum::NodeId const,std::vector< double,std::allocator< double > > const &)\n"
    "    gum::LazyPropagation< double >::addEvidence(std::string const &,std::vector< double,std::allocator< double > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_double_chgEvidence__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = (gum::LazyPropagation< double > *) 0 ;
  gum::NodeId arg2 ;
  gum::Idx arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:LazyPropagation_double_chgEvidence",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_double_chgEvidence" "', argument " "1"" of type '" "gum::LazyPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LazyPropagation_double_chgEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "LazyPropagation_double_chgEvidence" "', argument " "3"" of type '" "gum::Idx""'");
  } 
  arg3 = static_cast< gum::Idx >(val3);
  {
    try {
      gum_LazyPropagation_Sl_double_Sg__chgEvidence__SWIG_0(arg1,arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_double_chgEvidence__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = (gum::LazyPropagation< double > *) 0 ;
  std::string *arg2 = 0 ;
  gum::Idx arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:LazyPropagation_double_chgEvidence",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_double_chgEvidence" "', argument " "1"" of type '" "gum::LazyPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LazyPropagation_double_chgEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LazyPropagation_double_chgEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "LazyPropagation_double_chgEvidence" "', argument " "3"" of type '" "gum::Idx""'");
  } 
  arg3 = static_cast< gum::Idx >(val3);
  {
    try {
      gum_LazyPropagation_Sl_double_Sg__chgEvidence__SWIG_1(arg1,(std::string const &)*arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_double_chgEvidence__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = (gum::LazyPropagation< double > *) 0 ;
  gum::NodeId arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:LazyPropagation_double_chgEvidence",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_double_chgEvidence" "', argument " "1"" of type '" "gum::LazyPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LazyPropagation_double_chgEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LazyPropagation_double_chgEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LazyPropagation_double_chgEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      gum_LazyPropagation_Sl_double_Sg__chgEvidence__SWIG_2(arg1,arg2,(std::string const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_double_chgEvidence__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = (gum::LazyPropagation< double > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:LazyPropagation_double_chgEvidence",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_double_chgEvidence" "', argument " "1"" of type '" "gum::LazyPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LazyPropagation_double_chgEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LazyPropagation_double_chgEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LazyPropagation_double_chgEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LazyPropagation_double_chgEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      gum_LazyPropagation_Sl_double_Sg__chgEvidence__SWIG_3(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_double_chgEvidence__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = (gum::LazyPropagation< double > *) 0 ;
  gum::NodeId arg2 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:LazyPropagation_double_chgEvidence",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_double_chgEvidence" "', argument " "1"" of type '" "gum::LazyPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LazyPropagation_double_chgEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LazyPropagation_double_chgEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LazyPropagation_double_chgEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      gum_LazyPropagation_Sl_double_Sg__chgEvidence__SWIG_4(arg1,arg2,(std::vector< double,std::allocator< double > > const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_double_chgEvidence__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = (gum::LazyPropagation< double > *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:LazyPropagation_double_chgEvidence",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_double_chgEvidence" "', argument " "1"" of type '" "gum::LazyPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LazyPropagation_double_chgEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LazyPropagation_double_chgEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LazyPropagation_double_chgEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LazyPropagation_double_chgEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      gum_LazyPropagation_Sl_double_Sg__chgEvidence__SWIG_5(arg1,(std::string const &)*arg2,(std::vector< double,std::allocator< double > > const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_double_chgEvidence(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__LazyPropagationT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_LazyPropagation_double_chgEvidence__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__LazyPropagationT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_LazyPropagation_double_chgEvidence__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__LazyPropagationT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< double,std::allocator< double > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_LazyPropagation_double_chgEvidence__SWIG_4(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__LazyPropagationT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_LazyPropagation_double_chgEvidence__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__LazyPropagationT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_LazyPropagation_double_chgEvidence__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__LazyPropagationT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< double,std::allocator< double > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_LazyPropagation_double_chgEvidence__SWIG_5(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'LazyPropagation_double_chgEvidence'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::LazyPropagation< double >::chgEvidence(gum::NodeId const,gum::Idx const)\n"
    "    gum::LazyPropagation< double >::chgEvidence(std::string const &,gum::Idx const)\n"
    "    gum::LazyPropagation< double >::chgEvidence(gum::NodeId const,std::string const &)\n"
    "    gum::LazyPropagation< double >::chgEvidence(std::string const &,std::string const &)\n"
    "    gum::LazyPropagation< double >::chgEvidence(gum::NodeId const,std::vector< double,std::allocator< double > > const &)\n"
    "    gum::LazyPropagation< double >::chgEvidence(std::string const &,std::vector< double,std::allocator< double > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_double_hasEvidence__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = (gum::LazyPropagation< double > *) 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LazyPropagation_double_hasEvidence",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_double_hasEvidence" "', argument " "1"" of type '" "gum::LazyPropagation< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LazyPropagation_double_hasEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (bool)gum_LazyPropagation_Sl_double_Sg__hasEvidence__SWIG_0((gum::LazyPropagation< double > const *)arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_double_hasEvidence__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = (gum::LazyPropagation< double > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LazyPropagation_double_hasEvidence",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_double_hasEvidence" "', argument " "1"" of type '" "gum::LazyPropagation< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LazyPropagation_double_hasEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LazyPropagation_double_hasEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)gum_LazyPropagation_Sl_double_Sg__hasEvidence__SWIG_1((gum::LazyPropagation< double > const *)arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_double_hasEvidence(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__LazyPropagationT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_LazyPropagation_double_hasEvidence__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__LazyPropagationT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_LazyPropagation_double_hasEvidence__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'LazyPropagation_double_hasEvidence'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::LazyPropagation< double >::hasEvidence(gum::NodeId const) const\n"
    "    gum::LazyPropagation< double >::hasEvidence(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_double_eraseAllEvidence(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = (gum::LazyPropagation< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LazyPropagation_double_eraseAllEvidence",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_double_eraseAllEvidence" "', argument " "1"" of type '" "gum::LazyPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  {
    try {
      gum_LazyPropagation_Sl_double_Sg__eraseAllEvidence(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_double_hasHardEvidence__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = (gum::LazyPropagation< double > *) 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LazyPropagation_double_hasHardEvidence",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_double_hasHardEvidence" "', argument " "1"" of type '" "gum::LazyPropagation< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LazyPropagation_double_hasHardEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (bool)gum_LazyPropagation_Sl_double_Sg__hasHardEvidence__SWIG_0((gum::LazyPropagation< double > const *)arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_double_hasSoftEvidence__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = (gum::LazyPropagation< double > *) 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LazyPropagation_double_hasSoftEvidence",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_double_hasSoftEvidence" "', argument " "1"" of type '" "gum::LazyPropagation< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LazyPropagation_double_hasSoftEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (bool)gum_LazyPropagation_Sl_double_Sg__hasSoftEvidence__SWIG_0((gum::LazyPropagation< double > const *)arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_double_hasHardEvidence__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = (gum::LazyPropagation< double > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LazyPropagation_double_hasHardEvidence",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_double_hasHardEvidence" "', argument " "1"" of type '" "gum::LazyPropagation< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LazyPropagation_double_hasHardEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LazyPropagation_double_hasHardEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)gum_LazyPropagation_Sl_double_Sg__hasHardEvidence__SWIG_1((gum::LazyPropagation< double > const *)arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_double_hasHardEvidence(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__LazyPropagationT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_LazyPropagation_double_hasHardEvidence__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__LazyPropagationT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_LazyPropagation_double_hasHardEvidence__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'LazyPropagation_double_hasHardEvidence'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::LazyPropagation< double >::hasHardEvidence(gum::NodeId const) const\n"
    "    gum::LazyPropagation< double >::hasHardEvidence(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_double_hasSoftEvidence__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = (gum::LazyPropagation< double > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LazyPropagation_double_hasSoftEvidence",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_double_hasSoftEvidence" "', argument " "1"" of type '" "gum::LazyPropagation< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LazyPropagation_double_hasSoftEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LazyPropagation_double_hasSoftEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)gum_LazyPropagation_Sl_double_Sg__hasSoftEvidence__SWIG_1((gum::LazyPropagation< double > const *)arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_double_hasSoftEvidence(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__LazyPropagationT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_LazyPropagation_double_hasSoftEvidence__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__LazyPropagationT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_LazyPropagation_double_hasSoftEvidence__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'LazyPropagation_double_hasSoftEvidence'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::LazyPropagation< double >::hasSoftEvidence(gum::NodeId const) const\n"
    "    gum::LazyPropagation< double >::hasSoftEvidence(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_double_nbrEvidence(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = (gum::LazyPropagation< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::Size result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LazyPropagation_double_nbrEvidence",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_double_nbrEvidence" "', argument " "1"" of type '" "gum::LazyPropagation< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  {
    try {
      result = (gum::Size)gum_LazyPropagation_Sl_double_Sg__nbrEvidence((gum::LazyPropagation< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_double_nbrHardEvidence(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = (gum::LazyPropagation< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::Size result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LazyPropagation_double_nbrHardEvidence",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_double_nbrHardEvidence" "', argument " "1"" of type '" "gum::LazyPropagation< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  {
    try {
      result = (gum::Size)gum_LazyPropagation_Sl_double_Sg__nbrHardEvidence((gum::LazyPropagation< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_double_nbrSoftEvidence(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = (gum::LazyPropagation< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::Size result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LazyPropagation_double_nbrSoftEvidence",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_double_nbrSoftEvidence" "', argument " "1"" of type '" "gum::LazyPropagation< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  {
    try {
      result = (gum::Size)gum_LazyPropagation_Sl_double_Sg__nbrSoftEvidence((gum::LazyPropagation< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_double_eraseAllTargets(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = (gum::LazyPropagation< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LazyPropagation_double_eraseAllTargets",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_double_eraseAllTargets" "', argument " "1"" of type '" "gum::LazyPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  {
    try {
      gum_LazyPropagation_Sl_double_Sg__eraseAllTargets(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_double_addAllTargets(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = (gum::LazyPropagation< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LazyPropagation_double_addAllTargets",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_double_addAllTargets" "', argument " "1"" of type '" "gum::LazyPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  {
    try {
      gum_LazyPropagation_Sl_double_Sg__addAllTargets(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_double_addTarget__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = (gum::LazyPropagation< double > *) 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LazyPropagation_double_addTarget",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_double_addTarget" "', argument " "1"" of type '" "gum::LazyPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LazyPropagation_double_addTarget" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      gum_LazyPropagation_Sl_double_Sg__addTarget__SWIG_0(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_double_addTarget__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = (gum::LazyPropagation< double > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LazyPropagation_double_addTarget",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_double_addTarget" "', argument " "1"" of type '" "gum::LazyPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LazyPropagation_double_addTarget" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LazyPropagation_double_addTarget" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      gum_LazyPropagation_Sl_double_Sg__addTarget__SWIG_1(arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_double_addTarget(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__LazyPropagationT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_LazyPropagation_double_addTarget__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__LazyPropagationT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_LazyPropagation_double_addTarget__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'LazyPropagation_double_addTarget'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::LazyPropagation< double >::addTarget(gum::NodeId const)\n"
    "    gum::LazyPropagation< double >::addTarget(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_double_eraseTarget__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = (gum::LazyPropagation< double > *) 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LazyPropagation_double_eraseTarget",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_double_eraseTarget" "', argument " "1"" of type '" "gum::LazyPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LazyPropagation_double_eraseTarget" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      gum_LazyPropagation_Sl_double_Sg__eraseTarget__SWIG_0(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_double_eraseTarget__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = (gum::LazyPropagation< double > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LazyPropagation_double_eraseTarget",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_double_eraseTarget" "', argument " "1"" of type '" "gum::LazyPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LazyPropagation_double_eraseTarget" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LazyPropagation_double_eraseTarget" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      gum_LazyPropagation_Sl_double_Sg__eraseTarget__SWIG_1(arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_double_eraseTarget(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__LazyPropagationT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_LazyPropagation_double_eraseTarget__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__LazyPropagationT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_LazyPropagation_double_eraseTarget__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'LazyPropagation_double_eraseTarget'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::LazyPropagation< double >::eraseTarget(gum::NodeId const)\n"
    "    gum::LazyPropagation< double >::eraseTarget(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_double_isTarget__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = (gum::LazyPropagation< double > *) 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LazyPropagation_double_isTarget",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_double_isTarget" "', argument " "1"" of type '" "gum::LazyPropagation< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LazyPropagation_double_isTarget" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (bool)gum_LazyPropagation_Sl_double_Sg__isTarget__SWIG_0((gum::LazyPropagation< double > const *)arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_double_isTarget__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = (gum::LazyPropagation< double > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LazyPropagation_double_isTarget",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_double_isTarget" "', argument " "1"" of type '" "gum::LazyPropagation< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LazyPropagation_double_isTarget" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LazyPropagation_double_isTarget" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)gum_LazyPropagation_Sl_double_Sg__isTarget__SWIG_1((gum::LazyPropagation< double > const *)arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_double_isTarget(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__LazyPropagationT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_LazyPropagation_double_isTarget__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__LazyPropagationT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_LazyPropagation_double_isTarget__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'LazyPropagation_double_isTarget'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::LazyPropagation< double >::isTarget(gum::NodeId const) const\n"
    "    gum::LazyPropagation< double >::isTarget(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_double_nbrTargets(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = (gum::LazyPropagation< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::Size result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LazyPropagation_double_nbrTargets",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_double_nbrTargets" "', argument " "1"" of type '" "gum::LazyPropagation< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  {
    try {
      result = (gum::Size)gum_LazyPropagation_Sl_double_Sg__nbrTargets((gum::LazyPropagation< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_double_H__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = (gum::LazyPropagation< double > *) 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LazyPropagation_double_H",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_double_H" "', argument " "1"" of type '" "gum::LazyPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LazyPropagation_double_H" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (double)gum_LazyPropagation_Sl_double_Sg__H__SWIG_0(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_double_H__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::LazyPropagation< double > *arg1 = (gum::LazyPropagation< double > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LazyPropagation_double_H",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__LazyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LazyPropagation_double_H" "', argument " "1"" of type '" "gum::LazyPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::LazyPropagation< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LazyPropagation_double_H" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LazyPropagation_double_H" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (double)gum_LazyPropagation_Sl_double_Sg__H__SWIG_1(arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LazyPropagation_double_H(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__LazyPropagationT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_LazyPropagation_double_H__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__LazyPropagationT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_LazyPropagation_double_H__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'LazyPropagation_double_H'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::LazyPropagation< double >::H(gum::NodeId const)\n"
    "    gum::LazyPropagation< double >::H(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *LazyPropagation_double_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gum__LazyPropagationT_double_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_GibbsInference_double(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::IBayesNet< double > *arg1 = (gum::IBayesNet< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::GibbsInference< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_GibbsInference_double",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__IBayesNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GibbsInference_double" "', argument " "1"" of type '" "gum::IBayesNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::IBayesNet< double > * >(argp1);
  {
    try {
      result = (gum::GibbsInference< double > *)new gum::GibbsInference< double >((gum::IBayesNet< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__GibbsInferenceT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_GibbsInference_double(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsInference< double > *arg1 = (gum::GibbsInference< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_GibbsInference_double",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__GibbsInferenceT_double_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GibbsInference_double" "', argument " "1"" of type '" "gum::GibbsInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsInference< double > * >(argp1);
  {
    try {
      delete arg1;
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsInference_double_setEvidence(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsInference< double > *arg1 = (gum::GibbsInference< double > *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GibbsInference_double_setEvidence",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__GibbsInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsInference_double_setEvidence" "', argument " "1"" of type '" "gum::GibbsInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsInference< double > * >(argp1);
  arg2 = obj1;
  {
    try {
      gum_GibbsInference_Sl_double_Sg__setEvidence(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsInference_double_updateEvidence(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsInference< double > *arg1 = (gum::GibbsInference< double > *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GibbsInference_double_updateEvidence",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__GibbsInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsInference_double_updateEvidence" "', argument " "1"" of type '" "gum::GibbsInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsInference< double > * >(argp1);
  arg2 = obj1;
  {
    try {
      gum_GibbsInference_Sl_double_Sg__updateEvidence(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsInference_double_setTargets(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsInference< double > *arg1 = (gum::GibbsInference< double > *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GibbsInference_double_setTargets",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__GibbsInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsInference_double_setTargets" "', argument " "1"" of type '" "gum::GibbsInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsInference< double > * >(argp1);
  arg2 = obj1;
  {
    try {
      gum_GibbsInference_Sl_double_Sg__setTargets(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsInference_double_setVerbosity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsInference< double > *arg1 = (gum::GibbsInference< double > *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GibbsInference_double_setVerbosity",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__GibbsInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsInference_double_setVerbosity" "', argument " "1"" of type '" "gum::GibbsInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsInference< double > * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GibbsInference_double_setVerbosity" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      gum_GibbsInference_Sl_double_Sg__setVerbosity(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsInference_double_setEpsilon(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsInference< double > *arg1 = (gum::GibbsInference< double > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GibbsInference_double_setEpsilon",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__GibbsInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsInference_double_setEpsilon" "', argument " "1"" of type '" "gum::GibbsInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsInference< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GibbsInference_double_setEpsilon" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      gum_GibbsInference_Sl_double_Sg__setEpsilon(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsInference_double_setMinEpsilonRate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsInference< double > *arg1 = (gum::GibbsInference< double > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GibbsInference_double_setMinEpsilonRate",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__GibbsInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsInference_double_setMinEpsilonRate" "', argument " "1"" of type '" "gum::GibbsInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsInference< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GibbsInference_double_setMinEpsilonRate" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      gum_GibbsInference_Sl_double_Sg__setMinEpsilonRate(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsInference_double_setMaxIter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsInference< double > *arg1 = (gum::GibbsInference< double > *) 0 ;
  gum::Size arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GibbsInference_double_setMaxIter",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__GibbsInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsInference_double_setMaxIter" "', argument " "1"" of type '" "gum::GibbsInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsInference< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GibbsInference_double_setMaxIter" "', argument " "2"" of type '" "gum::Size""'");
  } 
  arg2 = static_cast< gum::Size >(val2);
  {
    try {
      gum_GibbsInference_Sl_double_Sg__setMaxIter(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsInference_double_setMaxTime(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsInference< double > *arg1 = (gum::GibbsInference< double > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GibbsInference_double_setMaxTime",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__GibbsInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsInference_double_setMaxTime" "', argument " "1"" of type '" "gum::GibbsInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsInference< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GibbsInference_double_setMaxTime" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      gum_GibbsInference_Sl_double_Sg__setMaxTime(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsInference_double_setPeriodSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsInference< double > *arg1 = (gum::GibbsInference< double > *) 0 ;
  gum::Size arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GibbsInference_double_setPeriodSize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__GibbsInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsInference_double_setPeriodSize" "', argument " "1"" of type '" "gum::GibbsInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsInference< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GibbsInference_double_setPeriodSize" "', argument " "2"" of type '" "gum::Size""'");
  } 
  arg2 = static_cast< gum::Size >(val2);
  {
    try {
      gum_GibbsInference_Sl_double_Sg__setPeriodSize(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsInference_double_setBurnIn(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsInference< double > *arg1 = (gum::GibbsInference< double > *) 0 ;
  gum::Size arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GibbsInference_double_setBurnIn",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__GibbsInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsInference_double_setBurnIn" "', argument " "1"" of type '" "gum::GibbsInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsInference< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GibbsInference_double_setBurnIn" "', argument " "2"" of type '" "gum::Size""'");
  } 
  arg2 = static_cast< gum::Size >(val2);
  {
    try {
      gum_GibbsInference_Sl_double_Sg__setBurnIn(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsInference_double_verbosity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsInference< double > *arg1 = (gum::GibbsInference< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GibbsInference_double_verbosity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__GibbsInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsInference_double_verbosity" "', argument " "1"" of type '" "gum::GibbsInference< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsInference< double > * >(argp1);
  {
    try {
      result = (bool)gum_GibbsInference_Sl_double_Sg__verbosity((gum::GibbsInference< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsInference_double_epsilon(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsInference< double > *arg1 = (gum::GibbsInference< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GibbsInference_double_epsilon",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__GibbsInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsInference_double_epsilon" "', argument " "1"" of type '" "gum::GibbsInference< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsInference< double > * >(argp1);
  {
    try {
      result = (double)gum_GibbsInference_Sl_double_Sg__epsilon((gum::GibbsInference< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsInference_double_minEpsilonRate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsInference< double > *arg1 = (gum::GibbsInference< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GibbsInference_double_minEpsilonRate",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__GibbsInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsInference_double_minEpsilonRate" "', argument " "1"" of type '" "gum::GibbsInference< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsInference< double > * >(argp1);
  {
    try {
      result = (double)gum_GibbsInference_Sl_double_Sg__minEpsilonRate((gum::GibbsInference< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsInference_double_maxIter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsInference< double > *arg1 = (gum::GibbsInference< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::Size result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GibbsInference_double_maxIter",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__GibbsInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsInference_double_maxIter" "', argument " "1"" of type '" "gum::GibbsInference< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsInference< double > * >(argp1);
  {
    try {
      result = (gum::Size)gum_GibbsInference_Sl_double_Sg__maxIter((gum::GibbsInference< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsInference_double_maxTime(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsInference< double > *arg1 = (gum::GibbsInference< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GibbsInference_double_maxTime",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__GibbsInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsInference_double_maxTime" "', argument " "1"" of type '" "gum::GibbsInference< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsInference< double > * >(argp1);
  {
    try {
      result = (double)gum_GibbsInference_Sl_double_Sg__maxTime((gum::GibbsInference< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsInference_double_periodSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsInference< double > *arg1 = (gum::GibbsInference< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::Size result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GibbsInference_double_periodSize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__GibbsInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsInference_double_periodSize" "', argument " "1"" of type '" "gum::GibbsInference< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsInference< double > * >(argp1);
  {
    try {
      result = (gum::Size)gum_GibbsInference_Sl_double_Sg__periodSize((gum::GibbsInference< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsInference_double_burnIn(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsInference< double > *arg1 = (gum::GibbsInference< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::Size result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GibbsInference_double_burnIn",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__GibbsInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsInference_double_burnIn" "', argument " "1"" of type '" "gum::GibbsInference< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsInference< double > * >(argp1);
  {
    try {
      result = (gum::Size)gum_GibbsInference_Sl_double_Sg__burnIn((gum::GibbsInference< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsInference_double_nbrIterations(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsInference< double > *arg1 = (gum::GibbsInference< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::Size result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GibbsInference_double_nbrIterations",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__GibbsInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsInference_double_nbrIterations" "', argument " "1"" of type '" "gum::GibbsInference< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsInference< double > * >(argp1);
  {
    try {
      result = (gum::Size)gum_GibbsInference_Sl_double_Sg__nbrIterations((gum::GibbsInference< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsInference_double_currentTime(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsInference< double > *arg1 = (gum::GibbsInference< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GibbsInference_double_currentTime",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__GibbsInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsInference_double_currentTime" "', argument " "1"" of type '" "gum::GibbsInference< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsInference< double > * >(argp1);
  {
    try {
      result = (double)gum_GibbsInference_Sl_double_Sg__currentTime((gum::GibbsInference< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsInference_double_messageApproximationScheme(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsInference< double > *arg1 = (gum::GibbsInference< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GibbsInference_double_messageApproximationScheme",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__GibbsInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsInference_double_messageApproximationScheme" "', argument " "1"" of type '" "gum::GibbsInference< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsInference< double > * >(argp1);
  {
    try {
      result = gum_GibbsInference_Sl_double_Sg__messageApproximationScheme((gum::GibbsInference< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsInference_double_history(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsInference< double > *arg1 = (gum::GibbsInference< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double,std::allocator< double > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GibbsInference_double_history",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__GibbsInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsInference_double_history" "', argument " "1"" of type '" "gum::GibbsInference< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsInference< double > * >(argp1);
  {
    try {
      result = (std::vector< double,std::allocator< double > > *) &gum_GibbsInference_Sl_double_Sg__history((gum::GibbsInference< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< double,std::allocator< double > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsInference_double_makeInference(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsInference< double > *arg1 = (gum::GibbsInference< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GibbsInference_double_makeInference",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__GibbsInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsInference_double_makeInference" "', argument " "1"" of type '" "gum::GibbsInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsInference< double > * >(argp1);
  {
    try {
      gum_GibbsInference_Sl_double_Sg__makeInference(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsInference_double_posterior__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsInference< double > *arg1 = (gum::GibbsInference< double > *) 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::Potential< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GibbsInference_double_posterior",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__GibbsInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsInference_double_posterior" "', argument " "1"" of type '" "gum::GibbsInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsInference< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GibbsInference_double_posterior" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (gum::Potential< double > *) &gum_GibbsInference_Sl_double_Sg__posterior__SWIG_0(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__PotentialT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsInference_double_posterior__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsInference< double > *arg1 = (gum::GibbsInference< double > *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::Potential< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GibbsInference_double_posterior",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__GibbsInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsInference_double_posterior" "', argument " "1"" of type '" "gum::GibbsInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsInference< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "GibbsInference_double_posterior" "', argument " "2"" of type '" "std::string const""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (gum::Potential< double > *) &gum_GibbsInference_Sl_double_Sg__posterior__SWIG_1(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__PotentialT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsInference_double_posterior(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__GibbsInferenceT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_GibbsInference_double_posterior__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__GibbsInferenceT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GibbsInference_double_posterior__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'GibbsInference_double_posterior'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::GibbsInference< double >::posterior(gum::NodeId const)\n"
    "    gum::GibbsInference< double >::posterior(std::string const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_GibbsInference_double_BayesNet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsInference< double > *arg1 = (gum::GibbsInference< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::IBayesNet< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GibbsInference_double_BayesNet",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__GibbsInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsInference_double_BayesNet" "', argument " "1"" of type '" "gum::GibbsInference< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsInference< double > * >(argp1);
  {
    try {
      result = (gum::IBayesNet< double > *) &gum_GibbsInference_Sl_double_Sg__BayesNet((gum::GibbsInference< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__IBayesNetT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsInference_double_addEvidence__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsInference< double > *arg1 = (gum::GibbsInference< double > *) 0 ;
  gum::NodeId arg2 ;
  gum::Idx arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:GibbsInference_double_addEvidence",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__GibbsInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsInference_double_addEvidence" "', argument " "1"" of type '" "gum::GibbsInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsInference< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GibbsInference_double_addEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GibbsInference_double_addEvidence" "', argument " "3"" of type '" "gum::Idx""'");
  } 
  arg3 = static_cast< gum::Idx >(val3);
  {
    try {
      gum_GibbsInference_Sl_double_Sg__addEvidence__SWIG_0(arg1,arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsInference_double_addEvidence__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsInference< double > *arg1 = (gum::GibbsInference< double > *) 0 ;
  std::string *arg2 = 0 ;
  gum::Idx arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:GibbsInference_double_addEvidence",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__GibbsInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsInference_double_addEvidence" "', argument " "1"" of type '" "gum::GibbsInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsInference< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GibbsInference_double_addEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GibbsInference_double_addEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GibbsInference_double_addEvidence" "', argument " "3"" of type '" "gum::Idx""'");
  } 
  arg3 = static_cast< gum::Idx >(val3);
  {
    try {
      gum_GibbsInference_Sl_double_Sg__addEvidence__SWIG_1(arg1,(std::string const &)*arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsInference_double_addEvidence__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsInference< double > *arg1 = (gum::GibbsInference< double > *) 0 ;
  gum::NodeId arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:GibbsInference_double_addEvidence",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__GibbsInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsInference_double_addEvidence" "', argument " "1"" of type '" "gum::GibbsInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsInference< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GibbsInference_double_addEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GibbsInference_double_addEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GibbsInference_double_addEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      gum_GibbsInference_Sl_double_Sg__addEvidence__SWIG_2(arg1,arg2,(std::string const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsInference_double_addEvidence__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsInference< double > *arg1 = (gum::GibbsInference< double > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:GibbsInference_double_addEvidence",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__GibbsInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsInference_double_addEvidence" "', argument " "1"" of type '" "gum::GibbsInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsInference< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GibbsInference_double_addEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GibbsInference_double_addEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GibbsInference_double_addEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GibbsInference_double_addEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      gum_GibbsInference_Sl_double_Sg__addEvidence__SWIG_3(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsInference_double_addEvidence__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsInference< double > *arg1 = (gum::GibbsInference< double > *) 0 ;
  gum::NodeId arg2 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:GibbsInference_double_addEvidence",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__GibbsInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsInference_double_addEvidence" "', argument " "1"" of type '" "gum::GibbsInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsInference< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GibbsInference_double_addEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GibbsInference_double_addEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GibbsInference_double_addEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      gum_GibbsInference_Sl_double_Sg__addEvidence__SWIG_4(arg1,arg2,(std::vector< double,std::allocator< double > > const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsInference_double_addEvidence__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsInference< double > *arg1 = (gum::GibbsInference< double > *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:GibbsInference_double_addEvidence",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__GibbsInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsInference_double_addEvidence" "', argument " "1"" of type '" "gum::GibbsInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsInference< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GibbsInference_double_addEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GibbsInference_double_addEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GibbsInference_double_addEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GibbsInference_double_addEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      gum_GibbsInference_Sl_double_Sg__addEvidence__SWIG_5(arg1,(std::string const &)*arg2,(std::vector< double,std::allocator< double > > const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsInference_double_addEvidence(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__GibbsInferenceT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_GibbsInference_double_addEvidence__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__GibbsInferenceT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_GibbsInference_double_addEvidence__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__GibbsInferenceT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< double,std::allocator< double > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_GibbsInference_double_addEvidence__SWIG_4(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__GibbsInferenceT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_GibbsInference_double_addEvidence__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__GibbsInferenceT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_GibbsInference_double_addEvidence__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__GibbsInferenceT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< double,std::allocator< double > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_GibbsInference_double_addEvidence__SWIG_5(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'GibbsInference_double_addEvidence'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::GibbsInference< double >::addEvidence(gum::NodeId const,gum::Idx const)\n"
    "    gum::GibbsInference< double >::addEvidence(std::string const &,gum::Idx const)\n"
    "    gum::GibbsInference< double >::addEvidence(gum::NodeId const,std::string const &)\n"
    "    gum::GibbsInference< double >::addEvidence(std::string const &,std::string const &)\n"
    "    gum::GibbsInference< double >::addEvidence(gum::NodeId const,std::vector< double,std::allocator< double > > const &)\n"
    "    gum::GibbsInference< double >::addEvidence(std::string const &,std::vector< double,std::allocator< double > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_GibbsInference_double_chgEvidence__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsInference< double > *arg1 = (gum::GibbsInference< double > *) 0 ;
  gum::NodeId arg2 ;
  gum::Idx arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:GibbsInference_double_chgEvidence",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__GibbsInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsInference_double_chgEvidence" "', argument " "1"" of type '" "gum::GibbsInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsInference< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GibbsInference_double_chgEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GibbsInference_double_chgEvidence" "', argument " "3"" of type '" "gum::Idx""'");
  } 
  arg3 = static_cast< gum::Idx >(val3);
  {
    try {
      gum_GibbsInference_Sl_double_Sg__chgEvidence__SWIG_0(arg1,arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsInference_double_chgEvidence__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsInference< double > *arg1 = (gum::GibbsInference< double > *) 0 ;
  std::string *arg2 = 0 ;
  gum::Idx arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:GibbsInference_double_chgEvidence",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__GibbsInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsInference_double_chgEvidence" "', argument " "1"" of type '" "gum::GibbsInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsInference< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GibbsInference_double_chgEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GibbsInference_double_chgEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GibbsInference_double_chgEvidence" "', argument " "3"" of type '" "gum::Idx""'");
  } 
  arg3 = static_cast< gum::Idx >(val3);
  {
    try {
      gum_GibbsInference_Sl_double_Sg__chgEvidence__SWIG_1(arg1,(std::string const &)*arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsInference_double_chgEvidence__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsInference< double > *arg1 = (gum::GibbsInference< double > *) 0 ;
  gum::NodeId arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:GibbsInference_double_chgEvidence",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__GibbsInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsInference_double_chgEvidence" "', argument " "1"" of type '" "gum::GibbsInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsInference< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GibbsInference_double_chgEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GibbsInference_double_chgEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GibbsInference_double_chgEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      gum_GibbsInference_Sl_double_Sg__chgEvidence__SWIG_2(arg1,arg2,(std::string const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsInference_double_chgEvidence__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsInference< double > *arg1 = (gum::GibbsInference< double > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:GibbsInference_double_chgEvidence",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__GibbsInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsInference_double_chgEvidence" "', argument " "1"" of type '" "gum::GibbsInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsInference< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GibbsInference_double_chgEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GibbsInference_double_chgEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GibbsInference_double_chgEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GibbsInference_double_chgEvidence" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      gum_GibbsInference_Sl_double_Sg__chgEvidence__SWIG_3(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsInference_double_chgEvidence__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsInference< double > *arg1 = (gum::GibbsInference< double > *) 0 ;
  gum::NodeId arg2 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:GibbsInference_double_chgEvidence",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__GibbsInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsInference_double_chgEvidence" "', argument " "1"" of type '" "gum::GibbsInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsInference< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GibbsInference_double_chgEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GibbsInference_double_chgEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GibbsInference_double_chgEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      gum_GibbsInference_Sl_double_Sg__chgEvidence__SWIG_4(arg1,arg2,(std::vector< double,std::allocator< double > > const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsInference_double_chgEvidence__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsInference< double > *arg1 = (gum::GibbsInference< double > *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:GibbsInference_double_chgEvidence",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__GibbsInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsInference_double_chgEvidence" "', argument " "1"" of type '" "gum::GibbsInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsInference< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GibbsInference_double_chgEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GibbsInference_double_chgEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GibbsInference_double_chgEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GibbsInference_double_chgEvidence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      gum_GibbsInference_Sl_double_Sg__chgEvidence__SWIG_5(arg1,(std::string const &)*arg2,(std::vector< double,std::allocator< double > > const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsInference_double_chgEvidence(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__GibbsInferenceT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_GibbsInference_double_chgEvidence__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__GibbsInferenceT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_GibbsInference_double_chgEvidence__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__GibbsInferenceT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< double,std::allocator< double > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_GibbsInference_double_chgEvidence__SWIG_4(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__GibbsInferenceT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_GibbsInference_double_chgEvidence__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__GibbsInferenceT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_GibbsInference_double_chgEvidence__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__GibbsInferenceT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< double,std::allocator< double > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_GibbsInference_double_chgEvidence__SWIG_5(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'GibbsInference_double_chgEvidence'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::GibbsInference< double >::chgEvidence(gum::NodeId const,gum::Idx const)\n"
    "    gum::GibbsInference< double >::chgEvidence(std::string const &,gum::Idx const)\n"
    "    gum::GibbsInference< double >::chgEvidence(gum::NodeId const,std::string const &)\n"
    "    gum::GibbsInference< double >::chgEvidence(std::string const &,std::string const &)\n"
    "    gum::GibbsInference< double >::chgEvidence(gum::NodeId const,std::vector< double,std::allocator< double > > const &)\n"
    "    gum::GibbsInference< double >::chgEvidence(std::string const &,std::vector< double,std::allocator< double > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_GibbsInference_double_hasEvidence__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsInference< double > *arg1 = (gum::GibbsInference< double > *) 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GibbsInference_double_hasEvidence",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__GibbsInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsInference_double_hasEvidence" "', argument " "1"" of type '" "gum::GibbsInference< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsInference< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GibbsInference_double_hasEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (bool)gum_GibbsInference_Sl_double_Sg__hasEvidence__SWIG_0((gum::GibbsInference< double > const *)arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsInference_double_hasEvidence__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsInference< double > *arg1 = (gum::GibbsInference< double > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GibbsInference_double_hasEvidence",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__GibbsInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsInference_double_hasEvidence" "', argument " "1"" of type '" "gum::GibbsInference< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsInference< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GibbsInference_double_hasEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GibbsInference_double_hasEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)gum_GibbsInference_Sl_double_Sg__hasEvidence__SWIG_1((gum::GibbsInference< double > const *)arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsInference_double_hasEvidence(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__GibbsInferenceT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_GibbsInference_double_hasEvidence__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__GibbsInferenceT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GibbsInference_double_hasEvidence__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'GibbsInference_double_hasEvidence'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::GibbsInference< double >::hasEvidence(gum::NodeId const) const\n"
    "    gum::GibbsInference< double >::hasEvidence(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_GibbsInference_double_eraseAllEvidence(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsInference< double > *arg1 = (gum::GibbsInference< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GibbsInference_double_eraseAllEvidence",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__GibbsInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsInference_double_eraseAllEvidence" "', argument " "1"" of type '" "gum::GibbsInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsInference< double > * >(argp1);
  {
    try {
      gum_GibbsInference_Sl_double_Sg__eraseAllEvidence(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsInference_double_hasHardEvidence__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsInference< double > *arg1 = (gum::GibbsInference< double > *) 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GibbsInference_double_hasHardEvidence",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__GibbsInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsInference_double_hasHardEvidence" "', argument " "1"" of type '" "gum::GibbsInference< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsInference< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GibbsInference_double_hasHardEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (bool)gum_GibbsInference_Sl_double_Sg__hasHardEvidence__SWIG_0((gum::GibbsInference< double > const *)arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsInference_double_hasSoftEvidence__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsInference< double > *arg1 = (gum::GibbsInference< double > *) 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GibbsInference_double_hasSoftEvidence",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__GibbsInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsInference_double_hasSoftEvidence" "', argument " "1"" of type '" "gum::GibbsInference< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsInference< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GibbsInference_double_hasSoftEvidence" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (bool)gum_GibbsInference_Sl_double_Sg__hasSoftEvidence__SWIG_0((gum::GibbsInference< double > const *)arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsInference_double_hasHardEvidence__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsInference< double > *arg1 = (gum::GibbsInference< double > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GibbsInference_double_hasHardEvidence",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__GibbsInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsInference_double_hasHardEvidence" "', argument " "1"" of type '" "gum::GibbsInference< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsInference< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GibbsInference_double_hasHardEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GibbsInference_double_hasHardEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)gum_GibbsInference_Sl_double_Sg__hasHardEvidence__SWIG_1((gum::GibbsInference< double > const *)arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsInference_double_hasHardEvidence(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__GibbsInferenceT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_GibbsInference_double_hasHardEvidence__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__GibbsInferenceT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GibbsInference_double_hasHardEvidence__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'GibbsInference_double_hasHardEvidence'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::GibbsInference< double >::hasHardEvidence(gum::NodeId const) const\n"
    "    gum::GibbsInference< double >::hasHardEvidence(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_GibbsInference_double_hasSoftEvidence__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsInference< double > *arg1 = (gum::GibbsInference< double > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GibbsInference_double_hasSoftEvidence",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__GibbsInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsInference_double_hasSoftEvidence" "', argument " "1"" of type '" "gum::GibbsInference< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsInference< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GibbsInference_double_hasSoftEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GibbsInference_double_hasSoftEvidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)gum_GibbsInference_Sl_double_Sg__hasSoftEvidence__SWIG_1((gum::GibbsInference< double > const *)arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsInference_double_hasSoftEvidence(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__GibbsInferenceT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_GibbsInference_double_hasSoftEvidence__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__GibbsInferenceT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GibbsInference_double_hasSoftEvidence__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'GibbsInference_double_hasSoftEvidence'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::GibbsInference< double >::hasSoftEvidence(gum::NodeId const) const\n"
    "    gum::GibbsInference< double >::hasSoftEvidence(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_GibbsInference_double_nbrEvidence(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsInference< double > *arg1 = (gum::GibbsInference< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::Size result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GibbsInference_double_nbrEvidence",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__GibbsInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsInference_double_nbrEvidence" "', argument " "1"" of type '" "gum::GibbsInference< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsInference< double > * >(argp1);
  {
    try {
      result = (gum::Size)gum_GibbsInference_Sl_double_Sg__nbrEvidence((gum::GibbsInference< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsInference_double_nbrHardEvidence(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsInference< double > *arg1 = (gum::GibbsInference< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::Size result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GibbsInference_double_nbrHardEvidence",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__GibbsInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsInference_double_nbrHardEvidence" "', argument " "1"" of type '" "gum::GibbsInference< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsInference< double > * >(argp1);
  {
    try {
      result = (gum::Size)gum_GibbsInference_Sl_double_Sg__nbrHardEvidence((gum::GibbsInference< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsInference_double_nbrSoftEvidence(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsInference< double > *arg1 = (gum::GibbsInference< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::Size result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GibbsInference_double_nbrSoftEvidence",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__GibbsInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsInference_double_nbrSoftEvidence" "', argument " "1"" of type '" "gum::GibbsInference< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsInference< double > * >(argp1);
  {
    try {
      result = (gum::Size)gum_GibbsInference_Sl_double_Sg__nbrSoftEvidence((gum::GibbsInference< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsInference_double_eraseAllTargets(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsInference< double > *arg1 = (gum::GibbsInference< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GibbsInference_double_eraseAllTargets",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__GibbsInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsInference_double_eraseAllTargets" "', argument " "1"" of type '" "gum::GibbsInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsInference< double > * >(argp1);
  {
    try {
      gum_GibbsInference_Sl_double_Sg__eraseAllTargets(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsInference_double_addAllTargets(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsInference< double > *arg1 = (gum::GibbsInference< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GibbsInference_double_addAllTargets",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__GibbsInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsInference_double_addAllTargets" "', argument " "1"" of type '" "gum::GibbsInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsInference< double > * >(argp1);
  {
    try {
      gum_GibbsInference_Sl_double_Sg__addAllTargets(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsInference_double_addTarget__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsInference< double > *arg1 = (gum::GibbsInference< double > *) 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GibbsInference_double_addTarget",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__GibbsInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsInference_double_addTarget" "', argument " "1"" of type '" "gum::GibbsInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsInference< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GibbsInference_double_addTarget" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      gum_GibbsInference_Sl_double_Sg__addTarget__SWIG_0(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsInference_double_addTarget__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsInference< double > *arg1 = (gum::GibbsInference< double > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GibbsInference_double_addTarget",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__GibbsInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsInference_double_addTarget" "', argument " "1"" of type '" "gum::GibbsInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsInference< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GibbsInference_double_addTarget" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GibbsInference_double_addTarget" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      gum_GibbsInference_Sl_double_Sg__addTarget__SWIG_1(arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsInference_double_addTarget(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__GibbsInferenceT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_GibbsInference_double_addTarget__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__GibbsInferenceT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GibbsInference_double_addTarget__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'GibbsInference_double_addTarget'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::GibbsInference< double >::addTarget(gum::NodeId const)\n"
    "    gum::GibbsInference< double >::addTarget(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_GibbsInference_double_eraseTarget__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsInference< double > *arg1 = (gum::GibbsInference< double > *) 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GibbsInference_double_eraseTarget",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__GibbsInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsInference_double_eraseTarget" "', argument " "1"" of type '" "gum::GibbsInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsInference< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GibbsInference_double_eraseTarget" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      gum_GibbsInference_Sl_double_Sg__eraseTarget__SWIG_0(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsInference_double_eraseTarget__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsInference< double > *arg1 = (gum::GibbsInference< double > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GibbsInference_double_eraseTarget",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__GibbsInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsInference_double_eraseTarget" "', argument " "1"" of type '" "gum::GibbsInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsInference< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GibbsInference_double_eraseTarget" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GibbsInference_double_eraseTarget" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      gum_GibbsInference_Sl_double_Sg__eraseTarget__SWIG_1(arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsInference_double_eraseTarget(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__GibbsInferenceT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_GibbsInference_double_eraseTarget__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__GibbsInferenceT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GibbsInference_double_eraseTarget__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'GibbsInference_double_eraseTarget'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::GibbsInference< double >::eraseTarget(gum::NodeId const)\n"
    "    gum::GibbsInference< double >::eraseTarget(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_GibbsInference_double_isTarget__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsInference< double > *arg1 = (gum::GibbsInference< double > *) 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GibbsInference_double_isTarget",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__GibbsInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsInference_double_isTarget" "', argument " "1"" of type '" "gum::GibbsInference< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsInference< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GibbsInference_double_isTarget" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (bool)gum_GibbsInference_Sl_double_Sg__isTarget__SWIG_0((gum::GibbsInference< double > const *)arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsInference_double_isTarget__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsInference< double > *arg1 = (gum::GibbsInference< double > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GibbsInference_double_isTarget",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__GibbsInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsInference_double_isTarget" "', argument " "1"" of type '" "gum::GibbsInference< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsInference< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GibbsInference_double_isTarget" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GibbsInference_double_isTarget" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)gum_GibbsInference_Sl_double_Sg__isTarget__SWIG_1((gum::GibbsInference< double > const *)arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsInference_double_isTarget(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__GibbsInferenceT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_GibbsInference_double_isTarget__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__GibbsInferenceT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GibbsInference_double_isTarget__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'GibbsInference_double_isTarget'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::GibbsInference< double >::isTarget(gum::NodeId const) const\n"
    "    gum::GibbsInference< double >::isTarget(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_GibbsInference_double_nbrTargets(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsInference< double > *arg1 = (gum::GibbsInference< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::Size result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GibbsInference_double_nbrTargets",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__GibbsInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsInference_double_nbrTargets" "', argument " "1"" of type '" "gum::GibbsInference< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsInference< double > * >(argp1);
  {
    try {
      result = (gum::Size)gum_GibbsInference_Sl_double_Sg__nbrTargets((gum::GibbsInference< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsInference_double_H__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsInference< double > *arg1 = (gum::GibbsInference< double > *) 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GibbsInference_double_H",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__GibbsInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsInference_double_H" "', argument " "1"" of type '" "gum::GibbsInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsInference< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GibbsInference_double_H" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (double)gum_GibbsInference_Sl_double_Sg__H__SWIG_0(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsInference_double_H__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsInference< double > *arg1 = (gum::GibbsInference< double > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GibbsInference_double_H",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__GibbsInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsInference_double_H" "', argument " "1"" of type '" "gum::GibbsInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsInference< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GibbsInference_double_H" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GibbsInference_double_H" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (double)gum_GibbsInference_Sl_double_Sg__H__SWIG_1(arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsInference_double_H(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__GibbsInferenceT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_GibbsInference_double_H__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__GibbsInferenceT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GibbsInference_double_H__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'GibbsInference_double_H'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::GibbsInference< double >::H(gum::NodeId const)\n"
    "    gum::GibbsInference< double >::H(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *GibbsInference_double_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gum__GibbsInferenceT_double_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_BruteForceKL_double__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::IBayesNet< double > *arg1 = 0 ;
  gum::IBayesNet< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::BruteForceKL< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_BruteForceKL_double",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_gum__IBayesNetT_double_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_BruteForceKL_double" "', argument " "1"" of type '" "gum::IBayesNet< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_BruteForceKL_double" "', argument " "1"" of type '" "gum::IBayesNet< double > const &""'"); 
  }
  arg1 = reinterpret_cast< gum::IBayesNet< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__IBayesNetT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_BruteForceKL_double" "', argument " "2"" of type '" "gum::IBayesNet< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_BruteForceKL_double" "', argument " "2"" of type '" "gum::IBayesNet< double > const &""'"); 
  }
  arg2 = reinterpret_cast< gum::IBayesNet< double > * >(argp2);
  {
    try {
      result = (gum::BruteForceKL< double > *)new gum::BruteForceKL< double >((gum::IBayesNet< double > const &)*arg1,(gum::IBayesNet< double > const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__BruteForceKLT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BruteForceKL_double__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::KL< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::BruteForceKL< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_BruteForceKL_double",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_gum__KLT_double_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_BruteForceKL_double" "', argument " "1"" of type '" "gum::KL< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_BruteForceKL_double" "', argument " "1"" of type '" "gum::KL< double > const &""'"); 
  }
  arg1 = reinterpret_cast< gum::KL< double > * >(argp1);
  {
    try {
      result = (gum::BruteForceKL< double > *)new gum::BruteForceKL< double >((gum::KL< double > const &)*arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__BruteForceKLT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BruteForceKL_double(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_gum__KLT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_BruteForceKL_double__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_gum__IBayesNetT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_gum__IBayesNetT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_BruteForceKL_double__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_BruteForceKL_double'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::BruteForceKL< double >::BruteForceKL(gum::IBayesNet< double > const &,gum::IBayesNet< double > const &)\n"
    "    gum::BruteForceKL< double >::BruteForceKL(gum::KL< double > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_BruteForceKL_double(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BruteForceKL< double > *arg1 = (gum::BruteForceKL< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_BruteForceKL_double",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BruteForceKLT_double_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_BruteForceKL_double" "', argument " "1"" of type '" "gum::BruteForceKL< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BruteForceKL< double > * >(argp1);
  {
    try {
      delete arg1;
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BruteForceKL_double_compute(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BruteForceKL< double > *arg1 = (gum::BruteForceKL< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BruteForceKL_double_compute",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__BruteForceKLT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BruteForceKL_double_compute" "', argument " "1"" of type '" "gum::BruteForceKL< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::BruteForceKL< double > * >(argp1);
  {
    try {
      result = (PyObject *)gum_BruteForceKL_Sl_double_Sg__compute(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *BruteForceKL_double_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gum__BruteForceKLT_double_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_GibbsKL_double__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::IBayesNet< double > *arg1 = 0 ;
  gum::IBayesNet< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::GibbsKL< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_GibbsKL_double",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_gum__IBayesNetT_double_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GibbsKL_double" "', argument " "1"" of type '" "gum::IBayesNet< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GibbsKL_double" "', argument " "1"" of type '" "gum::IBayesNet< double > const &""'"); 
  }
  arg1 = reinterpret_cast< gum::IBayesNet< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__IBayesNetT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_GibbsKL_double" "', argument " "2"" of type '" "gum::IBayesNet< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GibbsKL_double" "', argument " "2"" of type '" "gum::IBayesNet< double > const &""'"); 
  }
  arg2 = reinterpret_cast< gum::IBayesNet< double > * >(argp2);
  {
    try {
      result = (gum::GibbsKL< double > *)new gum::GibbsKL< double >((gum::IBayesNet< double > const &)*arg1,(gum::IBayesNet< double > const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__GibbsKLT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GibbsKL_double__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::KL< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::GibbsKL< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_GibbsKL_double",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_gum__KLT_double_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GibbsKL_double" "', argument " "1"" of type '" "gum::KL< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GibbsKL_double" "', argument " "1"" of type '" "gum::KL< double > const &""'"); 
  }
  arg1 = reinterpret_cast< gum::KL< double > * >(argp1);
  {
    try {
      result = (gum::GibbsKL< double > *)new gum::GibbsKL< double >((gum::KL< double > const &)*arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__GibbsKLT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GibbsKL_double(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_gum__KLT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_GibbsKL_double__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_gum__IBayesNetT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_gum__IBayesNetT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_GibbsKL_double__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_GibbsKL_double'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::GibbsKL< double >::GibbsKL(gum::IBayesNet< double > const &,gum::IBayesNet< double > const &)\n"
    "    gum::GibbsKL< double >::GibbsKL(gum::KL< double > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_GibbsKL_double(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsKL< double > *arg1 = (gum::GibbsKL< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_GibbsKL_double",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__GibbsKLT_double_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GibbsKL_double" "', argument " "1"" of type '" "gum::GibbsKL< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsKL< double > * >(argp1);
  {
    try {
      delete arg1;
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsKL_double_compute(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsKL< double > *arg1 = (gum::GibbsKL< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GibbsKL_double_compute",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__GibbsKLT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsKL_double_compute" "', argument " "1"" of type '" "gum::GibbsKL< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsKL< double > * >(argp1);
  {
    try {
      result = (PyObject *)gum_GibbsKL_Sl_double_Sg__compute(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsKL_double_setVerbosity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsKL< double > *arg1 = (gum::GibbsKL< double > *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GibbsKL_double_setVerbosity",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__GibbsKLT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsKL_double_setVerbosity" "', argument " "1"" of type '" "gum::GibbsKL< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsKL< double > * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GibbsKL_double_setVerbosity" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      gum_GibbsKL_Sl_double_Sg__setVerbosity(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsKL_double_setEpsilon(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsKL< double > *arg1 = (gum::GibbsKL< double > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GibbsKL_double_setEpsilon",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__GibbsKLT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsKL_double_setEpsilon" "', argument " "1"" of type '" "gum::GibbsKL< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsKL< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GibbsKL_double_setEpsilon" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      gum_GibbsKL_Sl_double_Sg__setEpsilon(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsKL_double_setMinEpsilonRate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsKL< double > *arg1 = (gum::GibbsKL< double > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GibbsKL_double_setMinEpsilonRate",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__GibbsKLT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsKL_double_setMinEpsilonRate" "', argument " "1"" of type '" "gum::GibbsKL< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsKL< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GibbsKL_double_setMinEpsilonRate" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      gum_GibbsKL_Sl_double_Sg__setMinEpsilonRate(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsKL_double_setMaxIter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsKL< double > *arg1 = (gum::GibbsKL< double > *) 0 ;
  gum::Size arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GibbsKL_double_setMaxIter",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__GibbsKLT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsKL_double_setMaxIter" "', argument " "1"" of type '" "gum::GibbsKL< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsKL< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GibbsKL_double_setMaxIter" "', argument " "2"" of type '" "gum::Size""'");
  } 
  arg2 = static_cast< gum::Size >(val2);
  {
    try {
      gum_GibbsKL_Sl_double_Sg__setMaxIter(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsKL_double_setMaxTime(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsKL< double > *arg1 = (gum::GibbsKL< double > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GibbsKL_double_setMaxTime",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__GibbsKLT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsKL_double_setMaxTime" "', argument " "1"" of type '" "gum::GibbsKL< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsKL< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GibbsKL_double_setMaxTime" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      gum_GibbsKL_Sl_double_Sg__setMaxTime(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsKL_double_setPeriodSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsKL< double > *arg1 = (gum::GibbsKL< double > *) 0 ;
  gum::Size arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GibbsKL_double_setPeriodSize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__GibbsKLT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsKL_double_setPeriodSize" "', argument " "1"" of type '" "gum::GibbsKL< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsKL< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GibbsKL_double_setPeriodSize" "', argument " "2"" of type '" "gum::Size""'");
  } 
  arg2 = static_cast< gum::Size >(val2);
  {
    try {
      gum_GibbsKL_Sl_double_Sg__setPeriodSize(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsKL_double_setBurnIn(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsKL< double > *arg1 = (gum::GibbsKL< double > *) 0 ;
  gum::Size arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GibbsKL_double_setBurnIn",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__GibbsKLT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsKL_double_setBurnIn" "', argument " "1"" of type '" "gum::GibbsKL< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsKL< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GibbsKL_double_setBurnIn" "', argument " "2"" of type '" "gum::Size""'");
  } 
  arg2 = static_cast< gum::Size >(val2);
  {
    try {
      gum_GibbsKL_Sl_double_Sg__setBurnIn(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsKL_double_verbosity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsKL< double > *arg1 = (gum::GibbsKL< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GibbsKL_double_verbosity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__GibbsKLT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsKL_double_verbosity" "', argument " "1"" of type '" "gum::GibbsKL< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsKL< double > * >(argp1);
  {
    try {
      result = (bool)gum_GibbsKL_Sl_double_Sg__verbosity((gum::GibbsKL< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsKL_double_epsilon(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsKL< double > *arg1 = (gum::GibbsKL< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GibbsKL_double_epsilon",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__GibbsKLT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsKL_double_epsilon" "', argument " "1"" of type '" "gum::GibbsKL< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsKL< double > * >(argp1);
  {
    try {
      result = (double)gum_GibbsKL_Sl_double_Sg__epsilon((gum::GibbsKL< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsKL_double_minEpsilonRate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsKL< double > *arg1 = (gum::GibbsKL< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GibbsKL_double_minEpsilonRate",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__GibbsKLT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsKL_double_minEpsilonRate" "', argument " "1"" of type '" "gum::GibbsKL< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsKL< double > * >(argp1);
  {
    try {
      result = (double)gum_GibbsKL_Sl_double_Sg__minEpsilonRate((gum::GibbsKL< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsKL_double_maxIter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsKL< double > *arg1 = (gum::GibbsKL< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::Size result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GibbsKL_double_maxIter",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__GibbsKLT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsKL_double_maxIter" "', argument " "1"" of type '" "gum::GibbsKL< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsKL< double > * >(argp1);
  {
    try {
      result = (gum::Size)gum_GibbsKL_Sl_double_Sg__maxIter((gum::GibbsKL< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsKL_double_maxTime(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsKL< double > *arg1 = (gum::GibbsKL< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GibbsKL_double_maxTime",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__GibbsKLT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsKL_double_maxTime" "', argument " "1"" of type '" "gum::GibbsKL< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsKL< double > * >(argp1);
  {
    try {
      result = (double)gum_GibbsKL_Sl_double_Sg__maxTime((gum::GibbsKL< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsKL_double_periodSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsKL< double > *arg1 = (gum::GibbsKL< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::Size result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GibbsKL_double_periodSize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__GibbsKLT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsKL_double_periodSize" "', argument " "1"" of type '" "gum::GibbsKL< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsKL< double > * >(argp1);
  {
    try {
      result = (gum::Size)gum_GibbsKL_Sl_double_Sg__periodSize((gum::GibbsKL< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsKL_double_burnIn(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsKL< double > *arg1 = (gum::GibbsKL< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::Size result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GibbsKL_double_burnIn",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__GibbsKLT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsKL_double_burnIn" "', argument " "1"" of type '" "gum::GibbsKL< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsKL< double > * >(argp1);
  {
    try {
      result = (gum::Size)gum_GibbsKL_Sl_double_Sg__burnIn((gum::GibbsKL< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsKL_double_nbrIterations(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsKL< double > *arg1 = (gum::GibbsKL< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::Size result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GibbsKL_double_nbrIterations",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__GibbsKLT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsKL_double_nbrIterations" "', argument " "1"" of type '" "gum::GibbsKL< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsKL< double > * >(argp1);
  {
    try {
      result = (gum::Size)gum_GibbsKL_Sl_double_Sg__nbrIterations((gum::GibbsKL< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsKL_double_currentTime(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsKL< double > *arg1 = (gum::GibbsKL< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GibbsKL_double_currentTime",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__GibbsKLT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsKL_double_currentTime" "', argument " "1"" of type '" "gum::GibbsKL< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsKL< double > * >(argp1);
  {
    try {
      result = (double)gum_GibbsKL_Sl_double_Sg__currentTime((gum::GibbsKL< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsKL_double_messageApproximationScheme(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsKL< double > *arg1 = (gum::GibbsKL< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GibbsKL_double_messageApproximationScheme",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__GibbsKLT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsKL_double_messageApproximationScheme" "', argument " "1"" of type '" "gum::GibbsKL< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsKL< double > * >(argp1);
  {
    try {
      result = gum_GibbsKL_Sl_double_Sg__messageApproximationScheme((gum::GibbsKL< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GibbsKL_double_history(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::GibbsKL< double > *arg1 = (gum::GibbsKL< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double,std::allocator< double > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GibbsKL_double_history",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__GibbsKLT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GibbsKL_double_history" "', argument " "1"" of type '" "gum::GibbsKL< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::GibbsKL< double > * >(argp1);
  {
    try {
      result = (std::vector< double,std::allocator< double > > *) &gum_GibbsKL_Sl_double_Sg__history((gum::GibbsKL< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< double,std::allocator< double > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *GibbsKL_double_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gum__GibbsKLT_double_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_CredalNet_double__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::credal::CredalNet< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_CredalNet_double")) SWIG_fail;
  {
    try {
      result = (gum::credal::CredalNet< double > *)new gum::credal::CredalNet< double >();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__credal__CredalNetT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CredalNet_double__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::credal::CredalNet< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_CredalNet_double",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CredalNet_double" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CredalNet_double" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_CredalNet_double" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CredalNet_double" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (gum::credal::CredalNet< double > *)new gum::credal::CredalNet< double >((std::string const &)*arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__credal__CredalNetT_double_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CredalNet_double__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  gum::credal::CredalNet< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_CredalNet_double",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CredalNet_double" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CredalNet_double" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (gum::credal::CredalNet< double > *)new gum::credal::CredalNet< double >((std::string const &)*arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__credal__CredalNetT_double_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CredalNet_double__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  gum::BayesNet< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::credal::CredalNet< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_CredalNet_double",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_gum__BayesNetT_double_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CredalNet_double" "', argument " "1"" of type '" "gum::BayesNet< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CredalNet_double" "', argument " "1"" of type '" "gum::BayesNet< double > const &""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__BayesNetT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_CredalNet_double" "', argument " "2"" of type '" "gum::BayesNet< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CredalNet_double" "', argument " "2"" of type '" "gum::BayesNet< double > const &""'"); 
  }
  arg2 = reinterpret_cast< gum::BayesNet< double > * >(argp2);
  {
    try {
      result = (gum::credal::CredalNet< double > *)new gum::credal::CredalNet< double >((gum::BayesNet< double > const &)*arg1,(gum::BayesNet< double > const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__credal__CredalNetT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CredalNet_double__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::BayesNet< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::credal::CredalNet< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_CredalNet_double",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_gum__BayesNetT_double_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CredalNet_double" "', argument " "1"" of type '" "gum::BayesNet< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CredalNet_double" "', argument " "1"" of type '" "gum::BayesNet< double > const &""'"); 
  }
  arg1 = reinterpret_cast< gum::BayesNet< double > * >(argp1);
  {
    try {
      result = (gum::credal::CredalNet< double > *)new gum::credal::CredalNet< double >((gum::BayesNet< double > const &)*arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__credal__CredalNetT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CredalNet_double(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_CredalNet_double__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_gum__BayesNetT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_CredalNet_double__SWIG_4(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_CredalNet_double__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_gum__BayesNetT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_gum__BayesNetT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_CredalNet_double__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_CredalNet_double__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_CredalNet_double'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::credal::CredalNet< double >::CredalNet()\n"
    "    gum::credal::CredalNet< double >::CredalNet(std::string const &,std::string const &)\n"
    "    gum::credal::CredalNet< double >::CredalNet(std::string const &)\n"
    "    gum::credal::CredalNet< double >::CredalNet(gum::BayesNet< double > const &,gum::BayesNet< double > const &)\n"
    "    gum::credal::CredalNet< double >::CredalNet(gum::BayesNet< double > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_CredalNet_double(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::credal::CredalNet< double > *arg1 = (gum::credal::CredalNet< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_CredalNet_double",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__credal__CredalNetT_double_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CredalNet_double" "', argument " "1"" of type '" "gum::credal::CredalNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::credal::CredalNet< double > * >(argp1);
  {
    try {
      delete arg1;
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CredalNet_double_addNode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::credal::CredalNet< double > *arg1 = (gum::credal::CredalNet< double > *) 0 ;
  std::string *arg2 = 0 ;
  gum::Size *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  gum::Size temp3 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  gum::NodeId result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CredalNet_double_addNode",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__credal__CredalNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CredalNet_double_addNode" "', argument " "1"" of type '" "gum::credal::CredalNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::credal::CredalNet< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CredalNet_double_addNode" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CredalNet_double_addNode" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CredalNet_double_addNode" "', argument " "3"" of type '" "gum::Size""'");
  } 
  temp3 = static_cast< gum::Size >(val3);
  arg3 = &temp3;
  {
    try {
      result = (gum::NodeId)(arg1)->addNode((std::string const &)*arg2,(gum::Size const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CredalNet_double_addArc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::credal::CredalNet< double > *arg1 = (gum::credal::CredalNet< double > *) 0 ;
  gum::NodeId *arg2 = 0 ;
  gum::NodeId *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gum::NodeId temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  gum::NodeId temp3 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CredalNet_double_addArc",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__credal__CredalNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CredalNet_double_addArc" "', argument " "1"" of type '" "gum::credal::CredalNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::credal::CredalNet< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CredalNet_double_addArc" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  temp2 = static_cast< gum::NodeId >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CredalNet_double_addArc" "', argument " "3"" of type '" "gum::NodeId""'");
  } 
  temp3 = static_cast< gum::NodeId >(val3);
  arg3 = &temp3;
  {
    try {
      (arg1)->addArc((gum::NodeId const &)*arg2,(gum::NodeId const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CredalNet_double_setCPTs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::credal::CredalNet< double > *arg1 = (gum::credal::CredalNet< double > *) 0 ;
  gum::NodeId *arg2 = 0 ;
  std::vector< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >,std::allocator< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gum::NodeId temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CredalNet_double_setCPTs",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__credal__CredalNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CredalNet_double_setCPTs" "', argument " "1"" of type '" "gum::credal::CredalNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::credal::CredalNet< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CredalNet_double_setCPTs" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  temp2 = static_cast< gum::NodeId >(val2);
  arg2 = &temp2;
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_t_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CredalNet_double_setCPTs" "', argument " "3"" of type '" "std::vector< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >,std::allocator< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > > > const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CredalNet_double_setCPTs" "', argument " "3"" of type '" "std::vector< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >,std::allocator< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > > > const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >,std::allocator< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > > > * >(argp3);
  {
    try {
      (arg1)->setCPTs((gum::NodeId const &)*arg2,(std::vector< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >,std::allocator< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > > > const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CredalNet_double_setCPT__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::credal::CredalNet< double > *arg1 = (gum::credal::CredalNet< double > *) 0 ;
  gum::NodeId *arg2 = 0 ;
  gum::Size *arg3 = 0 ;
  std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gum::NodeId temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:CredalNet_double_setCPT",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__credal__CredalNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CredalNet_double_setCPT" "', argument " "1"" of type '" "gum::credal::CredalNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::credal::CredalNet< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CredalNet_double_setCPT" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  temp2 = static_cast< gum::NodeId >(val2);
  arg2 = &temp2;
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_unsigned_long,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CredalNet_double_setCPT" "', argument " "3"" of type '" "gum::Size &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CredalNet_double_setCPT" "', argument " "3"" of type '" "gum::Size &""'"); 
  }
  arg3 = reinterpret_cast< gum::Size * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CredalNet_double_setCPT" "', argument " "4"" of type '" "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CredalNet_double_setCPT" "', argument " "4"" of type '" "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > const &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > * >(argp4);
  {
    try {
      (arg1)->setCPT((gum::NodeId const &)*arg2,*arg3,(std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > const &)*arg4);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CredalNet_double_setCPT__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::credal::CredalNet< double > *arg1 = (gum::credal::CredalNet< double > *) 0 ;
  gum::NodeId *arg2 = 0 ;
  gum::Instantiation arg3 ;
  std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gum::NodeId temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:CredalNet_double_setCPT",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__credal__CredalNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CredalNet_double_setCPT" "', argument " "1"" of type '" "gum::credal::CredalNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::credal::CredalNet< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CredalNet_double_setCPT" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  temp2 = static_cast< gum::NodeId >(val2);
  arg2 = &temp2;
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_gum__Instantiation,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CredalNet_double_setCPT" "', argument " "3"" of type '" "gum::Instantiation""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CredalNet_double_setCPT" "', argument " "3"" of type '" "gum::Instantiation""'");
    } else {
      gum::Instantiation * temp = reinterpret_cast< gum::Instantiation * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CredalNet_double_setCPT" "', argument " "4"" of type '" "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CredalNet_double_setCPT" "', argument " "4"" of type '" "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > const &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > * >(argp4);
  {
    try {
      (arg1)->setCPT((gum::NodeId const &)*arg2,arg3,(std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > const &)*arg4);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CredalNet_double_setCPT(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__credal__CredalNetT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_unsigned_long, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_CredalNet_double_setCPT__SWIG_0(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__credal__CredalNetT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_gum__Instantiation, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_CredalNet_double_setCPT__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'CredalNet_double_setCPT'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::credal::CredalNet< double >::setCPT(gum::NodeId const &,gum::Size &,std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > const &)\n"
    "    gum::credal::CredalNet< double >::setCPT(gum::NodeId const &,gum::Instantiation,std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_CredalNet_double_fillConstraints(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::credal::CredalNet< double > *arg1 = (gum::credal::CredalNet< double > *) 0 ;
  gum::NodeId *arg2 = 0 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  std::vector< double,std::allocator< double > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gum::NodeId temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:CredalNet_double_fillConstraints",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__credal__CredalNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CredalNet_double_fillConstraints" "', argument " "1"" of type '" "gum::credal::CredalNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::credal::CredalNet< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CredalNet_double_fillConstraints" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  temp2 = static_cast< gum::NodeId >(val2);
  arg2 = &temp2;
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CredalNet_double_fillConstraints" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CredalNet_double_fillConstraints" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CredalNet_double_fillConstraints" "', argument " "4"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CredalNet_double_fillConstraints" "', argument " "4"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      (arg1)->fillConstraints((gum::NodeId const &)*arg2,(std::vector< double,std::allocator< double > > const &)*arg3,(std::vector< double,std::allocator< double > > const &)*arg4);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CredalNet_double_fillConstraint__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::credal::CredalNet< double > *arg1 = (gum::credal::CredalNet< double > *) 0 ;
  gum::NodeId *arg2 = 0 ;
  gum::Idx *arg3 = 0 ;
  std::vector< double,std::allocator< double > > *arg4 = 0 ;
  std::vector< double,std::allocator< double > > *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gum::NodeId temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  gum::Idx temp3 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  int res5 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:CredalNet_double_fillConstraint",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__credal__CredalNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CredalNet_double_fillConstraint" "', argument " "1"" of type '" "gum::credal::CredalNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::credal::CredalNet< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CredalNet_double_fillConstraint" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  temp2 = static_cast< gum::NodeId >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_unsigned_SS_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CredalNet_double_fillConstraint" "', argument " "3"" of type '" "gum::Idx""'");
  } 
  temp3 = static_cast< gum::Idx >(val3);
  arg3 = &temp3;
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CredalNet_double_fillConstraint" "', argument " "4"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CredalNet_double_fillConstraint" "', argument " "4"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg4 = ptr;
  }
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res5 = swig::asptr(obj4, &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CredalNet_double_fillConstraint" "', argument " "5"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CredalNet_double_fillConstraint" "', argument " "5"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg5 = ptr;
  }
  {
    try {
      (arg1)->fillConstraint((gum::NodeId const &)*arg2,(gum::Idx const &)*arg3,(std::vector< double,std::allocator< double > > const &)*arg4,(std::vector< double,std::allocator< double > > const &)*arg5);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CredalNet_double_fillConstraint__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::credal::CredalNet< double > *arg1 = (gum::credal::CredalNet< double > *) 0 ;
  gum::NodeId *arg2 = 0 ;
  gum::Instantiation arg3 ;
  std::vector< double,std::allocator< double > > *arg4 = 0 ;
  std::vector< double,std::allocator< double > > *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gum::NodeId temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  int res5 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:CredalNet_double_fillConstraint",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__credal__CredalNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CredalNet_double_fillConstraint" "', argument " "1"" of type '" "gum::credal::CredalNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::credal::CredalNet< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CredalNet_double_fillConstraint" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  temp2 = static_cast< gum::NodeId >(val2);
  arg2 = &temp2;
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_gum__Instantiation,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CredalNet_double_fillConstraint" "', argument " "3"" of type '" "gum::Instantiation""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CredalNet_double_fillConstraint" "', argument " "3"" of type '" "gum::Instantiation""'");
    } else {
      gum::Instantiation * temp = reinterpret_cast< gum::Instantiation * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CredalNet_double_fillConstraint" "', argument " "4"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CredalNet_double_fillConstraint" "', argument " "4"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg4 = ptr;
  }
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res5 = swig::asptr(obj4, &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CredalNet_double_fillConstraint" "', argument " "5"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CredalNet_double_fillConstraint" "', argument " "5"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg5 = ptr;
  }
  {
    try {
      (arg1)->fillConstraint((gum::NodeId const &)*arg2,arg3,(std::vector< double,std::allocator< double > > const &)*arg4,(std::vector< double,std::allocator< double > > const &)*arg5);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CredalNet_double_fillConstraint(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__credal__CredalNetT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_gum__Instantiation, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< double,std::allocator< double > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = swig::asptr(argv[4], (std::vector< double,std::allocator< double > >**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_CredalNet_double_fillConstraint__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__credal__CredalNetT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< double,std::allocator< double > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = swig::asptr(argv[4], (std::vector< double,std::allocator< double > >**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_CredalNet_double_fillConstraint__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'CredalNet_double_fillConstraint'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::credal::CredalNet< double >::fillConstraint(gum::NodeId const &,gum::Idx const &,std::vector< double,std::allocator< double > > const &,std::vector< double,std::allocator< double > > const &)\n"
    "    gum::credal::CredalNet< double >::fillConstraint(gum::NodeId const &,gum::Instantiation,std::vector< double,std::allocator< double > > const &,std::vector< double,std::allocator< double > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_CredalNet_double_instantiation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::credal::CredalNet< double > *arg1 = (gum::credal::CredalNet< double > *) 0 ;
  gum::NodeId *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gum::NodeId temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::Instantiation result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CredalNet_double_instantiation",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__credal__CredalNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CredalNet_double_instantiation" "', argument " "1"" of type '" "gum::credal::CredalNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::credal::CredalNet< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CredalNet_double_instantiation" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  temp2 = static_cast< gum::NodeId >(val2);
  arg2 = &temp2;
  {
    try {
      result = (arg1)->instantiation((gum::NodeId const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::Instantiation(static_cast< const gum::Instantiation& >(result))), SWIGTYPE_p_gum__Instantiation, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CredalNet_double_domainSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::credal::CredalNet< double > *arg1 = (gum::credal::CredalNet< double > *) 0 ;
  gum::NodeId *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gum::NodeId temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::Size result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CredalNet_double_domainSize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__credal__CredalNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CredalNet_double_domainSize" "', argument " "1"" of type '" "gum::credal::CredalNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::credal::CredalNet< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CredalNet_double_domainSize" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  temp2 = static_cast< gum::NodeId >(val2);
  arg2 = &temp2;
  {
    try {
      result = (gum::Size)(arg1)->domainSize((gum::NodeId const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CredalNet_double_bnToCredal__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::credal::CredalNet< double > *arg1 = (gum::credal::CredalNet< double > *) 0 ;
  double arg2 ;
  bool arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:CredalNet_double_bnToCredal",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__credal__CredalNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CredalNet_double_bnToCredal" "', argument " "1"" of type '" "gum::credal::CredalNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::credal::CredalNet< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CredalNet_double_bnToCredal" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CredalNet_double_bnToCredal" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CredalNet_double_bnToCredal" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  {
    try {
      (arg1)->bnToCredal(arg2,arg3,arg4);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CredalNet_double_bnToCredal__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::credal::CredalNet< double > *arg1 = (gum::credal::CredalNet< double > *) 0 ;
  double arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CredalNet_double_bnToCredal",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__credal__CredalNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CredalNet_double_bnToCredal" "', argument " "1"" of type '" "gum::credal::CredalNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::credal::CredalNet< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CredalNet_double_bnToCredal" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CredalNet_double_bnToCredal" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->bnToCredal(arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CredalNet_double_bnToCredal(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__credal__CredalNetT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_CredalNet_double_bnToCredal__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__credal__CredalNetT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_CredalNet_double_bnToCredal__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'CredalNet_double_bnToCredal'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::credal::CredalNet< double >::bnToCredal(double const,bool const,bool const)\n"
    "    gum::credal::CredalNet< double >::bnToCredal(double const,bool const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_CredalNet_double_intervalToCredalWithFiles(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::credal::CredalNet< double > *arg1 = (gum::credal::CredalNet< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CredalNet_double_intervalToCredalWithFiles",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__credal__CredalNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CredalNet_double_intervalToCredalWithFiles" "', argument " "1"" of type '" "gum::credal::CredalNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::credal::CredalNet< double > * >(argp1);
  {
    try {
      (arg1)->intervalToCredalWithFiles();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CredalNet_double_intervalToCredal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::credal::CredalNet< double > *arg1 = (gum::credal::CredalNet< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CredalNet_double_intervalToCredal",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__credal__CredalNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CredalNet_double_intervalToCredal" "', argument " "1"" of type '" "gum::credal::CredalNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::credal::CredalNet< double > * >(argp1);
  {
    try {
      (arg1)->intervalToCredal();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CredalNet_double_lagrangeNormalization(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::credal::CredalNet< double > *arg1 = (gum::credal::CredalNet< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CredalNet_double_lagrangeNormalization",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__credal__CredalNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CredalNet_double_lagrangeNormalization" "', argument " "1"" of type '" "gum::credal::CredalNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::credal::CredalNet< double > * >(argp1);
  {
    try {
      (arg1)->lagrangeNormalization();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CredalNet_double_idmLearning__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::credal::CredalNet< double > *arg1 = (gum::credal::CredalNet< double > *) 0 ;
  gum::Idx arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CredalNet_double_idmLearning",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__credal__CredalNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CredalNet_double_idmLearning" "', argument " "1"" of type '" "gum::credal::CredalNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::credal::CredalNet< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CredalNet_double_idmLearning" "', argument " "2"" of type '" "gum::Idx""'");
  } 
  arg2 = static_cast< gum::Idx >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CredalNet_double_idmLearning" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->idmLearning(arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CredalNet_double_idmLearning__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::credal::CredalNet< double > *arg1 = (gum::credal::CredalNet< double > *) 0 ;
  gum::Idx arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CredalNet_double_idmLearning",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__credal__CredalNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CredalNet_double_idmLearning" "', argument " "1"" of type '" "gum::credal::CredalNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::credal::CredalNet< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CredalNet_double_idmLearning" "', argument " "2"" of type '" "gum::Idx""'");
  } 
  arg2 = static_cast< gum::Idx >(val2);
  {
    try {
      (arg1)->idmLearning(arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CredalNet_double_idmLearning__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::credal::CredalNet< double > *arg1 = (gum::credal::CredalNet< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CredalNet_double_idmLearning",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__credal__CredalNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CredalNet_double_idmLearning" "', argument " "1"" of type '" "gum::credal::CredalNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::credal::CredalNet< double > * >(argp1);
  {
    try {
      (arg1)->idmLearning();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CredalNet_double_idmLearning(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__credal__CredalNetT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_CredalNet_double_idmLearning__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__credal__CredalNetT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_CredalNet_double_idmLearning__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__credal__CredalNetT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_CredalNet_double_idmLearning__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'CredalNet_double_idmLearning'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::credal::CredalNet< double >::idmLearning(gum::Idx const,bool const)\n"
    "    gum::credal::CredalNet< double >::idmLearning(gum::Idx const)\n"
    "    gum::credal::CredalNet< double >::idmLearning()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_CredalNet_double_approximatedBinarization(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::credal::CredalNet< double > *arg1 = (gum::credal::CredalNet< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CredalNet_double_approximatedBinarization",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__credal__CredalNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CredalNet_double_approximatedBinarization" "', argument " "1"" of type '" "gum::credal::CredalNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::credal::CredalNet< double > * >(argp1);
  {
    try {
      (arg1)->approximatedBinarization();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CredalNet_double_saveBNsMinMax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::credal::CredalNet< double > *arg1 = (gum::credal::CredalNet< double > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CredalNet_double_saveBNsMinMax",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__credal__CredalNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CredalNet_double_saveBNsMinMax" "', argument " "1"" of type '" "gum::credal::CredalNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::credal::CredalNet< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CredalNet_double_saveBNsMinMax" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CredalNet_double_saveBNsMinMax" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CredalNet_double_saveBNsMinMax" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CredalNet_double_saveBNsMinMax" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      ((gum::credal::CredalNet< double > const *)arg1)->saveBNsMinMax((std::string const &)*arg2,(std::string const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CredalNet_double___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::credal::CredalNet< double > *arg1 = (gum::credal::CredalNet< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CredalNet_double___str__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__credal__CredalNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CredalNet_double___str__" "', argument " "1"" of type '" "gum::credal::CredalNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::credal::CredalNet< double > * >(argp1);
  {
    try {
      result = ((gum::credal::CredalNet< double > const *)arg1)->toString();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CredalNet_double_computeCPTMinMax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::credal::CredalNet< double > *arg1 = (gum::credal::CredalNet< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CredalNet_double_computeCPTMinMax",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__credal__CredalNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CredalNet_double_computeCPTMinMax" "', argument " "1"" of type '" "gum::credal::CredalNet< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::credal::CredalNet< double > * >(argp1);
  {
    try {
      (arg1)->computeCPTMinMax();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CredalNet_double_src_bn(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::credal::CredalNet< double > *arg1 = (gum::credal::CredalNet< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::BayesNet< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CredalNet_double_src_bn",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__credal__CredalNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CredalNet_double_src_bn" "', argument " "1"" of type '" "gum::credal::CredalNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::credal::CredalNet< double > * >(argp1);
  {
    try {
      result = (gum::BayesNet< double > *) &((gum::credal::CredalNet< double > const *)arg1)->src_bn();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CredalNet_double_current_bn(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::credal::CredalNet< double > *arg1 = (gum::credal::CredalNet< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::BayesNet< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CredalNet_double_current_bn",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__credal__CredalNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CredalNet_double_current_bn" "', argument " "1"" of type '" "gum::credal::CredalNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::credal::CredalNet< double > * >(argp1);
  {
    try {
      result = (gum::BayesNet< double > *) &((gum::credal::CredalNet< double > const *)arg1)->current_bn();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__BayesNetT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CredalNet_double_credalNet_currentCpt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::credal::CredalNet< double > *arg1 = (gum::credal::CredalNet< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::NodeProperty< std::vector< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >,std::allocator< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CredalNet_double_credalNet_currentCpt",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__credal__CredalNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CredalNet_double_credalNet_currentCpt" "', argument " "1"" of type '" "gum::credal::CredalNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::credal::CredalNet< double > * >(argp1);
  {
    try {
      result = (gum::NodeProperty< std::vector< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >,std::allocator< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > > > > *) &((gum::credal::CredalNet< double > const *)arg1)->credalNet_currentCpt();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NodePropertyT_std__vectorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_t_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CredalNet_double_credalNet_srcCpt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::credal::CredalNet< double > *arg1 = (gum::credal::CredalNet< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::NodeProperty< std::vector< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >,std::allocator< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CredalNet_double_credalNet_srcCpt",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__credal__CredalNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CredalNet_double_credalNet_srcCpt" "', argument " "1"" of type '" "gum::credal::CredalNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::credal::CredalNet< double > * >(argp1);
  {
    try {
      result = (gum::NodeProperty< std::vector< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >,std::allocator< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > > > > *) &((gum::credal::CredalNet< double > const *)arg1)->credalNet_srcCpt();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NodePropertyT_std__vectorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_t_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CredalNet_double_currentNodeType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::credal::CredalNet< double > *arg1 = (gum::credal::CredalNet< double > *) 0 ;
  gum::NodeId *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gum::NodeId temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::credal::CredalNet< double >::NodeType result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CredalNet_double_currentNodeType",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__credal__CredalNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CredalNet_double_currentNodeType" "', argument " "1"" of type '" "gum::credal::CredalNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::credal::CredalNet< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CredalNet_double_currentNodeType" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  temp2 = static_cast< gum::NodeId >(val2);
  arg2 = &temp2;
  {
    try {
      result = (gum::credal::CredalNet< double >::NodeType)((gum::credal::CredalNet< double > const *)arg1)->currentNodeType((gum::NodeId const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CredalNet_double_nodeType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::credal::CredalNet< double > *arg1 = (gum::credal::CredalNet< double > *) 0 ;
  gum::NodeId *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gum::NodeId temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::credal::CredalNet< double >::NodeType result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CredalNet_double_nodeType",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__credal__CredalNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CredalNet_double_nodeType" "', argument " "1"" of type '" "gum::credal::CredalNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::credal::CredalNet< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CredalNet_double_nodeType" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  temp2 = static_cast< gum::NodeId >(val2);
  arg2 = &temp2;
  {
    try {
      result = (gum::credal::CredalNet< double >::NodeType)((gum::credal::CredalNet< double > const *)arg1)->nodeType((gum::NodeId const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CredalNet_double_epsilonMin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::credal::CredalNet< double > *arg1 = (gum::credal::CredalNet< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CredalNet_double_epsilonMin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__credal__CredalNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CredalNet_double_epsilonMin" "', argument " "1"" of type '" "gum::credal::CredalNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::credal::CredalNet< double > * >(argp1);
  {
    try {
      result = (double *) &((gum::credal::CredalNet< double > const *)arg1)->epsilonMin();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CredalNet_double_epsilonMax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::credal::CredalNet< double > *arg1 = (gum::credal::CredalNet< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CredalNet_double_epsilonMax",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__credal__CredalNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CredalNet_double_epsilonMax" "', argument " "1"" of type '" "gum::credal::CredalNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::credal::CredalNet< double > * >(argp1);
  {
    try {
      result = (double *) &((gum::credal::CredalNet< double > const *)arg1)->epsilonMax();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CredalNet_double_epsilonMean(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::credal::CredalNet< double > *arg1 = (gum::credal::CredalNet< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CredalNet_double_epsilonMean",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__credal__CredalNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CredalNet_double_epsilonMean" "', argument " "1"" of type '" "gum::credal::CredalNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::credal::CredalNet< double > * >(argp1);
  {
    try {
      result = (double *) &((gum::credal::CredalNet< double > const *)arg1)->epsilonMean();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CredalNet_double_isSeparatelySpecified(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::credal::CredalNet< double > *arg1 = (gum::credal::CredalNet< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CredalNet_double_isSeparatelySpecified",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__credal__CredalNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CredalNet_double_isSeparatelySpecified" "', argument " "1"" of type '" "gum::credal::CredalNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::credal::CredalNet< double > * >(argp1);
  {
    try {
      result = (bool)((gum::credal::CredalNet< double > const *)arg1)->isSeparatelySpecified();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CredalNet_double_hasComputedCPTMinMax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::credal::CredalNet< double > *arg1 = (gum::credal::CredalNet< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CredalNet_double_hasComputedCPTMinMax",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__credal__CredalNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CredalNet_double_hasComputedCPTMinMax" "', argument " "1"" of type '" "gum::credal::CredalNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::credal::CredalNet< double > * >(argp1);
  {
    try {
      result = (bool)((gum::credal::CredalNet< double > const *)arg1)->hasComputedCPTMinMax();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CredalNet_double_get_CPT_min(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::credal::CredalNet< double > *arg1 = (gum::credal::CredalNet< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CredalNet_double_get_CPT_min",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__credal__CredalNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CredalNet_double_get_CPT_min" "', argument " "1"" of type '" "gum::credal::CredalNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::credal::CredalNet< double > * >(argp1);
  {
    try {
      result = (std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *) &((gum::credal::CredalNet< double > const *)arg1)->get_CPT_min();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CredalNet_double_get_CPT_max(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::credal::CredalNet< double > *arg1 = (gum::credal::CredalNet< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CredalNet_double_get_CPT_max",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__credal__CredalNetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CredalNet_double_get_CPT_max" "', argument " "1"" of type '" "gum::credal::CredalNet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::credal::CredalNet< double > * >(argp1);
  {
    try {
      result = (std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *) &((gum::credal::CredalNet< double > const *)arg1)->get_CPT_max();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *CredalNet_double_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gum__credal__CredalNetT_double_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_CNMonteCarloSampling_double(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::credal::CredalNet< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_CNMonteCarloSampling_double",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_gum__credal__CredalNetT_double_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CNMonteCarloSampling_double" "', argument " "1"" of type '" "gum::credal::CredalNet< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CNMonteCarloSampling_double" "', argument " "1"" of type '" "gum::credal::CredalNet< double > const &""'"); 
  }
  arg1 = reinterpret_cast< gum::credal::CredalNet< double > * >(argp1);
  {
    try {
      result = (gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > *)new gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > >((gum::credal::CredalNet< double > const &)*arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__credal__CNMonteCarloSamplingT_double_gum__LazyPropagationT_double_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_CNMonteCarloSampling_double(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > *arg1 = (gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_CNMonteCarloSampling_double",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__credal__CNMonteCarloSamplingT_double_gum__LazyPropagationT_double_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CNMonteCarloSampling_double" "', argument " "1"" of type '" "gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > *""'"); 
  }
  arg1 = reinterpret_cast< gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > * >(argp1);
  {
    try {
      delete arg1;
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CNMonteCarloSampling_double_makeInference(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > *arg1 = (gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CNMonteCarloSampling_double_makeInference",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__credal__CNMonteCarloSamplingT_double_gum__LazyPropagationT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CNMonteCarloSampling_double_makeInference" "', argument " "1"" of type '" "gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > *""'"); 
  }
  arg1 = reinterpret_cast< gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > * >(argp1);
  {
    try {
      (arg1)->makeInference();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CNMonteCarloSampling_double_insertEvidenceFile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > *arg1 = (gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CNMonteCarloSampling_double_insertEvidenceFile",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__credal__CNMonteCarloSamplingT_double_gum__LazyPropagationT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CNMonteCarloSampling_double_insertEvidenceFile" "', argument " "1"" of type '" "gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > *""'"); 
  }
  arg1 = reinterpret_cast< gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CNMonteCarloSampling_double_insertEvidenceFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CNMonteCarloSampling_double_insertEvidenceFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->insertEvidenceFile((std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CNMonteCarloSampling_double_setVerbosity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > *arg1 = (gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CNMonteCarloSampling_double_setVerbosity",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__credal__CNMonteCarloSamplingT_double_gum__LazyPropagationT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CNMonteCarloSampling_double_setVerbosity" "', argument " "1"" of type '" "gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > *""'"); 
  }
  arg1 = reinterpret_cast< gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CNMonteCarloSampling_double_setVerbosity" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      gum_credal_CNMonteCarloSampling_Sl_double_Sc_gum_LazyPropagation_Sl_double_Sg__Sg__setVerbosity(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CNMonteCarloSampling_double_setEpsilon(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > *arg1 = (gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CNMonteCarloSampling_double_setEpsilon",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__credal__CNMonteCarloSamplingT_double_gum__LazyPropagationT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CNMonteCarloSampling_double_setEpsilon" "', argument " "1"" of type '" "gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > *""'"); 
  }
  arg1 = reinterpret_cast< gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CNMonteCarloSampling_double_setEpsilon" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      gum_credal_CNMonteCarloSampling_Sl_double_Sc_gum_LazyPropagation_Sl_double_Sg__Sg__setEpsilon(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CNMonteCarloSampling_double_setMinEpsilonRate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > *arg1 = (gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CNMonteCarloSampling_double_setMinEpsilonRate",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__credal__CNMonteCarloSamplingT_double_gum__LazyPropagationT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CNMonteCarloSampling_double_setMinEpsilonRate" "', argument " "1"" of type '" "gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > *""'"); 
  }
  arg1 = reinterpret_cast< gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CNMonteCarloSampling_double_setMinEpsilonRate" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      gum_credal_CNMonteCarloSampling_Sl_double_Sc_gum_LazyPropagation_Sl_double_Sg__Sg__setMinEpsilonRate(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CNMonteCarloSampling_double_setMaxIter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > *arg1 = (gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > *) 0 ;
  gum::Size arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CNMonteCarloSampling_double_setMaxIter",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__credal__CNMonteCarloSamplingT_double_gum__LazyPropagationT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CNMonteCarloSampling_double_setMaxIter" "', argument " "1"" of type '" "gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > *""'"); 
  }
  arg1 = reinterpret_cast< gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CNMonteCarloSampling_double_setMaxIter" "', argument " "2"" of type '" "gum::Size""'");
  } 
  arg2 = static_cast< gum::Size >(val2);
  {
    try {
      gum_credal_CNMonteCarloSampling_Sl_double_Sc_gum_LazyPropagation_Sl_double_Sg__Sg__setMaxIter(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CNMonteCarloSampling_double_setMaxTime(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > *arg1 = (gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CNMonteCarloSampling_double_setMaxTime",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__credal__CNMonteCarloSamplingT_double_gum__LazyPropagationT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CNMonteCarloSampling_double_setMaxTime" "', argument " "1"" of type '" "gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > *""'"); 
  }
  arg1 = reinterpret_cast< gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CNMonteCarloSampling_double_setMaxTime" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      gum_credal_CNMonteCarloSampling_Sl_double_Sc_gum_LazyPropagation_Sl_double_Sg__Sg__setMaxTime(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CNMonteCarloSampling_double_setPeriodSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > *arg1 = (gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > *) 0 ;
  gum::Size arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CNMonteCarloSampling_double_setPeriodSize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__credal__CNMonteCarloSamplingT_double_gum__LazyPropagationT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CNMonteCarloSampling_double_setPeriodSize" "', argument " "1"" of type '" "gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > *""'"); 
  }
  arg1 = reinterpret_cast< gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CNMonteCarloSampling_double_setPeriodSize" "', argument " "2"" of type '" "gum::Size""'");
  } 
  arg2 = static_cast< gum::Size >(val2);
  {
    try {
      gum_credal_CNMonteCarloSampling_Sl_double_Sc_gum_LazyPropagation_Sl_double_Sg__Sg__setPeriodSize(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CNMonteCarloSampling_double_setBurnIn(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > *arg1 = (gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > *) 0 ;
  gum::Size arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CNMonteCarloSampling_double_setBurnIn",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__credal__CNMonteCarloSamplingT_double_gum__LazyPropagationT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CNMonteCarloSampling_double_setBurnIn" "', argument " "1"" of type '" "gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > *""'"); 
  }
  arg1 = reinterpret_cast< gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CNMonteCarloSampling_double_setBurnIn" "', argument " "2"" of type '" "gum::Size""'");
  } 
  arg2 = static_cast< gum::Size >(val2);
  {
    try {
      gum_credal_CNMonteCarloSampling_Sl_double_Sc_gum_LazyPropagation_Sl_double_Sg__Sg__setBurnIn(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CNMonteCarloSampling_double_verbosity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > *arg1 = (gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CNMonteCarloSampling_double_verbosity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__credal__CNMonteCarloSamplingT_double_gum__LazyPropagationT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CNMonteCarloSampling_double_verbosity" "', argument " "1"" of type '" "gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > * >(argp1);
  {
    try {
      result = (bool)gum_credal_CNMonteCarloSampling_Sl_double_Sc_gum_LazyPropagation_Sl_double_Sg__Sg__verbosity((gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CNMonteCarloSampling_double_epsilon(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > *arg1 = (gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CNMonteCarloSampling_double_epsilon",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__credal__CNMonteCarloSamplingT_double_gum__LazyPropagationT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CNMonteCarloSampling_double_epsilon" "', argument " "1"" of type '" "gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > * >(argp1);
  {
    try {
      result = (double)gum_credal_CNMonteCarloSampling_Sl_double_Sc_gum_LazyPropagation_Sl_double_Sg__Sg__epsilon((gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CNMonteCarloSampling_double_minEpsilonRate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > *arg1 = (gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CNMonteCarloSampling_double_minEpsilonRate",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__credal__CNMonteCarloSamplingT_double_gum__LazyPropagationT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CNMonteCarloSampling_double_minEpsilonRate" "', argument " "1"" of type '" "gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > * >(argp1);
  {
    try {
      result = (double)gum_credal_CNMonteCarloSampling_Sl_double_Sc_gum_LazyPropagation_Sl_double_Sg__Sg__minEpsilonRate((gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CNMonteCarloSampling_double_maxIter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > *arg1 = (gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::Size result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CNMonteCarloSampling_double_maxIter",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__credal__CNMonteCarloSamplingT_double_gum__LazyPropagationT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CNMonteCarloSampling_double_maxIter" "', argument " "1"" of type '" "gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > * >(argp1);
  {
    try {
      result = (gum::Size)gum_credal_CNMonteCarloSampling_Sl_double_Sc_gum_LazyPropagation_Sl_double_Sg__Sg__maxIter((gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CNMonteCarloSampling_double_maxTime(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > *arg1 = (gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CNMonteCarloSampling_double_maxTime",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__credal__CNMonteCarloSamplingT_double_gum__LazyPropagationT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CNMonteCarloSampling_double_maxTime" "', argument " "1"" of type '" "gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > * >(argp1);
  {
    try {
      result = (double)gum_credal_CNMonteCarloSampling_Sl_double_Sc_gum_LazyPropagation_Sl_double_Sg__Sg__maxTime((gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CNMonteCarloSampling_double_periodSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > *arg1 = (gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::Size result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CNMonteCarloSampling_double_periodSize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__credal__CNMonteCarloSamplingT_double_gum__LazyPropagationT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CNMonteCarloSampling_double_periodSize" "', argument " "1"" of type '" "gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > * >(argp1);
  {
    try {
      result = (gum::Size)gum_credal_CNMonteCarloSampling_Sl_double_Sc_gum_LazyPropagation_Sl_double_Sg__Sg__periodSize((gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CNMonteCarloSampling_double_burnIn(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > *arg1 = (gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::Size result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CNMonteCarloSampling_double_burnIn",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__credal__CNMonteCarloSamplingT_double_gum__LazyPropagationT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CNMonteCarloSampling_double_burnIn" "', argument " "1"" of type '" "gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > * >(argp1);
  {
    try {
      result = (gum::Size)gum_credal_CNMonteCarloSampling_Sl_double_Sc_gum_LazyPropagation_Sl_double_Sg__Sg__burnIn((gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CNMonteCarloSampling_double_nbrIterations(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > *arg1 = (gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::Size result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CNMonteCarloSampling_double_nbrIterations",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__credal__CNMonteCarloSamplingT_double_gum__LazyPropagationT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CNMonteCarloSampling_double_nbrIterations" "', argument " "1"" of type '" "gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > * >(argp1);
  {
    try {
      result = (gum::Size)gum_credal_CNMonteCarloSampling_Sl_double_Sc_gum_LazyPropagation_Sl_double_Sg__Sg__nbrIterations((gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CNMonteCarloSampling_double_currentTime(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > *arg1 = (gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CNMonteCarloSampling_double_currentTime",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__credal__CNMonteCarloSamplingT_double_gum__LazyPropagationT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CNMonteCarloSampling_double_currentTime" "', argument " "1"" of type '" "gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > * >(argp1);
  {
    try {
      result = (double)gum_credal_CNMonteCarloSampling_Sl_double_Sc_gum_LazyPropagation_Sl_double_Sg__Sg__currentTime((gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CNMonteCarloSampling_double_messageApproximationScheme(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > *arg1 = (gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CNMonteCarloSampling_double_messageApproximationScheme",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__credal__CNMonteCarloSamplingT_double_gum__LazyPropagationT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CNMonteCarloSampling_double_messageApproximationScheme" "', argument " "1"" of type '" "gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > * >(argp1);
  {
    try {
      result = gum_credal_CNMonteCarloSampling_Sl_double_Sc_gum_LazyPropagation_Sl_double_Sg__Sg__messageApproximationScheme((gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CNMonteCarloSampling_double_history(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > *arg1 = (gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double,std::allocator< double > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CNMonteCarloSampling_double_history",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__credal__CNMonteCarloSamplingT_double_gum__LazyPropagationT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CNMonteCarloSampling_double_history" "', argument " "1"" of type '" "gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > * >(argp1);
  {
    try {
      result = (std::vector< double,std::allocator< double > > *) &gum_credal_CNMonteCarloSampling_Sl_double_Sc_gum_LazyPropagation_Sl_double_Sg__Sg__history((gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< double,std::allocator< double > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CNMonteCarloSampling_double_setRepetitiveInd(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > *arg1 = (gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CNMonteCarloSampling_double_setRepetitiveInd",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__credal__CNMonteCarloSamplingT_double_gum__LazyPropagationT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CNMonteCarloSampling_double_setRepetitiveInd" "', argument " "1"" of type '" "gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > *""'"); 
  }
  arg1 = reinterpret_cast< gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CNMonteCarloSampling_double_setRepetitiveInd" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      gum_credal_CNMonteCarloSampling_Sl_double_Sc_gum_LazyPropagation_Sl_double_Sg__Sg__setRepetitiveInd(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CNMonteCarloSampling_double_marginalMax__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > *arg1 = (gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > *) 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< double,std::allocator< double > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CNMonteCarloSampling_double_marginalMax",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__credal__CNMonteCarloSamplingT_double_gum__LazyPropagationT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CNMonteCarloSampling_double_marginalMax" "', argument " "1"" of type '" "gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CNMonteCarloSampling_double_marginalMax" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (std::vector< double,std::allocator< double > > *) &gum_credal_CNMonteCarloSampling_Sl_double_Sc_gum_LazyPropagation_Sl_double_Sg__Sg__marginalMax__SWIG_0((gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > const *)arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< double,std::allocator< double > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CNMonteCarloSampling_double_marginalMin__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > *arg1 = (gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > *) 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< double,std::allocator< double > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CNMonteCarloSampling_double_marginalMin",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__credal__CNMonteCarloSamplingT_double_gum__LazyPropagationT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CNMonteCarloSampling_double_marginalMin" "', argument " "1"" of type '" "gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CNMonteCarloSampling_double_marginalMin" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (std::vector< double,std::allocator< double > > *) &gum_credal_CNMonteCarloSampling_Sl_double_Sc_gum_LazyPropagation_Sl_double_Sg__Sg__marginalMin__SWIG_0((gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > const *)arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< double,std::allocator< double > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CNMonteCarloSampling_double_marginalMax__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > *arg1 = (gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< double,std::allocator< double > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CNMonteCarloSampling_double_marginalMax",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__credal__CNMonteCarloSamplingT_double_gum__LazyPropagationT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CNMonteCarloSampling_double_marginalMax" "', argument " "1"" of type '" "gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "CNMonteCarloSampling_double_marginalMax" "', argument " "2"" of type '" "std::string const""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (std::vector< double,std::allocator< double > > *) &gum_credal_CNMonteCarloSampling_Sl_double_Sc_gum_LazyPropagation_Sl_double_Sg__Sg__marginalMax__SWIG_1((gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > const *)arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< double,std::allocator< double > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CNMonteCarloSampling_double_marginalMax(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__credal__CNMonteCarloSamplingT_double_gum__LazyPropagationT_double_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_CNMonteCarloSampling_double_marginalMax__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__credal__CNMonteCarloSamplingT_double_gum__LazyPropagationT_double_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_CNMonteCarloSampling_double_marginalMax__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'CNMonteCarloSampling_double_marginalMax'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > >::marginalMax(gum::NodeId const) const\n"
    "    gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > >::marginalMax(std::string const) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_CNMonteCarloSampling_double_marginalMin__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > *arg1 = (gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< double,std::allocator< double > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CNMonteCarloSampling_double_marginalMin",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__credal__CNMonteCarloSamplingT_double_gum__LazyPropagationT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CNMonteCarloSampling_double_marginalMin" "', argument " "1"" of type '" "gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "CNMonteCarloSampling_double_marginalMin" "', argument " "2"" of type '" "std::string const""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (std::vector< double,std::allocator< double > > *) &gum_credal_CNMonteCarloSampling_Sl_double_Sc_gum_LazyPropagation_Sl_double_Sg__Sg__marginalMin__SWIG_1((gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > const *)arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< double,std::allocator< double > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CNMonteCarloSampling_double_marginalMin(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__credal__CNMonteCarloSamplingT_double_gum__LazyPropagationT_double_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_CNMonteCarloSampling_double_marginalMin__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__credal__CNMonteCarloSamplingT_double_gum__LazyPropagationT_double_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_CNMonteCarloSampling_double_marginalMin__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'CNMonteCarloSampling_double_marginalMin'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > >::marginalMin(gum::NodeId const) const\n"
    "    gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > >::marginalMin(std::string const) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_CNMonteCarloSampling_double_insertModalsFile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > *arg1 = (gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CNMonteCarloSampling_double_insertModalsFile",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__credal__CNMonteCarloSamplingT_double_gum__LazyPropagationT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CNMonteCarloSampling_double_insertModalsFile" "', argument " "1"" of type '" "gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > *""'"); 
  }
  arg1 = reinterpret_cast< gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CNMonteCarloSampling_double_insertModalsFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CNMonteCarloSampling_double_insertModalsFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      gum_credal_CNMonteCarloSampling_Sl_double_Sc_gum_LazyPropagation_Sl_double_Sg__Sg__insertModalsFile(arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CNMonteCarloSampling_double_dynamicExpMax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > *arg1 = (gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< double,std::allocator< double > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CNMonteCarloSampling_double_dynamicExpMax",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__credal__CNMonteCarloSamplingT_double_gum__LazyPropagationT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CNMonteCarloSampling_double_dynamicExpMax" "', argument " "1"" of type '" "gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CNMonteCarloSampling_double_dynamicExpMax" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CNMonteCarloSampling_double_dynamicExpMax" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (std::vector< double,std::allocator< double > > *) &gum_credal_CNMonteCarloSampling_Sl_double_Sc_gum_LazyPropagation_Sl_double_Sg__Sg__dynamicExpMax((gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > const *)arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< double,std::allocator< double > > >(*result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CNMonteCarloSampling_double_dynamicExpMin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > *arg1 = (gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< double,std::allocator< double > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CNMonteCarloSampling_double_dynamicExpMin",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__credal__CNMonteCarloSamplingT_double_gum__LazyPropagationT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CNMonteCarloSampling_double_dynamicExpMin" "', argument " "1"" of type '" "gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CNMonteCarloSampling_double_dynamicExpMin" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CNMonteCarloSampling_double_dynamicExpMin" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (std::vector< double,std::allocator< double > > *) &gum_credal_CNMonteCarloSampling_Sl_double_Sc_gum_LazyPropagation_Sl_double_Sg__Sg__dynamicExpMin((gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > const *)arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< double,std::allocator< double > > >(*result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *CNMonteCarloSampling_double_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gum__credal__CNMonteCarloSamplingT_double_gum__LazyPropagationT_double_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_CNLoopyPropagation_double_makeInference(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::credal::CNLoopyPropagation< double > *arg1 = (gum::credal::CNLoopyPropagation< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CNLoopyPropagation_double_makeInference",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__credal__CNLoopyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CNLoopyPropagation_double_makeInference" "', argument " "1"" of type '" "gum::credal::CNLoopyPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::credal::CNLoopyPropagation< double > * >(argp1);
  {
    try {
      (arg1)->makeInference();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CNLoopyPropagation_double_inferenceType__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::credal::CNLoopyPropagation< double > *arg1 = (gum::credal::CNLoopyPropagation< double > *) 0 ;
  gum::credal::CNLoopyPropagation< double >::InferenceType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CNLoopyPropagation_double_inferenceType",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__credal__CNLoopyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CNLoopyPropagation_double_inferenceType" "', argument " "1"" of type '" "gum::credal::CNLoopyPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::credal::CNLoopyPropagation< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CNLoopyPropagation_double_inferenceType" "', argument " "2"" of type '" "gum::credal::CNLoopyPropagation< double >::InferenceType""'");
  } 
  arg2 = static_cast< gum::credal::CNLoopyPropagation< double >::InferenceType >(val2);
  {
    try {
      (arg1)->inferenceType(arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CNLoopyPropagation_double_inferenceType__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::credal::CNLoopyPropagation< double > *arg1 = (gum::credal::CNLoopyPropagation< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::credal::CNLoopyPropagation< double >::InferenceType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CNLoopyPropagation_double_inferenceType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__credal__CNLoopyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CNLoopyPropagation_double_inferenceType" "', argument " "1"" of type '" "gum::credal::CNLoopyPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::credal::CNLoopyPropagation< double > * >(argp1);
  {
    try {
      result = (gum::credal::CNLoopyPropagation< double >::InferenceType)(arg1)->inferenceType();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CNLoopyPropagation_double_inferenceType(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__credal__CNLoopyPropagationT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_CNLoopyPropagation_double_inferenceType__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__credal__CNLoopyPropagationT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_CNLoopyPropagation_double_inferenceType__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'CNLoopyPropagation_double_inferenceType'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::credal::CNLoopyPropagation< double >::inferenceType(gum::credal::CNLoopyPropagation< double >::InferenceType)\n"
    "    gum::credal::CNLoopyPropagation< double >::inferenceType()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_CNLoopyPropagation_double_eraseAllEvidence(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::credal::CNLoopyPropagation< double > *arg1 = (gum::credal::CNLoopyPropagation< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CNLoopyPropagation_double_eraseAllEvidence",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__credal__CNLoopyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CNLoopyPropagation_double_eraseAllEvidence" "', argument " "1"" of type '" "gum::credal::CNLoopyPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::credal::CNLoopyPropagation< double > * >(argp1);
  {
    try {
      (arg1)->eraseAllEvidence();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CNLoopyPropagation_double_saveInference(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::credal::CNLoopyPropagation< double > *arg1 = (gum::credal::CNLoopyPropagation< double > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CNLoopyPropagation_double_saveInference",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__credal__CNLoopyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CNLoopyPropagation_double_saveInference" "', argument " "1"" of type '" "gum::credal::CNLoopyPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::credal::CNLoopyPropagation< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CNLoopyPropagation_double_saveInference" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CNLoopyPropagation_double_saveInference" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->saveInference((std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CNLoopyPropagation_double(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::credal::CredalNet< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::credal::CNLoopyPropagation< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_CNLoopyPropagation_double",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_gum__credal__CredalNetT_double_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CNLoopyPropagation_double" "', argument " "1"" of type '" "gum::credal::CredalNet< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CNLoopyPropagation_double" "', argument " "1"" of type '" "gum::credal::CredalNet< double > const &""'"); 
  }
  arg1 = reinterpret_cast< gum::credal::CredalNet< double > * >(argp1);
  {
    try {
      result = (gum::credal::CNLoopyPropagation< double > *)new gum::credal::CNLoopyPropagation< double >((gum::credal::CredalNet< double > const &)*arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__credal__CNLoopyPropagationT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_CNLoopyPropagation_double(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::credal::CNLoopyPropagation< double > *arg1 = (gum::credal::CNLoopyPropagation< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_CNLoopyPropagation_double",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__credal__CNLoopyPropagationT_double_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CNLoopyPropagation_double" "', argument " "1"" of type '" "gum::credal::CNLoopyPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::credal::CNLoopyPropagation< double > * >(argp1);
  {
    try {
      delete arg1;
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CNLoopyPropagation_double_insertEvidenceFile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::credal::CNLoopyPropagation< double > *arg1 = (gum::credal::CNLoopyPropagation< double > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CNLoopyPropagation_double_insertEvidenceFile",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__credal__CNLoopyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CNLoopyPropagation_double_insertEvidenceFile" "', argument " "1"" of type '" "gum::credal::CNLoopyPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::credal::CNLoopyPropagation< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CNLoopyPropagation_double_insertEvidenceFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CNLoopyPropagation_double_insertEvidenceFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->insertEvidenceFile((std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CNLoopyPropagation_double_setVerbosity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::credal::CNLoopyPropagation< double > *arg1 = (gum::credal::CNLoopyPropagation< double > *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CNLoopyPropagation_double_setVerbosity",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__credal__CNLoopyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CNLoopyPropagation_double_setVerbosity" "', argument " "1"" of type '" "gum::credal::CNLoopyPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::credal::CNLoopyPropagation< double > * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CNLoopyPropagation_double_setVerbosity" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      gum_credal_CNLoopyPropagation_Sl_double_Sg__setVerbosity(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CNLoopyPropagation_double_setEpsilon(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::credal::CNLoopyPropagation< double > *arg1 = (gum::credal::CNLoopyPropagation< double > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CNLoopyPropagation_double_setEpsilon",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__credal__CNLoopyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CNLoopyPropagation_double_setEpsilon" "', argument " "1"" of type '" "gum::credal::CNLoopyPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::credal::CNLoopyPropagation< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CNLoopyPropagation_double_setEpsilon" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      gum_credal_CNLoopyPropagation_Sl_double_Sg__setEpsilon(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CNLoopyPropagation_double_setMinEpsilonRate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::credal::CNLoopyPropagation< double > *arg1 = (gum::credal::CNLoopyPropagation< double > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CNLoopyPropagation_double_setMinEpsilonRate",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__credal__CNLoopyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CNLoopyPropagation_double_setMinEpsilonRate" "', argument " "1"" of type '" "gum::credal::CNLoopyPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::credal::CNLoopyPropagation< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CNLoopyPropagation_double_setMinEpsilonRate" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      gum_credal_CNLoopyPropagation_Sl_double_Sg__setMinEpsilonRate(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CNLoopyPropagation_double_setMaxIter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::credal::CNLoopyPropagation< double > *arg1 = (gum::credal::CNLoopyPropagation< double > *) 0 ;
  gum::Size arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CNLoopyPropagation_double_setMaxIter",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__credal__CNLoopyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CNLoopyPropagation_double_setMaxIter" "', argument " "1"" of type '" "gum::credal::CNLoopyPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::credal::CNLoopyPropagation< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CNLoopyPropagation_double_setMaxIter" "', argument " "2"" of type '" "gum::Size""'");
  } 
  arg2 = static_cast< gum::Size >(val2);
  {
    try {
      gum_credal_CNLoopyPropagation_Sl_double_Sg__setMaxIter(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CNLoopyPropagation_double_setMaxTime(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::credal::CNLoopyPropagation< double > *arg1 = (gum::credal::CNLoopyPropagation< double > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CNLoopyPropagation_double_setMaxTime",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__credal__CNLoopyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CNLoopyPropagation_double_setMaxTime" "', argument " "1"" of type '" "gum::credal::CNLoopyPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::credal::CNLoopyPropagation< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CNLoopyPropagation_double_setMaxTime" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      gum_credal_CNLoopyPropagation_Sl_double_Sg__setMaxTime(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CNLoopyPropagation_double_setPeriodSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::credal::CNLoopyPropagation< double > *arg1 = (gum::credal::CNLoopyPropagation< double > *) 0 ;
  gum::Size arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CNLoopyPropagation_double_setPeriodSize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__credal__CNLoopyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CNLoopyPropagation_double_setPeriodSize" "', argument " "1"" of type '" "gum::credal::CNLoopyPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::credal::CNLoopyPropagation< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CNLoopyPropagation_double_setPeriodSize" "', argument " "2"" of type '" "gum::Size""'");
  } 
  arg2 = static_cast< gum::Size >(val2);
  {
    try {
      gum_credal_CNLoopyPropagation_Sl_double_Sg__setPeriodSize(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CNLoopyPropagation_double_setBurnIn(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::credal::CNLoopyPropagation< double > *arg1 = (gum::credal::CNLoopyPropagation< double > *) 0 ;
  gum::Size arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CNLoopyPropagation_double_setBurnIn",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__credal__CNLoopyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CNLoopyPropagation_double_setBurnIn" "', argument " "1"" of type '" "gum::credal::CNLoopyPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::credal::CNLoopyPropagation< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CNLoopyPropagation_double_setBurnIn" "', argument " "2"" of type '" "gum::Size""'");
  } 
  arg2 = static_cast< gum::Size >(val2);
  {
    try {
      gum_credal_CNLoopyPropagation_Sl_double_Sg__setBurnIn(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CNLoopyPropagation_double_verbosity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::credal::CNLoopyPropagation< double > *arg1 = (gum::credal::CNLoopyPropagation< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CNLoopyPropagation_double_verbosity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__credal__CNLoopyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CNLoopyPropagation_double_verbosity" "', argument " "1"" of type '" "gum::credal::CNLoopyPropagation< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::credal::CNLoopyPropagation< double > * >(argp1);
  {
    try {
      result = (bool)gum_credal_CNLoopyPropagation_Sl_double_Sg__verbosity((gum::credal::CNLoopyPropagation< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CNLoopyPropagation_double_epsilon(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::credal::CNLoopyPropagation< double > *arg1 = (gum::credal::CNLoopyPropagation< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CNLoopyPropagation_double_epsilon",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__credal__CNLoopyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CNLoopyPropagation_double_epsilon" "', argument " "1"" of type '" "gum::credal::CNLoopyPropagation< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::credal::CNLoopyPropagation< double > * >(argp1);
  {
    try {
      result = (double)gum_credal_CNLoopyPropagation_Sl_double_Sg__epsilon((gum::credal::CNLoopyPropagation< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CNLoopyPropagation_double_minEpsilonRate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::credal::CNLoopyPropagation< double > *arg1 = (gum::credal::CNLoopyPropagation< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CNLoopyPropagation_double_minEpsilonRate",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__credal__CNLoopyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CNLoopyPropagation_double_minEpsilonRate" "', argument " "1"" of type '" "gum::credal::CNLoopyPropagation< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::credal::CNLoopyPropagation< double > * >(argp1);
  {
    try {
      result = (double)gum_credal_CNLoopyPropagation_Sl_double_Sg__minEpsilonRate((gum::credal::CNLoopyPropagation< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CNLoopyPropagation_double_maxIter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::credal::CNLoopyPropagation< double > *arg1 = (gum::credal::CNLoopyPropagation< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::Size result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CNLoopyPropagation_double_maxIter",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__credal__CNLoopyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CNLoopyPropagation_double_maxIter" "', argument " "1"" of type '" "gum::credal::CNLoopyPropagation< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::credal::CNLoopyPropagation< double > * >(argp1);
  {
    try {
      result = (gum::Size)gum_credal_CNLoopyPropagation_Sl_double_Sg__maxIter((gum::credal::CNLoopyPropagation< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CNLoopyPropagation_double_maxTime(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::credal::CNLoopyPropagation< double > *arg1 = (gum::credal::CNLoopyPropagation< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CNLoopyPropagation_double_maxTime",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__credal__CNLoopyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CNLoopyPropagation_double_maxTime" "', argument " "1"" of type '" "gum::credal::CNLoopyPropagation< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::credal::CNLoopyPropagation< double > * >(argp1);
  {
    try {
      result = (double)gum_credal_CNLoopyPropagation_Sl_double_Sg__maxTime((gum::credal::CNLoopyPropagation< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CNLoopyPropagation_double_periodSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::credal::CNLoopyPropagation< double > *arg1 = (gum::credal::CNLoopyPropagation< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::Size result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CNLoopyPropagation_double_periodSize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__credal__CNLoopyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CNLoopyPropagation_double_periodSize" "', argument " "1"" of type '" "gum::credal::CNLoopyPropagation< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::credal::CNLoopyPropagation< double > * >(argp1);
  {
    try {
      result = (gum::Size)gum_credal_CNLoopyPropagation_Sl_double_Sg__periodSize((gum::credal::CNLoopyPropagation< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CNLoopyPropagation_double_burnIn(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::credal::CNLoopyPropagation< double > *arg1 = (gum::credal::CNLoopyPropagation< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::Size result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CNLoopyPropagation_double_burnIn",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__credal__CNLoopyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CNLoopyPropagation_double_burnIn" "', argument " "1"" of type '" "gum::credal::CNLoopyPropagation< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::credal::CNLoopyPropagation< double > * >(argp1);
  {
    try {
      result = (gum::Size)gum_credal_CNLoopyPropagation_Sl_double_Sg__burnIn((gum::credal::CNLoopyPropagation< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CNLoopyPropagation_double_nbrIterations(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::credal::CNLoopyPropagation< double > *arg1 = (gum::credal::CNLoopyPropagation< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::Size result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CNLoopyPropagation_double_nbrIterations",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__credal__CNLoopyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CNLoopyPropagation_double_nbrIterations" "', argument " "1"" of type '" "gum::credal::CNLoopyPropagation< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::credal::CNLoopyPropagation< double > * >(argp1);
  {
    try {
      result = (gum::Size)gum_credal_CNLoopyPropagation_Sl_double_Sg__nbrIterations((gum::credal::CNLoopyPropagation< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CNLoopyPropagation_double_currentTime(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::credal::CNLoopyPropagation< double > *arg1 = (gum::credal::CNLoopyPropagation< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CNLoopyPropagation_double_currentTime",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__credal__CNLoopyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CNLoopyPropagation_double_currentTime" "', argument " "1"" of type '" "gum::credal::CNLoopyPropagation< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::credal::CNLoopyPropagation< double > * >(argp1);
  {
    try {
      result = (double)gum_credal_CNLoopyPropagation_Sl_double_Sg__currentTime((gum::credal::CNLoopyPropagation< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CNLoopyPropagation_double_messageApproximationScheme(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::credal::CNLoopyPropagation< double > *arg1 = (gum::credal::CNLoopyPropagation< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CNLoopyPropagation_double_messageApproximationScheme",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__credal__CNLoopyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CNLoopyPropagation_double_messageApproximationScheme" "', argument " "1"" of type '" "gum::credal::CNLoopyPropagation< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::credal::CNLoopyPropagation< double > * >(argp1);
  {
    try {
      result = gum_credal_CNLoopyPropagation_Sl_double_Sg__messageApproximationScheme((gum::credal::CNLoopyPropagation< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CNLoopyPropagation_double_history(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::credal::CNLoopyPropagation< double > *arg1 = (gum::credal::CNLoopyPropagation< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double,std::allocator< double > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CNLoopyPropagation_double_history",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__credal__CNLoopyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CNLoopyPropagation_double_history" "', argument " "1"" of type '" "gum::credal::CNLoopyPropagation< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::credal::CNLoopyPropagation< double > * >(argp1);
  {
    try {
      result = (std::vector< double,std::allocator< double > > *) &gum_credal_CNLoopyPropagation_Sl_double_Sg__history((gum::credal::CNLoopyPropagation< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< double,std::allocator< double > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CNLoopyPropagation_double_setRepetitiveInd(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::credal::CNLoopyPropagation< double > *arg1 = (gum::credal::CNLoopyPropagation< double > *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CNLoopyPropagation_double_setRepetitiveInd",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__credal__CNLoopyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CNLoopyPropagation_double_setRepetitiveInd" "', argument " "1"" of type '" "gum::credal::CNLoopyPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::credal::CNLoopyPropagation< double > * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CNLoopyPropagation_double_setRepetitiveInd" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      gum_credal_CNLoopyPropagation_Sl_double_Sg__setRepetitiveInd(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CNLoopyPropagation_double_marginalMax__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::credal::CNLoopyPropagation< double > *arg1 = (gum::credal::CNLoopyPropagation< double > *) 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< double,std::allocator< double > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CNLoopyPropagation_double_marginalMax",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__credal__CNLoopyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CNLoopyPropagation_double_marginalMax" "', argument " "1"" of type '" "gum::credal::CNLoopyPropagation< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::credal::CNLoopyPropagation< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CNLoopyPropagation_double_marginalMax" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (std::vector< double,std::allocator< double > > *) &gum_credal_CNLoopyPropagation_Sl_double_Sg__marginalMax__SWIG_0((gum::credal::CNLoopyPropagation< double > const *)arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< double,std::allocator< double > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CNLoopyPropagation_double_marginalMin__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::credal::CNLoopyPropagation< double > *arg1 = (gum::credal::CNLoopyPropagation< double > *) 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< double,std::allocator< double > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CNLoopyPropagation_double_marginalMin",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__credal__CNLoopyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CNLoopyPropagation_double_marginalMin" "', argument " "1"" of type '" "gum::credal::CNLoopyPropagation< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::credal::CNLoopyPropagation< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CNLoopyPropagation_double_marginalMin" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (std::vector< double,std::allocator< double > > *) &gum_credal_CNLoopyPropagation_Sl_double_Sg__marginalMin__SWIG_0((gum::credal::CNLoopyPropagation< double > const *)arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< double,std::allocator< double > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CNLoopyPropagation_double_marginalMax__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::credal::CNLoopyPropagation< double > *arg1 = (gum::credal::CNLoopyPropagation< double > *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< double,std::allocator< double > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CNLoopyPropagation_double_marginalMax",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__credal__CNLoopyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CNLoopyPropagation_double_marginalMax" "', argument " "1"" of type '" "gum::credal::CNLoopyPropagation< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::credal::CNLoopyPropagation< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "CNLoopyPropagation_double_marginalMax" "', argument " "2"" of type '" "std::string const""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (std::vector< double,std::allocator< double > > *) &gum_credal_CNLoopyPropagation_Sl_double_Sg__marginalMax__SWIG_1((gum::credal::CNLoopyPropagation< double > const *)arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< double,std::allocator< double > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CNLoopyPropagation_double_marginalMax(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__credal__CNLoopyPropagationT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_CNLoopyPropagation_double_marginalMax__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__credal__CNLoopyPropagationT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_CNLoopyPropagation_double_marginalMax__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'CNLoopyPropagation_double_marginalMax'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::credal::CNLoopyPropagation< double >::marginalMax(gum::NodeId const) const\n"
    "    gum::credal::CNLoopyPropagation< double >::marginalMax(std::string const) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_CNLoopyPropagation_double_marginalMin__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::credal::CNLoopyPropagation< double > *arg1 = (gum::credal::CNLoopyPropagation< double > *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< double,std::allocator< double > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CNLoopyPropagation_double_marginalMin",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__credal__CNLoopyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CNLoopyPropagation_double_marginalMin" "', argument " "1"" of type '" "gum::credal::CNLoopyPropagation< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::credal::CNLoopyPropagation< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "CNLoopyPropagation_double_marginalMin" "', argument " "2"" of type '" "std::string const""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (std::vector< double,std::allocator< double > > *) &gum_credal_CNLoopyPropagation_Sl_double_Sg__marginalMin__SWIG_1((gum::credal::CNLoopyPropagation< double > const *)arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< double,std::allocator< double > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CNLoopyPropagation_double_marginalMin(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__credal__CNLoopyPropagationT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_CNLoopyPropagation_double_marginalMin__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__credal__CNLoopyPropagationT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_CNLoopyPropagation_double_marginalMin__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'CNLoopyPropagation_double_marginalMin'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::credal::CNLoopyPropagation< double >::marginalMin(gum::NodeId const) const\n"
    "    gum::credal::CNLoopyPropagation< double >::marginalMin(std::string const) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_CNLoopyPropagation_double_insertModalsFile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::credal::CNLoopyPropagation< double > *arg1 = (gum::credal::CNLoopyPropagation< double > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CNLoopyPropagation_double_insertModalsFile",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__credal__CNLoopyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CNLoopyPropagation_double_insertModalsFile" "', argument " "1"" of type '" "gum::credal::CNLoopyPropagation< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::credal::CNLoopyPropagation< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CNLoopyPropagation_double_insertModalsFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CNLoopyPropagation_double_insertModalsFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      gum_credal_CNLoopyPropagation_Sl_double_Sg__insertModalsFile(arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CNLoopyPropagation_double_dynamicExpMax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::credal::CNLoopyPropagation< double > *arg1 = (gum::credal::CNLoopyPropagation< double > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< double,std::allocator< double > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CNLoopyPropagation_double_dynamicExpMax",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__credal__CNLoopyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CNLoopyPropagation_double_dynamicExpMax" "', argument " "1"" of type '" "gum::credal::CNLoopyPropagation< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::credal::CNLoopyPropagation< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CNLoopyPropagation_double_dynamicExpMax" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CNLoopyPropagation_double_dynamicExpMax" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (std::vector< double,std::allocator< double > > *) &gum_credal_CNLoopyPropagation_Sl_double_Sg__dynamicExpMax((gum::credal::CNLoopyPropagation< double > const *)arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< double,std::allocator< double > > >(*result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CNLoopyPropagation_double_dynamicExpMin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::credal::CNLoopyPropagation< double > *arg1 = (gum::credal::CNLoopyPropagation< double > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< double,std::allocator< double > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CNLoopyPropagation_double_dynamicExpMin",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__credal__CNLoopyPropagationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CNLoopyPropagation_double_dynamicExpMin" "', argument " "1"" of type '" "gum::credal::CNLoopyPropagation< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::credal::CNLoopyPropagation< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CNLoopyPropagation_double_dynamicExpMin" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CNLoopyPropagation_double_dynamicExpMin" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (std::vector< double,std::allocator< double > > *) &gum_credal_CNLoopyPropagation_Sl_double_Sg__dynamicExpMin((gum::credal::CNLoopyPropagation< double > const *)arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< double,std::allocator< double > > >(*result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *CNLoopyPropagation_double_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gum__credal__CNLoopyPropagationT_double_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_InfluenceDiagram_double__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::InfluenceDiagram< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_InfluenceDiagram_double")) SWIG_fail;
  {
    try {
      result = (gum::InfluenceDiagram< double > *)new gum::InfluenceDiagram< double >();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__InfluenceDiagramT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_InfluenceDiagram_double(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::InfluenceDiagram< double > *arg1 = (gum::InfluenceDiagram< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_InfluenceDiagram_double",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__InfluenceDiagramT_double_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_InfluenceDiagram_double" "', argument " "1"" of type '" "gum::InfluenceDiagram< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::InfluenceDiagram< double > * >(argp1);
  {
    try {
      delete arg1;
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_InfluenceDiagram_double__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::InfluenceDiagram< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::InfluenceDiagram< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_InfluenceDiagram_double",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_gum__InfluenceDiagramT_double_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_InfluenceDiagram_double" "', argument " "1"" of type '" "gum::InfluenceDiagram< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_InfluenceDiagram_double" "', argument " "1"" of type '" "gum::InfluenceDiagram< double > const &""'"); 
  }
  arg1 = reinterpret_cast< gum::InfluenceDiagram< double > * >(argp1);
  {
    try {
      result = (gum::InfluenceDiagram< double > *)new gum::InfluenceDiagram< double >((gum::InfluenceDiagram< double > const &)*arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__InfluenceDiagramT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_InfluenceDiagram_double(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_InfluenceDiagram_double__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_gum__InfluenceDiagramT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_InfluenceDiagram_double__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_InfluenceDiagram_double'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::InfluenceDiagram< double >::InfluenceDiagram()\n"
    "    gum::InfluenceDiagram< double >::InfluenceDiagram(gum::InfluenceDiagram< double > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_InfluenceDiagram_double_toDot(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::InfluenceDiagram< double > *arg1 = (gum::InfluenceDiagram< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:InfluenceDiagram_double_toDot",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__InfluenceDiagramT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InfluenceDiagram_double_toDot" "', argument " "1"" of type '" "gum::InfluenceDiagram< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::InfluenceDiagram< double > * >(argp1);
  {
    try {
      result = ((gum::InfluenceDiagram< double > const *)arg1)->toDot();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InfluenceDiagram_double___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::InfluenceDiagram< double > *arg1 = (gum::InfluenceDiagram< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:InfluenceDiagram_double___str__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__InfluenceDiagramT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InfluenceDiagram_double___str__" "', argument " "1"" of type '" "gum::InfluenceDiagram< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::InfluenceDiagram< double > * >(argp1);
  {
    try {
      result = ((gum::InfluenceDiagram< double > const *)arg1)->toString();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InfluenceDiagram_double_cpt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::InfluenceDiagram< double > *arg1 = (gum::InfluenceDiagram< double > *) 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::Potential< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:InfluenceDiagram_double_cpt",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__InfluenceDiagramT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InfluenceDiagram_double_cpt" "', argument " "1"" of type '" "gum::InfluenceDiagram< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::InfluenceDiagram< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InfluenceDiagram_double_cpt" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (gum::Potential< double > *) &((gum::InfluenceDiagram< double > const *)arg1)->cpt(arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__PotentialT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InfluenceDiagram_double_utility(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::InfluenceDiagram< double > *arg1 = (gum::InfluenceDiagram< double > *) 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::UtilityTable< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:InfluenceDiagram_double_utility",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__InfluenceDiagramT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InfluenceDiagram_double_utility" "', argument " "1"" of type '" "gum::InfluenceDiagram< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::InfluenceDiagram< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InfluenceDiagram_double_utility" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (gum::UtilityTable< double > *) &((gum::InfluenceDiagram< double > const *)arg1)->utility(arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__UtilityTableT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InfluenceDiagram_double_isUtilityNode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::InfluenceDiagram< double > *arg1 = (gum::InfluenceDiagram< double > *) 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:InfluenceDiagram_double_isUtilityNode",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__InfluenceDiagramT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InfluenceDiagram_double_isUtilityNode" "', argument " "1"" of type '" "gum::InfluenceDiagram< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::InfluenceDiagram< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InfluenceDiagram_double_isUtilityNode" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (bool)((gum::InfluenceDiagram< double > const *)arg1)->isUtilityNode(arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InfluenceDiagram_double_isDecisionNode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::InfluenceDiagram< double > *arg1 = (gum::InfluenceDiagram< double > *) 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:InfluenceDiagram_double_isDecisionNode",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__InfluenceDiagramT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InfluenceDiagram_double_isDecisionNode" "', argument " "1"" of type '" "gum::InfluenceDiagram< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::InfluenceDiagram< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InfluenceDiagram_double_isDecisionNode" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (bool)((gum::InfluenceDiagram< double > const *)arg1)->isDecisionNode(arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InfluenceDiagram_double_isChanceNode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::InfluenceDiagram< double > *arg1 = (gum::InfluenceDiagram< double > *) 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:InfluenceDiagram_double_isChanceNode",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__InfluenceDiagramT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InfluenceDiagram_double_isChanceNode" "', argument " "1"" of type '" "gum::InfluenceDiagram< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::InfluenceDiagram< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InfluenceDiagram_double_isChanceNode" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (bool)((gum::InfluenceDiagram< double > const *)arg1)->isChanceNode(arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InfluenceDiagram_double_utilityNodeSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::InfluenceDiagram< double > *arg1 = (gum::InfluenceDiagram< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::Size result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:InfluenceDiagram_double_utilityNodeSize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__InfluenceDiagramT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InfluenceDiagram_double_utilityNodeSize" "', argument " "1"" of type '" "gum::InfluenceDiagram< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::InfluenceDiagram< double > * >(argp1);
  {
    try {
      result = (gum::Size)((gum::InfluenceDiagram< double > const *)arg1)->utilityNodeSize();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InfluenceDiagram_double_chanceNodeSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::InfluenceDiagram< double > *arg1 = (gum::InfluenceDiagram< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::Size result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:InfluenceDiagram_double_chanceNodeSize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__InfluenceDiagramT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InfluenceDiagram_double_chanceNodeSize" "', argument " "1"" of type '" "gum::InfluenceDiagram< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::InfluenceDiagram< double > * >(argp1);
  {
    try {
      result = (gum::Size)((gum::InfluenceDiagram< double > const *)arg1)->chanceNodeSize();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InfluenceDiagram_double_decisionNodeSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::InfluenceDiagram< double > *arg1 = (gum::InfluenceDiagram< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::Size result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:InfluenceDiagram_double_decisionNodeSize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__InfluenceDiagramT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InfluenceDiagram_double_decisionNodeSize" "', argument " "1"" of type '" "gum::InfluenceDiagram< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::InfluenceDiagram< double > * >(argp1);
  {
    try {
      result = (gum::Size)((gum::InfluenceDiagram< double > const *)arg1)->decisionNodeSize();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InfluenceDiagram_double_variable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::InfluenceDiagram< double > *arg1 = (gum::InfluenceDiagram< double > *) 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::DiscreteVariable *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:InfluenceDiagram_double_variable",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__InfluenceDiagramT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InfluenceDiagram_double_variable" "', argument " "1"" of type '" "gum::InfluenceDiagram< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::InfluenceDiagram< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InfluenceDiagram_double_variable" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (gum::DiscreteVariable *) &((gum::InfluenceDiagram< double > const *)arg1)->variable(arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__DiscreteVariable, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InfluenceDiagram_double_nodeId(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::InfluenceDiagram< double > *arg1 = (gum::InfluenceDiagram< double > *) 0 ;
  gum::DiscreteVariable *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::NodeId result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:InfluenceDiagram_double_nodeId",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__InfluenceDiagramT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InfluenceDiagram_double_nodeId" "', argument " "1"" of type '" "gum::InfluenceDiagram< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::InfluenceDiagram< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__DiscreteVariable,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "InfluenceDiagram_double_nodeId" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "InfluenceDiagram_double_nodeId" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  arg2 = reinterpret_cast< gum::DiscreteVariable * >(argp2);
  {
    try {
      result = (gum::NodeId)((gum::InfluenceDiagram< double > const *)arg1)->nodeId((gum::DiscreteVariable const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InfluenceDiagram_double_idFromName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::InfluenceDiagram< double > *arg1 = (gum::InfluenceDiagram< double > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::NodeId result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:InfluenceDiagram_double_idFromName",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__InfluenceDiagramT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InfluenceDiagram_double_idFromName" "', argument " "1"" of type '" "gum::InfluenceDiagram< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::InfluenceDiagram< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "InfluenceDiagram_double_idFromName" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "InfluenceDiagram_double_idFromName" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (gum::NodeId)((gum::InfluenceDiagram< double > const *)arg1)->idFromName((std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_InfluenceDiagram_double_variableFromName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::InfluenceDiagram< double > *arg1 = (gum::InfluenceDiagram< double > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::DiscreteVariable *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:InfluenceDiagram_double_variableFromName",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__InfluenceDiagramT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InfluenceDiagram_double_variableFromName" "', argument " "1"" of type '" "gum::InfluenceDiagram< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::InfluenceDiagram< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "InfluenceDiagram_double_variableFromName" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "InfluenceDiagram_double_variableFromName" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (gum::DiscreteVariable *) &((gum::InfluenceDiagram< double > const *)arg1)->variableFromName((std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__DiscreteVariable, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_InfluenceDiagram_double_add__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::InfluenceDiagram< double > *arg1 = (gum::InfluenceDiagram< double > *) 0 ;
  gum::DiscreteVariable *arg2 = 0 ;
  gum::NodeId arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  gum::NodeId result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:InfluenceDiagram_double_add",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__InfluenceDiagramT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InfluenceDiagram_double_add" "', argument " "1"" of type '" "gum::InfluenceDiagram< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::InfluenceDiagram< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__DiscreteVariable,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "InfluenceDiagram_double_add" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "InfluenceDiagram_double_add" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  arg2 = reinterpret_cast< gum::DiscreteVariable * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "InfluenceDiagram_double_add" "', argument " "3"" of type '" "gum::NodeId""'");
  } 
  arg3 = static_cast< gum::NodeId >(val3);
  {
    try {
      result = (gum::NodeId)(arg1)->add((gum::DiscreteVariable const &)*arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InfluenceDiagram_double_add__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::InfluenceDiagram< double > *arg1 = (gum::InfluenceDiagram< double > *) 0 ;
  gum::DiscreteVariable *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::NodeId result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:InfluenceDiagram_double_add",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__InfluenceDiagramT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InfluenceDiagram_double_add" "', argument " "1"" of type '" "gum::InfluenceDiagram< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::InfluenceDiagram< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__DiscreteVariable,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "InfluenceDiagram_double_add" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "InfluenceDiagram_double_add" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  arg2 = reinterpret_cast< gum::DiscreteVariable * >(argp2);
  {
    try {
      result = (gum::NodeId)(arg1)->add((gum::DiscreteVariable const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InfluenceDiagram_double_add(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__InfluenceDiagramT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_gum__DiscreteVariable, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_InfluenceDiagram_double_add__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__InfluenceDiagramT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_gum__DiscreteVariable, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_InfluenceDiagram_double_add__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'InfluenceDiagram_double_add'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::InfluenceDiagram< double >::add(gum::DiscreteVariable const &,gum::NodeId)\n"
    "    gum::InfluenceDiagram< double >::add(gum::DiscreteVariable const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_InfluenceDiagram_double_addChanceNode__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::InfluenceDiagram< double > *arg1 = (gum::InfluenceDiagram< double > *) 0 ;
  gum::DiscreteVariable *arg2 = 0 ;
  gum::NodeId arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  gum::NodeId result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:InfluenceDiagram_double_addChanceNode",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__InfluenceDiagramT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InfluenceDiagram_double_addChanceNode" "', argument " "1"" of type '" "gum::InfluenceDiagram< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::InfluenceDiagram< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__DiscreteVariable,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "InfluenceDiagram_double_addChanceNode" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "InfluenceDiagram_double_addChanceNode" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  arg2 = reinterpret_cast< gum::DiscreteVariable * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "InfluenceDiagram_double_addChanceNode" "', argument " "3"" of type '" "gum::NodeId""'");
  } 
  arg3 = static_cast< gum::NodeId >(val3);
  {
    try {
      result = (gum::NodeId)(arg1)->addChanceNode((gum::DiscreteVariable const &)*arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InfluenceDiagram_double_addChanceNode__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::InfluenceDiagram< double > *arg1 = (gum::InfluenceDiagram< double > *) 0 ;
  gum::DiscreteVariable *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::NodeId result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:InfluenceDiagram_double_addChanceNode",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__InfluenceDiagramT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InfluenceDiagram_double_addChanceNode" "', argument " "1"" of type '" "gum::InfluenceDiagram< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::InfluenceDiagram< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__DiscreteVariable,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "InfluenceDiagram_double_addChanceNode" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "InfluenceDiagram_double_addChanceNode" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  arg2 = reinterpret_cast< gum::DiscreteVariable * >(argp2);
  {
    try {
      result = (gum::NodeId)(arg1)->addChanceNode((gum::DiscreteVariable const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InfluenceDiagram_double_addUtilityNode__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::InfluenceDiagram< double > *arg1 = (gum::InfluenceDiagram< double > *) 0 ;
  gum::DiscreteVariable *arg2 = 0 ;
  gum::NodeId arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  gum::NodeId result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:InfluenceDiagram_double_addUtilityNode",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__InfluenceDiagramT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InfluenceDiagram_double_addUtilityNode" "', argument " "1"" of type '" "gum::InfluenceDiagram< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::InfluenceDiagram< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__DiscreteVariable,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "InfluenceDiagram_double_addUtilityNode" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "InfluenceDiagram_double_addUtilityNode" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  arg2 = reinterpret_cast< gum::DiscreteVariable * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "InfluenceDiagram_double_addUtilityNode" "', argument " "3"" of type '" "gum::NodeId""'");
  } 
  arg3 = static_cast< gum::NodeId >(val3);
  {
    try {
      result = (gum::NodeId)(arg1)->addUtilityNode((gum::DiscreteVariable const &)*arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InfluenceDiagram_double_addUtilityNode__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::InfluenceDiagram< double > *arg1 = (gum::InfluenceDiagram< double > *) 0 ;
  gum::DiscreteVariable *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::NodeId result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:InfluenceDiagram_double_addUtilityNode",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__InfluenceDiagramT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InfluenceDiagram_double_addUtilityNode" "', argument " "1"" of type '" "gum::InfluenceDiagram< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::InfluenceDiagram< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__DiscreteVariable,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "InfluenceDiagram_double_addUtilityNode" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "InfluenceDiagram_double_addUtilityNode" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  arg2 = reinterpret_cast< gum::DiscreteVariable * >(argp2);
  {
    try {
      result = (gum::NodeId)(arg1)->addUtilityNode((gum::DiscreteVariable const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InfluenceDiagram_double_addDecisionNode__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::InfluenceDiagram< double > *arg1 = (gum::InfluenceDiagram< double > *) 0 ;
  gum::DiscreteVariable *arg2 = 0 ;
  gum::NodeId arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  gum::NodeId result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:InfluenceDiagram_double_addDecisionNode",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__InfluenceDiagramT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InfluenceDiagram_double_addDecisionNode" "', argument " "1"" of type '" "gum::InfluenceDiagram< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::InfluenceDiagram< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__DiscreteVariable,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "InfluenceDiagram_double_addDecisionNode" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "InfluenceDiagram_double_addDecisionNode" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  arg2 = reinterpret_cast< gum::DiscreteVariable * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "InfluenceDiagram_double_addDecisionNode" "', argument " "3"" of type '" "gum::NodeId""'");
  } 
  arg3 = static_cast< gum::NodeId >(val3);
  {
    try {
      result = (gum::NodeId)(arg1)->addDecisionNode((gum::DiscreteVariable const &)*arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InfluenceDiagram_double_addDecisionNode__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::InfluenceDiagram< double > *arg1 = (gum::InfluenceDiagram< double > *) 0 ;
  gum::DiscreteVariable *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::NodeId result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:InfluenceDiagram_double_addDecisionNode",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__InfluenceDiagramT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InfluenceDiagram_double_addDecisionNode" "', argument " "1"" of type '" "gum::InfluenceDiagram< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::InfluenceDiagram< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__DiscreteVariable,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "InfluenceDiagram_double_addDecisionNode" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "InfluenceDiagram_double_addDecisionNode" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  arg2 = reinterpret_cast< gum::DiscreteVariable * >(argp2);
  {
    try {
      result = (gum::NodeId)(arg1)->addDecisionNode((gum::DiscreteVariable const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InfluenceDiagram_double_addDecisionNode(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__InfluenceDiagramT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_gum__DiscreteVariable, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_InfluenceDiagram_double_addDecisionNode__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__InfluenceDiagramT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_gum__DiscreteVariable, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_InfluenceDiagram_double_addDecisionNode__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'InfluenceDiagram_double_addDecisionNode'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::InfluenceDiagram< double >::addDecisionNode(gum::DiscreteVariable const &,gum::NodeId)\n"
    "    gum::InfluenceDiagram< double >::addDecisionNode(gum::DiscreteVariable const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_InfluenceDiagram_double_addChanceNode__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::InfluenceDiagram< double > *arg1 = (gum::InfluenceDiagram< double > *) 0 ;
  gum::DiscreteVariable *arg2 = 0 ;
  gum::MultiDimImplementation< double > *arg3 = (gum::MultiDimImplementation< double > *) 0 ;
  gum::NodeId arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  gum::NodeId result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:InfluenceDiagram_double_addChanceNode",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__InfluenceDiagramT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InfluenceDiagram_double_addChanceNode" "', argument " "1"" of type '" "gum::InfluenceDiagram< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::InfluenceDiagram< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__DiscreteVariable,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "InfluenceDiagram_double_addChanceNode" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "InfluenceDiagram_double_addChanceNode" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  arg2 = reinterpret_cast< gum::DiscreteVariable * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_gum__MultiDimImplementationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "InfluenceDiagram_double_addChanceNode" "', argument " "3"" of type '" "gum::MultiDimImplementation< double > *""'"); 
  }
  arg3 = reinterpret_cast< gum::MultiDimImplementation< double > * >(argp3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "InfluenceDiagram_double_addChanceNode" "', argument " "4"" of type '" "gum::NodeId""'");
  } 
  arg4 = static_cast< gum::NodeId >(val4);
  {
    try {
      result = (gum::NodeId)(arg1)->addChanceNode((gum::DiscreteVariable const &)*arg2,arg3,arg4);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InfluenceDiagram_double_addChanceNode__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::InfluenceDiagram< double > *arg1 = (gum::InfluenceDiagram< double > *) 0 ;
  gum::DiscreteVariable *arg2 = 0 ;
  gum::MultiDimImplementation< double > *arg3 = (gum::MultiDimImplementation< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  gum::NodeId result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:InfluenceDiagram_double_addChanceNode",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__InfluenceDiagramT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InfluenceDiagram_double_addChanceNode" "', argument " "1"" of type '" "gum::InfluenceDiagram< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::InfluenceDiagram< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__DiscreteVariable,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "InfluenceDiagram_double_addChanceNode" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "InfluenceDiagram_double_addChanceNode" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  arg2 = reinterpret_cast< gum::DiscreteVariable * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_gum__MultiDimImplementationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "InfluenceDiagram_double_addChanceNode" "', argument " "3"" of type '" "gum::MultiDimImplementation< double > *""'"); 
  }
  arg3 = reinterpret_cast< gum::MultiDimImplementation< double > * >(argp3);
  {
    try {
      result = (gum::NodeId)(arg1)->addChanceNode((gum::DiscreteVariable const &)*arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InfluenceDiagram_double_addChanceNode(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__InfluenceDiagramT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_gum__DiscreteVariable, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_InfluenceDiagram_double_addChanceNode__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__InfluenceDiagramT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_gum__DiscreteVariable, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_gum__MultiDimImplementationT_double_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_InfluenceDiagram_double_addChanceNode__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__InfluenceDiagramT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_gum__DiscreteVariable, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_InfluenceDiagram_double_addChanceNode__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__InfluenceDiagramT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_gum__DiscreteVariable, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_gum__MultiDimImplementationT_double_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_InfluenceDiagram_double_addChanceNode__SWIG_2(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'InfluenceDiagram_double_addChanceNode'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::InfluenceDiagram< double >::addChanceNode(gum::DiscreteVariable const &,gum::NodeId)\n"
    "    gum::InfluenceDiagram< double >::addChanceNode(gum::DiscreteVariable const &)\n"
    "    gum::InfluenceDiagram< double >::addChanceNode(gum::DiscreteVariable const &,gum::MultiDimImplementation< double > *,gum::NodeId)\n"
    "    gum::InfluenceDiagram< double >::addChanceNode(gum::DiscreteVariable const &,gum::MultiDimImplementation< double > *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_InfluenceDiagram_double_addUtilityNode__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::InfluenceDiagram< double > *arg1 = (gum::InfluenceDiagram< double > *) 0 ;
  gum::DiscreteVariable *arg2 = 0 ;
  gum::MultiDimImplementation< double > *arg3 = (gum::MultiDimImplementation< double > *) 0 ;
  gum::NodeId arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  gum::NodeId result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:InfluenceDiagram_double_addUtilityNode",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__InfluenceDiagramT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InfluenceDiagram_double_addUtilityNode" "', argument " "1"" of type '" "gum::InfluenceDiagram< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::InfluenceDiagram< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__DiscreteVariable,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "InfluenceDiagram_double_addUtilityNode" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "InfluenceDiagram_double_addUtilityNode" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  arg2 = reinterpret_cast< gum::DiscreteVariable * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_gum__MultiDimImplementationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "InfluenceDiagram_double_addUtilityNode" "', argument " "3"" of type '" "gum::MultiDimImplementation< double > *""'"); 
  }
  arg3 = reinterpret_cast< gum::MultiDimImplementation< double > * >(argp3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "InfluenceDiagram_double_addUtilityNode" "', argument " "4"" of type '" "gum::NodeId""'");
  } 
  arg4 = static_cast< gum::NodeId >(val4);
  {
    try {
      result = (gum::NodeId)(arg1)->addUtilityNode((gum::DiscreteVariable const &)*arg2,arg3,arg4);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InfluenceDiagram_double_addUtilityNode__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::InfluenceDiagram< double > *arg1 = (gum::InfluenceDiagram< double > *) 0 ;
  gum::DiscreteVariable *arg2 = 0 ;
  gum::MultiDimImplementation< double > *arg3 = (gum::MultiDimImplementation< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  gum::NodeId result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:InfluenceDiagram_double_addUtilityNode",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__InfluenceDiagramT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InfluenceDiagram_double_addUtilityNode" "', argument " "1"" of type '" "gum::InfluenceDiagram< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::InfluenceDiagram< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__DiscreteVariable,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "InfluenceDiagram_double_addUtilityNode" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "InfluenceDiagram_double_addUtilityNode" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  arg2 = reinterpret_cast< gum::DiscreteVariable * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_gum__MultiDimImplementationT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "InfluenceDiagram_double_addUtilityNode" "', argument " "3"" of type '" "gum::MultiDimImplementation< double > *""'"); 
  }
  arg3 = reinterpret_cast< gum::MultiDimImplementation< double > * >(argp3);
  {
    try {
      result = (gum::NodeId)(arg1)->addUtilityNode((gum::DiscreteVariable const &)*arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InfluenceDiagram_double_addUtilityNode(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__InfluenceDiagramT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_gum__DiscreteVariable, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_InfluenceDiagram_double_addUtilityNode__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__InfluenceDiagramT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_gum__DiscreteVariable, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_gum__MultiDimImplementationT_double_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_InfluenceDiagram_double_addUtilityNode__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__InfluenceDiagramT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_gum__DiscreteVariable, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_InfluenceDiagram_double_addUtilityNode__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__InfluenceDiagramT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_gum__DiscreteVariable, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_gum__MultiDimImplementationT_double_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_InfluenceDiagram_double_addUtilityNode__SWIG_2(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'InfluenceDiagram_double_addUtilityNode'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::InfluenceDiagram< double >::addUtilityNode(gum::DiscreteVariable const &,gum::NodeId)\n"
    "    gum::InfluenceDiagram< double >::addUtilityNode(gum::DiscreteVariable const &)\n"
    "    gum::InfluenceDiagram< double >::addUtilityNode(gum::DiscreteVariable const &,gum::MultiDimImplementation< double > *,gum::NodeId)\n"
    "    gum::InfluenceDiagram< double >::addUtilityNode(gum::DiscreteVariable const &,gum::MultiDimImplementation< double > *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_InfluenceDiagram_double_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::InfluenceDiagram< double > *arg1 = (gum::InfluenceDiagram< double > *) 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:InfluenceDiagram_double_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__InfluenceDiagramT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InfluenceDiagram_double_erase" "', argument " "1"" of type '" "gum::InfluenceDiagram< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::InfluenceDiagram< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InfluenceDiagram_double_erase" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      (arg1)->erase(arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InfluenceDiagram_double_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::InfluenceDiagram< double > *arg1 = (gum::InfluenceDiagram< double > *) 0 ;
  gum::DiscreteVariable *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:InfluenceDiagram_double_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__InfluenceDiagramT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InfluenceDiagram_double_erase" "', argument " "1"" of type '" "gum::InfluenceDiagram< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::InfluenceDiagram< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__DiscreteVariable,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "InfluenceDiagram_double_erase" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "InfluenceDiagram_double_erase" "', argument " "2"" of type '" "gum::DiscreteVariable const &""'"); 
  }
  arg2 = reinterpret_cast< gum::DiscreteVariable * >(argp2);
  {
    try {
      (arg1)->erase((gum::DiscreteVariable const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InfluenceDiagram_double_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__InfluenceDiagramT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_gum__DiscreteVariable, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_InfluenceDiagram_double_erase__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__InfluenceDiagramT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_InfluenceDiagram_double_erase__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'InfluenceDiagram_double_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::InfluenceDiagram< double >::erase(gum::NodeId)\n"
    "    gum::InfluenceDiagram< double >::erase(gum::DiscreteVariable const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_InfluenceDiagram_double_changeVariableName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::InfluenceDiagram< double > *arg1 = (gum::InfluenceDiagram< double > *) 0 ;
  gum::NodeId arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:InfluenceDiagram_double_changeVariableName",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__InfluenceDiagramT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InfluenceDiagram_double_changeVariableName" "', argument " "1"" of type '" "gum::InfluenceDiagram< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::InfluenceDiagram< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InfluenceDiagram_double_changeVariableName" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "InfluenceDiagram_double_changeVariableName" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "InfluenceDiagram_double_changeVariableName" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->changeVariableName(arg2,(std::string const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_InfluenceDiagram_double_addArc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::InfluenceDiagram< double > *arg1 = (gum::InfluenceDiagram< double > *) 0 ;
  gum::NodeId arg2 ;
  gum::NodeId arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:InfluenceDiagram_double_addArc",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__InfluenceDiagramT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InfluenceDiagram_double_addArc" "', argument " "1"" of type '" "gum::InfluenceDiagram< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::InfluenceDiagram< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InfluenceDiagram_double_addArc" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "InfluenceDiagram_double_addArc" "', argument " "3"" of type '" "gum::NodeId""'");
  } 
  arg3 = static_cast< gum::NodeId >(val3);
  {
    try {
      (arg1)->addArc(arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InfluenceDiagram_double_eraseArc__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::InfluenceDiagram< double > *arg1 = (gum::InfluenceDiagram< double > *) 0 ;
  gum::Arc *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:InfluenceDiagram_double_eraseArc",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__InfluenceDiagramT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InfluenceDiagram_double_eraseArc" "', argument " "1"" of type '" "gum::InfluenceDiagram< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::InfluenceDiagram< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__Arc,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "InfluenceDiagram_double_eraseArc" "', argument " "2"" of type '" "gum::Arc const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "InfluenceDiagram_double_eraseArc" "', argument " "2"" of type '" "gum::Arc const &""'"); 
  }
  arg2 = reinterpret_cast< gum::Arc * >(argp2);
  {
    try {
      (arg1)->eraseArc((gum::Arc const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InfluenceDiagram_double_eraseArc__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::InfluenceDiagram< double > *arg1 = (gum::InfluenceDiagram< double > *) 0 ;
  gum::NodeId arg2 ;
  gum::NodeId arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:InfluenceDiagram_double_eraseArc",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__InfluenceDiagramT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InfluenceDiagram_double_eraseArc" "', argument " "1"" of type '" "gum::InfluenceDiagram< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::InfluenceDiagram< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InfluenceDiagram_double_eraseArc" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "InfluenceDiagram_double_eraseArc" "', argument " "3"" of type '" "gum::NodeId""'");
  } 
  arg3 = static_cast< gum::NodeId >(val3);
  {
    try {
      (arg1)->eraseArc(arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InfluenceDiagram_double_eraseArc(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__InfluenceDiagramT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_gum__Arc, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_InfluenceDiagram_double_eraseArc__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__InfluenceDiagramT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_InfluenceDiagram_double_eraseArc__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'InfluenceDiagram_double_eraseArc'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::InfluenceDiagram< double >::eraseArc(gum::Arc const &)\n"
    "    gum::InfluenceDiagram< double >::eraseArc(gum::NodeId,gum::NodeId)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_InfluenceDiagram_double_decisionOrderExists(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::InfluenceDiagram< double > *arg1 = (gum::InfluenceDiagram< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:InfluenceDiagram_double_decisionOrderExists",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__InfluenceDiagramT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InfluenceDiagram_double_decisionOrderExists" "', argument " "1"" of type '" "gum::InfluenceDiagram< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::InfluenceDiagram< double > * >(argp1);
  {
    try {
      result = (bool)((gum::InfluenceDiagram< double > const *)arg1)->decisionOrderExists();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InfluenceDiagram_double_getDecisionGraph(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::InfluenceDiagram< double > *arg1 = (gum::InfluenceDiagram< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::DAG *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:InfluenceDiagram_double_getDecisionGraph",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__InfluenceDiagramT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InfluenceDiagram_double_getDecisionGraph" "', argument " "1"" of type '" "gum::InfluenceDiagram< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::InfluenceDiagram< double > * >(argp1);
  {
    try {
      result = (gum::DAG *)((gum::InfluenceDiagram< double > const *)arg1)->getDecisionGraph();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__DAG, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InfluenceDiagram_double_getDecisionOrder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::InfluenceDiagram< double > *arg1 = (gum::InfluenceDiagram< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< gum::NodeId,std::allocator< gum::NodeId > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:InfluenceDiagram_double_getDecisionOrder",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__InfluenceDiagramT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InfluenceDiagram_double_getDecisionOrder" "', argument " "1"" of type '" "gum::InfluenceDiagram< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::InfluenceDiagram< double > * >(argp1);
  {
    try {
      result = (std::vector< gum::NodeId,std::allocator< gum::NodeId > > *)((gum::InfluenceDiagram< double > const *)arg1)->getDecisionOrder();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InfluenceDiagram_double_existsPathBetween(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::InfluenceDiagram< double > *arg1 = (gum::InfluenceDiagram< double > *) 0 ;
  gum::NodeId arg2 ;
  gum::NodeId arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:InfluenceDiagram_double_existsPathBetween",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__InfluenceDiagramT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InfluenceDiagram_double_existsPathBetween" "', argument " "1"" of type '" "gum::InfluenceDiagram< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::InfluenceDiagram< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InfluenceDiagram_double_existsPathBetween" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "InfluenceDiagram_double_existsPathBetween" "', argument " "3"" of type '" "gum::NodeId""'");
  } 
  arg3 = static_cast< gum::NodeId >(val3);
  {
    try {
      result = (bool)((gum::InfluenceDiagram< double > const *)arg1)->existsPathBetween(arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InfluenceDiagram_double_names(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::InfluenceDiagram< double > *arg1 = (gum::InfluenceDiagram< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:InfluenceDiagram_double_names",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__InfluenceDiagramT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InfluenceDiagram_double_names" "', argument " "1"" of type '" "gum::InfluenceDiagram< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::InfluenceDiagram< double > * >(argp1);
  {
    try {
      result = (PyObject *)gum_InfluenceDiagram_Sl_double_Sg__names((gum::InfluenceDiagram< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InfluenceDiagram_double_ids(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::InfluenceDiagram< double > *arg1 = (gum::InfluenceDiagram< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:InfluenceDiagram_double_ids",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__InfluenceDiagramT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InfluenceDiagram_double_ids" "', argument " "1"" of type '" "gum::InfluenceDiagram< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::InfluenceDiagram< double > * >(argp1);
  {
    try {
      result = (PyObject *)gum_InfluenceDiagram_Sl_double_Sg__ids(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InfluenceDiagram_double_arcs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::InfluenceDiagram< double > *arg1 = (gum::InfluenceDiagram< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:InfluenceDiagram_double_arcs",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__InfluenceDiagramT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InfluenceDiagram_double_arcs" "', argument " "1"" of type '" "gum::InfluenceDiagram< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::InfluenceDiagram< double > * >(argp1);
  {
    try {
      result = (PyObject *)gum_InfluenceDiagram_Sl_double_Sg__arcs(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InfluenceDiagram_double_parents(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::InfluenceDiagram< double > *arg1 = (gum::InfluenceDiagram< double > *) 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:InfluenceDiagram_double_parents",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__InfluenceDiagramT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InfluenceDiagram_double_parents" "', argument " "1"" of type '" "gum::InfluenceDiagram< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::InfluenceDiagram< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InfluenceDiagram_double_parents" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (PyObject *)gum_InfluenceDiagram_Sl_double_Sg__parents((gum::InfluenceDiagram< double > const *)arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InfluenceDiagram_double_children(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::InfluenceDiagram< double > *arg1 = (gum::InfluenceDiagram< double > *) 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:InfluenceDiagram_double_children",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__InfluenceDiagramT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InfluenceDiagram_double_children" "', argument " "1"" of type '" "gum::InfluenceDiagram< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::InfluenceDiagram< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InfluenceDiagram_double_children" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (PyObject *)gum_InfluenceDiagram_Sl_double_Sg__children((gum::InfluenceDiagram< double > const *)arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InfluenceDiagram_double_loadBIFXML__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::InfluenceDiagram< double > *arg1 = (gum::InfluenceDiagram< double > *) 0 ;
  std::string arg2 ;
  PyObject *arg3 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:InfluenceDiagram_double_loadBIFXML",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__InfluenceDiagramT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InfluenceDiagram_double_loadBIFXML" "', argument " "1"" of type '" "gum::InfluenceDiagram< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::InfluenceDiagram< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "InfluenceDiagram_double_loadBIFXML" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  arg3 = obj2;
  {
    try {
      result = (bool)gum_InfluenceDiagram_Sl_double_Sg__loadBIFXML__SWIG_0(arg1,arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InfluenceDiagram_double_loadBIFXML__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::InfluenceDiagram< double > *arg1 = (gum::InfluenceDiagram< double > *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:InfluenceDiagram_double_loadBIFXML",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__InfluenceDiagramT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InfluenceDiagram_double_loadBIFXML" "', argument " "1"" of type '" "gum::InfluenceDiagram< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::InfluenceDiagram< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "InfluenceDiagram_double_loadBIFXML" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (bool)gum_InfluenceDiagram_Sl_double_Sg__loadBIFXML__SWIG_0(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InfluenceDiagram_double_loadBIFXML(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__InfluenceDiagramT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_InfluenceDiagram_double_loadBIFXML__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__InfluenceDiagramT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        _v = (argv[2] != 0);
        if (_v) {
          return _wrap_InfluenceDiagram_double_loadBIFXML__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'InfluenceDiagram_double_loadBIFXML'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::InfluenceDiagram< double >::loadBIFXML(std::string,PyObject *)\n"
    "    gum::InfluenceDiagram< double >::loadBIFXML(std::string)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_InfluenceDiagram_double_saveBIFXML(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::InfluenceDiagram< double > *arg1 = (gum::InfluenceDiagram< double > *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:InfluenceDiagram_double_saveBIFXML",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__InfluenceDiagramT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InfluenceDiagram_double_saveBIFXML" "', argument " "1"" of type '" "gum::InfluenceDiagram< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::InfluenceDiagram< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "InfluenceDiagram_double_saveBIFXML" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      gum_InfluenceDiagram_Sl_double_Sg__saveBIFXML(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *InfluenceDiagram_double_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gum__InfluenceDiagramT_double_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_InfluenceDiagramInference_double(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::InfluenceDiagram< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::InfluenceDiagramInference< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_InfluenceDiagramInference_double",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_gum__InfluenceDiagramT_double_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_InfluenceDiagramInference_double" "', argument " "1"" of type '" "gum::InfluenceDiagram< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_InfluenceDiagramInference_double" "', argument " "1"" of type '" "gum::InfluenceDiagram< double > const &""'"); 
  }
  arg1 = reinterpret_cast< gum::InfluenceDiagram< double > * >(argp1);
  {
    try {
      result = (gum::InfluenceDiagramInference< double > *)new gum::InfluenceDiagramInference< double >((gum::InfluenceDiagram< double > const &)*arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__InfluenceDiagramInferenceT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_InfluenceDiagramInference_double(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::InfluenceDiagramInference< double > *arg1 = (gum::InfluenceDiagramInference< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_InfluenceDiagramInference_double",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__InfluenceDiagramInferenceT_double_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_InfluenceDiagramInference_double" "', argument " "1"" of type '" "gum::InfluenceDiagramInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::InfluenceDiagramInference< double > * >(argp1);
  {
    try {
      delete arg1;
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InfluenceDiagramInference_double_makeInference(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::InfluenceDiagramInference< double > *arg1 = (gum::InfluenceDiagramInference< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:InfluenceDiagramInference_double_makeInference",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__InfluenceDiagramInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InfluenceDiagramInference_double_makeInference" "', argument " "1"" of type '" "gum::InfluenceDiagramInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::InfluenceDiagramInference< double > * >(argp1);
  {
    try {
      (arg1)->makeInference();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InfluenceDiagramInference_double_getMEU(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::InfluenceDiagramInference< double > *arg1 = (gum::InfluenceDiagramInference< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:InfluenceDiagramInference_double_getMEU",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__InfluenceDiagramInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InfluenceDiagramInference_double_getMEU" "', argument " "1"" of type '" "gum::InfluenceDiagramInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::InfluenceDiagramInference< double > * >(argp1);
  {
    try {
      result = (double)(arg1)->getMEU();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InfluenceDiagramInference_double_getBestDecisionChoice(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::InfluenceDiagramInference< double > *arg1 = (gum::InfluenceDiagramInference< double > *) 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::Idx result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:InfluenceDiagramInference_double_getBestDecisionChoice",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__InfluenceDiagramInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InfluenceDiagramInference_double_getBestDecisionChoice" "', argument " "1"" of type '" "gum::InfluenceDiagramInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::InfluenceDiagramInference< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InfluenceDiagramInference_double_getBestDecisionChoice" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (gum::Idx)(arg1)->getBestDecisionChoice(arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InfluenceDiagramInference_double_displayResult(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::InfluenceDiagramInference< double > *arg1 = (gum::InfluenceDiagramInference< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:InfluenceDiagramInference_double_displayResult",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__InfluenceDiagramInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InfluenceDiagramInference_double_displayResult" "', argument " "1"" of type '" "gum::InfluenceDiagramInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::InfluenceDiagramInference< double > * >(argp1);
  {
    try {
      result = (arg1)->displayResult();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InfluenceDiagramInference_double_insertEvidence(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::InfluenceDiagramInference< double > *arg1 = (gum::InfluenceDiagramInference< double > *) 0 ;
  gum::List< gum::Potential< double > const * > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:InfluenceDiagramInference_double_insertEvidence",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__InfluenceDiagramInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InfluenceDiagramInference_double_insertEvidence" "', argument " "1"" of type '" "gum::InfluenceDiagramInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::InfluenceDiagramInference< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__ListT_gum__PotentialT_double_t_const_p_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "InfluenceDiagramInference_double_insertEvidence" "', argument " "2"" of type '" "gum::List< gum::Potential< double > const * > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "InfluenceDiagramInference_double_insertEvidence" "', argument " "2"" of type '" "gum::List< gum::Potential< double > const * > const &""'"); 
  }
  arg2 = reinterpret_cast< gum::List< gum::Potential< double > const * > * >(argp2);
  {
    try {
      (arg1)->insertEvidence((gum::List< gum::Potential< double > const * > const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InfluenceDiagramInference_double_eraseEvidence(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::InfluenceDiagramInference< double > *arg1 = (gum::InfluenceDiagramInference< double > *) 0 ;
  gum::Potential< double > *arg2 = (gum::Potential< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:InfluenceDiagramInference_double_eraseEvidence",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__InfluenceDiagramInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InfluenceDiagramInference_double_eraseEvidence" "', argument " "1"" of type '" "gum::InfluenceDiagramInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::InfluenceDiagramInference< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_gum__PotentialT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "InfluenceDiagramInference_double_eraseEvidence" "', argument " "2"" of type '" "gum::Potential< double > const *""'"); 
  }
  arg2 = reinterpret_cast< gum::Potential< double > * >(argp2);
  {
    try {
      (arg1)->eraseEvidence((gum::Potential< double > const *)arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InfluenceDiagramInference_double_eraseAllEvidence(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::InfluenceDiagramInference< double > *arg1 = (gum::InfluenceDiagramInference< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:InfluenceDiagramInference_double_eraseAllEvidence",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__InfluenceDiagramInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InfluenceDiagramInference_double_eraseAllEvidence" "', argument " "1"" of type '" "gum::InfluenceDiagramInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::InfluenceDiagramInference< double > * >(argp1);
  {
    try {
      (arg1)->eraseAllEvidence();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InfluenceDiagramInference_double_displayStrongJunctionTree(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::InfluenceDiagramInference< double > *arg1 = (gum::InfluenceDiagramInference< double > *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:InfluenceDiagramInference_double_displayStrongJunctionTree",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__InfluenceDiagramInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InfluenceDiagramInference_double_displayStrongJunctionTree" "', argument " "1"" of type '" "gum::InfluenceDiagramInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::InfluenceDiagramInference< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "InfluenceDiagramInference_double_displayStrongJunctionTree" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "InfluenceDiagramInference_double_displayStrongJunctionTree" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  {
    try {
      (arg1)->displayStrongJunctionTree(*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InfluenceDiagramInference_double_influenceDiagram(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::InfluenceDiagramInference< double > *arg1 = (gum::InfluenceDiagramInference< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::InfluenceDiagram< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:InfluenceDiagramInference_double_influenceDiagram",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__InfluenceDiagramInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InfluenceDiagramInference_double_influenceDiagram" "', argument " "1"" of type '" "gum::InfluenceDiagramInference< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::InfluenceDiagramInference< double > * >(argp1);
  {
    try {
      result = (gum::InfluenceDiagram< double > *) &gum_InfluenceDiagramInference_Sl_double_Sg__influenceDiagram((gum::InfluenceDiagramInference< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__InfluenceDiagramT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InfluenceDiagramInference_double_setEvidence(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::InfluenceDiagramInference< double > *arg1 = (gum::InfluenceDiagramInference< double > *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:InfluenceDiagramInference_double_setEvidence",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__InfluenceDiagramInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InfluenceDiagramInference_double_setEvidence" "', argument " "1"" of type '" "gum::InfluenceDiagramInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::InfluenceDiagramInference< double > * >(argp1);
  arg2 = obj1;
  {
    try {
      gum_InfluenceDiagramInference_Sl_double_Sg__setEvidence(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InfluenceDiagramInference_double__setEvidence(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::InfluenceDiagramInference< double > *arg1 = (gum::InfluenceDiagramInference< double > *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:InfluenceDiagramInference_double__setEvidence",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__InfluenceDiagramInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InfluenceDiagramInference_double__setEvidence" "', argument " "1"" of type '" "gum::InfluenceDiagramInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::InfluenceDiagramInference< double > * >(argp1);
  arg2 = obj1;
  {
    try {
      gum_InfluenceDiagramInference_Sl_double_Sg___setEvidence(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InfluenceDiagramInference_double_junctionTreeToDot(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::InfluenceDiagramInference< double > *arg1 = (gum::InfluenceDiagramInference< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:InfluenceDiagramInference_double_junctionTreeToDot",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__InfluenceDiagramInferenceT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InfluenceDiagramInference_double_junctionTreeToDot" "', argument " "1"" of type '" "gum::InfluenceDiagramInference< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::InfluenceDiagramInference< double > * >(argp1);
  {
    try {
      result = gum_InfluenceDiagramInference_Sl_double_Sg__junctionTreeToDot(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *InfluenceDiagramInference_double_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gum__InfluenceDiagramInferenceT_double_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_BNLearner_double__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  gum::learning::BNLearner< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_BNLearner_double",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_BNLearner_double" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_BNLearner_double" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (gum::learning::BNLearner< double > *)new gum::learning::BNLearner< double >((std::string const &)*arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__learning__BNLearnerT_double_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BNLearner_double__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::DatabaseVectInRAM *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::learning::BNLearner< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_BNLearner_double",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_gum__learning__DatabaseVectInRAM,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_BNLearner_double" "', argument " "1"" of type '" "gum::learning::DatabaseVectInRAM const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_BNLearner_double" "', argument " "1"" of type '" "gum::learning::DatabaseVectInRAM const &""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::DatabaseVectInRAM * >(argp1);
  {
    try {
      result = (gum::learning::BNLearner< double > *)new gum::learning::BNLearner< double >((gum::learning::DatabaseVectInRAM const &)*arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__learning__BNLearnerT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BNLearner_double__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  gum::NodeProperty< gum::Sequence< std::string > > *arg2 = 0 ;
  bool arg3 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  gum::learning::BNLearner< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_BNLearner_double",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_BNLearner_double" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_BNLearner_double" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_NodePropertyT_gum__SequenceT_std__string_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_BNLearner_double" "', argument " "2"" of type '" "gum::NodeProperty< gum::Sequence< std::string > > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_BNLearner_double" "', argument " "2"" of type '" "gum::NodeProperty< gum::Sequence< std::string > > const &""'"); 
  }
  arg2 = reinterpret_cast< gum::NodeProperty< gum::Sequence< std::string > > * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_BNLearner_double" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      result = (gum::learning::BNLearner< double > *)new gum::learning::BNLearner< double >((std::string const &)*arg1,(gum::NodeProperty< gum::Sequence< std::string > > const &)*arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__learning__BNLearnerT_double_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BNLearner_double__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  gum::NodeProperty< gum::Sequence< std::string > > *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::learning::BNLearner< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_BNLearner_double",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_BNLearner_double" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_BNLearner_double" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_NodePropertyT_gum__SequenceT_std__string_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_BNLearner_double" "', argument " "2"" of type '" "gum::NodeProperty< gum::Sequence< std::string > > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_BNLearner_double" "', argument " "2"" of type '" "gum::NodeProperty< gum::Sequence< std::string > > const &""'"); 
  }
  arg2 = reinterpret_cast< gum::NodeProperty< gum::Sequence< std::string > > * >(argp2);
  {
    try {
      result = (gum::learning::BNLearner< double > *)new gum::learning::BNLearner< double >((std::string const &)*arg1,(gum::NodeProperty< gum::Sequence< std::string > > const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__learning__BNLearnerT_double_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BNLearner_double__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  gum::BayesNet< double > *arg2 = 0 ;
  bool arg3 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  gum::learning::BNLearner< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_BNLearner_double",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_BNLearner_double" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_BNLearner_double" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__BayesNetT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_BNLearner_double" "', argument " "2"" of type '" "gum::BayesNet< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_BNLearner_double" "', argument " "2"" of type '" "gum::BayesNet< double > const &""'"); 
  }
  arg2 = reinterpret_cast< gum::BayesNet< double > * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_BNLearner_double" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      result = (gum::learning::BNLearner< double > *)new gum::learning::BNLearner< double >((std::string const &)*arg1,(gum::BayesNet< double > const &)*arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__learning__BNLearnerT_double_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BNLearner_double__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  gum::BayesNet< double > *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::learning::BNLearner< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_BNLearner_double",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_BNLearner_double" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_BNLearner_double" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__BayesNetT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_BNLearner_double" "', argument " "2"" of type '" "gum::BayesNet< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_BNLearner_double" "', argument " "2"" of type '" "gum::BayesNet< double > const &""'"); 
  }
  arg2 = reinterpret_cast< gum::BayesNet< double > * >(argp2);
  {
    try {
      result = (gum::learning::BNLearner< double > *)new gum::learning::BNLearner< double >((std::string const &)*arg1,(gum::BayesNet< double > const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__learning__BNLearnerT_double_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BNLearner_double__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::learning::BNLearner< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_BNLearner_double",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_gum__learning__BNLearnerT_double_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_BNLearner_double" "', argument " "1"" of type '" "gum::learning::BNLearner< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_BNLearner_double" "', argument " "1"" of type '" "gum::learning::BNLearner< double > const &""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  {
    try {
      result = (gum::learning::BNLearner< double > *)new gum::learning::BNLearner< double >((gum::learning::BNLearner< double > const &)*arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__learning__BNLearnerT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BNLearner_double__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::learning::BNLearner< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_BNLearner_double",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_gum__learning__BNLearnerT_double_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_BNLearner_double" "', argument " "1"" of type '" "gum::learning::BNLearner< double > &&""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_BNLearner_double" "', argument " "1"" of type '" "gum::learning::BNLearner< double > &&""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  {
    try {
      result = (gum::learning::BNLearner< double > *)new gum::learning::BNLearner< double >((gum::learning::BNLearner< double > &&)*arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gum__learning__BNLearnerT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BNLearner_double(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_gum__learning__DatabaseVectInRAM, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_BNLearner_double__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_BNLearner_double__SWIG_6(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_BNLearner_double__SWIG_7(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_BNLearner_double__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_NodePropertyT_gum__SequenceT_std__string_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_BNLearner_double__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_gum__BayesNetT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_BNLearner_double__SWIG_5(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_gum__BayesNetT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_BNLearner_double__SWIG_4(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_NodePropertyT_gum__SequenceT_std__string_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_BNLearner_double__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_BNLearner_double'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::learning::BNLearner< double >::BNLearner(std::string const &)\n"
    "    gum::learning::BNLearner< double >::BNLearner(gum::learning::DatabaseVectInRAM const &)\n"
    "    gum::learning::BNLearner< double >::BNLearner(std::string const &,gum::NodeProperty< gum::Sequence< std::string > > const &,bool)\n"
    "    gum::learning::BNLearner< double >::BNLearner(std::string const &,gum::NodeProperty< gum::Sequence< std::string > > const &)\n"
    "    gum::learning::BNLearner< double >::BNLearner(std::string const &,gum::BayesNet< double > const &,bool)\n"
    "    gum::learning::BNLearner< double >::BNLearner(std::string const &,gum::BayesNet< double > const &)\n"
    "    gum::learning::BNLearner< double >::BNLearner(gum::learning::BNLearner< double > const &)\n"
    "    gum::learning::BNLearner< double >::BNLearner(gum::learning::BNLearner< double > &&)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_BNLearner_double(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = (gum::learning::BNLearner< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_BNLearner_double",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_BNLearner_double" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  {
    try {
      delete arg1;
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_double_learnBN(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = (gum::learning::BNLearner< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::BayesNet< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BNLearner_double_learnBN",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_double_learnBN" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  {
    try {
      result = (arg1)->learnBN();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::BayesNet< double >(static_cast< const gum::BayesNet< double >& >(result))), SWIGTYPE_p_gum__BayesNetT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_double_learnParameters__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = (gum::learning::BNLearner< double > *) 0 ;
  gum::DAG *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  gum::BayesNet< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BNLearner_double_learnParameters",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_double_learnParameters" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__DAG,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BNLearner_double_learnParameters" "', argument " "2"" of type '" "gum::DAG const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BNLearner_double_learnParameters" "', argument " "2"" of type '" "gum::DAG const &""'"); 
  }
  arg2 = reinterpret_cast< gum::DAG * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BNLearner_double_learnParameters" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      result = (arg1)->learnParameters((gum::DAG const &)*arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::BayesNet< double >(static_cast< const gum::BayesNet< double >& >(result))), SWIGTYPE_p_gum__BayesNetT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_double_learnParameters__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = (gum::learning::BNLearner< double > *) 0 ;
  gum::DAG *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::BayesNet< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BNLearner_double_learnParameters",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_double_learnParameters" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__DAG,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BNLearner_double_learnParameters" "', argument " "2"" of type '" "gum::DAG const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BNLearner_double_learnParameters" "', argument " "2"" of type '" "gum::DAG const &""'"); 
  }
  arg2 = reinterpret_cast< gum::DAG * >(argp2);
  {
    try {
      result = (arg1)->learnParameters((gum::DAG const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::BayesNet< double >(static_cast< const gum::BayesNet< double >& >(result))), SWIGTYPE_p_gum__BayesNetT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_double_learnParameters__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = (gum::learning::BNLearner< double > *) 0 ;
  gum::BayesNet< double > *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  gum::BayesNet< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BNLearner_double_learnParameters",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_double_learnParameters" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__BayesNetT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BNLearner_double_learnParameters" "', argument " "2"" of type '" "gum::BayesNet< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BNLearner_double_learnParameters" "', argument " "2"" of type '" "gum::BayesNet< double > const &""'"); 
  }
  arg2 = reinterpret_cast< gum::BayesNet< double > * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BNLearner_double_learnParameters" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      result = (arg1)->learnParameters((gum::BayesNet< double > const &)*arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::BayesNet< double >(static_cast< const gum::BayesNet< double >& >(result))), SWIGTYPE_p_gum__BayesNetT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_double_learnParameters__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = (gum::learning::BNLearner< double > *) 0 ;
  gum::BayesNet< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::BayesNet< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BNLearner_double_learnParameters",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_double_learnParameters" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__BayesNetT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BNLearner_double_learnParameters" "', argument " "2"" of type '" "gum::BayesNet< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BNLearner_double_learnParameters" "', argument " "2"" of type '" "gum::BayesNet< double > const &""'"); 
  }
  arg2 = reinterpret_cast< gum::BayesNet< double > * >(argp2);
  {
    try {
      result = (arg1)->learnParameters((gum::BayesNet< double > const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::BayesNet< double >(static_cast< const gum::BayesNet< double >& >(result))), SWIGTYPE_p_gum__BayesNetT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_double_learnParameters(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_gum__DAG, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_BNLearner_double_learnParameters__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_gum__BayesNetT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_BNLearner_double_learnParameters__SWIG_3(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_gum__BayesNetT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_BNLearner_double_learnParameters__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_gum__DAG, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_BNLearner_double_learnParameters__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'BNLearner_double_learnParameters'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::learning::BNLearner< double >::learnParameters(gum::DAG const &,bool)\n"
    "    gum::learning::BNLearner< double >::learnParameters(gum::DAG const &)\n"
    "    gum::learning::BNLearner< double >::learnParameters(gum::BayesNet< double > const &,bool)\n"
    "    gum::learning::BNLearner< double >::learnParameters(gum::BayesNet< double > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BNLearner_double_setSliceOrder__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = (gum::learning::BNLearner< double > *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BNLearner_double_setSliceOrder",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_double_setSliceOrder" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  arg2 = obj1;
  {
    try {
      gum_learning_BNLearner_Sl_double_Sg__setSliceOrder__SWIG_0(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_double_useK2__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = (gum::learning::BNLearner< double > *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BNLearner_double_useK2",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_double_useK2" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  arg2 = obj1;
  {
    try {
      gum_learning_BNLearner_Sl_double_Sg__useK2__SWIG_0(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_double_setVerbosity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = (gum::learning::BNLearner< double > *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BNLearner_double_setVerbosity",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_double_setVerbosity" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BNLearner_double_setVerbosity" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      gum_learning_BNLearner_Sl_double_Sg__setVerbosity(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_double_setEpsilon(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = (gum::learning::BNLearner< double > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BNLearner_double_setEpsilon",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_double_setEpsilon" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BNLearner_double_setEpsilon" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      gum_learning_BNLearner_Sl_double_Sg__setEpsilon(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_double_setMinEpsilonRate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = (gum::learning::BNLearner< double > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BNLearner_double_setMinEpsilonRate",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_double_setMinEpsilonRate" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BNLearner_double_setMinEpsilonRate" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      gum_learning_BNLearner_Sl_double_Sg__setMinEpsilonRate(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_double_setMaxIter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = (gum::learning::BNLearner< double > *) 0 ;
  gum::Size arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BNLearner_double_setMaxIter",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_double_setMaxIter" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BNLearner_double_setMaxIter" "', argument " "2"" of type '" "gum::Size""'");
  } 
  arg2 = static_cast< gum::Size >(val2);
  {
    try {
      gum_learning_BNLearner_Sl_double_Sg__setMaxIter(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_double_setMaxTime__SWIG_0_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = (gum::learning::BNLearner< double > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BNLearner_double_setMaxTime",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_double_setMaxTime" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BNLearner_double_setMaxTime" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      gum_learning_BNLearner_Sl_double_Sg__setMaxTime__SWIG_0_0(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_double_setMaxTime(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_BNLearner_double_setMaxTime__SWIG_0_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'BNLearner_double_setMaxTime'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    setMaxTime(double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BNLearner_double_setPeriodSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = (gum::learning::BNLearner< double > *) 0 ;
  gum::Size arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BNLearner_double_setPeriodSize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_double_setPeriodSize" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BNLearner_double_setPeriodSize" "', argument " "2"" of type '" "gum::Size""'");
  } 
  arg2 = static_cast< gum::Size >(val2);
  {
    try {
      gum_learning_BNLearner_Sl_double_Sg__setPeriodSize(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_double_setBurnIn(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = (gum::learning::BNLearner< double > *) 0 ;
  gum::Size arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BNLearner_double_setBurnIn",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_double_setBurnIn" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BNLearner_double_setBurnIn" "', argument " "2"" of type '" "gum::Size""'");
  } 
  arg2 = static_cast< gum::Size >(val2);
  {
    try {
      gum_learning_BNLearner_Sl_double_Sg__setBurnIn(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_double_verbosity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = (gum::learning::BNLearner< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BNLearner_double_verbosity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_double_verbosity" "', argument " "1"" of type '" "gum::learning::BNLearner< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  {
    try {
      result = (bool)gum_learning_BNLearner_Sl_double_Sg__verbosity((gum::learning::BNLearner< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_double_epsilon(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = (gum::learning::BNLearner< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BNLearner_double_epsilon",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_double_epsilon" "', argument " "1"" of type '" "gum::learning::BNLearner< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  {
    try {
      result = (double)gum_learning_BNLearner_Sl_double_Sg__epsilon((gum::learning::BNLearner< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_double_minEpsilonRate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = (gum::learning::BNLearner< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BNLearner_double_minEpsilonRate",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_double_minEpsilonRate" "', argument " "1"" of type '" "gum::learning::BNLearner< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  {
    try {
      result = (double)gum_learning_BNLearner_Sl_double_Sg__minEpsilonRate((gum::learning::BNLearner< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_double_maxIter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = (gum::learning::BNLearner< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::Size result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BNLearner_double_maxIter",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_double_maxIter" "', argument " "1"" of type '" "gum::learning::BNLearner< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  {
    try {
      result = (gum::Size)gum_learning_BNLearner_Sl_double_Sg__maxIter((gum::learning::BNLearner< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_double_maxTime__SWIG_0_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = (gum::learning::BNLearner< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BNLearner_double_maxTime",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_double_maxTime" "', argument " "1"" of type '" "gum::learning::BNLearner< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  {
    try {
      result = (double)gum_learning_BNLearner_Sl_double_Sg__maxTime__SWIG_0_0((gum::learning::BNLearner< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_double_maxTime(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_BNLearner_double_maxTime__SWIG_0_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'BNLearner_double_maxTime'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    maxTime() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BNLearner_double_periodSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = (gum::learning::BNLearner< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::Size result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BNLearner_double_periodSize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_double_periodSize" "', argument " "1"" of type '" "gum::learning::BNLearner< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  {
    try {
      result = (gum::Size)gum_learning_BNLearner_Sl_double_Sg__periodSize((gum::learning::BNLearner< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_double_burnIn(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = (gum::learning::BNLearner< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::Size result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BNLearner_double_burnIn",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_double_burnIn" "', argument " "1"" of type '" "gum::learning::BNLearner< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  {
    try {
      result = (gum::Size)gum_learning_BNLearner_Sl_double_Sg__burnIn((gum::learning::BNLearner< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_double_nbrIterations(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = (gum::learning::BNLearner< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::Size result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BNLearner_double_nbrIterations",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_double_nbrIterations" "', argument " "1"" of type '" "gum::learning::BNLearner< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  {
    try {
      result = (gum::Size)gum_learning_BNLearner_Sl_double_Sg__nbrIterations((gum::learning::BNLearner< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_double_currentTime__SWIG_0_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = (gum::learning::BNLearner< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BNLearner_double_currentTime",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_double_currentTime" "', argument " "1"" of type '" "gum::learning::BNLearner< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  {
    try {
      result = (double)gum_learning_BNLearner_Sl_double_Sg__currentTime__SWIG_0_0((gum::learning::BNLearner< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_double_currentTime(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_BNLearner_double_currentTime__SWIG_0_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'BNLearner_double_currentTime'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    currentTime() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BNLearner_double_messageApproximationScheme(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = (gum::learning::BNLearner< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BNLearner_double_messageApproximationScheme",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_double_messageApproximationScheme" "', argument " "1"" of type '" "gum::learning::BNLearner< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  {
    try {
      result = gum_learning_BNLearner_Sl_double_Sg__messageApproximationScheme((gum::learning::BNLearner< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_double_history(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = (gum::learning::BNLearner< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double,std::allocator< double > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BNLearner_double_history",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_double_history" "', argument " "1"" of type '" "gum::learning::BNLearner< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  {
    try {
      result = (std::vector< double,std::allocator< double > > *) &gum_learning_BNLearner_Sl_double_Sg__history((gum::learning::BNLearner< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< double,std::allocator< double > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_double_learnDAG(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = (gum::learning::BNLearner< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gum::DAG result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BNLearner_double_learnDAG",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_double_learnDAG" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  {
    try {
      result = gum_learning_BNLearner_Sl_double_Sg__learnDAG(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new gum::DAG(static_cast< const gum::DAG& >(result))), SWIGTYPE_p_gum__DAG, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_double_names(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = (gum::learning::BNLearner< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BNLearner_double_names",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_double_names" "', argument " "1"" of type '" "gum::learning::BNLearner< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  {
    try {
      result = (std::vector< std::string,std::allocator< std::string > > *) &gum_learning_BNLearner_Sl_double_Sg__names((gum::learning::BNLearner< double > const *)arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector< std::string,std::allocator< std::string > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_double_modalities(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = (gum::learning::BNLearner< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< gum::Size,std::allocator< gum::Size > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BNLearner_double_modalities",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_double_modalities" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  {
    try {
      result = (std::vector< gum::Size,std::allocator< gum::Size > > *) &gum_learning_BNLearner_Sl_double_Sg__modalities(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_double_idFromName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = (gum::learning::BNLearner< double > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gum::NodeId result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BNLearner_double_idFromName",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_double_idFromName" "', argument " "1"" of type '" "gum::learning::BNLearner< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BNLearner_double_idFromName" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BNLearner_double_idFromName" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (gum::NodeId)gum_learning_BNLearner_Sl_double_Sg__idFromName((gum::learning::BNLearner< double > const *)arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_double_nameFromId(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = (gum::learning::BNLearner< double > *) 0 ;
  gum::NodeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BNLearner_double_nameFromId",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_double_nameFromId" "', argument " "1"" of type '" "gum::learning::BNLearner< double > const *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BNLearner_double_nameFromId" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  {
    try {
      result = (std::string *) &gum_learning_BNLearner_Sl_double_Sg__nameFromId((gum::learning::BNLearner< double > const *)arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_double_useScoreAIC(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = (gum::learning::BNLearner< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BNLearner_double_useScoreAIC",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_double_useScoreAIC" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  {
    try {
      gum_learning_BNLearner_Sl_double_Sg__useScoreAIC(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_double_useScoreBD(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = (gum::learning::BNLearner< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BNLearner_double_useScoreBD",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_double_useScoreBD" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  {
    try {
      gum_learning_BNLearner_Sl_double_Sg__useScoreBD(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_double_useScoreBDeu(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = (gum::learning::BNLearner< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BNLearner_double_useScoreBDeu",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_double_useScoreBDeu" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  {
    try {
      gum_learning_BNLearner_Sl_double_Sg__useScoreBDeu(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_double_useScoreBIC(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = (gum::learning::BNLearner< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BNLearner_double_useScoreBIC",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_double_useScoreBIC" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  {
    try {
      gum_learning_BNLearner_Sl_double_Sg__useScoreBIC(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_double_useScoreK2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = (gum::learning::BNLearner< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BNLearner_double_useScoreK2",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_double_useScoreK2" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  {
    try {
      gum_learning_BNLearner_Sl_double_Sg__useScoreK2(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_double_useScoreLog2Likelihood(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = (gum::learning::BNLearner< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BNLearner_double_useScoreLog2Likelihood",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_double_useScoreLog2Likelihood" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  {
    try {
      gum_learning_BNLearner_Sl_double_Sg__useScoreLog2Likelihood(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_double_setAprioriWeight(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = (gum::learning::BNLearner< double > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BNLearner_double_setAprioriWeight",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_double_setAprioriWeight" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BNLearner_double_setAprioriWeight" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      gum_learning_BNLearner_Sl_double_Sg__setAprioriWeight(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_double_useNoApriori(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = (gum::learning::BNLearner< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BNLearner_double_useNoApriori",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_double_useNoApriori" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  {
    try {
      gum_learning_BNLearner_Sl_double_Sg__useNoApriori(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_double_useAprioriSmoothing_SWIG_0_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = (gum::learning::BNLearner< double > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BNLearner_double_useAprioriSmoothing",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_double_useAprioriSmoothing" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BNLearner_double_useAprioriSmoothing" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      gum_learning_BNLearner_Sl_double_Sg__useAprioriSmoothing_SWIG_0_0(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_double_useAprioriSmoothing_SWIG_0_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = (gum::learning::BNLearner< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BNLearner_double_useAprioriSmoothing",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_double_useAprioriSmoothing" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  {
    try {
      gum_learning_BNLearner_Sl_double_Sg__useAprioriSmoothing_SWIG_0_1(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_double_useAprioriSmoothing(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_BNLearner_double_useAprioriSmoothing_SWIG_0_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_BNLearner_double_useAprioriSmoothing_SWIG_0_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'BNLearner_double_useAprioriSmoothing'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    useAprioriSmoothing(double)\n"
    "    useAprioriSmoothing()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BNLearner_double_useAprioriDirichlet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = (gum::learning::BNLearner< double > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BNLearner_double_useAprioriDirichlet",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_double_useAprioriDirichlet" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BNLearner_double_useAprioriDirichlet" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BNLearner_double_useAprioriDirichlet" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      gum_learning_BNLearner_Sl_double_Sg__useAprioriDirichlet(arg1,(std::string const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_double_useGreedyHillClimbing(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = (gum::learning::BNLearner< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BNLearner_double_useGreedyHillClimbing",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_double_useGreedyHillClimbing" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  {
    try {
      gum_learning_BNLearner_Sl_double_Sg__useGreedyHillClimbing(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_double_useLocalSearchWithTabuList_SWIG_0_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = (gum::learning::BNLearner< double > *) 0 ;
  gum::Size arg2 ;
  gum::Size arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BNLearner_double_useLocalSearchWithTabuList",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_double_useLocalSearchWithTabuList" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BNLearner_double_useLocalSearchWithTabuList" "', argument " "2"" of type '" "gum::Size""'");
  } 
  arg2 = static_cast< gum::Size >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BNLearner_double_useLocalSearchWithTabuList" "', argument " "3"" of type '" "gum::Size""'");
  } 
  arg3 = static_cast< gum::Size >(val3);
  {
    try {
      gum_learning_BNLearner_Sl_double_Sg__useLocalSearchWithTabuList_SWIG_0_0(arg1,arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_double_useLocalSearchWithTabuList_SWIG_0_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = (gum::learning::BNLearner< double > *) 0 ;
  gum::Size arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BNLearner_double_useLocalSearchWithTabuList",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_double_useLocalSearchWithTabuList" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BNLearner_double_useLocalSearchWithTabuList" "', argument " "2"" of type '" "gum::Size""'");
  } 
  arg2 = static_cast< gum::Size >(val2);
  {
    try {
      gum_learning_BNLearner_Sl_double_Sg__useLocalSearchWithTabuList_SWIG_0_1(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_double_useLocalSearchWithTabuList_SWIG_0_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = (gum::learning::BNLearner< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BNLearner_double_useLocalSearchWithTabuList",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_double_useLocalSearchWithTabuList" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  {
    try {
      gum_learning_BNLearner_Sl_double_Sg__useLocalSearchWithTabuList_SWIG_0_2(arg1);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_double_useLocalSearchWithTabuList(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_BNLearner_double_useLocalSearchWithTabuList_SWIG_0_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_BNLearner_double_useLocalSearchWithTabuList_SWIG_0_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_BNLearner_double_useLocalSearchWithTabuList_SWIG_0_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'BNLearner_double_useLocalSearchWithTabuList'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    useLocalSearchWithTabuList(gum::Size,gum::Size)\n"
    "    useLocalSearchWithTabuList(gum::Size)\n"
    "    useLocalSearchWithTabuList()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BNLearner_double_useK2__SWIG_1_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = (gum::learning::BNLearner< double > *) 0 ;
  gum::Sequence< gum::NodeId > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BNLearner_double_useK2",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_double_useK2" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__SequenceT_unsigned_int_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BNLearner_double_useK2" "', argument " "2"" of type '" "gum::Sequence< gum::NodeId > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BNLearner_double_useK2" "', argument " "2"" of type '" "gum::Sequence< gum::NodeId > const &""'"); 
  }
  arg2 = reinterpret_cast< gum::Sequence< gum::NodeId > * >(argp2);
  {
    try {
      gum_learning_BNLearner_Sl_double_Sg__useK2__SWIG_1_0(arg1,(gum::Sequence< unsigned int > const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_double_useK2__SWIG_1_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = (gum::learning::BNLearner< double > *) 0 ;
  std::vector< gum::NodeId,std::allocator< gum::NodeId > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BNLearner_double_useK2",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_double_useK2" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BNLearner_double_useK2" "', argument " "2"" of type '" "std::vector< gum::NodeId,std::allocator< gum::NodeId > > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BNLearner_double_useK2" "', argument " "2"" of type '" "std::vector< gum::NodeId,std::allocator< gum::NodeId > > const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< gum::NodeId,std::allocator< gum::NodeId > > * >(argp2);
  {
    try {
      gum_learning_BNLearner_Sl_double_Sg__useK2__SWIG_1_1(arg1,(std::vector< unsigned int,std::allocator< unsigned int > > const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_double_useK2(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_gum__SequenceT_unsigned_int_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_BNLearner_double_useK2__SWIG_1_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_BNLearner_double_useK2__SWIG_1_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = (argv[1] != 0);
      if (_v) {
        return _wrap_BNLearner_double_useK2__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'BNLearner_double_useK2'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::learning::BNLearner< double >::useK2(PyObject *)\n"
    "    useK2(gum::Sequence< gum::NodeId > const &)\n"
    "    useK2(std::vector< gum::NodeId,std::allocator< gum::NodeId > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BNLearner_double_setMaxIndegree(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = (gum::learning::BNLearner< double > *) 0 ;
  gum::Size arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BNLearner_double_setMaxIndegree",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_double_setMaxIndegree" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BNLearner_double_setMaxIndegree" "', argument " "2"" of type '" "gum::Size""'");
  } 
  arg2 = static_cast< gum::Size >(val2);
  {
    try {
      gum_learning_BNLearner_Sl_double_Sg__setMaxIndegree(arg1,arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_double_setSliceOrder__SWIG_1_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = (gum::learning::BNLearner< double > *) 0 ;
  gum::NodeProperty< gum::NodeId > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BNLearner_double_setSliceOrder",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_double_setSliceOrder" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_NodePropertyT_unsigned_int_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BNLearner_double_setSliceOrder" "', argument " "2"" of type '" "gum::NodeProperty< gum::NodeId > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BNLearner_double_setSliceOrder" "', argument " "2"" of type '" "gum::NodeProperty< gum::NodeId > const &""'"); 
  }
  arg2 = reinterpret_cast< gum::NodeProperty< gum::NodeId > * >(argp2);
  {
    try {
      gum_learning_BNLearner_Sl_double_Sg__setSliceOrder__SWIG_1_0(arg1,(gum::NodeProperty< unsigned int > const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_double_setSliceOrder(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_NodePropertyT_unsigned_int_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_BNLearner_double_setSliceOrder__SWIG_1_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = (argv[1] != 0);
      if (_v) {
        return _wrap_BNLearner_double_setSliceOrder__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'BNLearner_double_setSliceOrder'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gum::learning::BNLearner< double >::setSliceOrder(PyObject *)\n"
    "    setSliceOrder(gum::NodeProperty< gum::NodeId > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BNLearner_double_addForbiddenArc_SWIG_0_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = (gum::learning::BNLearner< double > *) 0 ;
  gum::Arc *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BNLearner_double_addForbiddenArc",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_double_addForbiddenArc" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__Arc,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BNLearner_double_addForbiddenArc" "', argument " "2"" of type '" "gum::Arc const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BNLearner_double_addForbiddenArc" "', argument " "2"" of type '" "gum::Arc const &""'"); 
  }
  arg2 = reinterpret_cast< gum::Arc * >(argp2);
  {
    try {
      gum_learning_BNLearner_Sl_double_Sg__addForbiddenArc_SWIG_0_0(arg1,(gum::Arc const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_double_addForbiddenArc_SWIG_0_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = (gum::learning::BNLearner< double > *) 0 ;
  gum::NodeId arg2 ;
  gum::NodeId arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BNLearner_double_addForbiddenArc",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_double_addForbiddenArc" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BNLearner_double_addForbiddenArc" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BNLearner_double_addForbiddenArc" "', argument " "3"" of type '" "gum::NodeId""'");
  } 
  arg3 = static_cast< gum::NodeId >(val3);
  {
    try {
      gum_learning_BNLearner_Sl_double_Sg__addForbiddenArc_SWIG_0_1(arg1,arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_double_addForbiddenArc_SWIG_0_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = (gum::learning::BNLearner< double > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BNLearner_double_addForbiddenArc",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_double_addForbiddenArc" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BNLearner_double_addForbiddenArc" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BNLearner_double_addForbiddenArc" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BNLearner_double_addForbiddenArc" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BNLearner_double_addForbiddenArc" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      gum_learning_BNLearner_Sl_double_Sg__addForbiddenArc_SWIG_0_2(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_double_addForbiddenArc(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_gum__Arc, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_BNLearner_double_addForbiddenArc_SWIG_0_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_BNLearner_double_addForbiddenArc_SWIG_0_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_BNLearner_double_addForbiddenArc_SWIG_0_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'BNLearner_double_addForbiddenArc'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    addForbiddenArc(gum::Arc const &)\n"
    "    addForbiddenArc(gum::NodeId const,gum::NodeId const)\n"
    "    addForbiddenArc(std::string const &,std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BNLearner_double_eraseForbiddenArc_SWIG_0_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = (gum::learning::BNLearner< double > *) 0 ;
  gum::Arc *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BNLearner_double_eraseForbiddenArc",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_double_eraseForbiddenArc" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__Arc,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BNLearner_double_eraseForbiddenArc" "', argument " "2"" of type '" "gum::Arc const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BNLearner_double_eraseForbiddenArc" "', argument " "2"" of type '" "gum::Arc const &""'"); 
  }
  arg2 = reinterpret_cast< gum::Arc * >(argp2);
  {
    try {
      gum_learning_BNLearner_Sl_double_Sg__eraseForbiddenArc_SWIG_0_0(arg1,(gum::Arc const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_double_eraseForbiddenArc_SWIG_0_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = (gum::learning::BNLearner< double > *) 0 ;
  gum::NodeId arg2 ;
  gum::NodeId arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BNLearner_double_eraseForbiddenArc",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_double_eraseForbiddenArc" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BNLearner_double_eraseForbiddenArc" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BNLearner_double_eraseForbiddenArc" "', argument " "3"" of type '" "gum::NodeId""'");
  } 
  arg3 = static_cast< gum::NodeId >(val3);
  {
    try {
      gum_learning_BNLearner_Sl_double_Sg__eraseForbiddenArc_SWIG_0_1(arg1,arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_double_eraseForbiddenArc_SWIG_0_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = (gum::learning::BNLearner< double > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BNLearner_double_eraseForbiddenArc",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_double_eraseForbiddenArc" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BNLearner_double_eraseForbiddenArc" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BNLearner_double_eraseForbiddenArc" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BNLearner_double_eraseForbiddenArc" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BNLearner_double_eraseForbiddenArc" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      gum_learning_BNLearner_Sl_double_Sg__eraseForbiddenArc_SWIG_0_2(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_double_eraseForbiddenArc(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_gum__Arc, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_BNLearner_double_eraseForbiddenArc_SWIG_0_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_BNLearner_double_eraseForbiddenArc_SWIG_0_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_BNLearner_double_eraseForbiddenArc_SWIG_0_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'BNLearner_double_eraseForbiddenArc'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    eraseForbiddenArc(gum::Arc const &)\n"
    "    eraseForbiddenArc(gum::NodeId const,gum::NodeId const)\n"
    "    eraseForbiddenArc(std::string const &,std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BNLearner_double_addMandatoryArc__SWIG_0_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = (gum::learning::BNLearner< double > *) 0 ;
  gum::Arc *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BNLearner_double_addMandatoryArc",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_double_addMandatoryArc" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__Arc,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BNLearner_double_addMandatoryArc" "', argument " "2"" of type '" "gum::Arc const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BNLearner_double_addMandatoryArc" "', argument " "2"" of type '" "gum::Arc const &""'"); 
  }
  arg2 = reinterpret_cast< gum::Arc * >(argp2);
  {
    try {
      gum_learning_BNLearner_Sl_double_Sg__addMandatoryArc__SWIG_0_0(arg1,(gum::Arc const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_double_addMandatoryArc__SWIG_0_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = (gum::learning::BNLearner< double > *) 0 ;
  gum::NodeId arg2 ;
  gum::NodeId arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BNLearner_double_addMandatoryArc",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_double_addMandatoryArc" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BNLearner_double_addMandatoryArc" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BNLearner_double_addMandatoryArc" "', argument " "3"" of type '" "gum::NodeId""'");
  } 
  arg3 = static_cast< gum::NodeId >(val3);
  {
    try {
      gum_learning_BNLearner_Sl_double_Sg__addMandatoryArc__SWIG_0_1(arg1,arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_double_addMandatoryArc__SWIG_0_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = (gum::learning::BNLearner< double > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BNLearner_double_addMandatoryArc",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_double_addMandatoryArc" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BNLearner_double_addMandatoryArc" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BNLearner_double_addMandatoryArc" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BNLearner_double_addMandatoryArc" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BNLearner_double_addMandatoryArc" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      gum_learning_BNLearner_Sl_double_Sg__addMandatoryArc__SWIG_0_2(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_double_addMandatoryArc(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_gum__Arc, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_BNLearner_double_addMandatoryArc__SWIG_0_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_BNLearner_double_addMandatoryArc__SWIG_0_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_BNLearner_double_addMandatoryArc__SWIG_0_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'BNLearner_double_addMandatoryArc'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    addMandatoryArc(gum::Arc const &)\n"
    "    addMandatoryArc(gum::NodeId const,gum::NodeId const)\n"
    "    addMandatoryArc(std::string const &,std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BNLearner_double_eraseMandatoryArc_SWIG_0_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = (gum::learning::BNLearner< double > *) 0 ;
  gum::Arc *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BNLearner_double_eraseMandatoryArc",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_double_eraseMandatoryArc" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__Arc,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BNLearner_double_eraseMandatoryArc" "', argument " "2"" of type '" "gum::Arc const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BNLearner_double_eraseMandatoryArc" "', argument " "2"" of type '" "gum::Arc const &""'"); 
  }
  arg2 = reinterpret_cast< gum::Arc * >(argp2);
  {
    try {
      gum_learning_BNLearner_Sl_double_Sg__eraseMandatoryArc_SWIG_0_0(arg1,(gum::Arc const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_double_eraseMandatoryArc_SWIG_0_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = (gum::learning::BNLearner< double > *) 0 ;
  gum::NodeId arg2 ;
  gum::NodeId arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BNLearner_double_eraseMandatoryArc",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_double_eraseMandatoryArc" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BNLearner_double_eraseMandatoryArc" "', argument " "2"" of type '" "gum::NodeId""'");
  } 
  arg2 = static_cast< gum::NodeId >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BNLearner_double_eraseMandatoryArc" "', argument " "3"" of type '" "gum::NodeId""'");
  } 
  arg3 = static_cast< gum::NodeId >(val3);
  {
    try {
      gum_learning_BNLearner_Sl_double_Sg__eraseMandatoryArc_SWIG_0_1(arg1,arg2,arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_double_eraseMandatoryArc_SWIG_0_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = (gum::learning::BNLearner< double > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BNLearner_double_eraseMandatoryArc",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_double_eraseMandatoryArc" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BNLearner_double_eraseMandatoryArc" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BNLearner_double_eraseMandatoryArc" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BNLearner_double_eraseMandatoryArc" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BNLearner_double_eraseMandatoryArc" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      gum_learning_BNLearner_Sl_double_Sg__eraseMandatoryArc_SWIG_0_2(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BNLearner_double_eraseMandatoryArc(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_gum__Arc, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_BNLearner_double_eraseMandatoryArc_SWIG_0_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_BNLearner_double_eraseMandatoryArc_SWIG_0_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_BNLearner_double_eraseMandatoryArc_SWIG_0_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'BNLearner_double_eraseMandatoryArc'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    eraseMandatoryArc(gum::Arc const &)\n"
    "    eraseMandatoryArc(gum::NodeId const,gum::NodeId const)\n"
    "    eraseMandatoryArc(std::string const &,std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BNLearner_double_setInitialDAG(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gum::learning::BNLearner< double > *arg1 = (gum::learning::BNLearner< double > *) 0 ;
  gum::DAG *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BNLearner_double_setInitialDAG",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gum__learning__BNLearnerT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BNLearner_double_setInitialDAG" "', argument " "1"" of type '" "gum::learning::BNLearner< double > *""'"); 
  }
  arg1 = reinterpret_cast< gum::learning::BNLearner< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gum__DAG,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BNLearner_double_setInitialDAG" "', argument " "2"" of type '" "gum::DAG const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BNLearner_double_setInitialDAG" "', argument " "2"" of type '" "gum::DAG const &""'"); 
  }
  arg2 = reinterpret_cast< gum::DAG * >(argp2);
  {
    try {
      gum_learning_BNLearner_Sl_double_Sg__setInitialDAG(arg1,(gum::DAG const &)*arg2);
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *BNLearner_double_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gum__learning__BNLearnerT_double_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_statsObj(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":statsObj")) SWIG_fail;
  {
    try {
      gum::statsObj();
    } catch (...) {
      SetPythonizeAgrumException();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


static PyMethodDef SwigMethods[] = {
	 { (char *)"SWIG_PyInstanceMethod_New", (PyCFunction)SWIG_PyInstanceMethod_New, METH_O, NULL},
	 { (char *)"delete_SwigPyIterator", _wrap_delete_SwigPyIterator, METH_VARARGS, (char *)"\n"
		"delete_SwigPyIterator(SwigPyIterator self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: swig::SwigPyIterator *\n"
		"\n"
		""},
	 { (char *)"SwigPyIterator_value", _wrap_SwigPyIterator_value, METH_VARARGS, (char *)"\n"
		"SwigPyIterator_value(SwigPyIterator self) -> PyObject *\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: swig::SwigPyIterator const *\n"
		"\n"
		""},
	 { (char *)"SwigPyIterator_incr", _wrap_SwigPyIterator_incr, METH_VARARGS, (char *)"\n"
		"incr(size_t n=1) -> SwigPyIterator\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"n: size_t\n"
		"\n"
		"SwigPyIterator_incr(SwigPyIterator self) -> SwigPyIterator\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: swig::SwigPyIterator *\n"
		"\n"
		""},
	 { (char *)"SwigPyIterator_decr", _wrap_SwigPyIterator_decr, METH_VARARGS, (char *)"\n"
		"decr(size_t n=1) -> SwigPyIterator\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"n: size_t\n"
		"\n"
		"SwigPyIterator_decr(SwigPyIterator self) -> SwigPyIterator\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: swig::SwigPyIterator *\n"
		"\n"
		""},
	 { (char *)"SwigPyIterator_distance", _wrap_SwigPyIterator_distance, METH_VARARGS, (char *)"\n"
		"SwigPyIterator_distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: swig::SwigPyIterator const *\n"
		"x: swig::SwigPyIterator const &\n"
		"\n"
		""},
	 { (char *)"SwigPyIterator_equal", _wrap_SwigPyIterator_equal, METH_VARARGS, (char *)"\n"
		"SwigPyIterator_equal(SwigPyIterator self, SwigPyIterator x) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: swig::SwigPyIterator const *\n"
		"x: swig::SwigPyIterator const &\n"
		"\n"
		""},
	 { (char *)"SwigPyIterator_copy", _wrap_SwigPyIterator_copy, METH_VARARGS, (char *)"\n"
		"SwigPyIterator_copy(SwigPyIterator self) -> SwigPyIterator\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: swig::SwigPyIterator const *\n"
		"\n"
		""},
	 { (char *)"SwigPyIterator_next", _wrap_SwigPyIterator_next, METH_VARARGS, (char *)"\n"
		"SwigPyIterator_next(SwigPyIterator self) -> PyObject *\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: swig::SwigPyIterator *\n"
		"\n"
		""},
	 { (char *)"SwigPyIterator___next__", _wrap_SwigPyIterator___next__, METH_VARARGS, (char *)"\n"
		"SwigPyIterator___next__(SwigPyIterator self) -> PyObject *\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: swig::SwigPyIterator *\n"
		"\n"
		""},
	 { (char *)"SwigPyIterator_previous", _wrap_SwigPyIterator_previous, METH_VARARGS, (char *)"\n"
		"SwigPyIterator_previous(SwigPyIterator self) -> PyObject *\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: swig::SwigPyIterator *\n"
		"\n"
		""},
	 { (char *)"SwigPyIterator_advance", _wrap_SwigPyIterator_advance, METH_VARARGS, (char *)"\n"
		"SwigPyIterator_advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: swig::SwigPyIterator *\n"
		"n: ptrdiff_t\n"
		"\n"
		""},
	 { (char *)"SwigPyIterator___eq__", _wrap_SwigPyIterator___eq__, METH_VARARGS, (char *)"\n"
		"SwigPyIterator___eq__(SwigPyIterator self, SwigPyIterator x) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: swig::SwigPyIterator const *\n"
		"x: swig::SwigPyIterator const &\n"
		"\n"
		""},
	 { (char *)"SwigPyIterator___ne__", _wrap_SwigPyIterator___ne__, METH_VARARGS, (char *)"\n"
		"SwigPyIterator___ne__(SwigPyIterator self, SwigPyIterator x) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: swig::SwigPyIterator const *\n"
		"x: swig::SwigPyIterator const &\n"
		"\n"
		""},
	 { (char *)"SwigPyIterator___iadd__", _wrap_SwigPyIterator___iadd__, METH_VARARGS, (char *)"\n"
		"SwigPyIterator___iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: swig::SwigPyIterator *\n"
		"n: ptrdiff_t\n"
		"\n"
		""},
	 { (char *)"SwigPyIterator___isub__", _wrap_SwigPyIterator___isub__, METH_VARARGS, (char *)"\n"
		"SwigPyIterator___isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: swig::SwigPyIterator *\n"
		"n: ptrdiff_t\n"
		"\n"
		""},
	 { (char *)"SwigPyIterator___add__", _wrap_SwigPyIterator___add__, METH_VARARGS, (char *)"\n"
		"SwigPyIterator___add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: swig::SwigPyIterator const *\n"
		"n: ptrdiff_t\n"
		"\n"
		""},
	 { (char *)"SwigPyIterator___sub__", _wrap_SwigPyIterator___sub__, METH_VARARGS, (char *)"\n"
		"__sub__(ptrdiff_t n) -> SwigPyIterator\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"n: ptrdiff_t\n"
		"\n"
		"SwigPyIterator___sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: swig::SwigPyIterator const *\n"
		"x: swig::SwigPyIterator const &\n"
		"\n"
		""},
	 { (char *)"SwigPyIterator_swigregister", SwigPyIterator_swigregister, METH_VARARGS, NULL},
	 { (char *)"JTGenerator_junctionTree", _wrap_JTGenerator_junctionTree, METH_VARARGS, (char *)"\n"
		"junctionTree(UndiGraph g) -> CliqueGraph\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"g: gum::UndiGraph const &\n"
		"\n"
		"JTGenerator_junctionTree(JTGenerator self, BayesNet_double bn) -> CliqueGraph\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: JTGenerator *\n"
		"bn: gum::BayesNet< double > const &\n"
		"\n"
		""},
	 { (char *)"JTGenerator_binaryJoinTree", _wrap_JTGenerator_binaryJoinTree, METH_VARARGS, (char *)"\n"
		"binaryJoinTree(UndiGraph g) -> CliqueGraph\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"g: gum::UndiGraph const &\n"
		"\n"
		"JTGenerator_binaryJoinTree(JTGenerator self, BayesNet_double bn) -> CliqueGraph\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: JTGenerator *\n"
		"bn: gum::BayesNet< double > const &\n"
		"\n"
		""},
	 { (char *)"new_JTGenerator", _wrap_new_JTGenerator, METH_VARARGS, (char *)"new_JTGenerator() -> JTGenerator"},
	 { (char *)"delete_JTGenerator", _wrap_delete_JTGenerator, METH_VARARGS, (char *)"\n"
		"delete_JTGenerator(JTGenerator self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: JTGenerator *\n"
		"\n"
		""},
	 { (char *)"JTGenerator_swigregister", JTGenerator_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_PythonBNListener", _wrap_new_PythonBNListener, METH_VARARGS, (char *)"\n"
		"new_PythonBNListener(DiGraph g, VariableNodeMap vnm) -> PythonBNListener\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"g: gum::DiGraph *\n"
		"vnm: gum::VariableNodeMap const *\n"
		"\n"
		""},
	 { (char *)"delete_PythonBNListener", _wrap_delete_PythonBNListener, METH_VARARGS, (char *)"\n"
		"delete_PythonBNListener(PythonBNListener self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: PythonBNListener *\n"
		"\n"
		""},
	 { (char *)"PythonBNListener_whenNodeAdded", _wrap_PythonBNListener_whenNodeAdded, METH_VARARGS, (char *)"\n"
		"PythonBNListener_whenNodeAdded(PythonBNListener self, void const * source, gum::NodeId id)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: PythonBNListener *\n"
		"source: void const *\n"
		"id: gum::NodeId\n"
		"\n"
		""},
	 { (char *)"PythonBNListener_whenNodeDeleted", _wrap_PythonBNListener_whenNodeDeleted, METH_VARARGS, (char *)"\n"
		"PythonBNListener_whenNodeDeleted(PythonBNListener self, void const * arg3, gum::NodeId id)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: PythonBNListener *\n"
		"arg2: void const *\n"
		"id: gum::NodeId\n"
		"\n"
		""},
	 { (char *)"PythonBNListener_whenArcAdded", _wrap_PythonBNListener_whenArcAdded, METH_VARARGS, (char *)"\n"
		"PythonBNListener_whenArcAdded(PythonBNListener self, void const * arg3, gum::NodeId src, gum::NodeId dst)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: PythonBNListener *\n"
		"arg2: void const *\n"
		"src: gum::NodeId\n"
		"dst: gum::NodeId\n"
		"\n"
		""},
	 { (char *)"PythonBNListener_whenArcDeleted", _wrap_PythonBNListener_whenArcDeleted, METH_VARARGS, (char *)"\n"
		"PythonBNListener_whenArcDeleted(PythonBNListener self, void const * arg3, gum::NodeId src, gum::NodeId dst)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: PythonBNListener *\n"
		"arg2: void const *\n"
		"src: gum::NodeId\n"
		"dst: gum::NodeId\n"
		"\n"
		""},
	 { (char *)"PythonBNListener_setWhenArcAdded", _wrap_PythonBNListener_setWhenArcAdded, METH_VARARGS, (char *)"\n"
		"PythonBNListener_setWhenArcAdded(PythonBNListener self, PyObject * pyfunc)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: PythonBNListener *\n"
		"pyfunc: PyObject *\n"
		"\n"
		""},
	 { (char *)"PythonBNListener_setWhenArcDeleted", _wrap_PythonBNListener_setWhenArcDeleted, METH_VARARGS, (char *)"\n"
		"PythonBNListener_setWhenArcDeleted(PythonBNListener self, PyObject * pyfunc)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: PythonBNListener *\n"
		"pyfunc: PyObject *\n"
		"\n"
		""},
	 { (char *)"PythonBNListener_setWhenNodeAdded", _wrap_PythonBNListener_setWhenNodeAdded, METH_VARARGS, (char *)"\n"
		"PythonBNListener_setWhenNodeAdded(PythonBNListener self, PyObject * pyfunc)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: PythonBNListener *\n"
		"pyfunc: PyObject *\n"
		"\n"
		""},
	 { (char *)"PythonBNListener_setWhenNodeDeleted", _wrap_PythonBNListener_setWhenNodeDeleted, METH_VARARGS, (char *)"\n"
		"PythonBNListener_setWhenNodeDeleted(PythonBNListener self, PyObject * pyfunc)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: PythonBNListener *\n"
		"pyfunc: PyObject *\n"
		"\n"
		""},
	 { (char *)"PythonBNListener_swigregister", PythonBNListener_swigregister, METH_VARARGS, NULL},
	 { (char *)"PythonLoadListener_whenLoading", _wrap_PythonLoadListener_whenLoading, METH_VARARGS, (char *)"\n"
		"PythonLoadListener_whenLoading(PythonLoadListener self, void const * buffer, int percent)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: PythonLoadListener *\n"
		"buffer: void const *\n"
		"percent: int\n"
		"\n"
		""},
	 { (char *)"PythonLoadListener_setPythonListener", _wrap_PythonLoadListener_setPythonListener, METH_VARARGS, (char *)"\n"
		"PythonLoadListener_setPythonListener(PythonLoadListener self, PyObject * l) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: PythonLoadListener *\n"
		"l: PyObject *\n"
		"\n"
		""},
	 { (char *)"new_PythonLoadListener", _wrap_new_PythonLoadListener, METH_VARARGS, (char *)"new_PythonLoadListener() -> PythonLoadListener"},
	 { (char *)"delete_PythonLoadListener", _wrap_delete_PythonLoadListener, METH_VARARGS, (char *)"\n"
		"delete_PythonLoadListener(PythonLoadListener self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: PythonLoadListener *\n"
		"\n"
		""},
	 { (char *)"PythonLoadListener_swigregister", PythonLoadListener_swigregister, METH_VARARGS, NULL},
	 { (char *)"__fillLoadListeners", _wrap___fillLoadListeners, METH_VARARGS, (char *)"\n"
		"__fillLoadListeners(std::vector< PythonLoadListener,std::allocator< PythonLoadListener > > & py_listener, PyObject * l) -> int\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"py_listener: std::vector< PythonLoadListener,std::allocator< PythonLoadListener > > &\n"
		"l: PyObject *\n"
		"\n"
		""},
	 { (char *)"new_PythonApproximationListener", _wrap_new_PythonApproximationListener, METH_VARARGS, (char *)"\n"
		"new_PythonApproximationListener(IApproximationSchemeConfiguration algo) -> PythonApproximationListener\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"algo: gum::IApproximationSchemeConfiguration &\n"
		"\n"
		""},
	 { (char *)"delete_PythonApproximationListener", _wrap_delete_PythonApproximationListener, METH_VARARGS, (char *)"\n"
		"delete_PythonApproximationListener(PythonApproximationListener self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: PythonApproximationListener *\n"
		"\n"
		""},
	 { (char *)"PythonApproximationListener_whenProgress", _wrap_PythonApproximationListener_whenProgress, METH_VARARGS, (char *)"\n"
		"PythonApproximationListener_whenProgress(PythonApproximationListener self, void const * src, gum::Size const step, double const error, double const duration)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: PythonApproximationListener *\n"
		"src: void const *\n"
		"step: gum::Size const\n"
		"error: double const\n"
		"duration: double const\n"
		"\n"
		""},
	 { (char *)"PythonApproximationListener_whenStop", _wrap_PythonApproximationListener_whenStop, METH_VARARGS, (char *)"\n"
		"PythonApproximationListener_whenStop(PythonApproximationListener self, void const * src, std::string const message)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: PythonApproximationListener *\n"
		"src: void const *\n"
		"message: std::string const\n"
		"\n"
		""},
	 { (char *)"PythonApproximationListener_setWhenProgress", _wrap_PythonApproximationListener_setWhenProgress, METH_VARARGS, (char *)"\n"
		"PythonApproximationListener_setWhenProgress(PythonApproximationListener self, PyObject * pyfunc)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: PythonApproximationListener *\n"
		"pyfunc: PyObject *\n"
		"\n"
		""},
	 { (char *)"PythonApproximationListener_setWhenStop", _wrap_PythonApproximationListener_setWhenStop, METH_VARARGS, (char *)"\n"
		"PythonApproximationListener_setWhenStop(PythonApproximationListener self, PyObject * pyfunc)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: PythonApproximationListener *\n"
		"pyfunc: PyObject *\n"
		"\n"
		""},
	 { (char *)"PythonApproximationListener_swigregister", PythonApproximationListener_swigregister, METH_VARARGS, NULL},
	 { (char *)"BNGenerator_generate", _wrap_BNGenerator_generate, METH_VARARGS, (char *)"\n"
		"generate(gum::Size n_nodes=10, gum::Size n_arcs=15, gum::Size n_modmax=4) -> BayesNet_double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"n_nodes: gum::Size\n"
		"n_arcs: gum::Size\n"
		"n_modmax: gum::Size\n"
		"\n"
		"generate(gum::Size n_nodes=10, gum::Size n_arcs=15) -> BayesNet_double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"n_nodes: gum::Size\n"
		"n_arcs: gum::Size\n"
		"\n"
		"generate(gum::Size n_nodes=10) -> BayesNet_double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"n_nodes: gum::Size\n"
		"\n"
		"BNGenerator_generate(BNGenerator self) -> BayesNet_double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: BNGenerator *\n"
		"\n"
		""},
	 { (char *)"new_BNGenerator", _wrap_new_BNGenerator, METH_VARARGS, (char *)"new_BNGenerator() -> BNGenerator"},
	 { (char *)"delete_BNGenerator", _wrap_delete_BNGenerator, METH_VARARGS, (char *)"\n"
		"delete_BNGenerator(BNGenerator self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: BNGenerator *\n"
		"\n"
		""},
	 { (char *)"BNGenerator_swigregister", BNGenerator_swigregister, METH_VARARGS, NULL},
	 { (char *)"IDGenerator_generate", _wrap_IDGenerator_generate, METH_VARARGS, (char *)"\n"
		"generate(gum::Size nbrNodes=10, double arcDensity=0.2, double chanceNodeDensity=0.8, double utilityNodeDensity=0.1, int max_modality=2) -> InfluenceDiagram_double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"nbrNodes: gum::Size\n"
		"arcDensity: double\n"
		"chanceNodeDensity: double\n"
		"utilityNodeDensity: double\n"
		"max_modality: int\n"
		"\n"
		"generate(gum::Size nbrNodes=10, double arcDensity=0.2, double chanceNodeDensity=0.8, double utilityNodeDensity=0.1) -> InfluenceDiagram_double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"nbrNodes: gum::Size\n"
		"arcDensity: double\n"
		"chanceNodeDensity: double\n"
		"utilityNodeDensity: double\n"
		"\n"
		"generate(gum::Size nbrNodes=10, double arcDensity=0.2, double chanceNodeDensity=0.8) -> InfluenceDiagram_double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"nbrNodes: gum::Size\n"
		"arcDensity: double\n"
		"chanceNodeDensity: double\n"
		"\n"
		"generate(gum::Size nbrNodes=10, double arcDensity=0.2) -> InfluenceDiagram_double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"nbrNodes: gum::Size\n"
		"arcDensity: double\n"
		"\n"
		"generate(gum::Size nbrNodes=10) -> InfluenceDiagram_double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"nbrNodes: gum::Size\n"
		"\n"
		"IDGenerator_generate(IDGenerator self) -> InfluenceDiagram_double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: IDGenerator *\n"
		"\n"
		""},
	 { (char *)"new_IDGenerator", _wrap_new_IDGenerator, METH_VARARGS, (char *)"new_IDGenerator() -> IDGenerator"},
	 { (char *)"delete_IDGenerator", _wrap_delete_IDGenerator, METH_VARARGS, (char *)"\n"
		"delete_IDGenerator(IDGenerator self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: IDGenerator *\n"
		"\n"
		""},
	 { (char *)"IDGenerator_swigregister", IDGenerator_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_PRMexplorer", _wrap_new_PRMexplorer, METH_VARARGS, (char *)"new_PRMexplorer() -> PRMexplorer"},
	 { (char *)"delete_PRMexplorer", _wrap_delete_PRMexplorer, METH_VARARGS, (char *)"\n"
		"delete_PRMexplorer(PRMexplorer self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: PRMexplorer *\n"
		"\n"
		""},
	 { (char *)"PRMexplorer_load", _wrap_PRMexplorer_load, METH_VARARGS, (char *)"\n"
		"load(std::string filename, std::string classpath, bool verbose=False)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"filename: std::string\n"
		"classpath: std::string\n"
		"verbose: bool\n"
		"\n"
		"load(std::string filename, std::string classpath)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"filename: std::string\n"
		"classpath: std::string\n"
		"\n"
		"PRMexplorer_load(PRMexplorer self, std::string filename)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: PRMexplorer *\n"
		"filename: std::string\n"
		"\n"
		""},
	 { (char *)"PRMexplorer_isType", _wrap_PRMexplorer_isType, METH_VARARGS, (char *)"\n"
		"PRMexplorer_isType(PRMexplorer self, std::string name) -> PyObject *\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: PRMexplorer *\n"
		"name: std::string\n"
		"\n"
		""},
	 { (char *)"PRMexplorer_isClass", _wrap_PRMexplorer_isClass, METH_VARARGS, (char *)"\n"
		"PRMexplorer_isClass(PRMexplorer self, std::string name) -> PyObject *\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: PRMexplorer *\n"
		"name: std::string\n"
		"\n"
		""},
	 { (char *)"PRMexplorer_isInterface", _wrap_PRMexplorer_isInterface, METH_VARARGS, (char *)"\n"
		"PRMexplorer_isInterface(PRMexplorer self, std::string name) -> PyObject *\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: PRMexplorer *\n"
		"name: std::string\n"
		"\n"
		""},
	 { (char *)"PRMexplorer_classes", _wrap_PRMexplorer_classes, METH_VARARGS, (char *)"\n"
		"PRMexplorer_classes(PRMexplorer self) -> PyObject *\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: PRMexplorer *\n"
		"\n"
		""},
	 { (char *)"PRMexplorer_classAttributes", _wrap_PRMexplorer_classAttributes, METH_VARARGS, (char *)"\n"
		"PRMexplorer_classAttributes(PRMexplorer self, std::string class_name) -> PyObject *\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: PRMexplorer *\n"
		"class_name: std::string\n"
		"\n"
		""},
	 { (char *)"PRMexplorer_isAttribute", _wrap_PRMexplorer_isAttribute, METH_VARARGS, (char *)"\n"
		"PRMexplorer_isAttribute(PRMexplorer self, std::string class_name, std::string att_name) -> PyObject *\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: PRMexplorer *\n"
		"class_name: std::string\n"
		"att_name: std::string\n"
		"\n"
		""},
	 { (char *)"PRMexplorer_classReferences", _wrap_PRMexplorer_classReferences, METH_VARARGS, (char *)"\n"
		"PRMexplorer_classReferences(PRMexplorer self, std::string class_name) -> PyObject *\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: PRMexplorer *\n"
		"class_name: std::string\n"
		"\n"
		""},
	 { (char *)"PRMexplorer_classParameters", _wrap_PRMexplorer_classParameters, METH_VARARGS, (char *)"\n"
		"PRMexplorer_classParameters(PRMexplorer self, std::string class_name) -> PyObject *\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: PRMexplorer *\n"
		"class_name: std::string\n"
		"\n"
		""},
	 { (char *)"PRMexplorer_classImplements", _wrap_PRMexplorer_classImplements, METH_VARARGS, (char *)"\n"
		"PRMexplorer_classImplements(PRMexplorer self, std::string class_name) -> PyObject *\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: PRMexplorer *\n"
		"class_name: std::string\n"
		"\n"
		""},
	 { (char *)"PRMexplorer_aggType_set", _wrap_PRMexplorer_aggType_set, METH_VARARGS, (char *)"\n"
		"PRMexplorer_aggType_set(PRMexplorer self, std::string [9] aggType)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: PRMexplorer *\n"
		"aggType: std::string [9]\n"
		"\n"
		""},
	 { (char *)"PRMexplorer_aggType_get", _wrap_PRMexplorer_aggType_get, METH_VARARGS, (char *)"\n"
		"PRMexplorer_aggType_get(PRMexplorer self) -> std::string [9]\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: PRMexplorer *\n"
		"\n"
		""},
	 { (char *)"PRMexplorer_classAggregates", _wrap_PRMexplorer_classAggregates, METH_VARARGS, (char *)"\n"
		"PRMexplorer_classAggregates(PRMexplorer self, std::string class_name) -> PyObject *\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: PRMexplorer *\n"
		"class_name: std::string\n"
		"\n"
		""},
	 { (char *)"PRMexplorer_classSlotChains", _wrap_PRMexplorer_classSlotChains, METH_VARARGS, (char *)"\n"
		"PRMexplorer_classSlotChains(PRMexplorer self, std::string class_name) -> PyObject *\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: PRMexplorer *\n"
		"class_name: std::string\n"
		"\n"
		""},
	 { (char *)"PRMexplorer_classDag", _wrap_PRMexplorer_classDag, METH_VARARGS, (char *)"\n"
		"PRMexplorer_classDag(PRMexplorer self, std::string class_name) -> PyObject *\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: PRMexplorer *\n"
		"class_name: std::string\n"
		"\n"
		""},
	 { (char *)"PRMexplorer_getalltheSystems", _wrap_PRMexplorer_getalltheSystems, METH_VARARGS, (char *)"\n"
		"PRMexplorer_getalltheSystems(PRMexplorer self) -> PyObject *\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: PRMexplorer *\n"
		"\n"
		""},
	 { (char *)"PRMexplorer_getSuperClass", _wrap_PRMexplorer_getSuperClass, METH_VARARGS, (char *)"\n"
		"PRMexplorer_getSuperClass(PRMexplorer self, std::string class_name) -> PyObject *\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: PRMexplorer *\n"
		"class_name: std::string\n"
		"\n"
		""},
	 { (char *)"PRMexplorer_getDirectSubClass", _wrap_PRMexplorer_getDirectSubClass, METH_VARARGS, (char *)"\n"
		"PRMexplorer_getDirectSubClass(PRMexplorer self, std::string class_name) -> PyObject *\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: PRMexplorer *\n"
		"class_name: std::string\n"
		"\n"
		""},
	 { (char *)"PRMexplorer_cpf", _wrap_PRMexplorer_cpf, METH_VARARGS, (char *)"\n"
		"PRMexplorer_cpf(PRMexplorer self, std::string class_name, std::string attribute) -> Potential_double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: PRMexplorer *\n"
		"class_name: std::string\n"
		"attribute: std::string\n"
		"\n"
		""},
	 { (char *)"PRMexplorer_types", _wrap_PRMexplorer_types, METH_VARARGS, (char *)"\n"
		"PRMexplorer_types(PRMexplorer self) -> PyObject *\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: PRMexplorer *\n"
		"\n"
		""},
	 { (char *)"PRMexplorer_getSuperType", _wrap_PRMexplorer_getSuperType, METH_VARARGS, (char *)"\n"
		"PRMexplorer_getSuperType(PRMexplorer self, std::string type_name) -> PyObject *\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: PRMexplorer *\n"
		"type_name: std::string\n"
		"\n"
		""},
	 { (char *)"PRMexplorer_getDirectSubTypes", _wrap_PRMexplorer_getDirectSubTypes, METH_VARARGS, (char *)"\n"
		"PRMexplorer_getDirectSubTypes(PRMexplorer self, std::string type_name) -> PyObject *\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: PRMexplorer *\n"
		"type_name: std::string\n"
		"\n"
		""},
	 { (char *)"PRMexplorer_getLabels", _wrap_PRMexplorer_getLabels, METH_VARARGS, (char *)"\n"
		"PRMexplorer_getLabels(PRMexplorer self, std::string type_name) -> PyObject *\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: PRMexplorer *\n"
		"type_name: std::string\n"
		"\n"
		""},
	 { (char *)"PRMexplorer_getLabelMap", _wrap_PRMexplorer_getLabelMap, METH_VARARGS, (char *)"\n"
		"PRMexplorer_getLabelMap(PRMexplorer self, std::string type_name) -> PyObject *\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: PRMexplorer *\n"
		"type_name: std::string\n"
		"\n"
		""},
	 { (char *)"PRMexplorer_interfaces", _wrap_PRMexplorer_interfaces, METH_VARARGS, (char *)"\n"
		"PRMexplorer_interfaces(PRMexplorer self) -> PyObject *\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: PRMexplorer *\n"
		"\n"
		""},
	 { (char *)"PRMexplorer_interAttributes", _wrap_PRMexplorer_interAttributes, METH_VARARGS, (char *)"\n"
		"interAttributes(std::string interface_name, bool allAttributes=False) -> PyObject\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"interface_name: std::string\n"
		"allAttributes: bool\n"
		"\n"
		"PRMexplorer_interAttributes(PRMexplorer self, std::string interface_name) -> PyObject *\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: PRMexplorer *\n"
		"interface_name: std::string\n"
		"\n"
		""},
	 { (char *)"PRMexplorer_interReferences", _wrap_PRMexplorer_interReferences, METH_VARARGS, (char *)"\n"
		"PRMexplorer_interReferences(PRMexplorer self, std::string interface_name) -> PyObject *\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: PRMexplorer *\n"
		"interface_name: std::string\n"
		"\n"
		""},
	 { (char *)"PRMexplorer_getSuperInterface", _wrap_PRMexplorer_getSuperInterface, METH_VARARGS, (char *)"\n"
		"PRMexplorer_getSuperInterface(PRMexplorer self, std::string interface_name) -> PyObject *\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: PRMexplorer *\n"
		"interface_name: std::string\n"
		"\n"
		""},
	 { (char *)"PRMexplorer_getDirectSubInterfaces", _wrap_PRMexplorer_getDirectSubInterfaces, METH_VARARGS, (char *)"\n"
		"PRMexplorer_getDirectSubInterfaces(PRMexplorer self, std::string interface_name) -> PyObject *\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: PRMexplorer *\n"
		"interface_name: std::string\n"
		"\n"
		""},
	 { (char *)"PRMexplorer_getImplementations", _wrap_PRMexplorer_getImplementations, METH_VARARGS, (char *)"\n"
		"PRMexplorer_getImplementations(PRMexplorer self, std::string interface_name) -> PyObject *\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: PRMexplorer *\n"
		"interface_name: std::string\n"
		"\n"
		""},
	 { (char *)"PRMexplorer_swigregister", PRMexplorer_swigregister, METH_VARARGS, NULL},
	 { (char *)"Vector_double_iterator", _wrap_Vector_double_iterator, METH_VARARGS, (char *)"\n"
		"Vector_double_iterator(Vector_double self) -> SwigPyIterator\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: std::vector< double > *\n"
		"\n"
		""},
	 { (char *)"Vector_double___nonzero__", _wrap_Vector_double___nonzero__, METH_VARARGS, (char *)"\n"
		"Vector_double___nonzero__(Vector_double self) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: std::vector< double > const *\n"
		"\n"
		""},
	 { (char *)"Vector_double___bool__", _wrap_Vector_double___bool__, METH_VARARGS, (char *)"\n"
		"Vector_double___bool__(Vector_double self) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: std::vector< double > const *\n"
		"\n"
		""},
	 { (char *)"Vector_double___len__", _wrap_Vector_double___len__, METH_VARARGS, (char *)"\n"
		"Vector_double___len__(Vector_double self) -> std::vector< double >::size_type\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: std::vector< double > const *\n"
		"\n"
		""},
	 { (char *)"Vector_double___getslice__", _wrap_Vector_double___getslice__, METH_VARARGS, (char *)"\n"
		"Vector_double___getslice__(Vector_double self, std::vector< double >::difference_type i, std::vector< double >::difference_type j) -> Vector_double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: std::vector< double > *\n"
		"i: std::vector< double >::difference_type\n"
		"j: std::vector< double >::difference_type\n"
		"\n"
		""},
	 { (char *)"Vector_double___setslice__", _wrap_Vector_double___setslice__, METH_VARARGS, (char *)"\n"
		"__setslice__(std::vector< double >::difference_type i, std::vector< double >::difference_type j)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< double >::difference_type\n"
		"j: std::vector< double >::difference_type\n"
		"\n"
		"Vector_double___setslice__(Vector_double self, std::vector< double >::difference_type i, std::vector< double >::difference_type j, Vector_double v)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: std::vector< double > *\n"
		"i: std::vector< double >::difference_type\n"
		"j: std::vector< double >::difference_type\n"
		"v: std::vector< double,std::allocator< double > > const &\n"
		"\n"
		""},
	 { (char *)"Vector_double___delslice__", _wrap_Vector_double___delslice__, METH_VARARGS, (char *)"\n"
		"Vector_double___delslice__(Vector_double self, std::vector< double >::difference_type i, std::vector< double >::difference_type j)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: std::vector< double > *\n"
		"i: std::vector< double >::difference_type\n"
		"j: std::vector< double >::difference_type\n"
		"\n"
		""},
	 { (char *)"Vector_double___delitem__", _wrap_Vector_double___delitem__, METH_VARARGS, (char *)"\n"
		"__delitem__(std::vector< double >::difference_type i)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< double >::difference_type\n"
		"\n"
		"Vector_double___delitem__(Vector_double self, PySliceObject * slice)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: std::vector< double > *\n"
		"slice: PySliceObject *\n"
		"\n"
		""},
	 { (char *)"Vector_double___getitem__", _wrap_Vector_double___getitem__, METH_VARARGS, (char *)"\n"
		"__getitem__(PySliceObject * slice) -> Vector_double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"slice: PySliceObject *\n"
		"\n"
		"Vector_double___getitem__(Vector_double self, std::vector< double >::difference_type i) -> std::vector< double >::value_type const &\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: std::vector< double > const *\n"
		"i: std::vector< double >::difference_type\n"
		"\n"
		""},
	 { (char *)"Vector_double___setitem__", _wrap_Vector_double___setitem__, METH_VARARGS, (char *)"\n"
		"__setitem__(PySliceObject * slice, Vector_double v)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"slice: PySliceObject *\n"
		"v: std::vector< double,std::allocator< double > > const &\n"
		"\n"
		"__setitem__(PySliceObject * slice)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"slice: PySliceObject *\n"
		"\n"
		"Vector_double___setitem__(Vector_double self, std::vector< double >::difference_type i, std::vector< double >::value_type const & x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: std::vector< double > *\n"
		"i: std::vector< double >::difference_type\n"
		"x: std::vector< double >::value_type const &\n"
		"\n"
		""},
	 { (char *)"Vector_double_pop", _wrap_Vector_double_pop, METH_VARARGS, (char *)"\n"
		"Vector_double_pop(Vector_double self) -> std::vector< double >::value_type\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: std::vector< double > *\n"
		"\n"
		""},
	 { (char *)"Vector_double_append", _wrap_Vector_double_append, METH_VARARGS, (char *)"\n"
		"Vector_double_append(Vector_double self, std::vector< double >::value_type const & x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: std::vector< double > *\n"
		"x: std::vector< double >::value_type const &\n"
		"\n"
		""},
	 { (char *)"Vector_double_empty", _wrap_Vector_double_empty, METH_VARARGS, (char *)"\n"
		"Vector_double_empty(Vector_double self) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: std::vector< double > const *\n"
		"\n"
		""},
	 { (char *)"Vector_double_size", _wrap_Vector_double_size, METH_VARARGS, (char *)"\n"
		"Vector_double_size(Vector_double self) -> std::vector< double >::size_type\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: std::vector< double > const *\n"
		"\n"
		""},
	 { (char *)"Vector_double_swap", _wrap_Vector_double_swap, METH_VARARGS, (char *)"\n"
		"Vector_double_swap(Vector_double self, Vector_double v)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: std::vector< double > *\n"
		"v: std::vector< double > &\n"
		"\n"
		""},
	 { (char *)"Vector_double_begin", _wrap_Vector_double_begin, METH_VARARGS, (char *)"\n"
		"Vector_double_begin(Vector_double self) -> std::vector< double >::iterator\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: std::vector< double > *\n"
		"\n"
		""},
	 { (char *)"Vector_double_end", _wrap_Vector_double_end, METH_VARARGS, (char *)"\n"
		"Vector_double_end(Vector_double self) -> std::vector< double >::iterator\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: std::vector< double > *\n"
		"\n"
		""},
	 { (char *)"Vector_double_rbegin", _wrap_Vector_double_rbegin, METH_VARARGS, (char *)"\n"
		"Vector_double_rbegin(Vector_double self) -> std::vector< double >::reverse_iterator\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: std::vector< double > *\n"
		"\n"
		""},
	 { (char *)"Vector_double_rend", _wrap_Vector_double_rend, METH_VARARGS, (char *)"\n"
		"Vector_double_rend(Vector_double self) -> std::vector< double >::reverse_iterator\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: std::vector< double > *\n"
		"\n"
		""},
	 { (char *)"Vector_double_clear", _wrap_Vector_double_clear, METH_VARARGS, (char *)"\n"
		"Vector_double_clear(Vector_double self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: std::vector< double > *\n"
		"\n"
		""},
	 { (char *)"Vector_double_get_allocator", _wrap_Vector_double_get_allocator, METH_VARARGS, (char *)"\n"
		"Vector_double_get_allocator(Vector_double self) -> std::vector< double >::allocator_type\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: std::vector< double > const *\n"
		"\n"
		""},
	 { (char *)"Vector_double_pop_back", _wrap_Vector_double_pop_back, METH_VARARGS, (char *)"\n"
		"Vector_double_pop_back(Vector_double self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: std::vector< double > *\n"
		"\n"
		""},
	 { (char *)"Vector_double_erase", _wrap_Vector_double_erase, METH_VARARGS, (char *)"\n"
		"erase(std::vector< double >::iterator pos) -> std::vector< double >::iterator\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"pos: std::vector< double >::iterator\n"
		"\n"
		"Vector_double_erase(Vector_double self, std::vector< double >::iterator first, std::vector< double >::iterator last) -> std::vector< double >::iterator\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: std::vector< double > *\n"
		"first: std::vector< double >::iterator\n"
		"last: std::vector< double >::iterator\n"
		"\n"
		""},
	 { (char *)"new_Vector_double", _wrap_new_Vector_double, METH_VARARGS, (char *)"\n"
		"Vector_double()\n"
		"Vector_double(Vector_double arg2)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"arg2: std::vector< double > const &\n"
		"\n"
		"Vector_double(std::vector< double >::size_type size)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"size: std::vector< double >::size_type\n"
		"\n"
		"new_Vector_double(std::vector< double >::size_type size, std::vector< double >::value_type const & value) -> Vector_double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"size: std::vector< double >::size_type\n"
		"value: std::vector< double >::value_type const &\n"
		"\n"
		""},
	 { (char *)"Vector_double_push_back", _wrap_Vector_double_push_back, METH_VARARGS, (char *)"\n"
		"Vector_double_push_back(Vector_double self, std::vector< double >::value_type const & x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: std::vector< double > *\n"
		"x: std::vector< double >::value_type const &\n"
		"\n"
		""},
	 { (char *)"Vector_double_front", _wrap_Vector_double_front, METH_VARARGS, (char *)"\n"
		"Vector_double_front(Vector_double self) -> std::vector< double >::value_type const &\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: std::vector< double > const *\n"
		"\n"
		""},
	 { (char *)"Vector_double_back", _wrap_Vector_double_back, METH_VARARGS, (char *)"\n"
		"Vector_double_back(Vector_double self) -> std::vector< double >::value_type const &\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: std::vector< double > const *\n"
		"\n"
		""},
	 { (char *)"Vector_double_assign", _wrap_Vector_double_assign, METH_VARARGS, (char *)"\n"
		"Vector_double_assign(Vector_double self, std::vector< double >::size_type n, std::vector< double >::value_type const & x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: std::vector< double > *\n"
		"n: std::vector< double >::size_type\n"
		"x: std::vector< double >::value_type const &\n"
		"\n"
		""},
	 { (char *)"Vector_double_resize", _wrap_Vector_double_resize, METH_VARARGS, (char *)"\n"
		"resize(std::vector< double >::size_type new_size)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"new_size: std::vector< double >::size_type\n"
		"\n"
		"Vector_double_resize(Vector_double self, std::vector< double >::size_type new_size, std::vector< double >::value_type const & x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: std::vector< double > *\n"
		"new_size: std::vector< double >::size_type\n"
		"x: std::vector< double >::value_type const &\n"
		"\n"
		""},
	 { (char *)"Vector_double_insert", _wrap_Vector_double_insert, METH_VARARGS, (char *)"\n"
		"insert(std::vector< double >::iterator pos, std::vector< double >::value_type const & x) -> std::vector< double >::iterator\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"pos: std::vector< double >::iterator\n"
		"x: std::vector< double >::value_type const &\n"
		"\n"
		"Vector_double_insert(Vector_double self, std::vector< double >::iterator pos, std::vector< double >::size_type n, std::vector< double >::value_type const & x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: std::vector< double > *\n"
		"pos: std::vector< double >::iterator\n"
		"n: std::vector< double >::size_type\n"
		"x: std::vector< double >::value_type const &\n"
		"\n"
		""},
	 { (char *)"Vector_double_reserve", _wrap_Vector_double_reserve, METH_VARARGS, (char *)"\n"
		"Vector_double_reserve(Vector_double self, std::vector< double >::size_type n)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: std::vector< double > *\n"
		"n: std::vector< double >::size_type\n"
		"\n"
		""},
	 { (char *)"Vector_double_capacity", _wrap_Vector_double_capacity, METH_VARARGS, (char *)"\n"
		"Vector_double_capacity(Vector_double self) -> std::vector< double >::size_type\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: std::vector< double > const *\n"
		"\n"
		""},
	 { (char *)"delete_Vector_double", _wrap_delete_Vector_double, METH_VARARGS, (char *)"\n"
		"delete_Vector_double(Vector_double self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: std::vector< double > *\n"
		"\n"
		""},
	 { (char *)"Vector_double_swigregister", Vector_double_swigregister, METH_VARARGS, NULL},
	 { (char *)"Vector_string_iterator", _wrap_Vector_string_iterator, METH_VARARGS, (char *)"\n"
		"Vector_string_iterator(Vector_string self) -> SwigPyIterator\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: std::vector< std::string > *\n"
		"\n"
		""},
	 { (char *)"Vector_string___nonzero__", _wrap_Vector_string___nonzero__, METH_VARARGS, (char *)"\n"
		"Vector_string___nonzero__(Vector_string self) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: std::vector< std::string > const *\n"
		"\n"
		""},
	 { (char *)"Vector_string___bool__", _wrap_Vector_string___bool__, METH_VARARGS, (char *)"\n"
		"Vector_string___bool__(Vector_string self) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: std::vector< std::string > const *\n"
		"\n"
		""},
	 { (char *)"Vector_string___len__", _wrap_Vector_string___len__, METH_VARARGS, (char *)"\n"
		"Vector_string___len__(Vector_string self) -> std::vector< std::string >::size_type\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: std::vector< std::string > const *\n"
		"\n"
		""},
	 { (char *)"Vector_string___getslice__", _wrap_Vector_string___getslice__, METH_VARARGS, (char *)"\n"
		"Vector_string___getslice__(Vector_string self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j) -> Vector_string\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: std::vector< std::string > *\n"
		"i: std::vector< std::string >::difference_type\n"
		"j: std::vector< std::string >::difference_type\n"
		"\n"
		""},
	 { (char *)"Vector_string___setslice__", _wrap_Vector_string___setslice__, METH_VARARGS, (char *)"\n"
		"__setslice__(std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< std::string >::difference_type\n"
		"j: std::vector< std::string >::difference_type\n"
		"\n"
		"Vector_string___setslice__(Vector_string self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j, Vector_string v)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: std::vector< std::string > *\n"
		"i: std::vector< std::string >::difference_type\n"
		"j: std::vector< std::string >::difference_type\n"
		"v: std::vector< std::string,std::allocator< std::string > > const &\n"
		"\n"
		""},
	 { (char *)"Vector_string___delslice__", _wrap_Vector_string___delslice__, METH_VARARGS, (char *)"\n"
		"Vector_string___delslice__(Vector_string self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: std::vector< std::string > *\n"
		"i: std::vector< std::string >::difference_type\n"
		"j: std::vector< std::string >::difference_type\n"
		"\n"
		""},
	 { (char *)"Vector_string___delitem__", _wrap_Vector_string___delitem__, METH_VARARGS, (char *)"\n"
		"__delitem__(std::vector< std::string >::difference_type i)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< std::string >::difference_type\n"
		"\n"
		"Vector_string___delitem__(Vector_string self, PySliceObject * slice)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: std::vector< std::string > *\n"
		"slice: PySliceObject *\n"
		"\n"
		""},
	 { (char *)"Vector_string___getitem__", _wrap_Vector_string___getitem__, METH_VARARGS, (char *)"\n"
		"__getitem__(PySliceObject * slice) -> Vector_string\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"slice: PySliceObject *\n"
		"\n"
		"Vector_string___getitem__(Vector_string self, std::vector< std::string >::difference_type i) -> std::vector< std::string >::value_type const &\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: std::vector< std::string > const *\n"
		"i: std::vector< std::string >::difference_type\n"
		"\n"
		""},
	 { (char *)"Vector_string___setitem__", _wrap_Vector_string___setitem__, METH_VARARGS, (char *)"\n"
		"__setitem__(PySliceObject * slice, Vector_string v)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"slice: PySliceObject *\n"
		"v: std::vector< std::string,std::allocator< std::string > > const &\n"
		"\n"
		"__setitem__(PySliceObject * slice)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"slice: PySliceObject *\n"
		"\n"
		"Vector_string___setitem__(Vector_string self, std::vector< std::string >::difference_type i, std::vector< std::string >::value_type const & x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: std::vector< std::string > *\n"
		"i: std::vector< std::string >::difference_type\n"
		"x: std::vector< std::string >::value_type const &\n"
		"\n"
		""},
	 { (char *)"Vector_string_pop", _wrap_Vector_string_pop, METH_VARARGS, (char *)"\n"
		"Vector_string_pop(Vector_string self) -> std::vector< std::string >::value_type\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: std::vector< std::string > *\n"
		"\n"
		""},
	 { (char *)"Vector_string_append", _wrap_Vector_string_append, METH_VARARGS, (char *)"\n"
		"Vector_string_append(Vector_string self, std::vector< std::string >::value_type const & x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: std::vector< std::string > *\n"
		"x: std::vector< std::string >::value_type const &\n"
		"\n"
		""},
	 { (char *)"Vector_string_empty", _wrap_Vector_string_empty, METH_VARARGS, (char *)"\n"
		"Vector_string_empty(Vector_string self) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: std::vector< std::string > const *\n"
		"\n"
		""},
	 { (char *)"Vector_string_size", _wrap_Vector_string_size, METH_VARARGS, (char *)"\n"
		"Vector_string_size(Vector_string self) -> std::vector< std::string >::size_type\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: std::vector< std::string > const *\n"
		"\n"
		""},
	 { (char *)"Vector_string_swap", _wrap_Vector_string_swap, METH_VARARGS, (char *)"\n"
		"Vector_string_swap(Vector_string self, Vector_string v)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: std::vector< std::string > *\n"
		"v: std::vector< std::string > &\n"
		"\n"
		""},
	 { (char *)"Vector_string_begin", _wrap_Vector_string_begin, METH_VARARGS, (char *)"\n"
		"Vector_string_begin(Vector_string self) -> std::vector< std::string >::iterator\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: std::vector< std::string > *\n"
		"\n"
		""},
	 { (char *)"Vector_string_end", _wrap_Vector_string_end, METH_VARARGS, (char *)"\n"
		"Vector_string_end(Vector_string self) -> std::vector< std::string >::iterator\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: std::vector< std::string > *\n"
		"\n"
		""},
	 { (char *)"Vector_string_rbegin", _wrap_Vector_string_rbegin, METH_VARARGS, (char *)"\n"
		"Vector_string_rbegin(Vector_string self) -> std::vector< std::string >::reverse_iterator\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: std::vector< std::string > *\n"
		"\n"
		""},
	 { (char *)"Vector_string_rend", _wrap_Vector_string_rend, METH_VARARGS, (char *)"\n"
		"Vector_string_rend(Vector_string self) -> std::vector< std::string >::reverse_iterator\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: std::vector< std::string > *\n"
		"\n"
		""},
	 { (char *)"Vector_string_clear", _wrap_Vector_string_clear, METH_VARARGS, (char *)"\n"
		"Vector_string_clear(Vector_string self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: std::vector< std::string > *\n"
		"\n"
		""},
	 { (char *)"Vector_string_get_allocator", _wrap_Vector_string_get_allocator, METH_VARARGS, (char *)"\n"
		"Vector_string_get_allocator(Vector_string self) -> std::vector< std::string >::allocator_type\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: std::vector< std::string > const *\n"
		"\n"
		""},
	 { (char *)"Vector_string_pop_back", _wrap_Vector_string_pop_back, METH_VARARGS, (char *)"\n"
		"Vector_string_pop_back(Vector_string self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: std::vector< std::string > *\n"
		"\n"
		""},
	 { (char *)"Vector_string_erase", _wrap_Vector_string_erase, METH_VARARGS, (char *)"\n"
		"erase(std::vector< std::string >::iterator pos) -> std::vector< std::string >::iterator\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"pos: std::vector< std::string >::iterator\n"
		"\n"
		"Vector_string_erase(Vector_string self, std::vector< std::string >::iterator first, std::vector< std::string >::iterator last) -> std::vector< std::string >::iterator\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: std::vector< std::string > *\n"
		"first: std::vector< std::string >::iterator\n"
		"last: std::vector< std::string >::iterator\n"
		"\n"
		""},
	 { (char *)"new_Vector_string", _wrap_new_Vector_string, METH_VARARGS, (char *)"\n"
		"Vector_string()\n"
		"Vector_string(Vector_string arg2)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"arg2: std::vector< std::string > const &\n"
		"\n"
		"Vector_string(std::vector< std::string >::size_type size)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"size: std::vector< std::string >::size_type\n"
		"\n"
		"new_Vector_string(std::vector< std::string >::size_type size, std::vector< std::string >::value_type const & value) -> Vector_string\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"size: std::vector< std::string >::size_type\n"
		"value: std::vector< std::string >::value_type const &\n"
		"\n"
		""},
	 { (char *)"Vector_string_push_back", _wrap_Vector_string_push_back, METH_VARARGS, (char *)"\n"
		"Vector_string_push_back(Vector_string self, std::vector< std::string >::value_type const & x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: std::vector< std::string > *\n"
		"x: std::vector< std::string >::value_type const &\n"
		"\n"
		""},
	 { (char *)"Vector_string_front", _wrap_Vector_string_front, METH_VARARGS, (char *)"\n"
		"Vector_string_front(Vector_string self) -> std::vector< std::string >::value_type const &\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: std::vector< std::string > const *\n"
		"\n"
		""},
	 { (char *)"Vector_string_back", _wrap_Vector_string_back, METH_VARARGS, (char *)"\n"
		"Vector_string_back(Vector_string self) -> std::vector< std::string >::value_type const &\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: std::vector< std::string > const *\n"
		"\n"
		""},
	 { (char *)"Vector_string_assign", _wrap_Vector_string_assign, METH_VARARGS, (char *)"\n"
		"Vector_string_assign(Vector_string self, std::vector< std::string >::size_type n, std::vector< std::string >::value_type const & x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: std::vector< std::string > *\n"
		"n: std::vector< std::string >::size_type\n"
		"x: std::vector< std::string >::value_type const &\n"
		"\n"
		""},
	 { (char *)"Vector_string_resize", _wrap_Vector_string_resize, METH_VARARGS, (char *)"\n"
		"resize(std::vector< std::string >::size_type new_size)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"new_size: std::vector< std::string >::size_type\n"
		"\n"
		"Vector_string_resize(Vector_string self, std::vector< std::string >::size_type new_size, std::vector< std::string >::value_type const & x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: std::vector< std::string > *\n"
		"new_size: std::vector< std::string >::size_type\n"
		"x: std::vector< std::string >::value_type const &\n"
		"\n"
		""},
	 { (char *)"Vector_string_insert", _wrap_Vector_string_insert, METH_VARARGS, (char *)"\n"
		"insert(std::vector< std::string >::iterator pos, std::vector< std::string >::value_type const & x) -> std::vector< std::string >::iterator\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"pos: std::vector< std::string >::iterator\n"
		"x: std::vector< std::string >::value_type const &\n"
		"\n"
		"Vector_string_insert(Vector_string self, std::vector< std::string >::iterator pos, std::vector< std::string >::size_type n, std::vector< std::string >::value_type const & x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: std::vector< std::string > *\n"
		"pos: std::vector< std::string >::iterator\n"
		"n: std::vector< std::string >::size_type\n"
		"x: std::vector< std::string >::value_type const &\n"
		"\n"
		""},
	 { (char *)"Vector_string_reserve", _wrap_Vector_string_reserve, METH_VARARGS, (char *)"\n"
		"Vector_string_reserve(Vector_string self, std::vector< std::string >::size_type n)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: std::vector< std::string > *\n"
		"n: std::vector< std::string >::size_type\n"
		"\n"
		""},
	 { (char *)"Vector_string_capacity", _wrap_Vector_string_capacity, METH_VARARGS, (char *)"\n"
		"Vector_string_capacity(Vector_string self) -> std::vector< std::string >::size_type\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: std::vector< std::string > const *\n"
		"\n"
		""},
	 { (char *)"delete_Vector_string", _wrap_delete_Vector_string, METH_VARARGS, (char *)"\n"
		"delete_Vector_string(Vector_string self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: std::vector< std::string > *\n"
		"\n"
		""},
	 { (char *)"Vector_string_swigregister", Vector_string_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_GumException", _wrap_new_GumException, METH_VARARGS, (char *)"\n"
		"GumException(std::string const aMsg, std::string const aType)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"aMsg: std::string const\n"
		"aType: std::string const\n"
		"\n"
		"GumException(std::string const aMsg)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"aMsg: std::string const\n"
		"\n"
		"GumException()\n"
		"new_GumException(GumException e) -> GumException\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"e: gum::Exception const &\n"
		"\n"
		""},
	 { (char *)"delete_GumException", _wrap_delete_GumException, METH_VARARGS, (char *)"\n"
		"delete_GumException(GumException self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Exception *\n"
		"\n"
		""},
	 { (char *)"GumException___str__", _wrap_GumException___str__, METH_VARARGS, (char *)"\n"
		"GumException___str__(GumException self) -> std::string const\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Exception const *\n"
		"\n"
		""},
	 { (char *)"GumException_errorContent", _wrap_GumException_errorContent, METH_VARARGS, (char *)"\n"
		"GumException_errorContent(GumException self) -> std::string const\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Exception const *\n"
		"\n"
		""},
	 { (char *)"GumException_errorType", _wrap_GumException_errorType, METH_VARARGS, (char *)"\n"
		"GumException_errorType(GumException self) -> std::string const\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Exception const *\n"
		"\n"
		""},
	 { (char *)"GumException_errorCallStack", _wrap_GumException_errorCallStack, METH_VARARGS, (char *)"\n"
		"GumException_errorCallStack(GumException self) -> std::string const\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Exception const *\n"
		"\n"
		""},
	 { (char *)"GumException_swigregister", GumException_swigregister, METH_VARARGS, NULL},
	 { (char *)"__createMsg", _wrap___createMsg, METH_VARARGS, (char *)"\n"
		"__createMsg(std::string const & filename, std::string const & function, int const line, std::string const & msg) -> std::string const\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"filename: std::string const &\n"
		"function: std::string const &\n"
		"line: int const\n"
		"msg: std::string const &\n"
		"\n"
		""},
	 { (char *)"new_IdError", _wrap_new_IdError, METH_VARARGS, (char *)"\n"
		"IdError(std::string aMsg, std::string aType)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"aMsg: std::string\n"
		"aType: std::string\n"
		"\n"
		"new_IdError(std::string aMsg) -> IdError\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"aMsg: std::string\n"
		"\n"
		""},
	 { (char *)"delete_IdError", _wrap_delete_IdError, METH_VARARGS, (char *)"\n"
		"delete_IdError(IdError self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::IdError *\n"
		"\n"
		""},
	 { (char *)"IdError_swigregister", IdError_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_FatalError", _wrap_new_FatalError, METH_VARARGS, (char *)"\n"
		"FatalError(std::string aMsg, std::string aType)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"aMsg: std::string\n"
		"aType: std::string\n"
		"\n"
		"new_FatalError(std::string aMsg) -> FatalError\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"aMsg: std::string\n"
		"\n"
		""},
	 { (char *)"delete_FatalError", _wrap_delete_FatalError, METH_VARARGS, (char *)"\n"
		"delete_FatalError(FatalError self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::FatalError *\n"
		"\n"
		""},
	 { (char *)"FatalError_swigregister", FatalError_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_UndefinedIteratorValue", _wrap_new_UndefinedIteratorValue, METH_VARARGS, (char *)"\n"
		"UndefinedIteratorValue(std::string aMsg, std::string aType)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"aMsg: std::string\n"
		"aType: std::string\n"
		"\n"
		"new_UndefinedIteratorValue(std::string aMsg) -> UndefinedIteratorValue\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"aMsg: std::string\n"
		"\n"
		""},
	 { (char *)"delete_UndefinedIteratorValue", _wrap_delete_UndefinedIteratorValue, METH_VARARGS, (char *)"\n"
		"delete_UndefinedIteratorValue(UndefinedIteratorValue self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::UndefinedIteratorValue *\n"
		"\n"
		""},
	 { (char *)"UndefinedIteratorValue_swigregister", UndefinedIteratorValue_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_UndefinedIteratorKey", _wrap_new_UndefinedIteratorKey, METH_VARARGS, (char *)"\n"
		"UndefinedIteratorKey(std::string aMsg, std::string aType)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"aMsg: std::string\n"
		"aType: std::string\n"
		"\n"
		"new_UndefinedIteratorKey(std::string aMsg) -> UndefinedIteratorKey\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"aMsg: std::string\n"
		"\n"
		""},
	 { (char *)"delete_UndefinedIteratorKey", _wrap_delete_UndefinedIteratorKey, METH_VARARGS, (char *)"\n"
		"delete_UndefinedIteratorKey(UndefinedIteratorKey self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::UndefinedIteratorKey *\n"
		"\n"
		""},
	 { (char *)"UndefinedIteratorKey_swigregister", UndefinedIteratorKey_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_NullElement", _wrap_new_NullElement, METH_VARARGS, (char *)"\n"
		"NullElement(std::string aMsg, std::string aType)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"aMsg: std::string\n"
		"aType: std::string\n"
		"\n"
		"new_NullElement(std::string aMsg) -> NullElement\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"aMsg: std::string\n"
		"\n"
		""},
	 { (char *)"delete_NullElement", _wrap_delete_NullElement, METH_VARARGS, (char *)"\n"
		"delete_NullElement(NullElement self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::NullElement *\n"
		"\n"
		""},
	 { (char *)"NullElement_swigregister", NullElement_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_UndefinedElement", _wrap_new_UndefinedElement, METH_VARARGS, (char *)"\n"
		"UndefinedElement(std::string aMsg, std::string aType)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"aMsg: std::string\n"
		"aType: std::string\n"
		"\n"
		"new_UndefinedElement(std::string aMsg) -> UndefinedElement\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"aMsg: std::string\n"
		"\n"
		""},
	 { (char *)"delete_UndefinedElement", _wrap_delete_UndefinedElement, METH_VARARGS, (char *)"\n"
		"delete_UndefinedElement(UndefinedElement self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::UndefinedElement *\n"
		"\n"
		""},
	 { (char *)"UndefinedElement_swigregister", UndefinedElement_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_SizeError", _wrap_new_SizeError, METH_VARARGS, (char *)"\n"
		"SizeError(std::string aMsg, std::string aType)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"aMsg: std::string\n"
		"aType: std::string\n"
		"\n"
		"new_SizeError(std::string aMsg) -> SizeError\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"aMsg: std::string\n"
		"\n"
		""},
	 { (char *)"delete_SizeError", _wrap_delete_SizeError, METH_VARARGS, (char *)"\n"
		"delete_SizeError(SizeError self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::SizeError *\n"
		"\n"
		""},
	 { (char *)"SizeError_swigregister", SizeError_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_EmptySet", _wrap_new_EmptySet, METH_VARARGS, (char *)"\n"
		"EmptySet(std::string aMsg, std::string aType)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"aMsg: std::string\n"
		"aType: std::string\n"
		"\n"
		"new_EmptySet(std::string aMsg) -> EmptySet\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"aMsg: std::string\n"
		"\n"
		""},
	 { (char *)"delete_EmptySet", _wrap_delete_EmptySet, METH_VARARGS, (char *)"\n"
		"delete_EmptySet(EmptySet self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::EmptySet *\n"
		"\n"
		""},
	 { (char *)"EmptySet_swigregister", EmptySet_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_InvalidArgumentsNumber", _wrap_new_InvalidArgumentsNumber, METH_VARARGS, (char *)"\n"
		"InvalidArgumentsNumber(std::string aMsg, std::string aType)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"aMsg: std::string\n"
		"aType: std::string\n"
		"\n"
		"new_InvalidArgumentsNumber(std::string aMsg) -> InvalidArgumentsNumber\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"aMsg: std::string\n"
		"\n"
		""},
	 { (char *)"delete_InvalidArgumentsNumber", _wrap_delete_InvalidArgumentsNumber, METH_VARARGS, (char *)"\n"
		"delete_InvalidArgumentsNumber(InvalidArgumentsNumber self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::InvalidArgumentsNumber *\n"
		"\n"
		""},
	 { (char *)"InvalidArgumentsNumber_swigregister", InvalidArgumentsNumber_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_InvalidArgument", _wrap_new_InvalidArgument, METH_VARARGS, (char *)"\n"
		"InvalidArgument(std::string aMsg, std::string aType)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"aMsg: std::string\n"
		"aType: std::string\n"
		"\n"
		"new_InvalidArgument(std::string aMsg) -> InvalidArgument\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"aMsg: std::string\n"
		"\n"
		""},
	 { (char *)"delete_InvalidArgument", _wrap_delete_InvalidArgument, METH_VARARGS, (char *)"\n"
		"delete_InvalidArgument(InvalidArgument self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::InvalidArgument *\n"
		"\n"
		""},
	 { (char *)"InvalidArgument_swigregister", InvalidArgument_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_IOError", _wrap_new_IOError, METH_VARARGS, (char *)"\n"
		"IOError(std::string aMsg, std::string aType)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"aMsg: std::string\n"
		"aType: std::string\n"
		"\n"
		"new_IOError(std::string aMsg) -> IOError\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"aMsg: std::string\n"
		"\n"
		""},
	 { (char *)"delete_IOError", _wrap_delete_IOError, METH_VARARGS, (char *)"\n"
		"delete_IOError(IOError self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::IOError *\n"
		"\n"
		""},
	 { (char *)"IOError_swigregister", IOError_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_FormatNotFound", _wrap_new_FormatNotFound, METH_VARARGS, (char *)"\n"
		"FormatNotFound(std::string aMsg, std::string aType)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"aMsg: std::string\n"
		"aType: std::string\n"
		"\n"
		"new_FormatNotFound(std::string aMsg) -> FormatNotFound\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"aMsg: std::string\n"
		"\n"
		""},
	 { (char *)"delete_FormatNotFound", _wrap_delete_FormatNotFound, METH_VARARGS, (char *)"\n"
		"delete_FormatNotFound(FormatNotFound self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::FormatNotFound *\n"
		"\n"
		""},
	 { (char *)"FormatNotFound_swigregister", FormatNotFound_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_OperationNotAllowed", _wrap_new_OperationNotAllowed, METH_VARARGS, (char *)"\n"
		"OperationNotAllowed(std::string aMsg, std::string aType)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"aMsg: std::string\n"
		"aType: std::string\n"
		"\n"
		"new_OperationNotAllowed(std::string aMsg) -> OperationNotAllowed\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"aMsg: std::string\n"
		"\n"
		""},
	 { (char *)"delete_OperationNotAllowed", _wrap_delete_OperationNotAllowed, METH_VARARGS, (char *)"\n"
		"delete_OperationNotAllowed(OperationNotAllowed self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::OperationNotAllowed *\n"
		"\n"
		""},
	 { (char *)"OperationNotAllowed_swigregister", OperationNotAllowed_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_NotFound", _wrap_new_NotFound, METH_VARARGS, (char *)"\n"
		"NotFound(std::string aMsg, std::string aType)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"aMsg: std::string\n"
		"aType: std::string\n"
		"\n"
		"new_NotFound(std::string aMsg) -> NotFound\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"aMsg: std::string\n"
		"\n"
		""},
	 { (char *)"delete_NotFound", _wrap_delete_NotFound, METH_VARARGS, (char *)"\n"
		"delete_NotFound(NotFound self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::NotFound *\n"
		"\n"
		""},
	 { (char *)"NotFound_swigregister", NotFound_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ReferenceError", _wrap_new_ReferenceError, METH_VARARGS, (char *)"\n"
		"ReferenceError(std::string aMsg, std::string aType)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"aMsg: std::string\n"
		"aType: std::string\n"
		"\n"
		"new_ReferenceError(std::string aMsg) -> ReferenceError\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"aMsg: std::string\n"
		"\n"
		""},
	 { (char *)"delete_ReferenceError", _wrap_delete_ReferenceError, METH_VARARGS, (char *)"\n"
		"delete_ReferenceError(ReferenceError self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::ReferenceError *\n"
		"\n"
		""},
	 { (char *)"ReferenceError_swigregister", ReferenceError_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_OutOfBounds", _wrap_new_OutOfBounds, METH_VARARGS, (char *)"\n"
		"OutOfBounds(std::string aMsg, std::string aType)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"aMsg: std::string\n"
		"aType: std::string\n"
		"\n"
		"new_OutOfBounds(std::string aMsg) -> OutOfBounds\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"aMsg: std::string\n"
		"\n"
		""},
	 { (char *)"delete_OutOfBounds", _wrap_delete_OutOfBounds, METH_VARARGS, (char *)"\n"
		"delete_OutOfBounds(OutOfBounds self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::OutOfBounds *\n"
		"\n"
		""},
	 { (char *)"OutOfBounds_swigregister", OutOfBounds_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_OutOfLowerBound", _wrap_new_OutOfLowerBound, METH_VARARGS, (char *)"\n"
		"OutOfLowerBound(std::string aMsg, std::string aType)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"aMsg: std::string\n"
		"aType: std::string\n"
		"\n"
		"new_OutOfLowerBound(std::string aMsg) -> OutOfLowerBound\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"aMsg: std::string\n"
		"\n"
		""},
	 { (char *)"delete_OutOfLowerBound", _wrap_delete_OutOfLowerBound, METH_VARARGS, (char *)"\n"
		"delete_OutOfLowerBound(OutOfLowerBound self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::OutOfLowerBound *\n"
		"\n"
		""},
	 { (char *)"OutOfLowerBound_swigregister", OutOfLowerBound_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_OutOfUpperBound", _wrap_new_OutOfUpperBound, METH_VARARGS, (char *)"\n"
		"OutOfUpperBound(std::string aMsg, std::string aType)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"aMsg: std::string\n"
		"aType: std::string\n"
		"\n"
		"new_OutOfUpperBound(std::string aMsg) -> OutOfUpperBound\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"aMsg: std::string\n"
		"\n"
		""},
	 { (char *)"delete_OutOfUpperBound", _wrap_delete_OutOfUpperBound, METH_VARARGS, (char *)"\n"
		"delete_OutOfUpperBound(OutOfUpperBound self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::OutOfUpperBound *\n"
		"\n"
		""},
	 { (char *)"OutOfUpperBound_swigregister", OutOfUpperBound_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_DuplicateElement", _wrap_new_DuplicateElement, METH_VARARGS, (char *)"\n"
		"DuplicateElement(std::string aMsg, std::string aType)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"aMsg: std::string\n"
		"aType: std::string\n"
		"\n"
		"new_DuplicateElement(std::string aMsg) -> DuplicateElement\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"aMsg: std::string\n"
		"\n"
		""},
	 { (char *)"delete_DuplicateElement", _wrap_delete_DuplicateElement, METH_VARARGS, (char *)"\n"
		"delete_DuplicateElement(DuplicateElement self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::DuplicateElement *\n"
		"\n"
		""},
	 { (char *)"DuplicateElement_swigregister", DuplicateElement_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_DuplicateLabel", _wrap_new_DuplicateLabel, METH_VARARGS, (char *)"\n"
		"DuplicateLabel(std::string aMsg, std::string aType)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"aMsg: std::string\n"
		"aType: std::string\n"
		"\n"
		"new_DuplicateLabel(std::string aMsg) -> DuplicateLabel\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"aMsg: std::string\n"
		"\n"
		""},
	 { (char *)"delete_DuplicateLabel", _wrap_delete_DuplicateLabel, METH_VARARGS, (char *)"\n"
		"delete_DuplicateLabel(DuplicateLabel self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::DuplicateLabel *\n"
		"\n"
		""},
	 { (char *)"DuplicateLabel_swigregister", DuplicateLabel_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_GraphError", _wrap_new_GraphError, METH_VARARGS, (char *)"\n"
		"GraphError(std::string aMsg, std::string aType)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"aMsg: std::string\n"
		"aType: std::string\n"
		"\n"
		"new_GraphError(std::string aMsg) -> GraphError\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"aMsg: std::string\n"
		"\n"
		""},
	 { (char *)"delete_GraphError", _wrap_delete_GraphError, METH_VARARGS, (char *)"\n"
		"delete_GraphError(GraphError self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::GraphError *\n"
		"\n"
		""},
	 { (char *)"GraphError_swigregister", GraphError_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_NoNeighbour", _wrap_new_NoNeighbour, METH_VARARGS, (char *)"\n"
		"NoNeighbour(std::string aMsg, std::string aType)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"aMsg: std::string\n"
		"aType: std::string\n"
		"\n"
		"new_NoNeighbour(std::string aMsg) -> NoNeighbour\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"aMsg: std::string\n"
		"\n"
		""},
	 { (char *)"delete_NoNeighbour", _wrap_delete_NoNeighbour, METH_VARARGS, (char *)"\n"
		"delete_NoNeighbour(NoNeighbour self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::NoNeighbour *\n"
		"\n"
		""},
	 { (char *)"NoNeighbour_swigregister", NoNeighbour_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_NoParent", _wrap_new_NoParent, METH_VARARGS, (char *)"\n"
		"NoParent(std::string aMsg, std::string aType)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"aMsg: std::string\n"
		"aType: std::string\n"
		"\n"
		"new_NoParent(std::string aMsg) -> NoParent\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"aMsg: std::string\n"
		"\n"
		""},
	 { (char *)"delete_NoParent", _wrap_delete_NoParent, METH_VARARGS, (char *)"\n"
		"delete_NoParent(NoParent self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::NoParent *\n"
		"\n"
		""},
	 { (char *)"NoParent_swigregister", NoParent_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_NoChild", _wrap_new_NoChild, METH_VARARGS, (char *)"\n"
		"NoChild(std::string aMsg, std::string aType)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"aMsg: std::string\n"
		"aType: std::string\n"
		"\n"
		"new_NoChild(std::string aMsg) -> NoChild\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"aMsg: std::string\n"
		"\n"
		""},
	 { (char *)"delete_NoChild", _wrap_delete_NoChild, METH_VARARGS, (char *)"\n"
		"delete_NoChild(NoChild self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::NoChild *\n"
		"\n"
		""},
	 { (char *)"NoChild_swigregister", NoChild_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_InvalidEdge", _wrap_new_InvalidEdge, METH_VARARGS, (char *)"\n"
		"InvalidEdge(std::string aMsg, std::string aType)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"aMsg: std::string\n"
		"aType: std::string\n"
		"\n"
		"new_InvalidEdge(std::string aMsg) -> InvalidEdge\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"aMsg: std::string\n"
		"\n"
		""},
	 { (char *)"delete_InvalidEdge", _wrap_delete_InvalidEdge, METH_VARARGS, (char *)"\n"
		"delete_InvalidEdge(InvalidEdge self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::InvalidEdge *\n"
		"\n"
		""},
	 { (char *)"InvalidEdge_swigregister", InvalidEdge_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_InvalidArc", _wrap_new_InvalidArc, METH_VARARGS, (char *)"\n"
		"InvalidArc(std::string aMsg, std::string aType)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"aMsg: std::string\n"
		"aType: std::string\n"
		"\n"
		"new_InvalidArc(std::string aMsg) -> InvalidArc\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"aMsg: std::string\n"
		"\n"
		""},
	 { (char *)"delete_InvalidArc", _wrap_delete_InvalidArc, METH_VARARGS, (char *)"\n"
		"delete_InvalidArc(InvalidArc self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::InvalidArc *\n"
		"\n"
		""},
	 { (char *)"InvalidArc_swigregister", InvalidArc_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_InvalidNode", _wrap_new_InvalidNode, METH_VARARGS, (char *)"\n"
		"InvalidNode(std::string aMsg, std::string aType)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"aMsg: std::string\n"
		"aType: std::string\n"
		"\n"
		"new_InvalidNode(std::string aMsg) -> InvalidNode\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"aMsg: std::string\n"
		"\n"
		""},
	 { (char *)"delete_InvalidNode", _wrap_delete_InvalidNode, METH_VARARGS, (char *)"\n"
		"delete_InvalidNode(InvalidNode self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::InvalidNode *\n"
		"\n"
		""},
	 { (char *)"InvalidNode_swigregister", InvalidNode_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_EmptyBSTree", _wrap_new_EmptyBSTree, METH_VARARGS, (char *)"\n"
		"EmptyBSTree(std::string aMsg, std::string aType)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"aMsg: std::string\n"
		"aType: std::string\n"
		"\n"
		"new_EmptyBSTree(std::string aMsg) -> EmptyBSTree\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"aMsg: std::string\n"
		"\n"
		""},
	 { (char *)"delete_EmptyBSTree", _wrap_delete_EmptyBSTree, METH_VARARGS, (char *)"\n"
		"delete_EmptyBSTree(EmptyBSTree self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::EmptyBSTree *\n"
		"\n"
		""},
	 { (char *)"EmptyBSTree_swigregister", EmptyBSTree_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_DefaultInLabel", _wrap_new_DefaultInLabel, METH_VARARGS, (char *)"\n"
		"DefaultInLabel(std::string aMsg, std::string aType)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"aMsg: std::string\n"
		"aType: std::string\n"
		"\n"
		"new_DefaultInLabel(std::string aMsg) -> DefaultInLabel\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"aMsg: std::string\n"
		"\n"
		""},
	 { (char *)"delete_DefaultInLabel", _wrap_delete_DefaultInLabel, METH_VARARGS, (char *)"\n"
		"delete_DefaultInLabel(DefaultInLabel self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::DefaultInLabel *\n"
		"\n"
		""},
	 { (char *)"DefaultInLabel_swigregister", DefaultInLabel_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_InvalidDirectedCycle", _wrap_new_InvalidDirectedCycle, METH_VARARGS, (char *)"\n"
		"InvalidDirectedCycle(std::string aMsg, std::string aType)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"aMsg: std::string\n"
		"aType: std::string\n"
		"\n"
		"new_InvalidDirectedCycle(std::string aMsg) -> InvalidDirectedCycle\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"aMsg: std::string\n"
		"\n"
		""},
	 { (char *)"delete_InvalidDirectedCycle", _wrap_delete_InvalidDirectedCycle, METH_VARARGS, (char *)"\n"
		"delete_InvalidDirectedCycle(InvalidDirectedCycle self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::InvalidDirectedCycle *\n"
		"\n"
		""},
	 { (char *)"InvalidDirectedCycle_swigregister", InvalidDirectedCycle_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_CPTError", _wrap_new_CPTError, METH_VARARGS, (char *)"\n"
		"CPTError(std::string aMsg, std::string aType)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"aMsg: std::string\n"
		"aType: std::string\n"
		"\n"
		"new_CPTError(std::string aMsg) -> CPTError\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"aMsg: std::string\n"
		"\n"
		""},
	 { (char *)"delete_CPTError", _wrap_delete_CPTError, METH_VARARGS, (char *)"\n"
		"delete_CPTError(CPTError self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::CPTError *\n"
		"\n"
		""},
	 { (char *)"CPTError_swigregister", CPTError_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_CPTNoSumTo1", _wrap_new_CPTNoSumTo1, METH_VARARGS, (char *)"\n"
		"CPTNoSumTo1(std::string aMsg, std::string aType)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"aMsg: std::string\n"
		"aType: std::string\n"
		"\n"
		"new_CPTNoSumTo1(std::string aMsg) -> CPTNoSumTo1\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"aMsg: std::string\n"
		"\n"
		""},
	 { (char *)"delete_CPTNoSumTo1", _wrap_delete_CPTNoSumTo1, METH_VARARGS, (char *)"\n"
		"delete_CPTNoSumTo1(CPTNoSumTo1 self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::CPTNoSumTo1 *\n"
		"\n"
		""},
	 { (char *)"CPTNoSumTo1_swigregister", CPTNoSumTo1_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_IncompatibleEvidence", _wrap_new_IncompatibleEvidence, METH_VARARGS, (char *)"\n"
		"IncompatibleEvidence(std::string aMsg, std::string aType)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"aMsg: std::string\n"
		"aType: std::string\n"
		"\n"
		"new_IncompatibleEvidence(std::string aMsg) -> IncompatibleEvidence\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"aMsg: std::string\n"
		"\n"
		""},
	 { (char *)"delete_IncompatibleEvidence", _wrap_delete_IncompatibleEvidence, METH_VARARGS, (char *)"\n"
		"delete_IncompatibleEvidence(IncompatibleEvidence self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::IncompatibleEvidence *\n"
		"\n"
		""},
	 { (char *)"IncompatibleEvidence_swigregister", IncompatibleEvidence_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_FactoryError", _wrap_new_FactoryError, METH_VARARGS, (char *)"\n"
		"FactoryError(std::string aMsg, std::string aType)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"aMsg: std::string\n"
		"aType: std::string\n"
		"\n"
		"new_FactoryError(std::string aMsg) -> FactoryError\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"aMsg: std::string\n"
		"\n"
		""},
	 { (char *)"delete_FactoryError", _wrap_delete_FactoryError, METH_VARARGS, (char *)"\n"
		"delete_FactoryError(FactoryError self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::FactoryError *\n"
		"\n"
		""},
	 { (char *)"FactoryError_swigregister", FactoryError_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_FactoryInvalidState", _wrap_new_FactoryInvalidState, METH_VARARGS, (char *)"\n"
		"FactoryInvalidState(std::string aMsg, std::string aType)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"aMsg: std::string\n"
		"aType: std::string\n"
		"\n"
		"new_FactoryInvalidState(std::string aMsg) -> FactoryInvalidState\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"aMsg: std::string\n"
		"\n"
		""},
	 { (char *)"delete_FactoryInvalidState", _wrap_delete_FactoryInvalidState, METH_VARARGS, (char *)"\n"
		"delete_FactoryInvalidState(FactoryInvalidState self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::FactoryInvalidState *\n"
		"\n"
		""},
	 { (char *)"FactoryInvalidState_swigregister", FactoryInvalidState_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_WrongType", _wrap_new_WrongType, METH_VARARGS, (char *)"\n"
		"WrongType(std::string aMsg, std::string aType)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"aMsg: std::string\n"
		"aType: std::string\n"
		"\n"
		"new_WrongType(std::string aMsg) -> WrongType\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"aMsg: std::string\n"
		"\n"
		""},
	 { (char *)"delete_WrongType", _wrap_delete_WrongType, METH_VARARGS, (char *)"\n"
		"delete_WrongType(WrongType self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::WrongType *\n"
		"\n"
		""},
	 { (char *)"WrongType_swigregister", WrongType_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_WrongClassElement", _wrap_new_WrongClassElement, METH_VARARGS, (char *)"\n"
		"WrongClassElement(std::string aMsg, std::string aType)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"aMsg: std::string\n"
		"aType: std::string\n"
		"\n"
		"new_WrongClassElement(std::string aMsg) -> WrongClassElement\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"aMsg: std::string\n"
		"\n"
		""},
	 { (char *)"delete_WrongClassElement", _wrap_delete_WrongClassElement, METH_VARARGS, (char *)"\n"
		"delete_WrongClassElement(WrongClassElement self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::WrongClassElement *\n"
		"\n"
		""},
	 { (char *)"WrongClassElement_swigregister", WrongClassElement_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_TypeError", _wrap_new_TypeError, METH_VARARGS, (char *)"\n"
		"TypeError(std::string aMsg, std::string aType)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"aMsg: std::string\n"
		"aType: std::string\n"
		"\n"
		"new_TypeError(std::string aMsg) -> TypeError\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"aMsg: std::string\n"
		"\n"
		""},
	 { (char *)"delete_TypeError", _wrap_delete_TypeError, METH_VARARGS, (char *)"\n"
		"delete_TypeError(TypeError self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::TypeError *\n"
		"\n"
		""},
	 { (char *)"TypeError_swigregister", TypeError_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_LearningError", _wrap_new_LearningError, METH_VARARGS, (char *)"\n"
		"LearningError(std::string aMsg, std::string aType)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"aMsg: std::string\n"
		"aType: std::string\n"
		"\n"
		"new_LearningError(std::string aMsg) -> LearningError\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"aMsg: std::string\n"
		"\n"
		""},
	 { (char *)"delete_LearningError", _wrap_delete_LearningError, METH_VARARGS, (char *)"\n"
		"delete_LearningError(LearningError self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::LearningError *\n"
		"\n"
		""},
	 { (char *)"LearningError_swigregister", LearningError_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_IncompatibleScoreApriori", _wrap_new_IncompatibleScoreApriori, METH_VARARGS, (char *)"\n"
		"IncompatibleScoreApriori(std::string aMsg, std::string aType)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"aMsg: std::string\n"
		"aType: std::string\n"
		"\n"
		"new_IncompatibleScoreApriori(std::string aMsg) -> IncompatibleScoreApriori\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"aMsg: std::string\n"
		"\n"
		""},
	 { (char *)"delete_IncompatibleScoreApriori", _wrap_delete_IncompatibleScoreApriori, METH_VARARGS, (char *)"\n"
		"delete_IncompatibleScoreApriori(IncompatibleScoreApriori self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::IncompatibleScoreApriori *\n"
		"\n"
		""},
	 { (char *)"IncompatibleScoreApriori_swigregister", IncompatibleScoreApriori_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_PossiblyIncompatibleScoreApriori", _wrap_new_PossiblyIncompatibleScoreApriori, METH_VARARGS, (char *)"\n"
		"PossiblyIncompatibleScoreApriori(std::string aMsg, std::string aType)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"aMsg: std::string\n"
		"aType: std::string\n"
		"\n"
		"new_PossiblyIncompatibleScoreApriori(std::string aMsg) -> PossiblyIncompatibleScoreApriori\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"aMsg: std::string\n"
		"\n"
		""},
	 { (char *)"delete_PossiblyIncompatibleScoreApriori", _wrap_delete_PossiblyIncompatibleScoreApriori, METH_VARARGS, (char *)"\n"
		"delete_PossiblyIncompatibleScoreApriori(PossiblyIncompatibleScoreApriori self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::PossiblyIncompatibleScoreApriori *\n"
		"\n"
		""},
	 { (char *)"PossiblyIncompatibleScoreApriori_swigregister", PossiblyIncompatibleScoreApriori_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_DatabaseError", _wrap_new_DatabaseError, METH_VARARGS, (char *)"\n"
		"DatabaseError(std::string aMsg, std::string aType)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"aMsg: std::string\n"
		"aType: std::string\n"
		"\n"
		"new_DatabaseError(std::string aMsg) -> DatabaseError\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"aMsg: std::string\n"
		"\n"
		""},
	 { (char *)"delete_DatabaseError", _wrap_delete_DatabaseError, METH_VARARGS, (char *)"\n"
		"delete_DatabaseError(DatabaseError self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::DatabaseError *\n"
		"\n"
		""},
	 { (char *)"DatabaseError_swigregister", DatabaseError_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_MissingVariableInDatabase", _wrap_new_MissingVariableInDatabase, METH_VARARGS, (char *)"\n"
		"MissingVariableInDatabase(std::string aMsg, std::string aType)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"aMsg: std::string\n"
		"aType: std::string\n"
		"\n"
		"new_MissingVariableInDatabase(std::string aMsg) -> MissingVariableInDatabase\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"aMsg: std::string\n"
		"\n"
		""},
	 { (char *)"delete_MissingVariableInDatabase", _wrap_delete_MissingVariableInDatabase, METH_VARARGS, (char *)"\n"
		"delete_MissingVariableInDatabase(MissingVariableInDatabase self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::MissingVariableInDatabase *\n"
		"\n"
		""},
	 { (char *)"MissingVariableInDatabase_swigregister", MissingVariableInDatabase_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_UnknownLabelInDatabase", _wrap_new_UnknownLabelInDatabase, METH_VARARGS, (char *)"\n"
		"UnknownLabelInDatabase(std::string aMsg, std::string aType)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"aMsg: std::string\n"
		"aType: std::string\n"
		"\n"
		"new_UnknownLabelInDatabase(std::string aMsg) -> UnknownLabelInDatabase\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"aMsg: std::string\n"
		"\n"
		""},
	 { (char *)"delete_UnknownLabelInDatabase", _wrap_delete_UnknownLabelInDatabase, METH_VARARGS, (char *)"\n"
		"delete_UnknownLabelInDatabase(UnknownLabelInDatabase self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::UnknownLabelInDatabase *\n"
		"\n"
		""},
	 { (char *)"UnknownLabelInDatabase_swigregister", UnknownLabelInDatabase_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_SyntaxError", _wrap_new_SyntaxError, METH_VARARGS, (char *)"\n"
		"SyntaxError(std::string const & aMsg, gum::Size nol, gum::Size noc, std::string aType)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"aMsg: std::string const &\n"
		"nol: gum::Size\n"
		"noc: gum::Size\n"
		"aType: std::string\n"
		"\n"
		"new_SyntaxError(std::string const & aMsg, gum::Size nol, gum::Size noc) -> SyntaxError\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"aMsg: std::string const &\n"
		"nol: gum::Size\n"
		"noc: gum::Size\n"
		"\n"
		""},
	 { (char *)"SyntaxError_col", _wrap_SyntaxError_col, METH_VARARGS, (char *)"\n"
		"SyntaxError_col(SyntaxError self) -> gum::Size\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::SyntaxError const *\n"
		"\n"
		""},
	 { (char *)"SyntaxError_line", _wrap_SyntaxError_line, METH_VARARGS, (char *)"\n"
		"SyntaxError_line(SyntaxError self) -> gum::Size\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::SyntaxError const *\n"
		"\n"
		""},
	 { (char *)"delete_SyntaxError", _wrap_delete_SyntaxError, METH_VARARGS, (char *)"\n"
		"delete_SyntaxError(SyntaxError self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::SyntaxError *\n"
		"\n"
		""},
	 { (char *)"SyntaxError_swigregister", SyntaxError_swigregister, METH_VARARGS, NULL},
	 { (char *)"randomProba", _wrap_randomProba, METH_VARARGS, (char *)"randomProba() -> double"},
	 { (char *)"randomGeneratorSeed", _wrap_randomGeneratorSeed, METH_VARARGS, (char *)"randomGeneratorSeed() -> unsigned int"},
	 { (char *)"initRandom", _wrap_initRandom, METH_VARARGS, (char *)"\n"
		"initRandom(unsigned int seed=0)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"seed: unsigned int\n"
		"\n"
		"initRandom()\n"
		""},
	 { (char *)"getRandomGenerator", _wrap_getRandomGenerator, METH_VARARGS, (char *)"\n"
		"getRandomGenerator(unsigned int seed=0) -> std::default_random_engine\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"seed: unsigned int\n"
		"\n"
		"getRandomGenerator() -> std::default_random_engine\n"
		""},
	 { (char *)"isOMP", _wrap_isOMP, METH_VARARGS, (char *)"isOMP() -> bool"},
	 { (char *)"setNumberOfThreads", _wrap_setNumberOfThreads, METH_VARARGS, (char *)"\n"
		"setNumberOfThreads(unsigned int number)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"number: unsigned int\n"
		"\n"
		""},
	 { (char *)"getMaxNumberOfThreads", _wrap_getMaxNumberOfThreads, METH_VARARGS, (char *)"getMaxNumberOfThreads() -> unsigned int"},
	 { (char *)"getThreadNumber", _wrap_getThreadNumber, METH_VARARGS, (char *)"getThreadNumber() -> unsigned int"},
	 { (char *)"getNumberOfRunningThreads", _wrap_getNumberOfRunningThreads, METH_VARARGS, (char *)"getNumberOfRunningThreads() -> unsigned int"},
	 { (char *)"getNumberOfLogicalProcessors", _wrap_getNumberOfLogicalProcessors, METH_VARARGS, (char *)"getNumberOfLogicalProcessors() -> unsigned int"},
	 { (char *)"setNestedParallelism", _wrap_setNestedParallelism, METH_VARARGS, (char *)"\n"
		"setNestedParallelism(bool value)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"value: bool\n"
		"\n"
		""},
	 { (char *)"getNestedParallelism", _wrap_getNestedParallelism, METH_VARARGS, (char *)"getNestedParallelism() -> bool"},
	 { (char *)"setDynamicThreadsNumber", _wrap_setDynamicThreadsNumber, METH_VARARGS, (char *)"\n"
		"setDynamicThreadsNumber(bool value)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"value: bool\n"
		"\n"
		""},
	 { (char *)"getDynamicThreadsNumber", _wrap_getDynamicThreadsNumber, METH_VARARGS, (char *)"getDynamicThreadsNumber() -> bool"},
	 { (char *)"delete_Variable", _wrap_delete_Variable, METH_VARARGS, (char *)"\n"
		"delete_Variable(Variable self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Variable *\n"
		"\n"
		""},
	 { (char *)"Variable_clone", _wrap_Variable_clone, METH_VARARGS, (char *)"\n"
		"Variable_clone(Variable self) -> Variable\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Variable const *\n"
		"\n"
		""},
	 { (char *)"Variable___eq__", _wrap_Variable___eq__, METH_VARARGS, (char *)"\n"
		"Variable___eq__(Variable self, Variable aRV) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Variable const *\n"
		"aRV: gum::Variable const &\n"
		"\n"
		""},
	 { (char *)"Variable___ne__", _wrap_Variable___ne__, METH_VARARGS, (char *)"\n"
		"Variable___ne__(Variable self, Variable aRV) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Variable const *\n"
		"aRV: gum::Variable const &\n"
		"\n"
		""},
	 { (char *)"Variable_setName", _wrap_Variable_setName, METH_VARARGS, (char *)"\n"
		"Variable_setName(Variable self, std::string const & theValue)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Variable *\n"
		"theValue: std::string const &\n"
		"\n"
		""},
	 { (char *)"Variable_name", _wrap_Variable_name, METH_VARARGS, (char *)"\n"
		"Variable_name(Variable self) -> std::string const &\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Variable const *\n"
		"\n"
		""},
	 { (char *)"Variable_setDescription", _wrap_Variable_setDescription, METH_VARARGS, (char *)"\n"
		"Variable_setDescription(Variable self, std::string const & theValue)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Variable const *\n"
		"theValue: std::string const &\n"
		"\n"
		""},
	 { (char *)"Variable_description", _wrap_Variable_description, METH_VARARGS, (char *)"\n"
		"Variable_description(Variable self) -> std::string const &\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Variable const *\n"
		"\n"
		""},
	 { (char *)"Variable_swigregister", Variable_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_DiscreteVariable", _wrap_delete_DiscreteVariable, METH_VARARGS, (char *)"\n"
		"delete_DiscreteVariable(DiscreteVariable self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::DiscreteVariable *\n"
		"\n"
		""},
	 { (char *)"DiscreteVariable_clone", _wrap_DiscreteVariable_clone, METH_VARARGS, (char *)"\n"
		"DiscreteVariable_clone(DiscreteVariable self) -> DiscreteVariable\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::DiscreteVariable const *\n"
		"\n"
		""},
	 { (char *)"DiscreteVariable_empty", _wrap_DiscreteVariable_empty, METH_VARARGS, (char *)"\n"
		"DiscreteVariable_empty(DiscreteVariable self) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::DiscreteVariable const *\n"
		"\n"
		""},
	 { (char *)"DiscreteVariable_domainSize", _wrap_DiscreteVariable_domainSize, METH_VARARGS, (char *)"\n"
		"DiscreteVariable_domainSize(DiscreteVariable self) -> gum::Size\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::DiscreteVariable const *\n"
		"\n"
		""},
	 { (char *)"DiscreteVariable_labels", _wrap_DiscreteVariable_labels, METH_VARARGS, (char *)"\n"
		"DiscreteVariable_labels(DiscreteVariable self) -> Vector_string\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::DiscreteVariable const *\n"
		"\n"
		""},
	 { (char *)"DiscreteVariable_numerical", _wrap_DiscreteVariable_numerical, METH_VARARGS, (char *)"\n"
		"DiscreteVariable_numerical(DiscreteVariable self, gum::Idx indice) -> double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::DiscreteVariable const *\n"
		"indice: gum::Idx\n"
		"\n"
		""},
	 { (char *)"DiscreteVariable_varType", _wrap_DiscreteVariable_varType, METH_VARARGS, (char *)"\n"
		"DiscreteVariable_varType(DiscreteVariable self) -> gum::DiscreteVariable::VarType\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::DiscreteVariable const *\n"
		"\n"
		""},
	 { (char *)"DiscreteVariable___eq__", _wrap_DiscreteVariable___eq__, METH_VARARGS, (char *)"\n"
		"DiscreteVariable___eq__(DiscreteVariable self, DiscreteVariable aRV) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::DiscreteVariable const *\n"
		"aRV: gum::DiscreteVariable const &\n"
		"\n"
		""},
	 { (char *)"DiscreteVariable___ne__", _wrap_DiscreteVariable___ne__, METH_VARARGS, (char *)"\n"
		"DiscreteVariable___ne__(DiscreteVariable self, DiscreteVariable aRV) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::DiscreteVariable const *\n"
		"aRV: gum::DiscreteVariable const &\n"
		"\n"
		""},
	 { (char *)"DiscreteVariable_index", _wrap_DiscreteVariable_index, METH_VARARGS, (char *)"\n"
		"DiscreteVariable_index(DiscreteVariable self, std::string const & label) -> gum::Idx\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::DiscreteVariable const *\n"
		"label: std::string const &\n"
		"\n"
		""},
	 { (char *)"DiscreteVariable_label", _wrap_DiscreteVariable_label, METH_VARARGS, (char *)"\n"
		"DiscreteVariable_label(DiscreteVariable self, gum::Idx i) -> std::string\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::DiscreteVariable const *\n"
		"i: gum::Idx\n"
		"\n"
		""},
	 { (char *)"DiscreteVariable___str__", _wrap_DiscreteVariable___str__, METH_VARARGS, (char *)"\n"
		"DiscreteVariable___str__(DiscreteVariable self) -> std::string const\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::DiscreteVariable const *\n"
		"\n"
		""},
	 { (char *)"DiscreteVariable_toStringWithDescription", _wrap_DiscreteVariable_toStringWithDescription, METH_VARARGS, (char *)"\n"
		"DiscreteVariable_toStringWithDescription(DiscreteVariable self) -> std::string const\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::DiscreteVariable const *\n"
		"\n"
		""},
	 { (char *)"DiscreteVariable_domain", _wrap_DiscreteVariable_domain, METH_VARARGS, (char *)"\n"
		"DiscreteVariable_domain(DiscreteVariable self) -> std::string const\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::DiscreteVariable const *\n"
		"\n"
		""},
	 { (char *)"DiscreteVariable_toLabelizedVar", _wrap_DiscreteVariable_toLabelizedVar, METH_VARARGS, (char *)"\n"
		"DiscreteVariable_toLabelizedVar(DiscreteVariable self) -> LabelizedVariable\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::DiscreteVariable *\n"
		"\n"
		""},
	 { (char *)"DiscreteVariable_toRangeVar", _wrap_DiscreteVariable_toRangeVar, METH_VARARGS, (char *)"\n"
		"DiscreteVariable_toRangeVar(DiscreteVariable self) -> RangeVariable\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::DiscreteVariable *\n"
		"\n"
		""},
	 { (char *)"DiscreteVariable_toDiscretizedVar", _wrap_DiscreteVariable_toDiscretizedVar, METH_VARARGS, (char *)"\n"
		"DiscreteVariable_toDiscretizedVar(DiscreteVariable self) -> DiscretizedVariable_double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::DiscreteVariable *\n"
		"\n"
		""},
	 { (char *)"DiscreteVariable_swigregister", DiscreteVariable_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_LabelizedVariable", _wrap_new_LabelizedVariable, METH_VARARGS, (char *)"\n"
		"LabelizedVariable(std::string const & aName, std::string const & aDesc, int const nbrLabel=2)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"aName: std::string const &\n"
		"aDesc: std::string const &\n"
		"nbrLabel: int const\n"
		"\n"
		"LabelizedVariable(std::string const & aName, std::string const & aDesc)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"aName: std::string const &\n"
		"aDesc: std::string const &\n"
		"\n"
		"LabelizedVariable(std::string const & aName)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"aName: std::string const &\n"
		"\n"
		"new_LabelizedVariable(LabelizedVariable aLDRV) -> LabelizedVariable\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"aLDRV: gum::LabelizedVariable const &\n"
		"\n"
		""},
	 { (char *)"delete_LabelizedVariable", _wrap_delete_LabelizedVariable, METH_VARARGS, (char *)"\n"
		"delete_LabelizedVariable(LabelizedVariable self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::LabelizedVariable *\n"
		"\n"
		""},
	 { (char *)"LabelizedVariable_clone", _wrap_LabelizedVariable_clone, METH_VARARGS, (char *)"\n"
		"LabelizedVariable_clone(LabelizedVariable self) -> DiscreteVariable\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::LabelizedVariable const *\n"
		"\n"
		""},
	 { (char *)"LabelizedVariable_index", _wrap_LabelizedVariable_index, METH_VARARGS, (char *)"\n"
		"LabelizedVariable_index(LabelizedVariable self, std::string const & label) -> gum::Idx\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::LabelizedVariable const *\n"
		"label: std::string const &\n"
		"\n"
		""},
	 { (char *)"LabelizedVariable_isLabel", _wrap_LabelizedVariable_isLabel, METH_VARARGS, (char *)"\n"
		"LabelizedVariable_isLabel(LabelizedVariable self, std::string const & aLabel) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::LabelizedVariable const *\n"
		"aLabel: std::string const &\n"
		"\n"
		""},
	 { (char *)"LabelizedVariable_addLabel", _wrap_LabelizedVariable_addLabel, METH_VARARGS, (char *)"\n"
		"LabelizedVariable_addLabel(LabelizedVariable self, std::string const aLabel) -> LabelizedVariable\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::LabelizedVariable *\n"
		"aLabel: std::string const\n"
		"\n"
		""},
	 { (char *)"LabelizedVariable_changeLabel", _wrap_LabelizedVariable_changeLabel, METH_VARARGS, (char *)"\n"
		"LabelizedVariable_changeLabel(LabelizedVariable self, gum::Idx pos, std::string const aLabel)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::LabelizedVariable const *\n"
		"pos: gum::Idx\n"
		"aLabel: std::string const\n"
		"\n"
		""},
	 { (char *)"LabelizedVariable_eraseLabels", _wrap_LabelizedVariable_eraseLabels, METH_VARARGS, (char *)"\n"
		"LabelizedVariable_eraseLabels(LabelizedVariable self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::LabelizedVariable *\n"
		"\n"
		""},
	 { (char *)"LabelizedVariable_label", _wrap_LabelizedVariable_label, METH_VARARGS, (char *)"\n"
		"LabelizedVariable_label(LabelizedVariable self, gum::Idx i) -> std::string\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::LabelizedVariable const *\n"
		"i: gum::Idx\n"
		"\n"
		""},
	 { (char *)"LabelizedVariable_numerical", _wrap_LabelizedVariable_numerical, METH_VARARGS, (char *)"\n"
		"LabelizedVariable_numerical(LabelizedVariable self, gum::Idx indice) -> double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::LabelizedVariable const *\n"
		"indice: gum::Idx\n"
		"\n"
		""},
	 { (char *)"LabelizedVariable_domainSize", _wrap_LabelizedVariable_domainSize, METH_VARARGS, (char *)"\n"
		"LabelizedVariable_domainSize(LabelizedVariable self) -> gum::Size\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::LabelizedVariable const *\n"
		"\n"
		""},
	 { (char *)"LabelizedVariable_varType", _wrap_LabelizedVariable_varType, METH_VARARGS, (char *)"\n"
		"LabelizedVariable_varType(LabelizedVariable self) -> gum::DiscreteVariable::VarType\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::LabelizedVariable const *\n"
		"\n"
		""},
	 { (char *)"LabelizedVariable_domain", _wrap_LabelizedVariable_domain, METH_VARARGS, (char *)"\n"
		"LabelizedVariable_domain(LabelizedVariable self) -> std::string const\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::LabelizedVariable const *\n"
		"\n"
		""},
	 { (char *)"LabelizedVariable_swigregister", LabelizedVariable_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_RangeVariable", _wrap_new_RangeVariable, METH_VARARGS, (char *)"\n"
		"RangeVariable(std::string const & aName, std::string const & aDesc, long minVal=0, long maxVal=1)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"aName: std::string const &\n"
		"aDesc: std::string const &\n"
		"minVal: long\n"
		"maxVal: long\n"
		"\n"
		"RangeVariable(std::string const & aName, std::string const & aDesc, long minVal=0)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"aName: std::string const &\n"
		"aDesc: std::string const &\n"
		"minVal: long\n"
		"\n"
		"RangeVariable(std::string const & aName, std::string const & aDesc)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"aName: std::string const &\n"
		"aDesc: std::string const &\n"
		"\n"
		"new_RangeVariable(RangeVariable aDRV) -> RangeVariable\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"aDRV: gum::RangeVariable const &\n"
		"\n"
		""},
	 { (char *)"delete_RangeVariable", _wrap_delete_RangeVariable, METH_VARARGS, (char *)"\n"
		"delete_RangeVariable(RangeVariable self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::RangeVariable *\n"
		"\n"
		""},
	 { (char *)"RangeVariable_clone", _wrap_RangeVariable_clone, METH_VARARGS, (char *)"\n"
		"RangeVariable_clone(RangeVariable self) -> DiscreteVariable\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::RangeVariable const *\n"
		"\n"
		""},
	 { (char *)"RangeVariable_domainSize", _wrap_RangeVariable_domainSize, METH_VARARGS, (char *)"\n"
		"RangeVariable_domainSize(RangeVariable self) -> gum::Size\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::RangeVariable const *\n"
		"\n"
		""},
	 { (char *)"RangeVariable_varType", _wrap_RangeVariable_varType, METH_VARARGS, (char *)"\n"
		"RangeVariable_varType(RangeVariable self) -> gum::DiscreteVariable::VarType\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::RangeVariable const *\n"
		"\n"
		""},
	 { (char *)"RangeVariable_label", _wrap_RangeVariable_label, METH_VARARGS, (char *)"\n"
		"RangeVariable_label(RangeVariable self, gum::Idx indice) -> std::string\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::RangeVariable const *\n"
		"indice: gum::Idx\n"
		"\n"
		""},
	 { (char *)"RangeVariable_numerical", _wrap_RangeVariable_numerical, METH_VARARGS, (char *)"\n"
		"RangeVariable_numerical(RangeVariable self, gum::Idx indice) -> double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::RangeVariable const *\n"
		"indice: gum::Idx\n"
		"\n"
		""},
	 { (char *)"RangeVariable_minVal", _wrap_RangeVariable_minVal, METH_VARARGS, (char *)"\n"
		"RangeVariable_minVal(RangeVariable self) -> long\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::RangeVariable const *\n"
		"\n"
		""},
	 { (char *)"RangeVariable_setMinVal", _wrap_RangeVariable_setMinVal, METH_VARARGS, (char *)"\n"
		"RangeVariable_setMinVal(RangeVariable self, long minVal)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::RangeVariable *\n"
		"minVal: long\n"
		"\n"
		""},
	 { (char *)"RangeVariable_maxVal", _wrap_RangeVariable_maxVal, METH_VARARGS, (char *)"\n"
		"RangeVariable_maxVal(RangeVariable self) -> long\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::RangeVariable const *\n"
		"\n"
		""},
	 { (char *)"RangeVariable_setMaxVal", _wrap_RangeVariable_setMaxVal, METH_VARARGS, (char *)"\n"
		"RangeVariable_setMaxVal(RangeVariable self, long maxVal)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::RangeVariable *\n"
		"maxVal: long\n"
		"\n"
		""},
	 { (char *)"RangeVariable_belongs", _wrap_RangeVariable_belongs, METH_VARARGS, (char *)"\n"
		"RangeVariable_belongs(RangeVariable self, long val) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::RangeVariable const *\n"
		"val: long\n"
		"\n"
		""},
	 { (char *)"RangeVariable_index", _wrap_RangeVariable_index, METH_VARARGS, (char *)"\n"
		"RangeVariable_index(RangeVariable self, std::string const & arg3) -> gum::Idx\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::RangeVariable const *\n"
		"arg2: std::string const &\n"
		"\n"
		""},
	 { (char *)"RangeVariable_domain", _wrap_RangeVariable_domain, METH_VARARGS, (char *)"\n"
		"RangeVariable_domain(RangeVariable self) -> std::string const\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::RangeVariable const *\n"
		"\n"
		""},
	 { (char *)"RangeVariable_swigregister", RangeVariable_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Edge", _wrap_new_Edge, METH_VARARGS, (char *)"\n"
		"Edge(gum::NodeId aN1, gum::NodeId aN2)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"aN1: gum::NodeId\n"
		"aN2: gum::NodeId\n"
		"\n"
		"new_Edge(Edge src) -> Edge\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"src: gum::Edge const &\n"
		"\n"
		""},
	 { (char *)"delete_Edge", _wrap_delete_Edge, METH_VARARGS, (char *)"\n"
		"delete_Edge(Edge self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Edge *\n"
		"\n"
		""},
	 { (char *)"Edge_other", _wrap_Edge_other, METH_VARARGS, (char *)"\n"
		"Edge_other(Edge self, gum::NodeId id) -> gum::NodeId\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Edge const *\n"
		"id: gum::NodeId\n"
		"\n"
		""},
	 { (char *)"Edge_first", _wrap_Edge_first, METH_VARARGS, (char *)"\n"
		"Edge_first(Edge self) -> gum::NodeId\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Edge const *\n"
		"\n"
		""},
	 { (char *)"Edge_second", _wrap_Edge_second, METH_VARARGS, (char *)"\n"
		"Edge_second(Edge self) -> gum::NodeId\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Edge const *\n"
		"\n"
		""},
	 { (char *)"Edge___eq__", _wrap_Edge___eq__, METH_VARARGS, (char *)"\n"
		"Edge___eq__(Edge self, Edge src) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Edge const *\n"
		"src: gum::Edge const &\n"
		"\n"
		""},
	 { (char *)"Edge___ne__", _wrap_Edge___ne__, METH_VARARGS, (char *)"\n"
		"Edge___ne__(Edge self, Edge src) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Edge const *\n"
		"src: gum::Edge const &\n"
		"\n"
		""},
	 { (char *)"Edge_swigregister", Edge_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Arc", _wrap_new_Arc, METH_VARARGS, (char *)"\n"
		"Arc(gum::NodeId tail, gum::NodeId head)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"tail: gum::NodeId\n"
		"head: gum::NodeId\n"
		"\n"
		"new_Arc(Arc src) -> Arc\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"src: gum::Arc const &\n"
		"\n"
		""},
	 { (char *)"delete_Arc", _wrap_delete_Arc, METH_VARARGS, (char *)"\n"
		"delete_Arc(Arc self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Arc *\n"
		"\n"
		""},
	 { (char *)"Arc_tail", _wrap_Arc_tail, METH_VARARGS, (char *)"\n"
		"Arc_tail(Arc self) -> gum::NodeId\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Arc const *\n"
		"\n"
		""},
	 { (char *)"Arc_head", _wrap_Arc_head, METH_VARARGS, (char *)"\n"
		"Arc_head(Arc self) -> gum::NodeId\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Arc const *\n"
		"\n"
		""},
	 { (char *)"Arc_other", _wrap_Arc_other, METH_VARARGS, (char *)"\n"
		"Arc_other(Arc self, gum::NodeId id) -> gum::NodeId\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Arc const *\n"
		"id: gum::NodeId\n"
		"\n"
		""},
	 { (char *)"Arc_first", _wrap_Arc_first, METH_VARARGS, (char *)"\n"
		"Arc_first(Arc self) -> gum::NodeId\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Arc const *\n"
		"\n"
		""},
	 { (char *)"Arc_second", _wrap_Arc_second, METH_VARARGS, (char *)"\n"
		"Arc_second(Arc self) -> gum::NodeId\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Arc const *\n"
		"\n"
		""},
	 { (char *)"Arc___eq__", _wrap_Arc___eq__, METH_VARARGS, (char *)"\n"
		"Arc___eq__(Arc self, Arc src) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Arc const *\n"
		"src: gum::Arc const &\n"
		"\n"
		""},
	 { (char *)"Arc___ne__", _wrap_Arc___ne__, METH_VARARGS, (char *)"\n"
		"Arc___ne__(Arc self, Arc src) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Arc const *\n"
		"src: gum::Arc const &\n"
		"\n"
		""},
	 { (char *)"Arc_swigregister", Arc_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_DiGraph", _wrap_new_DiGraph, METH_VARARGS, (char *)"\n"
		"DiGraph(gum::Size nodes_size, bool nodes_resize_policy=True, gum::Size arcs_size, bool arcs_resize_policy=True)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"nodes_size: gum::Size\n"
		"nodes_resize_policy: bool\n"
		"arcs_size: gum::Size\n"
		"arcs_resize_policy: bool\n"
		"\n"
		"DiGraph(gum::Size nodes_size, bool nodes_resize_policy=True, gum::Size arcs_size)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"nodes_size: gum::Size\n"
		"nodes_resize_policy: bool\n"
		"arcs_size: gum::Size\n"
		"\n"
		"DiGraph(gum::Size nodes_size, bool nodes_resize_policy=True)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"nodes_size: gum::Size\n"
		"nodes_resize_policy: bool\n"
		"\n"
		"DiGraph(gum::Size nodes_size)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"nodes_size: gum::Size\n"
		"\n"
		"DiGraph()\n"
		"new_DiGraph(DiGraph g) -> DiGraph\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"g: gum::DiGraph const &\n"
		"\n"
		""},
	 { (char *)"delete_DiGraph", _wrap_delete_DiGraph, METH_VARARGS, (char *)"\n"
		"delete_DiGraph(DiGraph self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::DiGraph *\n"
		"\n"
		""},
	 { (char *)"DiGraph___eq__", _wrap_DiGraph___eq__, METH_VARARGS, (char *)"\n"
		"DiGraph___eq__(DiGraph self, DiGraph g) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::DiGraph const *\n"
		"g: gum::DiGraph const &\n"
		"\n"
		""},
	 { (char *)"DiGraph___ne__", _wrap_DiGraph___ne__, METH_VARARGS, (char *)"\n"
		"DiGraph___ne__(DiGraph self, DiGraph g) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::DiGraph const *\n"
		"g: gum::DiGraph const &\n"
		"\n"
		""},
	 { (char *)"DiGraph_addArc", _wrap_DiGraph_addArc, METH_VARARGS, NULL},
	 { (char *)"DiGraph_eraseNode", _wrap_DiGraph_eraseNode, METH_VARARGS, (char *)"\n"
		"DiGraph_eraseNode(DiGraph self, gum::NodeId const id)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::DiGraph *\n"
		"id: gum::NodeId const\n"
		"\n"
		""},
	 { (char *)"DiGraph_clear", _wrap_DiGraph_clear, METH_VARARGS, (char *)"\n"
		"DiGraph_clear(DiGraph self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::DiGraph *\n"
		"\n"
		""},
	 { (char *)"DiGraph___str__", _wrap_DiGraph___str__, METH_VARARGS, (char *)"\n"
		"DiGraph___str__(DiGraph self) -> std::string const\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::DiGraph const *\n"
		"\n"
		""},
	 { (char *)"DiGraph_toDot", _wrap_DiGraph_toDot, METH_VARARGS, (char *)"\n"
		"toDot(std::string const & name) -> std::string const\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"name: std::string const &\n"
		"\n"
		"DiGraph_toDot(DiGraph self) -> std::string const\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::DiGraph const *\n"
		"\n"
		""},
	 { (char *)"DiGraph_topologicalOrder", _wrap_DiGraph_topologicalOrder, METH_VARARGS, (char *)"\n"
		"topologicalOrder(bool clear=True) -> gum::Sequence< gum::NodeId > const\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"clear: bool\n"
		"\n"
		"DiGraph_topologicalOrder(DiGraph self) -> gum::Sequence< gum::NodeId > const &\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::DiGraph const *\n"
		"\n"
		""},
	 { (char *)"DiGraph_ids", _wrap_DiGraph_ids, METH_VARARGS, (char *)"\n"
		"DiGraph_ids(DiGraph self) -> PyObject *\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::DiGraph *\n"
		"\n"
		""},
	 { (char *)"DiGraph_arcs", _wrap_DiGraph_arcs, METH_VARARGS, (char *)"\n"
		"DiGraph_arcs(DiGraph self) -> PyObject *\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::DiGraph *\n"
		"\n"
		""},
	 { (char *)"DiGraph_parents", _wrap_DiGraph_parents, METH_VARARGS, (char *)"\n"
		"DiGraph_parents(DiGraph self, gum::NodeId id) -> PyObject *\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::DiGraph *\n"
		"id: gum::NodeId\n"
		"\n"
		""},
	 { (char *)"DiGraph_children", _wrap_DiGraph_children, METH_VARARGS, (char *)"\n"
		"DiGraph_children(DiGraph self, gum::NodeId id) -> PyObject *\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::DiGraph *\n"
		"id: gum::NodeId\n"
		"\n"
		""},
	 { (char *)"DiGraph_addNode", _wrap_DiGraph_addNode, METH_VARARGS, (char *)"\n"
		"addNode() -> gum::NodeId\n"
		"DiGraph_addNode(DiGraph self, gum::NodeId const id)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::DiGraph *\n"
		"id: gum::NodeId const\n"
		"\n"
		""},
	 { (char *)"DiGraph_existsNode", _wrap_DiGraph_existsNode, METH_VARARGS, (char *)"\n"
		"DiGraph_existsNode(DiGraph self, gum::NodeId const id) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::DiGraph const *\n"
		"id: gum::NodeId const\n"
		"\n"
		""},
	 { (char *)"DiGraph_size", _wrap_DiGraph_size, METH_VARARGS, (char *)"\n"
		"DiGraph_size(DiGraph self) -> gum::Size\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::DiGraph const *\n"
		"\n"
		""},
	 { (char *)"DiGraph_empty", _wrap_DiGraph_empty, METH_VARARGS, (char *)"\n"
		"DiGraph_empty(DiGraph self) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::DiGraph const *\n"
		"\n"
		""},
	 { (char *)"DiGraph_eraseArc", _wrap_DiGraph_eraseArc, METH_VARARGS, (char *)"\n"
		"DiGraph_eraseArc(DiGraph self, Arc arc)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::DiGraph *\n"
		"arc: gum::Arc const &\n"
		"\n"
		""},
	 { (char *)"DiGraph_existsArc", _wrap_DiGraph_existsArc, METH_VARARGS, (char *)"\n"
		"existsArc(Arc arc) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"arc: gum::Arc const &\n"
		"\n"
		"DiGraph_existsArc(DiGraph self, gum::NodeId const tail, gum::NodeId const head) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::DiGraph const *\n"
		"tail: gum::NodeId const\n"
		"head: gum::NodeId const\n"
		"\n"
		""},
	 { (char *)"DiGraph_eraseParents", _wrap_DiGraph_eraseParents, METH_VARARGS, (char *)"\n"
		"DiGraph_eraseParents(DiGraph self, gum::NodeId const id)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::DiGraph *\n"
		"id: gum::NodeId const\n"
		"\n"
		""},
	 { (char *)"DiGraph_eraseChildren", _wrap_DiGraph_eraseChildren, METH_VARARGS, (char *)"\n"
		"DiGraph_eraseChildren(DiGraph self, gum::NodeId const id)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::DiGraph *\n"
		"id: gum::NodeId const\n"
		"\n"
		""},
	 { (char *)"DiGraph_sizeArcs", _wrap_DiGraph_sizeArcs, METH_VARARGS, (char *)"\n"
		"DiGraph_sizeArcs(DiGraph self) -> gum::Size\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::DiGraph const *\n"
		"\n"
		""},
	 { (char *)"DiGraph_emptyArcs", _wrap_DiGraph_emptyArcs, METH_VARARGS, (char *)"\n"
		"DiGraph_emptyArcs(DiGraph self) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::DiGraph const *\n"
		"\n"
		""},
	 { (char *)"DiGraph_swigregister", DiGraph_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_DAG", _wrap_new_DAG, METH_VARARGS, (char *)"\n"
		"DAG(gum::Size nodes_size, bool nodes_resize_policy=True, gum::Size arcs_size, bool arcs_resize_policy=True)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"nodes_size: gum::Size\n"
		"nodes_resize_policy: bool\n"
		"arcs_size: gum::Size\n"
		"arcs_resize_policy: bool\n"
		"\n"
		"DAG(gum::Size nodes_size, bool nodes_resize_policy=True, gum::Size arcs_size)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"nodes_size: gum::Size\n"
		"nodes_resize_policy: bool\n"
		"arcs_size: gum::Size\n"
		"\n"
		"DAG(gum::Size nodes_size, bool nodes_resize_policy=True)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"nodes_size: gum::Size\n"
		"nodes_resize_policy: bool\n"
		"\n"
		"DAG(gum::Size nodes_size)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"nodes_size: gum::Size\n"
		"\n"
		"DAG()\n"
		"new_DAG(DAG g) -> DAG\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"g: gum::DAG const &\n"
		"\n"
		""},
	 { (char *)"delete_DAG", _wrap_delete_DAG, METH_VARARGS, (char *)"\n"
		"delete_DAG(DAG self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::DAG *\n"
		"\n"
		""},
	 { (char *)"DAG_addArc", _wrap_DAG_addArc, METH_VARARGS, (char *)"\n"
		"DAG_addArc(DAG self, gum::NodeId const tail, gum::NodeId const head)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::DAG *\n"
		"tail: gum::NodeId const\n"
		"head: gum::NodeId const\n"
		"\n"
		""},
	 { (char *)"DAG_swigregister", DAG_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_UndiGraph", _wrap_new_UndiGraph, METH_VARARGS, (char *)"\n"
		"UndiGraph(gum::Size nodes_size, bool nodes_resize_policy=True, gum::Size edges_size, bool edges_resize_policy=True)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"nodes_size: gum::Size\n"
		"nodes_resize_policy: bool\n"
		"edges_size: gum::Size\n"
		"edges_resize_policy: bool\n"
		"\n"
		"UndiGraph(gum::Size nodes_size, bool nodes_resize_policy=True, gum::Size edges_size)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"nodes_size: gum::Size\n"
		"nodes_resize_policy: bool\n"
		"edges_size: gum::Size\n"
		"\n"
		"UndiGraph(gum::Size nodes_size, bool nodes_resize_policy=True)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"nodes_size: gum::Size\n"
		"nodes_resize_policy: bool\n"
		"\n"
		"UndiGraph(gum::Size nodes_size)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"nodes_size: gum::Size\n"
		"\n"
		"UndiGraph()\n"
		"new_UndiGraph(UndiGraph g) -> UndiGraph\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"g: gum::UndiGraph const &\n"
		"\n"
		""},
	 { (char *)"delete_UndiGraph", _wrap_delete_UndiGraph, METH_VARARGS, (char *)"\n"
		"delete_UndiGraph(UndiGraph self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::UndiGraph *\n"
		"\n"
		""},
	 { (char *)"UndiGraph___eq__", _wrap_UndiGraph___eq__, METH_VARARGS, (char *)"\n"
		"UndiGraph___eq__(UndiGraph self, UndiGraph g) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::UndiGraph const *\n"
		"g: gum::UndiGraph const &\n"
		"\n"
		""},
	 { (char *)"UndiGraph___ne__", _wrap_UndiGraph___ne__, METH_VARARGS, (char *)"\n"
		"UndiGraph___ne__(UndiGraph self, UndiGraph g) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::UndiGraph const *\n"
		"g: gum::UndiGraph const &\n"
		"\n"
		""},
	 { (char *)"UndiGraph_addEdge", _wrap_UndiGraph_addEdge, METH_VARARGS, NULL},
	 { (char *)"UndiGraph_eraseNode", _wrap_UndiGraph_eraseNode, METH_VARARGS, (char *)"\n"
		"UndiGraph_eraseNode(UndiGraph self, gum::NodeId const id)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::UndiGraph *\n"
		"id: gum::NodeId const\n"
		"\n"
		""},
	 { (char *)"UndiGraph_clear", _wrap_UndiGraph_clear, METH_VARARGS, (char *)"\n"
		"UndiGraph_clear(UndiGraph self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::UndiGraph *\n"
		"\n"
		""},
	 { (char *)"UndiGraph___str__", _wrap_UndiGraph___str__, METH_VARARGS, (char *)"\n"
		"UndiGraph___str__(UndiGraph self) -> std::string const\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::UndiGraph const *\n"
		"\n"
		""},
	 { (char *)"UndiGraph_toDot", _wrap_UndiGraph_toDot, METH_VARARGS, (char *)"\n"
		"UndiGraph_toDot(UndiGraph self) -> std::string const\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::UndiGraph const *\n"
		"\n"
		""},
	 { (char *)"UndiGraph_hasUndirectedCycle", _wrap_UndiGraph_hasUndirectedCycle, METH_VARARGS, (char *)"\n"
		"UndiGraph_hasUndirectedCycle(UndiGraph self) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::UndiGraph const *\n"
		"\n"
		""},
	 { (char *)"UndiGraph_partialUndiGraph", _wrap_UndiGraph_partialUndiGraph, METH_VARARGS, (char *)"\n"
		"UndiGraph_partialUndiGraph(UndiGraph self, gum::NodeSet nodesSet) -> UndiGraph\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::UndiGraph *\n"
		"nodesSet: gum::NodeSet\n"
		"\n"
		""},
	 { (char *)"UndiGraph_ids", _wrap_UndiGraph_ids, METH_VARARGS, (char *)"\n"
		"UndiGraph_ids(UndiGraph self) -> PyObject *\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::UndiGraph *\n"
		"\n"
		""},
	 { (char *)"UndiGraph_edges", _wrap_UndiGraph_edges, METH_VARARGS, (char *)"\n"
		"UndiGraph_edges(UndiGraph self) -> PyObject *\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::UndiGraph *\n"
		"\n"
		""},
	 { (char *)"UndiGraph_neighbours", _wrap_UndiGraph_neighbours, METH_VARARGS, (char *)"\n"
		"UndiGraph_neighbours(UndiGraph self, gum::NodeId id) -> PyObject *\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::UndiGraph *\n"
		"id: gum::NodeId\n"
		"\n"
		""},
	 { (char *)"UndiGraph_addNode", _wrap_UndiGraph_addNode, METH_VARARGS, (char *)"\n"
		"addNode() -> gum::NodeId\n"
		"UndiGraph_addNode(UndiGraph self, gum::NodeId const id)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::UndiGraph *\n"
		"id: gum::NodeId const\n"
		"\n"
		""},
	 { (char *)"UndiGraph_existsNode", _wrap_UndiGraph_existsNode, METH_VARARGS, (char *)"\n"
		"UndiGraph_existsNode(UndiGraph self, gum::NodeId const id) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::UndiGraph const *\n"
		"id: gum::NodeId const\n"
		"\n"
		""},
	 { (char *)"UndiGraph_size", _wrap_UndiGraph_size, METH_VARARGS, (char *)"\n"
		"UndiGraph_size(UndiGraph self) -> gum::Size\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::UndiGraph const *\n"
		"\n"
		""},
	 { (char *)"UndiGraph_empty", _wrap_UndiGraph_empty, METH_VARARGS, (char *)"\n"
		"UndiGraph_empty(UndiGraph self) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::UndiGraph const *\n"
		"\n"
		""},
	 { (char *)"UndiGraph_eraseEdge", _wrap_UndiGraph_eraseEdge, METH_VARARGS, (char *)"\n"
		"UndiGraph_eraseEdge(UndiGraph self, Edge edge)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::UndiGraph *\n"
		"edge: gum::Edge const &\n"
		"\n"
		""},
	 { (char *)"UndiGraph_existsEdge", _wrap_UndiGraph_existsEdge, METH_VARARGS, (char *)"\n"
		"existsEdge(Edge edge) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"edge: gum::Edge const &\n"
		"\n"
		"UndiGraph_existsEdge(UndiGraph self, gum::NodeId const n1, gum::NodeId const n2) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::UndiGraph const *\n"
		"n1: gum::NodeId const\n"
		"n2: gum::NodeId const\n"
		"\n"
		""},
	 { (char *)"UndiGraph_sizeEdges", _wrap_UndiGraph_sizeEdges, METH_VARARGS, (char *)"\n"
		"UndiGraph_sizeEdges(UndiGraph self) -> gum::Size\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::UndiGraph const *\n"
		"\n"
		""},
	 { (char *)"UndiGraph_emptyEdges", _wrap_UndiGraph_emptyEdges, METH_VARARGS, (char *)"\n"
		"UndiGraph_emptyEdges(UndiGraph self) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::UndiGraph const *\n"
		"\n"
		""},
	 { (char *)"UndiGraph_eraseNeighbours", _wrap_UndiGraph_eraseNeighbours, METH_VARARGS, (char *)"\n"
		"UndiGraph_eraseNeighbours(UndiGraph self, gum::NodeId const id)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::UndiGraph *\n"
		"id: gum::NodeId const\n"
		"\n"
		""},
	 { (char *)"UndiGraph_swigregister", UndiGraph_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_MixedGraph", _wrap_new_MixedGraph, METH_VARARGS, (char *)"\n"
		"MixedGraph(gum::Size nodes_size, bool nodes_resize_policy=True, gum::Size arcs_size, bool arcs_resize_policy=True, gum::Size edges_size, bool edges_resize_policy=True)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"nodes_size: gum::Size\n"
		"nodes_resize_policy: bool\n"
		"arcs_size: gum::Size\n"
		"arcs_resize_policy: bool\n"
		"edges_size: gum::Size\n"
		"edges_resize_policy: bool\n"
		"\n"
		"MixedGraph(gum::Size nodes_size, bool nodes_resize_policy=True, gum::Size arcs_size, bool arcs_resize_policy=True, gum::Size edges_size)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"nodes_size: gum::Size\n"
		"nodes_resize_policy: bool\n"
		"arcs_size: gum::Size\n"
		"arcs_resize_policy: bool\n"
		"edges_size: gum::Size\n"
		"\n"
		"MixedGraph(gum::Size nodes_size, bool nodes_resize_policy=True, gum::Size arcs_size, bool arcs_resize_policy=True)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"nodes_size: gum::Size\n"
		"nodes_resize_policy: bool\n"
		"arcs_size: gum::Size\n"
		"arcs_resize_policy: bool\n"
		"\n"
		"MixedGraph(gum::Size nodes_size, bool nodes_resize_policy=True, gum::Size arcs_size)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"nodes_size: gum::Size\n"
		"nodes_resize_policy: bool\n"
		"arcs_size: gum::Size\n"
		"\n"
		"MixedGraph(gum::Size nodes_size, bool nodes_resize_policy=True)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"nodes_size: gum::Size\n"
		"nodes_resize_policy: bool\n"
		"\n"
		"MixedGraph(gum::Size nodes_size)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"nodes_size: gum::Size\n"
		"\n"
		"MixedGraph()\n"
		"new_MixedGraph(MixedGraph g) -> MixedGraph\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"g: gum::MixedGraph const &\n"
		"\n"
		""},
	 { (char *)"delete_MixedGraph", _wrap_delete_MixedGraph, METH_VARARGS, (char *)"\n"
		"delete_MixedGraph(MixedGraph self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::MixedGraph *\n"
		"\n"
		""},
	 { (char *)"MixedGraph___eq__", _wrap_MixedGraph___eq__, METH_VARARGS, (char *)"\n"
		"MixedGraph___eq__(MixedGraph self, MixedGraph g) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::MixedGraph const *\n"
		"g: gum::MixedGraph const &\n"
		"\n"
		""},
	 { (char *)"MixedGraph___ne__", _wrap_MixedGraph___ne__, METH_VARARGS, (char *)"\n"
		"MixedGraph___ne__(MixedGraph self, MixedGraph g) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::MixedGraph const *\n"
		"g: gum::MixedGraph const &\n"
		"\n"
		""},
	 { (char *)"MixedGraph_eraseNode", _wrap_MixedGraph_eraseNode, METH_VARARGS, (char *)"\n"
		"MixedGraph_eraseNode(MixedGraph self, gum::NodeId const id)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::MixedGraph *\n"
		"id: gum::NodeId const\n"
		"\n"
		""},
	 { (char *)"MixedGraph_clear", _wrap_MixedGraph_clear, METH_VARARGS, (char *)"\n"
		"MixedGraph_clear(MixedGraph self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::MixedGraph *\n"
		"\n"
		""},
	 { (char *)"MixedGraph_mixedOrientedPath", _wrap_MixedGraph_mixedOrientedPath, METH_VARARGS, (char *)"\n"
		"MixedGraph_mixedOrientedPath(MixedGraph self, gum::NodeId const node1, gum::NodeId const node2) -> std::vector< gum::NodeId,std::allocator< gum::NodeId > > const\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::MixedGraph const *\n"
		"node1: gum::NodeId const\n"
		"node2: gum::NodeId const\n"
		"\n"
		""},
	 { (char *)"MixedGraph_mixedUnorientedPath", _wrap_MixedGraph_mixedUnorientedPath, METH_VARARGS, (char *)"\n"
		"MixedGraph_mixedUnorientedPath(MixedGraph self, gum::NodeId const node1, gum::NodeId const node2) -> std::vector< gum::NodeId,std::allocator< gum::NodeId > > const\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::MixedGraph const *\n"
		"node1: gum::NodeId const\n"
		"node2: gum::NodeId const\n"
		"\n"
		""},
	 { (char *)"MixedGraph___str__", _wrap_MixedGraph___str__, METH_VARARGS, (char *)"\n"
		"MixedGraph___str__(MixedGraph self) -> std::string const\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::MixedGraph const *\n"
		"\n"
		""},
	 { (char *)"MixedGraph_addNode", _wrap_MixedGraph_addNode, METH_VARARGS, (char *)"\n"
		"addNode() -> gum::NodeId\n"
		"MixedGraph_addNode(MixedGraph self, gum::NodeId const id)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::MixedGraph *\n"
		"id: gum::NodeId const\n"
		"\n"
		""},
	 { (char *)"MixedGraph_existsNode", _wrap_MixedGraph_existsNode, METH_VARARGS, (char *)"\n"
		"MixedGraph_existsNode(MixedGraph self, gum::NodeId const id) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::MixedGraph const *\n"
		"id: gum::NodeId const\n"
		"\n"
		""},
	 { (char *)"MixedGraph_size", _wrap_MixedGraph_size, METH_VARARGS, (char *)"\n"
		"MixedGraph_size(MixedGraph self) -> gum::Size\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::MixedGraph const *\n"
		"\n"
		""},
	 { (char *)"MixedGraph_empty", _wrap_MixedGraph_empty, METH_VARARGS, (char *)"\n"
		"MixedGraph_empty(MixedGraph self) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::MixedGraph const *\n"
		"\n"
		""},
	 { (char *)"MixedGraph_addEdge", _wrap_MixedGraph_addEdge, METH_VARARGS, (char *)"\n"
		"MixedGraph_addEdge(MixedGraph self, gum::NodeId const n1, gum::NodeId const n2)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::MixedGraph *\n"
		"n1: gum::NodeId const\n"
		"n2: gum::NodeId const\n"
		"\n"
		""},
	 { (char *)"MixedGraph_eraseEdge", _wrap_MixedGraph_eraseEdge, METH_VARARGS, (char *)"\n"
		"MixedGraph_eraseEdge(MixedGraph self, Edge edge)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::MixedGraph *\n"
		"edge: gum::Edge const &\n"
		"\n"
		""},
	 { (char *)"MixedGraph_existsEdge", _wrap_MixedGraph_existsEdge, METH_VARARGS, (char *)"\n"
		"existsEdge(Edge edge) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"edge: gum::Edge const &\n"
		"\n"
		"MixedGraph_existsEdge(MixedGraph self, gum::NodeId const n1, gum::NodeId const n2) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::MixedGraph const *\n"
		"n1: gum::NodeId const\n"
		"n2: gum::NodeId const\n"
		"\n"
		""},
	 { (char *)"MixedGraph_sizeEdges", _wrap_MixedGraph_sizeEdges, METH_VARARGS, (char *)"\n"
		"MixedGraph_sizeEdges(MixedGraph self) -> gum::Size\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::MixedGraph const *\n"
		"\n"
		""},
	 { (char *)"MixedGraph_emptyEdges", _wrap_MixedGraph_emptyEdges, METH_VARARGS, (char *)"\n"
		"MixedGraph_emptyEdges(MixedGraph self) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::MixedGraph const *\n"
		"\n"
		""},
	 { (char *)"MixedGraph_eraseNeighbours", _wrap_MixedGraph_eraseNeighbours, METH_VARARGS, (char *)"\n"
		"MixedGraph_eraseNeighbours(MixedGraph self, gum::NodeId const id)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::MixedGraph *\n"
		"id: gum::NodeId const\n"
		"\n"
		""},
	 { (char *)"MixedGraph_addArc", _wrap_MixedGraph_addArc, METH_VARARGS, (char *)"\n"
		"MixedGraph_addArc(MixedGraph self, gum::NodeId const tail, gum::NodeId const head)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::MixedGraph *\n"
		"tail: gum::NodeId const\n"
		"head: gum::NodeId const\n"
		"\n"
		""},
	 { (char *)"MixedGraph_eraseArc", _wrap_MixedGraph_eraseArc, METH_VARARGS, (char *)"\n"
		"MixedGraph_eraseArc(MixedGraph self, Arc arc)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::MixedGraph *\n"
		"arc: gum::Arc const &\n"
		"\n"
		""},
	 { (char *)"MixedGraph_existsArc", _wrap_MixedGraph_existsArc, METH_VARARGS, (char *)"\n"
		"existsArc(Arc arc) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"arc: gum::Arc const &\n"
		"\n"
		"MixedGraph_existsArc(MixedGraph self, gum::NodeId const tail, gum::NodeId const head) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::MixedGraph const *\n"
		"tail: gum::NodeId const\n"
		"head: gum::NodeId const\n"
		"\n"
		""},
	 { (char *)"MixedGraph_eraseParents", _wrap_MixedGraph_eraseParents, METH_VARARGS, (char *)"\n"
		"eraseParents()\n"
		"MixedGraph_eraseParents(MixedGraph self, gum::NodeId const id)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::MixedGraph *\n"
		"id: gum::NodeId const\n"
		"\n"
		""},
	 { (char *)"MixedGraph_eraseChildren", _wrap_MixedGraph_eraseChildren, METH_VARARGS, (char *)"\n"
		"eraseChildren()\n"
		"MixedGraph_eraseChildren(MixedGraph self, gum::NodeId const id)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::MixedGraph *\n"
		"id: gum::NodeId const\n"
		"\n"
		""},
	 { (char *)"MixedGraph_sizeArcs", _wrap_MixedGraph_sizeArcs, METH_VARARGS, (char *)"\n"
		"MixedGraph_sizeArcs(MixedGraph self) -> gum::Size\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::MixedGraph const *\n"
		"\n"
		""},
	 { (char *)"MixedGraph_emptyArcs", _wrap_MixedGraph_emptyArcs, METH_VARARGS, (char *)"\n"
		"MixedGraph_emptyArcs(MixedGraph self) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::MixedGraph const *\n"
		"\n"
		""},
	 { (char *)"MixedGraph_swigregister", MixedGraph_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_CliqueGraph", _wrap_new_CliqueGraph, METH_VARARGS, (char *)"\n"
		"CliqueGraph(gum::Size nodes_size, bool nodes_resize_policy=True, gum::Size edges_size, bool edges_resize_policy=True)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"nodes_size: gum::Size\n"
		"nodes_resize_policy: bool\n"
		"edges_size: gum::Size\n"
		"edges_resize_policy: bool\n"
		"\n"
		"CliqueGraph(gum::Size nodes_size, bool nodes_resize_policy=True, gum::Size edges_size)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"nodes_size: gum::Size\n"
		"nodes_resize_policy: bool\n"
		"edges_size: gum::Size\n"
		"\n"
		"CliqueGraph(gum::Size nodes_size, bool nodes_resize_policy=True)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"nodes_size: gum::Size\n"
		"nodes_resize_policy: bool\n"
		"\n"
		"CliqueGraph(gum::Size nodes_size)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"nodes_size: gum::Size\n"
		"\n"
		"CliqueGraph()\n"
		"new_CliqueGraph(CliqueGraph arg2) -> CliqueGraph\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"from: gum::CliqueGraph const &\n"
		"\n"
		""},
	 { (char *)"delete_CliqueGraph", _wrap_delete_CliqueGraph, METH_VARARGS, (char *)"\n"
		"delete_CliqueGraph(CliqueGraph self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::CliqueGraph *\n"
		"\n"
		""},
	 { (char *)"CliqueGraph_addEdge", _wrap_CliqueGraph_addEdge, METH_VARARGS, (char *)"\n"
		"CliqueGraph_addEdge(CliqueGraph self, gum::NodeId const first, gum::NodeId const second)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::CliqueGraph *\n"
		"first: gum::NodeId const\n"
		"second: gum::NodeId const\n"
		"\n"
		""},
	 { (char *)"CliqueGraph_eraseEdge", _wrap_CliqueGraph_eraseEdge, METH_VARARGS, (char *)"\n"
		"CliqueGraph_eraseEdge(CliqueGraph self, Edge edge)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::CliqueGraph *\n"
		"edge: gum::Edge const &\n"
		"\n"
		""},
	 { (char *)"CliqueGraph_clearEdges", _wrap_CliqueGraph_clearEdges, METH_VARARGS, (char *)"\n"
		"CliqueGraph_clearEdges(CliqueGraph self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::CliqueGraph *\n"
		"\n"
		""},
	 { (char *)"CliqueGraph_eraseNode", _wrap_CliqueGraph_eraseNode, METH_VARARGS, (char *)"\n"
		"CliqueGraph_eraseNode(CliqueGraph self, gum::NodeId const node)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::CliqueGraph *\n"
		"node: gum::NodeId const\n"
		"\n"
		""},
	 { (char *)"CliqueGraph_clear", _wrap_CliqueGraph_clear, METH_VARARGS, (char *)"\n"
		"CliqueGraph_clear(CliqueGraph self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::CliqueGraph *\n"
		"\n"
		""},
	 { (char *)"CliqueGraph_container", _wrap_CliqueGraph_container, METH_VARARGS, (char *)"\n"
		"CliqueGraph_container(CliqueGraph self, gum::NodeId const idNode) -> gum::NodeId\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::CliqueGraph const *\n"
		"idNode: gum::NodeId const\n"
		"\n"
		""},
	 { (char *)"CliqueGraph_setClique", _wrap_CliqueGraph_setClique, METH_VARARGS, (char *)"\n"
		"CliqueGraph_setClique(CliqueGraph self, gum::NodeId const idClique, gum::NodeSet const & new_clique)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::CliqueGraph *\n"
		"idClique: gum::NodeId const\n"
		"new_clique: gum::NodeSet const &\n"
		"\n"
		""},
	 { (char *)"CliqueGraph_addToClique", _wrap_CliqueGraph_addToClique, METH_VARARGS, (char *)"\n"
		"CliqueGraph_addToClique(CliqueGraph self, gum::NodeId const clique_id, gum::NodeId const node_id)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::CliqueGraph *\n"
		"clique_id: gum::NodeId const\n"
		"node_id: gum::NodeId const\n"
		"\n"
		""},
	 { (char *)"CliqueGraph_eraseFromClique", _wrap_CliqueGraph_eraseFromClique, METH_VARARGS, (char *)"\n"
		"CliqueGraph_eraseFromClique(CliqueGraph self, gum::NodeId const clique_id, gum::NodeId const node_id)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::CliqueGraph *\n"
		"clique_id: gum::NodeId const\n"
		"node_id: gum::NodeId const\n"
		"\n"
		""},
	 { (char *)"CliqueGraph_separator", _wrap_CliqueGraph_separator, METH_VARARGS, (char *)"\n"
		"separator(Edge edge) -> gum::NodeSet const\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"edge: gum::Edge const &\n"
		"\n"
		"CliqueGraph_separator(CliqueGraph self, gum::NodeId const clique1, gum::NodeId const clique) -> gum::NodeSet const &\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::CliqueGraph const *\n"
		"clique1: gum::NodeId const\n"
		"clique: gum::NodeId const\n"
		"\n"
		""},
	 { (char *)"CliqueGraph_containerPath", _wrap_CliqueGraph_containerPath, METH_VARARGS, (char *)"\n"
		"CliqueGraph_containerPath(CliqueGraph self, gum::NodeId const node1, gum::NodeId const node2) -> std::vector< gum::NodeId,std::allocator< gum::NodeId > >\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::CliqueGraph const *\n"
		"node1: gum::NodeId const\n"
		"node2: gum::NodeId const\n"
		"\n"
		""},
	 { (char *)"CliqueGraph_hasRunningIntersection", _wrap_CliqueGraph_hasRunningIntersection, METH_VARARGS, (char *)"\n"
		"CliqueGraph_hasRunningIntersection(CliqueGraph self) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::CliqueGraph const *\n"
		"\n"
		""},
	 { (char *)"CliqueGraph_isJoinTree", _wrap_CliqueGraph_isJoinTree, METH_VARARGS, (char *)"\n"
		"CliqueGraph_isJoinTree(CliqueGraph self) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::CliqueGraph const *\n"
		"\n"
		""},
	 { (char *)"CliqueGraph___str__", _wrap_CliqueGraph___str__, METH_VARARGS, (char *)"\n"
		"CliqueGraph___str__(CliqueGraph self) -> std::string const\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::CliqueGraph const *\n"
		"\n"
		""},
	 { (char *)"CliqueGraph_toDot", _wrap_CliqueGraph_toDot, METH_VARARGS, (char *)"\n"
		"CliqueGraph_toDot(CliqueGraph self) -> std::string const\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::CliqueGraph const *\n"
		"\n"
		""},
	 { (char *)"CliqueGraph___ne__", _wrap_CliqueGraph___ne__, METH_VARARGS, (char *)"\n"
		"CliqueGraph___ne__(CliqueGraph self, CliqueGraph arg3) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::CliqueGraph const *\n"
		"from: gum::CliqueGraph const &\n"
		"\n"
		""},
	 { (char *)"CliqueGraph___eq__", _wrap_CliqueGraph___eq__, METH_VARARGS, (char *)"\n"
		"CliqueGraph___eq__(CliqueGraph self, CliqueGraph arg3) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::CliqueGraph const *\n"
		"from: gum::CliqueGraph const &\n"
		"\n"
		""},
	 { (char *)"CliqueGraph_clique", _wrap_CliqueGraph_clique, METH_VARARGS, (char *)"\n"
		"CliqueGraph_clique(CliqueGraph self, gum::NodeId const clique) -> PyObject *\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::CliqueGraph const *\n"
		"clique: gum::NodeId const\n"
		"\n"
		""},
	 { (char *)"CliqueGraph_swigregister", CliqueGraph_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Instantiation", _wrap_new_Instantiation, METH_VARARGS, (char *)"\n"
		"Instantiation()\n"
		"Instantiation(Instantiation aI, bool const notifyMaster=True)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"aI: gum::Instantiation const &\n"
		"notifyMaster: bool const\n"
		"\n"
		"Instantiation(Instantiation aI)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"aI: gum::Instantiation const &\n"
		"\n"
		"Instantiation(MultiDimAdressable aMD)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"aMD: gum::MultiDimAdressable &\n"
		"\n"
		"Instantiation(MultiDimAdressable aMD)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"aMD: gum::MultiDimAdressable const &\n"
		"\n"
		"Instantiation(MultiDimAdressable aMD)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"aMD: gum::MultiDimAdressable *\n"
		"\n"
		"new_Instantiation(MultiDimAdressable aMD) -> Instantiation\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"aMD: gum::MultiDimAdressable const *\n"
		"\n"
		""},
	 { (char *)"delete_Instantiation", _wrap_delete_Instantiation, METH_VARARGS, (char *)"\n"
		"delete_Instantiation(Instantiation self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Instantiation *\n"
		"\n"
		""},
	 { (char *)"Instantiation_nbrDim", _wrap_Instantiation_nbrDim, METH_VARARGS, (char *)"\n"
		"Instantiation_nbrDim(Instantiation self) -> gum::Idx\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Instantiation const *\n"
		"\n"
		""},
	 { (char *)"Instantiation_add", _wrap_Instantiation_add, METH_VARARGS, (char *)"\n"
		"Instantiation_add(Instantiation self, DiscreteVariable v)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Instantiation *\n"
		"v: gum::DiscreteVariable const &\n"
		"\n"
		""},
	 { (char *)"Instantiation_erase", _wrap_Instantiation_erase, METH_VARARGS, (char *)"\n"
		"Instantiation_erase(Instantiation self, DiscreteVariable v)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Instantiation *\n"
		"v: gum::DiscreteVariable const &\n"
		"\n"
		""},
	 { (char *)"Instantiation_clear", _wrap_Instantiation_clear, METH_VARARGS, (char *)"\n"
		"Instantiation_clear(Instantiation self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Instantiation *\n"
		"\n"
		""},
	 { (char *)"Instantiation_domainSize", _wrap_Instantiation_domainSize, METH_VARARGS, (char *)"\n"
		"Instantiation_domainSize(Instantiation self) -> gum::Size\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Instantiation const *\n"
		"\n"
		""},
	 { (char *)"Instantiation_pos", _wrap_Instantiation_pos, METH_VARARGS, (char *)"\n"
		"Instantiation_pos(Instantiation self, DiscreteVariable v) -> gum::Idx\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Instantiation const *\n"
		"v: gum::DiscreteVariable const &\n"
		"\n"
		""},
	 { (char *)"Instantiation_val", _wrap_Instantiation_val, METH_VARARGS, (char *)"\n"
		"val(gum::Idx i) -> gum::Idx\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: gum::Idx\n"
		"\n"
		"Instantiation_val(Instantiation self, DiscreteVariable var) -> gum::Idx\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Instantiation const *\n"
		"var: gum::DiscreteVariable const &\n"
		"\n"
		""},
	 { (char *)"Instantiation_valFromPtr", _wrap_Instantiation_valFromPtr, METH_VARARGS, (char *)"\n"
		"Instantiation_valFromPtr(Instantiation self, DiscreteVariable pvar) -> gum::Idx\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Instantiation const *\n"
		"pvar: gum::DiscreteVariable const *\n"
		"\n"
		""},
	 { (char *)"Instantiation_variable", _wrap_Instantiation_variable, METH_VARARGS, (char *)"\n"
		"Instantiation_variable(Instantiation self, gum::Idx i) -> DiscreteVariable\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Instantiation const *\n"
		"i: gum::Idx\n"
		"\n"
		""},
	 { (char *)"Instantiation_chgVal", _wrap_Instantiation_chgVal, METH_VARARGS, (char *)"\n"
		"chgVal(DiscreteVariable v, gum::Idx newval) -> Instantiation\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"v: gum::DiscreteVariable const &\n"
		"newval: gum::Idx\n"
		"\n"
		"chgVal(DiscreteVariable v, gum::Idx newval) -> Instantiation\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"v: gum::DiscreteVariable const *\n"
		"newval: gum::Idx\n"
		"\n"
		"Instantiation_chgVal(Instantiation self, gum::Idx varPos, gum::Idx newval) -> Instantiation\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Instantiation *\n"
		"varPos: gum::Idx\n"
		"newval: gum::Idx\n"
		"\n"
		""},
	 { (char *)"Instantiation_setVals", _wrap_Instantiation_setVals, METH_VARARGS, (char *)"\n"
		"Instantiation_setVals(Instantiation self, Instantiation i) -> Instantiation\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Instantiation *\n"
		"i: gum::Instantiation const &\n"
		"\n"
		""},
	 { (char *)"Instantiation_contains", _wrap_Instantiation_contains, METH_VARARGS, (char *)"\n"
		"contains(DiscreteVariable v) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"v: gum::DiscreteVariable const &\n"
		"\n"
		"Instantiation_contains(Instantiation self, DiscreteVariable v) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Instantiation const *\n"
		"v: gum::DiscreteVariable const *\n"
		"\n"
		""},
	 { (char *)"Instantiation_variablesSequence", _wrap_Instantiation_variablesSequence, METH_VARARGS, (char *)"\n"
		"Instantiation_variablesSequence(Instantiation self) -> gum::Sequence< gum::DiscreteVariable const * > const &\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Instantiation const *\n"
		"\n"
		""},
	 { (char *)"Instantiation_empty", _wrap_Instantiation_empty, METH_VARARGS, (char *)"\n"
		"Instantiation_empty(Instantiation self) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Instantiation const *\n"
		"\n"
		""},
	 { (char *)"Instantiation_inOverflow", _wrap_Instantiation_inOverflow, METH_VARARGS, (char *)"\n"
		"Instantiation_inOverflow(Instantiation self) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Instantiation const *\n"
		"\n"
		""},
	 { (char *)"Instantiation_unsetOverflow", _wrap_Instantiation_unsetOverflow, METH_VARARGS, (char *)"\n"
		"Instantiation_unsetOverflow(Instantiation self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Instantiation *\n"
		"\n"
		""},
	 { (char *)"Instantiation_unsetEnd", _wrap_Instantiation_unsetEnd, METH_VARARGS, (char *)"\n"
		"Instantiation_unsetEnd(Instantiation self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Instantiation *\n"
		"\n"
		""},
	 { (char *)"Instantiation_end", _wrap_Instantiation_end, METH_VARARGS, (char *)"\n"
		"Instantiation_end(Instantiation self) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Instantiation const *\n"
		"\n"
		""},
	 { (char *)"Instantiation_rend", _wrap_Instantiation_rend, METH_VARARGS, (char *)"\n"
		"Instantiation_rend(Instantiation self) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Instantiation const *\n"
		"\n"
		""},
	 { (char *)"Instantiation_inc", _wrap_Instantiation_inc, METH_VARARGS, (char *)"\n"
		"Instantiation_inc(Instantiation self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Instantiation *\n"
		"\n"
		""},
	 { (char *)"Instantiation_dec", _wrap_Instantiation_dec, METH_VARARGS, (char *)"\n"
		"Instantiation_dec(Instantiation self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Instantiation *\n"
		"\n"
		""},
	 { (char *)"Instantiation_incIn", _wrap_Instantiation_incIn, METH_VARARGS, (char *)"\n"
		"Instantiation_incIn(Instantiation self, Instantiation i)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Instantiation *\n"
		"i: gum::Instantiation const &\n"
		"\n"
		""},
	 { (char *)"Instantiation_decIn", _wrap_Instantiation_decIn, METH_VARARGS, (char *)"\n"
		"Instantiation_decIn(Instantiation self, Instantiation i)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Instantiation *\n"
		"i: gum::Instantiation const &\n"
		"\n"
		""},
	 { (char *)"Instantiation_incOut", _wrap_Instantiation_incOut, METH_VARARGS, (char *)"\n"
		"Instantiation_incOut(Instantiation self, Instantiation i)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Instantiation *\n"
		"i: gum::Instantiation const &\n"
		"\n"
		""},
	 { (char *)"Instantiation_decOut", _wrap_Instantiation_decOut, METH_VARARGS, (char *)"\n"
		"Instantiation_decOut(Instantiation self, Instantiation i)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Instantiation *\n"
		"i: gum::Instantiation const &\n"
		"\n"
		""},
	 { (char *)"Instantiation_incNotVar", _wrap_Instantiation_incNotVar, METH_VARARGS, (char *)"\n"
		"Instantiation_incNotVar(Instantiation self, DiscreteVariable v)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Instantiation *\n"
		"v: gum::DiscreteVariable const &\n"
		"\n"
		""},
	 { (char *)"Instantiation_decNotVar", _wrap_Instantiation_decNotVar, METH_VARARGS, (char *)"\n"
		"Instantiation_decNotVar(Instantiation self, DiscreteVariable v)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Instantiation *\n"
		"v: gum::DiscreteVariable const &\n"
		"\n"
		""},
	 { (char *)"Instantiation_incVar", _wrap_Instantiation_incVar, METH_VARARGS, (char *)"\n"
		"Instantiation_incVar(Instantiation self, DiscreteVariable v)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Instantiation *\n"
		"v: gum::DiscreteVariable const &\n"
		"\n"
		""},
	 { (char *)"Instantiation_decVar", _wrap_Instantiation_decVar, METH_VARARGS, (char *)"\n"
		"Instantiation_decVar(Instantiation self, DiscreteVariable v)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Instantiation *\n"
		"v: gum::DiscreteVariable const &\n"
		"\n"
		""},
	 { (char *)"Instantiation_setFirst", _wrap_Instantiation_setFirst, METH_VARARGS, (char *)"\n"
		"Instantiation_setFirst(Instantiation self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Instantiation *\n"
		"\n"
		""},
	 { (char *)"Instantiation_setLast", _wrap_Instantiation_setLast, METH_VARARGS, (char *)"\n"
		"Instantiation_setLast(Instantiation self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Instantiation *\n"
		"\n"
		""},
	 { (char *)"Instantiation_setFirstIn", _wrap_Instantiation_setFirstIn, METH_VARARGS, (char *)"\n"
		"Instantiation_setFirstIn(Instantiation self, Instantiation i)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Instantiation *\n"
		"i: gum::Instantiation const &\n"
		"\n"
		""},
	 { (char *)"Instantiation_setLastIn", _wrap_Instantiation_setLastIn, METH_VARARGS, (char *)"\n"
		"Instantiation_setLastIn(Instantiation self, Instantiation i)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Instantiation *\n"
		"i: gum::Instantiation const &\n"
		"\n"
		""},
	 { (char *)"Instantiation_setFirstOut", _wrap_Instantiation_setFirstOut, METH_VARARGS, (char *)"\n"
		"Instantiation_setFirstOut(Instantiation self, Instantiation i)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Instantiation *\n"
		"i: gum::Instantiation const &\n"
		"\n"
		""},
	 { (char *)"Instantiation_setLastOut", _wrap_Instantiation_setLastOut, METH_VARARGS, (char *)"\n"
		"Instantiation_setLastOut(Instantiation self, Instantiation i)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Instantiation *\n"
		"i: gum::Instantiation const &\n"
		"\n"
		""},
	 { (char *)"Instantiation_setFirstNotVar", _wrap_Instantiation_setFirstNotVar, METH_VARARGS, (char *)"\n"
		"Instantiation_setFirstNotVar(Instantiation self, DiscreteVariable v)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Instantiation *\n"
		"v: gum::DiscreteVariable const &\n"
		"\n"
		""},
	 { (char *)"Instantiation_setLastNotVar", _wrap_Instantiation_setLastNotVar, METH_VARARGS, (char *)"\n"
		"Instantiation_setLastNotVar(Instantiation self, DiscreteVariable v)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Instantiation *\n"
		"v: gum::DiscreteVariable const &\n"
		"\n"
		""},
	 { (char *)"Instantiation_setFirstVar", _wrap_Instantiation_setFirstVar, METH_VARARGS, (char *)"\n"
		"Instantiation_setFirstVar(Instantiation self, DiscreteVariable v)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Instantiation *\n"
		"v: gum::DiscreteVariable const &\n"
		"\n"
		""},
	 { (char *)"Instantiation_setLastVar", _wrap_Instantiation_setLastVar, METH_VARARGS, (char *)"\n"
		"Instantiation_setLastVar(Instantiation self, DiscreteVariable v)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Instantiation *\n"
		"v: gum::DiscreteVariable const &\n"
		"\n"
		""},
	 { (char *)"Instantiation_actAsSlave", _wrap_Instantiation_actAsSlave, METH_VARARGS, (char *)"\n"
		"Instantiation_actAsSlave(Instantiation self, MultiDimAdressable aMD) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Instantiation *\n"
		"aMD: gum::MultiDimAdressable &\n"
		"\n"
		""},
	 { (char *)"Instantiation_forgetMaster", _wrap_Instantiation_forgetMaster, METH_VARARGS, (char *)"\n"
		"Instantiation_forgetMaster(Instantiation self) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Instantiation *\n"
		"\n"
		""},
	 { (char *)"Instantiation_isSlave", _wrap_Instantiation_isSlave, METH_VARARGS, (char *)"\n"
		"Instantiation_isSlave(Instantiation self) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Instantiation const *\n"
		"\n"
		""},
	 { (char *)"Instantiation_isMaster", _wrap_Instantiation_isMaster, METH_VARARGS, (char *)"\n"
		"isMaster(MultiDimAdressable m) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"m: gum::MultiDimAdressable const *\n"
		"\n"
		"Instantiation_isMaster(Instantiation self, MultiDimAdressable m) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Instantiation const *\n"
		"m: gum::MultiDimAdressable const &\n"
		"\n"
		""},
	 { (char *)"Instantiation_synchronizeWithMaster", _wrap_Instantiation_synchronizeWithMaster, METH_VARARGS, (char *)"\n"
		"Instantiation_synchronizeWithMaster(Instantiation self, MultiDimAdressable m)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Instantiation *\n"
		"m: gum::MultiDimAdressable const *\n"
		"\n"
		""},
	 { (char *)"Instantiation_addWithMaster", _wrap_Instantiation_addWithMaster, METH_VARARGS, (char *)"\n"
		"Instantiation_addWithMaster(Instantiation self, MultiDimAdressable m, DiscreteVariable v)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Instantiation *\n"
		"m: gum::MultiDimAdressable const *\n"
		"v: gum::DiscreteVariable const &\n"
		"\n"
		""},
	 { (char *)"Instantiation_eraseWithMaster", _wrap_Instantiation_eraseWithMaster, METH_VARARGS, (char *)"\n"
		"Instantiation_eraseWithMaster(Instantiation self, MultiDimAdressable m, DiscreteVariable v)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Instantiation *\n"
		"m: gum::MultiDimAdressable const *\n"
		"v: gum::DiscreteVariable const &\n"
		"\n"
		""},
	 { (char *)"Instantiation___iadd__", _wrap_Instantiation___iadd__, METH_VARARGS, (char *)"\n"
		"Instantiation___iadd__(Instantiation self, gum::Size depl) -> Instantiation\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Instantiation *\n"
		"depl: gum::Size\n"
		"\n"
		""},
	 { (char *)"Instantiation___isub__", _wrap_Instantiation___isub__, METH_VARARGS, (char *)"\n"
		"Instantiation___isub__(Instantiation self, gum::Size depl) -> Instantiation\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Instantiation *\n"
		"depl: gum::Size\n"
		"\n"
		""},
	 { (char *)"Instantiation_hamming", _wrap_Instantiation_hamming, METH_VARARGS, (char *)"\n"
		"Instantiation_hamming(Instantiation self) -> gum::Idx\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Instantiation const *\n"
		"\n"
		""},
	 { (char *)"Instantiation___str__", _wrap_Instantiation___str__, METH_VARARGS, (char *)"\n"
		"Instantiation___str__(Instantiation self) -> std::string\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Instantiation const *\n"
		"\n"
		""},
	 { (char *)"Instantiation_reorder", _wrap_Instantiation_reorder, METH_VARARGS, (char *)"\n"
		"reorder(gum::Sequence< gum::DiscreteVariable const * > const & v)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"v: gum::Sequence< gum::DiscreteVariable const * > const &\n"
		"\n"
		"Instantiation_reorder(Instantiation self, Instantiation i)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Instantiation *\n"
		"i: gum::Instantiation const &\n"
		"\n"
		""},
	 { (char *)"Instantiation_swigregister", Instantiation_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_DAGmodel", _wrap_delete_DAGmodel, METH_VARARGS, (char *)"\n"
		"delete_DAGmodel(DAGmodel self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::DAGmodel *\n"
		"\n"
		""},
	 { (char *)"DAGmodel_property", _wrap_DAGmodel_property, METH_VARARGS, (char *)"\n"
		"DAGmodel_property(DAGmodel self, std::string const & name) -> std::string const &\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::DAGmodel const *\n"
		"name: std::string const &\n"
		"\n"
		""},
	 { (char *)"DAGmodel_propertyWithDefault", _wrap_DAGmodel_propertyWithDefault, METH_VARARGS, (char *)"\n"
		"DAGmodel_propertyWithDefault(DAGmodel self, std::string const & name, std::string const & byDefault) -> std::string const &\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::DAGmodel const *\n"
		"name: std::string const &\n"
		"byDefault: std::string const &\n"
		"\n"
		""},
	 { (char *)"DAGmodel_setProperty", _wrap_DAGmodel_setProperty, METH_VARARGS, (char *)"\n"
		"DAGmodel_setProperty(DAGmodel self, std::string const & name, std::string const & value)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::DAGmodel *\n"
		"name: std::string const &\n"
		"value: std::string const &\n"
		"\n"
		""},
	 { (char *)"DAGmodel_dag", _wrap_DAGmodel_dag, METH_VARARGS, (char *)"\n"
		"DAGmodel_dag(DAGmodel self) -> DAG\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::DAGmodel const *\n"
		"\n"
		""},
	 { (char *)"DAGmodel_variableNodeMap", _wrap_DAGmodel_variableNodeMap, METH_VARARGS, (char *)"\n"
		"DAGmodel_variableNodeMap(DAGmodel self) -> VariableNodeMap\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::DAGmodel const *\n"
		"\n"
		""},
	 { (char *)"DAGmodel_size", _wrap_DAGmodel_size, METH_VARARGS, (char *)"\n"
		"DAGmodel_size(DAGmodel self) -> gum::Size\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::DAGmodel const *\n"
		"\n"
		""},
	 { (char *)"DAGmodel_sizeArcs", _wrap_DAGmodel_sizeArcs, METH_VARARGS, (char *)"\n"
		"DAGmodel_sizeArcs(DAGmodel self) -> gum::Size\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::DAGmodel const *\n"
		"\n"
		""},
	 { (char *)"DAGmodel_empty", _wrap_DAGmodel_empty, METH_VARARGS, (char *)"\n"
		"DAGmodel_empty(DAGmodel self) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::DAGmodel const *\n"
		"\n"
		""},
	 { (char *)"DAGmodel_variable", _wrap_DAGmodel_variable, METH_VARARGS, (char *)"\n"
		"DAGmodel_variable(DAGmodel self, gum::NodeId id) -> DiscreteVariable\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::DAGmodel const *\n"
		"id: gum::NodeId\n"
		"\n"
		""},
	 { (char *)"DAGmodel_nodeId", _wrap_DAGmodel_nodeId, METH_VARARGS, (char *)"\n"
		"DAGmodel_nodeId(DAGmodel self, DiscreteVariable var) -> gum::NodeId\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::DAGmodel const *\n"
		"var: gum::DiscreteVariable const &\n"
		"\n"
		""},
	 { (char *)"DAGmodel_idFromName", _wrap_DAGmodel_idFromName, METH_VARARGS, (char *)"\n"
		"DAGmodel_idFromName(DAGmodel self, std::string const & name) -> gum::NodeId\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::DAGmodel const *\n"
		"name: std::string const &\n"
		"\n"
		""},
	 { (char *)"DAGmodel_variableFromName", _wrap_DAGmodel_variableFromName, METH_VARARGS, (char *)"\n"
		"DAGmodel_variableFromName(DAGmodel self, std::string const & name) -> DiscreteVariable\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::DAGmodel const *\n"
		"name: std::string const &\n"
		"\n"
		""},
	 { (char *)"DAGmodel_completeInstantiation", _wrap_DAGmodel_completeInstantiation, METH_VARARGS, (char *)"\n"
		"DAGmodel_completeInstantiation(DAGmodel self, Instantiation I)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::DAGmodel const *\n"
		"I: gum::Instantiation &\n"
		"\n"
		""},
	 { (char *)"DAGmodel_arcs", _wrap_DAGmodel_arcs, METH_VARARGS, (char *)"\n"
		"DAGmodel_arcs(DAGmodel self) -> gum::ArcSet const &\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::DAGmodel const *\n"
		"\n"
		""},
	 { (char *)"DAGmodel_moralGraph", _wrap_DAGmodel_moralGraph, METH_VARARGS, (char *)"\n"
		"moralGraph(bool clear=True) -> UndiGraph\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"clear: bool\n"
		"\n"
		"DAGmodel_moralGraph(DAGmodel self) -> UndiGraph\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::DAGmodel const *\n"
		"\n"
		""},
	 { (char *)"DAGmodel_topologicalOrder", _wrap_DAGmodel_topologicalOrder, METH_VARARGS, (char *)"\n"
		"topologicalOrder(bool clear=True) -> gum::Sequence< gum::NodeId > const\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"clear: bool\n"
		"\n"
		"DAGmodel_topologicalOrder(DAGmodel self) -> gum::Sequence< gum::NodeId > const &\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::DAGmodel const *\n"
		"\n"
		""},
	 { (char *)"DAGmodel_log10DomainSize", _wrap_DAGmodel_log10DomainSize, METH_VARARGS, (char *)"\n"
		"DAGmodel_log10DomainSize(DAGmodel self) -> double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::DAGmodel const *\n"
		"\n"
		""},
	 { (char *)"DAGmodel_swigregister", DAGmodel_swigregister, METH_VARARGS, NULL},
	 { (char *)"randomDistribution_double", _wrap_randomDistribution_double, METH_VARARGS, (char *)"\n"
		"randomDistribution_double(gum::Size n) -> Vector_double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"n: gum::Size\n"
		"\n"
		""},
	 { (char *)"new_DiscretizedVariable_double", _wrap_new_DiscretizedVariable_double, METH_VARARGS, (char *)"\n"
		"DiscretizedVariable_double(std::string const & aName, std::string const & aDesc)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"aName: std::string const &\n"
		"aDesc: std::string const &\n"
		"\n"
		"new_DiscretizedVariable_double(DiscretizedVariable_double aDRV) -> DiscretizedVariable_double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"aDRV: gum::DiscretizedVariable< double > const &\n"
		"\n"
		""},
	 { (char *)"delete_DiscretizedVariable_double", _wrap_delete_DiscretizedVariable_double, METH_VARARGS, (char *)"\n"
		"delete_DiscretizedVariable_double(DiscretizedVariable_double self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::DiscretizedVariable< double > *\n"
		"\n"
		""},
	 { (char *)"DiscretizedVariable_double_clone", _wrap_DiscretizedVariable_double_clone, METH_VARARGS, (char *)"\n"
		"DiscretizedVariable_double_clone(DiscretizedVariable_double self) -> DiscreteVariable\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::DiscretizedVariable< double > const *\n"
		"\n"
		""},
	 { (char *)"DiscretizedVariable_double_varType", _wrap_DiscretizedVariable_double_varType, METH_VARARGS, (char *)"\n"
		"DiscretizedVariable_double_varType(DiscretizedVariable_double self) -> gum::DiscreteVariable::VarType\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::DiscretizedVariable< double > const *\n"
		"\n"
		""},
	 { (char *)"DiscretizedVariable_double_isTick", _wrap_DiscretizedVariable_double_isTick, METH_VARARGS, (char *)"\n"
		"DiscretizedVariable_double_isTick(DiscretizedVariable_double self, double const & aTick) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::DiscretizedVariable< double > const *\n"
		"aTick: double const &\n"
		"\n"
		""},
	 { (char *)"DiscretizedVariable_double_addTick", _wrap_DiscretizedVariable_double_addTick, METH_VARARGS, (char *)"\n"
		"DiscretizedVariable_double_addTick(DiscretizedVariable_double self, double const & aTick) -> DiscretizedVariable_double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::DiscretizedVariable< double > *\n"
		"aTick: double const &\n"
		"\n"
		""},
	 { (char *)"DiscretizedVariable_double_eraseTicks", _wrap_DiscretizedVariable_double_eraseTicks, METH_VARARGS, (char *)"\n"
		"DiscretizedVariable_double_eraseTicks(DiscretizedVariable_double self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::DiscretizedVariable< double > *\n"
		"\n"
		""},
	 { (char *)"DiscretizedVariable_double_label", _wrap_DiscretizedVariable_double_label, METH_VARARGS, (char *)"\n"
		"DiscretizedVariable_double_label(DiscretizedVariable_double self, gum::Idx i) -> std::string\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::DiscretizedVariable< double > const *\n"
		"i: gum::Idx\n"
		"\n"
		""},
	 { (char *)"DiscretizedVariable_double_numerical", _wrap_DiscretizedVariable_double_numerical, METH_VARARGS, (char *)"\n"
		"DiscretizedVariable_double_numerical(DiscretizedVariable_double self, gum::Idx indice) -> double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::DiscretizedVariable< double > const *\n"
		"indice: gum::Idx\n"
		"\n"
		""},
	 { (char *)"DiscretizedVariable_double_index", _wrap_DiscretizedVariable_double_index, METH_VARARGS, (char *)"\n"
		"DiscretizedVariable_double_index(DiscretizedVariable_double self, std::string const & label) -> gum::Idx\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::DiscretizedVariable< double > const *\n"
		"label: std::string const &\n"
		"\n"
		""},
	 { (char *)"DiscretizedVariable_double_domainSize", _wrap_DiscretizedVariable_double_domainSize, METH_VARARGS, (char *)"\n"
		"DiscretizedVariable_double_domainSize(DiscretizedVariable_double self) -> gum::Size\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::DiscretizedVariable< double > const *\n"
		"\n"
		""},
	 { (char *)"DiscretizedVariable_double_domain", _wrap_DiscretizedVariable_double_domain, METH_VARARGS, (char *)"\n"
		"DiscretizedVariable_double_domain(DiscretizedVariable_double self) -> std::string const\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::DiscretizedVariable< double > const *\n"
		"\n"
		""},
	 { (char *)"DiscretizedVariable_double_tick", _wrap_DiscretizedVariable_double_tick, METH_VARARGS, (char *)"\n"
		"DiscretizedVariable_double_tick(DiscretizedVariable_double self, gum::Idx i) -> double const &\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::DiscretizedVariable< double > const *\n"
		"i: gum::Idx\n"
		"\n"
		""},
	 { (char *)"DiscretizedVariable_double_swigregister", DiscretizedVariable_double_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_MultiDimContainer_double", _wrap_delete_MultiDimContainer_double, METH_VARARGS, (char *)"\n"
		"delete_MultiDimContainer_double(MultiDimContainer_double self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::MultiDimContainer< double > *\n"
		"\n"
		""},
	 { (char *)"MultiDimContainer_double_set", _wrap_MultiDimContainer_double_set, METH_VARARGS, (char *)"\n"
		"MultiDimContainer_double_set(MultiDimContainer_double self, Instantiation i, double const & value)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::MultiDimContainer< double > const *\n"
		"i: gum::Instantiation const &\n"
		"value: double const &\n"
		"\n"
		""},
	 { (char *)"MultiDimContainer_double_get", _wrap_MultiDimContainer_double_get, METH_VARARGS, (char *)"\n"
		"MultiDimContainer_double_get(MultiDimContainer_double self, Instantiation i) -> double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::MultiDimContainer< double > const *\n"
		"i: gum::Instantiation const &\n"
		"\n"
		""},
	 { (char *)"MultiDimContainer_double_fill", _wrap_MultiDimContainer_double_fill, METH_VARARGS, (char *)"\n"
		"MultiDimContainer_double_fill(MultiDimContainer_double self, double const & d)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::MultiDimContainer< double > const *\n"
		"d: double const &\n"
		"\n"
		""},
	 { (char *)"MultiDimContainer_double_populate", _wrap_MultiDimContainer_double_populate, METH_VARARGS, (char *)"\n"
		"populate(Vector_double v)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"v: std::vector< double,std::allocator< double > > const &\n"
		"\n"
		"MultiDimContainer_double_populate(MultiDimContainer_double self, std::initializer_list< double > l)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::MultiDimContainer< double > const *\n"
		"l: std::initializer_list< double >\n"
		"\n"
		""},
	 { (char *)"MultiDimContainer_double_copyFrom", _wrap_MultiDimContainer_double_copyFrom, METH_VARARGS, (char *)"\n"
		"copyFrom(MultiDimContainer_double src)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"src: gum::MultiDimContainer< double > const &\n"
		"\n"
		"MultiDimContainer_double_copyFrom(MultiDimContainer_double self, MultiDimContainer_double src, Instantiation p_i)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::MultiDimContainer< double > const *\n"
		"src: gum::MultiDimContainer< double > const &\n"
		"p_i: gum::Instantiation *\n"
		"\n"
		""},
	 { (char *)"MultiDimContainer_double_extractFrom", _wrap_MultiDimContainer_double_extractFrom, METH_VARARGS, (char *)"\n"
		"MultiDimContainer_double_extractFrom(MultiDimContainer_double self, MultiDimContainer_double src, Instantiation mask)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::MultiDimContainer< double > *\n"
		"src: gum::MultiDimContainer< double > const &\n"
		"mask: gum::Instantiation const &\n"
		"\n"
		""},
	 { (char *)"MultiDimContainer_double_content", _wrap_MultiDimContainer_double_content, METH_VARARGS, (char *)"\n"
		"content() -> gum::MultiDimImplementation< double > const\n"
		"MultiDimContainer_double_content(MultiDimContainer_double self) -> gum::MultiDimImplementation< double > *\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::MultiDimContainer< double > *\n"
		"\n"
		""},
	 { (char *)"MultiDimContainer_double_getMasterRef", _wrap_MultiDimContainer_double_getMasterRef, METH_VARARGS, (char *)"\n"
		"getMasterRef() -> MultiDimAdressable\n"
		"MultiDimContainer_double_getMasterRef(MultiDimContainer_double self) -> MultiDimAdressable\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::MultiDimContainer< double > const *\n"
		"\n"
		""},
	 { (char *)"MultiDimContainer_double_copy", _wrap_MultiDimContainer_double_copy, METH_VARARGS, (char *)"\n"
		"MultiDimContainer_double_copy(MultiDimContainer_double self, MultiDimContainer_double src)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::MultiDimContainer< double > *\n"
		"src: gum::MultiDimContainer< double > const &\n"
		"\n"
		""},
	 { (char *)"MultiDimContainer_double_newFactory", _wrap_MultiDimContainer_double_newFactory, METH_VARARGS, (char *)"\n"
		"MultiDimContainer_double_newFactory(MultiDimContainer_double self) -> MultiDimContainer_double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::MultiDimContainer< double > const *\n"
		"\n"
		""},
	 { (char *)"MultiDimContainer_double___str__", _wrap_MultiDimContainer_double___str__, METH_VARARGS, (char *)"\n"
		"MultiDimContainer_double___str__(MultiDimContainer_double self) -> std::string const\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::MultiDimContainer< double > const *\n"
		"\n"
		""},
	 { (char *)"MultiDimContainer_double_toString", _wrap_MultiDimContainer_double_toString, METH_VARARGS, (char *)"\n"
		"MultiDimContainer_double_toString(MultiDimContainer_double self, Instantiation i) -> std::string const\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::MultiDimContainer< double > const *\n"
		"i: gum::Instantiation const *\n"
		"\n"
		""},
	 { (char *)"MultiDimContainer_double___eq__", _wrap_MultiDimContainer_double___eq__, METH_VARARGS, (char *)"\n"
		"MultiDimContainer_double___eq__(MultiDimContainer_double self, MultiDimContainer_double p) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::MultiDimContainer< double > const *\n"
		"p: gum::MultiDimContainer< double > const &\n"
		"\n"
		""},
	 { (char *)"MultiDimContainer_double___ne__", _wrap_MultiDimContainer_double___ne__, METH_VARARGS, (char *)"\n"
		"MultiDimContainer_double___ne__(MultiDimContainer_double self, MultiDimContainer_double p) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::MultiDimContainer< double > const *\n"
		"p: gum::MultiDimContainer< double > const &\n"
		"\n"
		""},
	 { (char *)"MultiDimContainer_double_apply", _wrap_MultiDimContainer_double_apply, METH_VARARGS, (char *)"\n"
		"MultiDimContainer_double_apply(MultiDimContainer_double self, std::function< double (double) > f)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::MultiDimContainer< double > const *\n"
		"f: std::function< double (double) >\n"
		"\n"
		""},
	 { (char *)"MultiDimContainer_double_reduce", _wrap_MultiDimContainer_double_reduce, METH_VARARGS, (char *)"\n"
		"MultiDimContainer_double_reduce(MultiDimContainer_double self, std::function< double (double,double) > f, double base) -> double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::MultiDimContainer< double > const *\n"
		"f: std::function< double (double,double) >\n"
		"base: double\n"
		"\n"
		""},
	 { (char *)"MultiDimContainer_double_beginMultipleChanges", _wrap_MultiDimContainer_double_beginMultipleChanges, METH_VARARGS, (char *)"\n"
		"MultiDimContainer_double_beginMultipleChanges(MultiDimContainer_double self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::MultiDimContainer< double > *\n"
		"\n"
		""},
	 { (char *)"MultiDimContainer_double_endMultipleChanges", _wrap_MultiDimContainer_double_endMultipleChanges, METH_VARARGS, (char *)"\n"
		"endMultipleChanges()\n"
		"MultiDimContainer_double_endMultipleChanges(MultiDimContainer_double self, double const & v)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::MultiDimContainer< double > *\n"
		"v: double const &\n"
		"\n"
		""},
	 { (char *)"MultiDimContainer_double_swigregister", MultiDimContainer_double_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Potential_double", _wrap_new_Potential_double, METH_VARARGS, (char *)"\n"
		"Potential_double()\n"
		"Potential_double(gum::MultiDimImplementation< double > * aContent)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"aContent: gum::MultiDimImplementation< double > *\n"
		"\n"
		"Potential_double(gum::MultiDimImplementation< double > * aContent, MultiDimContainer_double src)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"aContent: gum::MultiDimImplementation< double > *\n"
		"src: gum::MultiDimContainer< double > const &\n"
		"\n"
		"Potential_double(Potential_double src)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"src: gum::Potential< double > const &\n"
		"\n"
		"new_Potential_double(Potential_double arg2) -> Potential_double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"from: gum::Potential< double > &&\n"
		"\n"
		""},
	 { (char *)"delete_Potential_double", _wrap_delete_Potential_double, METH_VARARGS, (char *)"\n"
		"delete_Potential_double(Potential_double self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Potential< double > *\n"
		"\n"
		""},
	 { (char *)"Potential_double_newFactory", _wrap_Potential_double_newFactory, METH_VARARGS, (char *)"\n"
		"Potential_double_newFactory(Potential_double self) -> Potential_double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Potential< double > const *\n"
		"\n"
		""},
	 { (char *)"Potential_double_isNonZeroMap", _wrap_Potential_double_isNonZeroMap, METH_VARARGS, (char *)"\n"
		"Potential_double_isNonZeroMap(Potential_double self) -> Potential_double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Potential< double > const *\n"
		"\n"
		""},
	 { (char *)"Potential_double_sum", _wrap_Potential_double_sum, METH_VARARGS, (char *)"\n"
		"Potential_double_sum(Potential_double self) -> double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Potential< double > const *\n"
		"\n"
		""},
	 { (char *)"Potential_double_product", _wrap_Potential_double_product, METH_VARARGS, (char *)"\n"
		"Potential_double_product(Potential_double self) -> double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Potential< double > const *\n"
		"\n"
		""},
	 { (char *)"Potential_double_max", _wrap_Potential_double_max, METH_VARARGS, (char *)"\n"
		"Potential_double_max(Potential_double self) -> double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Potential< double > const *\n"
		"\n"
		""},
	 { (char *)"Potential_double_min", _wrap_Potential_double_min, METH_VARARGS, (char *)"\n"
		"Potential_double_min(Potential_double self) -> double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Potential< double > const *\n"
		"\n"
		""},
	 { (char *)"Potential_double_maxNonOne", _wrap_Potential_double_maxNonOne, METH_VARARGS, (char *)"\n"
		"Potential_double_maxNonOne(Potential_double self) -> double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Potential< double > const *\n"
		"\n"
		""},
	 { (char *)"Potential_double_minNonZero", _wrap_Potential_double_minNonZero, METH_VARARGS, (char *)"\n"
		"Potential_double_minNonZero(Potential_double self) -> double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Potential< double > const *\n"
		"\n"
		""},
	 { (char *)"Potential_double_entropy", _wrap_Potential_double_entropy, METH_VARARGS, (char *)"\n"
		"Potential_double_entropy(Potential_double self) -> double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Potential< double > const *\n"
		"\n"
		""},
	 { (char *)"Potential_double_fillWith", _wrap_Potential_double_fillWith, METH_VARARGS, (char *)"\n"
		"fillWith(Vector_double v) -> Potential_double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"v: std::vector< double,std::allocator< double > > const &\n"
		"\n"
		"Potential_double_fillWith(Potential_double self, double const & v) -> Potential_double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Potential< double > const *\n"
		"v: double const &\n"
		"\n"
		""},
	 { (char *)"Potential_double_abs", _wrap_Potential_double_abs, METH_VARARGS, (char *)"\n"
		"Potential_double_abs(Potential_double self) -> Potential_double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Potential< double > const *\n"
		"\n"
		""},
	 { (char *)"Potential_double_normalize", _wrap_Potential_double_normalize, METH_VARARGS, (char *)"\n"
		"Potential_double_normalize(Potential_double self) -> Potential_double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Potential< double > const *\n"
		"\n"
		""},
	 { (char *)"Potential_double_sq", _wrap_Potential_double_sq, METH_VARARGS, (char *)"\n"
		"Potential_double_sq(Potential_double self) -> Potential_double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Potential< double > const *\n"
		"\n"
		""},
	 { (char *)"Potential_double_normalizeAsCPT", _wrap_Potential_double_normalizeAsCPT, METH_VARARGS, (char *)"\n"
		"Potential_double_normalizeAsCPT(Potential_double self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Potential< double > const *\n"
		"\n"
		""},
	 { (char *)"Potential_double_scale", _wrap_Potential_double_scale, METH_VARARGS, (char *)"\n"
		"Potential_double_scale(Potential_double self, double v) -> Potential_double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Potential< double > const *\n"
		"v: double\n"
		"\n"
		""},
	 { (char *)"Potential_double_translate", _wrap_Potential_double_translate, METH_VARARGS, (char *)"\n"
		"Potential_double_translate(Potential_double self, double v) -> Potential_double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Potential< double > const *\n"
		"v: double\n"
		"\n"
		""},
	 { (char *)"Potential_double___add__", _wrap_Potential_double___add__, METH_VARARGS, (char *)"\n"
		"Potential_double___add__(Potential_double self, Potential_double p2) -> Potential_double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Potential< double > const *\n"
		"p2: gum::Potential< double > const &\n"
		"\n"
		""},
	 { (char *)"Potential_double___sub__", _wrap_Potential_double___sub__, METH_VARARGS, (char *)"\n"
		"Potential_double___sub__(Potential_double self, Potential_double p2) -> Potential_double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Potential< double > const *\n"
		"p2: gum::Potential< double > const &\n"
		"\n"
		""},
	 { (char *)"Potential_double___mul__", _wrap_Potential_double___mul__, METH_VARARGS, (char *)"\n"
		"Potential_double___mul__(Potential_double self, Potential_double p2) -> Potential_double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Potential< double > const *\n"
		"p2: gum::Potential< double > const &\n"
		"\n"
		""},
	 { (char *)"Potential_double___iadd__", _wrap_Potential_double___iadd__, METH_VARARGS, (char *)"\n"
		"Potential_double___iadd__(Potential_double self, Potential_double r) -> Potential_double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Potential< double > *\n"
		"r: gum::Potential< double > const &\n"
		"\n"
		""},
	 { (char *)"Potential_double___imul__", _wrap_Potential_double___imul__, METH_VARARGS, (char *)"\n"
		"Potential_double___imul__(Potential_double self, Potential_double r) -> Potential_double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Potential< double > *\n"
		"r: gum::Potential< double > const &\n"
		"\n"
		""},
	 { (char *)"Potential_double___isub__", _wrap_Potential_double___isub__, METH_VARARGS, (char *)"\n"
		"Potential_double___isub__(Potential_double self, Potential_double r) -> Potential_double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Potential< double > *\n"
		"r: gum::Potential< double > const &\n"
		"\n"
		""},
	 { (char *)"Potential_double___itruediv__", _wrap_Potential_double___itruediv__, METH_VARARGS, (char *)"\n"
		"Potential_double___itruediv__(Potential_double self, Potential_double r) -> Potential_double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Potential< double > *\n"
		"r: gum::Potential< double > const &\n"
		"\n"
		""},
	 { (char *)"Potential_double_extract", _wrap_Potential_double_extract, METH_VARARGS, (char *)"\n"
		"extract(Instantiation inst) -> Potential_double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"inst: gum::Instantiation const &\n"
		"\n"
		"Potential_double_extract(Potential_double self, PyObject * dict) -> Potential_double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Potential< double > *\n"
		"dict: PyObject *\n"
		"\n"
		""},
	 { (char *)"Potential_double_reorganize", _wrap_Potential_double_reorganize, METH_VARARGS, (char *)"\n"
		"reorganize(std::vector< gum::DiscreteVariable const *,std::allocator< gum::DiscreteVariable const * > > const & vars) -> Potential_double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"vars: std::vector< gum::DiscreteVariable const *,std::allocator< gum::DiscreteVariable const * > > const &\n"
		"\n"
		"Potential_double_reorganize(Potential_double self, PyObject * varnames) -> Potential_double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Potential< double > const *\n"
		"varnames: PyObject *\n"
		"\n"
		""},
	 { (char *)"Potential_double_putFirst", _wrap_Potential_double_putFirst, METH_VARARGS, (char *)"\n"
		"Potential_double_putFirst(Potential_double self, PyObject * varname) -> Potential_double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Potential< double > const *\n"
		"varname: PyObject *\n"
		"\n"
		""},
	 { (char *)"Potential_double_margSumOut", _wrap_Potential_double_margSumOut, METH_VARARGS, (char *)"\n"
		"Potential_double_margSumOut(Potential_double self, PyObject * varnames) -> Potential_double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Potential< double > const *\n"
		"varnames: PyObject *\n"
		"\n"
		""},
	 { (char *)"Potential_double_margProdOut", _wrap_Potential_double_margProdOut, METH_VARARGS, (char *)"\n"
		"Potential_double_margProdOut(Potential_double self, PyObject * varnames) -> Potential_double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Potential< double > const *\n"
		"varnames: PyObject *\n"
		"\n"
		""},
	 { (char *)"Potential_double_margMaxOut", _wrap_Potential_double_margMaxOut, METH_VARARGS, (char *)"\n"
		"Potential_double_margMaxOut(Potential_double self, PyObject * varnames) -> Potential_double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Potential< double > const *\n"
		"varnames: PyObject *\n"
		"\n"
		""},
	 { (char *)"Potential_double_margMinOut", _wrap_Potential_double_margMinOut, METH_VARARGS, (char *)"\n"
		"Potential_double_margMinOut(Potential_double self, PyObject * varnames) -> Potential_double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Potential< double > const *\n"
		"varnames: PyObject *\n"
		"\n"
		""},
	 { (char *)"Potential_double_margSumIn", _wrap_Potential_double_margSumIn, METH_VARARGS, (char *)"\n"
		"Potential_double_margSumIn(Potential_double self, PyObject * varnames) -> Potential_double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Potential< double > const *\n"
		"varnames: PyObject *\n"
		"\n"
		""},
	 { (char *)"Potential_double_margProdIn", _wrap_Potential_double_margProdIn, METH_VARARGS, (char *)"\n"
		"Potential_double_margProdIn(Potential_double self, PyObject * varnames) -> Potential_double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Potential< double > const *\n"
		"varnames: PyObject *\n"
		"\n"
		""},
	 { (char *)"Potential_double_margMaxIn", _wrap_Potential_double_margMaxIn, METH_VARARGS, (char *)"\n"
		"Potential_double_margMaxIn(Potential_double self, PyObject * varnames) -> Potential_double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Potential< double > const *\n"
		"varnames: PyObject *\n"
		"\n"
		""},
	 { (char *)"Potential_double_margMinIn", _wrap_Potential_double_margMinIn, METH_VARARGS, (char *)"\n"
		"Potential_double_margMinIn(Potential_double self, PyObject * varnames) -> Potential_double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Potential< double > const *\n"
		"varnames: PyObject *\n"
		"\n"
		""},
	 { (char *)"Potential_double___truediv__", _wrap_Potential_double___truediv__, METH_VARARGS, (char *)"\n"
		"__truediv__(Potential_double p2) -> Potential_double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"p2: gum::Potential< double > const &\n"
		"\n"
		"Potential_double___truediv__(Potential_double self, Potential_double b) -> Potential_double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Potential< double > *\n"
		"b: gum::Potential< double > const &\n"
		"\n"
		""},
	 { (char *)"Potential_double___div__", _wrap_Potential_double___div__, METH_VARARGS, (char *)"\n"
		"Potential_double___div__(Potential_double self, Potential_double b) -> Potential_double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Potential< double > *\n"
		"b: gum::Potential< double > const &\n"
		"\n"
		""},
	 { (char *)"Potential_double___eq__", _wrap_Potential_double___eq__, METH_VARARGS, (char *)"\n"
		"__eq__(Potential_double r) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"r: gum::Potential< double > const &\n"
		"\n"
		"Potential_double___eq__(Potential_double self, Potential_double b) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Potential< double > *\n"
		"b: gum::Potential< double > const &\n"
		"\n"
		""},
	 { (char *)"Potential_double___ne__", _wrap_Potential_double___ne__, METH_VARARGS, (char *)"\n"
		"__ne__(Potential_double r) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"r: gum::Potential< double > const &\n"
		"\n"
		"Potential_double___ne__(Potential_double self, Potential_double b) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Potential< double > *\n"
		"b: gum::Potential< double > const &\n"
		"\n"
		""},
	 { (char *)"Potential_double___fill_distrib__", _wrap_Potential_double___fill_distrib__, METH_VARARGS, (char *)"\n"
		"Potential_double___fill_distrib__(Potential_double self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Potential< double > *\n"
		"\n"
		""},
	 { (char *)"Potential_double___indexfromdict__", _wrap_Potential_double___indexfromdict__, METH_VARARGS, (char *)"\n"
		"Potential_double___indexfromdict__(Potential_double self, PyObject * id_dict) -> PyObject *\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Potential< double > *\n"
		"id_dict: PyObject *\n"
		"\n"
		""},
	 { (char *)"Potential_double___str__", _wrap_Potential_double___str__, METH_VARARGS, (char *)"\n"
		"__str__() -> std::string const\n"
		"Potential_double___str__(Potential_double self) -> char const *\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Potential< double > *\n"
		"\n"
		""},
	 { (char *)"Potential_double_tolist", _wrap_Potential_double_tolist, METH_VARARGS, (char *)"\n"
		"Potential_double_tolist(Potential_double self) -> PyObject *\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Potential< double > *\n"
		"\n"
		""},
	 { (char *)"Potential_double_toarray", _wrap_Potential_double_toarray, METH_VARARGS, (char *)"\n"
		"Potential_double_toarray(Potential_double self) -> PyObject *\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Potential< double > *\n"
		"\n"
		""},
	 { (char *)"Potential_double___getitem__", _wrap_Potential_double___getitem__, METH_VARARGS, (char *)"\n"
		"Potential_double___getitem__(Potential_double self, PyObject * id)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Potential< double > *\n"
		"id: PyObject *\n"
		"\n"
		""},
	 { (char *)"Potential_double___setitem__", _wrap_Potential_double___setitem__, METH_VARARGS, (char *)"\n"
		"Potential_double___setitem__(Potential_double self, PyObject * id, PyObject * value)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Potential< double > *\n"
		"id: PyObject *\n"
		"value: PyObject *\n"
		"\n"
		""},
	 { (char *)"Potential_double_var_names", _wrap_Potential_double_var_names, METH_VARARGS, (char *)"\n"
		"Potential_double_var_names(Potential_double self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Potential< double > *\n"
		"\n"
		""},
	 { (char *)"Potential_double_var_dims", _wrap_Potential_double_var_dims, METH_VARARGS, (char *)"\n"
		"Potential_double_var_dims(Potential_double self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Potential< double > *\n"
		"\n"
		""},
	 { (char *)"Potential_double_get", _wrap_Potential_double_get, METH_VARARGS, (char *)"\n"
		"Potential_double_get(Potential_double self, Instantiation i) -> double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Potential< double > const *\n"
		"i: gum::Instantiation const &\n"
		"\n"
		""},
	 { (char *)"Potential_double_set", _wrap_Potential_double_set, METH_VARARGS, (char *)"\n"
		"Potential_double_set(Potential_double self, Instantiation i, double const & value)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Potential< double > const *\n"
		"i: gum::Instantiation const &\n"
		"value: double const &\n"
		"\n"
		""},
	 { (char *)"Potential_double_empty", _wrap_Potential_double_empty, METH_VARARGS, (char *)"\n"
		"Potential_double_empty(Potential_double self) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Potential< double > const *\n"
		"\n"
		""},
	 { (char *)"Potential_double_pos", _wrap_Potential_double_pos, METH_VARARGS, (char *)"\n"
		"Potential_double_pos(Potential_double self, DiscreteVariable v) -> gum::Idx\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Potential< double > const *\n"
		"v: gum::DiscreteVariable const &\n"
		"\n"
		""},
	 { (char *)"Potential_double_contains", _wrap_Potential_double_contains, METH_VARARGS, (char *)"\n"
		"Potential_double_contains(Potential_double self, DiscreteVariable v) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Potential< double > const *\n"
		"v: gum::DiscreteVariable const &\n"
		"\n"
		""},
	 { (char *)"Potential_double_nbrDim", _wrap_Potential_double_nbrDim, METH_VARARGS, (char *)"\n"
		"Potential_double_nbrDim(Potential_double self) -> gum::Idx\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Potential< double > const *\n"
		"\n"
		""},
	 { (char *)"Potential_double_variable", _wrap_Potential_double_variable, METH_VARARGS, (char *)"\n"
		"Potential_double_variable(Potential_double self, gum::Idx i) -> DiscreteVariable\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Potential< double > const *\n"
		"i: gum::Idx\n"
		"\n"
		""},
	 { (char *)"Potential_double_populate", _wrap_Potential_double_populate, METH_VARARGS, (char *)"\n"
		"Potential_double_populate(Potential_double self, Vector_double v)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Potential< double > const *\n"
		"v: std::vector< double,std::allocator< double > > const &\n"
		"\n"
		""},
	 { (char *)"Potential_double_fill", _wrap_Potential_double_fill, METH_VARARGS, (char *)"\n"
		"Potential_double_fill(Potential_double self, double const & d)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Potential< double > const *\n"
		"d: double const &\n"
		"\n"
		""},
	 { (char *)"Potential_double_remove", _wrap_Potential_double_remove, METH_VARARGS, (char *)"\n"
		"Potential_double_remove(Potential_double self, DiscreteVariable var)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Potential< double > *\n"
		"var: gum::DiscreteVariable const &\n"
		"\n"
		""},
	 { (char *)"Potential_double_add", _wrap_Potential_double_add, METH_VARARGS, (char *)"\n"
		"Potential_double_add(Potential_double self, DiscreteVariable v)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::Potential< double > *\n"
		"v: gum::DiscreteVariable const &\n"
		"\n"
		""},
	 { (char *)"Potential_double_swigregister", Potential_double_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_UtilityTable_double", _wrap_delete_UtilityTable_double, METH_VARARGS, (char *)"\n"
		"delete_UtilityTable_double(UtilityTable_double self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::UtilityTable< double > *\n"
		"\n"
		""},
	 { (char *)"new_UtilityTable_double", _wrap_new_UtilityTable_double, METH_VARARGS, (char *)"\n"
		"UtilityTable_double()\n"
		"UtilityTable_double(gum::MultiDimImplementation< double > * aContent)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"aContent: gum::MultiDimImplementation< double > *\n"
		"\n"
		"new_UtilityTable_double(UtilityTable_double toCopy) -> UtilityTable_double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"toCopy: gum::UtilityTable< double > const &\n"
		"\n"
		""},
	 { (char *)"UtilityTable_double_newFactory", _wrap_UtilityTable_double_newFactory, METH_VARARGS, (char *)"\n"
		"UtilityTable_double_newFactory(UtilityTable_double self) -> UtilityTable_double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::UtilityTable< double > const *\n"
		"\n"
		""},
	 { (char *)"UtilityTable_double___fill_distrib__", _wrap_UtilityTable_double___fill_distrib__, METH_VARARGS, (char *)"\n"
		"UtilityTable_double___fill_distrib__(UtilityTable_double self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::UtilityTable< double > *\n"
		"\n"
		""},
	 { (char *)"UtilityTable_double___indexfromdict__", _wrap_UtilityTable_double___indexfromdict__, METH_VARARGS, (char *)"\n"
		"UtilityTable_double___indexfromdict__(UtilityTable_double self, PyObject * id_dict) -> PyObject *\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::UtilityTable< double > *\n"
		"id_dict: PyObject *\n"
		"\n"
		""},
	 { (char *)"UtilityTable_double___str__", _wrap_UtilityTable_double___str__, METH_VARARGS, (char *)"\n"
		"UtilityTable_double___str__(UtilityTable_double self) -> char const *\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::UtilityTable< double > *\n"
		"\n"
		""},
	 { (char *)"UtilityTable_double_tolist", _wrap_UtilityTable_double_tolist, METH_VARARGS, (char *)"\n"
		"UtilityTable_double_tolist(UtilityTable_double self) -> PyObject *\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::UtilityTable< double > *\n"
		"\n"
		""},
	 { (char *)"UtilityTable_double_toarray", _wrap_UtilityTable_double_toarray, METH_VARARGS, (char *)"\n"
		"UtilityTable_double_toarray(UtilityTable_double self) -> PyObject *\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::UtilityTable< double > *\n"
		"\n"
		""},
	 { (char *)"UtilityTable_double___getitem__", _wrap_UtilityTable_double___getitem__, METH_VARARGS, (char *)"\n"
		"UtilityTable_double___getitem__(UtilityTable_double self, PyObject * id)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::UtilityTable< double > *\n"
		"id: PyObject *\n"
		"\n"
		""},
	 { (char *)"UtilityTable_double___setitem__", _wrap_UtilityTable_double___setitem__, METH_VARARGS, (char *)"\n"
		"UtilityTable_double___setitem__(UtilityTable_double self, PyObject * id, PyObject * value)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::UtilityTable< double > *\n"
		"id: PyObject *\n"
		"value: PyObject *\n"
		"\n"
		""},
	 { (char *)"UtilityTable_double_var_names", _wrap_UtilityTable_double_var_names, METH_VARARGS, (char *)"\n"
		"UtilityTable_double_var_names(UtilityTable_double self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::UtilityTable< double > *\n"
		"\n"
		""},
	 { (char *)"UtilityTable_double_var_dims", _wrap_UtilityTable_double_var_dims, METH_VARARGS, (char *)"\n"
		"UtilityTable_double_var_dims(UtilityTable_double self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::UtilityTable< double > *\n"
		"\n"
		""},
	 { (char *)"UtilityTable_double_get", _wrap_UtilityTable_double_get, METH_VARARGS, (char *)"\n"
		"UtilityTable_double_get(UtilityTable_double self, Instantiation i) -> double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::UtilityTable< double > const *\n"
		"i: gum::Instantiation const &\n"
		"\n"
		""},
	 { (char *)"UtilityTable_double_set", _wrap_UtilityTable_double_set, METH_VARARGS, (char *)"\n"
		"UtilityTable_double_set(UtilityTable_double self, Instantiation i, double const & value)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::UtilityTable< double > const *\n"
		"i: gum::Instantiation const &\n"
		"value: double const &\n"
		"\n"
		""},
	 { (char *)"UtilityTable_double_empty", _wrap_UtilityTable_double_empty, METH_VARARGS, (char *)"\n"
		"UtilityTable_double_empty(UtilityTable_double self) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::UtilityTable< double > const *\n"
		"\n"
		""},
	 { (char *)"UtilityTable_double_pos", _wrap_UtilityTable_double_pos, METH_VARARGS, (char *)"\n"
		"UtilityTable_double_pos(UtilityTable_double self, DiscreteVariable v) -> gum::Idx\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::UtilityTable< double > const *\n"
		"v: gum::DiscreteVariable const &\n"
		"\n"
		""},
	 { (char *)"UtilityTable_double_contains", _wrap_UtilityTable_double_contains, METH_VARARGS, (char *)"\n"
		"UtilityTable_double_contains(UtilityTable_double self, DiscreteVariable v) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::UtilityTable< double > const *\n"
		"v: gum::DiscreteVariable const &\n"
		"\n"
		""},
	 { (char *)"UtilityTable_double_nbrDim", _wrap_UtilityTable_double_nbrDim, METH_VARARGS, (char *)"\n"
		"UtilityTable_double_nbrDim(UtilityTable_double self) -> gum::Idx\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::UtilityTable< double > const *\n"
		"\n"
		""},
	 { (char *)"UtilityTable_double_variable", _wrap_UtilityTable_double_variable, METH_VARARGS, (char *)"\n"
		"UtilityTable_double_variable(UtilityTable_double self, gum::Idx i) -> DiscreteVariable\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::UtilityTable< double > const *\n"
		"i: gum::Idx\n"
		"\n"
		""},
	 { (char *)"UtilityTable_double_populate", _wrap_UtilityTable_double_populate, METH_VARARGS, (char *)"\n"
		"UtilityTable_double_populate(UtilityTable_double self, Vector_double v)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::UtilityTable< double > const *\n"
		"v: std::vector< double,std::allocator< double > > const &\n"
		"\n"
		""},
	 { (char *)"UtilityTable_double_fill", _wrap_UtilityTable_double_fill, METH_VARARGS, (char *)"\n"
		"UtilityTable_double_fill(UtilityTable_double self, double const & d)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::UtilityTable< double > const *\n"
		"d: double const &\n"
		"\n"
		""},
	 { (char *)"UtilityTable_double_remove", _wrap_UtilityTable_double_remove, METH_VARARGS, (char *)"\n"
		"UtilityTable_double_remove(UtilityTable_double self, DiscreteVariable var)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::UtilityTable< double > *\n"
		"var: gum::DiscreteVariable const &\n"
		"\n"
		""},
	 { (char *)"UtilityTable_double_add", _wrap_UtilityTable_double_add, METH_VARARGS, (char *)"\n"
		"UtilityTable_double_add(UtilityTable_double self, DiscreteVariable v)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::UtilityTable< double > *\n"
		"v: gum::DiscreteVariable const &\n"
		"\n"
		""},
	 { (char *)"UtilityTable_double_swigregister", UtilityTable_double_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_IBayesNet_double", _wrap_delete_IBayesNet_double, METH_VARARGS, (char *)"\n"
		"delete_IBayesNet_double(IBayesNet_double self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::IBayesNet< double > *\n"
		"\n"
		""},
	 { (char *)"IBayesNet_double_cpt", _wrap_IBayesNet_double_cpt, METH_VARARGS, (char *)"\n"
		"IBayesNet_double_cpt(IBayesNet_double self, gum::NodeId varId) -> Potential_double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::IBayesNet< double > const *\n"
		"varId: gum::NodeId\n"
		"\n"
		""},
	 { (char *)"IBayesNet_double_variableNodeMap", _wrap_IBayesNet_double_variableNodeMap, METH_VARARGS, (char *)"\n"
		"IBayesNet_double_variableNodeMap(IBayesNet_double self) -> VariableNodeMap\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::IBayesNet< double > const *\n"
		"\n"
		""},
	 { (char *)"IBayesNet_double_variable", _wrap_IBayesNet_double_variable, METH_VARARGS, (char *)"\n"
		"IBayesNet_double_variable(IBayesNet_double self, gum::NodeId id) -> DiscreteVariable\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::IBayesNet< double > const *\n"
		"id: gum::NodeId\n"
		"\n"
		""},
	 { (char *)"IBayesNet_double_nodeId", _wrap_IBayesNet_double_nodeId, METH_VARARGS, (char *)"\n"
		"IBayesNet_double_nodeId(IBayesNet_double self, DiscreteVariable var) -> gum::NodeId\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::IBayesNet< double > const *\n"
		"var: gum::DiscreteVariable const &\n"
		"\n"
		""},
	 { (char *)"IBayesNet_double_idFromName", _wrap_IBayesNet_double_idFromName, METH_VARARGS, (char *)"\n"
		"IBayesNet_double_idFromName(IBayesNet_double self, std::string const & name) -> gum::NodeId\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::IBayesNet< double > const *\n"
		"name: std::string const &\n"
		"\n"
		""},
	 { (char *)"IBayesNet_double_variableFromName", _wrap_IBayesNet_double_variableFromName, METH_VARARGS, (char *)"\n"
		"IBayesNet_double_variableFromName(IBayesNet_double self, std::string const & name) -> DiscreteVariable\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::IBayesNet< double > const *\n"
		"name: std::string const &\n"
		"\n"
		""},
	 { (char *)"IBayesNet_double_jointProbability", _wrap_IBayesNet_double_jointProbability, METH_VARARGS, (char *)"\n"
		"IBayesNet_double_jointProbability(IBayesNet_double self, Instantiation i) -> double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::IBayesNet< double > const *\n"
		"i: gum::Instantiation const &\n"
		"\n"
		""},
	 { (char *)"IBayesNet_double_log2JointProbability", _wrap_IBayesNet_double_log2JointProbability, METH_VARARGS, (char *)"\n"
		"IBayesNet_double_log2JointProbability(IBayesNet_double self, Instantiation i) -> double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::IBayesNet< double > const *\n"
		"i: gum::Instantiation const &\n"
		"\n"
		""},
	 { (char *)"IBayesNet_double___eq__", _wrap_IBayesNet_double___eq__, METH_VARARGS, (char *)"\n"
		"IBayesNet_double___eq__(IBayesNet_double self, IBayesNet_double src) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::IBayesNet< double > const *\n"
		"src: gum::IBayesNet< double > const &\n"
		"\n"
		""},
	 { (char *)"IBayesNet_double___ne__", _wrap_IBayesNet_double___ne__, METH_VARARGS, (char *)"\n"
		"IBayesNet_double___ne__(IBayesNet_double self, IBayesNet_double src) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::IBayesNet< double > const *\n"
		"src: gum::IBayesNet< double > const &\n"
		"\n"
		""},
	 { (char *)"IBayesNet_double_dim", _wrap_IBayesNet_double_dim, METH_VARARGS, (char *)"\n"
		"IBayesNet_double_dim(IBayesNet_double self) -> gum::Size\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::IBayesNet< double > const *\n"
		"\n"
		""},
	 { (char *)"IBayesNet_double_maxVarDomainSize", _wrap_IBayesNet_double_maxVarDomainSize, METH_VARARGS, (char *)"\n"
		"IBayesNet_double_maxVarDomainSize(IBayesNet_double self) -> gum::Size\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::IBayesNet< double > const *\n"
		"\n"
		""},
	 { (char *)"IBayesNet_double_minParam", _wrap_IBayesNet_double_minParam, METH_VARARGS, (char *)"\n"
		"IBayesNet_double_minParam(IBayesNet_double self) -> double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::IBayesNet< double > const *\n"
		"\n"
		""},
	 { (char *)"IBayesNet_double_maxParam", _wrap_IBayesNet_double_maxParam, METH_VARARGS, (char *)"\n"
		"IBayesNet_double_maxParam(IBayesNet_double self) -> double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::IBayesNet< double > const *\n"
		"\n"
		""},
	 { (char *)"IBayesNet_double_minNonZeroParam", _wrap_IBayesNet_double_minNonZeroParam, METH_VARARGS, (char *)"\n"
		"IBayesNet_double_minNonZeroParam(IBayesNet_double self) -> double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::IBayesNet< double > const *\n"
		"\n"
		""},
	 { (char *)"IBayesNet_double_maxNonOneParam", _wrap_IBayesNet_double_maxNonOneParam, METH_VARARGS, (char *)"\n"
		"IBayesNet_double_maxNonOneParam(IBayesNet_double self) -> double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::IBayesNet< double > const *\n"
		"\n"
		""},
	 { (char *)"IBayesNet_double_toDot", _wrap_IBayesNet_double_toDot, METH_VARARGS, (char *)"\n"
		"IBayesNet_double_toDot(IBayesNet_double self) -> std::string\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::IBayesNet< double > const *\n"
		"\n"
		""},
	 { (char *)"IBayesNet_double___str__", _wrap_IBayesNet_double___str__, METH_VARARGS, (char *)"\n"
		"IBayesNet_double___str__(IBayesNet_double self) -> std::string\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::IBayesNet< double > const *\n"
		"\n"
		""},
	 { (char *)"IBayesNet_double_swigregister", IBayesNet_double_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_BayesNet_double", _wrap_delete_BayesNet_double, METH_VARARGS, (char *)"\n"
		"delete_BayesNet_double(BayesNet_double self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::BayesNet< double > *\n"
		"\n"
		""},
	 { (char *)"new_BayesNet_double", _wrap_new_BayesNet_double, METH_VARARGS, (char *)"\n"
		"BayesNet_double()\n"
		"BayesNet_double(std::string name)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"name: std::string\n"
		"\n"
		"new_BayesNet_double(BayesNet_double source) -> BayesNet_double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"source: gum::BayesNet< double > const &\n"
		"\n"
		""},
	 { (char *)"BayesNet_double_cpt", _wrap_BayesNet_double_cpt, METH_VARARGS, (char *)"\n"
		"cpt(gum::NodeId varId) -> Potential_double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"varId: gum::NodeId\n"
		"\n"
		"BayesNet_double_cpt(BayesNet_double self, std::string const & name) -> Potential_double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::BayesNet< double > const *\n"
		"name: std::string const &\n"
		"\n"
		""},
	 { (char *)"BayesNet_double_variableNodeMap", _wrap_BayesNet_double_variableNodeMap, METH_VARARGS, (char *)"\n"
		"BayesNet_double_variableNodeMap(BayesNet_double self) -> VariableNodeMap\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::BayesNet< double > const *\n"
		"\n"
		""},
	 { (char *)"BayesNet_double_add", _wrap_BayesNet_double_add, METH_VARARGS, (char *)"\n"
		"add(DiscreteVariable variable) -> gum::NodeId\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"variable: gum::DiscreteVariable const &\n"
		"\n"
		"add(std::string const & name, unsigned int nbrmod) -> gum::NodeId\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"name: std::string const &\n"
		"nbrmod: unsigned int\n"
		"\n"
		"add(DiscreteVariable variable, gum::MultiDimImplementation< double > * aContent) -> gum::NodeId\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"variable: gum::DiscreteVariable const &\n"
		"aContent: gum::MultiDimImplementation< double > *\n"
		"\n"
		"add(DiscreteVariable variable, gum::NodeId id) -> gum::NodeId\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"variable: gum::DiscreteVariable const &\n"
		"id: gum::NodeId\n"
		"\n"
		"BayesNet_double_add(BayesNet_double self, DiscreteVariable variable, gum::MultiDimImplementation< double > * aContent, gum::NodeId id) -> gum::NodeId\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::BayesNet< double > *\n"
		"variable: gum::DiscreteVariable const &\n"
		"aContent: gum::MultiDimImplementation< double > *\n"
		"id: gum::NodeId\n"
		"\n"
		""},
	 { (char *)"BayesNet_double_erase", _wrap_BayesNet_double_erase, METH_VARARGS, (char *)"\n"
		"erase(gum::NodeId id)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id: gum::NodeId\n"
		"\n"
		"erase(std::string const & name)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"name: std::string const &\n"
		"\n"
		"BayesNet_double_erase(BayesNet_double self, DiscreteVariable var)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::BayesNet< double > *\n"
		"var: gum::DiscreteVariable const &\n"
		"\n"
		""},
	 { (char *)"BayesNet_double_variable", _wrap_BayesNet_double_variable, METH_VARARGS, (char *)"\n"
		"variable(gum::NodeId id) -> DiscreteVariable\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id: gum::NodeId\n"
		"\n"
		"BayesNet_double_variable(BayesNet_double self, std::string const & name) -> DiscreteVariable\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::BayesNet< double > const *\n"
		"name: std::string const &\n"
		"\n"
		""},
	 { (char *)"BayesNet_double_changeVariableName", _wrap_BayesNet_double_changeVariableName, METH_VARARGS, (char *)"\n"
		"changeVariableName(gum::NodeId id, std::string const & new_name)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id: gum::NodeId\n"
		"new_name: std::string const &\n"
		"\n"
		"BayesNet_double_changeVariableName(BayesNet_double self, std::string const & name, std::string const & new_name)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::BayesNet< double > *\n"
		"name: std::string const &\n"
		"new_name: std::string const &\n"
		"\n"
		""},
	 { (char *)"BayesNet_double_nodeId", _wrap_BayesNet_double_nodeId, METH_VARARGS, (char *)"\n"
		"BayesNet_double_nodeId(BayesNet_double self, DiscreteVariable var) -> gum::NodeId\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::BayesNet< double > const *\n"
		"var: gum::DiscreteVariable const &\n"
		"\n"
		""},
	 { (char *)"BayesNet_double_idFromName", _wrap_BayesNet_double_idFromName, METH_VARARGS, (char *)"\n"
		"BayesNet_double_idFromName(BayesNet_double self, std::string const & name) -> gum::NodeId\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::BayesNet< double > const *\n"
		"name: std::string const &\n"
		"\n"
		""},
	 { (char *)"BayesNet_double_variableFromName", _wrap_BayesNet_double_variableFromName, METH_VARARGS, (char *)"\n"
		"BayesNet_double_variableFromName(BayesNet_double self, std::string const & name) -> DiscreteVariable\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::BayesNet< double > const *\n"
		"name: std::string const &\n"
		"\n"
		""},
	 { (char *)"BayesNet_double_addArc", _wrap_BayesNet_double_addArc, METH_VARARGS, (char *)"\n"
		"addArc(gum::NodeId tail, gum::NodeId head)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"tail: gum::NodeId\n"
		"head: gum::NodeId\n"
		"\n"
		"BayesNet_double_addArc(BayesNet_double self, std::string const & tail, std::string const & head)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::BayesNet< double > *\n"
		"tail: std::string const &\n"
		"head: std::string const &\n"
		"\n"
		""},
	 { (char *)"BayesNet_double_eraseArc", _wrap_BayesNet_double_eraseArc, METH_VARARGS, (char *)"\n"
		"eraseArc(Arc arc)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"arc: gum::Arc const &\n"
		"\n"
		"eraseArc(gum::NodeId tail, gum::NodeId head)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"tail: gum::NodeId\n"
		"head: gum::NodeId\n"
		"\n"
		"BayesNet_double_eraseArc(BayesNet_double self, std::string const & tail, std::string const & head)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::BayesNet< double > *\n"
		"tail: std::string const &\n"
		"head: std::string const &\n"
		"\n"
		""},
	 { (char *)"BayesNet_double_beginTopologyTransformation", _wrap_BayesNet_double_beginTopologyTransformation, METH_VARARGS, (char *)"\n"
		"BayesNet_double_beginTopologyTransformation(BayesNet_double self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::BayesNet< double > *\n"
		"\n"
		""},
	 { (char *)"BayesNet_double_endTopologyTransformation", _wrap_BayesNet_double_endTopologyTransformation, METH_VARARGS, (char *)"\n"
		"BayesNet_double_endTopologyTransformation(BayesNet_double self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::BayesNet< double > *\n"
		"\n"
		""},
	 { (char *)"BayesNet_double_reverseArc", _wrap_BayesNet_double_reverseArc, METH_VARARGS, (char *)"\n"
		"reverseArc(gum::NodeId tail, gum::NodeId head)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"tail: gum::NodeId\n"
		"head: gum::NodeId\n"
		"\n"
		"reverseArc(std::string const & tail, std::string const & head)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"tail: std::string const &\n"
		"head: std::string const &\n"
		"\n"
		"BayesNet_double_reverseArc(BayesNet_double self, Arc arc)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::BayesNet< double > *\n"
		"arc: gum::Arc const &\n"
		"\n"
		""},
	 { (char *)"BayesNet_double_addNoisyOR", _wrap_BayesNet_double_addNoisyOR, METH_VARARGS, (char *)"\n"
		"addNoisyOR(DiscreteVariable variable, double externalWeight) -> gum::NodeId\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"variable: gum::DiscreteVariable const &\n"
		"externalWeight: double\n"
		"\n"
		"BayesNet_double_addNoisyOR(BayesNet_double self, DiscreteVariable variable, double externalWeight, gum::NodeId id) -> gum::NodeId\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::BayesNet< double > *\n"
		"variable: gum::DiscreteVariable const &\n"
		"externalWeight: double\n"
		"id: gum::NodeId\n"
		"\n"
		""},
	 { (char *)"BayesNet_double_addNoisyORNet", _wrap_BayesNet_double_addNoisyORNet, METH_VARARGS, (char *)"\n"
		"addNoisyORNet(DiscreteVariable variable, double externalWeight) -> gum::NodeId\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"variable: gum::DiscreteVariable const &\n"
		"externalWeight: double\n"
		"\n"
		"BayesNet_double_addNoisyORNet(BayesNet_double self, DiscreteVariable variable, double externalWeight, gum::NodeId id) -> gum::NodeId\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::BayesNet< double > *\n"
		"variable: gum::DiscreteVariable const &\n"
		"externalWeight: double\n"
		"id: gum::NodeId\n"
		"\n"
		""},
	 { (char *)"BayesNet_double_addNoisyORCompound", _wrap_BayesNet_double_addNoisyORCompound, METH_VARARGS, (char *)"\n"
		"addNoisyORCompound(DiscreteVariable variable, double externalWeight) -> gum::NodeId\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"variable: gum::DiscreteVariable const &\n"
		"externalWeight: double\n"
		"\n"
		"BayesNet_double_addNoisyORCompound(BayesNet_double self, DiscreteVariable variable, double externalWeight, gum::NodeId id) -> gum::NodeId\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::BayesNet< double > *\n"
		"variable: gum::DiscreteVariable const &\n"
		"externalWeight: double\n"
		"id: gum::NodeId\n"
		"\n"
		""},
	 { (char *)"BayesNet_double_addNoisyAND", _wrap_BayesNet_double_addNoisyAND, METH_VARARGS, (char *)"\n"
		"addNoisyAND(DiscreteVariable variable, double externalWeight, gum::NodeId id) -> gum::NodeId\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"variable: gum::DiscreteVariable const &\n"
		"externalWeight: double\n"
		"id: gum::NodeId\n"
		"\n"
		"BayesNet_double_addNoisyAND(BayesNet_double self, DiscreteVariable variable, double externalWeight) -> gum::NodeId\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::BayesNet< double > *\n"
		"variable: gum::DiscreteVariable const &\n"
		"externalWeight: double\n"
		"\n"
		""},
	 { (char *)"BayesNet_double_addLogit", _wrap_BayesNet_double_addLogit, METH_VARARGS, (char *)"\n"
		"addLogit(DiscreteVariable variable, double externalWeight, gum::NodeId id) -> gum::NodeId\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"variable: gum::DiscreteVariable const &\n"
		"externalWeight: double\n"
		"id: gum::NodeId\n"
		"\n"
		"BayesNet_double_addLogit(BayesNet_double self, DiscreteVariable variable, double externalWeight) -> gum::NodeId\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::BayesNet< double > *\n"
		"variable: gum::DiscreteVariable const &\n"
		"externalWeight: double\n"
		"\n"
		""},
	 { (char *)"BayesNet_double_addOR", _wrap_BayesNet_double_addOR, METH_VARARGS, (char *)"\n"
		"BayesNet_double_addOR(BayesNet_double self, DiscreteVariable variable) -> gum::NodeId\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::BayesNet< double > *\n"
		"variable: gum::DiscreteVariable const &\n"
		"\n"
		""},
	 { (char *)"BayesNet_double_addAND", _wrap_BayesNet_double_addAND, METH_VARARGS, (char *)"\n"
		"BayesNet_double_addAND(BayesNet_double self, DiscreteVariable variable) -> gum::NodeId\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::BayesNet< double > *\n"
		"variable: gum::DiscreteVariable const &\n"
		"\n"
		""},
	 { (char *)"BayesNet_double_addAMPLITUDE", _wrap_BayesNet_double_addAMPLITUDE, METH_VARARGS, (char *)"\n"
		"BayesNet_double_addAMPLITUDE(BayesNet_double self, DiscreteVariable variable) -> gum::NodeId\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::BayesNet< double > *\n"
		"variable: gum::DiscreteVariable const &\n"
		"\n"
		""},
	 { (char *)"BayesNet_double_addCOUNT", _wrap_BayesNet_double_addCOUNT, METH_VARARGS, (char *)"\n"
		"addCOUNT(DiscreteVariable variable, gum::Idx Value=1) -> gum::NodeId\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"variable: gum::DiscreteVariable const &\n"
		"Value: gum::Idx\n"
		"\n"
		"BayesNet_double_addCOUNT(BayesNet_double self, DiscreteVariable variable) -> gum::NodeId\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::BayesNet< double > *\n"
		"variable: gum::DiscreteVariable const &\n"
		"\n"
		""},
	 { (char *)"BayesNet_double_addEXISTS", _wrap_BayesNet_double_addEXISTS, METH_VARARGS, (char *)"\n"
		"addEXISTS(DiscreteVariable variable, gum::Idx Value=1) -> gum::NodeId\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"variable: gum::DiscreteVariable const &\n"
		"Value: gum::Idx\n"
		"\n"
		"BayesNet_double_addEXISTS(BayesNet_double self, DiscreteVariable variable) -> gum::NodeId\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::BayesNet< double > *\n"
		"variable: gum::DiscreteVariable const &\n"
		"\n"
		""},
	 { (char *)"BayesNet_double_addFORALL", _wrap_BayesNet_double_addFORALL, METH_VARARGS, (char *)"\n"
		"addFORALL(DiscreteVariable variable, gum::Idx Value=1) -> gum::NodeId\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"variable: gum::DiscreteVariable const &\n"
		"Value: gum::Idx\n"
		"\n"
		"BayesNet_double_addFORALL(BayesNet_double self, DiscreteVariable variable) -> gum::NodeId\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::BayesNet< double > *\n"
		"variable: gum::DiscreteVariable const &\n"
		"\n"
		""},
	 { (char *)"BayesNet_double_addMAX", _wrap_BayesNet_double_addMAX, METH_VARARGS, (char *)"\n"
		"BayesNet_double_addMAX(BayesNet_double self, DiscreteVariable variable) -> gum::NodeId\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::BayesNet< double > *\n"
		"variable: gum::DiscreteVariable const &\n"
		"\n"
		""},
	 { (char *)"BayesNet_double_addMEDIAN", _wrap_BayesNet_double_addMEDIAN, METH_VARARGS, (char *)"\n"
		"BayesNet_double_addMEDIAN(BayesNet_double self, DiscreteVariable variable) -> gum::NodeId\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::BayesNet< double > *\n"
		"variable: gum::DiscreteVariable const &\n"
		"\n"
		""},
	 { (char *)"BayesNet_double_addMIN", _wrap_BayesNet_double_addMIN, METH_VARARGS, (char *)"\n"
		"BayesNet_double_addMIN(BayesNet_double self, DiscreteVariable variable) -> gum::NodeId\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::BayesNet< double > *\n"
		"variable: gum::DiscreteVariable const &\n"
		"\n"
		""},
	 { (char *)"BayesNet_double_addWeightedArc", _wrap_BayesNet_double_addWeightedArc, METH_VARARGS, (char *)"\n"
		"BayesNet_double_addWeightedArc(BayesNet_double self, gum::NodeId tail, gum::NodeId head, double causalWeight)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::BayesNet< double > *\n"
		"tail: gum::NodeId\n"
		"head: gum::NodeId\n"
		"causalWeight: double\n"
		"\n"
		""},
	 { (char *)"BayesNet_double_generateCPTs", _wrap_BayesNet_double_generateCPTs, METH_VARARGS, (char *)"\n"
		"BayesNet_double_generateCPTs(BayesNet_double self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::BayesNet< double > const *\n"
		"\n"
		""},
	 { (char *)"BayesNet_double_generateCPT", _wrap_BayesNet_double_generateCPT, METH_VARARGS, (char *)"\n"
		"generateCPT(gum::NodeId node)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"node: gum::NodeId\n"
		"\n"
		"BayesNet_double_generateCPT(BayesNet_double self, std::string const & name)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::BayesNet< double > const *\n"
		"name: std::string const &\n"
		"\n"
		""},
	 { (char *)"BayesNet_double_changePotential", _wrap_BayesNet_double_changePotential, METH_VARARGS, (char *)"\n"
		"changePotential(gum::NodeId id, Potential_double newPot)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id: gum::NodeId\n"
		"newPot: gum::Potential< double > *\n"
		"\n"
		"BayesNet_double_changePotential(BayesNet_double self, std::string const & name, Potential_double newPot)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::BayesNet< double > *\n"
		"name: std::string const &\n"
		"newPot: gum::Potential< double > *\n"
		"\n"
		""},
	 { (char *)"BayesNet_double_dag", _wrap_BayesNet_double_dag, METH_VARARGS, (char *)"\n"
		"BayesNet_double_dag(BayesNet_double self) -> DAG\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::BayesNet< double > const *\n"
		"\n"
		""},
	 { (char *)"BayesNet_double_size", _wrap_BayesNet_double_size, METH_VARARGS, (char *)"\n"
		"BayesNet_double_size(BayesNet_double self) -> gum::Size\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::BayesNet< double > const *\n"
		"\n"
		""},
	 { (char *)"BayesNet_double_log10DomainSize", _wrap_BayesNet_double_log10DomainSize, METH_VARARGS, (char *)"\n"
		"BayesNet_double_log10DomainSize(BayesNet_double self) -> double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::BayesNet< double > const *\n"
		"\n"
		""},
	 { (char *)"BayesNet_double_names", _wrap_BayesNet_double_names, METH_VARARGS, (char *)"\n"
		"BayesNet_double_names(BayesNet_double self) -> PyObject *\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::BayesNet< double > const *\n"
		"\n"
		""},
	 { (char *)"BayesNet_double_ids", _wrap_BayesNet_double_ids, METH_VARARGS, (char *)"\n"
		"BayesNet_double_ids(BayesNet_double self) -> PyObject *\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::BayesNet< double > *\n"
		"\n"
		""},
	 { (char *)"BayesNet_double_arcs", _wrap_BayesNet_double_arcs, METH_VARARGS, (char *)"\n"
		"BayesNet_double_arcs(BayesNet_double self) -> PyObject *\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::BayesNet< double > *\n"
		"\n"
		""},
	 { (char *)"BayesNet_double_parents", _wrap_BayesNet_double_parents, METH_VARARGS, (char *)"\n"
		"BayesNet_double_parents(BayesNet_double self, gum::NodeId const id) -> PyObject *\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::BayesNet< double > const *\n"
		"id: gum::NodeId const\n"
		"\n"
		""},
	 { (char *)"BayesNet_double_children", _wrap_BayesNet_double_children, METH_VARARGS, (char *)"\n"
		"BayesNet_double_children(BayesNet_double self, gum::NodeId const id) -> PyObject *\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::BayesNet< double > const *\n"
		"id: gum::NodeId const\n"
		"\n"
		""},
	 { (char *)"BayesNet_double_loadBIF", _wrap_BayesNet_double_loadBIF, METH_VARARGS, (char *)"\n"
		"loadBIF(std::string name, PyObject * l) -> std::string\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"name: std::string\n"
		"l: PyObject *\n"
		"\n"
		"BayesNet_double_loadBIF(BayesNet_double self, std::string name) -> std::string\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::BayesNet< double > *\n"
		"name: std::string\n"
		"\n"
		""},
	 { (char *)"BayesNet_double_saveBIF", _wrap_BayesNet_double_saveBIF, METH_VARARGS, (char *)"\n"
		"BayesNet_double_saveBIF(BayesNet_double self, std::string name)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::BayesNet< double > *\n"
		"name: std::string\n"
		"\n"
		""},
	 { (char *)"BayesNet_double_loadDSL", _wrap_BayesNet_double_loadDSL, METH_VARARGS, (char *)"\n"
		"loadDSL(std::string name, PyObject * l) -> std::string\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"name: std::string\n"
		"l: PyObject *\n"
		"\n"
		"BayesNet_double_loadDSL(BayesNet_double self, std::string name) -> std::string\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::BayesNet< double > *\n"
		"name: std::string\n"
		"\n"
		""},
	 { (char *)"BayesNet_double_saveDSL", _wrap_BayesNet_double_saveDSL, METH_VARARGS, (char *)"\n"
		"BayesNet_double_saveDSL(BayesNet_double self, std::string name)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::BayesNet< double > *\n"
		"name: std::string\n"
		"\n"
		""},
	 { (char *)"BayesNet_double_loadNET", _wrap_BayesNet_double_loadNET, METH_VARARGS, (char *)"\n"
		"loadNET(std::string name, PyObject * l) -> std::string\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"name: std::string\n"
		"l: PyObject *\n"
		"\n"
		"BayesNet_double_loadNET(BayesNet_double self, std::string name) -> std::string\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::BayesNet< double > *\n"
		"name: std::string\n"
		"\n"
		""},
	 { (char *)"BayesNet_double_saveNET", _wrap_BayesNet_double_saveNET, METH_VARARGS, (char *)"\n"
		"BayesNet_double_saveNET(BayesNet_double self, std::string name)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::BayesNet< double > *\n"
		"name: std::string\n"
		"\n"
		""},
	 { (char *)"BayesNet_double_loadPRM", _wrap_BayesNet_double_loadPRM, METH_VARARGS, (char *)"\n"
		"loadPRM(std::string name, std::string system, std::string classpath, PyObject * l) -> std::string\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"name: std::string\n"
		"system: std::string\n"
		"classpath: std::string\n"
		"l: PyObject *\n"
		"\n"
		"loadPRM(std::string name, std::string system, std::string classpath) -> std::string\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"name: std::string\n"
		"system: std::string\n"
		"classpath: std::string\n"
		"\n"
		"loadPRM(std::string name, std::string system) -> std::string\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"name: std::string\n"
		"system: std::string\n"
		"\n"
		"BayesNet_double_loadPRM(BayesNet_double self, std::string name) -> std::string\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::BayesNet< double > *\n"
		"name: std::string\n"
		"\n"
		""},
	 { (char *)"BayesNet_double_loadBIFXML", _wrap_BayesNet_double_loadBIFXML, METH_VARARGS, (char *)"\n"
		"loadBIFXML(std::string name, PyObject * l) -> std::string\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"name: std::string\n"
		"l: PyObject *\n"
		"\n"
		"BayesNet_double_loadBIFXML(BayesNet_double self, std::string name) -> std::string\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::BayesNet< double > *\n"
		"name: std::string\n"
		"\n"
		""},
	 { (char *)"BayesNet_double_saveBIFXML", _wrap_BayesNet_double_saveBIFXML, METH_VARARGS, (char *)"\n"
		"BayesNet_double_saveBIFXML(BayesNet_double self, std::string name)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::BayesNet< double > *\n"
		"name: std::string\n"
		"\n"
		""},
	 { (char *)"BayesNet_double_loadUAI", _wrap_BayesNet_double_loadUAI, METH_VARARGS, (char *)"\n"
		"loadUAI(std::string name, PyObject * l) -> std::string\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"name: std::string\n"
		"l: PyObject *\n"
		"\n"
		"BayesNet_double_loadUAI(BayesNet_double self, std::string name) -> std::string\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::BayesNet< double > *\n"
		"name: std::string\n"
		"\n"
		""},
	 { (char *)"BayesNet_double_saveUAI", _wrap_BayesNet_double_saveUAI, METH_VARARGS, (char *)"\n"
		"BayesNet_double_saveUAI(BayesNet_double self, std::string name)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::BayesNet< double > *\n"
		"name: std::string\n"
		"\n"
		""},
	 { (char *)"BayesNet_double_swigregister", BayesNet_double_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_BayesNetInference_double", _wrap_delete_BayesNetInference_double, METH_VARARGS, (char *)"\n"
		"delete_BayesNetInference_double(BayesNetInference_double self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::BayesNetInference< double > *\n"
		"\n"
		""},
	 { (char *)"BayesNetInference_double_setBayesNet", _wrap_BayesNetInference_double_setBayesNet, METH_VARARGS, (char *)"\n"
		"BayesNetInference_double_setBayesNet(BayesNetInference_double self, IBayesNet_double bn)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::BayesNetInference< double > *\n"
		"bn: gum::IBayesNet< double > const *\n"
		"\n"
		""},
	 { (char *)"BayesNetInference_double_BayesNet", _wrap_BayesNetInference_double_BayesNet, METH_VARARGS, (char *)"\n"
		"BayesNetInference_double_BayesNet(BayesNetInference_double self) -> IBayesNet_double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::BayesNetInference< double > const *\n"
		"\n"
		""},
	 { (char *)"BayesNetInference_double_domainSizes", _wrap_BayesNetInference_double_domainSizes, METH_VARARGS, (char *)"\n"
		"BayesNetInference_double_domainSizes(BayesNetInference_double self) -> gum::NodeProperty< gum::Size > const &\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::BayesNetInference< double > const *\n"
		"\n"
		""},
	 { (char *)"BayesNetInference_double_isReady4Inference", _wrap_BayesNetInference_double_isReady4Inference, METH_VARARGS, (char *)"\n"
		"BayesNetInference_double_isReady4Inference(BayesNetInference_double self) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::BayesNetInference< double > const *\n"
		"\n"
		""},
	 { (char *)"BayesNetInference_double_isDone", _wrap_BayesNetInference_double_isDone, METH_VARARGS, (char *)"\n"
		"BayesNetInference_double_isDone(BayesNetInference_double self) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::BayesNetInference< double > const *\n"
		"\n"
		""},
	 { (char *)"BayesNetInference_double_prepareInference", _wrap_BayesNetInference_double_prepareInference, METH_VARARGS, (char *)"\n"
		"BayesNetInference_double_prepareInference(BayesNetInference_double self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::BayesNetInference< double > *\n"
		"\n"
		""},
	 { (char *)"BayesNetInference_double_makeInference", _wrap_BayesNetInference_double_makeInference, METH_VARARGS, (char *)"\n"
		"BayesNetInference_double_makeInference(BayesNetInference_double self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::BayesNetInference< double > *\n"
		"\n"
		""},
	 { (char *)"BayesNetInference_double_clear", _wrap_BayesNetInference_double_clear, METH_VARARGS, (char *)"\n"
		"BayesNetInference_double_clear(BayesNetInference_double self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::BayesNetInference< double > *\n"
		"\n"
		""},
	 { (char *)"BayesNetInference_double_state", _wrap_BayesNetInference_double_state, METH_VARARGS, (char *)"\n"
		"BayesNetInference_double_state(BayesNetInference_double self) -> gum::BayesNetInference< double >::StateOfInference\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::BayesNetInference< double > const *\n"
		"\n"
		""},
	 { (char *)"BayesNetInference_double_addEvidence", _wrap_BayesNetInference_double_addEvidence, METH_VARARGS, (char *)"\n"
		"addEvidence(gum::NodeId const id, gum::Idx const val)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id: gum::NodeId const\n"
		"val: gum::Idx const\n"
		"\n"
		"addEvidence(std::string const & nodeName, gum::Idx const val)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"nodeName: std::string const &\n"
		"val: gum::Idx const\n"
		"\n"
		"addEvidence(gum::NodeId const id, std::string const & label)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id: gum::NodeId const\n"
		"label: std::string const &\n"
		"\n"
		"addEvidence(std::string const & nodeName, std::string const & label)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"nodeName: std::string const &\n"
		"label: std::string const &\n"
		"\n"
		"addEvidence(gum::NodeId const id, Vector_double vals)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id: gum::NodeId const\n"
		"vals: std::vector< double,std::allocator< double > > const &\n"
		"\n"
		"addEvidence(std::string const & nodeName, Vector_double vals)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"nodeName: std::string const &\n"
		"vals: std::vector< double,std::allocator< double > > const &\n"
		"\n"
		"addEvidence(Potential_double pot)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"pot: gum::Potential< double > const &\n"
		"\n"
		"BayesNetInference_double_addEvidence(BayesNetInference_double self, Potential_double pot)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::BayesNetInference< double > *\n"
		"pot: gum::Potential< double > &&\n"
		"\n"
		""},
	 { (char *)"BayesNetInference_double_addSetOfEvidence", _wrap_BayesNetInference_double_addSetOfEvidence, METH_VARARGS, (char *)"\n"
		"BayesNetInference_double_addSetOfEvidence(BayesNetInference_double self, gum::Set< gum::Potential< double > const * > const & potlist)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::BayesNetInference< double > *\n"
		"potlist: gum::Set< gum::Potential< double > const * > const &\n"
		"\n"
		""},
	 { (char *)"BayesNetInference_double_addListOfEvidence", _wrap_BayesNetInference_double_addListOfEvidence, METH_VARARGS, (char *)"\n"
		"BayesNetInference_double_addListOfEvidence(BayesNetInference_double self, gum::List< gum::Potential< double > const * > const & potlist)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::BayesNetInference< double > *\n"
		"potlist: gum::List< gum::Potential< double > const * > const &\n"
		"\n"
		""},
	 { (char *)"BayesNetInference_double_chgEvidence", _wrap_BayesNetInference_double_chgEvidence, METH_VARARGS, (char *)"\n"
		"chgEvidence(gum::NodeId const id, gum::Idx const val)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id: gum::NodeId const\n"
		"val: gum::Idx const\n"
		"\n"
		"chgEvidence(std::string const & nodeName, gum::Idx const val)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"nodeName: std::string const &\n"
		"val: gum::Idx const\n"
		"\n"
		"chgEvidence(gum::NodeId const id, std::string const & label)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id: gum::NodeId const\n"
		"label: std::string const &\n"
		"\n"
		"chgEvidence(std::string const & nodeName, std::string const & label)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"nodeName: std::string const &\n"
		"label: std::string const &\n"
		"\n"
		"chgEvidence(gum::NodeId const id, Vector_double vals)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id: gum::NodeId const\n"
		"vals: std::vector< double,std::allocator< double > > const &\n"
		"\n"
		"chgEvidence(std::string const & nodeName, Vector_double vals)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"nodeName: std::string const &\n"
		"vals: std::vector< double,std::allocator< double > > const &\n"
		"\n"
		"BayesNetInference_double_chgEvidence(BayesNetInference_double self, Potential_double pot)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::BayesNetInference< double > *\n"
		"pot: gum::Potential< double > const &\n"
		"\n"
		""},
	 { (char *)"BayesNetInference_double_eraseAllEvidence", _wrap_BayesNetInference_double_eraseAllEvidence, METH_VARARGS, (char *)"\n"
		"BayesNetInference_double_eraseAllEvidence(BayesNetInference_double self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::BayesNetInference< double > *\n"
		"\n"
		""},
	 { (char *)"BayesNetInference_double_eraseEvidence", _wrap_BayesNetInference_double_eraseEvidence, METH_VARARGS, (char *)"\n"
		"eraseEvidence(gum::NodeId const id)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id: gum::NodeId const\n"
		"\n"
		"BayesNetInference_double_eraseEvidence(BayesNetInference_double self, std::string const & nodeName)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::BayesNetInference< double > *\n"
		"nodeName: std::string const &\n"
		"\n"
		""},
	 { (char *)"BayesNetInference_double_hasEvidence", _wrap_BayesNetInference_double_hasEvidence, METH_VARARGS, (char *)"\n"
		"hasEvidence() -> bool\n"
		"hasEvidence(gum::NodeId const id) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id: gum::NodeId const\n"
		"\n"
		"BayesNetInference_double_hasEvidence(BayesNetInference_double self, std::string const & nodeName) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::BayesNetInference< double > const *\n"
		"nodeName: std::string const &\n"
		"\n"
		""},
	 { (char *)"BayesNetInference_double_hasHardEvidence", _wrap_BayesNetInference_double_hasHardEvidence, METH_VARARGS, (char *)"\n"
		"hasHardEvidence(gum::NodeId const id) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id: gum::NodeId const\n"
		"\n"
		"BayesNetInference_double_hasHardEvidence(BayesNetInference_double self, std::string const & nodeName) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::BayesNetInference< double > const *\n"
		"nodeName: std::string const &\n"
		"\n"
		""},
	 { (char *)"BayesNetInference_double_hasSoftEvidence", _wrap_BayesNetInference_double_hasSoftEvidence, METH_VARARGS, (char *)"\n"
		"hasSoftEvidence(gum::NodeId const id) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id: gum::NodeId const\n"
		"\n"
		"BayesNetInference_double_hasSoftEvidence(BayesNetInference_double self, std::string const & nodeName) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::BayesNetInference< double > const *\n"
		"nodeName: std::string const &\n"
		"\n"
		""},
	 { (char *)"BayesNetInference_double_nbrEvidence", _wrap_BayesNetInference_double_nbrEvidence, METH_VARARGS, (char *)"\n"
		"BayesNetInference_double_nbrEvidence(BayesNetInference_double self) -> gum::Size\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::BayesNetInference< double > const *\n"
		"\n"
		""},
	 { (char *)"BayesNetInference_double_nbrHardEvidence", _wrap_BayesNetInference_double_nbrHardEvidence, METH_VARARGS, (char *)"\n"
		"BayesNetInference_double_nbrHardEvidence(BayesNetInference_double self) -> gum::Size\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::BayesNetInference< double > const *\n"
		"\n"
		""},
	 { (char *)"BayesNetInference_double_nbrSoftEvidence", _wrap_BayesNetInference_double_nbrSoftEvidence, METH_VARARGS, (char *)"\n"
		"BayesNetInference_double_nbrSoftEvidence(BayesNetInference_double self) -> gum::Size\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::BayesNetInference< double > const *\n"
		"\n"
		""},
	 { (char *)"BayesNetInference_double_evidence", _wrap_BayesNetInference_double_evidence, METH_VARARGS, (char *)"\n"
		"BayesNetInference_double_evidence(BayesNetInference_double self) -> gum::NodeProperty< gum::Potential< double > const * > const &\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::BayesNetInference< double > const *\n"
		"\n"
		""},
	 { (char *)"BayesNetInference_double_softEvidenceNodes", _wrap_BayesNetInference_double_softEvidenceNodes, METH_VARARGS, (char *)"\n"
		"BayesNetInference_double_softEvidenceNodes(BayesNetInference_double self) -> gum::NodeSet const &\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::BayesNetInference< double > const *\n"
		"\n"
		""},
	 { (char *)"BayesNetInference_double_hardEvidenceNodes", _wrap_BayesNetInference_double_hardEvidenceNodes, METH_VARARGS, (char *)"\n"
		"BayesNetInference_double_hardEvidenceNodes(BayesNetInference_double self) -> gum::NodeSet const &\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::BayesNetInference< double > const *\n"
		"\n"
		""},
	 { (char *)"BayesNetInference_double_hardEvidence", _wrap_BayesNetInference_double_hardEvidence, METH_VARARGS, (char *)"\n"
		"BayesNetInference_double_hardEvidence(BayesNetInference_double self) -> gum::NodeProperty< gum::Idx > const &\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::BayesNetInference< double > const *\n"
		"\n"
		""},
	 { (char *)"BayesNetInference_double_swigregister", BayesNetInference_double_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_LazyPropagation_double", _wrap_new_LazyPropagation_double, METH_VARARGS, (char *)"\n"
		"LazyPropagation_double(IBayesNet_double BN, gum::RelevantPotentialsFinderType arg3, gum::FindBarrenNodesType arg4, bool use_binary_join_tree=True)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"BN: gum::IBayesNet< double > const *\n"
		"arg3: gum::RelevantPotentialsFinderType\n"
		"arg4: enum gum::FindBarrenNodesType\n"
		"use_binary_join_tree: bool\n"
		"\n"
		"LazyPropagation_double(IBayesNet_double BN, gum::RelevantPotentialsFinderType arg3, gum::FindBarrenNodesType arg4)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"BN: gum::IBayesNet< double > const *\n"
		"arg3: gum::RelevantPotentialsFinderType\n"
		"arg4: enum gum::FindBarrenNodesType\n"
		"\n"
		"LazyPropagation_double(IBayesNet_double BN, gum::RelevantPotentialsFinderType arg3)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"BN: gum::IBayesNet< double > const *\n"
		"arg3: gum::RelevantPotentialsFinderType\n"
		"\n"
		"new_LazyPropagation_double(IBayesNet_double BN) -> LazyPropagation_double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"BN: gum::IBayesNet< double > const *\n"
		"\n"
		""},
	 { (char *)"delete_LazyPropagation_double", _wrap_delete_LazyPropagation_double, METH_VARARGS, (char *)"\n"
		"delete_LazyPropagation_double(LazyPropagation_double self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::LazyPropagation< double > *\n"
		"\n"
		""},
	 { (char *)"LazyPropagation_double_setTriangulation", _wrap_LazyPropagation_double_setTriangulation, METH_VARARGS, (char *)"\n"
		"LazyPropagation_double_setTriangulation(LazyPropagation_double self, gum::Triangulation const & new_triangulation)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::LazyPropagation< double > *\n"
		"new_triangulation: gum::Triangulation const &\n"
		"\n"
		""},
	 { (char *)"LazyPropagation_double_setRelevantPotentialsFinderType", _wrap_LazyPropagation_double_setRelevantPotentialsFinderType, METH_VARARGS, (char *)"\n"
		"LazyPropagation_double_setRelevantPotentialsFinderType(LazyPropagation_double self, gum::RelevantPotentialsFinderType type)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::LazyPropagation< double > *\n"
		"type: gum::RelevantPotentialsFinderType\n"
		"\n"
		""},
	 { (char *)"LazyPropagation_double_setFindBarrenNodesType", _wrap_LazyPropagation_double_setFindBarrenNodesType, METH_VARARGS, (char *)"\n"
		"LazyPropagation_double_setFindBarrenNodesType(LazyPropagation_double self, gum::FindBarrenNodesType type)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::LazyPropagation< double > *\n"
		"type: enum gum::FindBarrenNodesType\n"
		"\n"
		""},
	 { (char *)"LazyPropagation_double_joinTree", _wrap_LazyPropagation_double_joinTree, METH_VARARGS, (char *)"\n"
		"LazyPropagation_double_joinTree(LazyPropagation_double self) -> CliqueGraph\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::LazyPropagation< double > *\n"
		"\n"
		""},
	 { (char *)"LazyPropagation_double_junctionTree", _wrap_LazyPropagation_double_junctionTree, METH_VARARGS, (char *)"\n"
		"LazyPropagation_double_junctionTree(LazyPropagation_double self) -> CliqueGraph\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::LazyPropagation< double > *\n"
		"\n"
		""},
	 { (char *)"LazyPropagation_double_evidenceProbability", _wrap_LazyPropagation_double_evidenceProbability, METH_VARARGS, (char *)"\n"
		"LazyPropagation_double_evidenceProbability(LazyPropagation_double self) -> double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::LazyPropagation< double > *\n"
		"\n"
		""},
	 { (char *)"LazyPropagation_double_jointPosterior", _wrap_LazyPropagation_double_jointPosterior, METH_VARARGS, (char *)"\n"
		"LazyPropagation_double_jointPosterior(LazyPropagation_double self, PyObject * seq_of_ids) -> Potential_double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::LazyPropagation< double > *\n"
		"seq_of_ids: PyObject *\n"
		"\n"
		""},
	 { (char *)"LazyPropagation_double_setEvidence", _wrap_LazyPropagation_double_setEvidence, METH_VARARGS, (char *)"\n"
		"LazyPropagation_double_setEvidence(LazyPropagation_double self, PyObject * evidces)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::LazyPropagation< double > *\n"
		"evidces: PyObject *\n"
		"\n"
		""},
	 { (char *)"LazyPropagation_double_updateEvidence", _wrap_LazyPropagation_double_updateEvidence, METH_VARARGS, (char *)"\n"
		"LazyPropagation_double_updateEvidence(LazyPropagation_double self, PyObject * evidces)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::LazyPropagation< double > *\n"
		"evidces: PyObject *\n"
		"\n"
		""},
	 { (char *)"LazyPropagation_double_setTargets", _wrap_LazyPropagation_double_setTargets, METH_VARARGS, (char *)"\n"
		"LazyPropagation_double_setTargets(LazyPropagation_double self, PyObject * targets)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::LazyPropagation< double > *\n"
		"targets: PyObject *\n"
		"\n"
		""},
	 { (char *)"LazyPropagation_double_makeInference", _wrap_LazyPropagation_double_makeInference, METH_VARARGS, (char *)"\n"
		"LazyPropagation_double_makeInference(LazyPropagation_double self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::LazyPropagation< double > *\n"
		"\n"
		""},
	 { (char *)"LazyPropagation_double_posterior", _wrap_LazyPropagation_double_posterior, METH_VARARGS, (char *)"\n"
		"posterior(gum::NodeId const var) -> Potential_double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"var: gum::NodeId const\n"
		"\n"
		"LazyPropagation_double_posterior(LazyPropagation_double self, std::string const nodeName) -> Potential_double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::LazyPropagation< double > *\n"
		"nodeName: std::string const\n"
		"\n"
		""},
	 { (char *)"LazyPropagation_double_BayesNet", _wrap_LazyPropagation_double_BayesNet, METH_VARARGS, (char *)"\n"
		"LazyPropagation_double_BayesNet(LazyPropagation_double self) -> IBayesNet_double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::LazyPropagation< double > const *\n"
		"\n"
		""},
	 { (char *)"LazyPropagation_double_addEvidence", _wrap_LazyPropagation_double_addEvidence, METH_VARARGS, (char *)"\n"
		"addEvidence(gum::NodeId const id, gum::Idx const val)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id: gum::NodeId const\n"
		"val: gum::Idx const\n"
		"\n"
		"addEvidence(std::string const & nodeName, gum::Idx const val)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"nodeName: std::string const &\n"
		"val: gum::Idx const\n"
		"\n"
		"addEvidence(gum::NodeId const id, std::string const & val)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id: gum::NodeId const\n"
		"val: std::string const &\n"
		"\n"
		"addEvidence(std::string const & nodeName, std::string const & val)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"nodeName: std::string const &\n"
		"val: std::string const &\n"
		"\n"
		"addEvidence(gum::NodeId const id, Vector_double vals)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id: gum::NodeId const\n"
		"vals: std::vector< double,std::allocator< double > > const &\n"
		"\n"
		"LazyPropagation_double_addEvidence(LazyPropagation_double self, std::string const & nodeName, Vector_double vals)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::LazyPropagation< double > *\n"
		"nodeName: std::string const &\n"
		"vals: std::vector< double,std::allocator< double > > const &\n"
		"\n"
		""},
	 { (char *)"LazyPropagation_double_chgEvidence", _wrap_LazyPropagation_double_chgEvidence, METH_VARARGS, (char *)"\n"
		"chgEvidence(gum::NodeId const id, gum::Idx const val)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id: gum::NodeId const\n"
		"val: gum::Idx const\n"
		"\n"
		"chgEvidence(std::string const & nodeName, gum::Idx const val)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"nodeName: std::string const &\n"
		"val: gum::Idx const\n"
		"\n"
		"chgEvidence(gum::NodeId const id, std::string const & val)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id: gum::NodeId const\n"
		"val: std::string const &\n"
		"\n"
		"chgEvidence(std::string const & nodeName, std::string const & val)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"nodeName: std::string const &\n"
		"val: std::string const &\n"
		"\n"
		"chgEvidence(gum::NodeId const id, Vector_double vals)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id: gum::NodeId const\n"
		"vals: std::vector< double,std::allocator< double > > const &\n"
		"\n"
		"LazyPropagation_double_chgEvidence(LazyPropagation_double self, std::string const & nodeName, Vector_double vals)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::LazyPropagation< double > *\n"
		"nodeName: std::string const &\n"
		"vals: std::vector< double,std::allocator< double > > const &\n"
		"\n"
		""},
	 { (char *)"LazyPropagation_double_hasEvidence", _wrap_LazyPropagation_double_hasEvidence, METH_VARARGS, (char *)"\n"
		"hasEvidence(gum::NodeId const id) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id: gum::NodeId const\n"
		"\n"
		"LazyPropagation_double_hasEvidence(LazyPropagation_double self, std::string const & nodeName) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::LazyPropagation< double > const *\n"
		"nodeName: std::string const &\n"
		"\n"
		""},
	 { (char *)"LazyPropagation_double_eraseAllEvidence", _wrap_LazyPropagation_double_eraseAllEvidence, METH_VARARGS, (char *)"\n"
		"LazyPropagation_double_eraseAllEvidence(LazyPropagation_double self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::LazyPropagation< double > *\n"
		"\n"
		""},
	 { (char *)"LazyPropagation_double_hasHardEvidence", _wrap_LazyPropagation_double_hasHardEvidence, METH_VARARGS, (char *)"\n"
		"hasHardEvidence(gum::NodeId const id) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id: gum::NodeId const\n"
		"\n"
		"LazyPropagation_double_hasHardEvidence(LazyPropagation_double self, std::string const & nodeName) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::LazyPropagation< double > const *\n"
		"nodeName: std::string const &\n"
		"\n"
		""},
	 { (char *)"LazyPropagation_double_hasSoftEvidence", _wrap_LazyPropagation_double_hasSoftEvidence, METH_VARARGS, (char *)"\n"
		"hasSoftEvidence(gum::NodeId const id) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id: gum::NodeId const\n"
		"\n"
		"LazyPropagation_double_hasSoftEvidence(LazyPropagation_double self, std::string const & nodeName) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::LazyPropagation< double > const *\n"
		"nodeName: std::string const &\n"
		"\n"
		""},
	 { (char *)"LazyPropagation_double_nbrEvidence", _wrap_LazyPropagation_double_nbrEvidence, METH_VARARGS, (char *)"\n"
		"LazyPropagation_double_nbrEvidence(LazyPropagation_double self) -> gum::Size\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::LazyPropagation< double > const *\n"
		"\n"
		""},
	 { (char *)"LazyPropagation_double_nbrHardEvidence", _wrap_LazyPropagation_double_nbrHardEvidence, METH_VARARGS, (char *)"\n"
		"LazyPropagation_double_nbrHardEvidence(LazyPropagation_double self) -> gum::Size\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::LazyPropagation< double > const *\n"
		"\n"
		""},
	 { (char *)"LazyPropagation_double_nbrSoftEvidence", _wrap_LazyPropagation_double_nbrSoftEvidence, METH_VARARGS, (char *)"\n"
		"LazyPropagation_double_nbrSoftEvidence(LazyPropagation_double self) -> gum::Size\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::LazyPropagation< double > const *\n"
		"\n"
		""},
	 { (char *)"LazyPropagation_double_eraseAllTargets", _wrap_LazyPropagation_double_eraseAllTargets, METH_VARARGS, (char *)"\n"
		"LazyPropagation_double_eraseAllTargets(LazyPropagation_double self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::LazyPropagation< double > *\n"
		"\n"
		""},
	 { (char *)"LazyPropagation_double_addAllTargets", _wrap_LazyPropagation_double_addAllTargets, METH_VARARGS, (char *)"\n"
		"LazyPropagation_double_addAllTargets(LazyPropagation_double self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::LazyPropagation< double > *\n"
		"\n"
		""},
	 { (char *)"LazyPropagation_double_addTarget", _wrap_LazyPropagation_double_addTarget, METH_VARARGS, (char *)"\n"
		"addTarget(gum::NodeId const target)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"target: gum::NodeId const\n"
		"\n"
		"LazyPropagation_double_addTarget(LazyPropagation_double self, std::string const & nodeName)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::LazyPropagation< double > *\n"
		"nodeName: std::string const &\n"
		"\n"
		""},
	 { (char *)"LazyPropagation_double_eraseTarget", _wrap_LazyPropagation_double_eraseTarget, METH_VARARGS, (char *)"\n"
		"eraseTarget(gum::NodeId const target)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"target: gum::NodeId const\n"
		"\n"
		"LazyPropagation_double_eraseTarget(LazyPropagation_double self, std::string const & nodeName)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::LazyPropagation< double > *\n"
		"nodeName: std::string const &\n"
		"\n"
		""},
	 { (char *)"LazyPropagation_double_isTarget", _wrap_LazyPropagation_double_isTarget, METH_VARARGS, (char *)"\n"
		"isTarget(gum::NodeId const variable) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"variable: gum::NodeId const\n"
		"\n"
		"LazyPropagation_double_isTarget(LazyPropagation_double self, std::string const & nodeName) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::LazyPropagation< double > const *\n"
		"nodeName: std::string const &\n"
		"\n"
		""},
	 { (char *)"LazyPropagation_double_nbrTargets", _wrap_LazyPropagation_double_nbrTargets, METH_VARARGS, (char *)"\n"
		"LazyPropagation_double_nbrTargets(LazyPropagation_double self) -> gum::Size\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::LazyPropagation< double > const *\n"
		"\n"
		""},
	 { (char *)"LazyPropagation_double_H", _wrap_LazyPropagation_double_H, METH_VARARGS, (char *)"\n"
		"H(gum::NodeId const X) -> double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"X: gum::NodeId const\n"
		"\n"
		"LazyPropagation_double_H(LazyPropagation_double self, std::string const & nodeName) -> double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::LazyPropagation< double > *\n"
		"nodeName: std::string const &\n"
		"\n"
		""},
	 { (char *)"LazyPropagation_double_swigregister", LazyPropagation_double_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_GibbsInference_double", _wrap_new_GibbsInference_double, METH_VARARGS, (char *)"\n"
		"new_GibbsInference_double(IBayesNet_double BN) -> GibbsInference_double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"BN: gum::IBayesNet< double > const *\n"
		"\n"
		""},
	 { (char *)"delete_GibbsInference_double", _wrap_delete_GibbsInference_double, METH_VARARGS, (char *)"\n"
		"delete_GibbsInference_double(GibbsInference_double self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::GibbsInference< double > *\n"
		"\n"
		""},
	 { (char *)"GibbsInference_double_setEvidence", _wrap_GibbsInference_double_setEvidence, METH_VARARGS, (char *)"\n"
		"GibbsInference_double_setEvidence(GibbsInference_double self, PyObject * evidces)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::GibbsInference< double > *\n"
		"evidces: PyObject *\n"
		"\n"
		""},
	 { (char *)"GibbsInference_double_updateEvidence", _wrap_GibbsInference_double_updateEvidence, METH_VARARGS, (char *)"\n"
		"GibbsInference_double_updateEvidence(GibbsInference_double self, PyObject * evidces)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::GibbsInference< double > *\n"
		"evidces: PyObject *\n"
		"\n"
		""},
	 { (char *)"GibbsInference_double_setTargets", _wrap_GibbsInference_double_setTargets, METH_VARARGS, (char *)"\n"
		"GibbsInference_double_setTargets(GibbsInference_double self, PyObject * targets)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::GibbsInference< double > *\n"
		"targets: PyObject *\n"
		"\n"
		""},
	 { (char *)"GibbsInference_double_setVerbosity", _wrap_GibbsInference_double_setVerbosity, METH_VARARGS, (char *)"\n"
		"GibbsInference_double_setVerbosity(GibbsInference_double self, bool v)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::GibbsInference< double > *\n"
		"v: bool\n"
		"\n"
		""},
	 { (char *)"GibbsInference_double_setEpsilon", _wrap_GibbsInference_double_setEpsilon, METH_VARARGS, (char *)"\n"
		"GibbsInference_double_setEpsilon(GibbsInference_double self, double eps)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::GibbsInference< double > *\n"
		"eps: double\n"
		"\n"
		""},
	 { (char *)"GibbsInference_double_setMinEpsilonRate", _wrap_GibbsInference_double_setMinEpsilonRate, METH_VARARGS, (char *)"\n"
		"GibbsInference_double_setMinEpsilonRate(GibbsInference_double self, double rate)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::GibbsInference< double > *\n"
		"rate: double\n"
		"\n"
		""},
	 { (char *)"GibbsInference_double_setMaxIter", _wrap_GibbsInference_double_setMaxIter, METH_VARARGS, (char *)"\n"
		"GibbsInference_double_setMaxIter(GibbsInference_double self, gum::Size max)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::GibbsInference< double > *\n"
		"max: gum::Size\n"
		"\n"
		""},
	 { (char *)"GibbsInference_double_setMaxTime", _wrap_GibbsInference_double_setMaxTime, METH_VARARGS, (char *)"\n"
		"GibbsInference_double_setMaxTime(GibbsInference_double self, double timeout)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::GibbsInference< double > *\n"
		"timeout: double\n"
		"\n"
		""},
	 { (char *)"GibbsInference_double_setPeriodSize", _wrap_GibbsInference_double_setPeriodSize, METH_VARARGS, (char *)"\n"
		"GibbsInference_double_setPeriodSize(GibbsInference_double self, gum::Size p)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::GibbsInference< double > *\n"
		"p: gum::Size\n"
		"\n"
		""},
	 { (char *)"GibbsInference_double_setBurnIn", _wrap_GibbsInference_double_setBurnIn, METH_VARARGS, (char *)"\n"
		"GibbsInference_double_setBurnIn(GibbsInference_double self, gum::Size b)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::GibbsInference< double > *\n"
		"b: gum::Size\n"
		"\n"
		""},
	 { (char *)"GibbsInference_double_verbosity", _wrap_GibbsInference_double_verbosity, METH_VARARGS, (char *)"\n"
		"GibbsInference_double_verbosity(GibbsInference_double self) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::GibbsInference< double > const *\n"
		"\n"
		""},
	 { (char *)"GibbsInference_double_epsilon", _wrap_GibbsInference_double_epsilon, METH_VARARGS, (char *)"\n"
		"GibbsInference_double_epsilon(GibbsInference_double self) -> double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::GibbsInference< double > const *\n"
		"\n"
		""},
	 { (char *)"GibbsInference_double_minEpsilonRate", _wrap_GibbsInference_double_minEpsilonRate, METH_VARARGS, (char *)"\n"
		"GibbsInference_double_minEpsilonRate(GibbsInference_double self) -> double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::GibbsInference< double > const *\n"
		"\n"
		""},
	 { (char *)"GibbsInference_double_maxIter", _wrap_GibbsInference_double_maxIter, METH_VARARGS, (char *)"\n"
		"GibbsInference_double_maxIter(GibbsInference_double self) -> gum::Size\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::GibbsInference< double > const *\n"
		"\n"
		""},
	 { (char *)"GibbsInference_double_maxTime", _wrap_GibbsInference_double_maxTime, METH_VARARGS, (char *)"\n"
		"GibbsInference_double_maxTime(GibbsInference_double self) -> double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::GibbsInference< double > const *\n"
		"\n"
		""},
	 { (char *)"GibbsInference_double_periodSize", _wrap_GibbsInference_double_periodSize, METH_VARARGS, (char *)"\n"
		"GibbsInference_double_periodSize(GibbsInference_double self) -> gum::Size\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::GibbsInference< double > const *\n"
		"\n"
		""},
	 { (char *)"GibbsInference_double_burnIn", _wrap_GibbsInference_double_burnIn, METH_VARARGS, (char *)"\n"
		"GibbsInference_double_burnIn(GibbsInference_double self) -> gum::Size\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::GibbsInference< double > const *\n"
		"\n"
		""},
	 { (char *)"GibbsInference_double_nbrIterations", _wrap_GibbsInference_double_nbrIterations, METH_VARARGS, (char *)"\n"
		"GibbsInference_double_nbrIterations(GibbsInference_double self) -> gum::Size\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::GibbsInference< double > const *\n"
		"\n"
		""},
	 { (char *)"GibbsInference_double_currentTime", _wrap_GibbsInference_double_currentTime, METH_VARARGS, (char *)"\n"
		"GibbsInference_double_currentTime(GibbsInference_double self) -> double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::GibbsInference< double > const *\n"
		"\n"
		""},
	 { (char *)"GibbsInference_double_messageApproximationScheme", _wrap_GibbsInference_double_messageApproximationScheme, METH_VARARGS, (char *)"\n"
		"GibbsInference_double_messageApproximationScheme(GibbsInference_double self) -> std::string\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::GibbsInference< double > const *\n"
		"\n"
		""},
	 { (char *)"GibbsInference_double_history", _wrap_GibbsInference_double_history, METH_VARARGS, (char *)"\n"
		"GibbsInference_double_history(GibbsInference_double self) -> Vector_double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::GibbsInference< double > const *\n"
		"\n"
		""},
	 { (char *)"GibbsInference_double_makeInference", _wrap_GibbsInference_double_makeInference, METH_VARARGS, (char *)"\n"
		"GibbsInference_double_makeInference(GibbsInference_double self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::GibbsInference< double > *\n"
		"\n"
		""},
	 { (char *)"GibbsInference_double_posterior", _wrap_GibbsInference_double_posterior, METH_VARARGS, (char *)"\n"
		"posterior(gum::NodeId const var) -> Potential_double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"var: gum::NodeId const\n"
		"\n"
		"GibbsInference_double_posterior(GibbsInference_double self, std::string const nodeName) -> Potential_double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::GibbsInference< double > *\n"
		"nodeName: std::string const\n"
		"\n"
		""},
	 { (char *)"GibbsInference_double_BayesNet", _wrap_GibbsInference_double_BayesNet, METH_VARARGS, (char *)"\n"
		"GibbsInference_double_BayesNet(GibbsInference_double self) -> IBayesNet_double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::GibbsInference< double > const *\n"
		"\n"
		""},
	 { (char *)"GibbsInference_double_addEvidence", _wrap_GibbsInference_double_addEvidence, METH_VARARGS, (char *)"\n"
		"addEvidence(gum::NodeId const id, gum::Idx const val)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id: gum::NodeId const\n"
		"val: gum::Idx const\n"
		"\n"
		"addEvidence(std::string const & nodeName, gum::Idx const val)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"nodeName: std::string const &\n"
		"val: gum::Idx const\n"
		"\n"
		"addEvidence(gum::NodeId const id, std::string const & val)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id: gum::NodeId const\n"
		"val: std::string const &\n"
		"\n"
		"addEvidence(std::string const & nodeName, std::string const & val)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"nodeName: std::string const &\n"
		"val: std::string const &\n"
		"\n"
		"addEvidence(gum::NodeId const id, Vector_double vals)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id: gum::NodeId const\n"
		"vals: std::vector< double,std::allocator< double > > const &\n"
		"\n"
		"GibbsInference_double_addEvidence(GibbsInference_double self, std::string const & nodeName, Vector_double vals)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::GibbsInference< double > *\n"
		"nodeName: std::string const &\n"
		"vals: std::vector< double,std::allocator< double > > const &\n"
		"\n"
		""},
	 { (char *)"GibbsInference_double_chgEvidence", _wrap_GibbsInference_double_chgEvidence, METH_VARARGS, (char *)"\n"
		"chgEvidence(gum::NodeId const id, gum::Idx const val)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id: gum::NodeId const\n"
		"val: gum::Idx const\n"
		"\n"
		"chgEvidence(std::string const & nodeName, gum::Idx const val)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"nodeName: std::string const &\n"
		"val: gum::Idx const\n"
		"\n"
		"chgEvidence(gum::NodeId const id, std::string const & val)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id: gum::NodeId const\n"
		"val: std::string const &\n"
		"\n"
		"chgEvidence(std::string const & nodeName, std::string const & val)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"nodeName: std::string const &\n"
		"val: std::string const &\n"
		"\n"
		"chgEvidence(gum::NodeId const id, Vector_double vals)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id: gum::NodeId const\n"
		"vals: std::vector< double,std::allocator< double > > const &\n"
		"\n"
		"GibbsInference_double_chgEvidence(GibbsInference_double self, std::string const & nodeName, Vector_double vals)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::GibbsInference< double > *\n"
		"nodeName: std::string const &\n"
		"vals: std::vector< double,std::allocator< double > > const &\n"
		"\n"
		""},
	 { (char *)"GibbsInference_double_hasEvidence", _wrap_GibbsInference_double_hasEvidence, METH_VARARGS, (char *)"\n"
		"hasEvidence(gum::NodeId const id) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id: gum::NodeId const\n"
		"\n"
		"GibbsInference_double_hasEvidence(GibbsInference_double self, std::string const & nodeName) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::GibbsInference< double > const *\n"
		"nodeName: std::string const &\n"
		"\n"
		""},
	 { (char *)"GibbsInference_double_eraseAllEvidence", _wrap_GibbsInference_double_eraseAllEvidence, METH_VARARGS, (char *)"\n"
		"GibbsInference_double_eraseAllEvidence(GibbsInference_double self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::GibbsInference< double > *\n"
		"\n"
		""},
	 { (char *)"GibbsInference_double_hasHardEvidence", _wrap_GibbsInference_double_hasHardEvidence, METH_VARARGS, (char *)"\n"
		"hasHardEvidence(gum::NodeId const id) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id: gum::NodeId const\n"
		"\n"
		"GibbsInference_double_hasHardEvidence(GibbsInference_double self, std::string const & nodeName) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::GibbsInference< double > const *\n"
		"nodeName: std::string const &\n"
		"\n"
		""},
	 { (char *)"GibbsInference_double_hasSoftEvidence", _wrap_GibbsInference_double_hasSoftEvidence, METH_VARARGS, (char *)"\n"
		"hasSoftEvidence(gum::NodeId const id) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id: gum::NodeId const\n"
		"\n"
		"GibbsInference_double_hasSoftEvidence(GibbsInference_double self, std::string const & nodeName) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::GibbsInference< double > const *\n"
		"nodeName: std::string const &\n"
		"\n"
		""},
	 { (char *)"GibbsInference_double_nbrEvidence", _wrap_GibbsInference_double_nbrEvidence, METH_VARARGS, (char *)"\n"
		"GibbsInference_double_nbrEvidence(GibbsInference_double self) -> gum::Size\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::GibbsInference< double > const *\n"
		"\n"
		""},
	 { (char *)"GibbsInference_double_nbrHardEvidence", _wrap_GibbsInference_double_nbrHardEvidence, METH_VARARGS, (char *)"\n"
		"GibbsInference_double_nbrHardEvidence(GibbsInference_double self) -> gum::Size\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::GibbsInference< double > const *\n"
		"\n"
		""},
	 { (char *)"GibbsInference_double_nbrSoftEvidence", _wrap_GibbsInference_double_nbrSoftEvidence, METH_VARARGS, (char *)"\n"
		"GibbsInference_double_nbrSoftEvidence(GibbsInference_double self) -> gum::Size\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::GibbsInference< double > const *\n"
		"\n"
		""},
	 { (char *)"GibbsInference_double_eraseAllTargets", _wrap_GibbsInference_double_eraseAllTargets, METH_VARARGS, (char *)"\n"
		"GibbsInference_double_eraseAllTargets(GibbsInference_double self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::GibbsInference< double > *\n"
		"\n"
		""},
	 { (char *)"GibbsInference_double_addAllTargets", _wrap_GibbsInference_double_addAllTargets, METH_VARARGS, (char *)"\n"
		"GibbsInference_double_addAllTargets(GibbsInference_double self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::GibbsInference< double > *\n"
		"\n"
		""},
	 { (char *)"GibbsInference_double_addTarget", _wrap_GibbsInference_double_addTarget, METH_VARARGS, (char *)"\n"
		"addTarget(gum::NodeId const target)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"target: gum::NodeId const\n"
		"\n"
		"GibbsInference_double_addTarget(GibbsInference_double self, std::string const & nodeName)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::GibbsInference< double > *\n"
		"nodeName: std::string const &\n"
		"\n"
		""},
	 { (char *)"GibbsInference_double_eraseTarget", _wrap_GibbsInference_double_eraseTarget, METH_VARARGS, (char *)"\n"
		"eraseTarget(gum::NodeId const target)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"target: gum::NodeId const\n"
		"\n"
		"GibbsInference_double_eraseTarget(GibbsInference_double self, std::string const & nodeName)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::GibbsInference< double > *\n"
		"nodeName: std::string const &\n"
		"\n"
		""},
	 { (char *)"GibbsInference_double_isTarget", _wrap_GibbsInference_double_isTarget, METH_VARARGS, (char *)"\n"
		"isTarget(gum::NodeId const variable) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"variable: gum::NodeId const\n"
		"\n"
		"GibbsInference_double_isTarget(GibbsInference_double self, std::string const & nodeName) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::GibbsInference< double > const *\n"
		"nodeName: std::string const &\n"
		"\n"
		""},
	 { (char *)"GibbsInference_double_nbrTargets", _wrap_GibbsInference_double_nbrTargets, METH_VARARGS, (char *)"\n"
		"GibbsInference_double_nbrTargets(GibbsInference_double self) -> gum::Size\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::GibbsInference< double > const *\n"
		"\n"
		""},
	 { (char *)"GibbsInference_double_H", _wrap_GibbsInference_double_H, METH_VARARGS, (char *)"\n"
		"H(gum::NodeId const X) -> double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"X: gum::NodeId const\n"
		"\n"
		"GibbsInference_double_H(GibbsInference_double self, std::string const & nodeName) -> double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::GibbsInference< double > *\n"
		"nodeName: std::string const &\n"
		"\n"
		""},
	 { (char *)"GibbsInference_double_swigregister", GibbsInference_double_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_BruteForceKL_double", _wrap_new_BruteForceKL_double, METH_VARARGS, (char *)"\n"
		"BruteForceKL_double(IBayesNet_double P, IBayesNet_double Q)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"P: gum::IBayesNet< double > const &\n"
		"Q: gum::IBayesNet< double > const &\n"
		"\n"
		"new_BruteForceKL_double(gum::KL< double > const & kl) -> BruteForceKL_double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"kl: gum::KL< double > const &\n"
		"\n"
		""},
	 { (char *)"delete_BruteForceKL_double", _wrap_delete_BruteForceKL_double, METH_VARARGS, (char *)"\n"
		"delete_BruteForceKL_double(BruteForceKL_double self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::BruteForceKL< double > *\n"
		"\n"
		""},
	 { (char *)"BruteForceKL_double_compute", _wrap_BruteForceKL_double_compute, METH_VARARGS, (char *)"\n"
		"BruteForceKL_double_compute(BruteForceKL_double self) -> PyObject *\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::BruteForceKL< double > *\n"
		"\n"
		""},
	 { (char *)"BruteForceKL_double_swigregister", BruteForceKL_double_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_GibbsKL_double", _wrap_new_GibbsKL_double, METH_VARARGS, (char *)"\n"
		"GibbsKL_double(IBayesNet_double P, IBayesNet_double Q)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"P: gum::IBayesNet< double > const &\n"
		"Q: gum::IBayesNet< double > const &\n"
		"\n"
		"new_GibbsKL_double(gum::KL< double > const & kl) -> GibbsKL_double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"kl: gum::KL< double > const &\n"
		"\n"
		""},
	 { (char *)"delete_GibbsKL_double", _wrap_delete_GibbsKL_double, METH_VARARGS, (char *)"\n"
		"delete_GibbsKL_double(GibbsKL_double self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::GibbsKL< double > *\n"
		"\n"
		""},
	 { (char *)"GibbsKL_double_compute", _wrap_GibbsKL_double_compute, METH_VARARGS, (char *)"\n"
		"GibbsKL_double_compute(GibbsKL_double self) -> PyObject *\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::GibbsKL< double > *\n"
		"\n"
		""},
	 { (char *)"GibbsKL_double_setVerbosity", _wrap_GibbsKL_double_setVerbosity, METH_VARARGS, (char *)"\n"
		"GibbsKL_double_setVerbosity(GibbsKL_double self, bool v)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::GibbsKL< double > *\n"
		"v: bool\n"
		"\n"
		""},
	 { (char *)"GibbsKL_double_setEpsilon", _wrap_GibbsKL_double_setEpsilon, METH_VARARGS, (char *)"\n"
		"GibbsKL_double_setEpsilon(GibbsKL_double self, double eps)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::GibbsKL< double > *\n"
		"eps: double\n"
		"\n"
		""},
	 { (char *)"GibbsKL_double_setMinEpsilonRate", _wrap_GibbsKL_double_setMinEpsilonRate, METH_VARARGS, (char *)"\n"
		"GibbsKL_double_setMinEpsilonRate(GibbsKL_double self, double rate)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::GibbsKL< double > *\n"
		"rate: double\n"
		"\n"
		""},
	 { (char *)"GibbsKL_double_setMaxIter", _wrap_GibbsKL_double_setMaxIter, METH_VARARGS, (char *)"\n"
		"GibbsKL_double_setMaxIter(GibbsKL_double self, gum::Size max)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::GibbsKL< double > *\n"
		"max: gum::Size\n"
		"\n"
		""},
	 { (char *)"GibbsKL_double_setMaxTime", _wrap_GibbsKL_double_setMaxTime, METH_VARARGS, (char *)"\n"
		"GibbsKL_double_setMaxTime(GibbsKL_double self, double timeout)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::GibbsKL< double > *\n"
		"timeout: double\n"
		"\n"
		""},
	 { (char *)"GibbsKL_double_setPeriodSize", _wrap_GibbsKL_double_setPeriodSize, METH_VARARGS, (char *)"\n"
		"GibbsKL_double_setPeriodSize(GibbsKL_double self, gum::Size p)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::GibbsKL< double > *\n"
		"p: gum::Size\n"
		"\n"
		""},
	 { (char *)"GibbsKL_double_setBurnIn", _wrap_GibbsKL_double_setBurnIn, METH_VARARGS, (char *)"\n"
		"GibbsKL_double_setBurnIn(GibbsKL_double self, gum::Size b)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::GibbsKL< double > *\n"
		"b: gum::Size\n"
		"\n"
		""},
	 { (char *)"GibbsKL_double_verbosity", _wrap_GibbsKL_double_verbosity, METH_VARARGS, (char *)"\n"
		"GibbsKL_double_verbosity(GibbsKL_double self) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::GibbsKL< double > const *\n"
		"\n"
		""},
	 { (char *)"GibbsKL_double_epsilon", _wrap_GibbsKL_double_epsilon, METH_VARARGS, (char *)"\n"
		"GibbsKL_double_epsilon(GibbsKL_double self) -> double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::GibbsKL< double > const *\n"
		"\n"
		""},
	 { (char *)"GibbsKL_double_minEpsilonRate", _wrap_GibbsKL_double_minEpsilonRate, METH_VARARGS, (char *)"\n"
		"GibbsKL_double_minEpsilonRate(GibbsKL_double self) -> double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::GibbsKL< double > const *\n"
		"\n"
		""},
	 { (char *)"GibbsKL_double_maxIter", _wrap_GibbsKL_double_maxIter, METH_VARARGS, (char *)"\n"
		"GibbsKL_double_maxIter(GibbsKL_double self) -> gum::Size\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::GibbsKL< double > const *\n"
		"\n"
		""},
	 { (char *)"GibbsKL_double_maxTime", _wrap_GibbsKL_double_maxTime, METH_VARARGS, (char *)"\n"
		"GibbsKL_double_maxTime(GibbsKL_double self) -> double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::GibbsKL< double > const *\n"
		"\n"
		""},
	 { (char *)"GibbsKL_double_periodSize", _wrap_GibbsKL_double_periodSize, METH_VARARGS, (char *)"\n"
		"GibbsKL_double_periodSize(GibbsKL_double self) -> gum::Size\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::GibbsKL< double > const *\n"
		"\n"
		""},
	 { (char *)"GibbsKL_double_burnIn", _wrap_GibbsKL_double_burnIn, METH_VARARGS, (char *)"\n"
		"GibbsKL_double_burnIn(GibbsKL_double self) -> gum::Size\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::GibbsKL< double > const *\n"
		"\n"
		""},
	 { (char *)"GibbsKL_double_nbrIterations", _wrap_GibbsKL_double_nbrIterations, METH_VARARGS, (char *)"\n"
		"GibbsKL_double_nbrIterations(GibbsKL_double self) -> gum::Size\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::GibbsKL< double > const *\n"
		"\n"
		""},
	 { (char *)"GibbsKL_double_currentTime", _wrap_GibbsKL_double_currentTime, METH_VARARGS, (char *)"\n"
		"GibbsKL_double_currentTime(GibbsKL_double self) -> double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::GibbsKL< double > const *\n"
		"\n"
		""},
	 { (char *)"GibbsKL_double_messageApproximationScheme", _wrap_GibbsKL_double_messageApproximationScheme, METH_VARARGS, (char *)"\n"
		"GibbsKL_double_messageApproximationScheme(GibbsKL_double self) -> std::string\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::GibbsKL< double > const *\n"
		"\n"
		""},
	 { (char *)"GibbsKL_double_history", _wrap_GibbsKL_double_history, METH_VARARGS, (char *)"\n"
		"GibbsKL_double_history(GibbsKL_double self) -> Vector_double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::GibbsKL< double > const *\n"
		"\n"
		""},
	 { (char *)"GibbsKL_double_swigregister", GibbsKL_double_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_CredalNet_double", _wrap_new_CredalNet_double, METH_VARARGS, (char *)"\n"
		"CredalNet_double()\n"
		"CredalNet_double(std::string const & src_min_num, std::string const & src_max_den)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"src_min_num: std::string const &\n"
		"src_max_den: std::string const &\n"
		"\n"
		"CredalNet_double(std::string const & src_min_num)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"src_min_num: std::string const &\n"
		"\n"
		"CredalNet_double(BayesNet_double src_min_num, BayesNet_double src_max_den)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"src_min_num: gum::BayesNet< double > const &\n"
		"src_max_den: gum::BayesNet< double > const &\n"
		"\n"
		"new_CredalNet_double(BayesNet_double src_min_num) -> CredalNet_double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"src_min_num: gum::BayesNet< double > const &\n"
		"\n"
		""},
	 { (char *)"delete_CredalNet_double", _wrap_delete_CredalNet_double, METH_VARARGS, (char *)"\n"
		"delete_CredalNet_double(CredalNet_double self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::credal::CredalNet< double > *\n"
		"\n"
		""},
	 { (char *)"CredalNet_double_addNode", _wrap_CredalNet_double_addNode, METH_VARARGS, (char *)"\n"
		"CredalNet_double_addNode(CredalNet_double self, std::string const & name, gum::Size const & card) -> gum::NodeId\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::credal::CredalNet< double > *\n"
		"name: std::string const &\n"
		"card: gum::Size const &\n"
		"\n"
		""},
	 { (char *)"CredalNet_double_addArc", _wrap_CredalNet_double_addArc, METH_VARARGS, (char *)"\n"
		"CredalNet_double_addArc(CredalNet_double self, gum::NodeId const & tail, gum::NodeId const & head)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::credal::CredalNet< double > *\n"
		"tail: gum::NodeId const &\n"
		"head: gum::NodeId const &\n"
		"\n"
		""},
	 { (char *)"CredalNet_double_setCPTs", _wrap_CredalNet_double_setCPTs, METH_VARARGS, (char *)"\n"
		"CredalNet_double_setCPTs(CredalNet_double self, gum::NodeId const & id, std::vector< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >,std::allocator< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > > > const & cpt)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::credal::CredalNet< double > *\n"
		"id: gum::NodeId const &\n"
		"cpt: std::vector< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >,std::allocator< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > > > const &\n"
		"\n"
		""},
	 { (char *)"CredalNet_double_setCPT", _wrap_CredalNet_double_setCPT, METH_VARARGS, (char *)"\n"
		"setCPT(gum::NodeId const & id, gum::Size & entry, std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > const & cpt)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id: gum::NodeId const &\n"
		"entry: gum::Size &\n"
		"cpt: std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > const &\n"
		"\n"
		"CredalNet_double_setCPT(CredalNet_double self, gum::NodeId const & id, Instantiation ins, std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > const & cpt)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::credal::CredalNet< double > *\n"
		"id: gum::NodeId const &\n"
		"ins: gum::Instantiation\n"
		"cpt: std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > const &\n"
		"\n"
		""},
	 { (char *)"CredalNet_double_fillConstraints", _wrap_CredalNet_double_fillConstraints, METH_VARARGS, (char *)"\n"
		"CredalNet_double_fillConstraints(CredalNet_double self, gum::NodeId const & id, Vector_double lower, Vector_double upper)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::credal::CredalNet< double > *\n"
		"id: gum::NodeId const &\n"
		"lower: std::vector< double,std::allocator< double > > const &\n"
		"upper: std::vector< double,std::allocator< double > > const &\n"
		"\n"
		""},
	 { (char *)"CredalNet_double_fillConstraint", _wrap_CredalNet_double_fillConstraint, METH_VARARGS, (char *)"\n"
		"fillConstraint(gum::NodeId const & id, gum::Idx const & entry, Vector_double lower, Vector_double upper)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id: gum::NodeId const &\n"
		"entry: gum::Idx const &\n"
		"lower: std::vector< double,std::allocator< double > > const &\n"
		"upper: std::vector< double,std::allocator< double > > const &\n"
		"\n"
		"CredalNet_double_fillConstraint(CredalNet_double self, gum::NodeId const & id, Instantiation ins, Vector_double lower, Vector_double upper)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::credal::CredalNet< double > *\n"
		"id: gum::NodeId const &\n"
		"ins: gum::Instantiation\n"
		"lower: std::vector< double,std::allocator< double > > const &\n"
		"upper: std::vector< double,std::allocator< double > > const &\n"
		"\n"
		""},
	 { (char *)"CredalNet_double_instantiation", _wrap_CredalNet_double_instantiation, METH_VARARGS, (char *)"\n"
		"CredalNet_double_instantiation(CredalNet_double self, gum::NodeId const & id) -> Instantiation\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::credal::CredalNet< double > *\n"
		"id: gum::NodeId const &\n"
		"\n"
		""},
	 { (char *)"CredalNet_double_domainSize", _wrap_CredalNet_double_domainSize, METH_VARARGS, (char *)"\n"
		"CredalNet_double_domainSize(CredalNet_double self, gum::NodeId const & id) -> gum::Size\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::credal::CredalNet< double > *\n"
		"id: gum::NodeId const &\n"
		"\n"
		""},
	 { (char *)"CredalNet_double_bnToCredal", _wrap_CredalNet_double_bnToCredal, METH_VARARGS, (char *)"\n"
		"bnToCredal(double const beta, bool const oneNet, bool const keepZeroes=False)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"beta: double const\n"
		"oneNet: bool const\n"
		"keepZeroes: bool const\n"
		"\n"
		"CredalNet_double_bnToCredal(CredalNet_double self, double const beta, bool const oneNet)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::credal::CredalNet< double > *\n"
		"beta: double const\n"
		"oneNet: bool const\n"
		"\n"
		""},
	 { (char *)"CredalNet_double_intervalToCredalWithFiles", _wrap_CredalNet_double_intervalToCredalWithFiles, METH_VARARGS, (char *)"\n"
		"CredalNet_double_intervalToCredalWithFiles(CredalNet_double self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::credal::CredalNet< double > *\n"
		"\n"
		""},
	 { (char *)"CredalNet_double_intervalToCredal", _wrap_CredalNet_double_intervalToCredal, METH_VARARGS, (char *)"\n"
		"CredalNet_double_intervalToCredal(CredalNet_double self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::credal::CredalNet< double > *\n"
		"\n"
		""},
	 { (char *)"CredalNet_double_lagrangeNormalization", _wrap_CredalNet_double_lagrangeNormalization, METH_VARARGS, (char *)"\n"
		"CredalNet_double_lagrangeNormalization(CredalNet_double self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::credal::CredalNet< double > *\n"
		"\n"
		""},
	 { (char *)"CredalNet_double_idmLearning", _wrap_CredalNet_double_idmLearning, METH_VARARGS, (char *)"\n"
		"idmLearning(gum::Idx const s=0, bool const keepZeroes=False)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"s: gum::Idx const\n"
		"keepZeroes: bool const\n"
		"\n"
		"idmLearning(gum::Idx const s=0)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"s: gum::Idx const\n"
		"\n"
		"CredalNet_double_idmLearning(CredalNet_double self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::credal::CredalNet< double > *\n"
		"\n"
		""},
	 { (char *)"CredalNet_double_approximatedBinarization", _wrap_CredalNet_double_approximatedBinarization, METH_VARARGS, (char *)"\n"
		"CredalNet_double_approximatedBinarization(CredalNet_double self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::credal::CredalNet< double > *\n"
		"\n"
		""},
	 { (char *)"CredalNet_double_saveBNsMinMax", _wrap_CredalNet_double_saveBNsMinMax, METH_VARARGS, (char *)"\n"
		"CredalNet_double_saveBNsMinMax(CredalNet_double self, std::string const & min_path, std::string const & max_path)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::credal::CredalNet< double > const *\n"
		"min_path: std::string const &\n"
		"max_path: std::string const &\n"
		"\n"
		""},
	 { (char *)"CredalNet_double___str__", _wrap_CredalNet_double___str__, METH_VARARGS, (char *)"\n"
		"CredalNet_double___str__(CredalNet_double self) -> std::string\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::credal::CredalNet< double > const *\n"
		"\n"
		""},
	 { (char *)"CredalNet_double_computeCPTMinMax", _wrap_CredalNet_double_computeCPTMinMax, METH_VARARGS, (char *)"\n"
		"CredalNet_double_computeCPTMinMax(CredalNet_double self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::credal::CredalNet< double > *\n"
		"\n"
		""},
	 { (char *)"CredalNet_double_src_bn", _wrap_CredalNet_double_src_bn, METH_VARARGS, (char *)"\n"
		"CredalNet_double_src_bn(CredalNet_double self) -> BayesNet_double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::credal::CredalNet< double > const *\n"
		"\n"
		""},
	 { (char *)"CredalNet_double_current_bn", _wrap_CredalNet_double_current_bn, METH_VARARGS, (char *)"\n"
		"CredalNet_double_current_bn(CredalNet_double self) -> BayesNet_double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::credal::CredalNet< double > const *\n"
		"\n"
		""},
	 { (char *)"CredalNet_double_credalNet_currentCpt", _wrap_CredalNet_double_credalNet_currentCpt, METH_VARARGS, (char *)"\n"
		"CredalNet_double_credalNet_currentCpt(CredalNet_double self) -> gum::NodeProperty< std::vector< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >,std::allocator< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > > > > const &\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::credal::CredalNet< double > const *\n"
		"\n"
		""},
	 { (char *)"CredalNet_double_credalNet_srcCpt", _wrap_CredalNet_double_credalNet_srcCpt, METH_VARARGS, (char *)"\n"
		"CredalNet_double_credalNet_srcCpt(CredalNet_double self) -> gum::NodeProperty< std::vector< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >,std::allocator< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > > > > const &\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::credal::CredalNet< double > const *\n"
		"\n"
		""},
	 { (char *)"CredalNet_double_currentNodeType", _wrap_CredalNet_double_currentNodeType, METH_VARARGS, (char *)"\n"
		"CredalNet_double_currentNodeType(CredalNet_double self, gum::NodeId const & id) -> gum::credal::CredalNet< double >::NodeType\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::credal::CredalNet< double > const *\n"
		"id: gum::NodeId const &\n"
		"\n"
		""},
	 { (char *)"CredalNet_double_nodeType", _wrap_CredalNet_double_nodeType, METH_VARARGS, (char *)"\n"
		"CredalNet_double_nodeType(CredalNet_double self, gum::NodeId const & id) -> gum::credal::CredalNet< double >::NodeType\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::credal::CredalNet< double > const *\n"
		"id: gum::NodeId const &\n"
		"\n"
		""},
	 { (char *)"CredalNet_double_epsilonMin", _wrap_CredalNet_double_epsilonMin, METH_VARARGS, (char *)"\n"
		"CredalNet_double_epsilonMin(CredalNet_double self) -> double const &\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::credal::CredalNet< double > const *\n"
		"\n"
		""},
	 { (char *)"CredalNet_double_epsilonMax", _wrap_CredalNet_double_epsilonMax, METH_VARARGS, (char *)"\n"
		"CredalNet_double_epsilonMax(CredalNet_double self) -> double const &\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::credal::CredalNet< double > const *\n"
		"\n"
		""},
	 { (char *)"CredalNet_double_epsilonMean", _wrap_CredalNet_double_epsilonMean, METH_VARARGS, (char *)"\n"
		"CredalNet_double_epsilonMean(CredalNet_double self) -> double const &\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::credal::CredalNet< double > const *\n"
		"\n"
		""},
	 { (char *)"CredalNet_double_isSeparatelySpecified", _wrap_CredalNet_double_isSeparatelySpecified, METH_VARARGS, (char *)"\n"
		"CredalNet_double_isSeparatelySpecified(CredalNet_double self) -> bool const\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::credal::CredalNet< double > const *\n"
		"\n"
		""},
	 { (char *)"CredalNet_double_hasComputedCPTMinMax", _wrap_CredalNet_double_hasComputedCPTMinMax, METH_VARARGS, (char *)"\n"
		"CredalNet_double_hasComputedCPTMinMax(CredalNet_double self) -> bool const\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::credal::CredalNet< double > const *\n"
		"\n"
		""},
	 { (char *)"CredalNet_double_get_CPT_min", _wrap_CredalNet_double_get_CPT_min, METH_VARARGS, (char *)"\n"
		"CredalNet_double_get_CPT_min(CredalNet_double self) -> std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > const &\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::credal::CredalNet< double > const *\n"
		"\n"
		""},
	 { (char *)"CredalNet_double_get_CPT_max", _wrap_CredalNet_double_get_CPT_max, METH_VARARGS, (char *)"\n"
		"CredalNet_double_get_CPT_max(CredalNet_double self) -> std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > const &\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::credal::CredalNet< double > const *\n"
		"\n"
		""},
	 { (char *)"CredalNet_double_swigregister", CredalNet_double_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_CNMonteCarloSampling_double", _wrap_new_CNMonteCarloSampling_double, METH_VARARGS, (char *)"\n"
		"new_CNMonteCarloSampling_double(CredalNet_double credalNet) -> CNMonteCarloSampling_double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"credalNet: gum::credal::CredalNet< double > const &\n"
		"\n"
		""},
	 { (char *)"delete_CNMonteCarloSampling_double", _wrap_delete_CNMonteCarloSampling_double, METH_VARARGS, (char *)"\n"
		"delete_CNMonteCarloSampling_double(CNMonteCarloSampling_double self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > *\n"
		"\n"
		""},
	 { (char *)"CNMonteCarloSampling_double_makeInference", _wrap_CNMonteCarloSampling_double_makeInference, METH_VARARGS, (char *)"\n"
		"CNMonteCarloSampling_double_makeInference(CNMonteCarloSampling_double self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > *\n"
		"\n"
		""},
	 { (char *)"CNMonteCarloSampling_double_insertEvidenceFile", _wrap_CNMonteCarloSampling_double_insertEvidenceFile, METH_VARARGS, (char *)"\n"
		"CNMonteCarloSampling_double_insertEvidenceFile(CNMonteCarloSampling_double self, std::string const & path)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > *\n"
		"path: std::string const &\n"
		"\n"
		""},
	 { (char *)"CNMonteCarloSampling_double_setVerbosity", _wrap_CNMonteCarloSampling_double_setVerbosity, METH_VARARGS, (char *)"\n"
		"CNMonteCarloSampling_double_setVerbosity(CNMonteCarloSampling_double self, bool v)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > *\n"
		"v: bool\n"
		"\n"
		""},
	 { (char *)"CNMonteCarloSampling_double_setEpsilon", _wrap_CNMonteCarloSampling_double_setEpsilon, METH_VARARGS, (char *)"\n"
		"CNMonteCarloSampling_double_setEpsilon(CNMonteCarloSampling_double self, double eps)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > *\n"
		"eps: double\n"
		"\n"
		""},
	 { (char *)"CNMonteCarloSampling_double_setMinEpsilonRate", _wrap_CNMonteCarloSampling_double_setMinEpsilonRate, METH_VARARGS, (char *)"\n"
		"CNMonteCarloSampling_double_setMinEpsilonRate(CNMonteCarloSampling_double self, double rate)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > *\n"
		"rate: double\n"
		"\n"
		""},
	 { (char *)"CNMonteCarloSampling_double_setMaxIter", _wrap_CNMonteCarloSampling_double_setMaxIter, METH_VARARGS, (char *)"\n"
		"CNMonteCarloSampling_double_setMaxIter(CNMonteCarloSampling_double self, gum::Size max)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > *\n"
		"max: gum::Size\n"
		"\n"
		""},
	 { (char *)"CNMonteCarloSampling_double_setMaxTime", _wrap_CNMonteCarloSampling_double_setMaxTime, METH_VARARGS, (char *)"\n"
		"CNMonteCarloSampling_double_setMaxTime(CNMonteCarloSampling_double self, double timeout)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > *\n"
		"timeout: double\n"
		"\n"
		""},
	 { (char *)"CNMonteCarloSampling_double_setPeriodSize", _wrap_CNMonteCarloSampling_double_setPeriodSize, METH_VARARGS, (char *)"\n"
		"CNMonteCarloSampling_double_setPeriodSize(CNMonteCarloSampling_double self, gum::Size p)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > *\n"
		"p: gum::Size\n"
		"\n"
		""},
	 { (char *)"CNMonteCarloSampling_double_setBurnIn", _wrap_CNMonteCarloSampling_double_setBurnIn, METH_VARARGS, (char *)"\n"
		"CNMonteCarloSampling_double_setBurnIn(CNMonteCarloSampling_double self, gum::Size b)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > *\n"
		"b: gum::Size\n"
		"\n"
		""},
	 { (char *)"CNMonteCarloSampling_double_verbosity", _wrap_CNMonteCarloSampling_double_verbosity, METH_VARARGS, (char *)"\n"
		"CNMonteCarloSampling_double_verbosity(CNMonteCarloSampling_double self) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > const *\n"
		"\n"
		""},
	 { (char *)"CNMonteCarloSampling_double_epsilon", _wrap_CNMonteCarloSampling_double_epsilon, METH_VARARGS, (char *)"\n"
		"CNMonteCarloSampling_double_epsilon(CNMonteCarloSampling_double self) -> double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > const *\n"
		"\n"
		""},
	 { (char *)"CNMonteCarloSampling_double_minEpsilonRate", _wrap_CNMonteCarloSampling_double_minEpsilonRate, METH_VARARGS, (char *)"\n"
		"CNMonteCarloSampling_double_minEpsilonRate(CNMonteCarloSampling_double self) -> double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > const *\n"
		"\n"
		""},
	 { (char *)"CNMonteCarloSampling_double_maxIter", _wrap_CNMonteCarloSampling_double_maxIter, METH_VARARGS, (char *)"\n"
		"CNMonteCarloSampling_double_maxIter(CNMonteCarloSampling_double self) -> gum::Size\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > const *\n"
		"\n"
		""},
	 { (char *)"CNMonteCarloSampling_double_maxTime", _wrap_CNMonteCarloSampling_double_maxTime, METH_VARARGS, (char *)"\n"
		"CNMonteCarloSampling_double_maxTime(CNMonteCarloSampling_double self) -> double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > const *\n"
		"\n"
		""},
	 { (char *)"CNMonteCarloSampling_double_periodSize", _wrap_CNMonteCarloSampling_double_periodSize, METH_VARARGS, (char *)"\n"
		"CNMonteCarloSampling_double_periodSize(CNMonteCarloSampling_double self) -> gum::Size\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > const *\n"
		"\n"
		""},
	 { (char *)"CNMonteCarloSampling_double_burnIn", _wrap_CNMonteCarloSampling_double_burnIn, METH_VARARGS, (char *)"\n"
		"CNMonteCarloSampling_double_burnIn(CNMonteCarloSampling_double self) -> gum::Size\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > const *\n"
		"\n"
		""},
	 { (char *)"CNMonteCarloSampling_double_nbrIterations", _wrap_CNMonteCarloSampling_double_nbrIterations, METH_VARARGS, (char *)"\n"
		"CNMonteCarloSampling_double_nbrIterations(CNMonteCarloSampling_double self) -> gum::Size\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > const *\n"
		"\n"
		""},
	 { (char *)"CNMonteCarloSampling_double_currentTime", _wrap_CNMonteCarloSampling_double_currentTime, METH_VARARGS, (char *)"\n"
		"CNMonteCarloSampling_double_currentTime(CNMonteCarloSampling_double self) -> double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > const *\n"
		"\n"
		""},
	 { (char *)"CNMonteCarloSampling_double_messageApproximationScheme", _wrap_CNMonteCarloSampling_double_messageApproximationScheme, METH_VARARGS, (char *)"\n"
		"CNMonteCarloSampling_double_messageApproximationScheme(CNMonteCarloSampling_double self) -> std::string\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > const *\n"
		"\n"
		""},
	 { (char *)"CNMonteCarloSampling_double_history", _wrap_CNMonteCarloSampling_double_history, METH_VARARGS, (char *)"\n"
		"CNMonteCarloSampling_double_history(CNMonteCarloSampling_double self) -> Vector_double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > const *\n"
		"\n"
		""},
	 { (char *)"CNMonteCarloSampling_double_setRepetitiveInd", _wrap_CNMonteCarloSampling_double_setRepetitiveInd, METH_VARARGS, (char *)"\n"
		"CNMonteCarloSampling_double_setRepetitiveInd(CNMonteCarloSampling_double self, bool const flag)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > *\n"
		"flag: bool const\n"
		"\n"
		""},
	 { (char *)"CNMonteCarloSampling_double_marginalMax", _wrap_CNMonteCarloSampling_double_marginalMax, METH_VARARGS, (char *)"\n"
		"marginalMax(gum::NodeId const id) -> Vector_double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id: gum::NodeId const\n"
		"\n"
		"CNMonteCarloSampling_double_marginalMax(CNMonteCarloSampling_double self, std::string const name) -> Vector_double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > const *\n"
		"name: std::string const\n"
		"\n"
		""},
	 { (char *)"CNMonteCarloSampling_double_marginalMin", _wrap_CNMonteCarloSampling_double_marginalMin, METH_VARARGS, (char *)"\n"
		"marginalMin(gum::NodeId const id) -> Vector_double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id: gum::NodeId const\n"
		"\n"
		"CNMonteCarloSampling_double_marginalMin(CNMonteCarloSampling_double self, std::string const name) -> Vector_double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > const *\n"
		"name: std::string const\n"
		"\n"
		""},
	 { (char *)"CNMonteCarloSampling_double_insertModalsFile", _wrap_CNMonteCarloSampling_double_insertModalsFile, METH_VARARGS, (char *)"\n"
		"CNMonteCarloSampling_double_insertModalsFile(CNMonteCarloSampling_double self, std::string const & path)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > *\n"
		"path: std::string const &\n"
		"\n"
		""},
	 { (char *)"CNMonteCarloSampling_double_dynamicExpMax", _wrap_CNMonteCarloSampling_double_dynamicExpMax, METH_VARARGS, (char *)"\n"
		"CNMonteCarloSampling_double_dynamicExpMax(CNMonteCarloSampling_double self, std::string const & varName) -> Vector_double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > const *\n"
		"varName: std::string const &\n"
		"\n"
		""},
	 { (char *)"CNMonteCarloSampling_double_dynamicExpMin", _wrap_CNMonteCarloSampling_double_dynamicExpMin, METH_VARARGS, (char *)"\n"
		"CNMonteCarloSampling_double_dynamicExpMin(CNMonteCarloSampling_double self, std::string const & varName) -> Vector_double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > const *\n"
		"varName: std::string const &\n"
		"\n"
		""},
	 { (char *)"CNMonteCarloSampling_double_swigregister", CNMonteCarloSampling_double_swigregister, METH_VARARGS, NULL},
	 { (char *)"CNLoopyPropagation_double_makeInference", _wrap_CNLoopyPropagation_double_makeInference, METH_VARARGS, (char *)"\n"
		"CNLoopyPropagation_double_makeInference(CNLoopyPropagation_double self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::credal::CNLoopyPropagation< double > *\n"
		"\n"
		""},
	 { (char *)"CNLoopyPropagation_double_inferenceType", _wrap_CNLoopyPropagation_double_inferenceType, METH_VARARGS, (char *)"\n"
		"inferenceType(gum::credal::CNLoopyPropagation< double >::InferenceType inft)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"inft: enum gum::credal::CNLoopyPropagation< double >::InferenceType\n"
		"\n"
		"CNLoopyPropagation_double_inferenceType(CNLoopyPropagation_double self) -> gum::credal::CNLoopyPropagation< double >::InferenceType\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::credal::CNLoopyPropagation< double > *\n"
		"\n"
		""},
	 { (char *)"CNLoopyPropagation_double_eraseAllEvidence", _wrap_CNLoopyPropagation_double_eraseAllEvidence, METH_VARARGS, (char *)"\n"
		"CNLoopyPropagation_double_eraseAllEvidence(CNLoopyPropagation_double self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::credal::CNLoopyPropagation< double > *\n"
		"\n"
		""},
	 { (char *)"CNLoopyPropagation_double_saveInference", _wrap_CNLoopyPropagation_double_saveInference, METH_VARARGS, (char *)"\n"
		"CNLoopyPropagation_double_saveInference(CNLoopyPropagation_double self, std::string const & path)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::credal::CNLoopyPropagation< double > *\n"
		"path: std::string const &\n"
		"\n"
		""},
	 { (char *)"new_CNLoopyPropagation_double", _wrap_new_CNLoopyPropagation_double, METH_VARARGS, (char *)"\n"
		"new_CNLoopyPropagation_double(CredalNet_double cnet) -> CNLoopyPropagation_double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"cnet: gum::credal::CredalNet< double > const &\n"
		"\n"
		""},
	 { (char *)"delete_CNLoopyPropagation_double", _wrap_delete_CNLoopyPropagation_double, METH_VARARGS, (char *)"\n"
		"delete_CNLoopyPropagation_double(CNLoopyPropagation_double self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::credal::CNLoopyPropagation< double > *\n"
		"\n"
		""},
	 { (char *)"CNLoopyPropagation_double_insertEvidenceFile", _wrap_CNLoopyPropagation_double_insertEvidenceFile, METH_VARARGS, (char *)"\n"
		"CNLoopyPropagation_double_insertEvidenceFile(CNLoopyPropagation_double self, std::string const & path)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::credal::CNLoopyPropagation< double > *\n"
		"path: std::string const &\n"
		"\n"
		""},
	 { (char *)"CNLoopyPropagation_double_setVerbosity", _wrap_CNLoopyPropagation_double_setVerbosity, METH_VARARGS, (char *)"\n"
		"CNLoopyPropagation_double_setVerbosity(CNLoopyPropagation_double self, bool v)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::credal::CNLoopyPropagation< double > *\n"
		"v: bool\n"
		"\n"
		""},
	 { (char *)"CNLoopyPropagation_double_setEpsilon", _wrap_CNLoopyPropagation_double_setEpsilon, METH_VARARGS, (char *)"\n"
		"CNLoopyPropagation_double_setEpsilon(CNLoopyPropagation_double self, double eps)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::credal::CNLoopyPropagation< double > *\n"
		"eps: double\n"
		"\n"
		""},
	 { (char *)"CNLoopyPropagation_double_setMinEpsilonRate", _wrap_CNLoopyPropagation_double_setMinEpsilonRate, METH_VARARGS, (char *)"\n"
		"CNLoopyPropagation_double_setMinEpsilonRate(CNLoopyPropagation_double self, double rate)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::credal::CNLoopyPropagation< double > *\n"
		"rate: double\n"
		"\n"
		""},
	 { (char *)"CNLoopyPropagation_double_setMaxIter", _wrap_CNLoopyPropagation_double_setMaxIter, METH_VARARGS, (char *)"\n"
		"CNLoopyPropagation_double_setMaxIter(CNLoopyPropagation_double self, gum::Size max)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::credal::CNLoopyPropagation< double > *\n"
		"max: gum::Size\n"
		"\n"
		""},
	 { (char *)"CNLoopyPropagation_double_setMaxTime", _wrap_CNLoopyPropagation_double_setMaxTime, METH_VARARGS, (char *)"\n"
		"CNLoopyPropagation_double_setMaxTime(CNLoopyPropagation_double self, double timeout)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::credal::CNLoopyPropagation< double > *\n"
		"timeout: double\n"
		"\n"
		""},
	 { (char *)"CNLoopyPropagation_double_setPeriodSize", _wrap_CNLoopyPropagation_double_setPeriodSize, METH_VARARGS, (char *)"\n"
		"CNLoopyPropagation_double_setPeriodSize(CNLoopyPropagation_double self, gum::Size p)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::credal::CNLoopyPropagation< double > *\n"
		"p: gum::Size\n"
		"\n"
		""},
	 { (char *)"CNLoopyPropagation_double_setBurnIn", _wrap_CNLoopyPropagation_double_setBurnIn, METH_VARARGS, (char *)"\n"
		"CNLoopyPropagation_double_setBurnIn(CNLoopyPropagation_double self, gum::Size b)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::credal::CNLoopyPropagation< double > *\n"
		"b: gum::Size\n"
		"\n"
		""},
	 { (char *)"CNLoopyPropagation_double_verbosity", _wrap_CNLoopyPropagation_double_verbosity, METH_VARARGS, (char *)"\n"
		"CNLoopyPropagation_double_verbosity(CNLoopyPropagation_double self) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::credal::CNLoopyPropagation< double > const *\n"
		"\n"
		""},
	 { (char *)"CNLoopyPropagation_double_epsilon", _wrap_CNLoopyPropagation_double_epsilon, METH_VARARGS, (char *)"\n"
		"CNLoopyPropagation_double_epsilon(CNLoopyPropagation_double self) -> double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::credal::CNLoopyPropagation< double > const *\n"
		"\n"
		""},
	 { (char *)"CNLoopyPropagation_double_minEpsilonRate", _wrap_CNLoopyPropagation_double_minEpsilonRate, METH_VARARGS, (char *)"\n"
		"CNLoopyPropagation_double_minEpsilonRate(CNLoopyPropagation_double self) -> double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::credal::CNLoopyPropagation< double > const *\n"
		"\n"
		""},
	 { (char *)"CNLoopyPropagation_double_maxIter", _wrap_CNLoopyPropagation_double_maxIter, METH_VARARGS, (char *)"\n"
		"CNLoopyPropagation_double_maxIter(CNLoopyPropagation_double self) -> gum::Size\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::credal::CNLoopyPropagation< double > const *\n"
		"\n"
		""},
	 { (char *)"CNLoopyPropagation_double_maxTime", _wrap_CNLoopyPropagation_double_maxTime, METH_VARARGS, (char *)"\n"
		"CNLoopyPropagation_double_maxTime(CNLoopyPropagation_double self) -> double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::credal::CNLoopyPropagation< double > const *\n"
		"\n"
		""},
	 { (char *)"CNLoopyPropagation_double_periodSize", _wrap_CNLoopyPropagation_double_periodSize, METH_VARARGS, (char *)"\n"
		"CNLoopyPropagation_double_periodSize(CNLoopyPropagation_double self) -> gum::Size\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::credal::CNLoopyPropagation< double > const *\n"
		"\n"
		""},
	 { (char *)"CNLoopyPropagation_double_burnIn", _wrap_CNLoopyPropagation_double_burnIn, METH_VARARGS, (char *)"\n"
		"CNLoopyPropagation_double_burnIn(CNLoopyPropagation_double self) -> gum::Size\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::credal::CNLoopyPropagation< double > const *\n"
		"\n"
		""},
	 { (char *)"CNLoopyPropagation_double_nbrIterations", _wrap_CNLoopyPropagation_double_nbrIterations, METH_VARARGS, (char *)"\n"
		"CNLoopyPropagation_double_nbrIterations(CNLoopyPropagation_double self) -> gum::Size\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::credal::CNLoopyPropagation< double > const *\n"
		"\n"
		""},
	 { (char *)"CNLoopyPropagation_double_currentTime", _wrap_CNLoopyPropagation_double_currentTime, METH_VARARGS, (char *)"\n"
		"CNLoopyPropagation_double_currentTime(CNLoopyPropagation_double self) -> double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::credal::CNLoopyPropagation< double > const *\n"
		"\n"
		""},
	 { (char *)"CNLoopyPropagation_double_messageApproximationScheme", _wrap_CNLoopyPropagation_double_messageApproximationScheme, METH_VARARGS, (char *)"\n"
		"CNLoopyPropagation_double_messageApproximationScheme(CNLoopyPropagation_double self) -> std::string\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::credal::CNLoopyPropagation< double > const *\n"
		"\n"
		""},
	 { (char *)"CNLoopyPropagation_double_history", _wrap_CNLoopyPropagation_double_history, METH_VARARGS, (char *)"\n"
		"CNLoopyPropagation_double_history(CNLoopyPropagation_double self) -> Vector_double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::credal::CNLoopyPropagation< double > const *\n"
		"\n"
		""},
	 { (char *)"CNLoopyPropagation_double_setRepetitiveInd", _wrap_CNLoopyPropagation_double_setRepetitiveInd, METH_VARARGS, (char *)"\n"
		"CNLoopyPropagation_double_setRepetitiveInd(CNLoopyPropagation_double self, bool const flag)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::credal::CNLoopyPropagation< double > *\n"
		"flag: bool const\n"
		"\n"
		""},
	 { (char *)"CNLoopyPropagation_double_marginalMax", _wrap_CNLoopyPropagation_double_marginalMax, METH_VARARGS, (char *)"\n"
		"marginalMax(gum::NodeId const id) -> Vector_double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id: gum::NodeId const\n"
		"\n"
		"CNLoopyPropagation_double_marginalMax(CNLoopyPropagation_double self, std::string const name) -> Vector_double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::credal::CNLoopyPropagation< double > const *\n"
		"name: std::string const\n"
		"\n"
		""},
	 { (char *)"CNLoopyPropagation_double_marginalMin", _wrap_CNLoopyPropagation_double_marginalMin, METH_VARARGS, (char *)"\n"
		"marginalMin(gum::NodeId const id) -> Vector_double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id: gum::NodeId const\n"
		"\n"
		"CNLoopyPropagation_double_marginalMin(CNLoopyPropagation_double self, std::string const name) -> Vector_double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::credal::CNLoopyPropagation< double > const *\n"
		"name: std::string const\n"
		"\n"
		""},
	 { (char *)"CNLoopyPropagation_double_insertModalsFile", _wrap_CNLoopyPropagation_double_insertModalsFile, METH_VARARGS, (char *)"\n"
		"CNLoopyPropagation_double_insertModalsFile(CNLoopyPropagation_double self, std::string const & path)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::credal::CNLoopyPropagation< double > *\n"
		"path: std::string const &\n"
		"\n"
		""},
	 { (char *)"CNLoopyPropagation_double_dynamicExpMax", _wrap_CNLoopyPropagation_double_dynamicExpMax, METH_VARARGS, (char *)"\n"
		"CNLoopyPropagation_double_dynamicExpMax(CNLoopyPropagation_double self, std::string const & varName) -> Vector_double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::credal::CNLoopyPropagation< double > const *\n"
		"varName: std::string const &\n"
		"\n"
		""},
	 { (char *)"CNLoopyPropagation_double_dynamicExpMin", _wrap_CNLoopyPropagation_double_dynamicExpMin, METH_VARARGS, (char *)"\n"
		"CNLoopyPropagation_double_dynamicExpMin(CNLoopyPropagation_double self, std::string const & varName) -> Vector_double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::credal::CNLoopyPropagation< double > const *\n"
		"varName: std::string const &\n"
		"\n"
		""},
	 { (char *)"CNLoopyPropagation_double_swigregister", CNLoopyPropagation_double_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_InfluenceDiagram_double", _wrap_delete_InfluenceDiagram_double, METH_VARARGS, (char *)"\n"
		"delete_InfluenceDiagram_double(InfluenceDiagram_double self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::InfluenceDiagram< double > *\n"
		"\n"
		""},
	 { (char *)"new_InfluenceDiagram_double", _wrap_new_InfluenceDiagram_double, METH_VARARGS, (char *)"\n"
		"InfluenceDiagram_double()\n"
		"new_InfluenceDiagram_double(InfluenceDiagram_double source) -> InfluenceDiagram_double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"source: gum::InfluenceDiagram< double > const &\n"
		"\n"
		""},
	 { (char *)"InfluenceDiagram_double_toDot", _wrap_InfluenceDiagram_double_toDot, METH_VARARGS, (char *)"\n"
		"InfluenceDiagram_double_toDot(InfluenceDiagram_double self) -> std::string\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::InfluenceDiagram< double > const *\n"
		"\n"
		""},
	 { (char *)"InfluenceDiagram_double___str__", _wrap_InfluenceDiagram_double___str__, METH_VARARGS, (char *)"\n"
		"InfluenceDiagram_double___str__(InfluenceDiagram_double self) -> std::string\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::InfluenceDiagram< double > const *\n"
		"\n"
		""},
	 { (char *)"InfluenceDiagram_double_cpt", _wrap_InfluenceDiagram_double_cpt, METH_VARARGS, (char *)"\n"
		"InfluenceDiagram_double_cpt(InfluenceDiagram_double self, gum::NodeId varId) -> Potential_double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::InfluenceDiagram< double > const *\n"
		"varId: gum::NodeId\n"
		"\n"
		""},
	 { (char *)"InfluenceDiagram_double_utility", _wrap_InfluenceDiagram_double_utility, METH_VARARGS, (char *)"\n"
		"InfluenceDiagram_double_utility(InfluenceDiagram_double self, gum::NodeId varId) -> UtilityTable_double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::InfluenceDiagram< double > const *\n"
		"varId: gum::NodeId\n"
		"\n"
		""},
	 { (char *)"InfluenceDiagram_double_isUtilityNode", _wrap_InfluenceDiagram_double_isUtilityNode, METH_VARARGS, (char *)"\n"
		"InfluenceDiagram_double_isUtilityNode(InfluenceDiagram_double self, gum::NodeId varId) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::InfluenceDiagram< double > const *\n"
		"varId: gum::NodeId\n"
		"\n"
		""},
	 { (char *)"InfluenceDiagram_double_isDecisionNode", _wrap_InfluenceDiagram_double_isDecisionNode, METH_VARARGS, (char *)"\n"
		"InfluenceDiagram_double_isDecisionNode(InfluenceDiagram_double self, gum::NodeId varId) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::InfluenceDiagram< double > const *\n"
		"varId: gum::NodeId\n"
		"\n"
		""},
	 { (char *)"InfluenceDiagram_double_isChanceNode", _wrap_InfluenceDiagram_double_isChanceNode, METH_VARARGS, (char *)"\n"
		"InfluenceDiagram_double_isChanceNode(InfluenceDiagram_double self, gum::NodeId varId) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::InfluenceDiagram< double > const *\n"
		"varId: gum::NodeId\n"
		"\n"
		""},
	 { (char *)"InfluenceDiagram_double_utilityNodeSize", _wrap_InfluenceDiagram_double_utilityNodeSize, METH_VARARGS, (char *)"\n"
		"InfluenceDiagram_double_utilityNodeSize(InfluenceDiagram_double self) -> gum::Size\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::InfluenceDiagram< double > const *\n"
		"\n"
		""},
	 { (char *)"InfluenceDiagram_double_chanceNodeSize", _wrap_InfluenceDiagram_double_chanceNodeSize, METH_VARARGS, (char *)"\n"
		"InfluenceDiagram_double_chanceNodeSize(InfluenceDiagram_double self) -> gum::Size\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::InfluenceDiagram< double > const *\n"
		"\n"
		""},
	 { (char *)"InfluenceDiagram_double_decisionNodeSize", _wrap_InfluenceDiagram_double_decisionNodeSize, METH_VARARGS, (char *)"\n"
		"InfluenceDiagram_double_decisionNodeSize(InfluenceDiagram_double self) -> gum::Size\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::InfluenceDiagram< double > const *\n"
		"\n"
		""},
	 { (char *)"InfluenceDiagram_double_variable", _wrap_InfluenceDiagram_double_variable, METH_VARARGS, (char *)"\n"
		"InfluenceDiagram_double_variable(InfluenceDiagram_double self, gum::NodeId id) -> DiscreteVariable\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::InfluenceDiagram< double > const *\n"
		"id: gum::NodeId\n"
		"\n"
		""},
	 { (char *)"InfluenceDiagram_double_nodeId", _wrap_InfluenceDiagram_double_nodeId, METH_VARARGS, (char *)"\n"
		"InfluenceDiagram_double_nodeId(InfluenceDiagram_double self, DiscreteVariable var) -> gum::NodeId\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::InfluenceDiagram< double > const *\n"
		"var: gum::DiscreteVariable const &\n"
		"\n"
		""},
	 { (char *)"InfluenceDiagram_double_idFromName", _wrap_InfluenceDiagram_double_idFromName, METH_VARARGS, (char *)"\n"
		"InfluenceDiagram_double_idFromName(InfluenceDiagram_double self, std::string const & name) -> gum::NodeId\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::InfluenceDiagram< double > const *\n"
		"name: std::string const &\n"
		"\n"
		""},
	 { (char *)"InfluenceDiagram_double_variableFromName", _wrap_InfluenceDiagram_double_variableFromName, METH_VARARGS, (char *)"\n"
		"InfluenceDiagram_double_variableFromName(InfluenceDiagram_double self, std::string const & name) -> DiscreteVariable\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::InfluenceDiagram< double > const *\n"
		"name: std::string const &\n"
		"\n"
		""},
	 { (char *)"InfluenceDiagram_double_add", _wrap_InfluenceDiagram_double_add, METH_VARARGS, (char *)"\n"
		"add(DiscreteVariable variable, gum::NodeId id=0) -> gum::NodeId\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"variable: gum::DiscreteVariable const &\n"
		"id: gum::NodeId\n"
		"\n"
		"InfluenceDiagram_double_add(InfluenceDiagram_double self, DiscreteVariable variable) -> gum::NodeId\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::InfluenceDiagram< double > *\n"
		"variable: gum::DiscreteVariable const &\n"
		"\n"
		""},
	 { (char *)"InfluenceDiagram_double_addDecisionNode", _wrap_InfluenceDiagram_double_addDecisionNode, METH_VARARGS, (char *)"\n"
		"addDecisionNode(DiscreteVariable variable, gum::NodeId id=0) -> gum::NodeId\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"variable: gum::DiscreteVariable const &\n"
		"id: gum::NodeId\n"
		"\n"
		"InfluenceDiagram_double_addDecisionNode(InfluenceDiagram_double self, DiscreteVariable variable) -> gum::NodeId\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::InfluenceDiagram< double > *\n"
		"variable: gum::DiscreteVariable const &\n"
		"\n"
		""},
	 { (char *)"InfluenceDiagram_double_addChanceNode", _wrap_InfluenceDiagram_double_addChanceNode, METH_VARARGS, (char *)"\n"
		"addChanceNode(DiscreteVariable variable, gum::NodeId id=0) -> gum::NodeId\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"variable: gum::DiscreteVariable const &\n"
		"id: gum::NodeId\n"
		"\n"
		"addChanceNode(DiscreteVariable variable) -> gum::NodeId\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"variable: gum::DiscreteVariable const &\n"
		"\n"
		"addChanceNode(DiscreteVariable variable, gum::MultiDimImplementation< double > * aContent, gum::NodeId id=0) -> gum::NodeId\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"variable: gum::DiscreteVariable const &\n"
		"aContent: gum::MultiDimImplementation< double > *\n"
		"id: gum::NodeId\n"
		"\n"
		"InfluenceDiagram_double_addChanceNode(InfluenceDiagram_double self, DiscreteVariable variable, gum::MultiDimImplementation< double > * aContent) -> gum::NodeId\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::InfluenceDiagram< double > *\n"
		"variable: gum::DiscreteVariable const &\n"
		"aContent: gum::MultiDimImplementation< double > *\n"
		"\n"
		""},
	 { (char *)"InfluenceDiagram_double_addUtilityNode", _wrap_InfluenceDiagram_double_addUtilityNode, METH_VARARGS, (char *)"\n"
		"addUtilityNode(DiscreteVariable variable, gum::NodeId id=0) -> gum::NodeId\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"variable: gum::DiscreteVariable const &\n"
		"id: gum::NodeId\n"
		"\n"
		"addUtilityNode(DiscreteVariable variable) -> gum::NodeId\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"variable: gum::DiscreteVariable const &\n"
		"\n"
		"addUtilityNode(DiscreteVariable variable, gum::MultiDimImplementation< double > * aContent, gum::NodeId id=0) -> gum::NodeId\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"variable: gum::DiscreteVariable const &\n"
		"aContent: gum::MultiDimImplementation< double > *\n"
		"id: gum::NodeId\n"
		"\n"
		"InfluenceDiagram_double_addUtilityNode(InfluenceDiagram_double self, DiscreteVariable variable, gum::MultiDimImplementation< double > * aContent) -> gum::NodeId\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::InfluenceDiagram< double > *\n"
		"variable: gum::DiscreteVariable const &\n"
		"aContent: gum::MultiDimImplementation< double > *\n"
		"\n"
		""},
	 { (char *)"InfluenceDiagram_double_erase", _wrap_InfluenceDiagram_double_erase, METH_VARARGS, (char *)"\n"
		"erase(gum::NodeId id)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id: gum::NodeId\n"
		"\n"
		"InfluenceDiagram_double_erase(InfluenceDiagram_double self, DiscreteVariable var)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::InfluenceDiagram< double > *\n"
		"var: gum::DiscreteVariable const &\n"
		"\n"
		""},
	 { (char *)"InfluenceDiagram_double_changeVariableName", _wrap_InfluenceDiagram_double_changeVariableName, METH_VARARGS, (char *)"\n"
		"InfluenceDiagram_double_changeVariableName(InfluenceDiagram_double self, gum::NodeId id, std::string const & new_name)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::InfluenceDiagram< double > *\n"
		"id: gum::NodeId\n"
		"new_name: std::string const &\n"
		"\n"
		""},
	 { (char *)"InfluenceDiagram_double_addArc", _wrap_InfluenceDiagram_double_addArc, METH_VARARGS, (char *)"\n"
		"InfluenceDiagram_double_addArc(InfluenceDiagram_double self, gum::NodeId tail, gum::NodeId head)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::InfluenceDiagram< double > *\n"
		"tail: gum::NodeId\n"
		"head: gum::NodeId\n"
		"\n"
		""},
	 { (char *)"InfluenceDiagram_double_eraseArc", _wrap_InfluenceDiagram_double_eraseArc, METH_VARARGS, (char *)"\n"
		"eraseArc(Arc arc)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"arc: gum::Arc const &\n"
		"\n"
		"InfluenceDiagram_double_eraseArc(InfluenceDiagram_double self, gum::NodeId tail, gum::NodeId head)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::InfluenceDiagram< double > *\n"
		"tail: gum::NodeId\n"
		"head: gum::NodeId\n"
		"\n"
		""},
	 { (char *)"InfluenceDiagram_double_decisionOrderExists", _wrap_InfluenceDiagram_double_decisionOrderExists, METH_VARARGS, (char *)"\n"
		"InfluenceDiagram_double_decisionOrderExists(InfluenceDiagram_double self) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::InfluenceDiagram< double > const *\n"
		"\n"
		""},
	 { (char *)"InfluenceDiagram_double_getDecisionGraph", _wrap_InfluenceDiagram_double_getDecisionGraph, METH_VARARGS, (char *)"\n"
		"InfluenceDiagram_double_getDecisionGraph(InfluenceDiagram_double self) -> DAG\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::InfluenceDiagram< double > const *\n"
		"\n"
		""},
	 { (char *)"InfluenceDiagram_double_getDecisionOrder", _wrap_InfluenceDiagram_double_getDecisionOrder, METH_VARARGS, (char *)"\n"
		"InfluenceDiagram_double_getDecisionOrder(InfluenceDiagram_double self) -> std::vector< gum::NodeId,std::allocator< gum::NodeId > > *\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::InfluenceDiagram< double > const *\n"
		"\n"
		""},
	 { (char *)"InfluenceDiagram_double_existsPathBetween", _wrap_InfluenceDiagram_double_existsPathBetween, METH_VARARGS, (char *)"\n"
		"InfluenceDiagram_double_existsPathBetween(InfluenceDiagram_double self, gum::NodeId src, gum::NodeId dest) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::InfluenceDiagram< double > const *\n"
		"src: gum::NodeId\n"
		"dest: gum::NodeId\n"
		"\n"
		""},
	 { (char *)"InfluenceDiagram_double_names", _wrap_InfluenceDiagram_double_names, METH_VARARGS, (char *)"\n"
		"InfluenceDiagram_double_names(InfluenceDiagram_double self) -> PyObject *\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::InfluenceDiagram< double > const *\n"
		"\n"
		""},
	 { (char *)"InfluenceDiagram_double_ids", _wrap_InfluenceDiagram_double_ids, METH_VARARGS, (char *)"\n"
		"InfluenceDiagram_double_ids(InfluenceDiagram_double self) -> PyObject *\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::InfluenceDiagram< double > *\n"
		"\n"
		""},
	 { (char *)"InfluenceDiagram_double_arcs", _wrap_InfluenceDiagram_double_arcs, METH_VARARGS, (char *)"\n"
		"InfluenceDiagram_double_arcs(InfluenceDiagram_double self) -> PyObject *\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::InfluenceDiagram< double > *\n"
		"\n"
		""},
	 { (char *)"InfluenceDiagram_double_parents", _wrap_InfluenceDiagram_double_parents, METH_VARARGS, (char *)"\n"
		"InfluenceDiagram_double_parents(InfluenceDiagram_double self, gum::NodeId const id) -> PyObject *\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::InfluenceDiagram< double > const *\n"
		"id: gum::NodeId const\n"
		"\n"
		""},
	 { (char *)"InfluenceDiagram_double_children", _wrap_InfluenceDiagram_double_children, METH_VARARGS, (char *)"\n"
		"InfluenceDiagram_double_children(InfluenceDiagram_double self, gum::NodeId const id) -> PyObject *\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::InfluenceDiagram< double > const *\n"
		"id: gum::NodeId const\n"
		"\n"
		""},
	 { (char *)"InfluenceDiagram_double_loadBIFXML", _wrap_InfluenceDiagram_double_loadBIFXML, METH_VARARGS, (char *)"\n"
		"loadBIFXML(std::string name, PyObject * l) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"name: std::string\n"
		"l: PyObject *\n"
		"\n"
		"InfluenceDiagram_double_loadBIFXML(InfluenceDiagram_double self, std::string name) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::InfluenceDiagram< double > *\n"
		"name: std::string\n"
		"\n"
		""},
	 { (char *)"InfluenceDiagram_double_saveBIFXML", _wrap_InfluenceDiagram_double_saveBIFXML, METH_VARARGS, (char *)"\n"
		"InfluenceDiagram_double_saveBIFXML(InfluenceDiagram_double self, std::string name)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::InfluenceDiagram< double > *\n"
		"name: std::string\n"
		"\n"
		""},
	 { (char *)"InfluenceDiagram_double_swigregister", InfluenceDiagram_double_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_InfluenceDiagramInference_double", _wrap_new_InfluenceDiagramInference_double, METH_VARARGS, (char *)"\n"
		"new_InfluenceDiagramInference_double(InfluenceDiagram_double infDiag) -> InfluenceDiagramInference_double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"infDiag: gum::InfluenceDiagram< double > const &\n"
		"\n"
		""},
	 { (char *)"delete_InfluenceDiagramInference_double", _wrap_delete_InfluenceDiagramInference_double, METH_VARARGS, (char *)"\n"
		"delete_InfluenceDiagramInference_double(InfluenceDiagramInference_double self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::InfluenceDiagramInference< double > *\n"
		"\n"
		""},
	 { (char *)"InfluenceDiagramInference_double_makeInference", _wrap_InfluenceDiagramInference_double_makeInference, METH_VARARGS, (char *)"\n"
		"InfluenceDiagramInference_double_makeInference(InfluenceDiagramInference_double self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::InfluenceDiagramInference< double > *\n"
		"\n"
		""},
	 { (char *)"InfluenceDiagramInference_double_getMEU", _wrap_InfluenceDiagramInference_double_getMEU, METH_VARARGS, (char *)"\n"
		"InfluenceDiagramInference_double_getMEU(InfluenceDiagramInference_double self) -> double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::InfluenceDiagramInference< double > *\n"
		"\n"
		""},
	 { (char *)"InfluenceDiagramInference_double_getBestDecisionChoice", _wrap_InfluenceDiagramInference_double_getBestDecisionChoice, METH_VARARGS, (char *)"\n"
		"InfluenceDiagramInference_double_getBestDecisionChoice(InfluenceDiagramInference_double self, gum::NodeId decisionId) -> gum::Idx\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::InfluenceDiagramInference< double > *\n"
		"decisionId: gum::NodeId\n"
		"\n"
		""},
	 { (char *)"InfluenceDiagramInference_double_displayResult", _wrap_InfluenceDiagramInference_double_displayResult, METH_VARARGS, (char *)"\n"
		"InfluenceDiagramInference_double_displayResult(InfluenceDiagramInference_double self) -> std::string\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::InfluenceDiagramInference< double > *\n"
		"\n"
		""},
	 { (char *)"InfluenceDiagramInference_double_insertEvidence", _wrap_InfluenceDiagramInference_double_insertEvidence, METH_VARARGS, (char *)"\n"
		"InfluenceDiagramInference_double_insertEvidence(InfluenceDiagramInference_double self, gum::List< gum::Potential< double > const * > const & evidenceList)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::InfluenceDiagramInference< double > *\n"
		"evidenceList: gum::List< gum::Potential< double > const * > const &\n"
		"\n"
		""},
	 { (char *)"InfluenceDiagramInference_double_eraseEvidence", _wrap_InfluenceDiagramInference_double_eraseEvidence, METH_VARARGS, (char *)"\n"
		"InfluenceDiagramInference_double_eraseEvidence(InfluenceDiagramInference_double self, Potential_double evidence)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::InfluenceDiagramInference< double > *\n"
		"evidence: gum::Potential< double > const *\n"
		"\n"
		""},
	 { (char *)"InfluenceDiagramInference_double_eraseAllEvidence", _wrap_InfluenceDiagramInference_double_eraseAllEvidence, METH_VARARGS, (char *)"\n"
		"InfluenceDiagramInference_double_eraseAllEvidence(InfluenceDiagramInference_double self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::InfluenceDiagramInference< double > *\n"
		"\n"
		""},
	 { (char *)"InfluenceDiagramInference_double_displayStrongJunctionTree", _wrap_InfluenceDiagramInference_double_displayStrongJunctionTree, METH_VARARGS, (char *)"\n"
		"InfluenceDiagramInference_double_displayStrongJunctionTree(InfluenceDiagramInference_double self, std::ostream & stream)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::InfluenceDiagramInference< double > *\n"
		"stream: std::ostream &\n"
		"\n"
		""},
	 { (char *)"InfluenceDiagramInference_double_influenceDiagram", _wrap_InfluenceDiagramInference_double_influenceDiagram, METH_VARARGS, (char *)"\n"
		"InfluenceDiagramInference_double_influenceDiagram(InfluenceDiagramInference_double self) -> InfluenceDiagram_double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::InfluenceDiagramInference< double > const *\n"
		"\n"
		""},
	 { (char *)"InfluenceDiagramInference_double_setEvidence", _wrap_InfluenceDiagramInference_double_setEvidence, METH_VARARGS, (char *)"\n"
		"InfluenceDiagramInference_double_setEvidence(InfluenceDiagramInference_double self, PyObject * evidces)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::InfluenceDiagramInference< double > *\n"
		"evidces: PyObject *\n"
		"\n"
		""},
	 { (char *)"InfluenceDiagramInference_double__setEvidence", _wrap_InfluenceDiagramInference_double__setEvidence, METH_VARARGS, (char *)"\n"
		"InfluenceDiagramInference_double__setEvidence(InfluenceDiagramInference_double self, PyObject * evidences)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::InfluenceDiagramInference< double > *\n"
		"evidences: PyObject *\n"
		"\n"
		""},
	 { (char *)"InfluenceDiagramInference_double_junctionTreeToDot", _wrap_InfluenceDiagramInference_double_junctionTreeToDot, METH_VARARGS, (char *)"\n"
		"InfluenceDiagramInference_double_junctionTreeToDot(InfluenceDiagramInference_double self) -> std::string const\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::InfluenceDiagramInference< double > *\n"
		"\n"
		""},
	 { (char *)"InfluenceDiagramInference_double_swigregister", InfluenceDiagramInference_double_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_BNLearner_double", _wrap_new_BNLearner_double, METH_VARARGS, (char *)"\n"
		"BNLearner_double(std::string const & filename)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"filename: std::string const &\n"
		"\n"
		"BNLearner_double(DatabaseVectInRAM db)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"db: gum::learning::DatabaseVectInRAM const &\n"
		"\n"
		"BNLearner_double(std::string const & filename, gum::NodeProperty< gum::Sequence< std::string > > const & modalities, bool parse_database=False)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"filename: std::string const &\n"
		"modalities: gum::NodeProperty< gum::Sequence< std::string > > const &\n"
		"parse_database: bool\n"
		"\n"
		"BNLearner_double(std::string const & filename, gum::NodeProperty< gum::Sequence< std::string > > const & modalities)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"filename: std::string const &\n"
		"modalities: gum::NodeProperty< gum::Sequence< std::string > > const &\n"
		"\n"
		"BNLearner_double(std::string const & filename, BayesNet_double src, bool parse_database=False)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"filename: std::string const &\n"
		"src: gum::BayesNet< double > const &\n"
		"parse_database: bool\n"
		"\n"
		"BNLearner_double(std::string const & filename, BayesNet_double src)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"filename: std::string const &\n"
		"src: gum::BayesNet< double > const &\n"
		"\n"
		"BNLearner_double(BNLearner_double arg2)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"arg2: gum::learning::BNLearner< double > const &\n"
		"\n"
		"new_BNLearner_double(BNLearner_double arg2) -> BNLearner_double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"arg1: gum::learning::BNLearner< double > &&\n"
		"\n"
		""},
	 { (char *)"delete_BNLearner_double", _wrap_delete_BNLearner_double, METH_VARARGS, (char *)"\n"
		"delete_BNLearner_double(BNLearner_double self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::learning::BNLearner< double > *\n"
		"\n"
		""},
	 { (char *)"BNLearner_double_learnBN", _wrap_BNLearner_double_learnBN, METH_VARARGS, (char *)"\n"
		"BNLearner_double_learnBN(BNLearner_double self) -> BayesNet_double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::learning::BNLearner< double > *\n"
		"\n"
		""},
	 { (char *)"BNLearner_double_learnParameters", _wrap_BNLearner_double_learnParameters, METH_VARARGS, (char *)"\n"
		"learnParameters(DAG dag, bool take_into_account_score=True) -> BayesNet_double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"dag: gum::DAG const &\n"
		"take_into_account_score: bool\n"
		"\n"
		"learnParameters(DAG dag) -> BayesNet_double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"dag: gum::DAG const &\n"
		"\n"
		"learnParameters(BayesNet_double bn, bool take_into_account_score=True) -> BayesNet_double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"bn: gum::BayesNet< double > const &\n"
		"take_into_account_score: bool\n"
		"\n"
		"BNLearner_double_learnParameters(BNLearner_double self, BayesNet_double bn) -> BayesNet_double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::learning::BNLearner< double > *\n"
		"bn: gum::BayesNet< double > const &\n"
		"\n"
		""},
	 { (char *)"BNLearner_double_setVerbosity", _wrap_BNLearner_double_setVerbosity, METH_VARARGS, (char *)"\n"
		"BNLearner_double_setVerbosity(BNLearner_double self, bool v)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::learning::BNLearner< double > *\n"
		"v: bool\n"
		"\n"
		""},
	 { (char *)"BNLearner_double_setEpsilon", _wrap_BNLearner_double_setEpsilon, METH_VARARGS, (char *)"\n"
		"BNLearner_double_setEpsilon(BNLearner_double self, double eps)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::learning::BNLearner< double > *\n"
		"eps: double\n"
		"\n"
		""},
	 { (char *)"BNLearner_double_setMinEpsilonRate", _wrap_BNLearner_double_setMinEpsilonRate, METH_VARARGS, (char *)"\n"
		"BNLearner_double_setMinEpsilonRate(BNLearner_double self, double rate)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::learning::BNLearner< double > *\n"
		"rate: double\n"
		"\n"
		""},
	 { (char *)"BNLearner_double_setMaxIter", _wrap_BNLearner_double_setMaxIter, METH_VARARGS, (char *)"\n"
		"BNLearner_double_setMaxIter(BNLearner_double self, gum::Size max)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::learning::BNLearner< double > *\n"
		"max: gum::Size\n"
		"\n"
		""},
	 { (char *)"BNLearner_double_setMaxTime", _wrap_BNLearner_double_setMaxTime, METH_VARARGS, NULL},
	 { (char *)"BNLearner_double_setPeriodSize", _wrap_BNLearner_double_setPeriodSize, METH_VARARGS, (char *)"\n"
		"BNLearner_double_setPeriodSize(BNLearner_double self, gum::Size p)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::learning::BNLearner< double > *\n"
		"p: gum::Size\n"
		"\n"
		""},
	 { (char *)"BNLearner_double_setBurnIn", _wrap_BNLearner_double_setBurnIn, METH_VARARGS, (char *)"\n"
		"BNLearner_double_setBurnIn(BNLearner_double self, gum::Size b)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::learning::BNLearner< double > *\n"
		"b: gum::Size\n"
		"\n"
		""},
	 { (char *)"BNLearner_double_verbosity", _wrap_BNLearner_double_verbosity, METH_VARARGS, (char *)"\n"
		"BNLearner_double_verbosity(BNLearner_double self) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::learning::BNLearner< double > const *\n"
		"\n"
		""},
	 { (char *)"BNLearner_double_epsilon", _wrap_BNLearner_double_epsilon, METH_VARARGS, (char *)"\n"
		"BNLearner_double_epsilon(BNLearner_double self) -> double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::learning::BNLearner< double > const *\n"
		"\n"
		""},
	 { (char *)"BNLearner_double_minEpsilonRate", _wrap_BNLearner_double_minEpsilonRate, METH_VARARGS, (char *)"\n"
		"BNLearner_double_minEpsilonRate(BNLearner_double self) -> double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::learning::BNLearner< double > const *\n"
		"\n"
		""},
	 { (char *)"BNLearner_double_maxIter", _wrap_BNLearner_double_maxIter, METH_VARARGS, (char *)"\n"
		"BNLearner_double_maxIter(BNLearner_double self) -> gum::Size\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::learning::BNLearner< double > const *\n"
		"\n"
		""},
	 { (char *)"BNLearner_double_maxTime", _wrap_BNLearner_double_maxTime, METH_VARARGS, NULL},
	 { (char *)"BNLearner_double_periodSize", _wrap_BNLearner_double_periodSize, METH_VARARGS, (char *)"\n"
		"BNLearner_double_periodSize(BNLearner_double self) -> gum::Size\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::learning::BNLearner< double > const *\n"
		"\n"
		""},
	 { (char *)"BNLearner_double_burnIn", _wrap_BNLearner_double_burnIn, METH_VARARGS, (char *)"\n"
		"BNLearner_double_burnIn(BNLearner_double self) -> gum::Size\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::learning::BNLearner< double > const *\n"
		"\n"
		""},
	 { (char *)"BNLearner_double_nbrIterations", _wrap_BNLearner_double_nbrIterations, METH_VARARGS, (char *)"\n"
		"BNLearner_double_nbrIterations(BNLearner_double self) -> gum::Size\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::learning::BNLearner< double > const *\n"
		"\n"
		""},
	 { (char *)"BNLearner_double_currentTime", _wrap_BNLearner_double_currentTime, METH_VARARGS, NULL},
	 { (char *)"BNLearner_double_messageApproximationScheme", _wrap_BNLearner_double_messageApproximationScheme, METH_VARARGS, (char *)"\n"
		"BNLearner_double_messageApproximationScheme(BNLearner_double self) -> std::string\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::learning::BNLearner< double > const *\n"
		"\n"
		""},
	 { (char *)"BNLearner_double_history", _wrap_BNLearner_double_history, METH_VARARGS, (char *)"\n"
		"BNLearner_double_history(BNLearner_double self) -> Vector_double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::learning::BNLearner< double > const *\n"
		"\n"
		""},
	 { (char *)"BNLearner_double_learnDAG", _wrap_BNLearner_double_learnDAG, METH_VARARGS, (char *)"\n"
		"BNLearner_double_learnDAG(BNLearner_double self) -> DAG\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::learning::BNLearner< double > *\n"
		"\n"
		""},
	 { (char *)"BNLearner_double_names", _wrap_BNLearner_double_names, METH_VARARGS, (char *)"\n"
		"BNLearner_double_names(BNLearner_double self) -> Vector_string\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::learning::BNLearner< double > const *\n"
		"\n"
		""},
	 { (char *)"BNLearner_double_modalities", _wrap_BNLearner_double_modalities, METH_VARARGS, (char *)"\n"
		"BNLearner_double_modalities(BNLearner_double self) -> std::vector< gum::Size,std::allocator< gum::Size > > const &\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::learning::BNLearner< double > *\n"
		"\n"
		""},
	 { (char *)"BNLearner_double_idFromName", _wrap_BNLearner_double_idFromName, METH_VARARGS, (char *)"\n"
		"BNLearner_double_idFromName(BNLearner_double self, std::string const & var_name) -> gum::NodeId\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::learning::BNLearner< double > const *\n"
		"var_name: std::string const &\n"
		"\n"
		""},
	 { (char *)"BNLearner_double_nameFromId", _wrap_BNLearner_double_nameFromId, METH_VARARGS, (char *)"\n"
		"BNLearner_double_nameFromId(BNLearner_double self, gum::NodeId id) -> std::string const &\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::learning::BNLearner< double > const *\n"
		"id: gum::NodeId\n"
		"\n"
		""},
	 { (char *)"BNLearner_double_useScoreAIC", _wrap_BNLearner_double_useScoreAIC, METH_VARARGS, (char *)"\n"
		"BNLearner_double_useScoreAIC(BNLearner_double self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::learning::BNLearner< double > *\n"
		"\n"
		""},
	 { (char *)"BNLearner_double_useScoreBD", _wrap_BNLearner_double_useScoreBD, METH_VARARGS, (char *)"\n"
		"BNLearner_double_useScoreBD(BNLearner_double self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::learning::BNLearner< double > *\n"
		"\n"
		""},
	 { (char *)"BNLearner_double_useScoreBDeu", _wrap_BNLearner_double_useScoreBDeu, METH_VARARGS, (char *)"\n"
		"BNLearner_double_useScoreBDeu(BNLearner_double self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::learning::BNLearner< double > *\n"
		"\n"
		""},
	 { (char *)"BNLearner_double_useScoreBIC", _wrap_BNLearner_double_useScoreBIC, METH_VARARGS, (char *)"\n"
		"BNLearner_double_useScoreBIC(BNLearner_double self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::learning::BNLearner< double > *\n"
		"\n"
		""},
	 { (char *)"BNLearner_double_useScoreK2", _wrap_BNLearner_double_useScoreK2, METH_VARARGS, (char *)"\n"
		"BNLearner_double_useScoreK2(BNLearner_double self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::learning::BNLearner< double > *\n"
		"\n"
		""},
	 { (char *)"BNLearner_double_useScoreLog2Likelihood", _wrap_BNLearner_double_useScoreLog2Likelihood, METH_VARARGS, (char *)"\n"
		"BNLearner_double_useScoreLog2Likelihood(BNLearner_double self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::learning::BNLearner< double > *\n"
		"\n"
		""},
	 { (char *)"BNLearner_double_setAprioriWeight", _wrap_BNLearner_double_setAprioriWeight, METH_VARARGS, (char *)"\n"
		"BNLearner_double_setAprioriWeight(BNLearner_double self, double weight)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::learning::BNLearner< double > *\n"
		"weight: double\n"
		"\n"
		""},
	 { (char *)"BNLearner_double_useNoApriori", _wrap_BNLearner_double_useNoApriori, METH_VARARGS, (char *)"\n"
		"BNLearner_double_useNoApriori(BNLearner_double self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::learning::BNLearner< double > *\n"
		"\n"
		""},
	 { (char *)"BNLearner_double_useAprioriSmoothing", _wrap_BNLearner_double_useAprioriSmoothing, METH_VARARGS, (char *)"\n"
		"useAprioriSmoothing(double weight=-1)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"weight: double\n"
		"\n"
		"BNLearner_double_useAprioriSmoothing(BNLearner_double self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::learning::BNLearner< double > *\n"
		"\n"
		""},
	 { (char *)"BNLearner_double_useAprioriDirichlet", _wrap_BNLearner_double_useAprioriDirichlet, METH_VARARGS, (char *)"\n"
		"BNLearner_double_useAprioriDirichlet(BNLearner_double self, std::string const & filename)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::learning::BNLearner< double > *\n"
		"filename: std::string const &\n"
		"\n"
		""},
	 { (char *)"BNLearner_double_useGreedyHillClimbing", _wrap_BNLearner_double_useGreedyHillClimbing, METH_VARARGS, (char *)"\n"
		"BNLearner_double_useGreedyHillClimbing(BNLearner_double self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::learning::BNLearner< double > *\n"
		"\n"
		""},
	 { (char *)"BNLearner_double_useLocalSearchWithTabuList", _wrap_BNLearner_double_useLocalSearchWithTabuList, METH_VARARGS, (char *)"\n"
		"useLocalSearchWithTabuList(gum::Size tabu_size=100, gum::Size nb_decrease=2)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"tabu_size: gum::Size\n"
		"nb_decrease: gum::Size\n"
		"\n"
		"useLocalSearchWithTabuList(gum::Size tabu_size=100)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"tabu_size: gum::Size\n"
		"\n"
		"BNLearner_double_useLocalSearchWithTabuList(BNLearner_double self)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::learning::BNLearner< double > *\n"
		"\n"
		""},
	 { (char *)"BNLearner_double_useK2", _wrap_BNLearner_double_useK2, METH_VARARGS, (char *)"\n"
		"useK2(PyObject * l)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"l: PyObject *\n"
		"\n"
		"useK2(gum::Sequence< gum::NodeId > const & order)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"order: gum::Sequence< gum::NodeId > const &\n"
		"\n"
		"BNLearner_double_useK2(BNLearner_double self, std::vector< gum::NodeId,std::allocator< gum::NodeId > > const & order)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::learning::BNLearner< double > *\n"
		"order: std::vector< gum::NodeId,std::allocator< gum::NodeId > > const &\n"
		"\n"
		""},
	 { (char *)"BNLearner_double_setMaxIndegree", _wrap_BNLearner_double_setMaxIndegree, METH_VARARGS, (char *)"\n"
		"BNLearner_double_setMaxIndegree(BNLearner_double self, gum::Size max_indegree)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::learning::BNLearner< double > *\n"
		"max_indegree: gum::Size\n"
		"\n"
		""},
	 { (char *)"BNLearner_double_setSliceOrder", _wrap_BNLearner_double_setSliceOrder, METH_VARARGS, (char *)"\n"
		"setSliceOrder(PyObject * l)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"l: PyObject *\n"
		"\n"
		"BNLearner_double_setSliceOrder(BNLearner_double self, gum::NodeProperty< gum::NodeId > const & slice_order)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::learning::BNLearner< double > *\n"
		"slice_order: gum::NodeProperty< gum::NodeId > const &\n"
		"\n"
		""},
	 { (char *)"BNLearner_double_addForbiddenArc", _wrap_BNLearner_double_addForbiddenArc, METH_VARARGS, (char *)"\n"
		"addForbiddenArc(Arc arc)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"arc: gum::Arc const &\n"
		"\n"
		"addForbiddenArc(gum::NodeId const tail, gum::NodeId const head)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"tail: gum::NodeId const\n"
		"head: gum::NodeId const\n"
		"\n"
		"BNLearner_double_addForbiddenArc(BNLearner_double self, std::string const & tail, std::string const & head)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::learning::BNLearner< double > *\n"
		"tail: std::string const &\n"
		"head: std::string const &\n"
		"\n"
		""},
	 { (char *)"BNLearner_double_eraseForbiddenArc", _wrap_BNLearner_double_eraseForbiddenArc, METH_VARARGS, (char *)"\n"
		"eraseForbiddenArc(Arc arc)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"arc: gum::Arc const &\n"
		"\n"
		"eraseForbiddenArc(gum::NodeId const tail, gum::NodeId const head)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"tail: gum::NodeId const\n"
		"head: gum::NodeId const\n"
		"\n"
		"BNLearner_double_eraseForbiddenArc(BNLearner_double self, std::string const & tail, std::string const & head)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::learning::BNLearner< double > *\n"
		"tail: std::string const &\n"
		"head: std::string const &\n"
		"\n"
		""},
	 { (char *)"BNLearner_double_addMandatoryArc", _wrap_BNLearner_double_addMandatoryArc, METH_VARARGS, (char *)"\n"
		"addMandatoryArc(Arc arc)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"arc: gum::Arc const &\n"
		"\n"
		"addMandatoryArc(gum::NodeId const tail, gum::NodeId const head)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"tail: gum::NodeId const\n"
		"head: gum::NodeId const\n"
		"\n"
		"BNLearner_double_addMandatoryArc(BNLearner_double self, std::string const & tail, std::string const & head)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::learning::BNLearner< double > *\n"
		"tail: std::string const &\n"
		"head: std::string const &\n"
		"\n"
		""},
	 { (char *)"BNLearner_double_eraseMandatoryArc", _wrap_BNLearner_double_eraseMandatoryArc, METH_VARARGS, (char *)"\n"
		"eraseMandatoryArc(Arc arc)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"arc: gum::Arc const &\n"
		"\n"
		"eraseMandatoryArc(gum::NodeId const tail, gum::NodeId const head)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"tail: gum::NodeId const\n"
		"head: gum::NodeId const\n"
		"\n"
		"BNLearner_double_eraseMandatoryArc(BNLearner_double self, std::string const & tail, std::string const & head)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::learning::BNLearner< double > *\n"
		"tail: std::string const &\n"
		"head: std::string const &\n"
		"\n"
		""},
	 { (char *)"BNLearner_double_setInitialDAG", _wrap_BNLearner_double_setInitialDAG, METH_VARARGS, (char *)"\n"
		"BNLearner_double_setInitialDAG(BNLearner_double self, DAG g)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"self: gum::learning::BNLearner< double > *\n"
		"g: gum::DAG const &\n"
		"\n"
		""},
	 { (char *)"BNLearner_double_swigregister", BNLearner_double_swigregister, METH_VARARGS, NULL},
	 { (char *)"statsObj", _wrap_statsObj, METH_VARARGS, (char *)"statsObj()"},
	 { NULL, NULL, 0, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_gum__MixedGraphTo_p_gum__DiGraph(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::DiGraph *)  ((gum::MixedGraph *) x));
}
static void *_p_gum__DAGTo_p_gum__DiGraph(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::DiGraph *)  ((gum::DAG *) x));
}
static void *_p_gum__MixedGraphTo_p_gum__UndiGraph(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::UndiGraph *)  ((gum::MixedGraph *) x));
}
static void *_p_gum__CliqueGraphTo_p_gum__UndiGraph(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::UndiGraph *)  ((gum::CliqueGraph *) x));
}
static void *_p_gum__MultiDimImplementationT_double_tTo_p_gum__MultiDimContainerT_double_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::MultiDimContainer< double > *)  ((gum::MultiDimImplementation< double > *) x));
}
static void *_p_gum__MultiDimDecoratorT_double_tTo_p_gum__MultiDimContainerT_double_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::MultiDimContainer< double > *)  ((gum::MultiDimDecorator< double > *) x));
}
static void *_p_gum__MultiDimWithOffsetT_double_tTo_p_gum__MultiDimContainerT_double_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::MultiDimContainer< double > *) (gum::MultiDimImplementation< double > *) ((gum::MultiDimWithOffset< double > *) x));
}
static void *_p_gum__MultiDimArrayT_double_tTo_p_gum__MultiDimContainerT_double_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::MultiDimContainer< double > *) (gum::MultiDimImplementation< double > *)(gum::MultiDimWithOffset< double > *) ((gum::MultiDimArray< double > *) x));
}
static void *_p_gum__PotentialT_double_tTo_p_gum__MultiDimContainerT_double_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::MultiDimContainer< double > *) (gum::MultiDimDecorator< double > *) ((gum::Potential< double > *) x));
}
static void *_p_gum__UtilityTableT_double_tTo_p_gum__MultiDimContainerT_double_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::MultiDimContainer< double > *) (gum::MultiDimDecorator< double > *) ((gum::UtilityTable< double > *) x));
}
static void *_p_gum__BayesNetT_double_tTo_p_gum__IBayesNetT_double_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::IBayesNet< double > *)  ((gum::BayesNet< double > *) x));
}
static void *_p_gum__PotentialT_double_tTo_p_gum__MultiDimDecoratorT_double_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::MultiDimDecorator< double > *)  ((gum::Potential< double > *) x));
}
static void *_p_gum__UtilityTableT_double_tTo_p_gum__MultiDimDecoratorT_double_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::MultiDimDecorator< double > *)  ((gum::UtilityTable< double > *) x));
}
static void *_p_gum__MultiDimArrayT_double_tTo_p_gum__MultiDimWithOffsetT_double_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::MultiDimWithOffset< double > *)  ((gum::MultiDimArray< double > *) x));
}
static void *_p_gum__MultiDimWithOffsetT_double_tTo_p_gum__MultiDimImplementationT_double_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::MultiDimImplementation< double > *)  ((gum::MultiDimWithOffset< double > *) x));
}
static void *_p_gum__MultiDimArrayT_double_tTo_p_gum__MultiDimImplementationT_double_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::MultiDimImplementation< double > *) (gum::MultiDimWithOffset< double > *) ((gum::MultiDimArray< double > *) x));
}
static void *_p_gum__BruteForceKLT_double_tTo_p_gum__KLT_double_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::KL< double > *)  ((gum::BruteForceKL< double > *) x));
}
static void *_p_gum__GibbsKLT_double_tTo_p_gum__KLT_double_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::KL< double > *)  ((gum::GibbsKL< double > *) x));
}
static void *_p_gum__CPTNoSumTo1To_p_gum__CPTError(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::CPTError *)  ((gum::CPTNoSumTo1 *) x));
}
static void *_p_gum__IBayesNetT_double_tTo_p_gum__DAGmodel(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::DAGmodel *)  ((gum::IBayesNet< double > *) x));
}
static void *_p_gum__BayesNetT_double_tTo_p_gum__DAGmodel(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::DAGmodel *) (gum::IBayesNet< double > *) ((gum::BayesNet< double > *) x));
}
static void *_p_gum__InfluenceDiagramT_double_tTo_p_gum__DAGmodel(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::DAGmodel *)  ((gum::InfluenceDiagram< double > *) x));
}
static void *_p_gum__MultiDimContainerT_double_tTo_p_gum__MultiDimAdressable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::MultiDimAdressable *)  ((gum::MultiDimContainer< double > *) x));
}
static void *_p_gum__MultiDimImplementationT_double_tTo_p_gum__MultiDimAdressable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::MultiDimAdressable *) (gum::MultiDimContainer< double > *) ((gum::MultiDimImplementation< double > *) x));
}
static void *_p_gum__MultiDimDecoratorT_double_tTo_p_gum__MultiDimAdressable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::MultiDimAdressable *) (gum::MultiDimContainer< double > *) ((gum::MultiDimDecorator< double > *) x));
}
static void *_p_gum__MultiDimWithOffsetT_double_tTo_p_gum__MultiDimAdressable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::MultiDimAdressable *) (gum::MultiDimContainer< double > *)(gum::MultiDimImplementation< double > *) ((gum::MultiDimWithOffset< double > *) x));
}
static void *_p_gum__MultiDimArrayT_double_tTo_p_gum__MultiDimAdressable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::MultiDimAdressable *) (gum::MultiDimContainer< double > *)(gum::MultiDimImplementation< double > *)(gum::MultiDimWithOffset< double > *) ((gum::MultiDimArray< double > *) x));
}
static void *_p_gum__PotentialT_double_tTo_p_gum__MultiDimAdressable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::MultiDimAdressable *) (gum::MultiDimContainer< double > *)(gum::MultiDimDecorator< double > *) ((gum::Potential< double > *) x));
}
static void *_p_gum__UtilityTableT_double_tTo_p_gum__MultiDimAdressable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::MultiDimAdressable *) (gum::MultiDimContainer< double > *)(gum::MultiDimDecorator< double > *) ((gum::UtilityTable< double > *) x));
}
static void *_p_gum__FormatNotFoundTo_p_gum__IOError(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::IOError *)  ((gum::FormatNotFound *) x));
}
static void *_p_gum__SyntaxErrorTo_p_gum__IOError(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::IOError *)  ((gum::SyntaxError *) x));
}
static void *_p_gum__ApproximationSchemeTo_p_gum__IApproximationSchemeConfiguration(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::IApproximationSchemeConfiguration *)  ((gum::ApproximationScheme *) x));
}
static void *_p_gum__GibbsInferenceT_double_tTo_p_gum__IApproximationSchemeConfiguration(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::IApproximationSchemeConfiguration *) (gum::ApproximationScheme *) ((gum::GibbsInference< double > *) x));
}
static void *_p_gum__GibbsKLT_double_tTo_p_gum__IApproximationSchemeConfiguration(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::IApproximationSchemeConfiguration *) (gum::ApproximationScheme *) ((gum::GibbsKL< double > *) x));
}
static void *_p_gum__learning__BNLearnerT_double_tTo_p_gum__IApproximationSchemeConfiguration(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::IApproximationSchemeConfiguration *) (gum::learning::genericBNLearner *) ((gum::learning::BNLearner< double > *) x));
}
static void *_p_gum__learning__genericBNLearnerTo_p_gum__IApproximationSchemeConfiguration(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::IApproximationSchemeConfiguration *)  ((gum::learning::genericBNLearner *) x));
}
static void *_p_gum__WrongClassElementTo_p_gum__FactoryError(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::FactoryError *)  ((gum::WrongClassElement *) x));
}
static void *_p_gum__FactoryInvalidStateTo_p_gum__FactoryError(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::FactoryError *)  ((gum::FactoryInvalidState *) x));
}
static void *_p_gum__TypeErrorTo_p_gum__FactoryError(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::FactoryError *)  ((gum::TypeError *) x));
}
static void *_p_gum__WrongTypeTo_p_gum__FactoryError(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::FactoryError *)  ((gum::WrongType *) x));
}
static void *_p_gum__InvalidDirectedCycleTo_p_gum__GraphError(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::GraphError *)  ((gum::InvalidDirectedCycle *) x));
}
static void *_p_gum__NoNeighbourTo_p_gum__GraphError(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::GraphError *)  ((gum::NoNeighbour *) x));
}
static void *_p_gum__InvalidNodeTo_p_gum__GraphError(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::GraphError *)  ((gum::InvalidNode *) x));
}
static void *_p_gum__DefaultInLabelTo_p_gum__GraphError(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::GraphError *)  ((gum::DefaultInLabel *) x));
}
static void *_p_gum__NoChildTo_p_gum__GraphError(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::GraphError *)  ((gum::NoChild *) x));
}
static void *_p_gum__InvalidEdgeTo_p_gum__GraphError(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::GraphError *)  ((gum::InvalidEdge *) x));
}
static void *_p_gum__InvalidArcTo_p_gum__GraphError(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::GraphError *)  ((gum::InvalidArc *) x));
}
static void *_p_gum__NoParentTo_p_gum__GraphError(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::GraphError *)  ((gum::NoParent *) x));
}
static void *_p_gum__EmptyBSTreeTo_p_gum__GraphError(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::GraphError *)  ((gum::EmptyBSTree *) x));
}
static void *_p_gum__learning__BNLearnerT_double_tTo_p_gum__learning__genericBNLearner(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::learning::genericBNLearner *)  ((gum::learning::BNLearner< double > *) x));
}
static void *_p_gum__DiGraphTo_p_gum__NodeGraphPart(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::NodeGraphPart *)  ((gum::DiGraph *) x));
}
static void *_p_gum__UndiGraphTo_p_gum__NodeGraphPart(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::NodeGraphPart *)  ((gum::UndiGraph *) x));
}
static void *_p_gum__MixedGraphTo_p_gum__NodeGraphPart(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::NodeGraphPart *) (gum::UndiGraph *) ((gum::MixedGraph *) x));
}
static void *_p_gum__DAGTo_p_gum__NodeGraphPart(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::NodeGraphPart *) (gum::DiGraph *) ((gum::DAG *) x));
}
static void *_p_gum__CliqueGraphTo_p_gum__NodeGraphPart(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::NodeGraphPart *) (gum::UndiGraph *) ((gum::CliqueGraph *) x));
}
static void *_p_gum__DiGraphTo_p_gum__ArcGraphPart(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::ArcGraphPart *)  ((gum::DiGraph *) x));
}
static void *_p_gum__MixedGraphTo_p_gum__ArcGraphPart(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::ArcGraphPart *) (gum::DiGraph *) ((gum::MixedGraph *) x));
}
static void *_p_gum__DAGTo_p_gum__ArcGraphPart(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::ArcGraphPart *) (gum::DiGraph *) ((gum::DAG *) x));
}
static void *_p_gum__UndiGraphTo_p_gum__EdgeGraphPart(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::EdgeGraphPart *)  ((gum::UndiGraph *) x));
}
static void *_p_gum__MixedGraphTo_p_gum__EdgeGraphPart(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::EdgeGraphPart *) (gum::UndiGraph *) ((gum::MixedGraph *) x));
}
static void *_p_gum__CliqueGraphTo_p_gum__EdgeGraphPart(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::EdgeGraphPart *) (gum::UndiGraph *) ((gum::CliqueGraph *) x));
}
static void *_p_gum__FatalErrorTo_p_gum__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::Exception *)  ((gum::FatalError *) x));
}
static void *_p_gum__WrongTypeTo_p_gum__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::Exception *) (gum::FactoryError *) ((gum::WrongType *) x));
}
static void *_p_gum__IncompatibleScoreAprioriTo_p_gum__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::Exception *) (gum::LearningError *) ((gum::IncompatibleScoreApriori *) x));
}
static void *_p_gum__PossiblyIncompatibleScoreAprioriTo_p_gum__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::Exception *) (gum::LearningError *) ((gum::PossiblyIncompatibleScoreApriori *) x));
}
static void *_p_gum__InvalidNodeTo_p_gum__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::Exception *) (gum::GraphError *) ((gum::InvalidNode *) x));
}
static void *_p_gum__GraphErrorTo_p_gum__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::Exception *)  ((gum::GraphError *) x));
}
static void *_p_gum__FormatNotFoundTo_p_gum__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::Exception *) (gum::IOError *) ((gum::FormatNotFound *) x));
}
static void *_p_gum__NotFoundTo_p_gum__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::Exception *)  ((gum::NotFound *) x));
}
static void *_p_gum__DefaultInLabelTo_p_gum__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::Exception *) (gum::GraphError *) ((gum::DefaultInLabel *) x));
}
static void *_p_gum__InvalidDirectedCycleTo_p_gum__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::Exception *) (gum::GraphError *) ((gum::InvalidDirectedCycle *) x));
}
static void *_p_gum__ReferenceErrorTo_p_gum__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::Exception *)  ((gum::ReferenceError *) x));
}
static void *_p_gum__DatabaseErrorTo_p_gum__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::Exception *) (gum::LearningError *) ((gum::DatabaseError *) x));
}
static void *_p_gum__OperationNotAllowedTo_p_gum__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::Exception *)  ((gum::OperationNotAllowed *) x));
}
static void *_p_gum__FactoryErrorTo_p_gum__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::Exception *)  ((gum::FactoryError *) x));
}
static void *_p_gum__CPTErrorTo_p_gum__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::Exception *)  ((gum::CPTError *) x));
}
static void *_p_gum__InvalidArcTo_p_gum__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::Exception *) (gum::GraphError *) ((gum::InvalidArc *) x));
}
static void *_p_gum__OutOfUpperBoundTo_p_gum__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::Exception *) (gum::ReferenceError *)(gum::OutOfBounds *) ((gum::OutOfUpperBound *) x));
}
static void *_p_gum__OutOfLowerBoundTo_p_gum__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::Exception *) (gum::ReferenceError *)(gum::OutOfBounds *) ((gum::OutOfLowerBound *) x));
}
static void *_p_gum__SyntaxErrorTo_p_gum__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::Exception *) (gum::IOError *) ((gum::SyntaxError *) x));
}
static void *_p_gum__SizeErrorTo_p_gum__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::Exception *)  ((gum::SizeError *) x));
}
static void *_p_gum__TypeErrorTo_p_gum__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::Exception *) (gum::FactoryError *) ((gum::TypeError *) x));
}
static void *_p_gum__DuplicateLabelTo_p_gum__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::Exception *) (gum::ReferenceError *) ((gum::DuplicateLabel *) x));
}
static void *_p_gum__LearningErrorTo_p_gum__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::Exception *)  ((gum::LearningError *) x));
}
static void *_p_gum__InvalidEdgeTo_p_gum__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::Exception *) (gum::GraphError *) ((gum::InvalidEdge *) x));
}
static void *_p_gum__InvalidArgumentsNumberTo_p_gum__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::Exception *)  ((gum::InvalidArgumentsNumber *) x));
}
static void *_p_gum__UndefinedIteratorValueTo_p_gum__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::Exception *)  ((gum::UndefinedIteratorValue *) x));
}
static void *_p_gum__IdErrorTo_p_gum__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::Exception *)  ((gum::IdError *) x));
}
static void *_p_gum__InvalidArgumentTo_p_gum__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::Exception *)  ((gum::InvalidArgument *) x));
}
static void *_p_gum__NoNeighbourTo_p_gum__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::Exception *) (gum::GraphError *) ((gum::NoNeighbour *) x));
}
static void *_p_gum__OutOfBoundsTo_p_gum__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::Exception *) (gum::ReferenceError *) ((gum::OutOfBounds *) x));
}
static void *_p_gum__EmptyBSTreeTo_p_gum__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::Exception *) (gum::GraphError *) ((gum::EmptyBSTree *) x));
}
static void *_p_gum__CPTNoSumTo1To_p_gum__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::Exception *) (gum::CPTError *) ((gum::CPTNoSumTo1 *) x));
}
static void *_p_gum__IncompatibleEvidenceTo_p_gum__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::Exception *)  ((gum::IncompatibleEvidence *) x));
}
static void *_p_gum__NoParentTo_p_gum__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::Exception *) (gum::GraphError *) ((gum::NoParent *) x));
}
static void *_p_gum__DuplicateElementTo_p_gum__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::Exception *) (gum::ReferenceError *) ((gum::DuplicateElement *) x));
}
static void *_p_gum__NullElementTo_p_gum__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::Exception *)  ((gum::NullElement *) x));
}
static void *_p_gum__UndefinedElementTo_p_gum__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::Exception *)  ((gum::UndefinedElement *) x));
}
static void *_p_gum__WrongClassElementTo_p_gum__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::Exception *) (gum::FactoryError *) ((gum::WrongClassElement *) x));
}
static void *_p_gum__NoChildTo_p_gum__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::Exception *) (gum::GraphError *) ((gum::NoChild *) x));
}
static void *_p_gum__EmptySetTo_p_gum__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::Exception *)  ((gum::EmptySet *) x));
}
static void *_p_gum__FactoryInvalidStateTo_p_gum__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::Exception *) (gum::FactoryError *) ((gum::FactoryInvalidState *) x));
}
static void *_p_gum__IOErrorTo_p_gum__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::Exception *)  ((gum::IOError *) x));
}
static void *_p_gum__UndefinedIteratorKeyTo_p_gum__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::Exception *)  ((gum::UndefinedIteratorKey *) x));
}
static void *_p_gum__MissingVariableInDatabaseTo_p_gum__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::Exception *) (gum::LearningError *) ((gum::MissingVariableInDatabase *) x));
}
static void *_p_gum__UnknownLabelInDatabaseTo_p_gum__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::Exception *) (gum::LearningError *) ((gum::UnknownLabelInDatabase *) x));
}
static void *_p_gum__MultiDimAdressableTo_p_gum__MultiDimInterface(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::MultiDimInterface *)  ((gum::MultiDimAdressable *) x));
}
static void *_p_gum__MultiDimContainerT_double_tTo_p_gum__MultiDimInterface(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::MultiDimInterface *) (gum::MultiDimAdressable *) ((gum::MultiDimContainer< double > *) x));
}
static void *_p_gum__MultiDimImplementationT_double_tTo_p_gum__MultiDimInterface(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::MultiDimInterface *) (gum::MultiDimAdressable *)(gum::MultiDimContainer< double > *) ((gum::MultiDimImplementation< double > *) x));
}
static void *_p_gum__MultiDimDecoratorT_double_tTo_p_gum__MultiDimInterface(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::MultiDimInterface *) (gum::MultiDimAdressable *)(gum::MultiDimContainer< double > *) ((gum::MultiDimDecorator< double > *) x));
}
static void *_p_gum__MultiDimWithOffsetT_double_tTo_p_gum__MultiDimInterface(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::MultiDimInterface *) (gum::MultiDimAdressable *)(gum::MultiDimContainer< double > *)(gum::MultiDimImplementation< double > *) ((gum::MultiDimWithOffset< double > *) x));
}
static void *_p_gum__MultiDimArrayT_double_tTo_p_gum__MultiDimInterface(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::MultiDimInterface *) (gum::MultiDimAdressable *)(gum::MultiDimContainer< double > *)(gum::MultiDimImplementation< double > *)(gum::MultiDimWithOffset< double > *) ((gum::MultiDimArray< double > *) x));
}
static void *_p_gum__PotentialT_double_tTo_p_gum__MultiDimInterface(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::MultiDimInterface *) (gum::MultiDimAdressable *)(gum::MultiDimContainer< double > *)(gum::MultiDimDecorator< double > *) ((gum::Potential< double > *) x));
}
static void *_p_gum__UtilityTableT_double_tTo_p_gum__MultiDimInterface(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::MultiDimInterface *) (gum::MultiDimAdressable *)(gum::MultiDimContainer< double > *)(gum::MultiDimDecorator< double > *) ((gum::UtilityTable< double > *) x));
}
static void *_p_gum__InstantiationTo_p_gum__MultiDimInterface(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::MultiDimInterface *)  ((gum::Instantiation *) x));
}
static void *_p_gum__GibbsInferenceT_double_tTo_p_gum__ApproximationScheme(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::ApproximationScheme *)  ((gum::GibbsInference< double > *) x));
}
static void *_p_gum__GibbsKLT_double_tTo_p_gum__ApproximationScheme(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::ApproximationScheme *)  ((gum::GibbsKL< double > *) x));
}
static void *_p_gum__OutOfLowerBoundTo_p_gum__OutOfBounds(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::OutOfBounds *)  ((gum::OutOfLowerBound *) x));
}
static void *_p_gum__OutOfUpperBoundTo_p_gum__OutOfBounds(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::OutOfBounds *)  ((gum::OutOfUpperBound *) x));
}
static void *_p_gum__MissingVariableInDatabaseTo_p_gum__LearningError(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::LearningError *)  ((gum::MissingVariableInDatabase *) x));
}
static void *_p_gum__UnknownLabelInDatabaseTo_p_gum__LearningError(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::LearningError *)  ((gum::UnknownLabelInDatabase *) x));
}
static void *_p_gum__DatabaseErrorTo_p_gum__LearningError(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::LearningError *)  ((gum::DatabaseError *) x));
}
static void *_p_gum__IncompatibleScoreAprioriTo_p_gum__LearningError(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::LearningError *)  ((gum::IncompatibleScoreApriori *) x));
}
static void *_p_gum__PossiblyIncompatibleScoreAprioriTo_p_gum__LearningError(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::LearningError *)  ((gum::PossiblyIncompatibleScoreApriori *) x));
}
static void *_p_gum__LabelizedVariableTo_p_gum__DiscreteVariable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::DiscreteVariable *)  ((gum::LabelizedVariable *) x));
}
static void *_p_gum__RangeVariableTo_p_gum__DiscreteVariable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::DiscreteVariable *)  ((gum::RangeVariable *) x));
}
static void *_p_gum__DiscretizedVariableT_double_tTo_p_gum__DiscreteVariable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::DiscreteVariable *)  ((gum::DiscretizedVariable< double > *) x));
}
static void *_p_gum__DiscreteVariableTo_p_gum__Variable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::Variable *)  ((gum::DiscreteVariable *) x));
}
static void *_p_gum__LabelizedVariableTo_p_gum__Variable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::Variable *) (gum::DiscreteVariable *) ((gum::LabelizedVariable *) x));
}
static void *_p_gum__RangeVariableTo_p_gum__Variable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::Variable *) (gum::DiscreteVariable *) ((gum::RangeVariable *) x));
}
static void *_p_gum__DiscretizedVariableT_double_tTo_p_gum__Variable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::Variable *) (gum::DiscreteVariable *) ((gum::DiscretizedVariable< double > *) x));
}
static void *_p_gum__DuplicateElementTo_p_gum__ReferenceError(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::ReferenceError *)  ((gum::DuplicateElement *) x));
}
static void *_p_gum__DuplicateLabelTo_p_gum__ReferenceError(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::ReferenceError *)  ((gum::DuplicateLabel *) x));
}
static void *_p_gum__OutOfLowerBoundTo_p_gum__ReferenceError(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::ReferenceError *) (gum::OutOfBounds *) ((gum::OutOfLowerBound *) x));
}
static void *_p_gum__OutOfUpperBoundTo_p_gum__ReferenceError(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::ReferenceError *) (gum::OutOfBounds *) ((gum::OutOfUpperBound *) x));
}
static void *_p_gum__OutOfBoundsTo_p_gum__ReferenceError(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gum::ReferenceError *)  ((gum::OutOfBounds *) x));
}
static swig_type_info _swigt__p_ArcIterator = {"_p_ArcIterator", "ArcIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BNGenerator = {"_p_BNGenerator", "BNGenerator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_EdgeIterator = {"_p_EdgeIterator", "EdgeIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_IDGenerator = {"_p_IDGenerator", "IDGenerator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_JTGenerator = {"_p_JTGenerator", "JTGenerator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NodeConstIterator = {"_p_NodeConstIterator", "NodeConstIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NodeConstIteratorSafe = {"_p_NodeConstIteratorSafe", "NodeConstIteratorSafe *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NodeIterator = {"_p_NodeIterator", "NodeIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NodeIteratorSafe = {"_p_NodeIteratorSafe", "NodeIteratorSafe *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NodePropertyT_gum__PotentialT_double_t_const_p_t = {"_p_NodePropertyT_gum__PotentialT_double_t_const_p_t", "gum::NodeProperty< gum::Potential< double > const * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NodePropertyT_gum__SequenceT_std__string_t_t = {"_p_NodePropertyT_gum__SequenceT_std__string_t_t", "gum::NodeProperty< gum::Sequence< std::string > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NodePropertyT_std__vectorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_t_t_t = {"_p_NodePropertyT_std__vectorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_t_t_t", "gum::NodeProperty< std::vector< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >,std::allocator< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NodePropertyT_unsigned_int_t = {"_p_NodePropertyT_unsigned_int_t", "gum::NodeProperty< gum::NodeId > *|gum::NodeProperty< unsigned int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NodePropertyT_unsigned_long_t = {"_p_NodePropertyT_unsigned_long_t", "gum::NodeProperty< gum::Idx > *|gum::NodeProperty< unsigned long > *|gum::NodeProperty< gum::Size > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PRMexplorer = {"_p_PRMexplorer", "PRMexplorer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PythonApproximationListener = {"_p_PythonApproximationListener", "PythonApproximationListener *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PythonBNListener = {"_p_PythonBNListener", "PythonBNListener *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PythonLoadListener = {"_p_PythonLoadListener", "PythonLoadListener *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_RelevantPotentialsFinderType = {"_p_RelevantPotentialsFinderType", "gum::RelevantPotentialsFinderType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SetT_gum__Arc_t = {"_p_SetT_gum__Arc_t", "gum::Set< gum::Arc > *|gum::ArcSet *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SetT_gum__Arc_t__const_iterator = {"_p_SetT_gum__Arc_t__const_iterator", "gum::Set< gum::Arc >::const_iterator *|gum::ArcSetIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SetT_gum__Edge_t = {"_p_SetT_gum__Edge_t", "gum::Set< gum::Edge > *|gum::EdgeSet *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SetT_gum__Edge_t__const_iterator = {"_p_SetT_gum__Edge_t__const_iterator", "gum::Set< gum::Edge >::const_iterator *|gum::EdgeSetIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SetT_gum__PotentialT_double_t_const_p_t = {"_p_SetT_gum__PotentialT_double_t_const_p_t", "gum::Set< gum::Potential< double > const * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SetT_unsigned_int_t = {"_p_SetT_unsigned_int_t", "gum::Set< unsigned int > *|gum::NodeSet *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SetT_unsigned_int_t__const_iterator = {"_p_SetT_unsigned_int_t__const_iterator", "gum::Set< unsigned int >::const_iterator *|gum::NodeSetIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Triangulation = {"_p_Triangulation", "gum::Triangulation *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_allocator_type = {"_p_allocator_type", "allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cArcP = {"_p_cArcP", "cArcP *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_const_pointer = {"_p_const_pointer", "const_pointer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_const_reference = {"_p_const_reference", "const_reference *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_difference_type = {"_p_difference_type", "difference_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__ApproximationScheme = {"_p_gum__ApproximationScheme", "gum::ApproximationScheme *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__Arc = {"_p_gum__Arc", "gum::Arc *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__ArcGraphPart = {"_p_gum__ArcGraphPart", "gum::ArcGraphPart *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__BayesNetInferenceT_double_t = {"_p_gum__BayesNetInferenceT_double_t", "gum::BayesNetInference< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__BayesNetT_double_t = {"_p_gum__BayesNetT_double_t", "gum::BayesNet< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__BruteForceKLT_double_t = {"_p_gum__BruteForceKLT_double_t", "gum::BruteForceKL< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__CPTError = {"_p_gum__CPTError", "gum::CPTError *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__CPTNoSumTo1 = {"_p_gum__CPTNoSumTo1", "gum::CPTNoSumTo1 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__CliqueGraph = {"_p_gum__CliqueGraph", "gum::JoinTree *|gum::JunctionTree *|gum::CliqueGraph *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__DAG = {"_p_gum__DAG", "gum::DAG *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__DAGmodel = {"_p_gum__DAGmodel", "gum::DAGmodel *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__DatabaseError = {"_p_gum__DatabaseError", "gum::DatabaseError *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__DefaultInLabel = {"_p_gum__DefaultInLabel", "gum::DefaultInLabel *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__DiGraph = {"_p_gum__DiGraph", "gum::DiGraph *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__DiscreteVariable = {"_p_gum__DiscreteVariable", "gum::DiscreteVariable *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__DiscretizedVariableT_double_t = {"_p_gum__DiscretizedVariableT_double_t", "gum::DiscretizedVariable< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__DuplicateElement = {"_p_gum__DuplicateElement", "gum::DuplicateElement *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__DuplicateLabel = {"_p_gum__DuplicateLabel", "gum::DuplicateLabel *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__Edge = {"_p_gum__Edge", "gum::Edge *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__EdgeGraphPart = {"_p_gum__EdgeGraphPart", "gum::EdgeGraphPart *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__EmptyBSTree = {"_p_gum__EmptyBSTree", "gum::EmptyBSTree *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__EmptySet = {"_p_gum__EmptySet", "gum::EmptySet *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__Exception = {"_p_gum__Exception", "gum::Exception *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__FactoryError = {"_p_gum__FactoryError", "gum::FactoryError *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__FactoryInvalidState = {"_p_gum__FactoryInvalidState", "gum::FactoryInvalidState *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__FatalError = {"_p_gum__FatalError", "gum::FatalError *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__FormatNotFound = {"_p_gum__FormatNotFound", "gum::FormatNotFound *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__GibbsInferenceT_double_t = {"_p_gum__GibbsInferenceT_double_t", "gum::GibbsInference< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__GibbsKLT_double_t = {"_p_gum__GibbsKLT_double_t", "gum::GibbsKL< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__GraphError = {"_p_gum__GraphError", "gum::GraphError *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__IApproximationSchemeConfiguration = {"_p_gum__IApproximationSchemeConfiguration", "gum::IApproximationSchemeConfiguration *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__IBayesNetT_double_t = {"_p_gum__IBayesNetT_double_t", "gum::IBayesNet< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__IOError = {"_p_gum__IOError", "gum::IOError *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__IdError = {"_p_gum__IdError", "gum::IdError *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__IncompatibleEvidence = {"_p_gum__IncompatibleEvidence", "gum::IncompatibleEvidence *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__IncompatibleScoreApriori = {"_p_gum__IncompatibleScoreApriori", "gum::IncompatibleScoreApriori *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__InfluenceDiagramInferenceT_double_t = {"_p_gum__InfluenceDiagramInferenceT_double_t", "gum::InfluenceDiagramInference< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__InfluenceDiagramT_double_t = {"_p_gum__InfluenceDiagramT_double_t", "gum::InfluenceDiagram< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__Instantiation = {"_p_gum__Instantiation", "gum::Instantiation *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__InvalidArc = {"_p_gum__InvalidArc", "gum::InvalidArc *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__InvalidArgument = {"_p_gum__InvalidArgument", "gum::InvalidArgument *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__InvalidArgumentsNumber = {"_p_gum__InvalidArgumentsNumber", "gum::InvalidArgumentsNumber *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__InvalidDirectedCycle = {"_p_gum__InvalidDirectedCycle", "gum::InvalidDirectedCycle *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__InvalidEdge = {"_p_gum__InvalidEdge", "gum::InvalidEdge *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__InvalidNode = {"_p_gum__InvalidNode", "gum::InvalidNode *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__KLT_double_t = {"_p_gum__KLT_double_t", "gum::KL< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__LabelizedVariable = {"_p_gum__LabelizedVariable", "gum::LabelizedVariable *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__LazyPropagationT_double_t = {"_p_gum__LazyPropagationT_double_t", "gum::LazyPropagation< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__LearningError = {"_p_gum__LearningError", "gum::LearningError *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__ListT_gum__PotentialT_double_t_const_p_t = {"_p_gum__ListT_gum__PotentialT_double_t_const_p_t", "gum::List< gum::Potential< double > const * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__MissingVariableInDatabase = {"_p_gum__MissingVariableInDatabase", "gum::MissingVariableInDatabase *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__MixedGraph = {"_p_gum__MixedGraph", "gum::MixedGraph *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__MultiDimAdressable = {"_p_gum__MultiDimAdressable", "gum::MultiDimAdressable *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__MultiDimArrayT_double_t = {"_p_gum__MultiDimArrayT_double_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_gum__MultiDimContainerT_double_t = {"_p_gum__MultiDimContainerT_double_t", "gum::MultiDimContainer< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__MultiDimDecoratorT_double_t = {"_p_gum__MultiDimDecoratorT_double_t", "gum::MultiDimDecorator< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__MultiDimImplementationT_double_t = {"_p_gum__MultiDimImplementationT_double_t", "gum::MultiDimImplementation< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__MultiDimInterface = {"_p_gum__MultiDimInterface", "gum::MultiDimInterface *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__MultiDimWithOffsetT_double_t = {"_p_gum__MultiDimWithOffsetT_double_t", "gum::MultiDimWithOffset< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__NoChild = {"_p_gum__NoChild", "gum::NoChild *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__NoNeighbour = {"_p_gum__NoNeighbour", "gum::NoNeighbour *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__NoParent = {"_p_gum__NoParent", "gum::NoParent *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__NodeGraphPart = {"_p_gum__NodeGraphPart", "gum::NodeGraphPart *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__NotFound = {"_p_gum__NotFound", "gum::NotFound *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__NullElement = {"_p_gum__NullElement", "gum::NullElement *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__OperationNotAllowed = {"_p_gum__OperationNotAllowed", "gum::OperationNotAllowed *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__OutOfBounds = {"_p_gum__OutOfBounds", "gum::OutOfBounds *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__OutOfLowerBound = {"_p_gum__OutOfLowerBound", "gum::OutOfLowerBound *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__OutOfUpperBound = {"_p_gum__OutOfUpperBound", "gum::OutOfUpperBound *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__PossiblyIncompatibleScoreApriori = {"_p_gum__PossiblyIncompatibleScoreApriori", "gum::PossiblyIncompatibleScoreApriori *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__PotentialT_double_t = {"_p_gum__PotentialT_double_t", "gum::Potential< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__RangeVariable = {"_p_gum__RangeVariable", "gum::RangeVariable *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__ReferenceError = {"_p_gum__ReferenceError", "gum::ReferenceError *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__SequenceT_gum__DiscreteVariable_const_p_t = {"_p_gum__SequenceT_gum__DiscreteVariable_const_p_t", "gum::Sequence< gum::DiscreteVariable const * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__SequenceT_unsigned_int_t = {"_p_gum__SequenceT_unsigned_int_t", "gum::Sequence< gum::NodeId > *|gum::Sequence< unsigned int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__SizeError = {"_p_gum__SizeError", "gum::SizeError *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__SyntaxError = {"_p_gum__SyntaxError", "gum::SyntaxError *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__TypeError = {"_p_gum__TypeError", "gum::TypeError *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__UndefinedElement = {"_p_gum__UndefinedElement", "gum::UndefinedElement *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__UndefinedIteratorKey = {"_p_gum__UndefinedIteratorKey", "gum::UndefinedIteratorKey *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__UndefinedIteratorValue = {"_p_gum__UndefinedIteratorValue", "gum::UndefinedIteratorValue *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__UndiGraph = {"_p_gum__UndiGraph", "gum::UndiGraph *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__UnknownLabelInDatabase = {"_p_gum__UnknownLabelInDatabase", "gum::UnknownLabelInDatabase *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__UtilityTableT_double_t = {"_p_gum__UtilityTableT_double_t", "gum::UtilityTable< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__Variable = {"_p_gum__Variable", "gum::Variable *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__VariableNodeMap = {"_p_gum__VariableNodeMap", "gum::VariableNodeMap *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__WrongClassElement = {"_p_gum__WrongClassElement", "gum::WrongClassElement *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__WrongType = {"_p_gum__WrongType", "gum::WrongType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__credal__CNLoopyPropagationT_double_t = {"_p_gum__credal__CNLoopyPropagationT_double_t", "gum::credal::CNLoopyPropagation< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__credal__CNMonteCarloSamplingT_double_gum__LazyPropagationT_double_t_t = {"_p_gum__credal__CNMonteCarloSamplingT_double_gum__LazyPropagationT_double_t_t", "gum::credal::CNMonteCarloSampling< double,gum::LazyPropagation< double > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__credal__CredalNetT_double_t = {"_p_gum__credal__CredalNetT_double_t", "gum::credal::CredalNet< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__learning__BNLearnerT_double_t = {"_p_gum__learning__BNLearnerT_double_t", "gum::learning::BNLearner< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__learning__DatabaseVectInRAM = {"_p_gum__learning__DatabaseVectInRAM", "gum::learning::DatabaseVectInRAM *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gum__learning__genericBNLearner = {"_p_gum__learning__genericBNLearner", "gum::learning::genericBNLearner *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_iterator_category = {"_p_iterator_category", "iterator_category *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_msg = {"_p_msg", "msg *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_node_const_iterator = {"_p_node_const_iterator", "node_const_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_node_const_iterator_safe = {"_p_node_const_iterator_safe", "node_const_iterator_safe *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_node_iterator = {"_p_node_iterator", "node_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_node_iterator_safe = {"_p_node_iterator_safe", "node_iterator_safe *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_PyObject = {"_p_p_PyObject", "PyObject **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pointer = {"_p_pointer", "pointer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_reference = {"_p_reference", "reference *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_type = {"_p_size_type", "size_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_double_t = {"_p_std__allocatorT_double_t", "std::vector< double >::allocator_type *|std::allocator< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_std__string_t = {"_p_std__allocatorT_std__string_t", "std::vector< std::string >::allocator_type *|std::allocator< std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__default_random_engine = {"_p_std__default_random_engine", "std::default_random_engine *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__functionT_double_fdoubleF_t = {"_p_std__functionT_double_fdoubleF_t", "std::function< double (double) > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__functionT_double_fdouble_doubleF_t = {"_p_std__functionT_double_fdouble_doubleF_t", "std::function< double (double,double) > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__invalid_argument = {"_p_std__invalid_argument", "std::invalid_argument *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__ostream = {"_p_std__ostream", "std::ostream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__string = {"_p_std__string", "std::string *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_PythonLoadListener_std__allocatorT_PythonLoadListener_t_t = {"_p_std__vectorT_PythonLoadListener_std__allocatorT_PythonLoadListener_t_t", "std::vector< PythonLoadListener,std::allocator< PythonLoadListener > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_double_std__allocatorT_double_t_t = {"_p_std__vectorT_double_std__allocatorT_double_t_t", "std::vector< double,std::allocator< double > > *|std::vector< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_gum__DiscreteVariable_const_p_std__allocatorT_gum__DiscreteVariable_const_p_t_t = {"_p_std__vectorT_gum__DiscreteVariable_const_p_std__allocatorT_gum__DiscreteVariable_const_p_t_t", "std::vector< gum::DiscreteVariable const *,std::allocator< gum::DiscreteVariable const * > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t = {"_p_std__vectorT_std__string_std__allocatorT_std__string_t_t", "std::vector< std::string,std::allocator< std::string > > *|std::vector< std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t = {"_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t", "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_t_t = {"_p_std__vectorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_t_t", "std::vector< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >,std::allocator< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t = {"_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t", "std::vector< gum::NodeId,std::allocator< gum::NodeId > > *|std::vector< unsigned int,std::allocator< unsigned int > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t = {"_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t", "std::vector< unsigned long,std::allocator< unsigned long > > *|std::vector< gum::Size,std::allocator< gum::Size > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_swig__SwigPyIterator = {"_p_swig__SwigPyIterator", "swig::SwigPyIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "gum::NodeId *|unsigned int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long = {"_p_unsigned_long", "gum::Size *|gum::Idx *|unsigned long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_value_type = {"_p_value_type", "value_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_void = {"_p_void", "void *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_ArcIterator,
  &_swigt__p_BNGenerator,
  &_swigt__p_EdgeIterator,
  &_swigt__p_IDGenerator,
  &_swigt__p_JTGenerator,
  &_swigt__p_NodeConstIterator,
  &_swigt__p_NodeConstIteratorSafe,
  &_swigt__p_NodeIterator,
  &_swigt__p_NodeIteratorSafe,
  &_swigt__p_NodePropertyT_gum__PotentialT_double_t_const_p_t,
  &_swigt__p_NodePropertyT_gum__SequenceT_std__string_t_t,
  &_swigt__p_NodePropertyT_std__vectorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_t_t_t,
  &_swigt__p_NodePropertyT_unsigned_int_t,
  &_swigt__p_NodePropertyT_unsigned_long_t,
  &_swigt__p_PRMexplorer,
  &_swigt__p_PythonApproximationListener,
  &_swigt__p_PythonBNListener,
  &_swigt__p_PythonLoadListener,
  &_swigt__p_RelevantPotentialsFinderType,
  &_swigt__p_SetT_gum__Arc_t,
  &_swigt__p_SetT_gum__Arc_t__const_iterator,
  &_swigt__p_SetT_gum__Edge_t,
  &_swigt__p_SetT_gum__Edge_t__const_iterator,
  &_swigt__p_SetT_gum__PotentialT_double_t_const_p_t,
  &_swigt__p_SetT_unsigned_int_t,
  &_swigt__p_SetT_unsigned_int_t__const_iterator,
  &_swigt__p_Triangulation,
  &_swigt__p_allocator_type,
  &_swigt__p_cArcP,
  &_swigt__p_char,
  &_swigt__p_const_pointer,
  &_swigt__p_const_reference,
  &_swigt__p_difference_type,
  &_swigt__p_gum__ApproximationScheme,
  &_swigt__p_gum__Arc,
  &_swigt__p_gum__ArcGraphPart,
  &_swigt__p_gum__BayesNetInferenceT_double_t,
  &_swigt__p_gum__BayesNetT_double_t,
  &_swigt__p_gum__BruteForceKLT_double_t,
  &_swigt__p_gum__CPTError,
  &_swigt__p_gum__CPTNoSumTo1,
  &_swigt__p_gum__CliqueGraph,
  &_swigt__p_gum__DAG,
  &_swigt__p_gum__DAGmodel,
  &_swigt__p_gum__DatabaseError,
  &_swigt__p_gum__DefaultInLabel,
  &_swigt__p_gum__DiGraph,
  &_swigt__p_gum__DiscreteVariable,
  &_swigt__p_gum__DiscretizedVariableT_double_t,
  &_swigt__p_gum__DuplicateElement,
  &_swigt__p_gum__DuplicateLabel,
  &_swigt__p_gum__Edge,
  &_swigt__p_gum__EdgeGraphPart,
  &_swigt__p_gum__EmptyBSTree,
  &_swigt__p_gum__EmptySet,
  &_swigt__p_gum__Exception,
  &_swigt__p_gum__FactoryError,
  &_swigt__p_gum__FactoryInvalidState,
  &_swigt__p_gum__FatalError,
  &_swigt__p_gum__FormatNotFound,
  &_swigt__p_gum__GibbsInferenceT_double_t,
  &_swigt__p_gum__GibbsKLT_double_t,
  &_swigt__p_gum__GraphError,
  &_swigt__p_gum__IApproximationSchemeConfiguration,
  &_swigt__p_gum__IBayesNetT_double_t,
  &_swigt__p_gum__IOError,
  &_swigt__p_gum__IdError,
  &_swigt__p_gum__IncompatibleEvidence,
  &_swigt__p_gum__IncompatibleScoreApriori,
  &_swigt__p_gum__InfluenceDiagramInferenceT_double_t,
  &_swigt__p_gum__InfluenceDiagramT_double_t,
  &_swigt__p_gum__Instantiation,
  &_swigt__p_gum__InvalidArc,
  &_swigt__p_gum__InvalidArgument,
  &_swigt__p_gum__InvalidArgumentsNumber,
  &_swigt__p_gum__InvalidDirectedCycle,
  &_swigt__p_gum__InvalidEdge,
  &_swigt__p_gum__InvalidNode,
  &_swigt__p_gum__KLT_double_t,
  &_swigt__p_gum__LabelizedVariable,
  &_swigt__p_gum__LazyPropagationT_double_t,
  &_swigt__p_gum__LearningError,
  &_swigt__p_gum__ListT_gum__PotentialT_double_t_const_p_t,
  &_swigt__p_gum__MissingVariableInDatabase,
  &_swigt__p_gum__MixedGraph,
  &_swigt__p_gum__MultiDimAdressable,
  &_swigt__p_gum__MultiDimArrayT_double_t,
  &_swigt__p_gum__MultiDimContainerT_double_t,
  &_swigt__p_gum__MultiDimDecoratorT_double_t,
  &_swigt__p_gum__MultiDimImplementationT_double_t,
  &_swigt__p_gum__MultiDimInterface,
  &_swigt__p_gum__MultiDimWithOffsetT_double_t,
  &_swigt__p_gum__NoChild,
  &_swigt__p_gum__NoNeighbour,
  &_swigt__p_gum__NoParent,
  &_swigt__p_gum__NodeGraphPart,
  &_swigt__p_gum__NotFound,
  &_swigt__p_gum__NullElement,
  &_swigt__p_gum__OperationNotAllowed,
  &_swigt__p_gum__OutOfBounds,
  &_swigt__p_gum__OutOfLowerBound,
  &_swigt__p_gum__OutOfUpperBound,
  &_swigt__p_gum__PossiblyIncompatibleScoreApriori,
  &_swigt__p_gum__PotentialT_double_t,
  &_swigt__p_gum__RangeVariable,
  &_swigt__p_gum__ReferenceError,
  &_swigt__p_gum__SequenceT_gum__DiscreteVariable_const_p_t,
  &_swigt__p_gum__SequenceT_unsigned_int_t,
  &_swigt__p_gum__SizeError,
  &_swigt__p_gum__SyntaxError,
  &_swigt__p_gum__TypeError,
  &_swigt__p_gum__UndefinedElement,
  &_swigt__p_gum__UndefinedIteratorKey,
  &_swigt__p_gum__UndefinedIteratorValue,
  &_swigt__p_gum__UndiGraph,
  &_swigt__p_gum__UnknownLabelInDatabase,
  &_swigt__p_gum__UtilityTableT_double_t,
  &_swigt__p_gum__Variable,
  &_swigt__p_gum__VariableNodeMap,
  &_swigt__p_gum__WrongClassElement,
  &_swigt__p_gum__WrongType,
  &_swigt__p_gum__credal__CNLoopyPropagationT_double_t,
  &_swigt__p_gum__credal__CNMonteCarloSamplingT_double_gum__LazyPropagationT_double_t_t,
  &_swigt__p_gum__credal__CredalNetT_double_t,
  &_swigt__p_gum__learning__BNLearnerT_double_t,
  &_swigt__p_gum__learning__DatabaseVectInRAM,
  &_swigt__p_gum__learning__genericBNLearner,
  &_swigt__p_iterator_category,
  &_swigt__p_msg,
  &_swigt__p_node_const_iterator,
  &_swigt__p_node_const_iterator_safe,
  &_swigt__p_node_iterator,
  &_swigt__p_node_iterator_safe,
  &_swigt__p_p_PyObject,
  &_swigt__p_pointer,
  &_swigt__p_reference,
  &_swigt__p_size_type,
  &_swigt__p_std__allocatorT_double_t,
  &_swigt__p_std__allocatorT_std__string_t,
  &_swigt__p_std__default_random_engine,
  &_swigt__p_std__functionT_double_fdoubleF_t,
  &_swigt__p_std__functionT_double_fdouble_doubleF_t,
  &_swigt__p_std__invalid_argument,
  &_swigt__p_std__ostream,
  &_swigt__p_std__string,
  &_swigt__p_std__vectorT_PythonLoadListener_std__allocatorT_PythonLoadListener_t_t,
  &_swigt__p_std__vectorT_double_std__allocatorT_double_t_t,
  &_swigt__p_std__vectorT_gum__DiscreteVariable_const_p_std__allocatorT_gum__DiscreteVariable_const_p_t_t,
  &_swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t,
  &_swigt__p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t,
  &_swigt__p_std__vectorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_t_t,
  &_swigt__p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,
  &_swigt__p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t,
  &_swigt__p_swig__SwigPyIterator,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long,
  &_swigt__p_value_type,
  &_swigt__p_void,
};

static swig_cast_info _swigc__p_ArcIterator[] = {  {&_swigt__p_ArcIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BNGenerator[] = {  {&_swigt__p_BNGenerator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_EdgeIterator[] = {  {&_swigt__p_EdgeIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IDGenerator[] = {  {&_swigt__p_IDGenerator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_JTGenerator[] = {  {&_swigt__p_JTGenerator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NodeConstIterator[] = {  {&_swigt__p_NodeConstIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NodeConstIteratorSafe[] = {  {&_swigt__p_NodeConstIteratorSafe, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NodeIterator[] = {  {&_swigt__p_NodeIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NodeIteratorSafe[] = {  {&_swigt__p_NodeIteratorSafe, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NodePropertyT_gum__PotentialT_double_t_const_p_t[] = {  {&_swigt__p_NodePropertyT_gum__PotentialT_double_t_const_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NodePropertyT_gum__SequenceT_std__string_t_t[] = {  {&_swigt__p_NodePropertyT_gum__SequenceT_std__string_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NodePropertyT_std__vectorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_t_t_t[] = {  {&_swigt__p_NodePropertyT_std__vectorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NodePropertyT_unsigned_int_t[] = {  {&_swigt__p_NodePropertyT_unsigned_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NodePropertyT_unsigned_long_t[] = {  {&_swigt__p_NodePropertyT_unsigned_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PRMexplorer[] = {  {&_swigt__p_PRMexplorer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PythonApproximationListener[] = {  {&_swigt__p_PythonApproximationListener, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PythonBNListener[] = {  {&_swigt__p_PythonBNListener, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PythonLoadListener[] = {  {&_swigt__p_PythonLoadListener, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RelevantPotentialsFinderType[] = {  {&_swigt__p_RelevantPotentialsFinderType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SetT_gum__Arc_t[] = {  {&_swigt__p_SetT_gum__Arc_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SetT_gum__Arc_t__const_iterator[] = {  {&_swigt__p_SetT_gum__Arc_t__const_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SetT_gum__Edge_t[] = {  {&_swigt__p_SetT_gum__Edge_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SetT_gum__Edge_t__const_iterator[] = {  {&_swigt__p_SetT_gum__Edge_t__const_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SetT_gum__PotentialT_double_t_const_p_t[] = {  {&_swigt__p_SetT_gum__PotentialT_double_t_const_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SetT_unsigned_int_t[] = {  {&_swigt__p_SetT_unsigned_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SetT_unsigned_int_t__const_iterator[] = {  {&_swigt__p_SetT_unsigned_int_t__const_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Triangulation[] = {  {&_swigt__p_Triangulation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_allocator_type[] = {  {&_swigt__p_allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cArcP[] = {  {&_swigt__p_cArcP, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_const_pointer[] = {  {&_swigt__p_const_pointer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_const_reference[] = {  {&_swigt__p_const_reference, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_difference_type[] = {  {&_swigt__p_difference_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__ApproximationScheme[] = {  {&_swigt__p_gum__GibbsInferenceT_double_t, _p_gum__GibbsInferenceT_double_tTo_p_gum__ApproximationScheme, 0, 0},  {&_swigt__p_gum__GibbsKLT_double_t, _p_gum__GibbsKLT_double_tTo_p_gum__ApproximationScheme, 0, 0},  {&_swigt__p_gum__ApproximationScheme, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__Arc[] = {  {&_swigt__p_gum__Arc, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__ArcGraphPart[] = {  {&_swigt__p_gum__DiGraph, _p_gum__DiGraphTo_p_gum__ArcGraphPart, 0, 0},  {&_swigt__p_gum__DAG, _p_gum__DAGTo_p_gum__ArcGraphPart, 0, 0},  {&_swigt__p_gum__MixedGraph, _p_gum__MixedGraphTo_p_gum__ArcGraphPart, 0, 0},  {&_swigt__p_gum__ArcGraphPart, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__BayesNetInferenceT_double_t[] = {  {&_swigt__p_gum__BayesNetInferenceT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__BayesNetT_double_t[] = {  {&_swigt__p_gum__BayesNetT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__BruteForceKLT_double_t[] = {  {&_swigt__p_gum__BruteForceKLT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__CPTError[] = {  {&_swigt__p_gum__CPTNoSumTo1, _p_gum__CPTNoSumTo1To_p_gum__CPTError, 0, 0},  {&_swigt__p_gum__CPTError, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__CPTNoSumTo1[] = {  {&_swigt__p_gum__CPTNoSumTo1, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__CliqueGraph[] = {  {&_swigt__p_gum__CliqueGraph, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__DAG[] = {  {&_swigt__p_gum__DAG, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__DAGmodel[] = {  {&_swigt__p_gum__DAGmodel, 0, 0, 0},  {&_swigt__p_gum__IBayesNetT_double_t, _p_gum__IBayesNetT_double_tTo_p_gum__DAGmodel, 0, 0},  {&_swigt__p_gum__BayesNetT_double_t, _p_gum__BayesNetT_double_tTo_p_gum__DAGmodel, 0, 0},  {&_swigt__p_gum__InfluenceDiagramT_double_t, _p_gum__InfluenceDiagramT_double_tTo_p_gum__DAGmodel, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__DatabaseError[] = {  {&_swigt__p_gum__DatabaseError, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__DefaultInLabel[] = {  {&_swigt__p_gum__DefaultInLabel, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__DiGraph[] = {  {&_swigt__p_gum__DiGraph, 0, 0, 0},  {&_swigt__p_gum__DAG, _p_gum__DAGTo_p_gum__DiGraph, 0, 0},  {&_swigt__p_gum__MixedGraph, _p_gum__MixedGraphTo_p_gum__DiGraph, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__DiscreteVariable[] = {  {&_swigt__p_gum__DiscreteVariable, 0, 0, 0},  {&_swigt__p_gum__LabelizedVariable, _p_gum__LabelizedVariableTo_p_gum__DiscreteVariable, 0, 0},  {&_swigt__p_gum__RangeVariable, _p_gum__RangeVariableTo_p_gum__DiscreteVariable, 0, 0},  {&_swigt__p_gum__DiscretizedVariableT_double_t, _p_gum__DiscretizedVariableT_double_tTo_p_gum__DiscreteVariable, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__DiscretizedVariableT_double_t[] = {  {&_swigt__p_gum__DiscretizedVariableT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__DuplicateElement[] = {  {&_swigt__p_gum__DuplicateElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__DuplicateLabel[] = {  {&_swigt__p_gum__DuplicateLabel, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__Edge[] = {  {&_swigt__p_gum__Edge, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__EdgeGraphPart[] = {  {&_swigt__p_gum__UndiGraph, _p_gum__UndiGraphTo_p_gum__EdgeGraphPart, 0, 0},  {&_swigt__p_gum__MixedGraph, _p_gum__MixedGraphTo_p_gum__EdgeGraphPart, 0, 0},  {&_swigt__p_gum__EdgeGraphPart, 0, 0, 0},  {&_swigt__p_gum__CliqueGraph, _p_gum__CliqueGraphTo_p_gum__EdgeGraphPart, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__EmptyBSTree[] = {  {&_swigt__p_gum__EmptyBSTree, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__EmptySet[] = {  {&_swigt__p_gum__EmptySet, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__Exception[] = {  {&_swigt__p_gum__WrongType, _p_gum__WrongTypeTo_p_gum__Exception, 0, 0},  {&_swigt__p_gum__FatalError, _p_gum__FatalErrorTo_p_gum__Exception, 0, 0},  {&_swigt__p_gum__IncompatibleScoreApriori, _p_gum__IncompatibleScoreAprioriTo_p_gum__Exception, 0, 0},  {&_swigt__p_gum__PossiblyIncompatibleScoreApriori, _p_gum__PossiblyIncompatibleScoreAprioriTo_p_gum__Exception, 0, 0},  {&_swigt__p_gum__InvalidNode, _p_gum__InvalidNodeTo_p_gum__Exception, 0, 0},  {&_swigt__p_gum__FormatNotFound, _p_gum__FormatNotFoundTo_p_gum__Exception, 0, 0},  {&_swigt__p_gum__NotFound, _p_gum__NotFoundTo_p_gum__Exception, 0, 0},  {&_swigt__p_gum__GraphError, _p_gum__GraphErrorTo_p_gum__Exception, 0, 0},  {&_swigt__p_gum__DefaultInLabel, _p_gum__DefaultInLabelTo_p_gum__Exception, 0, 0},  {&_swigt__p_gum__InvalidDirectedCycle, _p_gum__InvalidDirectedCycleTo_p_gum__Exception, 0, 0},  {&_swigt__p_gum__DatabaseError, _p_gum__DatabaseErrorTo_p_gum__Exception, 0, 0},  {&_swigt__p_gum__ReferenceError, _p_gum__ReferenceErrorTo_p_gum__Exception, 0, 0},  {&_swigt__p_gum__OperationNotAllowed, _p_gum__OperationNotAllowedTo_p_gum__Exception, 0, 0},  {&_swigt__p_gum__FactoryError, _p_gum__FactoryErrorTo_p_gum__Exception, 0, 0},  {&_swigt__p_gum__CPTError, _p_gum__CPTErrorTo_p_gum__Exception, 0, 0},  {&_swigt__p_gum__InvalidArc, _p_gum__InvalidArcTo_p_gum__Exception, 0, 0},  {&_swigt__p_gum__SyntaxError, _p_gum__SyntaxErrorTo_p_gum__Exception, 0, 0},  {&_swigt__p_gum__OutOfUpperBound, _p_gum__OutOfUpperBoundTo_p_gum__Exception, 0, 0},  {&_swigt__p_gum__OutOfLowerBound, _p_gum__OutOfLowerBoundTo_p_gum__Exception, 0, 0},  {&_swigt__p_gum__SizeError, _p_gum__SizeErrorTo_p_gum__Exception, 0, 0},  {&_swigt__p_gum__TypeError, _p_gum__TypeErrorTo_p_gum__Exception, 0, 0},  {&_swigt__p_gum__DuplicateLabel, _p_gum__DuplicateLabelTo_p_gum__Exception, 0, 0},  {&_swigt__p_gum__LearningError, _p_gum__LearningErrorTo_p_gum__Exception, 0, 0},  {&_swigt__p_gum__InvalidEdge, _p_gum__InvalidEdgeTo_p_gum__Exception, 0, 0},  {&_swigt__p_gum__Exception, 0, 0, 0},  {&_swigt__p_gum__InvalidArgumentsNumber, _p_gum__InvalidArgumentsNumberTo_p_gum__Exception, 0, 0},  {&_swigt__p_gum__UndefinedIteratorValue, _p_gum__UndefinedIteratorValueTo_p_gum__Exception, 0, 0},  {&_swigt__p_gum__IdError, _p_gum__IdErrorTo_p_gum__Exception, 0, 0},  {&_swigt__p_gum__InvalidArgument, _p_gum__InvalidArgumentTo_p_gum__Exception, 0, 0},  {&_swigt__p_gum__NoNeighbour, _p_gum__NoNeighbourTo_p_gum__Exception, 0, 0},  {&_swigt__p_gum__OutOfBounds, _p_gum__OutOfBoundsTo_p_gum__Exception, 0, 0},  {&_swigt__p_gum__EmptyBSTree, _p_gum__EmptyBSTreeTo_p_gum__Exception, 0, 0},  {&_swigt__p_gum__CPTNoSumTo1, _p_gum__CPTNoSumTo1To_p_gum__Exception, 0, 0},  {&_swigt__p_gum__IncompatibleEvidence, _p_gum__IncompatibleEvidenceTo_p_gum__Exception, 0, 0},  {&_swigt__p_gum__NoParent, _p_gum__NoParentTo_p_gum__Exception, 0, 0},  {&_swigt__p_gum__WrongClassElement, _p_gum__WrongClassElementTo_p_gum__Exception, 0, 0},  {&_swigt__p_gum__DuplicateElement, _p_gum__DuplicateElementTo_p_gum__Exception, 0, 0},  {&_swigt__p_gum__NullElement, _p_gum__NullElementTo_p_gum__Exception, 0, 0},  {&_swigt__p_gum__UndefinedElement, _p_gum__UndefinedElementTo_p_gum__Exception, 0, 0},  {&_swigt__p_gum__NoChild, _p_gum__NoChildTo_p_gum__Exception, 0, 0},  {&_swigt__p_gum__FactoryInvalidState, _p_gum__FactoryInvalidStateTo_p_gum__Exception, 0, 0},  {&_swigt__p_gum__EmptySet, _p_gum__EmptySetTo_p_gum__Exception, 0, 0},  {&_swigt__p_gum__IOError, _p_gum__IOErrorTo_p_gum__Exception, 0, 0},  {&_swigt__p_gum__MissingVariableInDatabase, _p_gum__MissingVariableInDatabaseTo_p_gum__Exception, 0, 0},  {&_swigt__p_gum__UnknownLabelInDatabase, _p_gum__UnknownLabelInDatabaseTo_p_gum__Exception, 0, 0},  {&_swigt__p_gum__UndefinedIteratorKey, _p_gum__UndefinedIteratorKeyTo_p_gum__Exception, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__FactoryError[] = {  {&_swigt__p_gum__WrongClassElement, _p_gum__WrongClassElementTo_p_gum__FactoryError, 0, 0},  {&_swigt__p_gum__FactoryError, 0, 0, 0},  {&_swigt__p_gum__FactoryInvalidState, _p_gum__FactoryInvalidStateTo_p_gum__FactoryError, 0, 0},  {&_swigt__p_gum__TypeError, _p_gum__TypeErrorTo_p_gum__FactoryError, 0, 0},  {&_swigt__p_gum__WrongType, _p_gum__WrongTypeTo_p_gum__FactoryError, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__FactoryInvalidState[] = {  {&_swigt__p_gum__FactoryInvalidState, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__FatalError[] = {  {&_swigt__p_gum__FatalError, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__FormatNotFound[] = {  {&_swigt__p_gum__FormatNotFound, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__GibbsInferenceT_double_t[] = {  {&_swigt__p_gum__GibbsInferenceT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__GibbsKLT_double_t[] = {  {&_swigt__p_gum__GibbsKLT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__GraphError[] = {  {&_swigt__p_gum__InvalidDirectedCycle, _p_gum__InvalidDirectedCycleTo_p_gum__GraphError, 0, 0},  {&_swigt__p_gum__NoNeighbour, _p_gum__NoNeighbourTo_p_gum__GraphError, 0, 0},  {&_swigt__p_gum__InvalidNode, _p_gum__InvalidNodeTo_p_gum__GraphError, 0, 0},  {&_swigt__p_gum__GraphError, 0, 0, 0},  {&_swigt__p_gum__DefaultInLabel, _p_gum__DefaultInLabelTo_p_gum__GraphError, 0, 0},  {&_swigt__p_gum__NoChild, _p_gum__NoChildTo_p_gum__GraphError, 0, 0},  {&_swigt__p_gum__InvalidEdge, _p_gum__InvalidEdgeTo_p_gum__GraphError, 0, 0},  {&_swigt__p_gum__InvalidArc, _p_gum__InvalidArcTo_p_gum__GraphError, 0, 0},  {&_swigt__p_gum__NoParent, _p_gum__NoParentTo_p_gum__GraphError, 0, 0},  {&_swigt__p_gum__EmptyBSTree, _p_gum__EmptyBSTreeTo_p_gum__GraphError, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__IApproximationSchemeConfiguration[] = {  {&_swigt__p_gum__GibbsInferenceT_double_t, _p_gum__GibbsInferenceT_double_tTo_p_gum__IApproximationSchemeConfiguration, 0, 0},  {&_swigt__p_gum__GibbsKLT_double_t, _p_gum__GibbsKLT_double_tTo_p_gum__IApproximationSchemeConfiguration, 0, 0},  {&_swigt__p_gum__learning__BNLearnerT_double_t, _p_gum__learning__BNLearnerT_double_tTo_p_gum__IApproximationSchemeConfiguration, 0, 0},  {&_swigt__p_gum__IApproximationSchemeConfiguration, 0, 0, 0},  {&_swigt__p_gum__ApproximationScheme, _p_gum__ApproximationSchemeTo_p_gum__IApproximationSchemeConfiguration, 0, 0},  {&_swigt__p_gum__learning__genericBNLearner, _p_gum__learning__genericBNLearnerTo_p_gum__IApproximationSchemeConfiguration, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__IBayesNetT_double_t[] = {  {&_swigt__p_gum__IBayesNetT_double_t, 0, 0, 0},  {&_swigt__p_gum__BayesNetT_double_t, _p_gum__BayesNetT_double_tTo_p_gum__IBayesNetT_double_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__IOError[] = {  {&_swigt__p_gum__FormatNotFound, _p_gum__FormatNotFoundTo_p_gum__IOError, 0, 0},  {&_swigt__p_gum__IOError, 0, 0, 0},  {&_swigt__p_gum__SyntaxError, _p_gum__SyntaxErrorTo_p_gum__IOError, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__IdError[] = {  {&_swigt__p_gum__IdError, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__IncompatibleEvidence[] = {  {&_swigt__p_gum__IncompatibleEvidence, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__IncompatibleScoreApriori[] = {  {&_swigt__p_gum__IncompatibleScoreApriori, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__InfluenceDiagramInferenceT_double_t[] = {  {&_swigt__p_gum__InfluenceDiagramInferenceT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__InfluenceDiagramT_double_t[] = {  {&_swigt__p_gum__InfluenceDiagramT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__Instantiation[] = {  {&_swigt__p_gum__Instantiation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__InvalidArc[] = {  {&_swigt__p_gum__InvalidArc, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__InvalidArgument[] = {  {&_swigt__p_gum__InvalidArgument, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__InvalidArgumentsNumber[] = {  {&_swigt__p_gum__InvalidArgumentsNumber, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__InvalidDirectedCycle[] = {  {&_swigt__p_gum__InvalidDirectedCycle, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__InvalidEdge[] = {  {&_swigt__p_gum__InvalidEdge, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__InvalidNode[] = {  {&_swigt__p_gum__InvalidNode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__KLT_double_t[] = {  {&_swigt__p_gum__KLT_double_t, 0, 0, 0},  {&_swigt__p_gum__BruteForceKLT_double_t, _p_gum__BruteForceKLT_double_tTo_p_gum__KLT_double_t, 0, 0},  {&_swigt__p_gum__GibbsKLT_double_t, _p_gum__GibbsKLT_double_tTo_p_gum__KLT_double_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__LabelizedVariable[] = {  {&_swigt__p_gum__LabelizedVariable, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__LazyPropagationT_double_t[] = {  {&_swigt__p_gum__LazyPropagationT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__LearningError[] = {  {&_swigt__p_gum__MissingVariableInDatabase, _p_gum__MissingVariableInDatabaseTo_p_gum__LearningError, 0, 0},  {&_swigt__p_gum__UnknownLabelInDatabase, _p_gum__UnknownLabelInDatabaseTo_p_gum__LearningError, 0, 0},  {&_swigt__p_gum__LearningError, 0, 0, 0},  {&_swigt__p_gum__DatabaseError, _p_gum__DatabaseErrorTo_p_gum__LearningError, 0, 0},  {&_swigt__p_gum__IncompatibleScoreApriori, _p_gum__IncompatibleScoreAprioriTo_p_gum__LearningError, 0, 0},  {&_swigt__p_gum__PossiblyIncompatibleScoreApriori, _p_gum__PossiblyIncompatibleScoreAprioriTo_p_gum__LearningError, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__ListT_gum__PotentialT_double_t_const_p_t[] = {  {&_swigt__p_gum__ListT_gum__PotentialT_double_t_const_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__MissingVariableInDatabase[] = {  {&_swigt__p_gum__MissingVariableInDatabase, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__MixedGraph[] = {  {&_swigt__p_gum__MixedGraph, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__MultiDimArrayT_double_t[] = {{&_swigt__p_gum__MultiDimArrayT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__MultiDimAdressable[] = {  {&_swigt__p_gum__MultiDimAdressable, 0, 0, 0},  {&_swigt__p_gum__MultiDimContainerT_double_t, _p_gum__MultiDimContainerT_double_tTo_p_gum__MultiDimAdressable, 0, 0},  {&_swigt__p_gum__MultiDimImplementationT_double_t, _p_gum__MultiDimImplementationT_double_tTo_p_gum__MultiDimAdressable, 0, 0},  {&_swigt__p_gum__MultiDimWithOffsetT_double_t, _p_gum__MultiDimWithOffsetT_double_tTo_p_gum__MultiDimAdressable, 0, 0},  {&_swigt__p_gum__MultiDimArrayT_double_t, _p_gum__MultiDimArrayT_double_tTo_p_gum__MultiDimAdressable, 0, 0},  {&_swigt__p_gum__MultiDimDecoratorT_double_t, _p_gum__MultiDimDecoratorT_double_tTo_p_gum__MultiDimAdressable, 0, 0},  {&_swigt__p_gum__PotentialT_double_t, _p_gum__PotentialT_double_tTo_p_gum__MultiDimAdressable, 0, 0},  {&_swigt__p_gum__UtilityTableT_double_t, _p_gum__UtilityTableT_double_tTo_p_gum__MultiDimAdressable, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__MultiDimContainerT_double_t[] = {  {&_swigt__p_gum__MultiDimContainerT_double_t, 0, 0, 0},  {&_swigt__p_gum__MultiDimImplementationT_double_t, _p_gum__MultiDimImplementationT_double_tTo_p_gum__MultiDimContainerT_double_t, 0, 0},  {&_swigt__p_gum__MultiDimWithOffsetT_double_t, _p_gum__MultiDimWithOffsetT_double_tTo_p_gum__MultiDimContainerT_double_t, 0, 0},  {&_swigt__p_gum__MultiDimArrayT_double_t, _p_gum__MultiDimArrayT_double_tTo_p_gum__MultiDimContainerT_double_t, 0, 0},  {&_swigt__p_gum__MultiDimDecoratorT_double_t, _p_gum__MultiDimDecoratorT_double_tTo_p_gum__MultiDimContainerT_double_t, 0, 0},  {&_swigt__p_gum__PotentialT_double_t, _p_gum__PotentialT_double_tTo_p_gum__MultiDimContainerT_double_t, 0, 0},  {&_swigt__p_gum__UtilityTableT_double_t, _p_gum__UtilityTableT_double_tTo_p_gum__MultiDimContainerT_double_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__MultiDimDecoratorT_double_t[] = {  {&_swigt__p_gum__MultiDimDecoratorT_double_t, 0, 0, 0},  {&_swigt__p_gum__PotentialT_double_t, _p_gum__PotentialT_double_tTo_p_gum__MultiDimDecoratorT_double_t, 0, 0},  {&_swigt__p_gum__UtilityTableT_double_t, _p_gum__UtilityTableT_double_tTo_p_gum__MultiDimDecoratorT_double_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__MultiDimImplementationT_double_t[] = {  {&_swigt__p_gum__MultiDimImplementationT_double_t, 0, 0, 0},  {&_swigt__p_gum__MultiDimWithOffsetT_double_t, _p_gum__MultiDimWithOffsetT_double_tTo_p_gum__MultiDimImplementationT_double_t, 0, 0},  {&_swigt__p_gum__MultiDimArrayT_double_t, _p_gum__MultiDimArrayT_double_tTo_p_gum__MultiDimImplementationT_double_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__MultiDimInterface[] = {  {&_swigt__p_gum__MultiDimInterface, 0, 0, 0},  {&_swigt__p_gum__MultiDimAdressable, _p_gum__MultiDimAdressableTo_p_gum__MultiDimInterface, 0, 0},  {&_swigt__p_gum__MultiDimContainerT_double_t, _p_gum__MultiDimContainerT_double_tTo_p_gum__MultiDimInterface, 0, 0},  {&_swigt__p_gum__MultiDimImplementationT_double_t, _p_gum__MultiDimImplementationT_double_tTo_p_gum__MultiDimInterface, 0, 0},  {&_swigt__p_gum__MultiDimWithOffsetT_double_t, _p_gum__MultiDimWithOffsetT_double_tTo_p_gum__MultiDimInterface, 0, 0},  {&_swigt__p_gum__MultiDimArrayT_double_t, _p_gum__MultiDimArrayT_double_tTo_p_gum__MultiDimInterface, 0, 0},  {&_swigt__p_gum__MultiDimDecoratorT_double_t, _p_gum__MultiDimDecoratorT_double_tTo_p_gum__MultiDimInterface, 0, 0},  {&_swigt__p_gum__PotentialT_double_t, _p_gum__PotentialT_double_tTo_p_gum__MultiDimInterface, 0, 0},  {&_swigt__p_gum__UtilityTableT_double_t, _p_gum__UtilityTableT_double_tTo_p_gum__MultiDimInterface, 0, 0},  {&_swigt__p_gum__Instantiation, _p_gum__InstantiationTo_p_gum__MultiDimInterface, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__MultiDimWithOffsetT_double_t[] = {  {&_swigt__p_gum__MultiDimWithOffsetT_double_t, 0, 0, 0},  {&_swigt__p_gum__MultiDimArrayT_double_t, _p_gum__MultiDimArrayT_double_tTo_p_gum__MultiDimWithOffsetT_double_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__NoChild[] = {  {&_swigt__p_gum__NoChild, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__NoNeighbour[] = {  {&_swigt__p_gum__NoNeighbour, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__NoParent[] = {  {&_swigt__p_gum__NoParent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__NodeGraphPart[] = {  {&_swigt__p_gum__DiGraph, _p_gum__DiGraphTo_p_gum__NodeGraphPart, 0, 0},  {&_swigt__p_gum__UndiGraph, _p_gum__UndiGraphTo_p_gum__NodeGraphPart, 0, 0},  {&_swigt__p_gum__DAG, _p_gum__DAGTo_p_gum__NodeGraphPart, 0, 0},  {&_swigt__p_gum__MixedGraph, _p_gum__MixedGraphTo_p_gum__NodeGraphPart, 0, 0},  {&_swigt__p_gum__NodeGraphPart, 0, 0, 0},  {&_swigt__p_gum__CliqueGraph, _p_gum__CliqueGraphTo_p_gum__NodeGraphPart, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__NotFound[] = {  {&_swigt__p_gum__NotFound, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__NullElement[] = {  {&_swigt__p_gum__NullElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__OperationNotAllowed[] = {  {&_swigt__p_gum__OperationNotAllowed, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__OutOfBounds[] = {  {&_swigt__p_gum__OutOfLowerBound, _p_gum__OutOfLowerBoundTo_p_gum__OutOfBounds, 0, 0},  {&_swigt__p_gum__OutOfUpperBound, _p_gum__OutOfUpperBoundTo_p_gum__OutOfBounds, 0, 0},  {&_swigt__p_gum__OutOfBounds, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__OutOfLowerBound[] = {  {&_swigt__p_gum__OutOfLowerBound, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__OutOfUpperBound[] = {  {&_swigt__p_gum__OutOfUpperBound, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__PossiblyIncompatibleScoreApriori[] = {  {&_swigt__p_gum__PossiblyIncompatibleScoreApriori, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__PotentialT_double_t[] = {  {&_swigt__p_gum__PotentialT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__RangeVariable[] = {  {&_swigt__p_gum__RangeVariable, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__ReferenceError[] = {  {&_swigt__p_gum__DuplicateElement, _p_gum__DuplicateElementTo_p_gum__ReferenceError, 0, 0},  {&_swigt__p_gum__DuplicateLabel, _p_gum__DuplicateLabelTo_p_gum__ReferenceError, 0, 0},  {&_swigt__p_gum__OutOfLowerBound, _p_gum__OutOfLowerBoundTo_p_gum__ReferenceError, 0, 0},  {&_swigt__p_gum__OutOfUpperBound, _p_gum__OutOfUpperBoundTo_p_gum__ReferenceError, 0, 0},  {&_swigt__p_gum__ReferenceError, 0, 0, 0},  {&_swigt__p_gum__OutOfBounds, _p_gum__OutOfBoundsTo_p_gum__ReferenceError, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__SequenceT_gum__DiscreteVariable_const_p_t[] = {  {&_swigt__p_gum__SequenceT_gum__DiscreteVariable_const_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__SequenceT_unsigned_int_t[] = {  {&_swigt__p_gum__SequenceT_unsigned_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__SizeError[] = {  {&_swigt__p_gum__SizeError, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__SyntaxError[] = {  {&_swigt__p_gum__SyntaxError, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__TypeError[] = {  {&_swigt__p_gum__TypeError, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__UndefinedElement[] = {  {&_swigt__p_gum__UndefinedElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__UndefinedIteratorKey[] = {  {&_swigt__p_gum__UndefinedIteratorKey, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__UndefinedIteratorValue[] = {  {&_swigt__p_gum__UndefinedIteratorValue, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__UndiGraph[] = {  {&_swigt__p_gum__UndiGraph, 0, 0, 0},  {&_swigt__p_gum__MixedGraph, _p_gum__MixedGraphTo_p_gum__UndiGraph, 0, 0},  {&_swigt__p_gum__CliqueGraph, _p_gum__CliqueGraphTo_p_gum__UndiGraph, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__UnknownLabelInDatabase[] = {  {&_swigt__p_gum__UnknownLabelInDatabase, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__UtilityTableT_double_t[] = {  {&_swigt__p_gum__UtilityTableT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__Variable[] = {  {&_swigt__p_gum__Variable, 0, 0, 0},  {&_swigt__p_gum__DiscreteVariable, _p_gum__DiscreteVariableTo_p_gum__Variable, 0, 0},  {&_swigt__p_gum__LabelizedVariable, _p_gum__LabelizedVariableTo_p_gum__Variable, 0, 0},  {&_swigt__p_gum__RangeVariable, _p_gum__RangeVariableTo_p_gum__Variable, 0, 0},  {&_swigt__p_gum__DiscretizedVariableT_double_t, _p_gum__DiscretizedVariableT_double_tTo_p_gum__Variable, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__VariableNodeMap[] = {  {&_swigt__p_gum__VariableNodeMap, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__WrongClassElement[] = {  {&_swigt__p_gum__WrongClassElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__WrongType[] = {  {&_swigt__p_gum__WrongType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__credal__CNLoopyPropagationT_double_t[] = {  {&_swigt__p_gum__credal__CNLoopyPropagationT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__credal__CNMonteCarloSamplingT_double_gum__LazyPropagationT_double_t_t[] = {  {&_swigt__p_gum__credal__CNMonteCarloSamplingT_double_gum__LazyPropagationT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__credal__CredalNetT_double_t[] = {  {&_swigt__p_gum__credal__CredalNetT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__learning__BNLearnerT_double_t[] = {  {&_swigt__p_gum__learning__BNLearnerT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__learning__DatabaseVectInRAM[] = {  {&_swigt__p_gum__learning__DatabaseVectInRAM, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gum__learning__genericBNLearner[] = {  {&_swigt__p_gum__learning__BNLearnerT_double_t, _p_gum__learning__BNLearnerT_double_tTo_p_gum__learning__genericBNLearner, 0, 0},  {&_swigt__p_gum__learning__genericBNLearner, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iterator_category[] = {  {&_swigt__p_iterator_category, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_msg[] = {  {&_swigt__p_msg, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_node_const_iterator[] = {  {&_swigt__p_node_const_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_node_const_iterator_safe[] = {  {&_swigt__p_node_const_iterator_safe, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_node_iterator[] = {  {&_swigt__p_node_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_node_iterator_safe[] = {  {&_swigt__p_node_iterator_safe, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_PyObject[] = {  {&_swigt__p_p_PyObject, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pointer[] = {  {&_swigt__p_pointer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_reference[] = {  {&_swigt__p_reference, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_type[] = {  {&_swigt__p_size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_double_t[] = {  {&_swigt__p_std__allocatorT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_std__string_t[] = {  {&_swigt__p_std__allocatorT_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__default_random_engine[] = {  {&_swigt__p_std__default_random_engine, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__functionT_double_fdoubleF_t[] = {  {&_swigt__p_std__functionT_double_fdoubleF_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__functionT_double_fdouble_doubleF_t[] = {  {&_swigt__p_std__functionT_double_fdouble_doubleF_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__invalid_argument[] = {  {&_swigt__p_std__invalid_argument, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__ostream[] = {  {&_swigt__p_std__ostream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string[] = {  {&_swigt__p_std__string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_PythonLoadListener_std__allocatorT_PythonLoadListener_t_t[] = {  {&_swigt__p_std__vectorT_PythonLoadListener_std__allocatorT_PythonLoadListener_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_double_std__allocatorT_double_t_t[] = {  {&_swigt__p_std__vectorT_double_std__allocatorT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_gum__DiscreteVariable_const_p_std__allocatorT_gum__DiscreteVariable_const_p_t_t[] = {  {&_swigt__p_std__vectorT_gum__DiscreteVariable_const_p_std__allocatorT_gum__DiscreteVariable_const_p_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__string_std__allocatorT_std__string_t_t[] = {  {&_swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t[] = {  {&_swigt__p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_t_t[] = {  {&_swigt__p_std__vectorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t[] = {  {&_swigt__p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t[] = {  {&_swigt__p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_swig__SwigPyIterator[] = {  {&_swigt__p_swig__SwigPyIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long[] = {  {&_swigt__p_unsigned_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_value_type[] = {  {&_swigt__p_value_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_void[] = {  {&_swigt__p_void, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_ArcIterator,
  _swigc__p_BNGenerator,
  _swigc__p_EdgeIterator,
  _swigc__p_IDGenerator,
  _swigc__p_JTGenerator,
  _swigc__p_NodeConstIterator,
  _swigc__p_NodeConstIteratorSafe,
  _swigc__p_NodeIterator,
  _swigc__p_NodeIteratorSafe,
  _swigc__p_NodePropertyT_gum__PotentialT_double_t_const_p_t,
  _swigc__p_NodePropertyT_gum__SequenceT_std__string_t_t,
  _swigc__p_NodePropertyT_std__vectorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_t_t_t,
  _swigc__p_NodePropertyT_unsigned_int_t,
  _swigc__p_NodePropertyT_unsigned_long_t,
  _swigc__p_PRMexplorer,
  _swigc__p_PythonApproximationListener,
  _swigc__p_PythonBNListener,
  _swigc__p_PythonLoadListener,
  _swigc__p_RelevantPotentialsFinderType,
  _swigc__p_SetT_gum__Arc_t,
  _swigc__p_SetT_gum__Arc_t__const_iterator,
  _swigc__p_SetT_gum__Edge_t,
  _swigc__p_SetT_gum__Edge_t__const_iterator,
  _swigc__p_SetT_gum__PotentialT_double_t_const_p_t,
  _swigc__p_SetT_unsigned_int_t,
  _swigc__p_SetT_unsigned_int_t__const_iterator,
  _swigc__p_Triangulation,
  _swigc__p_allocator_type,
  _swigc__p_cArcP,
  _swigc__p_char,
  _swigc__p_const_pointer,
  _swigc__p_const_reference,
  _swigc__p_difference_type,
  _swigc__p_gum__ApproximationScheme,
  _swigc__p_gum__Arc,
  _swigc__p_gum__ArcGraphPart,
  _swigc__p_gum__BayesNetInferenceT_double_t,
  _swigc__p_gum__BayesNetT_double_t,
  _swigc__p_gum__BruteForceKLT_double_t,
  _swigc__p_gum__CPTError,
  _swigc__p_gum__CPTNoSumTo1,
  _swigc__p_gum__CliqueGraph,
  _swigc__p_gum__DAG,
  _swigc__p_gum__DAGmodel,
  _swigc__p_gum__DatabaseError,
  _swigc__p_gum__DefaultInLabel,
  _swigc__p_gum__DiGraph,
  _swigc__p_gum__DiscreteVariable,
  _swigc__p_gum__DiscretizedVariableT_double_t,
  _swigc__p_gum__DuplicateElement,
  _swigc__p_gum__DuplicateLabel,
  _swigc__p_gum__Edge,
  _swigc__p_gum__EdgeGraphPart,
  _swigc__p_gum__EmptyBSTree,
  _swigc__p_gum__EmptySet,
  _swigc__p_gum__Exception,
  _swigc__p_gum__FactoryError,
  _swigc__p_gum__FactoryInvalidState,
  _swigc__p_gum__FatalError,
  _swigc__p_gum__FormatNotFound,
  _swigc__p_gum__GibbsInferenceT_double_t,
  _swigc__p_gum__GibbsKLT_double_t,
  _swigc__p_gum__GraphError,
  _swigc__p_gum__IApproximationSchemeConfiguration,
  _swigc__p_gum__IBayesNetT_double_t,
  _swigc__p_gum__IOError,
  _swigc__p_gum__IdError,
  _swigc__p_gum__IncompatibleEvidence,
  _swigc__p_gum__IncompatibleScoreApriori,
  _swigc__p_gum__InfluenceDiagramInferenceT_double_t,
  _swigc__p_gum__InfluenceDiagramT_double_t,
  _swigc__p_gum__Instantiation,
  _swigc__p_gum__InvalidArc,
  _swigc__p_gum__InvalidArgument,
  _swigc__p_gum__InvalidArgumentsNumber,
  _swigc__p_gum__InvalidDirectedCycle,
  _swigc__p_gum__InvalidEdge,
  _swigc__p_gum__InvalidNode,
  _swigc__p_gum__KLT_double_t,
  _swigc__p_gum__LabelizedVariable,
  _swigc__p_gum__LazyPropagationT_double_t,
  _swigc__p_gum__LearningError,
  _swigc__p_gum__ListT_gum__PotentialT_double_t_const_p_t,
  _swigc__p_gum__MissingVariableInDatabase,
  _swigc__p_gum__MixedGraph,
  _swigc__p_gum__MultiDimAdressable,
  _swigc__p_gum__MultiDimArrayT_double_t,
  _swigc__p_gum__MultiDimContainerT_double_t,
  _swigc__p_gum__MultiDimDecoratorT_double_t,
  _swigc__p_gum__MultiDimImplementationT_double_t,
  _swigc__p_gum__MultiDimInterface,
  _swigc__p_gum__MultiDimWithOffsetT_double_t,
  _swigc__p_gum__NoChild,
  _swigc__p_gum__NoNeighbour,
  _swigc__p_gum__NoParent,
  _swigc__p_gum__NodeGraphPart,
  _swigc__p_gum__NotFound,
  _swigc__p_gum__NullElement,
  _swigc__p_gum__OperationNotAllowed,
  _swigc__p_gum__OutOfBounds,
  _swigc__p_gum__OutOfLowerBound,
  _swigc__p_gum__OutOfUpperBound,
  _swigc__p_gum__PossiblyIncompatibleScoreApriori,
  _swigc__p_gum__PotentialT_double_t,
  _swigc__p_gum__RangeVariable,
  _swigc__p_gum__ReferenceError,
  _swigc__p_gum__SequenceT_gum__DiscreteVariable_const_p_t,
  _swigc__p_gum__SequenceT_unsigned_int_t,
  _swigc__p_gum__SizeError,
  _swigc__p_gum__SyntaxError,
  _swigc__p_gum__TypeError,
  _swigc__p_gum__UndefinedElement,
  _swigc__p_gum__UndefinedIteratorKey,
  _swigc__p_gum__UndefinedIteratorValue,
  _swigc__p_gum__UndiGraph,
  _swigc__p_gum__UnknownLabelInDatabase,
  _swigc__p_gum__UtilityTableT_double_t,
  _swigc__p_gum__Variable,
  _swigc__p_gum__VariableNodeMap,
  _swigc__p_gum__WrongClassElement,
  _swigc__p_gum__WrongType,
  _swigc__p_gum__credal__CNLoopyPropagationT_double_t,
  _swigc__p_gum__credal__CNMonteCarloSamplingT_double_gum__LazyPropagationT_double_t_t,
  _swigc__p_gum__credal__CredalNetT_double_t,
  _swigc__p_gum__learning__BNLearnerT_double_t,
  _swigc__p_gum__learning__DatabaseVectInRAM,
  _swigc__p_gum__learning__genericBNLearner,
  _swigc__p_iterator_category,
  _swigc__p_msg,
  _swigc__p_node_const_iterator,
  _swigc__p_node_const_iterator_safe,
  _swigc__p_node_iterator,
  _swigc__p_node_iterator_safe,
  _swigc__p_p_PyObject,
  _swigc__p_pointer,
  _swigc__p_reference,
  _swigc__p_size_type,
  _swigc__p_std__allocatorT_double_t,
  _swigc__p_std__allocatorT_std__string_t,
  _swigc__p_std__default_random_engine,
  _swigc__p_std__functionT_double_fdoubleF_t,
  _swigc__p_std__functionT_double_fdouble_doubleF_t,
  _swigc__p_std__invalid_argument,
  _swigc__p_std__ostream,
  _swigc__p_std__string,
  _swigc__p_std__vectorT_PythonLoadListener_std__allocatorT_PythonLoadListener_t_t,
  _swigc__p_std__vectorT_double_std__allocatorT_double_t_t,
  _swigc__p_std__vectorT_gum__DiscreteVariable_const_p_std__allocatorT_gum__DiscreteVariable_const_p_t_t,
  _swigc__p_std__vectorT_std__string_std__allocatorT_std__string_t_t,
  _swigc__p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t,
  _swigc__p_std__vectorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t_t_t,
  _swigc__p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,
  _swigc__p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t,
  _swigc__p_swig__SwigPyIterator,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long,
  _swigc__p_value_type,
  _swigc__p_void,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{0, 0, 0, 0.0, 0, 0}};

#ifdef __cplusplus
}
#endif
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;
  
  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);
    
    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }
  
  /* When multiple interpreters are used, a module could have already been initialized in
       a different interpreter, but not yet have a pointer in this interpreter.
       In this case, we do not want to continue adding types... everything should be
       set up already */
  if (init == 0) return;
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* gum::Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif



#ifdef __cplusplus
extern "C" {
#endif
  
  /* Python-specific SWIG API */
#define SWIG_newvarlink()                             SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)
  
  /* -----------------------------------------------------------------------------
   * global variable support code.
   * ----------------------------------------------------------------------------- */
  
  typedef struct swig_globalvar {
    char       *name;                  /* Name of global variable */
    PyObject *(*get_attr)(void);       /* Return the current value */
    int       (*set_attr)(PyObject *); /* gum::Set the value */
    struct swig_globalvar *next;
  } swig_globalvar;
  
  typedef struct swig_varlinkobject {
    PyObject_HEAD
    swig_globalvar *vars;
  } swig_varlinkobject;
  
  SWIGINTERN PyObject *
  swig_varlink_repr(swig_varlinkobject *SWIGUNUSEDPARM(v)) {
#if PY_VERSION_HEX >= 0x03000000
    return PyUnicode_InternFromString("<Swig global variables>");
#else
    return PyString_FromString("<Swig global variables>");
#endif
  }
  
  SWIGINTERN PyObject *
  swig_varlink_str(swig_varlinkobject *v) {
#if PY_VERSION_HEX >= 0x03000000
    PyObject *str = PyUnicode_InternFromString("(");
    PyObject *tail;
    PyObject *joined;
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      tail = PyUnicode_FromString(var->name);
      joined = PyUnicode_Concat(str, tail);
      Py_DecRef(str);
      Py_DecRef(tail);
      str = joined;
      if (var->next) {
        tail = PyUnicode_InternFromString(", ");
        joined = PyUnicode_Concat(str, tail);
        Py_DecRef(str);
        Py_DecRef(tail);
        str = joined;
      }
    }
    tail = PyUnicode_InternFromString(")");
    joined = PyUnicode_Concat(str, tail);
    Py_DecRef(str);
    Py_DecRef(tail);
    str = joined;
#else
    PyObject *str = PyString_FromString("(");
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      PyString_ConcatAndDel(&str,PyString_FromString(var->name));
      if (var->next) PyString_ConcatAndDel(&str,PyString_FromString(", "));
    }
    PyString_ConcatAndDel(&str,PyString_FromString(")"));
#endif
    return str;
  }
  
  SWIGINTERN int
  swig_varlink_print(swig_varlinkobject *v, FILE *fp, int SWIGUNUSEDPARM(flags)) {
    char *tmp;
    PyObject *str = swig_varlink_str(v);
    fprintf(fp,"Swig global variables ");
    fprintf(fp,"%s\n", tmp = SWIG_Python_str_AsChar(str));
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(str);
    return 0;
  }
  
  SWIGINTERN void
  swig_varlink_dealloc(swig_varlinkobject *v) {
    swig_globalvar *var = v->vars;
    while (var) {
      swig_globalvar *n = var->next;
      free(var->name);
      free(var);
      var = n;
    }
  }
  
  SWIGINTERN PyObject *
  swig_varlink_getattr(swig_varlinkobject *v, char *n) {
    PyObject *res = NULL;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->get_attr)();
        break;
      }
      var = var->next;
    }
    if (res == NULL && !PyErr_Occurred()) {
      PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
    }
    return res;
  }
  
  SWIGINTERN int
  swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
    int res = 1;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->set_attr)(p);
        break;
      }
      var = var->next;
    }
    if (res == 1 && !PyErr_Occurred()) {
      PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
    }
    return res;
  }
  
  SWIGINTERN PyTypeObject*
  swig_varlink_type(void) {
    static char varlink__doc__[] = "Swig var link object";
    static PyTypeObject varlink_type;
    static int type_init = 0;
    if (!type_init) {
      const PyTypeObject tmp = {
#if PY_VERSION_HEX >= 0x03000000
        PyVarObject_HEAD_INIT(NULL, 0)
#else
        PyObject_HEAD_INIT(NULL)
        0,                                  /* ob_size */
#endif
        (char *)"swigvarlink",              /* tp_name */
        sizeof(swig_varlinkobject),         /* tp_basicsize */
        0,                                  /* tp_itemsize */
        (destructor) swig_varlink_dealloc,  /* tp_dealloc */
        (printfunc) swig_varlink_print,     /* tp_print */
        (getattrfunc) swig_varlink_getattr, /* tp_getattr */
        (setattrfunc) swig_varlink_setattr, /* tp_setattr */
        0,                                  /* tp_compare */
        (reprfunc) swig_varlink_repr,       /* tp_repr */
        0,                                  /* tp_as_number */
        0,                                  /* tp_as_sequence */
        0,                                  /* tp_as_mapping */
        0,                                  /* tp_hash */
        0,                                  /* tp_call */
        (reprfunc) swig_varlink_str,        /* tp_str */
        0,                                  /* tp_getattro */
        0,                                  /* tp_setattro */
        0,                                  /* tp_as_buffer */
        0,                                  /* tp_flags */
        varlink__doc__,                     /* tp_doc */
        0,                                  /* tp_traverse */
        0,                                  /* tp_clear */
        0,                                  /* tp_richcompare */
        0,                                  /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
        0,                                  /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
        0,                                  /* tp_version_tag */
#endif
#if PY_VERSION_HEX >= 0x03040000
        0,                                  /* tp_finalize */
#endif
#ifdef COUNT_ALLOCS
        0,                                  /* tp_allocs */
        0,                                  /* tp_frees */
        0,                                  /* tp_maxalloc */
#if PY_VERSION_HEX >= 0x02050000
        0,                                  /* tp_prev */
#endif
        0                                   /* tp_next */
#endif
      };
      varlink_type = tmp;
      type_init = 1;
#if PY_VERSION_HEX < 0x02020000
      varlink_type.ob_type = &PyType_Type;
#else
      if (PyType_Ready(&varlink_type) < 0)
      return NULL;
#endif
    }
    return &varlink_type;
  }
  
  /* Create a variable linking object for use later */
  SWIGINTERN PyObject *
  SWIG_Python_newvarlink(void) {
    swig_varlinkobject *result = PyObject_NEW(swig_varlinkobject, swig_varlink_type());
    if (result) {
      result->vars = 0;
    }
    return ((PyObject*) result);
  }
  
  SWIGINTERN void 
  SWIG_Python_addvarlink(PyObject *p, char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
    swig_varlinkobject *v = (swig_varlinkobject *) p;
    swig_globalvar *gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
    if (gv) {
      size_t size = strlen(name)+1;
      gv->name = (char *)malloc(size);
      if (gv->name) {
        strncpy(gv->name,name,size);
        gv->get_attr = get_attr;
        gv->set_attr = set_attr;
        gv->next = v->vars;
      }
    }
    v->vars = gv;
  }
  
  SWIGINTERN PyObject *
  SWIG_globals(void) {
    static PyObject *_SWIG_globals = 0; 
    if (!_SWIG_globals) _SWIG_globals = SWIG_newvarlink();  
    return _SWIG_globals;
  }
  
  /* -----------------------------------------------------------------------------
   * constants/methods manipulation
   * ----------------------------------------------------------------------------- */
  
  /* Install Constants */
  SWIGINTERN void
  SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
    PyObject *obj = 0;
    size_t i;
    for (i = 0; constants[i].type; ++i) {
      switch(constants[i].type) {
      case SWIG_PY_POINTER:
        obj = SWIG_InternalNewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
        break;
      case SWIG_PY_BINARY:
        obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
        break;
      default:
        obj = 0;
        break;
      }
      if (obj) {
        PyDict_SetItemString(d, constants[i].name, obj);
        Py_DECREF(obj);
      }
    }
  }
  
  /* -----------------------------------------------------------------------------*/
  /* Fix SwigMethods to carry the callback ptrs when needed */
  /* -----------------------------------------------------------------------------*/
  
  SWIGINTERN void
  SWIG_Python_FixMethods(PyMethodDef *methods,
    swig_const_info *const_table,
    swig_type_info **types,
    swig_type_info **types_initial) {
    size_t i;
    for (i = 0; methods[i].ml_name; ++i) {
      const char *c = methods[i].ml_doc;
      if (!c) continue;
      c = strstr(c, "swig_ptr: ");
      if (c) {
        int j;
        swig_const_info *ci = 0;
        const char *name = c + 10;
        for (j = 0; const_table[j].type; ++j) {
          if (strncmp(const_table[j].name, name, 
              strlen(const_table[j].name)) == 0) {
            ci = &(const_table[j]);
            break;
          }
        }
        if (ci) {
          void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue : 0;
          if (ptr) {
            size_t shift = (ci->ptype) - types;
            swig_type_info *ty = types_initial[shift];
            size_t ldoc = (c - methods[i].ml_doc);
            size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
            char *ndoc = (char*)malloc(ldoc + lptr + 10);
            if (ndoc) {
              char *buff = ndoc;
              strncpy(buff, methods[i].ml_doc, ldoc);
              buff += ldoc;
              strncpy(buff, "swig_ptr: ", 10);
              buff += 10;
              SWIG_PackVoidPtr(buff, ptr, ty->name, lptr);
              methods[i].ml_doc = ndoc;
            }
          }
        }
      }
    }
  } 
  
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

#ifdef __cplusplus
extern "C"
#endif

SWIGEXPORT 
#if PY_VERSION_HEX >= 0x03000000
PyObject*
#else
void
#endif
SWIG_init(void) {
  PyObject *m, *d, *md;
#if PY_VERSION_HEX >= 0x03000000
  static struct PyModuleDef SWIG_module = {
# if PY_VERSION_HEX >= 0x03020000
    PyModuleDef_HEAD_INIT,
# else
    {
      PyObject_HEAD_INIT(NULL)
      NULL, /* m_init */
      0,    /* m_index */
      NULL, /* m_copy */
    },
# endif
    (char *) SWIG_name,
    NULL,
    -1,
    SwigMethods,
    NULL,
    NULL,
    NULL,
    NULL
  };
#endif
  
#if defined(SWIGPYTHON_BUILTIN)
  static SwigPyClientData SwigPyObject_clientdata = {
    0, 0, 0, 0, 0, 0, 0
  };
  static PyGetSetDef this_getset_def = {
    (char *)"this", &SwigPyBuiltin_ThisClosure, NULL, NULL, NULL
  };
  static SwigPyGetSet thisown_getset_closure = {
    (PyCFunction) SwigPyObject_own,
    (PyCFunction) SwigPyObject_own
  };
  static PyGetSetDef thisown_getset_def = {
    (char *)"thisown", SwigPyBuiltin_GetterClosure, SwigPyBuiltin_SetterClosure, NULL, &thisown_getset_closure
  };
  PyObject *metatype_args;
  PyTypeObject *builtin_pytype;
  int builtin_base_count;
  swig_type_info *builtin_basetype;
  PyObject *tuple;
  PyGetSetDescrObject *static_getset;
  PyTypeObject *metatype;
  SwigPyClientData *cd;
  PyObject *public_interface, *public_symbol;
  PyObject *this_descr;
  PyObject *thisown_descr;
  PyObject *self = 0;
  int i;
  
  (void)builtin_pytype;
  (void)builtin_base_count;
  (void)builtin_basetype;
  (void)tuple;
  (void)static_getset;
  (void)self;
  
  /* metatype is used to implement static member variables. */
  metatype_args = Py_BuildValue("(s(O){})", "SwigPyObjectType", &PyType_Type);
  assert(metatype_args);
  metatype = (PyTypeObject *) PyType_Type.tp_call((PyObject *) &PyType_Type, metatype_args, NULL);
  assert(metatype);
  Py_DECREF(metatype_args);
  metatype->tp_setattro = (setattrofunc) &SwigPyObjectType_setattro;
  assert(PyType_Ready(metatype) >= 0);
#endif
  
  /* Fix SwigMethods to carry the callback ptrs when needed */
  SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_type_initial);
  
#if PY_VERSION_HEX >= 0x03000000
  m = PyModule_Create(&SWIG_module);
#else
  m = Py_InitModule((char *) SWIG_name, SwigMethods);
#endif
  
  md = d = PyModule_GetDict(m);
  (void)md;
  
  SWIG_InitializeModule(0);
  
#ifdef SWIGPYTHON_BUILTIN
  SwigPyObject_stype = SWIG_MangledTypeQuery("_p_SwigPyObject");
  assert(SwigPyObject_stype);
  cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
  if (!cd) {
    SwigPyObject_stype->clientdata = &SwigPyObject_clientdata;
    SwigPyObject_clientdata.pytype = SwigPyObject_TypeOnce();
  } else if (SwigPyObject_TypeOnce()->tp_basicsize != cd->pytype->tp_basicsize) {
    PyErr_SetString(PyExc_RuntimeError, "Import error: attempted to load two incompatible swig-generated modules.");
# if PY_VERSION_HEX >= 0x03000000
    return NULL;
# else
    return;
# endif
  }
  
  /* All objects have a 'this' attribute */
  this_descr = PyDescr_NewGetSet(SwigPyObject_type(), &this_getset_def);
  (void)this_descr;
  
  /* All objects have a 'thisown' attribute */
  thisown_descr = PyDescr_NewGetSet(SwigPyObject_type(), &thisown_getset_def);
  (void)thisown_descr;
  
  public_interface = PyList_New(0);
  public_symbol = 0;
  (void)public_symbol;
  
  PyDict_SetItemString(md, "__all__", public_interface);
  Py_DECREF(public_interface);
  for (i = 0; SwigMethods[i].ml_name != NULL; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, SwigMethods[i].ml_name);
  for (i = 0; swig_const_table[i].name != 0; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, swig_const_table[i].name);
#endif
  
  SWIG_InstallConstants(d,swig_const_table);
  
  SWIG_Python_SetConstant(d, "DiscreteVariable_VarType_Discretized",SWIG_From_int(static_cast< int >(gum::DiscreteVariable::VarType::Discretized)));
  SWIG_Python_SetConstant(d, "DiscreteVariable_VarType_Labelized",SWIG_From_int(static_cast< int >(gum::DiscreteVariable::VarType::Labelized)));
  SWIG_Python_SetConstant(d, "DiscreteVariable_VarType_Range",SWIG_From_int(static_cast< int >(gum::DiscreteVariable::VarType::Range)));
  SWIG_Python_SetConstant(d, "INC_MARKS_ARRAY",SWIG_From_int(static_cast< int >(4)));
  SWIG_Python_SetConstant(d, "GUM_DEFAULT_ITERATOR_NUMBER",SWIG_From_int(static_cast< int >(4)));
  PyDict_SetItemString(md,(char *)"cvar", SWIG_globals());
  SWIG_addvarlink(SWIG_globals(),(char *)"__list_end_safe",Swig_var___list_end_safe_get, Swig_var___list_end_safe_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"__list_end",Swig_var___list_end_get, Swig_var___list_end_set);
  SWIG_Python_SetConstant(d, "FindBarrenNodesType_FIND_NO_BARREN_NODES",SWIG_From_int(static_cast< int >(gum::FindBarrenNodesType::FIND_NO_BARREN_NODES)));
  SWIG_Python_SetConstant(d, "FindBarrenNodesType_FIND_BARREN_NODES",SWIG_From_int(static_cast< int >(gum::FindBarrenNodesType::FIND_BARREN_NODES)));
  SWIG_Python_SetConstant(d, "BayesNetInference_double_StateOfInference_OutdatedBNStructure",SWIG_From_int(static_cast< int >(gum::BayesNetInference< double >::StateOfInference::OutdatedBNStructure)));
  SWIG_Python_SetConstant(d, "BayesNetInference_double_StateOfInference_OutdatedBNPotentials",SWIG_From_int(static_cast< int >(gum::BayesNetInference< double >::StateOfInference::OutdatedBNPotentials)));
  SWIG_Python_SetConstant(d, "BayesNetInference_double_StateOfInference_Ready4Inference",SWIG_From_int(static_cast< int >(gum::BayesNetInference< double >::StateOfInference::Ready4Inference)));
  SWIG_Python_SetConstant(d, "BayesNetInference_double_StateOfInference_Done",SWIG_From_int(static_cast< int >(gum::BayesNetInference< double >::StateOfInference::Done)));
  SWIG_Python_SetConstant(d, "CredalNet_double_NodeType_Precise",SWIG_From_int(static_cast< int >(gum::credal::CredalNet< double >::NodeType::Precise)));
  SWIG_Python_SetConstant(d, "CredalNet_double_NodeType_Credal",SWIG_From_int(static_cast< int >(gum::credal::CredalNet< double >::NodeType::Credal)));
  SWIG_Python_SetConstant(d, "CredalNet_double_NodeType_Vacuous",SWIG_From_int(static_cast< int >(gum::credal::CredalNet< double >::NodeType::Vacuous)));
  SWIG_Python_SetConstant(d, "CredalNet_double_NodeType_Indic",SWIG_From_int(static_cast< int >(gum::credal::CredalNet< double >::NodeType::Indic)));
  SWIG_Python_SetConstant(d, "CNLoopyPropagation_double_InferenceType_nodeToNeighbours",SWIG_From_int(static_cast< int >(gum::credal::CNLoopyPropagation< double >::InferenceType::nodeToNeighbours)));
  SWIG_Python_SetConstant(d, "CNLoopyPropagation_double_InferenceType_ordered",SWIG_From_int(static_cast< int >(gum::credal::CNLoopyPropagation< double >::InferenceType::ordered)));
  SWIG_Python_SetConstant(d, "CNLoopyPropagation_double_InferenceType_randomOrder",SWIG_From_int(static_cast< int >(gum::credal::CNLoopyPropagation< double >::InferenceType::randomOrder)));
#if PY_VERSION_HEX >= 0x03000000
  return m;
#else
  return;
#endif
}

