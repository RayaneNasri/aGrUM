//##############################################################################
//
//                               HEADERS
//
//##############################################################################

#include <string>
#include <vector>
#include <utility>
#include <agrum/core/hashTable.h>
#include <agrum/PRM/newo3prm/o3prm.h>

//##############################################################################
//
//                             class Parser
//
//##############################################################################

COMPILER NEWO3PRM

private:

using LabelMap = gum::prm::o3prm::O3Type::LabelMap;
using Position = gum::prm::o3prm::Position;
using O3Type = gum::prm::o3prm::O3Type;
using O3PRM = gum::prm::o3prm::O3PRM;

O3PRM* __prm;

bool __ok (int n) { return errors().error_count == n; }
void __addO3Type( Position& pos,
                  std::string name,
                  std::string super,
                  LabelMap& labels ) {
  get_prm()->types().push_back( O3Type( pos, name, super, labels ) ); 
}

public:
// Set the parser factory.
void set_prm(O3PRM* prm) {
  __prm = prm;
}

O3PRM* get_prm() {
  return __prm;
}

//##############################################################################
//
//                              SCANNER RULES
//
//##############################################################################

//________________________
CHARACTERS
letter = 'A'..'Z' + 'a'..'z'+ '_' .
digit  = '0'..'9'.
eol    = '\n'.
noQuote1 = ANY - '"' .
noQuote2 = ANY - "'" .

//________________________
TOKENS
integer    = ['+'|'-'] digit {digit}.
float      = ['+'|'-'] digit {digit} '.' digit {digit} [ ('E'|'e') ['+'|'-'] digit {digit} ].
label      = letter {(letter | digit)}.
eol        = '\n'.
dot        = '.'.
comma      = ','.
colon      = ':'.
semicolon  = ';'.
type       = "type".
class      = "class".
interface  = "interface".
extends    = "extends".
system     = "system".
dependson  = "dependson".
default    = "default".
implements = "implements".
int        = "int".
real       = "real".
string     = '"' { noQuote1 } '"' | "'" {noQuote2 } "'" .

//________________________
COMMENTS FROM "/*" TO "*/" NESTED
COMMENTS FROM "//" TO eol

IGNORE '\r' + eol + '\t'

$checkEOF=false // disable the end of file check

//##############################################################################
//
//                              PARSER RULES
//
//##############################################################################

PRODUCTIONS

//________________________
NEWO3PRM = UNIT { UNIT } . 

//________________________
UNIT = TYPE_UNIT .

//________________________
TYPE_UNIT = 
  (. auto n = errors().error_count; .)
  (. auto pos = Position(); .)
  (. auto name = std::string(); .)
  (. auto super = std::string(); .)
  (. auto labels = LabelMap(); .)
  TYPE_BODY<pos, name, super, labels>
  (. if ( __ok( n ) ) { __addO3Type( pos, name, super, labels ); } .)
  .

//________________________
TYPE_BODY<Position& pos, std::string& name, std::string& super, LabelMap& labels> =
  TYPE<pos>
  WORD<name> 
  (
    LIST<labels>
    |
    extends WORD<super> MAP<labels>
  )
  ';'
  . 

//________________________
TYPE<Position& pos> = 
  type
  (. pos.file( narrow( scanner->filename() ) ); .)
  (. pos.line( t->line ); .)
  (. pos.column( t->col ); .)
  .

//________________________
MAP< LabelMap& labels > =
  (. auto first = std::string(); .)
  (. auto second = std::string(); .)
  (. auto pair = std::pair<std::string, std::string>(); .)
  WORD<first> ':' WORD<second>
  (. pair.first = first; .)
  (. pair.second = second; .)
  (. labels.push_back( pair ); .)
  ','
  WORD<first> ':' WORD<second>
  (. pair.first = first; .)
  (. pair.second = second; .)
  (. labels.push_back( pair ); .)
  {
    ','
    WORD<first> ':' WORD<second>
    (. pair.first = first; .)
    (. pair.second = second; .)
    (. labels.push_back( pair ); .)
  }
  .

//________________________
LIST< LabelMap& labels > =
  (. auto s = std::string(); .)
  (. auto pair = std::pair<std::string, std::string>(); .)
  WORD<s>
  (. pair.first = s; .)
  (. labels.push_back( pair ); .)
  ','
  WORD<s>
  (. pair.first = s; .)
  (. labels.push_back( pair ); .)
  {
    ','
    WORD<s>
    (. pair.first = s; .)
    (. labels.push_back( pair ); .)
  }
  .

//________________________
WORD<std::string& s> =
  label (. s = narrow( t->val ); .) .

//________________________
END NEWO3PRM.
