//##############################################################################
//
//                               HEADERS
//
//##############################################################################

#include <string>
#include <vector>
#include <utility>
#include <agrum/core/debug.h>
#include <agrum/core/hashTable.h>
#include <agrum/PRM/newo3prm/o3prm.h>

//##############################################################################
//
//                             class Parser
//
//##############################################################################

COMPILER NEWO3PRM

private:

using Position = gum::prm::o3prm::Position;

using O3Integer = gum::prm::o3prm::O3Integer;
using O3Float = gum::prm::o3prm::O3Float;

using O3Label = gum::prm::o3prm::O3Label;
using O3LabelList = gum::prm::o3prm::O3Class::O3LabelList;
using LabelMap = gum::prm::o3prm::O3Type::LabelMap;

using O3Formula = gum::prm::o3prm::O3Formula;
using O3FormulaList = gum::prm::o3prm::O3RawCPT::O3FormulaList;

using O3Rule = gum::prm::o3prm::O3RuleCPT::O3Rule;
using O3RuleList = gum::prm::o3prm::O3RuleCPT::O3RuleList;

using O3Type = gum::prm::o3prm::O3Type;
using O3IntType = gum::prm::o3prm::O3IntType;

using O3Interface = gum::prm::o3prm::O3Interface;
using O3InterfaceElement = gum::prm::o3prm::O3InterfaceElement;
using O3InterfaceElementList = gum::prm::o3prm::O3Interface::O3InterfaceElementList;

using O3Parameter = gum::prm::o3prm::O3Parameter;
using O3ParameterList = gum::prm::o3prm::O3Class::O3ParameterList;

using O3ReferenceSlot = gum::prm::o3prm::O3ReferenceSlot;
using O3ReferenceSlotList = gum::prm::o3prm::O3Class::O3ReferenceSlotList;

using O3Attribute = gum::prm::o3prm::O3Attribute;
using O3RawCPT = gum::prm::o3prm::O3RawCPT;
using O3RuleCPT = gum::prm::o3prm::O3RuleCPT;
using O3AttributeList = gum::prm::o3prm::O3Class::O3AttributeList;

using O3Aggregate = gum::prm::o3prm::O3Aggregate;
using O3AggregateList = gum::prm::o3prm::O3Class::O3AggregateList;

using O3Class = gum::prm::o3prm::O3Class;

using O3System = gum::prm::o3prm::O3System;
using O3Instance = gum::prm::o3prm::O3Instance;
using O3InstanceParameter = gum::prm::o3prm::O3InstanceParameter;
using O3InstanceParameterList = gum::prm::o3prm::O3Instance::O3InstanceParameterList;
using O3Assignment = gum::prm::o3prm::O3Assignment;
using O3Increment = gum::prm::o3prm::O3Increment;

using O3Import = gum::prm::o3prm::O3Import;
using O3ImportList = gum::prm::o3prm::O3PRM::O3ImportList;

using O3PRM = gum::prm::o3prm::O3PRM;

O3PRM* __prm;

bool __ok (int n) { return errors().error_count == n; }
void __addO3Type( Position& pos,
                  const O3Label& name,
                  const O3Label& super,
                  LabelMap& labels ) {
  auto t = std::unique_ptr<O3Type>( new O3Type( pos, name, super, labels ) );
  get_prm()->types().push_back( std::move( t ) ); 
}

void __addO3IntType( Position& pos,
                     const O3Label& name,
                     const O3Integer& start,
                     const O3Integer& end ) {
  auto t = std::unique_ptr<O3IntType>( new O3IntType( pos, name, start, end ) );
  get_prm()->int_types().push_back( std::move( t ) );
}

void __addO3Interface( Position& pos,
                       const O3Label& name,
                       const O3Label& super,
                       const O3InterfaceElementList& elts ) {
  auto i =
      std::unique_ptr<O3Interface>( new O3Interface( pos, name, super, elts ) );
  get_prm()->interfaces().push_back( std::move( i ) );
}

void __addO3Class( O3Class&& c ) {
  get_prm()->classes().push_back(
      std::unique_ptr<O3Class>( new O3Class( std::move(c) ) ) );
}

void __addO3System( O3System&& c ) {
  get_prm()->systems().push_back(
      std::unique_ptr<O3System>( new O3System( std::move(c) ) ) );
}

void __addO3Import( O3Import&& i ) {
  get_prm()->imports().push_back(
      std::unique_ptr<O3Import>( new O3Import( std::move( i ) ) ) );
}

void __split( const O3Label& value, O3Label& left, O3Label& right) {
  auto idx = value.label().find_first_of('.');
  if ( ( idx == std::string::npos ) or ( idx == value.label().size() - 1 ) ) {
    left = O3Label( value.position(), value.label() );
    right = O3Label( value.position(), value.label() );
  } else {
    left = O3Label( value.position(), value.label().substr( 0, idx ) );
    auto pos = Position( value.position().file(),
                         value.position().line(),
                         value.position().column() + idx );
    right = O3Label( pos, value.label().substr( idx + 1 ) );
  }
}

public:
// Set the parser factory.
void set_prm(O3PRM* prm) {
  __prm = prm;
}

O3PRM* get_prm() {
  return __prm;
}

//##############################################################################
//
//                              SCANNER RULES
//
//##############################################################################

//________________________
CHARACTERS
letter = 'A'..'Z' + 'a'..'z'+ '_' .
digit  = '0'..'9'.
eol    = '\n'.
noQuote1 = ANY - '"' .
noQuote2 = ANY - "'" .

//________________________
TOKENS
integer    = ['+'|'-'] digit {digit}.
float      = ['+'|'-'] digit {digit} '.' digit {digit} [ ('E'|'e') ['+'|'-'] digit {digit} ].
label      = letter {(letter | digit)}.
eol        = '\n'.
dot        = '.'.
comma      = ','.
colon      = ':'.
semicolon  = ';'.
import     = "import".
type       = "type".
class      = "class".
interface  = "interface".
extends    = "extends".
system     = "system".
dependson  = "dependson".
default    = "default".
implements = "implements".
int        = "int".
real       = "real".
inc        =  "+=".
string     = '"' { noQuote1 } '"' | "'" {noQuote2 } "'" .


//________________________
COMMENTS FROM "/*" TO "*/" NESTED
COMMENTS FROM "//" TO eol

IGNORE '\r' + eol + '\t'

$checkEOF=false // disable the end of file check

//##############################################################################
//
//                              PARSER RULES
//
//##############################################################################

PRODUCTIONS

//________________________
NEWO3PRM = UNIT { UNIT } . 

//________________________
UNIT = 
  { IMPORT_UNIT }
  (
    TYPE_UNIT
  |
    INTERFACE_UNIT
  |
    CLASS_UNIT
  |
    SYSTEM_UNIT
  )
  .

// ===========================================================================
// ===                          CLASS RULES                                ===
// ===========================================================================

//________________________
CLASS_UNIT =
  (. auto n = errors().error_count; .)
  (. auto c = O3Class(); .)
  CLASS_DECLARATION<c>
  (. if (__ok(n)) { __addO3Class( std::move(c) ); } .)
  .

//________________________
CLASS_DECLARATION<O3Class& c> =
  CLASS<c.position()>
  LABEL<c.name()>
  [
    extends IDENTIFIER<c.super()>
  ]
  [
    implements IDENTIFIER_LIST<c.interfaces()>
  ]
  '{' { CLASS_BODY<c> } '}'
  .
                   
//________________________
CLASS<Position& pos> =
  class
  (. pos.file( narrow( scanner->filename() ) ); .)
  (. pos.line( t->line ); .)
  (. pos.column( t->col ); .)
  .

//________________________
CLASS_BODY<O3Class& c> =
    CLASS_PARAMETER<c.parameters()>
  |
    CLASS_ELEMENT<c>
  .

//________________________
CLASS_PARAMETER<O3ParameterList& params> =
    (. auto name = O3Label(); .)
    (. auto val = O3Integer(); .)
    int 
    (. auto pos = Position( narrow( scanner->filename() ), t->line, t->col ); .)
    LABEL<name> default INTEGER<val> ';'
    (. params.push_back( O3Parameter(pos, name, val) ); .)
  |
    (. auto name = O3Label(); .)
    (. auto val = O3Float(); .)
    real
    (. auto pos = Position( narrow( scanner->filename() ), t->line, t->col ); .)
    LABEL<name> default FLOAT<val> ';'
    (. params.push_back( O3Parameter(pos, name, val) ); .)
  .

//________________________
CLASS_ELEMENT<O3Class& c> =
  (. auto type = O3Label(); .)
  IDENTIFIER<type>
  (
    ARRAY_REFERENCE_SLOT<type, c.referenceSlots()>
  |
    NAMED_CLASS_ELEMENT<type, c>
  )
  .

//________________________
ARRAY_REFERENCE_SLOT<O3Label& type, O3ReferenceSlotList& refs> =
  (. auto isArray = false; .)
  (. isArray = true; .)
  (. auto name = O3Label(); .)
  '['
  ']'
  LABEL<name>
  ';'
  (. refs.push_back( O3ReferenceSlot( type, name, isArray ) ); .)
  .

//________________________
NAMED_CLASS_ELEMENT<O3Label& type, O3Class& c> =
  (. auto name = O3Label(); .)
  LABEL<name>
  ( 
    REFERENCE_SLOT<type, name, c>
  | 
    ATTRIBUTE<type, name, c>
  |
    AGGREGATE<type, name, c>
  )
  .

//________________________
REFERENCE_SLOT<O3Label& type, O3Label& name, O3Class& c> =
    ';'
    (. c.referenceSlots().push_back( O3ReferenceSlot( type, name, false ) ); .)
    .

//________________________
ATTRIBUTE<O3Label& type, O3Label& name, O3Class& c> =
    (. auto parents = O3LabelList(); .)
    [
      dependson
      IDENTIFIER_LIST<parents> 
    ]
    '{'
        (
          RAW_CPT<type, name, parents, c.attributes()>
        |
          RULE_CPT<type, name, parents, c.attributes()>
        )
    '}'
    ';'
    .

//________________________
AGGREGATE<O3Label& type, O3Label& name, O3Class& c> =
  (. auto agg = O3Aggregate(); .)
  (. agg.variableType() = type; .)
  (. agg.name() = name; .)
  '='
  LABEL<agg.aggregateType()>
  '('
  AGGREGATE_PARENTS<agg.parents()>
  [
    ','
    LABEL_LIST<agg.parameters()> 
  ]
  ')'
  ';'
  (. c.aggregates().push_back( std::move(agg) ); .)
  .

//________________________
AGGREGATE_PARENTS<O3LabelList& parents> =
    (. auto prnt = O3Label(); .)
    IDENTIFIER<prnt>
    (. parents.push_back(prnt); .)
  |
    '[' IDENTIFIER_LIST<parents> ']'
  .

//________________________
RAW_CPT<const O3Label& type,
        const O3Label& name,
        const O3LabelList& parents,
        O3AttributeList& elts> =
  (. auto values = O3FormulaList(); .)
  '['
    FORMULA_LIST<values>
  ']'
  (. auto attr = new O3RawCPT( type, name, parents, values ); .)
  (. elts.push_back( std::unique_ptr<O3Attribute>(attr) ); .)
  .

//________________________
RULE_CPT<const O3Label& type,
         const O3Label& name,
         const O3LabelList& parents,
         O3AttributeList& elts> =
  (. auto rules = O3RuleList(); .)
  RULE<rules> { RULE<rules> }
  (. auto attr = new O3RuleCPT( type, name, parents, std::move(rules) ); .)
  (. elts.push_back( std::unique_ptr<O3Attribute>( attr ) ); .)
  .

//________________________
RULE<O3RuleList& rules> =
  (. auto labels = O3LabelList(); .)
  (. auto formulas = O3FormulaList(); .)
  LABEL_OR_STAR_LIST<labels>
  ':'
  FORMULA_LIST<formulas>
  ';'
  (. auto rule = O3Rule(std::move(labels), std::move(formulas)); .)
  (. rules.push_back( std::move(rule) ); .)
  .

// ===========================================================================
// ===                        INTERFACE RULES                              ===
// ===========================================================================

//________________________
INTERFACE_UNIT =
  (. auto n = errors().error_count; .)
  (. auto pos = Position(); .)
  (. auto name = O3Label(); .)
  (. auto super = O3Label(); .)
  (. auto elts = O3InterfaceElementList(); .)
  INTERFACE_DECLARATION<pos, name, super, elts >
  (. if (__ok(n)) { __addO3Interface( pos, name, super, elts ); } .)
  .

//________________________
INTERFACE_DECLARATION<Position& pos,
                      O3Label& name,
                      O3Label& super,
                      O3InterfaceElementList& elts> =
  INTERFACE<pos>
  LABEL<name>
  [
    extends IDENTIFIER<super>
  ]
  '{' { INTERFACE_BODY<elts> } '}'
  .

//________________________
INTERFACE<Position& pos> =
  interface
  (. pos.file( narrow( scanner->filename() ) ); .)
  (. pos.line( t->line ); .)
  (. pos.column( t->col ); .)
  .

//________________________
INTERFACE_BODY<O3InterfaceElementList& elts> =
  (. auto type = O3Label(); .)
  (. auto name = O3Label(); .)
  IDENTIFIER<type> LABEL<name> ';'
  (. elts.push_back( O3InterfaceElement( type, name ) ); .)
  .

// ===========================================================================
// ===                            TYPE RULES                               ===
// ===========================================================================

//________________________
TYPE_UNIT = 
  (. auto n = errors().error_count; .)
  (. auto pos = Position(); .)
  (. auto name = O3Label(); .)
  (
    (. auto super = O3Label(); .)
    (. auto labels = LabelMap(); .)
    TYPE_DECLARATION<pos, name, super, labels>
    (. if ( __ok( n ) ) { __addO3Type( pos, name, super, labels ); } .)
  |
    (. auto start = O3Integer(); .)
    (. auto end = O3Integer(); .)
    INT_TYPE_DECLARATION<pos, name, start, end>
    (. if ( __ok( n ) ) { __addO3IntType( pos, name, start, end ); } .)
  )
  .

//________________________
TYPE_DECLARATION<Position& pos, O3Label& name, O3Label& super, LabelMap& labels> =
  TYPE<pos>
  LABEL<name> 
  (
    TYPE_VALUE_LIST<labels>
    |
    extends IDENTIFIER<super> MAP<labels>
  )
  ';'
  . 

//________________________
TYPE<Position& pos> = 
  type
  (. pos.file( narrow( scanner->filename() ) ); .)
  (. pos.line( t->line ); .)
  (. pos.column( t->col ); .)
  .

//________________________
INT_TYPE_DECLARATION<Position& pos, O3Label& name, O3Integer& start, O3Integer& end> =
  INT<pos>
  '('
  INTEGER<start>
  ','
  INTEGER<end>
  ')'
  LABEL<name>
  ';'
  .

//________________________
INT<Position& pos> =
  int
  (. pos.file( narrow( scanner->filename() ) ); .)
  (. pos.line( t->line ); .)
  (. pos.column( t->col ); .)
  .

//________________________
MAP< LabelMap& labels > =
  (. auto first = O3Label(); .)
  (. auto second = O3Label(); .)
  (. auto pair = std::pair<O3Label, O3Label>(); .)
  LABEL<first> ':' LABEL<second>
  (. pair.first = first; .)
  (. pair.second = second; .)
  (. labels.push_back( pair ); .)
  ','
  LABEL<first> ':' LABEL<second>
  (. pair.first = first; .)
  (. pair.second = second; .)
  (. labels.push_back( pair ); .)
  {
    ','
    LABEL<first> ':' LABEL<second>
    (. pair.first = first; .)
    (. pair.second = second; .)
    (. labels.push_back( pair ); .)
  }
  .

//________________________
TYPE_VALUE_LIST< LabelMap& labels > =
  (. auto l = O3Label(); .)
  (. auto pair = std::pair<O3Label, O3Label>(); .)
  LABEL<l>
  (. pair.first = l; .)
  (. labels.push_back( pair ); .)
  ','
  LABEL<l>
  (. pair.first = l; .)
  (. labels.push_back( pair ); .)
  {
    ','
    LABEL<l>
    (. pair.first = l; .)
    (. labels.push_back( pair ); .)
  }
  .

// ===========================================================================
// ===                          SYSTEM RULES                               ===
// ===========================================================================

//________________________
SYSTEM_UNIT =
  (. auto n = errors().error_count; .)
  (. auto s = O3System(); .)
  SYSTEM_DECLARATION<s>
  (. if (__ok(n)) { __addO3System( std::move(s) ); } .)
  .

//________________________
SYSTEM_DECLARATION<O3System& s> =
  system
  LABEL<s.name()>
  '{'
  {
    SYSTEM_BODY<s>
  }
  '}'
  .

//________________________
SYSTEM_BODY<O3System& sys> =
  (. auto left_value = std::stringstream(); .)
  label
  (. left_value << narrow(t->val); .)
  (. auto pos = Position( narrow( scanner->filename() ), t->line, t->col ); .)
  (
    '.'
    label
    (. auto tmp = narrow( t->val ); .)
    (. auto tmp_pos = Position( narrow( scanner->filename() ), t->line, t->col ); .)
    (
      (. left_value << tmp; .)
      {
        '.' 
        label
        (. left_value << narrow( t->val ); .)
      }
      (. auto inst = O3Instance(); .)
      (. inst.type().label() = left_value.str(); .)
      (. inst.type().position() = pos; .)
      [
        ARRAY<inst.size()> 
      ]
      LABEL<inst.name()>
      [
        '('
        PARAMETER_LIST<inst.parameters()>
        ')'
      ]
      (. sys.instances().push_back( std::move( inst ) ); .)
    |
      (
        (. auto ass = O3Assignment(); .)
        (. ass.leftInstance().label() = left_value.str(); .)
        (. ass.leftInstance().position() = pos; .)
        (. ass.leftReference().label() = tmp; .)
        (. ass.leftReference().position() = tmp_pos; .)
        '=' LABEL<ass.rightInstance()>
        (. sys.assignments().push_back( std::move( ass ) ); .)
      | 
        (. auto inc = O3Increment(); .)
        (. inc.leftInstance().label() = left_value.str(); .)
        (. inc.leftInstance().position() = pos; .)
        (. inc.leftReference().label() = tmp; .)
        (. inc.leftReference().position() = tmp_pos; .)
        inc LABEL<inc.rightInstance()>
        (. sys.increments().push_back( std::move( inc ) ); .)
      )
    )
  |
    (. auto i = O3Integer(); .)
    ARRAY<i>
    (
      (. auto inst = O3Instance(); .)
      (. inst.type().label() = left_value.str(); .)
      (. inst.type().position() = pos; .)
      (. inst.size() = i; .)
      LABEL<inst.name()>
      [
        '('
        PARAMETER_LIST<inst.parameters()>
        ')'
      ]
      (. sys.instances().push_back( std::move( inst ) ); .)
    |
      (. auto ref = O3Label(); .)
      '.' LABEL<ref> 
      (
        (. auto ass = O3Assignment(); .)
        (. ass.leftInstance().label() = left_value.str(); .)
        (. ass.index() = i; .)
        (. ass.leftReference() = ref; .)
        '=' LABEL<ass.rightInstance()>
        (. sys.assignments().push_back( std::move( ass ) ); .)
      | 
        (. auto inc = O3Increment(); .)
        (. inc.leftInstance().label() = left_value.str(); .)
        (. inc.index() = i; .)
        (. inc.leftReference() = ref; .)
        inc LABEL<inc.rightInstance()>
        (. sys.increments().push_back( std::move( inc ) ); .)
      )
    )
  |
    (. auto inst = O3Instance(); .)
    (. inst.type().label() = left_value.str(); .)
    (. inst.type().position() = pos; .)
    LABEL<inst.name()>
    [
      '('
      PARAMETER_LIST<inst.parameters()>
      ')'
    ]
    (. sys.instances().push_back( std::move( inst ) ); .)
  )
  ';'
  .

////________________________
//INSTANCE_DECLARATION<O3System& sys> =
//  (. auto inst = O3Instance(); .)
//  CHAIN<inst.type()>
//  [
//    ARRAY<inst.size()>
//  ]
//  LABEL<inst.name()>
//  [
//    '('
//    PARAMETER_LIST<inst.parameters()>
//    ')'
//  ]
//  ';'
//  (. sys.instances().push_back( std::move( inst ) ); .)
//  .
//
////________________________
//REFERENCE_ASSIGNMENT<O3System& sys> =
//  (. auto ass = O3Assignment(); .)
//  LABEL<ass.leftInstance()>
//  [
//    ARRAY<ass.index()>
//  ]
//  '.' 
//  LABEL<ass.leftReference()> 
//  '=' 
//  LABEL<ass.rightInstance()> 
//  ';'
//  (. sys.assignments().push_back( std::move( ass ) ); .)
//  .
//
////________________________
//REFERENCE_INCREMENT<O3System& sys> =
//  (. auto inc = O3Increment(); .)
//  LABEL<inc.leftInstance()>
//  [
//    ARRAY<inc.index()>
//  ]
//  '.' 
//  LABEL<inc.leftReference()> 
//  inc 
//  LABEL<inc.rightInstance()> 
//  ';'
//  (. sys.increments().push_back( std::move( inc ) ); .)
//  .

//________________________
PARAMETER_LIST<O3InstanceParameterList& params> =
  (. auto p = O3InstanceParameter(); .)
  LABEL<p.name()>
  '='
  (
    INTEGER_AS_FLOAT<p.value()>
    (. p.isInteger() = true; .)
  |
    FLOAT<p.value()>
    (. p.isInteger() = false; .)
  )
  ';'
  .

// ===========================================================================
// ===                          IMPORT RULES                               ===
// ===========================================================================

//________________________
IMPORT_UNIT=
  (. auto i = O3Import(); .)
  IMPORT_DECLARATION<i>
  (. __addO3Import(std::move(i)); .)
  .

//________________________
IMPORT_DECLARATION<O3Import& import> =
  import
  IDENTIFIER<import.import()>
  ';'
  .

// ===========================================================================
// ===                         GENERIC RULES                               ===
// ===========================================================================

//________________________
INTEGER_AS_LABEL<O3Label& l> =
  integer
  (. auto pos = Position( narrow( scanner->filename() ), t->line, t->col ); .)
  (. l = O3Label( pos, narrow( t->val ) ); .)
  .

//________________________
INTEGER_AS_FLOAT<O3Float& f> =
  integer
  (. auto pos = Position( narrow( scanner->filename() ), t->line, t->col ); .)
  (. f = O3Float( pos, coco_atoi( t->val ) ); .)
  .

//________________________
INTEGER<O3Integer& i> =
  integer
  (. auto pos = Position( narrow( scanner->filename() ), t->line, t->col ); .)
  (. i = O3Integer( pos, coco_atoi( t->val ) ); .)
  .

//________________________
FLOAT<O3Float& f> =
  float
  (. auto pos = Position( narrow( scanner->filename() ), t->line, t->col ); .)
  (. f = O3Float( pos, coco_atof( t->val ) ); .)
  .

//________________________
LABEL_OR_INT<O3Label& l> =
    LABEL<l>
  |
    INTEGER_AS_LABEL<l>
  .

//________________________
LABEL<O3Label& l> =
  label 
  (. auto pos = Position( narrow( scanner->filename() ), t->line, t->col ); .)
  (. l = O3Label( pos, narrow( t->val ) ); .)
  .

//________________________
IDENTIFIER_LIST<O3LabelList& list> =
  (. auto label = O3Label(); .)
  IDENTIFIER<label>
  (. list.push_back( label ); .)
  {
    ','
    IDENTIFIER<label> 
    (. list.push_back( label ); .)
  }
  .

//________________________
IDENTIFIER<O3Label& ident> =
  CHAIN<ident>
  [
    '.'
    '('
    CHAIN<ident>
    ')'
  ]
  .

//________________________
CHAIN<O3Label& ident> =
  (. auto s = std::stringstream(); .)
  label
  (. auto pos = Position( narrow( scanner->filename() ), t->line, t->col ); .)
  (. s << narrow( t->val ); .)
  {
    "."
    (. s << narrow( t->val ); .)
    label 
    (. s << narrow( t->val ); .)
  }
  (. ident = O3Label( pos, s.str() ); .)
  .

//________________________
LABEL_LIST<O3LabelList& list> =
  (. auto label = O3Label(); .)
  LABEL_OR_INT<label>
  (. list.push_back( label ); .)
  {
    ','
    LABEL_OR_INT<label> 
    (. list.push_back( label ); .)
  }
  .

//________________________
LABEL_OR_STAR<O3Label& l> =
  ( label | '*' )
  (. auto pos = Position( narrow( scanner->filename() ), t->line, t->col ); .)
  (. l = O3Label( pos, narrow( t->val ) ); .)
  .

//________________________
LABEL_OR_STAR_LIST<O3LabelList& list> =
  (. auto label = O3Label(); .)
  LABEL_OR_STAR<label>
  (. list.push_back( label ); .)
  {
    ','
    LABEL_OR_STAR<label> 
    (. list.push_back( label ); .)
  }
  .

//________________________
FORMULA<O3Formula& f> =
  ( 
    string
    (. auto pos = Position( narrow( scanner->filename() ), t->line, t->col ); .)
    (. auto value = narrow(t->val); .)
    (. value = value.size() > 2 ? value.substr(1, value.size() - 2) : "" ; .)
    (. f = O3Formula( pos, value ); .)
  |
    float
    (. auto pos = Position( narrow( scanner->filename() ), t->line, t->col ); .)
    (. f = O3Formula( pos, narrow( t->val ) ); .)
  | 
    integer
    (. auto pos = Position( narrow( scanner->filename() ), t->line, t->col ); .)
    (. f = O3Formula( pos, narrow( t->val ) ); .)
  )
  .

//________________________
FORMULA_LIST<O3FormulaList& values> =
  (. auto f = O3Formula(); .)
  FORMULA<f>
  (. values.push_back( f ); .)
  {
    ','
    FORMULA<f>
    (. values.push_back( f ); .)
  }
  .

//________________________
ARRAY<O3Integer& size> =
  '['
  INTEGER<size>
  ']'
  .

//________________________
END NEWO3PRM.
