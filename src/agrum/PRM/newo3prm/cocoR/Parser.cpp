/***************************************************************************
 *  aGrUM modified frames and atg files for cocoR
 *   Copyright (c) 2005 by Christophe GONZALES and Pierre-Henri WUILLEMIN  *
 *   {prenom.nom}_at_lip6.fr
***************************************************************************/
/*----------------------------------------------------------------------
Compiler Generator Coco/R,
Copyright (c) 1990, 2004 Hanspeter Moessenboeck, University of Linz
extended by M. Loeberbauer & A. Woess, Univ. of Linz
ported to C++ by Csaba Balazs, University of Szeged
with improvements by Pat Terry, Rhodes University

This program is free software; you can redistribute it and/or modify it
under the terms of the GNU General Public License as published by the
Free Software Foundation; either version 2, or (at your option) any
later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

You should have received a copy of the GNU General Public License along
with this program; if not, write to the Free Software Foundation, Inc.,
59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

As an exception, it is allowed to write an extension of Coco/R that is
used as a plugin in non-free software.

If not otherwise stated, any source code generated by Coco/R (other than
Coco/R itself) does not fall under the GNU General Public License.
-----------------------------------------------------------------------*/


#include <iostream>
#include <wchar.h>

#include "Parser.h"
#include "Scanner.h"


namespace gum {
namespace prm {
namespace newo3prm {


void Parser::SynErr( int n ) {
  if ( errDist >= minErrDist ) SynErr( scanner->filename(),la->line, la->col, n );

  errDist = 0;
}


const ErrorsContainer& Parser::errors( void ) const {
  return __errors;
}

void Parser::Get() {
  for ( ;; ) {
    t = la;
    la = scanner->Scan();

    if ( la->kind <= maxT ) { ++errDist; break; }

    

    if ( dummyToken != t ) {
      dummyToken->kind = t->kind;
      dummyToken->pos = t->pos;
      dummyToken->col = t->col;
      dummyToken->line = t->line;
      dummyToken->next = NULL;
      coco_string_delete( dummyToken->val );
      dummyToken->val = coco_string_create( t->val );
      t = dummyToken;
    }

    la = t;
  }
}

void Parser::Expect( int n ) {
  if ( la->kind==n ) Get(); else { SynErr( n ); }
}

void Parser::ExpectWeak( int n, int follow ) {
  if ( la->kind == n ) Get();
  else {
    SynErr( n );

    while ( !StartOf( follow ) ) Get();
  }
}

bool Parser::WeakSeparator( int n, int syFol, int repFol ) {
  if ( la->kind == n ) {Get(); return true;}
  else if ( StartOf( repFol ) ) {return false;}
  else {
    SynErr( n );

    while ( !( StartOf( syFol ) || StartOf( repFol ) || StartOf( 0 ) ) ) {
      Get();
    }

    return StartOf( syFol );
  }
}

void Parser::NEWO3PRM() {
		UNIT();
		while (StartOf(1)) {
			UNIT();
		}
}

void Parser::UNIT() {
		if (la->kind == _type || la->kind == _int) {
			TYPE_UNIT();
		} else if (la->kind == _interface) {
			INTERFACE_UNIT();
		} else if (la->kind == _class) {
			CLASS_UNIT();
		} else SynErr(28);
}

void Parser::TYPE_UNIT() {
		auto n = errors().error_count; 
		auto pos = Position(); 
		auto name = O3Label(); 
		if (la->kind == _type) {
			auto super = O3Label(); 
			auto labels = LabelMap(); 
			TYPE_DECLARATION(pos, name, super, labels);
			if ( __ok( n ) ) { __addO3Type( pos, name, super, labels ); } 
		} else if (la->kind == _int) {
			auto start = O3Integer(); 
			auto end = O3Integer(); 
			INT_TYPE_DECLARATION(pos, name, start, end);
			if ( __ok( n ) ) { __addO3IntType( pos, name, start, end ); } 
		} else SynErr(29);
}

void Parser::INTERFACE_UNIT() {
		auto n = errors().error_count; 
		auto pos = Position(); 
		auto name = O3Label(); 
		auto super = O3Label(); 
		auto elts = O3InterfaceElementList(); 
		INTERFACE_DECLARATION(pos, name, super, elts );
		if (__ok(n)) { __addO3Interface( pos, name, super, elts ); } 
}

void Parser::CLASS_UNIT() {
		auto n = errors().error_count; 
		auto c = O3Class(); 
		CLASS_DECLARATION(c.position(),
c.name(),
c.super(),
c.interfaces(),
c.parameters(),
c.referenceSlots(),
c.elements());
		if (__ok(n)) { __addO3Class( std::move(c) ); } 
}

void Parser::CLASS_DECLARATION(Position& pos,
O3Label& name,
O3Label& super,
O3LabelList& interfaces,
O3ParameterList& params,
O3ReferenceSlotList& refs,
O3AttributeList& elts) {
		CLASS(pos);
		LABEL(name);
		if (la->kind == _extends) {
			Get();
			LABEL(super);
		}
		if (la->kind == _implements) {
			Get();
			LABEL_LIST(interfaces);
		}
		Expect(20 /* "{" */);
		while (la->kind == _label || la->kind == _int || la->kind == _real) {
			CLASS_BODY(params, refs, elts);
		}
		Expect(21 /* "}" */);
}

void Parser::CLASS(Position& pos) {
		Expect(_class);
		pos.file( narrow( scanner->filename() ) ); 
		pos.line( t->line ); 
		pos.column( t->col ); 
}

void Parser::LABEL(O3Label& l) {
		Expect(_label);
		auto pos = Position( narrow( scanner->filename() ), t->line, t->col ); 
		l = O3Label( pos, narrow( t->val ) ); 
}

void Parser::LABEL_LIST(O3LabelList& list) {
		auto label = O3Label(); 
		LABEL(label);
		list.push_back( label ); 
		while (la->kind == _comma) {
			Get();
			LABEL(label);
			list.push_back( label ); 
		}
}

void Parser::CLASS_BODY(O3ParameterList& params, O3ReferenceSlotList& refs, O3AttributeList& elts) {
		if (la->kind == _int || la->kind == _real) {
			CLASS_PARAMETER(params);
		} else if (la->kind == _label) {
			CLASS_ELEMENT(refs, elts);
		} else SynErr(30);
}

void Parser::CLASS_PARAMETER(O3ParameterList& params) {
		if (la->kind == _int) {
			auto name = O3Label(); 
			auto val = O3Integer(); 
			Get();
			auto pos = Position( narrow( scanner->filename() ), t->line, t->col ); 
			LABEL(name);
			Expect(_default);
			INTEGER(val);
			Expect(_semicolon);
			params.push_back( O3Parameter(pos, name, val) ); 
		} else if (la->kind == _real) {
			auto name = O3Label(); 
			auto val = O3Float(); 
			Get();
			auto pos = Position( narrow( scanner->filename() ), t->line, t->col ); 
			LABEL(name);
			Expect(_default);
			FLOAT(val);
			Expect(_semicolon);
			params.push_back( O3Parameter(pos, name, val) ); 
		} else SynErr(31);
}

void Parser::CLASS_ELEMENT(O3ReferenceSlotList& refs, O3AttributeList& elts) {
		auto type = O3Label(); 
		auto name = O3Label(); 
		auto parents = O3LabelList(); 
		LABEL(type);
		LABEL(name);
		if (la->kind == 20 /* "{" */) {
			Get();
			RAW_CPT(name, type, parents, elts);
			Expect(21 /* "}" */);
			Expect(_semicolon);
		} else if (la->kind == _dependson) {
			Get();
			IDENTIFIER_LIST(parents);
			Expect(20 /* "{" */);
			if (la->kind == 22 /* "[" */) {
				RAW_CPT(name, type, parents, elts);
			} else if (la->kind == _label || la->kind == 26 /* "*" */) {
				RULE_CPT(name, type, parents, elts);
			} else SynErr(32);
			Expect(21 /* "}" */);
			Expect(_semicolon);
		} else if (la->kind == _semicolon || la->kind == 22 /* "[" */) {
			REFERENCE_SLOT(type, name, refs);
		} else SynErr(33);
}

void Parser::INTEGER(O3Integer& i) {
		Expect(_integer);
		auto pos = Position( narrow( scanner->filename() ), t->line, t->col ); 
		i = O3Integer( pos, coco_atoi( t->val ) ); 
}

void Parser::FLOAT(O3Float& f) {
		Expect(_float);
		auto pos = Position( narrow( scanner->filename() ), t->line, t->col ); 
		f = O3Float( pos, coco_atof( t->val ) ); 
}

void Parser::RAW_CPT(const O3Label& name,
const O3Label& type,
const O3LabelList& parents,
O3AttributeList& elts) {
		auto values = O3FormulaList(); 
		Expect(22 /* "[" */);
		FORMULA_LIST(values);
		Expect(23 /* "]" */);
		auto attr = new O3RawCPT( type, name, parents, values ); 
		elts.push_back( std::unique_ptr<O3Attribute>(attr) ); 
}

void Parser::IDENTIFIER_LIST(O3LabelList& list) {
		auto label = O3Label(); 
		IDENTIFIER(label);
		list.push_back( label ); 
		while (la->kind == _comma) {
			Get();
			IDENTIFIER(label);
			list.push_back( label ); 
		}
}

void Parser::RULE_CPT(const O3Label& name,
const O3Label& type,
const O3LabelList& parents,
O3AttributeList& elts) {
		auto rules = O3RuleList(); 
		RULE(rules);
		while (la->kind == _label || la->kind == 26 /* "*" */) {
			RULE(rules);
		}
		auto attr = new O3RuleCPT( type, name, parents, std::move(rules) ); 
		elts.push_back( std::unique_ptr<O3Attribute>( attr ) ); 
}

void Parser::REFERENCE_SLOT(O3Label& type, O3Label& name, O3ReferenceSlotList& refs) {
		auto isArray = false; 
		if (la->kind == 22 /* "[" */) {
			Get();
			Expect(23 /* "]" */);
			isArray = true; 
		}
		Expect(_semicolon);
		refs.push_back( O3ReferenceSlot( type, name, isArray ) ); 
}

void Parser::FORMULA_LIST(O3FormulaList& values) {
		auto f = O3Formula(); 
		FORMULA(f);
		values.push_back( f ); 
		while (la->kind == _comma) {
			Get();
			FORMULA(f);
			values.push_back( f ); 
		}
}

void Parser::RULE(O3RuleList& rules) {
		auto labels = O3LabelList(); 
		auto formulas = O3FormulaList(); 
		LABEL_OR_STAR_LIST(labels);
		Expect(_colon);
		FORMULA_LIST(formulas);
		Expect(_semicolon);
		auto rule = O3Rule(std::move(labels), std::move(formulas)); 
		rules.push_back( std::move(rule) ); 
}

void Parser::LABEL_OR_STAR_LIST(O3LabelList& list) {
		auto label = O3Label(); 
		LABEL_OR_STAR(label);
		list.push_back( label ); 
		while (la->kind == _comma) {
			Get();
			LABEL_OR_STAR(label);
			list.push_back( label ); 
		}
}

void Parser::INTERFACE_DECLARATION(Position& pos,
O3Label& name,
O3Label& super,
O3InterfaceElementList& elts) {
		INTERFACE(pos);
		LABEL(name);
		if (la->kind == _extends) {
			Get();
			LABEL(super);
		}
		Expect(20 /* "{" */);
		while (la->kind == _label) {
			INTERFACE_BODY(elts);
		}
		Expect(21 /* "}" */);
}

void Parser::INTERFACE(Position& pos) {
		Expect(_interface);
		pos.file( narrow( scanner->filename() ) ); 
		pos.line( t->line ); 
		pos.column( t->col ); 
}

void Parser::INTERFACE_BODY(O3InterfaceElementList& elts) {
		auto type = O3Label(); 
		auto name = O3Label(); 
		LABEL(type);
		LABEL(name);
		Expect(_semicolon);
		elts.push_back( O3InterfaceElement( type, name ) ); 
}

void Parser::TYPE_DECLARATION(Position& pos, O3Label& name, O3Label& super, LabelMap& labels) {
		TYPE(pos);
		LABEL(name);
		if (la->kind == _label) {
			TYPE_VALUE_LIST(labels);
		} else if (la->kind == _extends) {
			Get();
			LABEL(super);
			MAP(labels);
		} else SynErr(34);
		Expect(_semicolon);
}

void Parser::INT_TYPE_DECLARATION(Position& pos, O3Label& name, O3Integer& start, O3Integer& end) {
		INT(pos);
		Expect(24 /* "(" */);
		INTEGER(start);
		Expect(_comma);
		INTEGER(end);
		Expect(25 /* ")" */);
		LABEL(name);
		Expect(_semicolon);
}

void Parser::TYPE(Position& pos) {
		Expect(_type);
		pos.file( narrow( scanner->filename() ) ); 
		pos.line( t->line ); 
		pos.column( t->col ); 
}

void Parser::TYPE_VALUE_LIST(LabelMap& labels ) {
		auto l = O3Label(); 
		auto pair = std::pair<O3Label, O3Label>(); 
		LABEL(l);
		pair.first = l; 
		labels.push_back( pair ); 
		Expect(_comma);
		LABEL(l);
		pair.first = l; 
		labels.push_back( pair ); 
		while (la->kind == _comma) {
			Get();
			LABEL(l);
			pair.first = l; 
			labels.push_back( pair ); 
		}
}

void Parser::MAP(LabelMap& labels ) {
		auto first = O3Label(); 
		auto second = O3Label(); 
		auto pair = std::pair<O3Label, O3Label>(); 
		LABEL(first);
		Expect(_colon);
		LABEL(second);
		pair.first = first; 
		pair.second = second; 
		labels.push_back( pair ); 
		Expect(_comma);
		LABEL(first);
		Expect(_colon);
		LABEL(second);
		pair.first = first; 
		pair.second = second; 
		labels.push_back( pair ); 
		while (la->kind == _comma) {
			Get();
			LABEL(first);
			Expect(_colon);
			LABEL(second);
			pair.first = first; 
			pair.second = second; 
			labels.push_back( pair ); 
		}
}

void Parser::INT(Position& pos) {
		Expect(_int);
		pos.file( narrow( scanner->filename() ) ); 
		pos.line( t->line ); 
		pos.column( t->col ); 
}

void Parser::IDENTIFIER(O3Label& ident) {
		auto s = std::stringstream(); 
		Expect(_label);
		auto pos = Position( narrow( scanner->filename() ), t->line, t->col ); 
		s << narrow( t->val ); 
		while (la->kind == _dot) {
			Get();
			s << narrow( t->val ); 
			Expect(_label);
			s << narrow( t->val ); 
		}
		ident = O3Label( pos, s.str() ); 
}

void Parser::LABEL_OR_STAR(O3Label& l) {
		if (la->kind == _label) {
			Get();
		} else if (la->kind == 26 /* "*" */) {
			Get();
		} else SynErr(35);
		auto pos = Position( narrow( scanner->filename() ), t->line, t->col ); 
		l = O3Label( pos, narrow( t->val ) ); 
}

void Parser::FORMULA(O3Formula& f) {
		if (la->kind == _string) {
			Get();
			auto pos = Position( narrow( scanner->filename() ), t->line, t->col ); 
			auto value = narrow(t->val); 
			value = value.size() > 2 ? value.substr(1, value.size() - 2) : "" ; 
			f = O3Formula( pos, value ); 
		} else if (la->kind == _float) {
			Get();
			auto pos = Position( narrow( scanner->filename() ), t->line, t->col ); 
			f = O3Formula( pos, narrow( t->val ) ); 
		} else SynErr(36);
}



// If the user declared a method Init and a mehtod Destroy they should
// be called in the contructur and the destructor respctively.
//
// The following templates are used to recognize if the user declared
// the methods Init and Destroy.

template<typename T>
struct ParserInitExistsRecognizer {
  template<typename U, void ( U::* )() = &U::Init>
  struct ExistsIfInitIsDefinedMarker {};

  struct InitIsMissingType {
    char dummy1;
  };

  struct InitExistsType {
    char dummy1; char dummy2;
  };

  // exists always
  template<typename U>
  static InitIsMissingType is_here( ... );

  // exist only if ExistsIfInitIsDefinedMarker is defined
  template<typename U>
  static InitExistsType is_here( ExistsIfInitIsDefinedMarker<U>* );

  enum { InitExists = ( sizeof( is_here<T>( NULL ) ) == sizeof( InitExistsType ) ) };
};

template<typename T>
struct ParserDestroyExistsRecognizer {
  template<typename U, void ( U::* )() = &U::Destroy>
  struct ExistsIfDestroyIsDefinedMarker {};

  struct DestroyIsMissingType {
    char dummy1;
  };

  struct DestroyExistsType {
    char dummy1; char dummy2;
  };

  // exists always
  template<typename U>
  static DestroyIsMissingType is_here( ... );

  // exist only if ExistsIfDestroyIsDefinedMarker is defined
  template<typename U>
  static DestroyExistsType is_here( ExistsIfDestroyIsDefinedMarker<U>* );

  enum { DestroyExists = ( sizeof( is_here<T>( NULL ) ) == sizeof( DestroyExistsType ) ) };
};

// The folloing templates are used to call the Init and Destroy methods if they exist.

// Generic case of the ParserInitCaller, gets used if the Init method is missing
template<typename T, bool = ParserInitExistsRecognizer<T>::InitExists>
struct ParserInitCaller {
  static void CallInit( T* t ) {
    // nothing to do
  }
};

// True case of the ParserInitCaller, gets used if the Init method exists
template<typename T>
struct ParserInitCaller<T, true> {
  static void CallInit( T* t ) {
    t->Init();
  }
};

// Generic case of the ParserDestroyCaller, gets used if the Destroy method is missing
template<typename T, bool = ParserDestroyExistsRecognizer<T>::DestroyExists>
struct ParserDestroyCaller {
  static void CallDestroy( T* t ) {
    // nothing to do
  }
};

// True case of the ParserDestroyCaller, gets used if the Destroy method exists
template<typename T>
struct ParserDestroyCaller<T, true> {
  static void CallDestroy( T* t ) {
    t->Destroy();
  }
};
void Parser::Parse() {
  t = NULL;
  la = dummyToken = new Token();
  la->val = coco_string_create( L"Dummy Token" );
  Get();
  	NEWO3PRM();

}

Parser::Parser( Scanner* scanner ) {
  	maxT = 27;

  ParserInitCaller<Parser>::CallInit( this );
  dummyToken = NULL;
  t = la = NULL;
  minErrDist = 2;
  errDist = minErrDist;
  this->scanner = scanner;
}

bool Parser::StartOf( int s ) {
  const bool T = true;
  const bool x = false;

  	static bool set[2][29] = {
		{T,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x},
		{x,x,x,x, x,x,x,x, x,T,T,T, x,x,x,x, x,T,x,x, x,x,x,x, x,x,x,x, x}
	};



  return set[s][la->kind];
}

Parser::~Parser() {
  ParserDestroyCaller<Parser>::CallDestroy( this );
  delete dummyToken;
}
void Parser::SemErr( const wchar_t* msg ) {
  if ( errDist >= minErrDist ) __errors.Error( scanner->filename(),t->line, t->col, msg );

  errDist = 0;
}

void Parser::Warning( const wchar_t* msg ) {
  __errors.Warning( scanner->filename(),t->line, t->col, msg );
}

void Parser::SynErr( const std::wstring& filename,int line, int col, int n ) {
  wchar_t* s;

  switch ( n ) {
      			case 0: s = coco_string_create(L"EOF expected"); break;
			case 1: s = coco_string_create(L"integer expected"); break;
			case 2: s = coco_string_create(L"float expected"); break;
			case 3: s = coco_string_create(L"label expected"); break;
			case 4: s = coco_string_create(L"eol expected"); break;
			case 5: s = coco_string_create(L"dot expected"); break;
			case 6: s = coco_string_create(L"comma expected"); break;
			case 7: s = coco_string_create(L"colon expected"); break;
			case 8: s = coco_string_create(L"semicolon expected"); break;
			case 9: s = coco_string_create(L"type expected"); break;
			case 10: s = coco_string_create(L"class expected"); break;
			case 11: s = coco_string_create(L"interface expected"); break;
			case 12: s = coco_string_create(L"extends expected"); break;
			case 13: s = coco_string_create(L"system expected"); break;
			case 14: s = coco_string_create(L"dependson expected"); break;
			case 15: s = coco_string_create(L"default expected"); break;
			case 16: s = coco_string_create(L"implements expected"); break;
			case 17: s = coco_string_create(L"int expected"); break;
			case 18: s = coco_string_create(L"real expected"); break;
			case 19: s = coco_string_create(L"string expected"); break;
			case 20: s = coco_string_create(L"\"{\" expected"); break;
			case 21: s = coco_string_create(L"\"}\" expected"); break;
			case 22: s = coco_string_create(L"\"[\" expected"); break;
			case 23: s = coco_string_create(L"\"]\" expected"); break;
			case 24: s = coco_string_create(L"\"(\" expected"); break;
			case 25: s = coco_string_create(L"\")\" expected"); break;
			case 26: s = coco_string_create(L"\"*\" expected"); break;
			case 27: s = coco_string_create(L"??? expected"); break;
			case 28: s = coco_string_create(L"invalid UNIT"); break;
			case 29: s = coco_string_create(L"invalid TYPE_UNIT"); break;
			case 30: s = coco_string_create(L"invalid CLASS_BODY"); break;
			case 31: s = coco_string_create(L"invalid CLASS_PARAMETER"); break;
			case 32: s = coco_string_create(L"invalid CLASS_ELEMENT"); break;
			case 33: s = coco_string_create(L"invalid CLASS_ELEMENT"); break;
			case 34: s = coco_string_create(L"invalid TYPE_DECLARATION"); break;
			case 35: s = coco_string_create(L"invalid LABEL_OR_STAR"); break;
			case 36: s = coco_string_create(L"invalid FORMULA"); break;


    default: {
      wchar_t format[20];
      coco_swprintf( format, 20, L"error %d", n );
      s = coco_string_create( format );
    }
    break;
  }

  //wprintf(L"-- line %d col %d: %ls\n", line, col, s);
  std::wstring ss=L"Syntax error : "+std::wstring( s );
  __errors.Error( filename,line,col,ss.c_str() );
  coco_string_delete( s );
}

} // namespace
} // namespace
} // namespace



