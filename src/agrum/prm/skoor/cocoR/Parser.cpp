/***************************************************************************
 *  aGrUM modified frames and atg files for cocoR
 *   Copyright (c) 2005 by Christophe GONZALES and Pierre-Henri WUILLEMIN  *
 *   {prenom.nom}_at_lip6.fr   
***************************************************************************/
/*----------------------------------------------------------------------
Compiler Generator Coco/R,
Copyright (c) 1990, 2004 Hanspeter Moessenboeck, University of Linz
extended by M. Loeberbauer & A. Woess, Univ. of Linz
ported to C++ by Csaba Balazs, University of Szeged
with improvements by Pat Terry, Rhodes University

This program is free software; you can redistribute it and/or modify it 
under the terms of the GNU General Public License as published by the 
Free Software Foundation; either version 2, or (at your option) any 
later version.

This program is distributed in the hope that it will be useful, but 
WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License 
for more details.

You should have received a copy of the GNU General Public License along 
with this program; if not, write to the Free Software Foundation, Inc., 
59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

As an exception, it is allowed to write an extension of Coco/R that is
used as a plugin in non-free software.

If not otherwise stated, any source code generated by Coco/R (other than 
Coco/R itself) does not fall under the GNU General Public License.
-----------------------------------------------------------------------*/


#include <iostream>
#include <wchar.h>

#include "Parser.h"
#include "Scanner.h"


namespace gum {
namespace prm {
namespace skoor {


void Parser::SynErr(int n) {
	if (errDist >= minErrDist) SynErr(scanner->filename(),la->line, la->col, n);
	errDist = 0;
}


const ErrorsContainer& Parser::errors(void) const {
	return __errors;
}

void Parser::Get() {
	for (;;) {
		t = la;
		la = scanner->Scan();
		if (la->kind <= maxT) { ++errDist; break; }

		if (dummyToken != t) {
			dummyToken->kind = t->kind;
			dummyToken->pos = t->pos;
			dummyToken->col = t->col;
			dummyToken->line = t->line;
			dummyToken->next = NULL;
			coco_string_delete(dummyToken->val);
			dummyToken->val = coco_string_create(t->val);
			t = dummyToken;
		}
		la = t;
	}
}

void Parser::Expect(int n) {
	if (la->kind==n) Get(); else { SynErr(n); }
}

void Parser::ExpectWeak(int n, int follow) {
	if (la->kind == n) Get();
	else {
		SynErr(n);
		while (!StartOf(follow)) Get();
	}
}

bool Parser::WeakSeparator(int n, int syFol, int repFol) {
	if (la->kind == n) {Get(); return true;}
	else if (StartOf(repFol)) {return false;}
	else {
		SynErr(n);
		while (!(StartOf(syFol) || StartOf(repFol) || StartOf(0))) {
			Get();
		}
		return StartOf(syFol);
	}
}

void Parser::skoor() {
		if (la->kind == 5) {
			Get();
			Expect(3);
			__context->setPackage( gum::narrow(t->val) ); 
			Expect(12);
		}
		if (la->kind == 6) {
			Get();
			Expect(3);
			__context->addImport( t->line, gum::narrow(t->val) ); 
			Expect(12);
		}
		while (la->kind == 7) {
			RequestBloc();
		}
}

void Parser::RequestBloc() {
		Expect(7);
		Expect(3);
		__currentSession = new SkoorSession(gum::narrow(t->val)); 
		Expect(13);
		while (StartOf(1)) {
			if (la->kind == 3) {
				Observe();
			} else if (la->kind == 9) {
				Unobserve();
			} else if (la->kind == 8) {
				Query();
			} else if (la->kind == 10) {
				SetEngine();
			} else {
				SetGrdEngine();
			}
		}
		Expect(14);
		__context->addSession( __currentSession ); 
}

void Parser::Observe() {
		std::string left_value, right_value; 
		Expect(3);
		left_value = gum::narrow(t->val); 
		Expect(15);
		Expect(3);
		right_value = gum::narrow(t->val); 
		Expect(12);
		__currentSession->addObserve(t->line, left_value, right_value); 
}

void Parser::Unobserve() {
		Expect(9);
		Expect(3);
		__currentSession->addUnobserve( t->line, gum::narrow(t->val) ); 
		Expect(12);
}

void Parser::Query() {
		Expect(8);
		Expect(3);
		__currentSession->addQuery( t->line, gum::narrow(t->val) ); 
		Expect(12);
}

void Parser::SetEngine() {
		Expect(10);
		Expect(3);
		__currentSession->addSetEngine( t->line, gum::narrow(t->val) ); 
		Expect(12);
}

void Parser::SetGrdEngine() {
		Expect(11);
		Expect(3);
		__currentSession->addSetGndEngine( t->line, gum::narrow(t->val) ); 
		Expect(12);
}



void Parser::Parse() {
	t = NULL;
	la = dummyToken = new Token();
	la->val = coco_string_create(L"Dummy Token");
	Get();
	skoor();
	Expect(0);
}

Parser::Parser(Scanner *scanner) {
	maxT = 16;

	dummyToken = NULL;
	t = la = NULL;
	minErrDist = 2;
	errDist = minErrDist;
	this->scanner = scanner;
}

bool Parser::StartOf(int s) {
	const bool T = true;
	const bool x = false;

	static bool set[2][18] = {
		{T,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x},
		{x,x,x,T, x,x,x,x, T,T,T,T, x,x,x,x, x,x}
	};



	return set[s][la->kind];
}

Parser::~Parser() {
	delete dummyToken;
}
void Parser::SemErr(const wchar_t* msg) {
	if (errDist >= minErrDist) __errors.Error(scanner->filename(),t->line, t->col, msg);
	errDist = 0;
}

void Parser::Warning(const wchar_t* msg) {
	__errors.Warning(scanner->filename(),t->line, t->col, msg);
}

void Parser::SynErr(const std::wstring& filename,int line, int col, int n) {
	wchar_t* s;
	switch (n) {
			case 0: s = coco_string_create(L"EOF expected"); break;
			case 1: s = coco_string_create(L"integer expected"); break;
			case 2: s = coco_string_create(L"float expected"); break;
			case 3: s = coco_string_create(L"word expected"); break;
			case 4: s = coco_string_create(L"eol expected"); break;
			case 5: s = coco_string_create(L"package expected"); break;
			case 6: s = coco_string_create(L"import expected"); break;
			case 7: s = coco_string_create(L"request expected"); break;
			case 8: s = coco_string_create(L"query expected"); break;
			case 9: s = coco_string_create(L"unobserve expected"); break;
			case 10: s = coco_string_create(L"engine expected"); break;
			case 11: s = coco_string_create(L"grd_engine expected"); break;
			case 12: s = coco_string_create(L"\";\" expected"); break;
			case 13: s = coco_string_create(L"\"{\" expected"); break;
			case 14: s = coco_string_create(L"\"}\" expected"); break;
			case 15: s = coco_string_create(L"\"=\" expected"); break;
			case 16: s = coco_string_create(L"??? expected"); break;

		default:
		{
			wchar_t format[20];
			coco_swprintf(format, 20, L"error %d", n);
			s = coco_string_create(format);
		}
		break;
	}
	//wprintf(L"-- line %d col %d: %ls\n", line, col, s);
	wstring ss=L"Syntax error : "+std::wstring(s);
  __errors.Error(filename,line,col,ss.c_str());
	coco_string_delete(s);
}

} // namespace
} // namespace
} // namespace


