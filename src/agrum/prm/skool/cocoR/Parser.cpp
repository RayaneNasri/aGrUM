/***************************************************************************
 *  aGrUM modified frames and atg files for cocoR
 *   Copyright (c) 2005 by Christophe GONZALES and Pierre-Henri WUILLEMIN  *
 *   {prenom.nom}_at_lip6.fr   
***************************************************************************/
/*----------------------------------------------------------------------
Compiler Generator Coco/R,
Copyright (c) 1990, 2004 Hanspeter Moessenboeck, University of Linz
extended by M. Loeberbauer & A. Woess, Univ. of Linz
ported to C++ by Csaba Balazs, University of Szeged
with improvements by Pat Terry, Rhodes University

This program is free software; you can redistribute it and/or modify it 
under the terms of the GNU General Public License as published by the 
Free Software Foundation; either version 2, or (at your option) any 
later version.

This program is distributed in the hope that it will be useful, but 
WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License 
for more details.

You should have received a copy of the GNU General Public License along 
with this program; if not, write to the Free Software Foundation, Inc., 
59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

As an exception, it is allowed to write an extension of Coco/R that is
used as a plugin in non-free software.

If not otherwise stated, any source code generated by Coco/R (other than 
Coco/R itself) does not fall under the GNU General Public License.
-----------------------------------------------------------------------*/


#include <iostream>
#include <wchar.h>

#include "Parser.h"
#include "Scanner.h"


namespace gum {
namespace prm {
namespace skool {


void Parser::SynErr(int n) {
	if (errDist >= minErrDist) SynErr(scanner->filename(),la->line, la->col, n);
	errDist = 0;
}


const ErrorsContainer& Parser::errors(void) const {
	return __errors;
}

void Parser::Get() {
	for (;;) {
		t = la;
		la = scanner->Scan();
		if (la->kind <= maxT) { ++errDist; break; }

		if (dummyToken != t) {
			dummyToken->kind = t->kind;
			dummyToken->pos = t->pos;
			dummyToken->col = t->col;
			dummyToken->line = t->line;
			dummyToken->next = NULL;
			coco_string_delete(dummyToken->val);
			dummyToken->val = coco_string_create(t->val);
			t = dummyToken;
		}
		la = t;
	}
}

void Parser::Expect(int n) {
	if (la->kind==n) Get(); else { SynErr(n); }
}

void Parser::ExpectWeak(int n, int follow) {
	if (la->kind == n) Get();
	else {
		SynErr(n);
		while (!StartOf(follow)) Get();
	}
}

bool Parser::WeakSeparator(int n, int syFol, int repFol) {
	if (la->kind == n) {Get(); return true;}
	else if (StartOf(repFol)) {return false;}
	else {
		SynErr(n);
		while (!(StartOf(syFol) || StartOf(repFol) || StartOf(0))) {
			Get();
		}
		return StartOf(syFol);
	}
}

void Parser::Skool() {
		if (la->kind == 20) {
			Package();
		}
		while (la->kind == 21) {
			while (!(la->kind == 0 || la->kind == 21)) {SynErr(31); Get();}
			Import();
		}
		while (StartOf(1)) {
			while (!(StartOf(2))) {SynErr(32); Get();}
			Unit();
		}
		factory().popPackage(); 
}

void Parser::Package() {
		std::string name; 
		while (!(la->kind == 0 || la->kind == 20)) {SynErr(33); Get();}
		Expect(20);
		Ident(name);
		factory().pushPackage(name); __package = name; 
		while (!(la->kind == 0 || la->kind == 8)) {SynErr(34); Get();}
		Expect(8);
}

void Parser::Import() {
		std::string fileID; 
		while (!(la->kind == 0 || la->kind == 21)) {SynErr(35); Get();}
		Expect(21);
		Ident(fileID);
		import(fileID); 
		while (!(la->kind == 0 || la->kind == 8)) {SynErr(36); Get();}
		Expect(8);
}

void Parser::Unit() {
		if (la->kind == 9) {
			Type();
		} else if (la->kind == 11) {
			Interface();
		} else if (la->kind == 10) {
			Class();
		} else if (la->kind == 13) {
			System();
		} else SynErr(37);
}

void Parser::Ident(std::string& s) {
		std::stringstream sBuff; 
		Expect(3);
		sBuff << narrow(t->val); 
		while (la->kind == 5) {
			Get();
			Expect(3);
			sBuff << "." << narrow(t->val); 
		}
		s = sBuff.str(); 
}

void Parser::Type() {
		while (!(la->kind == 0 || la->kind == 9)) {SynErr(38); Get();}
		Expect(9);
		Expect(3);
		std::string name, extends, l, s; name = narrow(t->val); 
		if (la->kind == 12) {
			Get();
			Ident(extends);
		}
		TRY2(factory().startDiscreteType(name, extends), "Can not create type "+name) 
		Label(l);
		if (la->kind == 7) {
			Get();
			Label(s);
		}
		TRY2(factory().addLabel(l, s), "Can not add label "+l) 
		while (la->kind == 6) {
			s = ""; 
			ExpectWeak(6, 3);
			Label(l);
			if (la->kind == 7) {
				Get();
				Label(s);
			}
			TRY2(factory().addLabel(l, s), "Can not add label "+l) 
		}
		while (!(la->kind == 0 || la->kind == 8)) {SynErr(39); Get();}
		Expect(8);
		TRY2(factory().endDiscreteType(), "Can not create type "+name) 
}

void Parser::Interface() {
		while (!(la->kind == 0 || la->kind == 11)) {SynErr(40); Get();}
		Expect(11);
		Expect(3);
		std::string interface, extends; interface = narrow(t->val); 
		if (la->kind == 12) {
			Get();
			Ident(extends);
		}
		while (!(la->kind == 0 || la->kind == 22)) {SynErr(41); Get();}
		Expect(22);
		TRY2(factory().startInterface(interface, extends), "Can not create interface "+interface) 
		while (la->kind == 3) {
			std::string type, name; 
			Ident(type);
			if (la->kind == 23) {
				Get();
				Expect(24);
				Expect(3);
				name = narrow(t->val); bool array = true; 
				Reference(type, name, array);
			} else if (la->kind == 3) {
				Get();
				name = narrow(t->val); bool array = false; 
				if (isClassOrInterface(type)) {
					Reference(type, name, array);
				} else if (la->kind == 8) {
					while (!(la->kind == 0 || la->kind == 8)) {SynErr(42); Get();}
					Get();
					TRY2(factory().addAttribute(type, name), "Can not add attribute "+name) 
				} else SynErr(43);
			} else SynErr(44);
		}
		while (!(la->kind == 0 || la->kind == 25)) {SynErr(45); Get();}
		Expect(25);
		TRY2(factory().endInterface(), "Can not create interface "+interface) 
}

void Parser::Class() {
		Expect(10);
		Expect(3);
		std::string c, super; c = narrow(t->val); 
		if (la->kind == 12) {
			Get();
			Ident(super);
		}
		gum::Set<std::string> set; 
		if (la->kind == 16) {
			std::string i; 
			Get();
			Ident(i);
			set.insert(i); 
			while (la->kind == 6) {
				Get();
				Ident(i);
				set.insert(i); 
			}
		}
		while (!(la->kind == 0 || la->kind == 22)) {SynErr(46); Get();}
		Expect(22);
		TRY2(factory().startClass(c, super, (set.empty()?0:&set)), "Can not create class "+c) 
		while (la->kind == 3) {
			std::string type, name; bool array = false; 
			Ident(type);
			if (la->kind == 23) {
				Get();
				Expect(24);
				Expect(3);
				name = narrow(t->val); array = true; 
				Reference(type, name, array);
			} else if (la->kind == 3) {
				Get();
				name = narrow(t->val); array = false; 
				if (la->kind == 8 || la->kind == 15) {
					RefOrParam(type, name, array);
				} else if (la->kind == 14 || la->kind == 22) {
					Attribute(type, name);
				} else if (la->kind == 27) {
					Aggregate(type, name);
				} else if (la->kind == 28) {
					Functions(type, name);
				} else SynErr(47);
			} else SynErr(48);
		}
		while (!(la->kind == 0 || la->kind == 25)) {SynErr(49); Get();}
		Expect(25);
		TRY2(factory().endClass(), "Can not create class "+c) 
}

void Parser::System() {
		Expect(13);
		Expect(3);
		TRY(factory().startSystem(narrow(t->val))) 
		Expect(22);
		while (la->kind == 3) {
			std::string l1, r1; 
			Ident(l1);
			if (la->kind == 23) {
				ArrayDecl(l1);
			} else if (la->kind == 3) {
				Get();
				TRY(factory().addInstance(l1, narrow(t->val))) 
			} else if (la->kind == 29) {
				Get();
				Ident(r1);
				gum::prm::System * system = static_cast<gum::prm::System*>(factory().getCurrent());
				if ( system && system->isArray(l1) ) {
				    TRY(factory().incArray(l1, r1)) 
				} else {
				    TRY(factory().setReferenceSlot(l1, r1)) 
				} 
				
			} else if (la->kind == 27) {
				Get();
				Ident(r1);
				TRY( try {
				factory().setReferenceSlot(l1, r1);
				} catch (gum::Exception& e) {
				    size_t pos = l1.find_last_of('.');
				    if (pos != std::string::npos) {
				        std::string i = l1.substr(0, pos);
				        std::string p = l1.substr(pos+1, std::string::npos);
				        factory().setParameter(i, p, r1);
				    }
				} )
				
			} else SynErr(50);
			Expect(8);
		}
		while (!(la->kind == 0 || la->kind == 25)) {SynErr(51); Get();}
		Expect(25);
		TRY(factory().endSystem()) 
}

void Parser::Label(std::string& s) {
		if (la->kind == 3) {
			Get();
			s = narrow(t->val); 
		} else if (la->kind == 1 || la->kind == 2) {
			float val; 
			Number(val);
			std::stringstream sBuff; sBuff << val; s = sBuff.str(); 
		} else SynErr(52);
}

void Parser::Reference(std::string type, std::string name, bool array) {
		Expect(8);
		TRY2(factory().addReferenceSlot(type, name, array), "Can not add reference "+name) 
}

void Parser::RefOrParam(std::string type, std::string name, bool array) {
		if (isClassOrInterface(type)) {
			Reference(type, name, array);
		} else if (la->kind == 8 || la->kind == 15) {
			Parameter(type, name);
		} else SynErr(53);
}

void Parser::Attribute(std::string type, std::string name) {
		std::string p; bool error = false; 
		TRY3(factory().startAttribute(type, name), "Can not create attribute "+name,error) 
		if (la->kind == 14) {
			Get();
			CastIdent(p);
			TRY3(factory().addParent(p), "Can not add parent "+p,error) 
			while (la->kind == 6) {
				Get();
				CastIdent(p);
				TRY3(factory().addParent(p), "Can not add parent "+p,error) 
			}
		}
		Expect(22);
		if (la->kind == 23) {
			Get();
			std::vector<float> cpt; float f; 
			Number(f);
			cpt.push_back(f); 
			while (WeakSeparator(6,5,4) ) {
				Number(f);
				cpt.push_back(f); 
			}
			Expect(24);
			TRY3(factory().setRawCPFByColumns(cpt), "Problem with CPF of "+name,error) 
		} else if (la->kind == 3 || la->kind == 26) {
			CPTRule(error);
			while (la->kind == 3 || la->kind == 26) {
				CPTRule(error);
			}
		} else SynErr(54);
		Expect(25);
		TRY3(factory().endAttribute(), "Can not create attribute "+name,error) 
		while (!(la->kind == 0 || la->kind == 8)) {SynErr(55); Get();}
		Expect(8);
}

void Parser::Aggregate(std::string type, std::string name) {
		std::string func, s; std::vector<std::string> chains, labels; 
		Expect(27);
		Expect(3);
		func = narrow(t->val); 
		Expect(18);
		AggChains(chains);
		ExpectWeak(6, 6);
		AggLabels(labels);
		Expect(19);
		TRY2(factory().addAggregator(name, func, chains, labels), "Can not create aggregator "+name) 
		while (!(la->kind == 0 || la->kind == 8)) {SynErr(56); Get();}
		Expect(8);
}

void Parser::Functions(std::string type, std::string name) {
		if (type != "boolean") {TRY(throw gum::OperationNotAllowed("noisy-or attributes must be booleans"))} 
		Expect(28);
		Expect(17);
		Expect(18);
		std::vector<std::string> chains, labels; std::vector<float> numbers; float leak = 0.0; 
		AggChains(chains);
		Expect(6);
		NumberList(numbers);
		if (la->kind == 6) {
			Get();
			Number(leak);
			if (la->kind == 6) {
				Get();
				AggLabels(labels);
			}
		}
		Expect(19);
		while (!(la->kind == 0 || la->kind == 8)) {SynErr(57); Get();}
		Expect(8);
		TRY2(factory().addNoisyOrCompound(name, chains, numbers, leak, labels), "Can not add function"+name) 
}

void Parser::Parameter(std::string type, std::string name) {
		std::string l; 
		if (la->kind == 15) {
			Get();
			Label(l);
		}
		TRY2(factory().addParameter(type, name, l), "Can not add parameter "+name) 
		Expect(8);
}

void Parser::CastIdent(std::string& s) {
		std::string cast, open(gum::prm::ClassElement::LEFT_CAST()), close(gum::prm::ClassElement::RIGHT_CAST()); std::stringstream sBuff; 
		if (la->kind == 18) {
			Get();
			Ident(cast);
			Expect(19);
			sBuff << open << cast << close; 
		}
		Expect(3);
		sBuff << narrow(t->val); 
		while (la->kind == 5) {
			cast = ""; 
			Get();
			sBuff << '.'; 
			if (la->kind == 18) {
				Get();
				Ident(cast);
				Expect(19);
				sBuff << open << cast << close; 
			}
			Expect(3);
			sBuff << narrow(t->val); 
		}
		s = sBuff.str(); 
}

void Parser::Number(float& val) {
		if (la->kind == 1) {
			Get();
			swscanf(t->val, L"%f", &val); 
		} else if (la->kind == 2) {
			Get();
			swscanf(t->val, L"%f", &val); 
		} else SynErr(58);
}

void Parser::CPTRule(bool &error) {
		std::vector<std::string> labels; std::vector<float> values; 
		std::string s; float f; 
		CPTRuleValue(s);
		labels.push_back(s); 
		while (WeakSeparator(6,8,7) ) {
			CPTRuleValue(s);
			labels.push_back(s); 
		}
		Expect(7);
		Number(f);
		values.push_back(f); 
		while (WeakSeparator(6,5,9) ) {
			Number(f);
			values.push_back(f); 
		}
		while (!(la->kind == 0 || la->kind == 8)) {SynErr(59); Get();}
		Expect(8);
		TRY3(factory().setCPFByRule(labels, values), std::string("Problem with CPF"), error) 
}

void Parser::CPTRuleValue(std::string& s ) {
		if (la->kind == 3) {
			Get();
			s = narrow(t->val); 
		} else if (la->kind == 26) {
			Get();
			s = "*"; 
		} else SynErr(60);
}

void Parser::AggChains(std::vector<std::string>& chains ) {
		if (la->kind == 3 || la->kind == 18) {
			std::string s; 
			CastIdent(s);
			chains.push_back(s); 
		} else if (la->kind == 23) {
			Get();
			std::string s; 
			CastIdent(s);
			chains.push_back(s); 
			while (WeakSeparator(6,10,4) ) {
				CastIdent(s);
				chains.push_back(s); 
			}
			Expect(24);
		} else if (la->kind == 22) {
			Get();
			std::string s; 
			CastIdent(s);
			chains.push_back(s); 
			while (WeakSeparator(6,10,11) ) {
				CastIdent(s);
				chains.push_back(s); 
			}
			while (!(la->kind == 0 || la->kind == 25)) {SynErr(61); Get();}
			Expect(25);
		} else SynErr(62);
}

void Parser::AggLabels(std::vector<std::string>& labels ) {
		if (la->kind == 3) {
			Get();
			labels.push_back(narrow(t->val)); 
		} else if (la->kind == 23) {
			Get();
			Expect(3);
			labels.push_back(narrow(t->val)); 
			while (la->kind == 6) {
				Get();
				Expect(3);
				labels.push_back(narrow(t->val)); 
			}
			Expect(24);
		} else if (la->kind == 22) {
			Get();
			Expect(3);
			labels.push_back(narrow(t->val)); 
			while (WeakSeparator(6,12,11) ) {
				Expect(3);
				labels.push_back(narrow(t->val)); 
			}
			while (!(la->kind == 0 || la->kind == 25)) {SynErr(63); Get();}
			Expect(25);
		} else SynErr(64);
}

void Parser::NumberList(std::vector<float>& numbers ) {
		float f; 
		if (la->kind == 1 || la->kind == 2) {
			Number(f);
			numbers.push_back(f); 
		} else if (la->kind == 23) {
			Get();
			Number(f);
			numbers.push_back(f); 
			while (WeakSeparator(6,5,4) ) {
				Number(f);
				numbers.push_back(f); 
			}
			Expect(24);
		} else SynErr(65);
}

void Parser::ArrayDecl(std::string l1) {
		std::string r1; std::stringstream sBuff; sBuff << l1; int size = 0; 
		Expect(23);
		if (la->kind == 1) {
			Get();
			sBuff << '[' << narrow(t->val) << ']'; swscanf(t->val, L"%d", &size); 
		}
		Expect(24);
		if (la->kind == 3) {
			Get();
			TRY(factory().addArray(l1, narrow(t->val), size)) 
		} else if (la->kind == 5) {
			Get();
			Expect(3);
			std::string l2 = narrow(t->val); 
			if (la->kind == 29) {
				Get();
				Ident(r1);
				TRY(factory().setReferenceSlot(sBuff.str(), l2, r1)) 
			} else if (la->kind == 27) {
				Get();
				Ident(r1);
				TRY( try { factory().setReferenceSlot(sBuff.str(), l2, r1); }
				catch ( gum::Exception& e ) { factory().setParameter(sBuff.str(), l2, r1); } ) 
			} else SynErr(66);
		} else SynErr(67);
}



void Parser::Parse() {
	t = NULL;
	la = dummyToken = new Token();
	la->val = coco_string_create(L"Dummy Token");
	Get();
	Skool();

}

Parser::Parser(Scanner *scanner) {
	maxT = 30;

	dummyToken = NULL;
	t = la = NULL;
	minErrDist = 2;
	errDist = minErrDist;
	this->scanner = scanner;
}

bool Parser::StartOf(int s) {
	const bool T = true;
	const bool x = false;

	static bool set[13][32] = {
		{T,x,x,x, x,x,x,x, T,T,T,T, x,T,x,x, x,x,x,x, T,T,T,x, x,T,x,x, x,x,x,x},
		{x,x,x,x, x,x,x,x, x,T,T,T, x,T,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x},
		{T,x,x,x, x,x,x,x, x,T,T,T, x,T,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x},
		{T,T,T,T, x,x,x,x, T,T,T,T, x,T,x,x, x,x,x,x, T,T,T,x, x,T,x,x, x,x,x,x},
		{x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, T,x,x,x, x,x,x,x},
		{x,T,T,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x},
		{T,x,x,T, x,x,x,x, T,T,T,T, x,T,x,x, x,x,x,x, T,T,T,T, x,T,x,x, x,x,x,x},
		{x,x,x,x, x,x,x,T, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x},
		{x,x,x,T, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,T,x, x,x,x,x},
		{x,x,x,x, x,x,x,x, T,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x},
		{x,x,x,T, x,x,x,x, x,x,x,x, x,x,x,x, x,x,T,x, x,x,x,x, x,x,x,x, x,x,x,x},
		{x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,T,x,x, x,x,x,x},
		{x,x,x,T, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x}
	};



	return set[s][la->kind];
}

Parser::~Parser() {
	delete dummyToken;
}
void Parser::SemErr(const wchar_t* msg) {
	if (errDist >= minErrDist) __errors.Error(scanner->filename(),t->line, t->col, msg);
	errDist = 0;
}

void Parser::Warning(const wchar_t* msg) {
	__errors.Warning(scanner->filename(),t->line, t->col, msg);
}

void Parser::SynErr(const std::wstring& filename,int line, int col, int n) {
	wchar_t* s;
	switch (n) {
			case 0: s = coco_string_create(L"EOF expected"); break;
			case 1: s = coco_string_create(L"integer expected"); break;
			case 2: s = coco_string_create(L"float expected"); break;
			case 3: s = coco_string_create(L"word expected"); break;
			case 4: s = coco_string_create(L"eol expected"); break;
			case 5: s = coco_string_create(L"dot expected"); break;
			case 6: s = coco_string_create(L"comma expected"); break;
			case 7: s = coco_string_create(L"colon expected"); break;
			case 8: s = coco_string_create(L"semicolon expected"); break;
			case 9: s = coco_string_create(L"type expected"); break;
			case 10: s = coco_string_create(L"class expected"); break;
			case 11: s = coco_string_create(L"interface expected"); break;
			case 12: s = coco_string_create(L"extends expected"); break;
			case 13: s = coco_string_create(L"system expected"); break;
			case 14: s = coco_string_create(L"dependson expected"); break;
			case 15: s = coco_string_create(L"default expected"); break;
			case 16: s = coco_string_create(L"implements expected"); break;
			case 17: s = coco_string_create(L"noisyOr expected"); break;
			case 18: s = coco_string_create(L"LEFT_CAST expected"); break;
			case 19: s = coco_string_create(L"RIGHT_CAST expected"); break;
			case 20: s = coco_string_create(L"\"package\" expected"); break;
			case 21: s = coco_string_create(L"\"import\" expected"); break;
			case 22: s = coco_string_create(L"\"{\" expected"); break;
			case 23: s = coco_string_create(L"\"[\" expected"); break;
			case 24: s = coco_string_create(L"\"]\" expected"); break;
			case 25: s = coco_string_create(L"\"}\" expected"); break;
			case 26: s = coco_string_create(L"\"*\" expected"); break;
			case 27: s = coco_string_create(L"\"=\" expected"); break;
			case 28: s = coco_string_create(L"\"~\" expected"); break;
			case 29: s = coco_string_create(L"\"+=\" expected"); break;
			case 30: s = coco_string_create(L"??? expected"); break;
			case 31: s = coco_string_create(L"this symbol not expected in Skool"); break;
			case 32: s = coco_string_create(L"this symbol not expected in Skool"); break;
			case 33: s = coco_string_create(L"this symbol not expected in Package"); break;
			case 34: s = coco_string_create(L"this symbol not expected in Package"); break;
			case 35: s = coco_string_create(L"this symbol not expected in Import"); break;
			case 36: s = coco_string_create(L"this symbol not expected in Import"); break;
			case 37: s = coco_string_create(L"invalid Unit"); break;
			case 38: s = coco_string_create(L"this symbol not expected in Type"); break;
			case 39: s = coco_string_create(L"this symbol not expected in Type"); break;
			case 40: s = coco_string_create(L"this symbol not expected in Interface"); break;
			case 41: s = coco_string_create(L"this symbol not expected in Interface"); break;
			case 42: s = coco_string_create(L"this symbol not expected in Interface"); break;
			case 43: s = coco_string_create(L"invalid Interface"); break;
			case 44: s = coco_string_create(L"invalid Interface"); break;
			case 45: s = coco_string_create(L"this symbol not expected in Interface"); break;
			case 46: s = coco_string_create(L"this symbol not expected in Class"); break;
			case 47: s = coco_string_create(L"invalid Class"); break;
			case 48: s = coco_string_create(L"invalid Class"); break;
			case 49: s = coco_string_create(L"this symbol not expected in Class"); break;
			case 50: s = coco_string_create(L"invalid System"); break;
			case 51: s = coco_string_create(L"this symbol not expected in System"); break;
			case 52: s = coco_string_create(L"invalid Label"); break;
			case 53: s = coco_string_create(L"invalid RefOrParam"); break;
			case 54: s = coco_string_create(L"invalid Attribute"); break;
			case 55: s = coco_string_create(L"this symbol not expected in Attribute"); break;
			case 56: s = coco_string_create(L"this symbol not expected in Aggregate"); break;
			case 57: s = coco_string_create(L"this symbol not expected in Functions"); break;
			case 58: s = coco_string_create(L"invalid Number"); break;
			case 59: s = coco_string_create(L"this symbol not expected in CPTRule"); break;
			case 60: s = coco_string_create(L"invalid CPTRuleValue"); break;
			case 61: s = coco_string_create(L"this symbol not expected in AggChains"); break;
			case 62: s = coco_string_create(L"invalid AggChains"); break;
			case 63: s = coco_string_create(L"this symbol not expected in AggLabels"); break;
			case 64: s = coco_string_create(L"invalid AggLabels"); break;
			case 65: s = coco_string_create(L"invalid NumberList"); break;
			case 66: s = coco_string_create(L"invalid ArrayDecl"); break;
			case 67: s = coco_string_create(L"invalid ArrayDecl"); break;

		default:
		{
			wchar_t format[20];
			coco_swprintf(format, 20, L"error %d", n);
			s = coco_string_create(format);
		}
		break;
	}
	//wprintf(L"-- line %d col %d: %ls\n", line, col, s);
	wstring ss=L"Syntax error : "+std::wstring(s);
  __errors.Error(filename,line,col,ss.c_str());
	coco_string_delete(s);
}

} // namespace
} // namespace
} // namespace


