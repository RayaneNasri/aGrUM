/***************************************************************************
 *   Copyright (C) 2005 by Christophe GONZALES and Pierre-Henri WUILLEMIN  *
 *   {prenom.nom}_at_lip6.fr                                               *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program; if not, write to the                         *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 ***************************************************************************/
/** @file
 * @brief the class for computing Chi2 scores
 *
 * @author Christophe GONZALES and Pierre-Henri WUILLEMIN
 */

#ifndef DOXYGEN_SHOULD_SKIP_THIS

namespace gum {

  namespace learning {

    template < typename IdSetAlloc, typename CountAlloc >
    const std::vector< double > KNML< IdSetAlloc, CountAlloc >::__Cvec = {
      1.0,           1.5,           1.88888888889, 2.21875,       2.5104,
      2.77469135802, 3.01813870071, 3.24501800537, 3.45831574489, 3.66021568,
      3.85237205074, 4.0360736751,  4.21234791295, 4.38202942438, 4.54580728515,
      4.70425824707, 4.8578708208,  5.00706309899, 5.15219620096, 5.293584586,
      5.43150408335, 5.56619822786, 5.69788331895, 5.82675250392, 5.95297910625,
      6.07671936269, 6.19811469288, 6.31729359534, 6.43437324249, 6.54946083103,
      6.66265473218, 6.77404547667, 6.88371660286, 6.99174539033, 7.09820349737,
      7.2031575174,  7.30666946646, 7.408797212,   7.50959485133, 7.60911304685,
      7.70739932388, 7.80449833604, 7.90045210256, 7.9953002208,  8.08908005739,
      8.1818269202,  8.27357421386, 8.36435358028, 8.45419502625, 8.54312703934,
      8.63117669346, 8.71836974515, 8.80473072166, 8.89028300153, 8.97504888851,
      9.05904967957, 9.14230572731, 9.22483649763, 9.30666062287, 9.38779595095,
      9.46825959085, 9.54806795472, 9.62723679701, 9.70578125079, 9.78371586149,
      9.86105461841, 9.93781098402, 10.0139979213, 10.0896279195, 10.1647130175,
      10.239264827,  10.3132945527, 10.3868130127, 10.4598306561, 10.5323575813,
      10.6044035514, 10.6759780103, 10.7470900966, 10.8177486575, 10.8879622617,
      10.9577392113, 11.0270875534, 11.0960150909, 11.1645293929, 11.2326378041,
      11.3003474542, 11.3676652666, 11.4345979668, 11.5011520898, 11.5673339879,
      11.6331498379, 11.6986056474, 11.7637072616, 11.8284603691, 11.8928705079,
      11.9569430709, 12.0206833111, 12.0840963465, 12.1471871653, 12.2099606302,
      12.2724214826, 12.3345743473, 12.3964237358, 12.4579740508, 12.5192295895,
      12.5801945472, 12.6408730205, 12.7012690107, 12.7613864269, 12.8212290886,
      12.8808007292, 12.9401049979, 12.9991454631, 13.0579256142, 13.1164488646,
      13.1747185536, 13.2327379487, 13.2905102481, 13.3480385822, 13.405326016,
      13.4623755507, 13.5191901259, 13.5757726211, 13.6321258572, 13.6882525988,
      13.7441555552, 13.799837382,  13.8553006829, 13.9105480108, 13.9655818692,
      14.0204047137, 14.0750189532, 14.1294269511, 14.1836310264, 14.2376334551,
      14.291436471,  14.3450422672, 14.3984529967, 14.4516707737, 14.5046976745,
      14.5575357382, 14.6101869683, 14.6626533327, 14.7149367651, 14.7670391659,
      14.8189624026, 14.870708311,  14.9222786955, 14.9736753304, 15.0248999601,
      15.0759543002, 15.1268400377, 15.1775588321, 15.2281123159, 15.2785020951,
      15.3287297498, 15.3787968348, 15.4287048805, 15.4784553929, 15.5280498543,
      15.5774897242, 15.6267764392, 15.6759114139, 15.7248960413, 15.7737316932,
      15.8224197207, 15.8709614543, 15.9193582051, 15.9676112644, 16.0157219046,
      16.0636913794, 16.1115209241, 16.1592117562, 16.2067650757, 16.2541820653,
      16.3014638909, 16.3486117017, 16.3956266311, 16.4425097961, 16.4892622985,
      16.5358852248, 16.5823796464, 16.6287466201, 16.6749871882, 16.721102379,
      16.7670932069, 16.8129606726, 16.8587057635, 16.9043294539, 16.9498327054,
      16.9952164666, 17.0404816741, 17.0856292522, 17.130660113,  17.1755751573,
      17.2203752741, 17.2650613411, 17.309634225,  17.3540947814, 17.3984438554,
      17.4426822814, 17.4868108834, 17.5308304754, 17.5747418613, 17.6185458352,
      17.6622431813, 17.7058346748, 17.749321081,  17.7927031564, 17.8359816483,
      17.8791572952, 17.9222308268, 17.9652029643, 18.0080744204, 18.0508458994,
      18.0935180976, 18.1360917031, 18.1785673961, 18.2209458492, 18.2632277271,
      18.3054136872, 18.3475043792, 18.3895004457, 18.431402522,  18.4732112364,
      18.5149272102, 18.5565510578, 18.598083387,  18.6395247987, 18.6808758874,
      18.7221372412, 18.7633094418, 18.8043930645, 18.8453886786, 18.8862968473,
      18.9271181279, 18.9678530715, 19.0085022239, 19.0490661246, 19.0895453079,
      19.1299403023, 19.1702516311, 19.2104798118, 19.250625357,  19.2906887737,
      19.3306705641, 19.3705712249, 19.4103912481, 19.4501311206, 19.4897913245,
      19.5293723369, 19.5688746305, 19.608298673,  19.6476449276, 19.6869138529,
      19.7261059032, 19.7652215281, 19.804261173,  19.843225279,  19.8821142829,
      19.9209286172, 19.9596687104, 19.9983349871, 20.0369278674, 20.0754477677,
      20.1138951007, 20.1522702747, 20.1905736947, 20.2288057616, 20.2669668727,
      20.3050574217, 20.3430777984, 20.3810283893, 20.4189095772, 20.4567217417,
      20.4944652585, 20.5321405002, 20.5697478361, 20.6072876319, 20.6447602503,
      20.6821660507, 20.7195053891, 20.7567786186, 20.7939860892, 20.8311281476,
      20.8682051376, 20.9052174,    20.9421652726, 20.9790490904, 21.0158691853,
      21.0526258864, 21.0893195201, 21.1259504099, 21.1625188766, 21.1990252382,
      21.2354698101, 21.271852905,  21.3081748329, 21.3444359014, 21.3806364152,
      21.4167766768, 21.4528569861, 21.4888776404, 21.5248389346, 21.5607411612,
      21.5965846104, 21.63236957,   21.6680963252, 21.7037651592, 21.7393763528,
      21.7749301845, 21.8104269307, 21.8458668654, 21.8812502606, 21.9165773859,
      21.9518485091, 21.9870638955, 22.0222238086, 22.0573285097, 22.0923782582,
      22.1273733112, 22.1623139241, 22.1972003501, 22.2320328405, 22.2668116448,
      22.3015370103, 22.3362091828, 22.3708284059, 22.4053949214, 22.4399089693,
      22.4743707879, 22.5087806136, 22.5431386809, 22.5774452227, 22.6117004702,
      22.6459046528, 22.6800579981, 22.7141607321, 22.7482130792, 22.7822152621,
      22.8161675018, 22.8500700178, 22.8839230278, 22.9177267482, 22.9514813936,
      22.985187177,  23.0188443102, 23.0524530031, 23.0860134643, 23.1195259009,
      23.1529905184, 23.1864075209, 23.2197771112, 23.2530994905, 23.2863748585,
      23.3196034138, 23.3527853533, 23.3859208726, 23.4190101661, 23.4520534266,
      23.4850508458, 23.5180026138, 23.5509089198, 23.5837699513, 23.6165858946,
      23.6493569349, 23.682083256,  23.7147650404, 23.7474024696, 23.7799957236,
      23.8125449812, 23.8450504202, 23.8775122172, 23.9099305473, 23.9423055847,
      23.9746375025, 24.0069264724, 24.0391726652, 24.0713762504, 24.1035373964,
      24.1356562707, 24.1677330394, 24.1997678678, 24.2317609198, 24.2637123586,
      24.295622346,  24.3274910431, 24.3593186096, 24.3911052044, 24.4228509853,
      24.4545561092, 24.4862207318, 24.517845008,  24.5494290916, 24.5809731355,
      24.6124772915, 24.6439417106, 24.6753665428, 24.7067519372, 24.7380980417,
      24.7694050037, 24.8006729694, 24.8319020841, 24.8630924924, 24.8942443377,
      24.9253577628, 24.9564329095, 24.9874699186, 25.0184689304, 25.0494300839,
      25.0803535176, 25.111239369,  25.1420877748, 25.1728988708, 25.2036727921,
      25.234409673,  25.2651096468, 25.2957728462, 25.326399403,  25.3569894483,
      25.3875431124, 25.4180605247, 25.448541814,  25.4789871082, 25.5093965346,
      25.5397702197, 25.5701082891, 25.6004108679, 25.6306780804, 25.66091005,
      25.6911068996, 25.7212687513, 25.7513957266, 25.781487946,  25.8115455297,
      25.841568597,  25.8715572664, 25.901511656,  25.9314318831, 25.9613180642,
      25.9911703153, 26.0209887518, 26.0507734882, 26.0805246386, 26.1102423164,
      26.1399266342, 26.1695777042, 26.1991956378, 26.2287805458, 26.2583325386,
      26.2878517257, 26.3173382161, 26.3467921183, 26.3762135401, 26.4056025886,
      26.4349593705, 26.4642839918, 26.4935765581, 26.5228371742, 26.5520659444,
      26.5812629725, 26.6104283616, 26.6395622144, 26.6686646331, 26.697735719,
      26.7267755733, 26.7557842962, 26.7847619879, 26.8137087475, 26.842624674,
      26.8715098657, 26.9003644204, 26.9291884353, 26.9579820072, 26.9867452324,
      27.0154782067, 27.0441810252, 27.0728537828, 27.1014965736, 27.1301094914,
      27.1586926296, 27.1872460809, 27.2157699376, 27.2442642915, 27.272729234,
      27.3011648561, 27.329571248,  27.3579484997, 27.3862967009, 27.4146159404,
      27.4429063069, 27.4711678885, 27.499400773,  27.5276050474, 27.5557807987,
      27.5839281132, 27.6120470768, 27.6401377751, 27.6682002931, 27.6962347153,
      27.7242411262, 27.7522196094, 27.7801702483, 27.8080931259, 27.8359883248,
      27.8638559271, 27.8916960145, 27.9195086685, 27.9472939698, 27.9750519991,
      28.0027828366, 28.0304865619, 28.0581632544, 28.0858129932, 28.1134358567,
      28.1410319233, 28.1686012708, 28.1961439766, 28.2236601178, 28.2511497712,
      28.278613013,  28.3060499193, 28.3334605656, 28.3608450273, 28.3882033792,
      28.4155356959, 28.4428420516, 28.47012252,   28.4973771748, 28.5246060889,
      28.5518093353, 28.5789869863, 28.6061391142, 28.6332657905, 28.6603670869,
      28.6874430744, 28.7144938237, 28.7415194054, 28.7685198894, 28.7954953457,
      28.8224458437, 28.8493714526, 28.8762722411, 28.9031482778, 28.9299996308,
      28.9568263682, 28.9836285574, 29.0104062656, 29.03715956,   29.0638885071,
      29.0905931733, 29.1172736245, 29.1439299267, 29.1705621452, 29.1971703452,
      29.2237545916, 29.2503149489, 29.2768514814, 29.3033642532, 29.3298533279,
      29.3563187689, 29.3827606395, 29.4091790024, 29.4355739203, 29.4619454555,
      29.48829367,   29.5146186255, 29.5409203836, 29.5671990054, 29.593454552,
      29.619687084,  29.6458966617, 29.6720833454, 29.698247195,  29.7243882701,
      29.75050663,   29.7766023339, 29.8026754406, 29.8287260087, 29.8547540966,
      29.8807597623, 29.9067430638, 29.9327040585, 29.958642804,  29.9845593572,
      30.010453775,  30.0363261142, 30.0621764309, 30.0880047814, 30.1138112216,
      30.1395958072, 30.1653585935, 30.1910996358, 30.2168189891, 30.242516708,
      30.268192847,  30.2938474606, 30.3194806026, 30.3450923269, 30.3706826872,
      30.3962517367, 30.4217995287, 30.4473261161, 30.4728315515, 30.4983158875,
      30.5237791764, 30.5492214702, 30.5746428207, 30.6000432796, 30.6254228984,
      30.6507817282, 30.67611982,   30.7014372247, 30.7267339927, 30.7520101746,
      30.7772658205, 30.8025009803, 30.8277157038, 30.8529100406, 30.87808404,
      30.9032377513, 30.9283712234, 30.9534845051, 30.978577645,  31.0036506913,
      31.0287036925, 31.0537366963, 31.0787497507, 31.1037429033, 31.1287162015,
      31.1536696925, 31.1786034234, 31.2035174411, 31.2284117922, 31.2532865233,
      31.2781416806, 31.3029773103, 31.3277934584, 31.3525901706, 31.3773674925,
      31.4021254696, 31.426864147,  31.4515835699, 31.4762837831, 31.5009648313,
      31.5256267592, 31.550269611,  31.5748934309, 31.599498263,  31.6240841512,
      31.6486511391, 31.6731992702, 31.6977285879, 31.7222391355, 31.7467309558,
      31.7712040919, 31.7956585863, 31.8200944816, 31.8445118201, 31.8689106442,
      31.8932909959, 31.9176529169, 31.9419964492, 31.9663216342, 31.9906285133,
      32.0149171279, 32.0391875191, 32.0634397278, 32.0876737948, 32.1118897607,
      32.1360876661, 32.1602675513, 32.1844294565, 32.2085734218, 32.2326994871,
      32.256807692,  32.2808980763, 32.3049706794, 32.3290255406, 32.3530626991,
      32.3770821938, 32.4010840637, 32.4250683476, 32.4490350839, 32.4729843113,
      32.4969160679, 32.520830392,  32.5447273216, 32.5686068947, 32.5924691489,
      32.616314122,  32.6401418513, 32.6639523743, 32.6877457282, 32.71152195,
      32.7352810768, 32.7590231452, 32.7827481921, 32.8064562541, 32.8301473674,
      32.8538215684, 32.8774788933, 32.9011193781, 32.9247430588, 32.948349971,
      32.9719401505, 32.9955136329, 33.0190704534, 33.0426106474, 33.06613425,
      33.0896412964, 33.1131318213, 33.1366058595, 33.1600634458, 33.1835046147,
      33.2069294006, 33.2303378377, 33.2537299604, 33.2771058026, 33.3004653982,
      33.3238087813, 33.3471359853, 33.370447044,  33.3937419907, 33.4170208589,
      33.4402836819, 33.4635304926, 33.4867613243, 33.5099762097, 33.5331751816,
      33.5563582728, 33.5795255158, 33.6026769431, 33.625812587,  33.6489324797,
      33.6720366535, 33.6951251402, 33.7181979718, 33.7412551801, 33.7642967968,
      33.7873228535, 33.8103333817, 33.8333284128, 33.8563079779, 33.8792721083,
      33.9022208351, 33.9251541891, 33.9480722013, 33.9709749024, 33.993862323,
      34.0167344938, 34.039591445,  34.0624332071, 34.0852598103, 34.1080712847,
      34.1308676605, 34.1536489675, 34.1764152355, 34.1991664944, 34.2219027738,
      34.2446241031, 34.2673305119, 34.2900220296, 34.3126986853, 34.3353605082,
      34.3580075275, 34.3806397721, 34.4032572708, 34.4258600525, 34.4484481458,
      34.4710215794, 34.4935803816, 34.5161245811, 34.5386542061, 34.5611692847,
      34.5836698452, 34.6061559156, 34.6286275239, 34.6510846979, 34.6735274653,
      34.695955854,  34.7183698915, 34.7407696053, 34.7631550228, 34.7855261714,
      34.8078830784, 34.8302257708, 34.8525542758, 34.8748686203, 34.8971688314,
      34.9194549356, 34.94172696,   34.963984931,  34.9862288753, 35.0084588193,
      35.0306747894, 35.052876812,  35.0750649133, 35.0972391194, 35.1193994565,
      35.1415459504, 35.1636786272, 35.1857975127, 35.2079026325, 35.2299940124,
      35.2520716779, 35.2741356547, 35.296185968,  35.3182226432, 35.3402457057,
      35.3622551806, 35.3842510931, 35.4062334681, 35.4282023307, 35.4501577057,
      35.472099618,  35.4940280922, 35.5159431531, 35.5378448251, 35.559733133,
      35.581608101,  35.6034697535, 35.6253181148, 35.6471532092, 35.6689750607,
      35.6907836934, 35.7125791314, 35.7343613985, 35.7561305187, 35.7778865156,
      35.7996294129, 35.8213592344, 35.8430760035, 35.8647797438, 35.8864704787,
      35.9081482315, 35.9298130255, 35.951464884,  35.97310383,   35.9947298867,
      36.0163430771, 36.037943424,  36.0595309504, 36.081105679,  36.1026676327,
      36.1242168339, 36.1457533055, 36.1672770699, 36.1887881495, 36.2102865667,
      36.231772344,  36.2532455035, 36.2747060675, 36.2961540581, 36.3175894974,
      36.3390124074, 36.36042281,   36.3818207271, 36.4032061805, 36.4245791921,
      36.4459397833, 36.4672879761, 36.4886237918, 36.5099472519, 36.531258378,
      36.5525571913, 36.5738437133, 36.5951179651, 36.616379968,  36.6376297431,
      36.6588673114, 36.680092694,  36.7013059119, 36.7225069858, 36.7436959367,
      36.7648727853, 36.7860375524, 36.8071902586, 36.8283309244, 36.8494595705,
      36.8705762172, 36.8916808851, 36.9127735945, 36.9338543657, 36.9549232189,
      36.9759801743, 36.9970252521, 37.0180584724, 37.039079855,  37.0600894202,
      37.0810871876, 37.1020731772, 37.1230474089, 37.1440099022, 37.164960677,
      37.1858997528, 37.2068271491, 37.2277428857, 37.2486469818, 37.269539457,
      37.2904203306, 37.3112896217, 37.3321473499, 37.3529935342, 37.3738281938,
      37.3946513478, 37.4154630152, 37.4362632149, 37.457051966,  37.4778292873,
      37.4985951977, 37.519349716,  37.5400928607, 37.5608246507, 37.5815451046,
      37.602254241,  37.6229520783, 37.643638635,  37.6643139296, 37.6849779805,
      37.7056308059, 37.7262724241, 37.7469028534, 37.767522112,  37.7881302178,
      37.8087271892, 37.829313044,  37.8498878003, 37.8704514759, 37.8910040889,
      37.9115456569, 37.9320761978, 37.9525957293, 37.9731042691, 37.9936018349,
      38.0140884443, 38.0345641148, 38.0550288639, 38.0754827091, 38.0959256678,
      38.1163577573, 38.1367789949, 38.1571893981, 38.1775889838, 38.1979777695,
      38.2183557721, 38.2387230088, 38.2590794966, 38.2794252525, 38.2997602935,
      38.3200846365, 38.3403982983, 38.3607012958, 38.3809936458, 38.4012753649,
      38.4215464699, 38.4418069775, 38.4620569042, 38.4822962666, 38.5025250812,
      38.5227433644, 38.5429511328, 38.5631484026, 38.5833351903, 38.6035115122,
      38.6236773844, 38.6438328233, 38.663977845,  38.6841124657, 38.7042367013,
      38.7243505681, 38.7444540819, 38.7645472589, 38.7846301148, 38.8047026656,
      38.8247649271, 38.8448169152, 38.8648586456, 38.884890134,  38.9049113961,
      38.9249224476, 38.9449233041, 38.964913981,  38.9848944941, 39.0048648587,
      39.0248250903, 39.0447752044, 39.0647152161, 39.0846451411, 39.1045649943,
      39.1244747913, 39.1443745471, 39.164264277,  39.184143996,  39.2040137194,
      39.223873462,  39.2437232391, 39.2635630655, 39.2833929562, 39.3032129262};


    /// default constructor
    template < typename IdSetAlloc, typename CountAlloc >
    template < typename RowFilter >
    INLINE
    KNML< IdSetAlloc, CountAlloc >::KNML(const RowFilter& filter,
                                         const std::vector< Size >& var_modalities)
        : IndependenceTest< IdSetAlloc, CountAlloc >(filter, var_modalities) {
      // for debugging purposes
      GUM_CONSTRUCTOR(KNML);
    }

    /// destructor
    template < typename IdSetAlloc, typename CountAlloc >
    INLINE KNML< IdSetAlloc, CountAlloc >::~KNML() {
      // for debugging purposes
      GUM_DESTRUCTOR(KNML);
    }

    /// returns the score corresponding to a given nodeset
    template < typename IdSetAlloc, typename CountAlloc >
    double KNML< IdSetAlloc, CountAlloc >::score(Idx nodeset_index) {
      // if the score has already been computed, get its value
      if (this->_isInCache(nodeset_index)) {
        return this->_cachedScore(nodeset_index);
      }

      // get the nodes involved in the score as well as their modalities
      const std::vector< Idx, IdSetAlloc >& all_nodes =
        this->_getAllNodes(nodeset_index);
      const std::vector< Idx, IdSetAlloc >* conditioning_nodes =
        this->_getConditioningNodes(nodeset_index + 1);
      const std::vector< Size >& modals = this->modalities();

      // here, we distinguish nodesets with conditioning nodes from those
      // without conditioning nodes
      if (conditioning_nodes != nullptr) {
        // now, perform 0.5 * sum_Z ( sum_X( log( C^(r_y)_#ZX ) ) - log( C^(r_y)_#Z
        // )
        // 					+ sum_Y( log( C^(r_x)_#ZY ) ) - log( C^(r_x)_#Z
        // ) )

        // get the counts for all the targets and for the conditioning nodes
        // const std::vector<double, CountAlloc>& Nzyx =
        //    this->_getAllCounts( nodeset_index );
        const std::vector< double, CountAlloc >& Nzy =
          this->_getConditioningCounts(nodeset_index);
        const std::vector< double, CountAlloc >& Nzx =
          this->_getAllCounts(nodeset_index + 1);
        const std::vector< double, CountAlloc >& Nz =
          this->_getConditioningCounts(nodeset_index + 1);

        const auto Z_size = Size(Nz.size());
        const auto Y_size = Size(modals[all_nodes[all_nodes.size() - 2]]);
        const auto X_size = Size(modals[all_nodes[all_nodes.size() - 1]]);

        double score = 0.0;

        for (Idx z = 0, beg_zx = 0, beg_zy = 0; z < Z_size;
             ++z, beg_zx += X_size, beg_zy += Y_size) {
          double sumX = 0.0, sumY = 0.0;
          for (Idx x = 0, zx = beg_zx; x < X_size; ++x, ++zx) {
            sumX += std::log(this->_C(Y_size, Nzx[zx]));
          }
          score += sumX - std::log(this->_C(Y_size, Nz[z]));
          for (Idx y = 0, zy = beg_zy; y < Y_size; ++y, ++zy) {
            sumY += std::log(this->_C(X_size, Nzy[zy]));
          }
          score += sumY - std::log(this->_C(X_size, Nz[z]));
        }

        score *= 0.5;
        // shall we put the score into the cache?
        if (this->_isUsingCache()) {
          this->_insertIntoCache(nodeset_index, score);
        }

        return score;
      } else {
        // here, there is no conditioning set
        // now, perform 0.5 * ( sum_X( log( C^(r_y)_#X ) ) - log( C^(r_y)_N )
        // 					+ sum_Y( log( C^(r_x)_#Y ) ) - log( C^(r_x)_N )
        // )

        // get the counts for all the targets and for the conditioning nodes
        // const std::vector<double, CountAlloc>& Nyx =
        //    this->_getAllCounts( nodeset_index );
        const std::vector< double, CountAlloc >& Ny =
          this->_getConditioningCounts(nodeset_index);
        const std::vector< double, CountAlloc >& Nx =
          this->_getAllCounts(nodeset_index + 1);

        const Size Y_size = Size(Ny.size());
        const Size X_size = Size(Nx.size());

        // count N
        double N = 0;
        for (Idx i = 0; i < Nx.size(); ++i) {
          N += Nx[i];
        }

        double score = 0.0;

        for (Idx x = 0; x < X_size; ++x) {
          score += std::log(this->_C(Y_size, Nx[x]));
        }
        score -= std::log(this->_C(Y_size, N));
        for (Idx y = 0; y < Y_size; ++y) {
          score += std::log(this->_C(X_size, Ny[y]));
        }
        score -= std::log(this->_C(X_size, N));

        score *= 0.5;
        // shall we put the score into the cache?
        if (this->_isUsingCache()) {
          this->_insertIntoCache(nodeset_index, score);
        }

        return score;
      }
    }

    template < typename IdSetAlloc, typename CountAlloc >
    double KNML< IdSetAlloc, CountAlloc >::_C(Size r, Size n) {
      // std::cout << "r " << r << " n " << n << std::endl;
      if (n == 0 || r == 1) {
        // std::cout << 1.0 << std::endl;
        return 1.0;
      }
      if (r == 2) {
        if (n > 1000) {
          if (__use_cache_C) {
            try {
              double val = __cache_C.score(std::vector< Idx >{r, n});
              return val;
            } catch (const NotFound&) {
            }
          }
          const double val =
            std::sqrt(n * M_PI / 2) * std::exp(std::sqrt(8 / (9 * n * M_PI)) +
                                               (3 * M_PI - 16) / (36 * n * M_PI));
          // std::cout << val << std::endl;
          if (__use_cache_C) {
            _insertIntoCCache(r, n, val);
          }
          return val;
        } else {
          // std::cout << __Cvec[n-1] << std::endl;
          return this->__Cvec[n - 1];
        }
      }
      if (__use_cache_C) {
        try {
          double val = __cache_C.score(std::vector< Idx >{r, n});
          return val;
        } catch (const NotFound&) {
        }
      }
      double val = _C(r - 1, n) + n / (r - 2) * _C(r - 2, n);
      if (__use_cache_C) {
        _insertIntoCCache(r, n, val);
      }
      return val;
    }

    /// inserts a new score into the cache for C
    template < typename IdSetAlloc, typename CountAlloc >
    INLINE void
    KNML< IdSetAlloc, CountAlloc >::_insertIntoCCache(Size r, Size n, double c) {
      __cache_C.insert(std::vector< Idx >{r, n}, c);
    }

  } /* namespace learning */

} /* namespace gum */

#endif /* DOXYGEN_SHOULD_SKIP_THIS */
