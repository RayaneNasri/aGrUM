//##############################################################################
//
//                               HEADERS
//
//##############################################################################

#include <algorithm>
#include <cmath>
#include <fstream>
#include <list>
#include <sstream>
#include <stack>
#include <string>
#include <vector>

#include <agrum/core/utils_dir.h>
#include <agrum/multidim/eval/formula.h>

//##############################################################################
//
//                             class Parser
//
//##############################################################################

COMPILER EVAL

private:
  Formula __formula;

public:
  Formula& formula() { return __formula; }
  const Formula& formula() const { return __formula; }

//##############################################################################
//
//                              SCANNER RULES
//
//##############################################################################

//________________________
CHARACTERS
letter = 'A'..'Z' + 'a'..'z'+ '_' .
digit  = '0'..'9'.
eol    = '\n'.

//________________________
TOKENS
integer     =  digit {digit}.
float       =  digit {digit} '.' digit {digit}. // [ ('E'|'e') ['+'|'-'] digit {digit} ].
operator    = '+'|'-'|'*'|'/'|'^'.
word        = letter {(letter | digit)}.
eol         = '\n'.

// Exponential and logarithmic functions
exp = "exp".
log = "log".
ln  = "ln".

// Power functions
pow = "pow".
sqrt = "sqrt".

// Bernouilli distributions
bernoulli = "bernoulli".
binomial = "binomial".
geometric = "geometric".
negative_binomial = "negative_binomial".

// Rate-based distributions
poisson = "poisson".
exponential = "exponential".
gamma = "gamma".
weibull = "weibull".
extreme_value = "extreme_value".

// Related to Normal distributions
normal = "normal".
lognormal = "lognormal".
chi_squared = "chi_squared".
cauchy = "cauchy".
fisher_f = "fisher_f".
student_t = "student_t".

// Piecewise distribuntions
discrete = "discrete".
piecewise_constant = "piecewise_constant".
piecewise_linear = "piecewise_linear".

//________________________
IGNORE '\r' + eol + '\t'

$checkEOF=false // disable the end of file check

//##############################################################################
//
//                              PARSER RULES
//
//##############################################################################

PRODUCTIONS

//________________________
EVAL =  
  (expression { expression }) (. __formula.finalize(); .)
  .                           

expression =
    integer              (. __formula.push_number((double)coco_atoi(t->val)); .)
    | float              (. __formula.push_number((double)coco_atof(t->val)); .)
    | operator           (. __formula.push_operator(narrow(t->val)[0]); .)
    | '('                (. __formula.push_leftParenthesis(); .)
    | ')'                (. __formula.push_rightParenthesis(); .)
    //| function args
  .                           

//function =
//  exp                    (. __function(token_functions::exp); .)
//  | log                  (. __function(token_functions::log); .)
//  | ln                   (. __function(token_functions::ln); .)
//  | pow                  (. __function(token_functions::pow); .)
//  | sqrt                 (. __function(token_functions::sqrt); .)
//  | bernoulli            (. __function(token_functions::bernoulli); .)
//  | binomial             (. __function(token_functions::binomial); .)
//  | geometric            (. __function(token_functions::geometric); .)
//  | negative_binomial    (. __function(token_functions::negative_binomial ); .)
//  | poisson              (. __function(token_functions::poisson); .)
//  | exponential          (. __function(token_functions::exponential); .)
//  | gamma                (. __function(token_functions::gamma); .)
//  | weibull              (. __function(token_functions::weibull); .)
//  | extreme_value        (. __function(token_functions::extreme_value); .)
//  | normal               (. __function(token_functions::normal); .)
//  | lognormal            (. __function(token_functions::lognormal); .)
//  | chi_squared          (. __function(token_functions::chi_squared); .)
//  | cauchy               (. __function(token_functions::cauchy); .)
//  | fisher_f             (. __function(token_functions::fisher_f); .)
//  | student_t            (. __function(token_functions::student_t); .)
//  | discrete             (. __function(token_functions::discrete); .)
//  | piecewise_constant   (. __function(token_functions::piecewise_constant); .)
//  | piecewise_linear     (. __function(token_functions::piecewise_linear); .)
//  .
//
//args =
//  '('                             (. __leftParenthesis(); .)
//  (
//    expression { ',' expression } 
//    |
//  )
//  ')'                             (. __rightParenthesis(); .)
//  .

END EVAL.
