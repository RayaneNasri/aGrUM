/***************************************************************************
 *   Copyright (C) 2005 by Christophe GONZALES and Pierre-Henri WUILLEMIN  *
 *   {prenom.nom}_at_lip6.fr                                               *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program; if not, write to the                         *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 ***************************************************************************/
%{ /*** C/C++ Declarations ***/
#include <string>
#include <vector>
#include <sstream>

#include <agrum/core/exceptions.h>
%}

/*** yacc/bison Declarations ***/

/* Require bison 2.3 or later */
%require "2.3"

/* add debug output code to generated parser. disable this for release
 * versions. */
%debug

/* start symbol is named "start" */
%start start

/* write out a header file containing the token defines */
%defines

/* use newer C++ skeleton file */
%skeleton "lalr1.cc"

/* namespace to enclose parser in */
%name-prefix="gum_bif"

/* set the parser's class identifier */
%define "parser_class_name" "BIFParser"

/* keep track of the current position within the input */
%locations
%initial-action
{
    // initialize the initial location object
    @$.begin.filename = @$.end.filename = &(const_cast<std::string&>(driver.streamName()));
};

/* The driver is passed by reference to the parser and to the scanner. This
 * provides a simple but effective pure interface, not relying on global
 * variables. */
%parse-param { class BIFDriver& driver }

/* verbose error messages */
%error-verbose

%union {
  char                      Char;
  float                     Float;
  int                       Int;
  std::string*              StringVal;
  std::vector<double>*      DVectorVal;
  std::vector<std::string>* SVectorVal;
}

%token                END     0     "end of file"
%token                EOL           "end of line"

%token                TOK_BEG_CURLY
%token                TOK_END_CURLY
%token                TOK_BEG_BRACKET
%token                TOK_END_BRACKET
%token                TOK_BEG_PARENTHESIS
%token                TOK_END_PARENTHESIS
%token                TOK_SEMICOLON
%token                TOK_COMMA
%token                TOK_DOUBLE_QUOTE
%token                TOK_QUOTE
%token                TOK_BAR
%token                TOK_EQUAL

%token <Int>          TOK_NETWORK
%token <Int>          TOK_VARIABLE
%token <Int>          TOK_PROBABILITY
%token <Int>          TOK_TYPE
%token <Int>          TOK_DISCRETE
%token <Int>          TOK_DEFAULT
%token <Int>          TOK_TABLE
%token <Int>          TOK_PROPERTY

%token <Int>          TOK_PROPERTY_VALUE
%token <StringVal>    TOK_WORD
%token <Float>        TOK_FLOAT
%token <Int>          TOK_INTEGER

%type <StringVal>    word
%type <StringVal>    words
%type <DVectorVal>   tableValues
%type <DVectorVal>   modalityValues
%type <SVectorVal>   parents
%type <Float>        number

%destructor { delete $$; } TOK_WORD word words tableValues modalityValues parents

%{
#include <agrum/BN/io/BIFparser/BIFDriver.h>
#include <agrum/BN/io/BIFparser/BIFScanner.h>

/* this "connects" the bison parser in the driver to the flex scanner class
 * object. it defines the yylex() function call to pull the next token from the
 * current lexer object of the driver context. */
#undef yylex
#define yylex driver.lexer().lex

// My variable
std::vector<std::string> __variables;

%}

%%

start:
    NetworkUnit DeclarationUnit
  | DeclarationUnit
  | error TOK_END_CURLY
  ;

NetworkUnit:
  { driver.factory().startNetworkDeclaration(); }
  TOK_NETWORK word TOK_BEG_CURLY TOK_END_CURLY
  { driver.factory().addNetworkProperty("name", *$3);
    driver.factory().endNetworkDeclaration(); }
  ;

DeclarationUnit:
    /* empty */
  | DeclarationUnit VariableUnit
  | DeclarationUnit ProbaUnit
  ;

VariableUnit:
  { driver.factory().startVariableDeclaration(); }
  VariableDeclaration TOK_BEG_CURLY VariableContent TOK_END_CURLY
  { try { driver.factory().endVariableDeclaration(); }
    catch (gum::OperationNotAllowed& e) { error(@$, e.getContent()); } }
  ;

VariableDeclaration:
  TOK_VARIABLE word
  { try { driver.factory().variableName(*$2); }
    catch (gum::DuplicateElement& e) { driver.error(@$, e.getContent()); } }
  ;


VariableContent:
  VariableDiscreteUnit
  ;


VariableDiscreteUnit:
  VariableDiscrete TOK_BEG_CURLY VariableModalities TOK_END_CURLY TOK_SEMICOLON
  ;


VariableDiscrete:
  TOK_TYPE TOK_DISCRETE TOK_BEG_BRACKET TOK_INTEGER TOK_END_BRACKET
  ;

VariableModalities:
    word word
    { try { driver.factory().addModality(*$1); }
      catch (gum::DuplicateElement& e) { driver.error(@$, e.getContent()); }
      try { driver.factory().addModality(*$2); }
      catch (gum::DuplicateElement& e) { driver.error(@$, e.getContent()); }
    }
  | word TOK_COMMA word
    { try { driver.factory().addModality(*$1); }
      catch (gum::DuplicateElement& e) { driver.error(@$, e.getContent()); }
      try { driver.factory().addModality(*$3); }
      catch (gum::DuplicateElement& e) { driver.error(@$, e.getContent()); }
    }
  | VariableModalities word
    { try { driver.factory().addModality(*$2); }
      catch (gum::DuplicateElement& e) { driver.error(@$, e.getContent()); }
    }
  | VariableModalities TOK_COMMA word
    { try { driver.factory().addModality(*$3); }
      catch (gum::DuplicateElement& e) { driver.error(@$, e.getContent()); }
    }
  ;

ProbaUnit:
  { __variables.clear(); }
  TOK_PROBABILITY ProbaVariables TOK_BEG_CURLY ProbaContent TOK_END_CURLY
  ;

ProbaVariables:
    TOK_BEG_PARENTHESIS word TOK_END_PARENTHESIS
    { __variables.push_back(*$2);
      try { driver.factory().startParentsDeclaration(__variables[0]);}
      catch (gum::NotFound& e) { driver.error(@$, e.getContent()); }
      driver.factory().endParentsDeclaration(); }
  | TOK_BEG_PARENTHESIS word
    { __variables.push_back(*$2);
      try { driver.factory().startParentsDeclaration(__variables[0]);}
      catch (gum::NotFound& e) { driver.error(@$, e.getContent()); } }
    TOK_BAR ProbaRightVars TOK_END_PARENTHESIS
    { driver.factory().endParentsDeclaration(); }
  ;

ProbaRightVars:
    ProbaRightVarsWithComma
  | ProbaRightVarsWithoutComma
  ;

ProbaRightVarsWithoutComma:
    word
    { __variables.push_back(*$1);
      try { driver.factory().addParent(*$1); }
      catch (gum::NotFound& e) { driver.error(@$, e.getContent()); } }
  | ProbaRightVarsWithoutComma word
    { __variables.push_back(*$2);
      try { driver.factory().addParent(*$2); }
      catch (gum::NotFound& e) { driver.error(@$, e.getContent()); } }
  ;

ProbaRightVarsWithComma:
    word
    { __variables.push_back(*$1);
      try { driver.factory().addParent(*$1); }
      catch (gum::NotFound& e) { driver.error(@$, e.getContent()); } }
  | ProbaRightVarsWithComma TOK_COMMA word
    { __variables.push_back(*$3);
      try { driver.factory().addParent(*$3); }
      catch (gum::NotFound& e) { driver.error(@$, e.getContent()); } }
  ;

ProbaContent:
    ProbaByTable
  | { driver.factory().startFactorizedProbabilityDeclaration(__variables[0]); }
    ProbaByModalities
    { driver.factory().endFactorizedProbabilityDeclaration(); }
  ;

ProbaByTable:
  { driver.factory().startRawProbabilityDeclaration(__variables[0]); }
  TOK_TABLE tableValues TOK_SEMICOLON
  { driver.factory().rawConditionalTable(__variables, *$3);
    driver.factory().endRawProbabilityDeclaration(); }
  ;

tableValues:
    number { $$ = new std::vector<double>(); $$->push_back($1); }
  | tableValues number
    { $$ = new std::vector<double>(*$1); $$->push_back($2); }
  | tableValues TOK_COMMA number
    { $$ = new std::vector<double>(*$1); $$->push_back($3); }
  ;

ProbaByModalities:
    { driver.factory().startFactorizedEntry(); }
    ModalityEntry
    { driver.factory().endFactorizedEntry(); }
  | ProbaByModalities
    { driver.factory().startFactorizedEntry(); }
    ModalityEntry
    { driver.factory().endFactorizedEntry(); }
  ;

ModalityEntry:
    TOK_DEFAULT modalityValues TOK_SEMICOLON
    { driver.factory().setVariableValues(*$2); }
  | ParentsInstantiation modalityValues TOK_SEMICOLON
    { driver.factory().setVariableValues(*$2); }
  ;

ParentsInstantiation:
  TOK_BEG_PARENTHESIS parents TOK_END_PARENTHESIS
  { for (size_t i = 0; i < $2->size(); ++i) {
      driver.factory().setParentModality(__variables[i+1], $2->at(i));
    }
  }
  ;

parents:
    word { $$ = new std::vector<std::string>(); $$->push_back(*$1); }
  | parents word
    { $$ = new std::vector<std::string>(*$1); $$->push_back(*$2); }
  | parents TOK_COMMA word
    { $$ = new std::vector<std::string>(*$1); $$->push_back(*$3); }
  ;

modalityValues:
    number { $$ = new std::vector<double>(); $$->push_back($1); }
  | modalityValues number { $$ = new std::vector<double>(*$1); $$->push_back($2); }
  | modalityValues TOK_COMMA number { $$ = new std::vector<double>(*$1); $$->push_back($3); }
  ;

word:
    TOK_WORD { $$ = new std::string(*$1); }
  | TOK_INTEGER { std::stringstream s; s << $1; $$ = new std::string(s.str()); }
  | TOK_FLOAT { std::stringstream s; s << $1; $$ = new std::string(s.str()); }
  | TOK_DOUBLE_QUOTE words TOK_DOUBLE_QUOTE { $$ = new std::string(*$2); }
  | TOK_QUOTE words TOK_QUOTE { $$ = new std::string(*$2); }
  ;

words:
    TOK_WORD { $$ = new std::string(*$1); }
  | words TOK_WORD { $$ = new std::string((*$1) + (*$2)); }
  ;

number:
    TOK_INTEGER { $$ = (double) $1; }
  | TOK_FLOAT { $$ = (double) $1; }
  ;

%% /*** Additional Code ***/

void gum_bif::BIFParser::error(const BIFParser::location_type& l,
                               const std::string& m)
{
  driver.error(l, m);
}

