#line 2 "BIFScanner.cpp"

#line 4 "BIFScanner.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer BIFFlexLexer
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstring>
/* end standard C++ headers. */
/* %endif */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* %not-for-header */

/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

/* %if-not-reentrant */
extern int yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
/* %endif */

/* %if-c++-only */
	std::istream* yy_input_file;
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */
/* %if-not-reentrant */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
/* %endif */

void *BIFalloc (yy_size_t  );
void *BIFrealloc (void *,yy_size_t  );
void BIFfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */

#define FLEX_DEBUG

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext

#include <FlexLexer.h>

/* %if-c-only Standard (non-C++) definition */
/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;

/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 46
#define YY_END_OF_BUFFER 47
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[225] =
    {   0,
        0,    0,    0,    0,    3,    3,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       47,   45,   46,    5,    6,    7,    8,   11,   43,   43,
       45,   44,   42,    9,   10,   43,   43,   43,   43,   43,
       43,    4,   45,    3,    3,    3,    3,    3,    3,   23,
       23,   24,   19,   20,   21,   22,   32,   45,   38,   38,
       45,   45,   40,   26,   27,   29,   30,   29,   31,   28,
       34,   33,   33,   13,   13,   14,   15,   43,   43,   41,
        0,    1,   44,   41,   44,   44,   42,   43,   43,   43,
       43,   43,    0,    3,    3,    1,    3,   23,   23,   19,

       37,   37,    0,    0,   39,    0,    0,   29,   30,   29,
       33,   33,   13,   13,   43,    0,    0,    1,   41,    0,
        0,   44,   41,   43,   43,   43,   43,   43,    0,    3,
        3,    1,    3,   23,    0,   37,    0,    0,   37,    0,
        0,   29,   33,   13,    0,   43,   41,    0,    1,    0,
       41,   41,   43,   43,   43,   43,   17,   43,    0,    3,
        1,    3,   23,    0,   37,    0,   37,    0,    0,   29,
       33,   13,   41,   43,   43,   43,   43,   43,    0,    3,
       23,    0,   36,   29,   33,   13,   43,   43,   43,   43,
       43,    0,    3,   23,    0,   29,   33,   13,   43,   12,

       43,   43,   43,    0,    3,   23,   35,   29,   33,   13,
       18,   43,    2,   16,    2,    2,    2,    2,    2,    2,
       43,   43,   25,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    3,    1,    1,    1,    1,    4,    5,
        6,    7,    8,    9,   10,   11,   12,   13,   14,   14,
       14,   14,   14,   14,   14,   14,   14,    1,   15,    1,
       16,    1,   17,    1,   18,   18,   18,   18,   19,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       20,    1,   21,    1,   18,    1,   22,   23,   24,   25,

       26,   27,   18,   18,   28,   18,   29,   30,   18,   31,
       32,   33,   18,   34,   35,   36,   37,   38,   39,   18,
       40,   18,   41,   42,   43,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[44] =
    {   0,
        1,    2,    1,    1,    1,    1,    1,    1,    1,    3,
        4,    1,    3,    3,    5,    1,    6,    3,    3,    1,
        1,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[241] =
    {   0,
        0,    0,   42,   46,   61,   65,   98,    0,  140,    0,
      177,    0,  220,    0,  263,    0,  306,    0,  135,  143,
      673,  674,  674,  674,  674,  674,  674,  674,   36,   38,
       48,   70,  161,  674,  674,    0,  134,   45,   61,  154,
       71,  674,  638,    0,    0,    0,    0,   78,  637,    0,
      636,  674,   73,  674,  674,  674,  674,   78,  182,  193,
      643,  646,  674,  674,  674,    0,  133,  633,  674,  674,
      674,    0,  632,    0,  603,  674,  674,  142,    0,  337,
      621,    0,  613,  339,  153,  358,    0,  168,  343,  344,
      166,  353,  588,    0,   59,  190,  584,    0,  576,  155,

      364,  367,  378,  201,  387,  577,  565,    0,  203,  555,
        0,  554,    0,  553,  401,  577,  570,    0,  403,  410,
      360,  371,  394,  410,  414,  415,  377,  419,  548,  143,
      347,  397,  547,  546,  431,  436,  450,  382,  429,  556,
      547,  543,  542,  541,  438,  443,  452,  566,  674,  454,
      456,  458,  462,  463,  464,  465,  466,  467,  546,  439,
        0,  545,  544,  474,  479,  484,  486,  532,  537,  533,
      523,  513,  488,  492,  493,  494,  495,  496,  503,  494,
      489,  464,  674,  456,  451,  427,  497,  505,  504,  509,
      513,  401,  399,  397,  392,  366,  339,  321,  514,  524,

      525,  527,  535,  160,  149,  130,  674,  108,   57,   30,
      536,  537,  539,  540,  674,    0,    0,    0,    0,    0,
      547,  549,  551,  674,  589,  595,  599,  603,  607,  611,
      615,  619,   56,  623,  629,  635,  641,  647,  653,  659
    } ;

static yyconst flex_int16_t yy_def[241] =
    {   0,
      224,    1,  225,  225,  226,  226,  224,    7,  225,    9,
        9,   11,  224,   13,  224,   15,  224,   17,    9,    9,
      224,  224,  224,  224,  224,  224,  224,  224,  227,  228,
      224,  229,  229,  224,  224,  228,  227,  227,  227,  227,
      227,  224,  224,  230,  230,  230,  230,  230,  230,  231,
      231,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      224,  224,  224,  224,  224,  232,  224,  232,  224,  224,
      224,  233,  233,  234,  234,  224,  224,  227,  228,  228,
      235,  236,  229,  224,   33,  229,   33,  227,  227,  227,
      227,  227,  224,  230,  237,  238,  230,  231,  231,  224,

      224,  224,  224,  224,  224,  224,  224,  232,  224,  232,
      233,  233,  234,  234,  228,  235,  239,  236,  224,  224,
      224,  229,  229,  227,  227,  227,  227,  227,  224,  237,
      240,  238,  230,  231,  224,  224,  224,  224,  224,  224,
      224,  232,  233,  234,  224,  228,  228,  235,  224,  224,
      224,  224,  227,  227,  227,  227,  227,  227,  224,  237,
      230,  230,  231,  224,  224,  224,  224,  224,  224,  232,
      233,  234,  224,  227,  227,  227,  227,  227,  224,  230,
      231,  224,  224,  232,  233,  234,  227,  227,  227,  227,
      227,  224,  230,  231,  224,  232,  233,  234,  227,  227,

      227,  227,  227,  224,  230,  231,  224,  232,  233,  234,
      227,  227,  227,  227,  224,  230,  231,  232,  233,  234,
      227,  227,  227,    0,  224,  224,  224,  224,  224,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  224
    } ;

static yyconst flex_int16_t yy_nxt[718] =
    {   0,
       22,   23,   24,   25,   26,   27,   22,   22,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   29,   29,   22,
       22,   29,   29,   29,   37,   29,   29,   29,   29,   29,
       38,   29,   39,   29,   29,   40,   29,   41,   29,   29,
       22,   22,   22,   23,   24,   25,   79,   23,   24,   25,
       80,   80,   79,   31,   81,   79,   42,   31,  111,   82,
       42,   79,   45,   46,   47,  131,   45,   46,   47,  220,
       89,   79,   48,  116,   43,   22,   48,   79,   43,   22,
       84,   79,   85,   85,   95,  100,  100,   79,   86,   96,
      101,  101,   92,   49,   90,   86,  219,   49,   22,   23,

       24,   25,   22,   22,   22,   22,   22,   50,   50,   31,
       22,   22,   22,   22,   50,   50,   50,   22,   22,   50,
       50,   50,   50,   50,   50,   50,   50,   50,   50,   50,
       51,   50,   50,   50,   50,   50,   50,   50,   22,   22,
       52,   23,   24,   25,   79,  109,  109,  218,   22,  131,
       79,   31,   79,   53,   22,   22,   22,  116,   79,   54,
       55,   88,   22,   22,   79,   85,   85,  100,  100,  217,
       79,   84,   43,   87,   87,   22,   79,   77,   79,   86,
       56,   57,   79,   22,   79,   77,   86,   58,  216,   59,
       60,   94,  102,   91,  103,  103,   22,   22,  127,  215,

      104,   61,  124,  102,  118,  105,  105,  104,  138,  138,
      138,  104,   62,  139,  139,  109,  109,   22,  104,   63,
       22,   23,   24,   25,   64,   65,   22,   22,   22,   66,
       66,   31,   22,   67,   22,   22,   66,   66,   66,   22,
       22,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   68,   66,   66,   66,   66,   66,   66,   66,
       69,   70,   22,   22,   23,   24,   25,   22,   71,   22,
       22,   22,   72,   22,   31,   72,   72,   22,   22,   22,
       72,   72,   22,   22,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   73,   72,   72,   72,   72,

       72,   72,   72,   22,   22,   22,   22,   23,   24,   25,
       22,   22,   22,   22,   22,   74,   74,   31,   22,   22,
       22,   22,   74,   74,   74,   22,   22,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   75,   74,
       74,   74,   74,   74,   74,   74,   76,   22,   22,   80,
       80,  119,  119,   79,   79,  115,  210,  120,  161,   79,
       79,  148,  115,   79,  120,  121,  121,  122,  224,   79,
      123,  123,  152,  152,  209,  126,  101,  101,  125,  136,
      136,  224,  135,  123,  123,  137,  128,   79,  102,  135,
      103,  103,  137,   79,  139,  139,  104,  102,   94,  105,

      105,  208,  157,  104,  224,  104,  123,  123,  145,  145,
      146,  118,  104,  147,  147,  119,  119,  150,  150,  150,
       79,  120,  151,  151,   79,   79,   79,  207,  120,   79,
       79,   79,  206,  153,  205,   79,  204,  155,  164,  164,
      164,  139,  139,  165,  165,  131,  158,  156,  136,  136,
      173,  173,  154,  116,  137,  147,  147,  166,  166,  166,
      198,  137,  167,  167,  147,  147,  151,  151,  151,  151,
      152,  152,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,  197,  176,  165,  165,  178,  196,
      177,  165,  165,  195,  175,  174,  167,  167,  167,  167,

      173,  173,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,  189,  187,  191,   79,
       79,   79,  194,   79,   79,   79,  188,  193,  190,   79,
       79,  201,  199,  200,   79,   79,  192,   79,  186,  211,
       79,   79,  203,   79,  202,   79,   79,   79,  185,   79,
       79,   79,   79,   79,  212,   79,   79,   79,  184,   79,
      214,   79,  183,   79,  221,   79,  213,   79,  182,  181,
      180,  179,  117,  172,  171,  170,  169,  168,  163,  162,
      159,  149,  222,  117,  144,  143,  142,  141,  223,   22,
       22,   22,   22,   22,   22,   44,   44,   44,   44,   44,

       44,   78,   78,  140,   78,   79,   79,  134,   79,   83,
       83,   94,   94,   94,   94,  133,   94,   98,   98,  129,
       98,  108,  108,  224,  108,  113,  113,  117,  113,  116,
      116,  116,  116,  116,  116,  118,  114,  118,  118,  118,
      118,  130,  130,  130,  130,  130,  130,  132,  132,  132,
      132,  132,  132,  148,  148,  148,  148,  148,  148,  160,
      160,  160,  160,  160,  160,  112,  110,  107,  106,   99,
       97,   93,  224,   21,  224,  224,  224,  224,  224,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,

      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      224,  224,  224,  224,  224,  224,  224
    } ;

static yyconst flex_int16_t yy_chk[718] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    3,    3,    3,   29,    4,    4,    4,
       30,   30,   29,    3,   31,   38,    3,    4,  233,   31,
        4,   38,    5,    5,    5,   95,    6,    6,    6,  210,
       38,   39,    5,   95,    3,    5,    6,   39,    4,    6,
       32,   41,   32,   32,   48,   53,   53,   41,   32,   48,
       58,   58,   41,    5,   39,   32,  209,    6,    7,    7,

        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    9,    9,    9,   37,   67,   67,  208,   19,  130,
       37,    9,   78,    9,   19,   19,   20,  130,   78,    9,
        9,   37,   20,   20,   40,   85,   85,  100,  100,  206,
       40,   33,    9,   33,   33,   19,   91,   19,   88,   33,
        9,   11,   91,   20,   88,   20,   33,   11,  205,   11,
       11,   96,   59,   40,   59,   59,   11,   11,   91,  204,

       59,   11,   88,   60,   96,   60,   60,   59,  104,  104,
      104,   60,   11,  104,  104,  109,  109,   11,   60,   11,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,

       15,   15,   15,   15,   15,   15,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   80,
       80,   84,   84,   89,   90,   80,  198,   84,  131,   89,
       90,  131,   80,   92,   84,   86,   86,   86,   86,   92,
       86,   86,  121,  121,  197,   90,  101,  101,   89,  102,
      102,  122,  101,  122,  122,  102,   92,  127,  103,  101,
      103,  103,  102,  127,  138,  138,  103,  105,  132,  105,

      105,  196,  127,  103,  123,  105,  123,  123,  115,  115,
      115,  132,  105,  115,  115,  119,  119,  120,  120,  120,
      124,  119,  120,  120,  125,  126,  124,  195,  119,  128,
      125,  126,  194,  124,  193,  128,  192,  126,  135,  135,
      135,  139,  139,  135,  135,  160,  128,  126,  136,  136,
      145,  145,  125,  160,  136,  146,  146,  137,  137,  137,
      186,  136,  137,  137,  147,  147,  150,  150,  151,  151,
      152,  152,  153,  154,  155,  156,  157,  158,  153,  154,
      155,  156,  157,  158,  185,  155,  164,  164,  158,  184,
      156,  165,  165,  182,  154,  153,  166,  166,  167,  167,

      173,  173,  174,  175,  176,  177,  178,  187,  174,  175,
      176,  177,  178,  187,  189,  188,  176,  174,  178,  190,
      189,  188,  181,  191,  199,  190,  175,  180,  177,  191,
      199,  189,  187,  188,  200,  201,  179,  202,  172,  199,
      200,  201,  191,  202,  190,  203,  211,  212,  171,  213,
      214,  203,  211,  212,  201,  213,  214,  221,  170,  222,
      203,  223,  169,  221,  212,  222,  202,  223,  168,  163,
      162,  159,  148,  144,  143,  142,  141,  140,  134,  133,
      129,  117,  221,  116,  114,  112,  110,  107,  222,  225,
      225,  225,  225,  225,  225,  226,  226,  226,  226,  226,

      226,  227,  227,  106,  227,  228,  228,   99,  228,  229,
      229,  230,  230,  230,  230,   97,  230,  231,  231,   93,
      231,  232,  232,   83,  232,  234,  234,   81,  234,  235,
      235,  235,  235,  235,  235,  236,   75,  236,  236,  236,
      236,  237,  237,  237,  237,  237,  237,  238,  238,  238,
      238,  238,  238,  239,  239,  239,  239,  239,  239,  240,
      240,  240,  240,  240,  240,   73,   68,   62,   61,   51,
       49,   43,   21,  224,  224,  224,  224,  224,  224,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,

      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      224,  224,  224,  224,  224,  224,  224
    } ;

static yyconst flex_int16_t yy_rule_linenum[46] =
    {   0,
      111,  113,  114,  115,  118,  119,  120,  121,  122,  123,
      124,  126,  127,  128,  129,  131,  132,  134,  135,  136,
      137,  138,  139,  140,  142,  143,  144,  145,  146,  147,
      148,  149,  150,  151,  152,  153,  154,  155,  156,  157,
      159,  160,  161,  162,  164
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "BIFScanner.lpp"
/***************************************************************************
 *   Copyright (C) 2005 by Christophe GONZALES and Pierre-Henri WUILLEMIN  *
 *   {prenom.nom}_at_lip6.fr                                               *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program; if not, write to the                         *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 ***************************************************************************/
/* $Id: scanner.ll 44 2008-10-23 09:03:19Z tb $ -*- mode: c++ -*- */
#line 22 "BIFScanner.lpp"
#include <iostream>
#include <vector>

#include <agrum/core/hashTable.h>

#include <agrum/BN/io/BIFparser/BIFScanner.h>

/* import the parser's token type into a local typedef */
typedef gum_bif::BIFParser::token token;
typedef gum_bif::BIFParser::token_type token_type;

int property_caller;

/* By default yylex returns int, we use token_type. Unfortunately yyterminate
 * by default returns 0, which is not of token_type. */
#define yyterminate() return token::END

/* This disables inclusion of unistd.h, which is not available under Visual C++
 * on Win32. The C++ scanner uses STL streams instead. */
#define YY_NO_UNISTD_H

#define string_yylval() yylval->StringVal = new std::string(yytext, yyleng);
#define int_yylval()    yylval->Int = atoi(yytext);
#define float_yylval()  yylval->Float = atof(yytext);

/*** Flex Declarations and Options ***/
/* enable c++ scanner class generation */
/* change the name of the scanner class. results in "SkoobFlexLexer" */
/* the manual says "somewhat more optimized" */
/* enable scanner to generate debug output. disable this for release
 * versions. */
/* no support for include files is planned */
/* enables the use of start condition stacks */
/* The following paragraph suffices to track locations accurately. Each time
 * yylex is invoked, the begin position is moved onto the end position. */
#line 73 "BIFScanner.lpp"
#define YY_USER_ACTION  yylloc->columns(yyleng);









#line 789 "BIFScanner.cpp"

#define INITIAL 0
#define IN_PROPERTY 1
#define IN_BEG_PROPERTY 2
#define IN_DISCRETE 3
#define IN_BEG_DISCRETE 4
#define IN_PROBA 5
#define IN_BEG_PROBA 6
#define IN_COND_PROBA 7
#define IN_BEG_NETWORK 8
#define IN_NETWORK 9

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#include <unistd.h>
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */
/* %if-bison-bridge */
/* %endif */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */
/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define ECHO LexerOutput( yytext, yyleng )
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
\
/* %if-c++-only C++ definition \ */\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#define YY_FATAL_ERROR(msg) LexerError( msg )
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */

/* %ok-for-header */

/* %not-for-header */

/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define YY_DECL int yyFlexLexer::yylex()
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
/* %% [7.0] user's declarations go here */
#line 108 "BIFScanner.lpp"



#line 959 "BIFScanner.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyin = & std::cin;
/* %endif */

		if ( ! yyout )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyout = & std::cout;
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 225 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 224 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				std::cerr << "--scanner backing up\n";
			else if ( yy_act < 46 )
				std::cerr << "--accepting rule at line " << yy_rule_linenum[yy_act] <<
				         "(\"" << yytext << "\")\n";
			else if ( yy_act == 46 )
				std::cerr << "--accepting default rule (\"" << yytext << "\")\n";
			else if ( yy_act == 47 )
				std::cerr << "--(end of buffer or a NUL)\n";
			else
				std::cerr << "--EOF (start condition " << YY_START << ")\n";
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 111 "BIFScanner.lpp"
/* remove comments */
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 113 "BIFScanner.lpp"
{ property_caller=YYSTATE; BEGIN (IN_BEG_PROPERTY); }
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 114 "BIFScanner.lpp"
/* we do nothing */
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 115 "BIFScanner.lpp"
{ BEGIN (property_caller); }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 118 "BIFScanner.lpp"
{ return token::TOK_DOUBLE_QUOTE; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 119 "BIFScanner.lpp"
{ return token::TOK_QUOTE; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 120 "BIFScanner.lpp"
{ return token::TOK_BEG_PARENTHESIS; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 121 "BIFScanner.lpp"
{ return token::TOK_END_PARENTHESIS; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 122 "BIFScanner.lpp"
{ return token::TOK_SEMICOLON; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 123 "BIFScanner.lpp"
{ return token::TOK_EQUAL; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 124 "BIFScanner.lpp"
{ return token::TOK_COMMA; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 126 "BIFScanner.lpp"
{ BEGIN(IN_BEG_NETWORK); return token::TOK_NETWORK; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 127 "BIFScanner.lpp"
{ string_yylval(); return token::TOK_WORD; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 128 "BIFScanner.lpp"
{ BEGIN (IN_NETWORK); return token::TOK_BEG_CURLY; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 129 "BIFScanner.lpp"
{ BEGIN (INITIAL); return token::TOK_END_CURLY; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 131 "BIFScanner.lpp"
{ return token::TOK_VARIABLE; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 132 "BIFScanner.lpp"
{ return token::TOK_TYPE; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 134 "BIFScanner.lpp"
{ BEGIN (IN_BEG_DISCRETE); return token::TOK_DISCRETE; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 135 "BIFScanner.lpp"
{ int_yylval(); return token::TOK_INTEGER; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 136 "BIFScanner.lpp"
{ return token::TOK_BEG_BRACKET; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 137 "BIFScanner.lpp"
{ return token::TOK_END_BRACKET; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 138 "BIFScanner.lpp"
{ BEGIN (IN_DISCRETE); return token::TOK_BEG_CURLY; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 139 "BIFScanner.lpp"
{ string_yylval(); return token::TOK_MODALITY; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 140 "BIFScanner.lpp"
{ BEGIN (INITIAL); return token::TOK_END_CURLY; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 142 "BIFScanner.lpp"
{ BEGIN (IN_BEG_PROBA); return token::TOK_PROBABILITY; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 143 "BIFScanner.lpp"
{ return token::TOK_BEG_PARENTHESIS; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 144 "BIFScanner.lpp"
{ return token::TOK_END_PARENTHESIS; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 145 "BIFScanner.lpp"
{ return token::TOK_BAR; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 146 "BIFScanner.lpp"
{ string_yylval(); return token::TOK_WORD; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 147 "BIFScanner.lpp"
{ int_yylval(); return token::TOK_INTEGER; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 148 "BIFScanner.lpp"
{ BEGIN (IN_PROBA); return token::TOK_BEG_CURLY; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 149 "BIFScanner.lpp"
{ BEGIN (IN_COND_PROBA); return token::TOK_BEG_PARENTHESIS; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 150 "BIFScanner.lpp"
{ string_yylval(); return token::TOK_MODALITY; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 151 "BIFScanner.lpp"
{ BEGIN (IN_PROBA); return token::TOK_END_PARENTHESIS; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 152 "BIFScanner.lpp"
{ return token::TOK_DEFAULT; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 153 "BIFScanner.lpp"
{ return token::TOK_TABLE; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 154 "BIFScanner.lpp"
{ float_yylval(); return token::TOK_FLOAT; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 155 "BIFScanner.lpp"
{ int_yylval(); return token::TOK_INTEGER; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 156 "BIFScanner.lpp"
{ int_yylval(); return token::TOK_INTEGER; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 157 "BIFScanner.lpp"
{ BEGIN (INITIAL); return token::TOK_END_CURLY; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 159 "BIFScanner.lpp"
{ float_yylval();  return token::TOK_FLOAT; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 160 "BIFScanner.lpp"
{ int_yylval();    return token::TOK_INTEGER; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 161 "BIFScanner.lpp"
{ string_yylval(); return token::TOK_WORD; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 162 "BIFScanner.lpp"
{ string_yylval(); return token::TOK_MODALITY; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 164 "BIFScanner.lpp"
/* remove superfluous characters */
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 166 "BIFScanner.lpp"
ECHO;
	YY_BREAK
#line 1300 "BIFScanner.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(IN_PROPERTY):
case YY_STATE_EOF(IN_BEG_PROPERTY):
case YY_STATE_EOF(IN_DISCRETE):
case YY_STATE_EOF(IN_BEG_DISCRETE):
case YY_STATE_EOF(IN_PROBA):
case YY_STATE_EOF(IN_BEG_PROBA):
case YY_STATE_EOF(IN_COND_PROBA):
case YY_STATE_EOF(IN_BEG_NETWORK):
case YY_STATE_EOF(IN_NETWORK):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	BIFfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	BIFfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
int yyFlexLexer::yy_get_next_buffer()
/* %endif */
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					BIFrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) BIFrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */

/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_get_previous_state()
/* %endif */
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 225 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
/* %endif */
{
	register int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 225 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 224);

	return yy_is_jam ? 0 : yy_current_state;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyunput( int c, register char* yy_bp)
/* %endif */
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yyinput()
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyrestart( std::istream* input_file )
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_load_buffer_state()
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) BIFalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) BIFalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		BIFfree((void *) b->yy_ch_buf  );

	BIFfree((void *) b  );
}

/* %if-c-only */
/* %endif */

/* %if-c++-only */

extern "C" int isatty (int );

/* %endif */

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_is_interactive = 0;
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypop_buffer_state (void)
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yyensure_buffer_stack(void)
/* %endif */
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)BIFalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)BIFrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_push_state( int new_state )
/* %endif */
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) BIFalloc(new_size  );

		else
			(yy_start_stack) = (int *) BIFrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_pop_state()
/* %endif */
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yy_top_state()
/* %endif */
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* %if-reentrant */
/* %endif */
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *BIFalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *BIFrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void BIFfree (void * ptr )
{
	free( (char *) ptr );	/* see BIFrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 166 "BIFScanner.lpp"



namespace gum_bif {

  BIFScanner::BIFScanner(std::istream* in, std::ostream* out)
    : BIFFlexLexer(in, out)
  {
    GUM_CONSTRUCTOR( BIFScanner );
  }

  BIFScanner::~BIFScanner()
  {
    GUM_DESTRUCTOR( BIFScanner );
  }

  void BIFScanner::set_debug(bool b)
  {
    yy_flex_debug = b;
  }

}

 /* This implementation of ExampleFlexLexer::yylex() is required to fill the
  * vtable of the class ExampleFlexLexer. We define the scanner's main yylex
  * function via YY_DECL to reside in the Scanner class instead. */

#ifdef yylex
#undef yylex
#endif

int BIFFlexLexer::yylex()
{
    std::cerr << "In BIFFlexLexer::yylex() !" << std::endl;
    return 0;
}

 /* When the scanner receives an end-of-file indication from YY_INPUT, it then
  * checks the yywrap() function. If yywrap() returns false (zero), then it is
  * assumed that the function has gone ahead and set up `yyin' to point to
  * another input file, and scanning continues. If it returns true (non-zero),
  * then the scanner terminates, returning 0 to its caller. */

int BIFFlexLexer::yywrap()
{
    return 1;
}

