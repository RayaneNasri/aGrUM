/***************************************************************************
 *   Copyright (C) 2005 by Christophe GONZALES and Pierre-Henri WUILLEMIN  *
 *   {prenom.nom}_at_lip6.fr                                               *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program; if not, write to the                         *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 ***************************************************************************/
/* $Id: scanner.ll 44 2008-10-23 09:03:19Z tb $ -*- mode: c++ -*- */
%{ /*** C/C++ Declarations ***/
#include <iostream>
#include <vector>

#include <agrum/core/hashTable.h>

#include <agrum/BN/io/BIFparser/BIFScanner.h>

/* import the parser's token type into a local typedef */
typedef gum_bif::BIFParser::token token;
typedef gum_bif::BIFParser::token_type token_type;

int property_caller;

/* By default yylex returns int, we use token_type. Unfortunately yyterminate
 * by default returns 0, which is not of token_type. */
#define yyterminate() return token::END

/* This disables inclusion of unistd.h, which is not available under Visual C++
 * on Win32. The C++ scanner uses STL streams instead. */
#define YY_NO_UNISTD_H

#define string_yylval() yylval->StringVal = new std::string(yytext, yyleng);
#define int_yylval()    yylval->Int = atoi(yytext);
#define float_yylval()  yylval->Float = atof(yytext);

%}

/*** Flex Declarations and Options ***/

/* enable c++ scanner class generation */
%option c++

/* change the name of the scanner class. results in "SkoobFlexLexer" */
%option prefix="BIF"

/* the manual says "somewhat more optimized" */
%option batch

/* enable scanner to generate debug output. disable this for release
 * versions. */
%option debug

/* no support for include files is planned */
%option yywrap nounput

/* enables the use of start condition stacks */
%option stack

/* The following paragraph suffices to track locations accurately. Each time
 * yylex is invoked, the begin position is moved onto the end position. */
%{
#define YY_USER_ACTION  yylloc->columns(yyleng);
%}

NETWORK         "network"
VARIABLE        "variable"
PROBABILITY     "probability"
PROPERTY        "property"
TYPE            "type"
DISCRETE        "discrete"
DEFAULTVALUE    "default"
TABLE           "table"

DIGIT    [0-9]
LETTER   [a-zA-Z_.?-]
WORD     {LETTER}({LETTER}|{DIGIT})*
INTEGER  ({DIGIT}|[1-9][0-9]*)
COMMENT  ("//"[^\n]*|"/*"([^*]*|("*"[^/])*)*"*/")
EXPONENT [eE]([+,-])?([0-9])+
FLOAT    (([0-9])+"."([0-9])*{EXPONENT}?|"."([0-9])+{EXPONENT}?|([0-9])+{EXPONENT})

%x IN_PROPERTY

%%

 /* code to place at the beginning of yylex() */
%{
    // reset location
    yylloc->step();
%}

 /* gobble up properties */
<*>{PROPERTY}              { property_caller=YYSTATE; BEGIN (IN_PROPERTY); }
<IN_PROPERTY>[^;]*     /* we do nothing */
<IN_PROPERTY>[;]           { BEGIN (property_caller); }

 /* gobble up white-spaces */
<*>[ \t\r]+ {
    yylloc->step();
}

 /* gobble up end-of-lines */
<*>\n {
    yylloc->lines(yyleng); yylloc->step();
}

<*>{COMMENT}   /* remove comments */

["] { return token::TOK_DOUBLE_QUOTE; }
['] { return token::TOK_QUOTE; }
[(] { return token::TOK_BEG_PARENTHESIS; }
[)] { return token::TOK_END_PARENTHESIS; }
[;] { return token::TOK_SEMICOLON; }
[=] { return token::TOK_EQUAL; }
[,] { return token::TOK_COMMA; }
[|] { return token::TOK_BAR; }
[[] { return token::TOK_BEG_BRACKET; }
[]] { return token::TOK_END_BRACKET; }
[{] { return token::TOK_BEG_CURLY; }
[}] { return token::TOK_END_CURLY; }

{NETWORK}      { return token::TOK_NETWORK; }
{VARIABLE}     { return token::TOK_VARIABLE; }
{TYPE}         { return token::TOK_TYPE; }
{DISCRETE}     { return token::TOK_DISCRETE; }
{PROBABILITY}  { return token::TOK_PROBABILITY; }
{DEFAULTVALUE} { return token::TOK_DEFAULT; }
{TABLE}        { return token::TOK_TABLE; }

{WORD}         { string_yylval(); return token::TOK_WORD; }
{INTEGER}      { int_yylval(); return token::TOK_INTEGER; }
{FLOAT}        { float_yylval(); return token::TOK_FLOAT; }

%% /*** Additional Code ***/

namespace gum_bif {

  BIFScanner::BIFScanner(std::istream* in, std::ostream* out)
    : BIFFlexLexer(in, out)
  {
    GUM_CONSTRUCTOR( BIFScanner );
  }

  BIFScanner::~BIFScanner()
  {
    GUM_DESTRUCTOR( BIFScanner );
  }

  void BIFScanner::set_debug(bool b)
  {
    yy_flex_debug = b;
  }

}

 /* This implementation of ExampleFlexLexer::yylex() is required to fill the
  * vtable of the class ExampleFlexLexer. We define the scanner's main yylex
  * function via YY_DECL to reside in the Scanner class instead. */

#ifdef yylex
#undef yylex
#endif

int BIFFlexLexer::yylex()
{
    std::cerr << "In BIFFlexLexer::yylex() !" << std::endl;
    return 0;
}

 /* When the scanner receives an end-of-file indication from YY_INPUT, it then
  * checks the yywrap() function. If yywrap() returns false (zero), then it is
  * assumed that the function has gone ahead and set up `yyin' to point to
  * another input file, and scanning continues. If it returns true (non-zero),
  * then the scanner terminates, returning 0 to its caller. */

int BIFFlexLexer::yywrap()
{
    return 1;
}

