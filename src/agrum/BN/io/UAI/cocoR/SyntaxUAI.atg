#include <iostream>
#include <tuple>

#include <agrum/core/cast_unicode.h>

#undef TRY
#define  TRY(inst) try { inst; } catch (gum::Exception& e) { SemErr(e.errorType());}

COMPILER UAI

void SemErr(std::string s) {
  SemErr(widen(s).c_str());
}

void Warning(std::string s) {
  Warning(widen("Warning : "+s).c_str());
}

using quartet=std::tuple<float,int,int,int>;

/* 
void checkQuartets() {
  auto isInt = [] (q)  {return (std::get<0>(q)==-1);};
  auto hasVal = [] (q) {return (isInt(q))?(std::get<1>(q)):(std::get<0>(q));}
  
  for(auto& q : quartets) {
    std::cout<<isInt(q)?"FLOAT":"INT"
            <<" "<<hasVal(q)
            <<"   "<<std::get<2>(q)<<":"<<std::get<3>(q)<<std::endl;
  }
}
*/

void checkQuartets() {
  for(auto& q : quartets) {
    std::string s=(std::get<1>(q)==-1)?"FLOAT":"INT";
    float v=(std::get<1>(q)==-1)?(std::get<0>(q)):(std::get<1>(q));
    std::cout<<s<<" "<<v<<"   "<<std::get<2>(q)<<":"<<std::get<3>(q)<<std::endl;
  }
}

std::vector<quartet> quartets;

//=====================
CHARACTERS
  digit  = '0'..'9'.

//=====================
TOKENS
  eol    = '\n'.
  integer = digit { digit }.              /* integer part */
  float = (
            [ "+" | "-" ] digit { digit }"." digit { digit }              /* digits after the mandatory point */
            [ ( "E" | "e" ) [ "+" | "-" ] digit { digit } ]                 /* optional exponent part */
           |
            [ "+" | "-" ] digit { digit }                 /* integer part */
            ( "E" | "e" ) [ "+" | "-" ] digit { digit }   /* mandatory exponent part */
            )
.


//=====================
COMMENTS FROM "#" TO '\n'

IGNORE '\t'+'\r'+'\n'

//=====================
PRODUCTIONS

NUMBER =
  float  (. quartets.push_back(std::make_tuple(coco_atof(t->val),-1               ,t->line,t->col)); .)
  |
  integer (. quartets.push_back(std::make_tuple(-1.0             ,coco_atoi(t->val),t->line,t->col)); .)
.

LISTE = 
  NUMBER
  [LISTE]
  .
  
UAI = "BAYES" LISTE (. checkQuartets(); .).
  

END UAI.

