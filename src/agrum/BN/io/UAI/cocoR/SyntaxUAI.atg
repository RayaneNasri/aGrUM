
#include <iostream>

#include <agrum/core/cast_unicode.h>

#include <agrum/BN/IBayesNet.h>
#include <agrum/BN/IBayesNetFactory.h>

#undef TRY
#define  TRY(inst) try { inst; } catch (gum::Exception& e) { SemErr(e.errorType());}

COMPILER UAI

gum::IBayesNetFactory* __factory;

void setFactory(gum::IBayesNetFactory* f) {
  __factory=f;
}

gum::IBayesNetFactory& factory(void) {
  if (__factory) return *__factory;
  GUM_ERROR(gum::OperationNotAllowed,"Please set a factory for scanning UAI file...");
}

void SemErr(std::string s) {
  SemErr(widen(s).c_str());
}

void Warning(std::string s) {
  Warning(widen("Warning : "+s).c_str());
}

void __checkSizeOfProbabilityAssignation(const std::vector<float>&v,const std::string& var, int res) {
  if ((int) v.size()<res)
    Warning("Not enough data in probability assignation for node "+var);
  if ((int) v.size()>res)
    Warning("Too many data in probability assignation for node "+var);
}



//=====================
CHARACTERS
  letter = 'A'..'Z' + 'a'..'z'+ '_' .
  odd_letter = letter - 'e' - 'E'.
  nextletter = letter + '.' .
  digit  = '0'..'9'.
  //'\n' = '\n'.

//=====================
TOKENS
  integer = digit { digit }.              /* integer part */

  number = (
            [ "+" | "-" ] digit { digit }"." digit { digit }              /* digits after the mandatory point */
            [ ( "E" | "e" ) [ "+" | "-" ] digit { digit } ]                 /* optional exponent part */
           |
            [ "+" | "-" ] digit { digit }                 /* integer part */
            ( "E" | "e" ) [ "+" | "-" ] digit { digit }   /* mandatory exponent part */
            )
.


//=====================
COMMENTS FROM "#" TO '\n'

IGNORE '\r' + '\t'

//=====================
PRODUCTIONS

EOLS = '\n' {'\n'}.

INT<int& val> = integer (. val=coco_atoi(t->val); .).

FLOAT<float& val> =
  number  (. val=coco_atof(t->val); .)
  |
  integer (. val=coco_atoi(t->val); .)
.

LISTE_FLOAT<. std::vector<float>& v .> =   (. float value; .)
  FLOAT<value>                            (. v.push_back(value); .)
  LISTE_FLOAT2<v>
  '\n'
.

LISTE_FLOAT2<. std::vector<float>& v .> =   (. float value; .)
  FLOAT<value>                            (. v.push_back(value); .)
  [LISTE_FLOAT2<v>]
.

LISTE_INT<. std::vector<int>& v .> =   (. int value; .)
  INT<value>                            (. v.push_back(value); .)
  LISTE_INT2<v>
  '\n'
.

LISTE_INT2<. std::vector<int>& v .> =   (. int value; .)
  INT<value>                            (. v.push_back(value); .)
  [LISTE_INT2<v>]
.

L_LISTE_INT<. std::vector<std::vector<int> >& vv .> = (. std::vector<int> v; .)
    LISTE_INT<v> (. vv.push_back(v); .)
    EOLS
    [ L_LISTE_INT<vv>]
.

L_LISTE_FLOAT<. std::vector<std::vector<float> >& vv .> = (. std::vector<float> v; .)
    LISTE_FLOAT<v> (. vv.push_back(v); .)
    EOLS
    [ L_LISTE_FLOAT<vv>]
.

//==============
UAI =
    EOLS
    "BAYES" (. std::cout<<"bien parti"<<std::endl; .)
    EOLS
    PREAMBULE
    EOLS
    CPTS
    EOLS
.

PREAMBULE = (. int val; std::vector<int> v;std::vector<std::vector<int> > vv; .)
    INT<val> (. std::cout<<"nbr de var :"<<val<<std::endl; .)
    EOLS
    LISTE_INT<v> (. std::cout<<"domains :"<<v<<std::endl; .)
    EOLS
    INT<val> (. std::cout<<"nbr de pot :"<<val<<std::endl; .)
    EOLS
    L_LISTE_INT<vv> (. std::cout<<"parents :"<<vv<<std::endl; .)
.

CPTS =
    CPT
    EOLS
    [CPTS]
.

CPT = (. int val;std::vector<std::vector<float> > vv; .)
    INT<val> (. std::cout<<"nbr de floats "<<val<<std::endl; .)
    EOLS
    L_LISTE_FLOAT<vv> (. std::cout<<"probas :"<<vv<<std::endl; .)
.




END UAI.

