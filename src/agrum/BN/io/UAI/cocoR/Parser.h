/***************************************************************************
 *  aGrUM modified frames and atg files for cocoR
 *   Copyright (c) 2005 by Christophe GONZALES and Pierre-Henri WUILLEMIN  *
 *   {prenom.nom}_at_lip6.fr
***************************************************************************/
/*----------------------------------------------------------------------
Compiler Generator Coco/R,
Copyright (c) 1990, 2004 Hanspeter Moessenboeck, University of Linz
extended by M. Loeberbauer & A. Woess, Univ. of Linz
ported to C++ by Csaba Balazs, University of Szeged
with improvements by Pat Terry, Rhodes University

This program is free software; you can redistribute it and/or modify it
under the terms of the GNU General Public License as published by the
Free Software Foundation; either version 2, or (at your option) any
later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

You should have received a copy of the GNU General Public License along
with this program; if not, write to the Free Software Foundation, Inc.,
59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

As an exception, it is allowed to write an extension of Coco/R that is
used as a plugin in non-free software.

If not otherwise stated, any source code generated by Coco/R (other than
Coco/R itself) does not fall under the GNU General Public License.
-----------------------------------------------------------------------*/


#if !defined(gum_UAI_COCO_PARSER_H__)
#define gum_UAI_COCO_PARSER_H__

#include <iostream>
#include <tuple>

#include <agrum/core/cast_unicode.h>

#undef TRY
#define  TRY(inst) try { inst; } catch (gum::Exception& e) { SemErr(e.errorType());}

#include <iostream>
#include <string>
#include <fstream>
#include "Scanner.h"

namespace gum {
namespace UAI {


class Parser {
  private:
    	enum {
		_EOF=0,
		_eol=1,
		_integer=2,
		_float=3
	};
	int maxT;

    Token* dummyToken;
    int errDist;
    int minErrDist;

    void SynErr( int n );
    void Get();
    void Expect( int n );
    bool StartOf( int s );
    void ExpectWeak( int n, int follow );
    bool WeakSeparator( int n, int syFol, int repFol );

    ErrorsContainer  __errors;

  public:
    Scanner* scanner;

    Token* t;     // last recognized token
    Token* la;      // lookahead token

    void SemErr(std::string s) {
  SemErr(widen(s).c_str());
}

void Warning(std::string s) {
  Warning(widen("Warning : "+s).c_str());
}

using quartet=std::tuple<float,int,int,int>;

/* 
void checkQuartets() {
  auto isInt = [] (q)  {return (std::get<0>(q)==-1);};
  auto hasVal = [] (q) {return (isInt(q))?(std::get<1>(q)):(std::get<0>(q));}
  
  for(auto& q : quartets) {
    std::cout<<isInt(q)?"FLOAT":"INT"
            <<" "<<hasVal(q)
            <<"   "<<std::get<2>(q)<<":"<<std::get<3>(q)<<std::endl;
  }
}
*/

void checkQuartets() {
  for(auto& q : quartets) {
    std::string s=(std::get<1>(q)==-1)?"FLOAT":"INT";
    float v=(std::get<1>(q)==-1)?(std::get<0>(q)):(std::get<1>(q));
    std::cout<<s<<" "<<v<<"   "<<std::get<2>(q)<<":"<<std::get<3>(q)<<std::endl;
  }
}

std::vector<quartet> quartets;

//=====================

    Parser( Scanner* scanner );
    ~Parser();
    void SemErr( const wchar_t* msg );
    void SynErr( const std::wstring& filename,int line, int col, int n );
    void Warning( const wchar_t* msg );
    const ErrorsContainer& errors() const;

    	void NUMBER();
	void LISTE();
	void UAI();

    void Parse();

}; // end Parser

} // namespace
} // namespace


#endif // !defined(COCO_PARSER_H__)

