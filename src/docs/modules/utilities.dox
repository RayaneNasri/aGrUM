/**************************************************************************
*   Copyright (c) 2005-2023 by Pierre-Henri WUILLEMIN(@LIP6) & Christophe GONZALES(@AMU)   *
*   info_at_agrum_dot_org                                               *
*                                                                         *
*   This program is free software; you can redistribute it and/or modify  *
*   it under the terms of the GNU General Public License as published by  *
*   the Free Software Foundation; either version 2 of the License, or     *
*   (at your option) any later version.                                   *
*                                                                         *
*   This program is distributed in the hope that it will be useful,       *
*   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
*   GNU General Public License for more details.                          *
*                                                                         *
*   You should have received a copy of the GNU General Public License     *
*   along with this program; if not, write to the                         *
*   Free Software Foundation, Inc.,                                       *
*   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
***************************************************************************/
/**
 * @file
 * @brief The utility documentation page.
 *
 * @author Pierre-Henri WUILLEMIN(@LIP6) & Christophe GONZALES(@AMU)
 * @author Lionel TORTI
 */

/**
 * \defgroup utilities_group Utilities
 * @{
 * About aGrUM utilities.
 *
 * \defgroup math_group Math
 * @{
 * All the maths you'll need.
 * @}
 *
 * \defgroup configuration_group Configuration
 * @{
 * About aGrUM configuration.
 * @}
 *
 * \defgroup refptr_group Smart Pointers
 * @{
 * RefPtr are a replacement for the usual pointers: they keep track of the
 * number of "smart" pointers pointing to a given element. When an element is
 * no more referenced by any smart pointer, it is deleted. Hence using RefPtr,
 * developers do not have to worry anymore about memory leaks. The correct way
 * to use RefPtr is by creating unnamed temporaries like: @code RefPtr ( new
 * myObject ) @endcode In any case, if you decide to pass a named pointer as
 * argument to a RefPtr, make sure you will do it only once, that it is
 * allocated on the heap and that you never try to deallocate it yourself, else
 * your program will crash.
 *
 * @par Usage example:
 * @code
 * // creation of smart pointer
 * RefPtr<int> ptr1 (new int (4));
 *
 * // copying (and sharing) this pointer into new smart pointers
 * RefPtr<int> ptr2 = ptr1, ptr3;
 * ptr3 = ptr1;
 *
 * // make ptr2 point toward nothing (this does not deallocate int (4) as it is
 * // pointed to by ptr1 and ptr3)
 * ptr2.clear ();
 *
 * // modifying the value pointed to by the dumb pointer contained in ptr1
 * *ptr1 = 5;
 *
 * // print the content of ptr3
 * cerr << *ptr3 << " = 5" << endl;
 *
 * // check whether ptr1 and ptr3 reference the same dumb pointer
 * if (ptr1 == ptr2) cerr << "reference the same dumb pointer" << endl;
 *
 * // check whether ptr1 and ptr2 contain a dumb pointer
 * if (ptr1 && !ptr2) cerr << "check containers" << endl;
 * @endcode
 *
 * @}
 *
 * @}
 */
