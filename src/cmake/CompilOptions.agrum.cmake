set(AGRUM_INLINING_POLICY "")#"-fno-inline-small-functions")

include (CheckCXXCompilerFlag)
set (WARNING_FLAGS "-Wall -pedantic")
check_cxx_compiler_flag("${WARNING_FLAGS}" _SUPPORT_WARNING_FLAGS)
if (_SUPPORT_WARNING_FLAGS)
  set (CMAKE_CXX_FLAGS "${WARNING_FLAGS} ${CMAKE_CXX_FLAGS}")
endif ()

find_package (CXX14)
if (CXX14_FOUND)
	if (MSVC)
		# looks like it is not needed for visual C++
	else()
		set (AGRUM_CXX_FLAGS "${CXX14_FLAGS} ${AGRUM_CXX_FLAGS}" )
	endif ()
else ()
  message(FATAL_ERROR "** aGrUM error: aGrUM is now using C++14. Please find a compiler (for instance GCC) C++14 compliant")
endif ()

if(MINGW)
  set(WIN32_STYLE_FLAGS 0)
  set(UNIX_STYLE_FLAGS  1)
endif(MINGW)
if(UNIX)
  set(WIN32_STYLE_FLAGS 0)
  set(UNIX_STYLE_FLAGS  1)
endif(UNIX)

if("${CMAKE_SYSTEM_PROCESSOR}" STREQUAL "x86_64")
	set(AGRUM_PROCESSOR "64")
else("${CMAKE_SYSTEM_PROCESSOR}" STREQUAL "x86_64")
	set(AGRUM_PROCESSOR "32")
endif("${CMAKE_SYSTEM_PROCESSOR}" STREQUAL "x86_64")

set(AGRUM_VERSION "${AGRUM_VERSION_MAJOR}.${AGRUM_VERSION_MINOR}.${AGRUM_VERSION_PATCH}")

if (MSVC)
	set(MVSC_FLAGS "/DNOMINMAX /bigobj /D_CRT_SECURE_NO_WARNINGS /D_CRT_NONSTDC_NO_DEPRECATE /MP")
else()
	set(MVSC_FLAGS "")
endif()

if (MINGW)
   set(MINGW_FLAGS "-O2 -D_FORTIFY_SOURCE=2 -pipe -fno-plt -fexceptions --param=ssp-buffer-size=4 -DGUM_NO_INLINE -DGUM_NO_EXTERN_TEMPLATE_CLASS")
else()
   set(MINGW_FLAGS "")
endif()

set(CMAKE_CXX_FLAGS_DEBUG " -DGUM_DEBUG_MODE -DGUM_NO_INLINE ${MVSC_FLAGS} ${MINGW_FLAGS} ${CMAKE_CXX_FLAGS_DEBUG}")
set(CMAKE_C_FLAGS_DEBUG " -DGUM_DEBUG_MODE -DGUM_NO_INLINE ${MVSC_FLAGS} ${MINGW_FLAGS} ${CMAKE_C_FLAGS_DEBUG}")

set(CMAKE_CXX_FLAGS_RELEASE "${AGRUM_OPTIMIZATION} -DNDEBUG ${AGRUM_INLINING_POLICY} ${MVSC_FLAGS} ${MINGW_FLAGS} ${CMAKE_CXX_FLAGS_RELEASE}")
set(CMAKE_C_FLAGS_RELEASE "${AGRUM_OPTIMIZATION} -DNDEBUG ${AGRUM_INLINING_POLICY} ${MVSC_FLAGS} ${MINGW_FLAGS} ${CMAKE_C_FLAGS_RELEASE}")


if ("${CMAKE_BUILD_TYPE}" STREQUAL "DEBUG")
  set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -pg -ggdb")
  set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -pg -ggdb")
  set(CMAKE_MODULE_LINKER_FLAGS "${CMAKE_MODULE_LINKER_FLAGS} -pg -ggdb")
endif ()

if(WIN32)
  set(LIBRARY_OUTPUT_PATH ${AGRUM_BINARY_DIR})
endif(WIN32)
if(UNIX)
  set(LIBRARY_OUTPUT_PATH ${AGRUM_BINARY_DIR}/lib)
endif(UNIX)

if ("${CMAKE_VERBOSE_MAKEFILE}" STREQUAL "ON")
  set(GUM_TRACE_ON FALSE)
endif ("${CMAKE_VERBOSE_MAKEFILE}" STREQUAL "ON")

if (GUM_COVERAGE)
  if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
    set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -fno-omit-frame-pointer --coverage")
    set(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} -fno-omit-frame-pointer --coverage")
    set(GUM_COVERAGE_LINK_LIBRARY "gcov")
  else ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
    message(FATAL_ERROR "** Configuration error: code coverage is only supported with GNU GCC.")
  endif ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
else (GUM_COVERAGE)
  set (GUM_COVERAGE_LINK_LIBRARY "" )
endif(GUM_COVERAGE)

if (BUILD_PYTHON OR BUILD_JAVA)
    message(STATUS "** aGrUM Notification: setting options for Wrappers")
    set(AGRUM_SWIG_FLAGS " -DSWIG -DSWIG_TYPE_TABLE=pyAgrum")
    set(CMAKE_CXX_FLAGS_DEBUG "${AGRUM_SWIG_FLAGS} ${CMAKE_CXX_FLAGS_DEBUG}")
    set(CMAKE_C_FLAGS_DEBUG "${AGRUM_SWIG_FLAGS} ${CMAKE_C_FLAGS_DEBUG}")

    set(CMAKE_CXX_FLAGS_RELEASE "${AGRUM_SWIG_FLAGS} ${CMAKE_CXX_FLAGS_RELEASE}")
    set(CMAKE_C_FLAGS_RELEASE "${AGRUM_SWIG_FLAGS} ${CMAKE_C_FLAGS_RELEASE}")
endif ()

set(CMAKE_CXX_FLAGS "${AGRUM_CXX_FLAGS} ${CMAKE_CXX_FLAGS}")
