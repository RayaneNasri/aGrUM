#!/usr/bin/python
# -*- coding: utf-8 -*-

#***************************************************************************
#*   Copyright (C) 2015 by Pierre-Henri WUILLEMIN                          *
#*   {prenom.nom}_at_lip6.fr                                               *
#*                                                                         *
#*   This program is free software; you can redistribute it and/or modify  *
#*   it under the terms of the GNU General Public License as published by  *
#*   the Free Software Foundation; either version 2 of the License, or     *
#*   (at your option) any later version.                                   *
#*                                                                         *
#*   This program is distributed in the hope that it will be useful,       *
#*   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
#*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
#*   GNU General Public License for more details.                          *
#*                                                                         *
#*   You should have received a copy of the GNU General Public License     *
#*   along with this program; if not, write to the                         *
#*   Free Software Foundation, Inc.,                                       *
#*   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
#***************************************************************************
def testManagement(current,cde):
  if cde=="all":
    writeTestList(allTests(current))
  elif cde=='list':
    afficheTests(current)
    sys.exit(0)
  else:
    l=checkTestList(cde)
    writeTestList(l)

def checkTestList(cde):
  res=[]
  alltests=allTests()
  for ss in cde.split('+'):
    s='/'+ss+'TestSuite.h'
    name=""
    for tryfile in alltests:
      if tryfile.endswith(s):
        name=tryfile
        break
    if name=="":
      print(ERROR+'Test "src/testunits/[module]/'+OKGREEN+ss+ERROR+'TestSuite.h" does not exists for the selected modules'+ENDC)
      print()
      afficheTests()
      sys.exit(0)
    else:
      res.append(name)
  return res

def writeTestList(l):
  today = datetime.now()
  f = open('src/testunits/testList.cmake', 'w')
  f.write("# file automatically generated by act\n")
  f.write("# "+today.strftime("%A, %d. %B %Y %H:%M")+"\n")
  f.write("# do not change it\n")
  f.write("set(AGRUM_TESTS \n  ")
  f.write("\n  ".join(l))
  f.write("\n)\n")
  f.close()
  f = open('src/testunits/testList.all', 'w')
  f.write("# file automatically generated by act\n")
  f.write("# "+today.strftime("%A, %d. %B %Y %H:%M")+"\n")
  f.write("# do not change it\n")
  f.write("set(AGRUM_TESTS \n  ")
  f.write("\n  ".join(l))
  f.write("\n)\n")
  f.close()

def CrossPlatformRelPath(x,y):
  return os.path.relpath(x,"src/testunits").replace("\\","/")

def allTests(current):
  s=[]

  if current['test_base']:
    s+=[CrossPlatformRelPath(x,"src/testunits")
        for x in glob.glob('src/testunits/module_BASE/*TestSuite.h')]

  for x in current['module'].split('+'):
    s+=[CrossPlatformRelPath(x,"src/testunits")
        for x in glob.glob('src/testunits/module_'+x.upper()+'/*TestSuite.h')]

  return sorted(s)

def checkTestListCmake():
    if not os.path.exists('src/testunits/testList.cmake'):
      writeTestList(allTests())
    else:
      with open('src/testunits/testList.cmake') as f:
        content = f.readlines()

      res=[]
      rewrite=False
      for line in content:
        if line[0:2]=="  ":
          s=line.strip()
          if not os.path.exists('src/testunits/'+s):
            print(ERROR+'Test '+WARNING+s[:-11]+ERROR+' (src/testunits/'+s+') does not exist => removing it from tests list'+ENDC)
            rewrite=True
          else:
            res.append(s)
      if rewrite:
        writeTestList(res)

def afficheTestsForModule(m):
  print("="*(2+len(m)))
  print(" "+m+" ")
  print("="*(2+len(m)))

  l=allTests()
  prefix="module_"+m.upper()+"/"
  l=[s[len(prefix):-11] for s in l if s.startswith(prefix)]
  w=max([len(x) for x in l])
  nbr=80/w
  i=0
  for s in l:
      print(s.ljust(w),end="\t")
      i+=1
      if i>nbr:
          i=0
          print("")
  if i!=0:
      print("")
  print("")


def afficheTests(current):
  if current['test_base']:
    afficheTestsForModule('BASE')
  for modul in current['module'].split('+'):
    afficheTestsForModule(modul)
